
NUCLEO-L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00000640  20000000  20000000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM2      00000000  10000000  10000000  00040640  2**0
                  CONTENTS
  2 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000bcb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000bf58  0800be40  0800be40  0001be40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08017d98  08017d98  00040640  2**0
                  CONTENTS
  6 .ARM          00000008  08017d98  08017d98  00027d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08017da0  08017da0  00040640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08017da0  08017da0  00027da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08017da4  08017da4  00027da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000718  20000640  08017da8  00030640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a40  20000d58  080184c0  00030d58  2**3
                  ALLOC
 12 ._user_heap_stack 00001000  20001798  080184c0  00031798  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY
 15 .debug_info   000171d2  00000000  00000000  00040703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003ef6  00000000  00000000  000578d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00006e6d  00000000  00000000  0005b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000bd8  00000000  00000000  00062638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c2e  00000000  00000000  00063210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002af3f  00000000  00000000  00063e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00016c61  00000000  00000000  0008ed7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f92fe  00000000  00000000  000a59de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000031b0  00000000  00000000  0019ecdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  001a1e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d58 	.word	0x20000d58
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be28 	.word	0x0800be28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d5c 	.word	0x20000d5c
 80001cc:	0800be28 	.word	0x0800be28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b98e 	b.w	8000edc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f824 	bl	8000c14 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__aeabi_d2ulz+0x34>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fd09 	bl	80005f8 <__aeabi_dmul>
 8000be6:	f000 f97b 	bl	8000ee0 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc8a 	bl	8000504 <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fd00 	bl	80005f8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb42 	bl	8000288 <__aeabi_dsub>
 8000c04:	f000 f96c 	bl	8000ee0 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b500      	push	{lr}
 8000f22:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f24:	2244      	movs	r2, #68	; 0x44
 8000f26:	2100      	movs	r1, #0
 8000f28:	a805      	add	r0, sp, #20
 8000f2a:	f008 fece 	bl	8009cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2e:	2214      	movs	r2, #20
 8000f30:	2100      	movs	r1, #0
 8000f32:	4668      	mov	r0, sp
 8000f34:	f008 fec9 	bl	8009cca <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3c:	f000 fc3c 	bl	80017b8 <HAL_PWREx_ControlVoltageScaling>
 8000f40:	b108      	cbz	r0, 8000f46 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f42:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f46:	2210      	movs	r2, #16
 8000f48:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f4c:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f52:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f56:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f5a:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f62:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f000 fceb 	bl	8001944 <HAL_RCC_OscConfig>
 8000f6e:	b108      	cbz	r0, 8000f74 <SystemClock_Config+0x54>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f74:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	220f      	movs	r2, #15
 8000f7a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f86:	f000 ff5d 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000f8a:	b108      	cbz	r0, 8000f90 <SystemClock_Config+0x70>
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <SystemClock_Config+0x6e>
}
 8000f90:	b017      	add	sp, #92	; 0x5c
 8000f92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f98 <main>:
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000f9c:	f000 fa1c 	bl	80013d8 <HAL_Init>
  SystemClock_Config();
 8000fa0:	f7ff ffbe 	bl	8000f20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	a80f      	add	r0, sp, #60	; 0x3c
 8000faa:	f008 fe8e 	bl	8009cca <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b59      	ldr	r3, [pc, #356]	; (8001114 <main+0x17c>)
 8000fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb2:	f042 0204 	orr.w	r2, r2, #4
 8000fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fba:	f002 0204 	and.w	r2, r2, #4
 8000fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8000fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fcc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8000fd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fde:	f002 0201 	and.w	r2, r2, #1
 8000fe2:	920b      	str	r2, [sp, #44]	; 0x2c
 8000fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe8:	f042 0202 	orr.w	r2, r2, #2
 8000fec:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001002:	f000 fbcb 	bl	800179c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100e:	4842      	ldr	r0, [pc, #264]	; (8001118 <main+0x180>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001012:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001014:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101a:	f000 fae1 	bl	80015e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001020:	a90f      	add	r1, sp, #60	; 0x3c
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800102e:	f000 fad7 	bl	80015e0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <main+0x184>)
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <main+0x188>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001036:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001038:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 800103c:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800103e:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001040:	f000 fa70 	bl	8001524 <HAL_CRC_Init>
 8001044:	4604      	mov	r4, r0
 8001046:	b108      	cbz	r0, 800104c <main+0xb4>
 8001048:	b672      	cpsid	i
  while (1)
 800104a:	e7fe      	b.n	800104a <main+0xb2>
	err = ai_network_create_and_init(&network, act_addr, NULL);
 800104c:	4d35      	ldr	r5, [pc, #212]	; (8001124 <main+0x18c>)
  MX_X_CUBE_AI_Init();
 800104e:	f002 ff93 	bl	8003f78 <MX_X_CUBE_AI_Init>
	const ai_handle act_addr[] = { activations };
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <main+0x190>)
 8001054:	930f      	str	r3, [sp, #60]	; 0x3c
	err = ai_network_create_and_init(&network, act_addr, NULL);
 8001056:	a90f      	add	r1, sp, #60	; 0x3c
 8001058:	4622      	mov	r2, r4
 800105a:	4628      	mov	r0, r5
 800105c:	f003 fc32 	bl	80048c4 <ai_network_create_and_init>
	if (err.type != AI_ERROR_NONE){
 8001060:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001064:	d001      	beq.n	800106a <main+0xd2>
 8001066:	b672      	cpsid	i
  while (1)
 8001068:	e7fe      	b.n	8001068 <main+0xd0>
	ai_input = ai_network_inputs_get(network, NULL);
 800106a:	6828      	ldr	r0, [r5, #0]
 800106c:	9106      	str	r1, [sp, #24]
 800106e:	f003 fb8b 	bl	8004788 <ai_network_inputs_get>
 8001072:	4f2e      	ldr	r7, [pc, #184]	; (800112c <main+0x194>)
	ai_output = ai_network_outputs_get(network, NULL);
 8001074:	9906      	ldr	r1, [sp, #24]
	ai_input = ai_network_inputs_get(network, NULL);
 8001076:	6038      	str	r0, [r7, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8001078:	6828      	ldr	r0, [r5, #0]
 800107a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001144 <main+0x1ac>
    aiInData[0] = 3.0;
 800107e:	4c2c      	ldr	r4, [pc, #176]	; (8001130 <main+0x198>)
 8001080:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001148 <main+0x1b0>
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001084:	4e2b      	ldr	r6, [pc, #172]	; (8001134 <main+0x19c>)
	ai_output = ai_network_outputs_get(network, NULL);
 8001086:	f003 fb89 	bl	800479c <ai_network_outputs_get>
  sprintf(ResultStr, "aiInData[0] aiInData[1] aiOutData[0] aiOutData[1]\r\n");
 800108a:	492b      	ldr	r1, [pc, #172]	; (8001138 <main+0x1a0>)
	ai_output = ai_network_outputs_get(network, NULL);
 800108c:	f8c8 0000 	str.w	r0, [r8]
  sprintf(ResultStr, "aiInData[0] aiInData[1] aiOutData[0] aiOutData[1]\r\n");
 8001090:	a80d      	add	r0, sp, #52	; 0x34
 8001092:	f008 fdb7 	bl	8009c04 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <main+0x1a4>)
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2208      	movs	r2, #8
 800109c:	a90d      	add	r1, sp, #52	; 0x34
 800109e:	f001 fc85 	bl	80029ac <HAL_UART_Transmit>
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80010a2:	6839      	ldr	r1, [r7, #0]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80010a4:	f8d8 2000 	ldr.w	r2, [r8]
	batch = ai_network_run(network, ai_input, ai_output);
 80010a8:	6828      	ldr	r0, [r5, #0]
    aiInData[0] = 3.0;
 80010aa:	f8c4 9000 	str.w	r9, [r4]
    aiInData[1] = 1.0;
 80010ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010b2:	6063      	str	r3, [r4, #4]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80010b4:	604c      	str	r4, [r1, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80010b6:	6056      	str	r6, [r2, #4]
	batch = ai_network_run(network, ai_input, ai_output);
 80010b8:	f003 fc4b 	bl	8004952 <ai_network_run>
	if (batch != 1){
 80010bc:	2801      	cmp	r0, #1
 80010be:	d004      	beq.n	80010ca <main+0x132>
		err = ai_network_get_error(network);
 80010c0:	6828      	ldr	r0, [r5, #0]
 80010c2:	f003 fb51 	bl	8004768 <ai_network_get_error>
 80010c6:	b672      	cpsid	i
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x130>
	sprintf(ResultStr, "%f %f %f %f\r\n", aiInData[0], aiInData[1], aiOutData[0], aiOutData[1]);
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	f7ff fa3c 	bl	8000548 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	6870      	ldr	r0, [r6, #4]
 80010d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010e2:	6830      	ldr	r0, [r6, #0]
 80010e4:	f7ff fa30 	bl	8000548 <__aeabi_f2d>
 80010e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80010ec:	6860      	ldr	r0, [r4, #4]
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80010f6:	e9cd 0100 	strd	r0, r1, [sp]
 80010fa:	4911      	ldr	r1, [pc, #68]	; (8001140 <main+0x1a8>)
 80010fc:	a80f      	add	r0, sp, #60	; 0x3c
 80010fe:	f008 fd81 	bl	8009c04 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	2208      	movs	r2, #8
 8001106:	a90f      	add	r1, sp, #60	; 0x3c
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <main+0x1a4>)
 800110a:	f001 fc4f 	bl	80029ac <HAL_UART_Transmit>
  MX_X_CUBE_AI_Process();
 800110e:	f002 ff3a 	bl	8003f86 <MX_X_CUBE_AI_Process>
  while (1)
 8001112:	e7c6      	b.n	80010a2 <main+0x10a>
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	200013cc 	.word	0x200013cc
 8001120:	40023000 	.word	0x40023000
 8001124:	20001474 	.word	0x20001474
 8001128:	20000d74 	.word	0x20000d74
 800112c:	200013c4 	.word	0x200013c4
 8001130:	200013b4 	.word	0x200013b4
 8001134:	200013bc 	.word	0x200013bc
 8001138:	0800ca8c 	.word	0x0800ca8c
 800113c:	200013f0 	.word	0x200013f0
 8001140:	0800cac0 	.word	0x0800cac0
 8001144:	200013c8 	.word	0x200013c8
 8001148:	40400000 	.word	0x40400000

0800114c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x34>)
{
 8001150:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001152:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001156:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800115c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	f001 fd1b 	bl	8002ba8 <HAL_UART_Init>
 8001172:	b108      	cbz	r0, 8001178 <MX_USART2_UART_Init+0x2c>
 8001174:	b672      	cpsid	i
  while (1)
 8001176:	e7fe      	b.n	8001176 <MX_USART2_UART_Init+0x2a>
}
 8001178:	bd08      	pop	{r3, pc}
 800117a:	bf00      	nop
 800117c:	200013f0 	.word	0x200013f0
 8001180:	40004400 	.word	0x40004400

08001184 <Error_Handler>:
 8001184:	b672      	cpsid	i
  while (1)
 8001186:	e7fe      	b.n	8001186 <Error_Handler+0x2>

08001188 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MspInit+0x2c>)
 800118a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	661a      	str	r2, [r3, #96]	; 0x60
 8001192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001194:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	f002 0201 	and.w	r2, r2, #1
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011a4:	659a      	str	r2, [r3, #88]	; 0x58
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b0:	b002      	add	sp, #8
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80011b8:	6802      	ldr	r2, [r0, #0]
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_CRC_MspInit+0x24>)
 80011bc:	429a      	cmp	r2, r3
{
 80011be:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80011c0:	d10a      	bne.n	80011d8 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011c2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80011c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011cc:	649a      	str	r2, [r3, #72]	; 0x48
 80011ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011d8:	b002      	add	sp, #8
 80011da:	4770      	bx	lr
 80011dc:	40023000 	.word	0x40023000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	b0aa      	sub	sp, #168	; 0xa8
 80011e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	2214      	movs	r2, #20
 80011e8:	2100      	movs	r1, #0
 80011ea:	a803      	add	r0, sp, #12
 80011ec:	f008 fd6d 	bl	8009cca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	2288      	movs	r2, #136	; 0x88
 80011f2:	2100      	movs	r1, #0
 80011f4:	a808      	add	r0, sp, #32
 80011f6:	f008 fd68 	bl	8009cca <memset>
  if(huart->Instance==USART2)
 80011fa:	6822      	ldr	r2, [r4, #0]
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_UART_MspInit+0x94>)
 80011fe:	429a      	cmp	r2, r3
 8001200:	d135      	bne.n	800126e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001202:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001206:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f000 fff2 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	b108      	cbz	r0, 8001212 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800120e:	f7ff ffb9 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001216:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
 800121c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800121e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001222:	9201      	str	r2, [sp, #4]
 8001224:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	64da      	str	r2, [r3, #76]	; 0x4c
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2602      	movs	r6, #2
 800123a:	2304      	movs	r3, #4
 800123c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2503      	movs	r5, #3
 8001242:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001244:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001246:	a903      	add	r1, sp, #12
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001250:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001252:	f000 f9c5 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001256:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800125c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125e:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001268:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800126a:	f000 f9b9 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126e:	b02a      	add	sp, #168	; 0xa8
 8001270:	bd70      	pop	{r4, r5, r6, pc}
 8001272:	bf00      	nop
 8001274:	40004400 	.word	0x40004400
 8001278:	40021000 	.word	0x40021000

0800127c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler>

0800127e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler>

08001280 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler>

08001282 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler>

08001284 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler>

08001286 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 b8ba 	b.w	8001404 <HAL_IncTick>

08001290 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001290:	2001      	movs	r0, #1
 8001292:	4770      	bx	lr

08001294 <_kill>:

int _kill(int pid, int sig)
{
 8001294:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001296:	f008 fd8d 	bl	8009db4 <__errno>
 800129a:	2316      	movs	r3, #22
 800129c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	bd08      	pop	{r3, pc}

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80012a6:	f008 fd85 	bl	8009db4 <__errno>
 80012aa:	2316      	movs	r3, #22
 80012ac:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80012ae:	e7fe      	b.n	80012ae <_exit+0xa>

080012b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	460d      	mov	r5, r1
 80012b4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	460e      	mov	r6, r1
 80012b8:	1b73      	subs	r3, r6, r5
 80012ba:	429c      	cmp	r4, r3
 80012bc:	dc01      	bgt.n	80012c2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80012be:	4620      	mov	r0, r4
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80012c2:	f3af 8000 	nop.w
 80012c6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	e7f5      	b.n	80012b8 <_read+0x8>

080012cc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80012d8:	2000      	movs	r0, #0
 80012da:	4770      	bx	lr

080012dc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80012dc:	2001      	movs	r0, #1
 80012de:	4770      	bx	lr

080012e0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80012e0:	2000      	movs	r0, #0
 80012e2:	4770      	bx	lr

080012e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <_sbrk+0x30>)
 80012e6:	6811      	ldr	r1, [r2, #0]
{
 80012e8:	b510      	push	{r4, lr}
 80012ea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012ec:	b909      	cbnz	r1, 80012f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <_sbrk+0x34>)
 80012f0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	6810      	ldr	r0, [r2, #0]
 80012f4:	4909      	ldr	r1, [pc, #36]	; (800131c <_sbrk+0x38>)
 80012f6:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <_sbrk+0x3c>)
 80012f8:	4403      	add	r3, r0
 80012fa:	1b09      	subs	r1, r1, r4
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d906      	bls.n	800130e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001300:	f008 fd58 	bl	8009db4 <__errno>
 8001304:	230c      	movs	r3, #12
 8001306:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001308:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800130c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800130e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001310:	e7fc      	b.n	800130c <_sbrk+0x28>
 8001312:	bf00      	nop
 8001314:	20001478 	.word	0x20001478
 8001318:	20001798 	.word	0x20001798
 800131c:	20018000 	.word	0x20018000
 8001320:	00000800 	.word	0x00000800

08001324 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <SystemInit+0x10>)
 8001326:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800132a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800133c:	f7ff fff2 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <LoopForever+0x6>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <LoopForever+0xe>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <LoopForever+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f008 fd2b 	bl	8009dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136a:	f7ff fe15 	bl	8000f98 <main>

0800136e <LoopForever>:

LoopForever:
    b LoopForever
 800136e:	e7fe      	b.n	800136e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001370:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001374:	20000640 	.word	0x20000640
  ldr r1, =_edata
 8001378:	20000d58 	.word	0x20000d58
  ldr r2, =_sidata
 800137c:	08017da8 	.word	0x08017da8
  ldr r2, =_sbss
 8001380:	20000d58 	.word	0x20000d58
  ldr r4, =_ebss
 8001384:	20001798 	.word	0x20001798

08001388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC1_2_IRQHandler>
	...

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_InitTick+0x40>)
 8001390:	781a      	ldrb	r2, [r3, #0]
{
 8001392:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001394:	b90a      	cbnz	r2, 800139a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001396:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001398:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f2 	udiv	r3, r3, r2
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_InitTick+0x44>)
 80013a4:	6810      	ldr	r0, [r2, #0]
 80013a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013aa:	f000 f8a7 	bl	80014fc <HAL_SYSTICK_Config>
 80013ae:	4604      	mov	r4, r0
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	2d0f      	cmp	r5, #15
 80013b6:	d8ee      	bhi.n	8001396 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	4602      	mov	r2, r0
 80013ba:	4629      	mov	r1, r5
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f86a 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_InitTick+0x48>)
 80013c6:	4620      	mov	r0, r4
 80013c8:	601d      	str	r5, [r3, #0]
  return status;
 80013ca:	e7e5      	b.n	8001398 <HAL_InitTick+0xc>
 80013cc:	20000644 	.word	0x20000644
 80013d0:	20000640 	.word	0x20000640
 80013d4:	20000648 	.word	0x20000648

080013d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_Init+0x28>)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80013e0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e6:	f000 f845 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff ffce 	bl	800138c <HAL_InitTick>
 80013f0:	4604      	mov	r4, r0
 80013f2:	b918      	cbnz	r0, 80013fc <HAL_Init+0x24>
    HAL_MspInit();
 80013f4:	f7ff fec8 	bl	8001188 <HAL_MspInit>
}
 80013f8:	4620      	mov	r0, r4
 80013fa:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80013fc:	2401      	movs	r4, #1
 80013fe:	e7fb      	b.n	80013f8 <HAL_Init+0x20>
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x10>)
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_IncTick+0x14>)
 8001408:	6811      	ldr	r1, [r2, #0]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	440b      	add	r3, r1
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000147c 	.word	0x2000147c
 8001418:	20000644 	.word	0x20000644

0800141c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_GetTick+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000147c 	.word	0x2000147c

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff fff6 	bl	800141c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001430:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001432:	bf1c      	itt	ne
 8001434:	4b05      	ldrne	r3, [pc, #20]	; (800144c <HAL_Delay+0x24>)
 8001436:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001438:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800143a:	bf18      	it	ne
 800143c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	f7ff ffed 	bl	800141c <HAL_GetTick>
 8001442:	1b43      	subs	r3, r0, r5
 8001444:	42a3      	cmp	r3, r4
 8001446:	d3fa      	bcc.n	800143e <HAL_Delay+0x16>
  {
  }
}
 8001448:	bd38      	pop	{r3, r4, r5, pc}
 800144a:	bf00      	nop
 800144c:	20000644 	.word	0x20000644

08001450 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001450:	4800      	ldr	r0, [pc, #0]	; (8001454 <HAL_GetHalVersion+0x4>)
 8001452:	4770      	bx	lr
 8001454:	010d0300 	.word	0x010d0300

08001458 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <HAL_GetREVID+0x8>)
 800145a:	6818      	ldr	r0, [r3, #0]
}
 800145c:	0c00      	lsrs	r0, r0, #16
 800145e:	4770      	bx	lr
 8001460:	e0042000 	.word	0xe0042000

08001464 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetDEVID+0xc>)
 8001466:	6818      	ldr	r0, [r3, #0]
}
 8001468:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e0042000 	.word	0xe0042000

08001474 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001476:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001484:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001490:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b530      	push	{r4, r5, lr}
 800149c:	68dc      	ldr	r4, [r3, #12]
 800149e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	bf28      	it	cs
 80014ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b4:	bf8c      	ite	hi
 80014b6:	3c03      	subhi	r4, #3
 80014b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ba:	fa05 f303 	lsl.w	r3, r5, r3
 80014be:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c2:	40a5      	lsls	r5, r4
 80014c4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80014ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	bfac      	ite	ge
 80014d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	4a08      	ldrlt	r2, [pc, #32]	; (80014f8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	bfb8      	it	lt
 80014de:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	bfaa      	itet	ge
 80014e6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014f0:	bd30      	pop	{r4, r5, pc}
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	e000ed14 	.word	0xe000ed14

080014fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	3801      	subs	r0, #1
 80014fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001502:	d20b      	bcs.n	800151c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001504:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	21f0      	movs	r1, #240	; 0xf0
 800150e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001512:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001514:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001516:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001518:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800151c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001524:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001526:	4604      	mov	r4, r0
 8001528:	b908      	cbnz	r0, 800152e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800152c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800152e:	7f43      	ldrb	r3, [r0, #29]
 8001530:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001534:	b913      	cbnz	r3, 800153c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001536:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001538:	f7ff fe3e 	bl	80011b8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800153c:	2302      	movs	r3, #2
 800153e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001540:	7923      	ldrb	r3, [r4, #4]
 8001542:	b9e3      	cbnz	r3, 800157e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_CRC_Init+0x70>)
 8001548:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	f022 0218 	bic.w	r2, r2, #24
 8001550:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001552:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001554:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001556:	b9d2      	cbnz	r2, 800158e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800155c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	6961      	ldr	r1, [r4, #20]
 8001562:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69a1      	ldr	r1, [r4, #24]
 800156e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001576:	2301      	movs	r3, #1
 8001578:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	e7d6      	b.n	800152c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800157e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001582:	4620      	mov	r0, r4
 8001584:	f000 f808 	bl	8001598 <HAL_CRCEx_Polynomial_Set>
 8001588:	2800      	cmp	r0, #0
 800158a:	d0e2      	beq.n	8001552 <HAL_CRC_Init+0x2e>
 800158c:	e7cd      	b.n	800152a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800158e:	6922      	ldr	r2, [r4, #16]
 8001590:	e7e4      	b.n	800155c <HAL_CRC_Init+0x38>
 8001592:	bf00      	nop
 8001594:	04c11db7 	.word	0x04c11db7

08001598 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001598:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800159a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800159c:	3b01      	subs	r3, #1
 800159e:	d31c      	bcc.n	80015da <HAL_CRCEx_Polynomial_Set+0x42>
 80015a0:	fa21 f403 	lsr.w	r4, r1, r3
 80015a4:	07e4      	lsls	r4, r4, #31
 80015a6:	d5f9      	bpl.n	800159c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80015a8:	2a10      	cmp	r2, #16
 80015aa:	d012      	beq.n	80015d2 <HAL_CRCEx_Polynomial_Set+0x3a>
 80015ac:	d804      	bhi.n	80015b8 <HAL_CRCEx_Polynomial_Set+0x20>
 80015ae:	b13a      	cbz	r2, 80015c0 <HAL_CRCEx_Polynomial_Set+0x28>
 80015b0:	2a08      	cmp	r2, #8
 80015b2:	d010      	beq.n	80015d6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80015b4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80015b6:	e00b      	b.n	80015d0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80015b8:	2a18      	cmp	r2, #24
 80015ba:	d1fb      	bne.n	80015b4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80015bc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80015be:	d8f9      	bhi.n	80015b4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80015c0:	6800      	ldr	r0, [r0, #0]
 80015c2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80015c4:	6883      	ldr	r3, [r0, #8]
 80015c6:	f023 0318 	bic.w	r3, r3, #24
 80015ca:	4313      	orrs	r3, r2
 80015cc:	6083      	str	r3, [r0, #8]
 80015ce:	2000      	movs	r0, #0
}
 80015d0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	e7f3      	b.n	80015be <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	e7f1      	b.n	80015be <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d1ea      	bne.n	80015b4 <HAL_CRCEx_Polynomial_Set+0x1c>
 80015de:	e7ef      	b.n	80015c0 <HAL_CRCEx_Polynomial_Set+0x28>

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e8:	4c69      	ldr	r4, [pc, #420]	; (8001790 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80015ea:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	680a      	ldr	r2, [r1, #0]
 80015ee:	fa32 f503 	lsrs.w	r5, r2, r3
 80015f2:	d102      	bne.n	80015fa <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80015f4:	b003      	add	sp, #12
 80015f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fa:	f04f 0e01 	mov.w	lr, #1
 80015fe:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001602:	ea1e 0202 	ands.w	r2, lr, r2
 8001606:	f000 8090 	beq.w	800172a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800160a:	684d      	ldr	r5, [r1, #4]
 800160c:	f005 0603 	and.w	r6, r5, #3
 8001610:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001614:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800161a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800161e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001620:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	f200 8083 	bhi.w	800172e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001628:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800162e:	68cf      	ldr	r7, [r1, #12]
 8001630:	fa07 f708 	lsl.w	r7, r7, r8
 8001634:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001638:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800163a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001644:	409f      	lsls	r7, r3
 8001646:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800164a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800164c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001652:	688f      	ldr	r7, [r1, #8]
 8001654:	fa07 f708 	lsl.w	r7, r7, r8
 8001658:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800165e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001660:	d071      	beq.n	8001746 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001662:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001664:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001668:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166c:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001672:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001674:	d059      	beq.n	800172a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800167a:	f046 0601 	orr.w	r6, r6, #1
 800167e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001682:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001686:	f023 0703 	bic.w	r7, r3, #3
 800168a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800168e:	f006 0601 	and.w	r6, r6, #1
 8001692:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001696:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001698:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800169e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016a0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016a4:	f04f 0c0f 	mov.w	ip, #15
 80016a8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ac:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b4:	d05f      	beq.n	8001776 <HAL_GPIO_Init+0x196>
 80016b6:	4e37      	ldr	r6, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x1b4>)
 80016b8:	42b0      	cmp	r0, r6
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0x19a>
 80016bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016c0:	42b0      	cmp	r0, r6
 80016c2:	d05c      	beq.n	800177e <HAL_GPIO_Init+0x19e>
 80016c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016c8:	42b0      	cmp	r0, r6
 80016ca:	d05a      	beq.n	8001782 <HAL_GPIO_Init+0x1a2>
 80016cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016d0:	42b0      	cmp	r0, r6
 80016d2:	d058      	beq.n	8001786 <HAL_GPIO_Init+0x1a6>
 80016d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016d8:	42b0      	cmp	r0, r6
 80016da:	d056      	beq.n	800178a <HAL_GPIO_Init+0x1aa>
 80016dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016e0:	42b0      	cmp	r0, r6
 80016e2:	bf0c      	ite	eq
 80016e4:	2606      	moveq	r6, #6
 80016e6:	2607      	movne	r6, #7
 80016e8:	fa06 f60e 	lsl.w	r6, r6, lr
 80016ec:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f0:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 80016f2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 80016f4:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80016fa:	bf0c      	ite	eq
 80016fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80016fe:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001700:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001702:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001708:	bf0c      	ite	eq
 800170a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800170c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800170e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001710:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001712:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001716:	bf0c      	ite	eq
 8001718:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800171a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800171c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800171e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001720:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001722:	bf54      	ite	pl
 8001724:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001726:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001728:	6026      	str	r6, [r4, #0]
    position++;
 800172a:	3301      	adds	r3, #1
 800172c:	e75e      	b.n	80015ec <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800172e:	2e03      	cmp	r6, #3
 8001730:	d18c      	bne.n	800164c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001732:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001738:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 800173c:	409f      	lsls	r7, r3
 800173e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001742:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	e78d      	b.n	8001662 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001746:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800174a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001752:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001756:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800175a:	f04f 0e0f 	mov.w	lr, #15
 800175e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001762:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001766:	690f      	ldr	r7, [r1, #16]
 8001768:	fa07 f70b 	lsl.w	r7, r7, fp
 800176c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001770:	f8ca 7020 	str.w	r7, [sl, #32]
 8001774:	e775      	b.n	8001662 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001776:	2600      	movs	r6, #0
 8001778:	e7b6      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 800177a:	2601      	movs	r6, #1
 800177c:	e7b4      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 800177e:	2602      	movs	r6, #2
 8001780:	e7b2      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 8001782:	2603      	movs	r6, #3
 8001784:	e7b0      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 8001786:	2604      	movs	r6, #4
 8001788:	e7ae      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 800178a:	2605      	movs	r6, #5
 800178c:	e7ac      	b.n	80016e8 <HAL_GPIO_Init+0x108>
 800178e:	bf00      	nop
 8001790:	40010400 	.word	0x40010400
 8001794:	48000400 	.word	0x48000400
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	b10a      	cbz	r2, 80017a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	6181      	str	r1, [r0, #24]
 80017a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_PWREx_GetVoltageRange+0xc>)
 80017aa:	6818      	ldr	r0, [r3, #0]
#endif
}
 80017ac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ba:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c4:	d11d      	bne.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ca:	d101      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017cc:	2000      	movs	r0, #0
 80017ce:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2132      	movs	r1, #50	; 0x32
 80017e2:	434b      	muls	r3, r1
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ec:	6951      	ldr	r1, [r2, #20]
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	d500      	bpl.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80017f2:	b923      	cbnz	r3, 80017fe <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f4:	6953      	ldr	r3, [r2, #20]
 80017f6:	055b      	lsls	r3, r3, #21
 80017f8:	d5e8      	bpl.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80017fa:	2003      	movs	r0, #3
}
 80017fc:	4770      	bx	lr
        wait_loop_index--;
 80017fe:	3b01      	subs	r3, #1
 8001800:	e7f4      	b.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001806:	bf1f      	itttt	ne
 8001808:	6813      	ldrne	r3, [r2, #0]
 800180a:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800180e:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001812:	6013      	strne	r3, [r2, #0]
 8001814:	e7da      	b.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x14>
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000
 800181c:	20000640 	.word	0x20000640
 8001820:	000f4240 	.word	0x000f4240

08001824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001824:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001826:	4d1e      	ldr	r5, [pc, #120]	; (80018a0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001828:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800182a:	00da      	lsls	r2, r3, #3
{
 800182c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800182e:	d518      	bpl.n	8001862 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001830:	f7ff ffba 	bl	80017a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001834:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001838:	d123      	bne.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800183a:	2c80      	cmp	r4, #128	; 0x80
 800183c:	d929      	bls.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800183e:	2ca0      	cmp	r4, #160	; 0xa0
 8001840:	bf8c      	ite	hi
 8001842:	2402      	movhi	r4, #2
 8001844:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001846:	4917      	ldr	r1, [pc, #92]	; (80018a4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001848:	680a      	ldr	r2, [r1, #0]
 800184a:	f022 0207 	bic.w	r2, r2, #7
 800184e:	4322      	orrs	r2, r4
 8001850:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001852:	6808      	ldr	r0, [r1, #0]
 8001854:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001858:	1b00      	subs	r0, r0, r4
 800185a:	bf18      	it	ne
 800185c:	2001      	movne	r0, #1
 800185e:	b003      	add	sp, #12
 8001860:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	65ab      	str	r3, [r5, #88]	; 0x58
 800186a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff ff98 	bl	80017a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800187a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001880:	e7d8      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001882:	2c80      	cmp	r4, #128	; 0x80
 8001884:	d807      	bhi.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001886:	d008      	beq.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001888:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800188c:	425c      	negs	r4, r3
 800188e:	415c      	adcs	r4, r3
 8001890:	e7d9      	b.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001892:	2400      	movs	r4, #0
 8001894:	e7d7      	b.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001896:	2403      	movs	r4, #3
 8001898:	e7d5      	b.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800189a:	2402      	movs	r4, #2
 800189c:	e7d3      	b.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_GetSysClockFreq+0x8c>)
 80018aa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ac:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ae:	f012 020c 	ands.w	r2, r2, #12
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x18>
 80018b4:	2a0c      	cmp	r2, #12
 80018b6:	d115      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018bc:	2901      	cmp	r1, #1
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018c0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80018c2:	481d      	ldr	r0, [pc, #116]	; (8001938 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018c4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018c6:	bf55      	itete	pl
 80018c8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018cc:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018ce:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018d2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80018d6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018da:	b34a      	cbz	r2, 8001930 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018dc:	2a0c      	cmp	r2, #12
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x4c>
 80018e0:	2000      	movs	r0, #0
  return sysclockfreq;
 80018e2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018e4:	2a04      	cmp	r2, #4
 80018e6:	d022      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018e8:	2a08      	cmp	r2, #8
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <HAL_RCC_GetSysClockFreq+0x94>)
 80018ec:	bf18      	it	ne
 80018ee:	2000      	movne	r0, #0
 80018f0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018f2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80018fa:	2a02      	cmp	r2, #2
 80018fc:	d015      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x82>
 80018fe:	490f      	ldr	r1, [pc, #60]	; (800193c <HAL_RCC_GetSysClockFreq+0x94>)
 8001900:	2a03      	cmp	r2, #3
 8001902:	bf08      	it	eq
 8001904:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001906:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800190e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001910:	68d8      	ldr	r0, [r3, #12]
 8001912:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001916:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800191a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800191c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800191e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001920:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001924:	fbb2 f0f0 	udiv	r0, r2, r0
 8001928:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_RCC_GetSysClockFreq+0x98>)
 800192c:	e7eb      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	0800cae8 	.word	0x0800cae8
 800193c:	007a1200 	.word	0x007a1200
 8001940:	00f42400 	.word	0x00f42400

08001944 <HAL_RCC_OscConfig>:
{
 8001944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001948:	4605      	mov	r5, r0
 800194a:	b918      	cbnz	r0, 8001954 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
}
 800194e:	b003      	add	sp, #12
 8001950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001954:	4c92      	ldr	r4, [pc, #584]	; (8001ba0 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001956:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800195c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001962:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001966:	d53d      	bpl.n	80019e4 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001968:	b11e      	cbz	r6, 8001972 <HAL_RCC_OscConfig+0x2e>
 800196a:	2e0c      	cmp	r6, #12
 800196c:	d166      	bne.n	8001a3c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800196e:	2f01      	cmp	r7, #1
 8001970:	d164      	bne.n	8001a3c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	0798      	lsls	r0, r3, #30
 8001976:	d502      	bpl.n	800197e <HAL_RCC_OscConfig+0x3a>
 8001978:	69ab      	ldr	r3, [r5, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0e6      	beq.n	800194c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	6a28      	ldr	r0, [r5, #32]
 8001982:	0719      	lsls	r1, r3, #28
 8001984:	bf56      	itet	pl
 8001986:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800198a:	6823      	ldrmi	r3, [r4, #0]
 800198c:	091b      	lsrpl	r3, r3, #4
 800198e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001992:	4298      	cmp	r0, r3
 8001994:	d93b      	bls.n	8001a0e <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001996:	f7ff ff45 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 800199a:	2800      	cmp	r0, #0
 800199c:	d1d6      	bne.n	800194c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	6a2a      	ldr	r2, [r5, #32]
 80019aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ae:	4313      	orrs	r3, r2
 80019b0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	6863      	ldr	r3, [r4, #4]
 80019b4:	69ea      	ldr	r2, [r5, #28]
 80019b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019be:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c0:	f7ff ff72 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x260>)
 80019c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	40d8      	lsrs	r0, r3
 80019d4:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0x264>)
 80019d6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0x268>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f7ff fcd6 	bl	800138c <HAL_InitTick>
        if(status != HAL_OK)
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d1b4      	bne.n	800194e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	07d8      	lsls	r0, r3, #31
 80019e8:	d45f      	bmi.n	8001aaa <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	0799      	lsls	r1, r3, #30
 80019ee:	f100 809e 	bmi.w	8001b2e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	0718      	lsls	r0, r3, #28
 80019f6:	f100 80db 	bmi.w	8001bb0 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	0759      	lsls	r1, r3, #29
 80019fe:	f100 8101 	bmi.w	8001c04 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 816a 	bne.w	8001cde <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e79f      	b.n	800194e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a1c:	4303      	orrs	r3, r0
 8001a1e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	69ea      	ldr	r2, [r5, #28]
 8001a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a2c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	d1c6      	bne.n	80019c0 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a32:	f7ff fef7 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d0c2      	beq.n	80019c0 <HAL_RCC_OscConfig+0x7c>
 8001a3a:	e787      	b.n	800194c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a3c:	69ab      	ldr	r3, [r5, #24]
 8001a3e:	b31b      	cbz	r3, 8001a88 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a48:	f7ff fce8 	bl	800141c <HAL_GetTick>
 8001a4c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	079a      	lsls	r2, r3, #30
 8001a52:	d511      	bpl.n	8001a78 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6023      	str	r3, [r4, #0]
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	6a2a      	ldr	r2, [r5, #32]
 8001a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a64:	4313      	orrs	r3, r2
 8001a66:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a68:	6863      	ldr	r3, [r4, #4]
 8001a6a:	69ea      	ldr	r2, [r5, #28]
 8001a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a74:	6063      	str	r3, [r4, #4]
 8001a76:	e7b5      	b.n	80019e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a78:	f7ff fcd0 	bl	800141c <HAL_GetTick>
 8001a7c:	eba0 0008 	sub.w	r0, r0, r8
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9e4      	bls.n	8001a4e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e762      	b.n	800194e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a90:	f7ff fcc4 	bl	800141c <HAL_GetTick>
 8001a94:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	079b      	lsls	r3, r3, #30
 8001a9a:	d5a3      	bpl.n	80019e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fcbe 	bl	800141c <HAL_GetTick>
 8001aa0:	eba0 0008 	sub.w	r0, r0, r8
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	d9f6      	bls.n	8001a96 <HAL_RCC_OscConfig+0x152>
 8001aa8:	e7ec      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aaa:	2e08      	cmp	r6, #8
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x172>
 8001aae:	2e0c      	cmp	r6, #12
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab2:	2f03      	cmp	r7, #3
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	039a      	lsls	r2, r3, #14
 8001aba:	d596      	bpl.n	80019ea <HAL_RCC_OscConfig+0xa6>
 8001abc:	686b      	ldr	r3, [r5, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d193      	bne.n	80019ea <HAL_RCC_OscConfig+0xa6>
 8001ac2:	e743      	b.n	800194c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	686b      	ldr	r3, [r5, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d110      	bne.n	8001aee <HAL_RCC_OscConfig+0x1aa>
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fca2 	bl	800141c <HAL_GetTick>
 8001ad8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	039b      	lsls	r3, r3, #14
 8001ade:	d484      	bmi.n	80019ea <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fc9c 	bl	800141c <HAL_GetTick>
 8001ae4:	eba0 0008 	sub.w	r0, r0, r8
 8001ae8:	2864      	cmp	r0, #100	; 0x64
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x196>
 8001aec:	e7ca      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af2:	d104      	bne.n	8001afe <HAL_RCC_OscConfig+0x1ba>
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	e7e6      	b.n	8001acc <HAL_RCC_OscConfig+0x188>
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b04:	6022      	str	r2, [r4, #0]
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b0c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001b12:	f7ff fc83 	bl	800141c <HAL_GetTick>
 8001b16:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	0398      	lsls	r0, r3, #14
 8001b1c:	f57f af65 	bpl.w	80019ea <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fc7c 	bl	800141c <HAL_GetTick>
 8001b24:	eba0 0008 	sub.w	r0, r0, r8
 8001b28:	2864      	cmp	r0, #100	; 0x64
 8001b2a:	d9f5      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1d4>
 8001b2c:	e7aa      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b2e:	2e04      	cmp	r6, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
 8001b32:	2e0c      	cmp	r6, #12
 8001b34:	d110      	bne.n	8001b58 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b36:	2f02      	cmp	r7, #2
 8001b38:	d10e      	bne.n	8001b58 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	0559      	lsls	r1, r3, #21
 8001b3e:	d503      	bpl.n	8001b48 <HAL_RCC_OscConfig+0x204>
 8001b40:	68eb      	ldr	r3, [r5, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f43f af02 	beq.w	800194c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	6863      	ldr	r3, [r4, #4]
 8001b4a:	692a      	ldr	r2, [r5, #16]
 8001b4c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001b50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	e74c      	b.n	80019f2 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b58:	68eb      	ldr	r3, [r5, #12]
 8001b5a:	b17b      	cbz	r3, 8001b7c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc5a 	bl	800141c <HAL_GetTick>
 8001b68:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	055a      	lsls	r2, r3, #21
 8001b6e:	d4eb      	bmi.n	8001b48 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fc54 	bl	800141c <HAL_GetTick>
 8001b74:	1bc0      	subs	r0, r0, r7
 8001b76:	2802      	cmp	r0, #2
 8001b78:	d9f7      	bls.n	8001b6a <HAL_RCC_OscConfig+0x226>
 8001b7a:	e783      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc4a 	bl	800141c <HAL_GetTick>
 8001b88:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	055b      	lsls	r3, r3, #21
 8001b8e:	f57f af30 	bpl.w	80019f2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff fc43 	bl	800141c <HAL_GetTick>
 8001b96:	1bc0      	subs	r0, r0, r7
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f6      	bls.n	8001b8a <HAL_RCC_OscConfig+0x246>
 8001b9c:	e772      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	0800cace 	.word	0x0800cace
 8001ba8:	20000640 	.word	0x20000640
 8001bac:	20000648 	.word	0x20000648
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb0:	696b      	ldr	r3, [r5, #20]
 8001bb2:	b19b      	cbz	r3, 8001bdc <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001bb4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fc2c 	bl	800141c <HAL_GetTick>
 8001bc4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001bca:	079a      	lsls	r2, r3, #30
 8001bcc:	f53f af15 	bmi.w	80019fa <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc24 	bl	800141c <HAL_GetTick>
 8001bd4:	1bc0      	subs	r0, r0, r7
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d9f5      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x282>
 8001bda:	e753      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001bdc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001be8:	f7ff fc18 	bl	800141c <HAL_GetTick>
 8001bec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001bf2:	079b      	lsls	r3, r3, #30
 8001bf4:	f57f af01 	bpl.w	80019fa <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc10 	bl	800141c <HAL_GetTick>
 8001bfc:	1bc0      	subs	r0, r0, r7
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9f5      	bls.n	8001bee <HAL_RCC_OscConfig+0x2aa>
 8001c02:	e73f      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c06:	00df      	lsls	r7, r3, #3
 8001c08:	d429      	bmi.n	8001c5e <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c1c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c20:	4f85      	ldr	r7, [pc, #532]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	05d8      	lsls	r0, r3, #23
 8001c26:	d51d      	bpl.n	8001c64 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	68ab      	ldr	r3, [r5, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x342>
 8001c2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fbef 	bl	800141c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c42:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c48:	079a      	lsls	r2, r3, #30
 8001c4a:	d542      	bpl.n	8001cd2 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001c4c:	f1b8 0f00 	cmp.w	r8, #0
 8001c50:	f43f aed7 	beq.w	8001a02 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c5c:	e6d1      	b.n	8001a02 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	f04f 0800 	mov.w	r8, #0
 8001c62:	e7dd      	b.n	8001c20 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fbd6 	bl	800141c <HAL_GetTick>
 8001c70:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	05d9      	lsls	r1, r3, #23
 8001c76:	d4d7      	bmi.n	8001c28 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7ff fbd0 	bl	800141c <HAL_GetTick>
 8001c7c:	eba0 0009 	sub.w	r0, r0, r9
 8001c80:	2802      	cmp	r0, #2
 8001c82:	d9f6      	bls.n	8001c72 <HAL_RCC_OscConfig+0x32e>
 8001c84:	e6fe      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x354>
 8001c8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001c96:	e7ca      	b.n	8001c2e <HAL_RCC_OscConfig+0x2ea>
 8001c98:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001ca4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1c2      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fbb2 	bl	800141c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cbc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001cc2:	079b      	lsls	r3, r3, #30
 8001cc4:	d5c2      	bpl.n	8001c4c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff fba9 	bl	800141c <HAL_GetTick>
 8001cca:	1bc0      	subs	r0, r0, r7
 8001ccc:	4548      	cmp	r0, r9
 8001cce:	d9f6      	bls.n	8001cbe <HAL_RCC_OscConfig+0x37a>
 8001cd0:	e6d8      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fba3 	bl	800141c <HAL_GetTick>
 8001cd6:	1bc0      	subs	r0, r0, r7
 8001cd8:	4548      	cmp	r0, r9
 8001cda:	d9b3      	bls.n	8001c44 <HAL_RCC_OscConfig+0x300>
 8001cdc:	e6d2      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	f040 808f 	bne.w	8001e02 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001ce4:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001ce8:	f003 0103 	and.w	r1, r3, #3
 8001cec:	4291      	cmp	r1, r2
 8001cee:	d124      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001cf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cf6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001cfc:	d11d      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfe:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001d00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d04:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001d08:	d117      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d0a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001d0c:	3a07      	subs	r2, #7
 8001d0e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001d12:	bf18      	it	ne
 8001d14:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d16:	4291      	cmp	r1, r2
 8001d18:	d10f      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001d1c:	0852      	lsrs	r2, r2, #1
 8001d1e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001d22:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d24:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d2a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001d2c:	0852      	lsrs	r2, r2, #1
 8001d2e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001d32:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001d38:	d04a      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3a:	2e0c      	cmp	r6, #12
 8001d3c:	f43f ae06 	beq.w	800194c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	015f      	lsls	r7, r3, #5
 8001d44:	f53f ae02 	bmi.w	800194c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	00de      	lsls	r6, r3, #3
 8001d4c:	f53f adfe 	bmi.w	800194c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001d58:	f7ff fb60 	bl	800141c <HAL_GetTick>
 8001d5c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	0198      	lsls	r0, r3, #6
 8001d62:	d42f      	bmi.n	8001dc4 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	68e2      	ldr	r2, [r4, #12]
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d74:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001d76:	3a01      	subs	r2, #1
 8001d78:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001d7c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001d7e:	0912      	lsrs	r2, r2, #4
 8001d80:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001d84:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001d86:	0852      	lsrs	r2, r2, #1
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001d8e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001d90:	0852      	lsrs	r2, r2, #1
 8001d92:	3a01      	subs	r2, #1
 8001d94:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001d98:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da8:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001daa:	f7ff fb37 	bl	800141c <HAL_GetTick>
 8001dae:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	0199      	lsls	r1, r3, #6
 8001db4:	f53f ae29 	bmi.w	8001a0a <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fb30 	bl	800141c <HAL_GetTick>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	d9f6      	bls.n	8001db0 <HAL_RCC_OscConfig+0x46c>
 8001dc2:	e65f      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fb2a 	bl	800141c <HAL_GetTick>
 8001dc8:	1b80      	subs	r0, r0, r6
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9c7      	bls.n	8001d5e <HAL_RCC_OscConfig+0x41a>
 8001dce:	e659      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	019a      	lsls	r2, r3, #6
 8001dd4:	f53f ae19 	bmi.w	8001a0a <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de0:	68e3      	ldr	r3, [r4, #12]
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001de8:	f7ff fb18 	bl	800141c <HAL_GetTick>
 8001dec:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	f53f ae0a 	bmi.w	8001a0a <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff fb11 	bl	800141c <HAL_GetTick>
 8001dfa:	1b40      	subs	r0, r0, r5
 8001dfc:	2802      	cmp	r0, #2
 8001dfe:	d9f6      	bls.n	8001dee <HAL_RCC_OscConfig+0x4aa>
 8001e00:	e640      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e02:	2e0c      	cmp	r6, #12
 8001e04:	f43f ada2 	beq.w	800194c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e10:	f7ff fb04 	bl	800141c <HAL_GetTick>
 8001e14:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e1e:	68e1      	ldr	r1, [r4, #12]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001e26:	4618      	mov	r0, r3
 8001e28:	e591      	b.n	800194e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff faf7 	bl	800141c <HAL_GetTick>
 8001e2e:	1b40      	subs	r0, r0, r5
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d9f0      	bls.n	8001e16 <HAL_RCC_OscConfig+0x4d2>
 8001e34:	e626      	b.n	8001a84 <HAL_RCC_OscConfig+0x140>
 8001e36:	bf00      	nop
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	f99d808c 	.word	0xf99d808c
 8001e40:	feeefffc 	.word	0xfeeefffc

08001e44 <HAL_RCC_ClockConfig>:
{
 8001e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b910      	cbnz	r0, 8001e54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e4e:	2001      	movs	r0, #1
}
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_RCC_ClockConfig+0x140>)
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d32c      	bcc.n	8001eba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	6821      	ldr	r1, [r4, #0]
 8001e62:	0788      	lsls	r0, r1, #30
 8001e64:	d434      	bmi.n	8001ed0 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	07c9      	lsls	r1, r1, #31
 8001e68:	d43f      	bmi.n	8001eea <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6a:	6821      	ldr	r1, [r4, #0]
 8001e6c:	078a      	lsls	r2, r1, #30
 8001e6e:	d468      	bmi.n	8001f42 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4a44      	ldr	r2, [pc, #272]	; (8001f84 <HAL_RCC_ClockConfig+0x140>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	42ab      	cmp	r3, r5
 8001e7a:	d86f      	bhi.n	8001f5c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	f011 0f04 	tst.w	r1, #4
 8001e80:	4d41      	ldr	r5, [pc, #260]	; (8001f88 <HAL_RCC_ClockConfig+0x144>)
 8001e82:	d177      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	070b      	lsls	r3, r1, #28
 8001e86:	d506      	bpl.n	8001e96 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e88:	68ab      	ldr	r3, [r5, #8]
 8001e8a:	6922      	ldr	r2, [r4, #16]
 8001e8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e94:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e96:	f7ff fd07 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001e9a:	68ab      	ldr	r3, [r5, #8]
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_ClockConfig+0x148>)
 8001e9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	40d8      	lsrs	r0, r3
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCC_ClockConfig+0x14c>)
 8001eb0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_RCC_ClockConfig+0x150>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	f7ff ba69 	b.w	800138c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f023 0307 	bic.w	r3, r3, #7
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec4:	6813      	ldr	r3, [r2, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d1bf      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xa>
 8001ece:	e7c7      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_RCC_ClockConfig+0x144>)
 8001ed2:	68a0      	ldr	r0, [r4, #8]
 8001ed4:	6893      	ldr	r3, [r2, #8]
 8001ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eda:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	bf81      	itttt	hi
 8001ede:	6893      	ldrhi	r3, [r2, #8]
 8001ee0:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001ee4:	4303      	orrhi	r3, r0
 8001ee6:	6093      	strhi	r3, [r2, #8]
 8001ee8:	e7bd      	b.n	8001e66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	6862      	ldr	r2, [r4, #4]
 8001eec:	4e26      	ldr	r6, [pc, #152]	; (8001f88 <HAL_RCC_ClockConfig+0x144>)
 8001eee:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	d11a      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	d0a9      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	68b3      	ldr	r3, [r6, #8]
 8001efc:	f023 0303 	bic.w	r3, r3, #3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f04:	f7ff fa8a 	bl	800141c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f0c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	68b3      	ldr	r3, [r6, #8]
 8001f10:	6862      	ldr	r2, [r4, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f1a:	d0a6      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7ff fa7e 	bl	800141c <HAL_GetTick>
 8001f20:	1bc0      	subs	r0, r0, r7
 8001f22:	4540      	cmp	r0, r8
 8001f24:	d9f3      	bls.n	8001f0e <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001f26:	2003      	movs	r0, #3
 8001f28:	e792      	b.n	8001e50 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	2a02      	cmp	r2, #2
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f32:	e7e1      	b.n	8001ef8 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f34:	b912      	cbnz	r2, 8001f3c <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f36:	f013 0f02 	tst.w	r3, #2
 8001f3a:	e7dd      	b.n	8001ef8 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f40:	e7da      	b.n	8001ef8 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_RCC_ClockConfig+0x144>)
 8001f44:	68a0      	ldr	r0, [r4, #8]
 8001f46:	6893      	ldr	r3, [r2, #8]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4e:	bf3f      	itttt	cc
 8001f50:	6893      	ldrcc	r3, [r2, #8]
 8001f52:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8001f56:	4303      	orrcc	r3, r0
 8001f58:	6093      	strcc	r3, [r2, #8]
 8001f5a:	e789      	b.n	8001e70 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5c:	6813      	ldr	r3, [r2, #0]
 8001f5e:	f023 0307 	bic.w	r3, r3, #7
 8001f62:	432b      	orrs	r3, r5
 8001f64:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	42ab      	cmp	r3, r5
 8001f6e:	f47f af6e 	bne.w	8001e4e <HAL_RCC_ClockConfig+0xa>
 8001f72:	e783      	b.n	8001e7c <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	68ab      	ldr	r3, [r5, #8]
 8001f76:	68e2      	ldr	r2, [r4, #12]
 8001f78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60ab      	str	r3, [r5, #8]
 8001f80:	e780      	b.n	8001e84 <HAL_RCC_ClockConfig+0x40>
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	0800cace 	.word	0x0800cace
 8001f90:	20000640 	.word	0x20000640
 8001f94:	20000648 	.word	0x20000648

08001f98 <HAL_RCC_GetHCLKFreq>:
}
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000640 	.word	0x20000640

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fa6:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb2:	6810      	ldr	r0, [r2, #0]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
}
 8001fb8:	40d8      	lsrs	r0, r3
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	0800cade 	.word	0x0800cade
 8001fc4:	20000640 	.word	0x20000640

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd6:	6810      	ldr	r0, [r2, #0]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
}
 8001fdc:	40d8      	lsrs	r0, r3
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	0800cade 	.word	0x0800cade
 8001fe8:	20000640 	.word	0x20000640

08001fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fee:	4c42      	ldr	r4, [pc, #264]	; (80020f8 <RCCEx_PLLSAI1_Config+0x10c>)
 8001ff0:	68e2      	ldr	r2, [r4, #12]
 8001ff2:	0793      	lsls	r3, r2, #30
{
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ff8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ffa:	d029      	beq.n	8002050 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ffc:	68e2      	ldr	r2, [r4, #12]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	4282      	cmp	r2, r0
 8002004:	d13c      	bne.n	8002080 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8002006:	2a00      	cmp	r2, #0
 8002008:	d03a      	beq.n	8002080 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800200a:	68e3      	ldr	r3, [r4, #12]
       ||
 800200c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800200e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002012:	3301      	adds	r3, #1
       ||
 8002014:	4293      	cmp	r3, r2
 8002016:	d133      	bne.n	8002080 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800201e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7ff f9fc 	bl	800141c <HAL_GetTick>
 8002024:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	d432      	bmi.n	8002092 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800202c:	68aa      	ldr	r2, [r5, #8]
 800202e:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002030:	2e00      	cmp	r6, #0
 8002032:	d035      	beq.n	80020a0 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002034:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002036:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002038:	d14d      	bne.n	80020d6 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800203a:	6929      	ldr	r1, [r5, #16]
 800203c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002040:	0849      	lsrs	r1, r1, #1
 8002042:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002046:	3901      	subs	r1, #1
 8002048:	4313      	orrs	r3, r2
 800204a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800204e:	e031      	b.n	80020b4 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8002050:	2802      	cmp	r0, #2
 8002052:	d011      	beq.n	8002078 <RCCEx_PLLSAI1_Config+0x8c>
 8002054:	2803      	cmp	r0, #3
 8002056:	d015      	beq.n	8002084 <RCCEx_PLLSAI1_Config+0x98>
 8002058:	2801      	cmp	r0, #1
 800205a:	d111      	bne.n	8002080 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	0797      	lsls	r7, r2, #30
 8002060:	d51d      	bpl.n	800209e <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	6869      	ldr	r1, [r5, #4]
 8002066:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800206a:	3901      	subs	r1, #1
 800206c:	ea42 0300 	orr.w	r3, r2, r0
 8002070:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002074:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002076:	e7cf      	b.n	8002018 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002078:	6822      	ldr	r2, [r4, #0]
 800207a:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800207e:	d1f0      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	e00c      	b.n	800209e <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	0391      	lsls	r1, r2, #14
 8002088:	d4eb      	bmi.n	8002062 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002090:	e7f5      	b.n	800207e <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002092:	f7ff f9c3 	bl	800141c <HAL_GetTick>
 8002096:	1bc0      	subs	r0, r0, r7
 8002098:	2802      	cmp	r0, #2
 800209a:	d9c4      	bls.n	8002026 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 800209c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020a0:	6923      	ldr	r3, [r4, #16]
 80020a2:	68e9      	ldr	r1, [r5, #12]
 80020a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	0909      	lsrs	r1, r1, #4
 80020ae:	4313      	orrs	r3, r2
 80020b0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020b4:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020bc:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80020be:	f7ff f9ad 	bl	800141c <HAL_GetTick>
 80020c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	d510      	bpl.n	80020ec <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020ca:	6923      	ldr	r3, [r4, #16]
 80020cc:	69aa      	ldr	r2, [r5, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	2000      	movs	r0, #0
  return status;
 80020d4:	e7e3      	b.n	800209e <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020d6:	6969      	ldr	r1, [r5, #20]
 80020d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020dc:	0849      	lsrs	r1, r1, #1
 80020de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020e2:	3901      	subs	r1, #1
 80020e4:	4313      	orrs	r3, r2
 80020e6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80020ea:	e7e3      	b.n	80020b4 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020ec:	f7ff f996 	bl	800141c <HAL_GetTick>
 80020f0:	1b80      	subs	r0, r0, r6
 80020f2:	2802      	cmp	r0, #2
 80020f4:	d9e6      	bls.n	80020c4 <RCCEx_PLLSAI1_Config+0xd8>
 80020f6:	e7d1      	b.n	800209c <RCCEx_PLLSAI1_Config+0xb0>
 80020f8:	40021000 	.word	0x40021000

080020fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020fe:	4c3b      	ldr	r4, [pc, #236]	; (80021ec <RCCEx_PLLSAI2_Config+0xf0>)
 8002100:	68e2      	ldr	r2, [r4, #12]
 8002102:	0793      	lsls	r3, r2, #30
{
 8002104:	4605      	mov	r5, r0
 8002106:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002108:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800210a:	d026      	beq.n	800215a <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800210c:	68e2      	ldr	r2, [r4, #12]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	4282      	cmp	r2, r0
 8002114:	d139      	bne.n	800218a <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002116:	2a00      	cmp	r2, #0
 8002118:	d037      	beq.n	800218a <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800211a:	68e3      	ldr	r3, [r4, #12]
       ||
 800211c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800211e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002122:	3301      	adds	r3, #1
       ||
 8002124:	4293      	cmp	r3, r2
 8002126:	d130      	bne.n	800218a <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002130:	f7ff f974 	bl	800141c <HAL_GetTick>
 8002134:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	d42f      	bmi.n	800219c <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800213c:	68a9      	ldr	r1, [r5, #8]
 800213e:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002140:	b39e      	cbz	r6, 80021aa <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002142:	6963      	ldr	r3, [r4, #20]
 8002144:	692a      	ldr	r2, [r5, #16]
 8002146:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002150:	3a01      	subs	r2, #1
 8002152:	430b      	orrs	r3, r1
 8002154:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002158:	e031      	b.n	80021be <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800215a:	2802      	cmp	r0, #2
 800215c:	d011      	beq.n	8002182 <RCCEx_PLLSAI2_Config+0x86>
 800215e:	2803      	cmp	r0, #3
 8002160:	d015      	beq.n	800218e <RCCEx_PLLSAI2_Config+0x92>
 8002162:	2801      	cmp	r0, #1
 8002164:	d111      	bne.n	800218a <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	0797      	lsls	r7, r2, #30
 800216a:	d51d      	bpl.n	80021a8 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800216c:	68e2      	ldr	r2, [r4, #12]
 800216e:	6869      	ldr	r1, [r5, #4]
 8002170:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002174:	3901      	subs	r1, #1
 8002176:	ea42 0300 	orr.w	r3, r2, r0
 800217a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800217e:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002180:	e7d2      	b.n	8002128 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002188:	d1f0      	bne.n	800216c <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 800218a:	2001      	movs	r0, #1
 800218c:	e00c      	b.n	80021a8 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800218e:	6822      	ldr	r2, [r4, #0]
 8002190:	0391      	lsls	r1, r2, #14
 8002192:	d4eb      	bmi.n	800216c <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800219a:	e7f5      	b.n	8002188 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800219c:	f7ff f93e 	bl	800141c <HAL_GetTick>
 80021a0:	1bc0      	subs	r0, r0, r7
 80021a2:	2802      	cmp	r0, #2
 80021a4:	d9c7      	bls.n	8002136 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80021a6:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021aa:	6963      	ldr	r3, [r4, #20]
 80021ac:	68ea      	ldr	r2, [r5, #12]
 80021ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	0912      	lsrs	r2, r2, #4
 80021b8:	430b      	orrs	r3, r1
 80021ba:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021be:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80021c8:	f7ff f928 	bl	800141c <HAL_GetTick>
 80021cc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	d505      	bpl.n	80021e0 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80021d4:	6963      	ldr	r3, [r4, #20]
 80021d6:	696a      	ldr	r2, [r5, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	6163      	str	r3, [r4, #20]
 80021dc:	2000      	movs	r0, #0
  return status;
 80021de:	e7e3      	b.n	80021a8 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021e0:	f7ff f91c 	bl	800141c <HAL_GetTick>
 80021e4:	1b80      	subs	r0, r0, r6
 80021e6:	2802      	cmp	r0, #2
 80021e8:	d9f1      	bls.n	80021ce <RCCEx_PLLSAI2_Config+0xd2>
 80021ea:	e7dc      	b.n	80021a6 <RCCEx_PLLSAI2_Config+0xaa>
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80021f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021f4:	6806      	ldr	r6, [r0, #0]
 80021f6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80021fa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80021fe:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002200:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002204:	d022      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002206:	d813      	bhi.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002208:	b331      	cbz	r1, 8002258 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800220a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800220e:	d02a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002210:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	04d8      	lsls	r0, r3, #19
 8002216:	d509      	bpl.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002218:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800221a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800221e:	d02c      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002220:	d826      	bhi.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002222:	b381      	cbz	r1, 8002286 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002224:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002228:	d072      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800222a:	2601      	movs	r6, #1
 800222c:	4635      	mov	r5, r6
 800222e:	e039      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002230:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002234:	d1ec      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002236:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002238:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800223a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800223e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002242:	430b      	orrs	r3, r1
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002248:	2600      	movs	r6, #0
 800224a:	e7e2      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4a36      	ldr	r2, [pc, #216]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800224e:	68d3      	ldr	r3, [r2, #12]
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002256:	e7ee      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002258:	3004      	adds	r0, #4
 800225a:	f7ff fec7 	bl	8001fec <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800225e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002260:	2800      	cmp	r0, #0
 8002262:	d1d6      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002264:	e7e7      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002266:	2100      	movs	r1, #0
 8002268:	3020      	adds	r0, #32
 800226a:	f7ff ff47 	bl	80020fc <RCCEx_PLLSAI2_Config>
 800226e:	e7f6      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002270:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002274:	d1d9      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002276:	4635      	mov	r5, r6
 8002278:	e009      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800227a:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800227c:	68d3      	ldr	r3, [r2, #12]
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	60d3      	str	r3, [r2, #12]
      break;
 8002284:	e7f7      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002286:	1d20      	adds	r0, r4, #4
 8002288:	f7ff feb0 	bl	8001fec <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800228c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800228e:	2d00      	cmp	r5, #0
 8002290:	d144      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002294:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002296:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800229a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800229e:	430b      	orrs	r3, r1
 80022a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	0399      	lsls	r1, r3, #14
 80022a8:	f140 815d 	bpl.w	8002566 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ac:	4f1e      	ldr	r7, [pc, #120]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80022ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b0:	00da      	lsls	r2, r3, #3
 80022b2:	d435      	bmi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80022bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022c6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ca:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800232c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022ce:	f8d9 3000 	ldr.w	r3, [r9]
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80022da:	f7ff f89f 	bl	800141c <HAL_GetTick>
 80022de:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e0:	f8d9 3000 	ldr.w	r3, [r9]
 80022e4:	05db      	lsls	r3, r3, #23
 80022e6:	d523      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80022e8:	bb4d      	cbnz	r5, 800233e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80022f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022f6:	f040 810e 	bne.w	8002516 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800230c:	4635      	mov	r5, r6
 800230e:	e016      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002310:	2100      	movs	r1, #0
 8002312:	f104 0020 	add.w	r0, r4, #32
 8002316:	f7ff fef1 	bl	80020fc <RCCEx_PLLSAI2_Config>
 800231a:	e7b7      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800231c:	462e      	mov	r6, r5
 800231e:	e7c1      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002320:	f04f 0800 	mov.w	r8, #0
 8002324:	e7d1      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002330:	f7ff f874 	bl	800141c <HAL_GetTick>
 8002334:	eba0 000a 	sub.w	r0, r0, sl
 8002338:	2802      	cmp	r0, #2
 800233a:	d9d1      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800233c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800233e:	f1b8 0f00 	cmp.w	r8, #0
 8002342:	d003      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	07da      	lsls	r2, r3, #31
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002352:	499b      	ldr	r1, [pc, #620]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002356:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800235a:	f022 0203 	bic.w	r2, r2, #3
 800235e:	4302      	orrs	r2, r0
 8002360:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002364:	079f      	lsls	r7, r3, #30
 8002366:	d508      	bpl.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002368:	4995      	ldr	r1, [pc, #596]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800236a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800236c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002370:	f022 020c 	bic.w	r2, r2, #12
 8002374:	4302      	orrs	r2, r0
 8002376:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800237a:	075e      	lsls	r6, r3, #29
 800237c:	d508      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237e:	4990      	ldr	r1, [pc, #576]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002380:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002382:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002386:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800238a:	4302      	orrs	r2, r0
 800238c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002390:	0718      	lsls	r0, r3, #28
 8002392:	d508      	bpl.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002394:	498a      	ldr	r1, [pc, #552]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002396:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002398:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800239c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80023a0:	4302      	orrs	r2, r0
 80023a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023a6:	06d9      	lsls	r1, r3, #27
 80023a8:	d508      	bpl.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023aa:	4985      	ldr	r1, [pc, #532]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80023ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023b6:	4302      	orrs	r2, r0
 80023b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023bc:	069a      	lsls	r2, r3, #26
 80023be:	d508      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c0:	497f      	ldr	r1, [pc, #508]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80023c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023cc:	4302      	orrs	r2, r0
 80023ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023d2:	059f      	lsls	r7, r3, #22
 80023d4:	d508      	bpl.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	497a      	ldr	r1, [pc, #488]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023d8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80023da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023de:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80023e2:	4302      	orrs	r2, r0
 80023e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023e8:	055e      	lsls	r6, r3, #21
 80023ea:	d508      	bpl.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ec:	4974      	ldr	r1, [pc, #464]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023ee:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80023f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80023f8:	4302      	orrs	r2, r0
 80023fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	0658      	lsls	r0, r3, #25
 8002400:	d508      	bpl.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002402:	496f      	ldr	r1, [pc, #444]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002404:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002406:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800240a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800240e:	4302      	orrs	r2, r0
 8002410:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002414:	0619      	lsls	r1, r3, #24
 8002416:	d508      	bpl.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002418:	4969      	ldr	r1, [pc, #420]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800241a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800241c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002420:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002424:	4302      	orrs	r2, r0
 8002426:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800242a:	05da      	lsls	r2, r3, #23
 800242c:	d508      	bpl.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242e:	4964      	ldr	r1, [pc, #400]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002432:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002436:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800243a:	4302      	orrs	r2, r0
 800243c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	d510      	bpl.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002444:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002446:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002448:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800244c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002450:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002452:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800245a:	f040 8086 	bne.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245e:	68d3      	ldr	r3, [r2, #12]
 8002460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002464:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	031f      	lsls	r7, r3, #12
 800246a:	d50f      	bpl.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246c:	4a54      	ldr	r2, [pc, #336]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800246e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002470:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002474:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002478:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800247a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002482:	d17e      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	68d3      	ldr	r3, [r2, #12]
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	035e      	lsls	r6, r3, #13
 8002490:	d50f      	bpl.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002492:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002494:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002496:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800249a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800249e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a8:	d176      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	68d3      	ldr	r3, [r2, #12]
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	0458      	lsls	r0, r3, #17
 80024b6:	d512      	bpl.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024b8:	4941      	ldr	r1, [pc, #260]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80024bc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024c4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ce:	d16e      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024d0:	2102      	movs	r1, #2
 80024d2:	1d20      	adds	r0, r4, #4
 80024d4:	f7ff fd8a 	bl	8001fec <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024d8:	2800      	cmp	r0, #0
 80024da:	bf18      	it	ne
 80024dc:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	0411      	lsls	r1, r2, #16
 80024e2:	d508      	bpl.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024e4:	4936      	ldr	r1, [pc, #216]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80024e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024f0:	4303      	orrs	r3, r0
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024f6:	03d3      	lsls	r3, r2, #15
 80024f8:	d509      	bpl.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024fa:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002500:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800250e:	4628      	mov	r0, r5
 8002510:	b002      	add	sp, #8
 8002512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002516:	429a      	cmp	r2, r3
 8002518:	f43f aeef 	beq.w	80022fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800251c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800252c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002530:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002538:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800253a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800253e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002542:	f57f aeda 	bpl.w	80022fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002546:	f7fe ff69 	bl	800141c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800254e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002554:	0799      	lsls	r1, r3, #30
 8002556:	f53f aed0 	bmi.w	80022fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe ff5f 	bl	800141c <HAL_GetTick>
 800255e:	1b40      	subs	r0, r0, r5
 8002560:	4548      	cmp	r0, r9
 8002562:	d9f5      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002564:	e6ea      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002566:	4635      	mov	r5, r6
 8002568:	e6f0      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800256a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800256e:	f47f af7a 	bne.w	8002466 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	2101      	movs	r1, #1
 8002574:	1d20      	adds	r0, r4, #4
 8002576:	f7ff fd39 	bl	8001fec <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800257a:	2800      	cmp	r0, #0
 800257c:	bf18      	it	ne
 800257e:	4605      	movne	r5, r0
 8002580:	e771      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002582:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002586:	d181      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002588:	2101      	movs	r1, #1
 800258a:	1d20      	adds	r0, r4, #4
 800258c:	f7ff fd2e 	bl	8001fec <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002590:	2800      	cmp	r0, #0
 8002592:	bf18      	it	ne
 8002594:	4605      	movne	r5, r0
 8002596:	e779      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002598:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800259c:	d189      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800259e:	2101      	movs	r1, #1
 80025a0:	1d20      	adds	r0, r4, #4
 80025a2:	f7ff fd23 	bl	8001fec <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80025a6:	2800      	cmp	r0, #0
 80025a8:	bf18      	it	ne
 80025aa:	4605      	movne	r5, r0
 80025ac:	e781      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025ae:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80025b2:	d194      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025b4:	2102      	movs	r1, #2
 80025b6:	f104 0020 	add.w	r0, r4, #32
 80025ba:	f7ff fd9f 	bl	80020fc <RCCEx_PLLSAI2_Config>
 80025be:	e78b      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80025c0:	40021000 	.word	0x40021000

080025c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80025c8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025ca:	6921      	ldr	r1, [r4, #16]
 80025cc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025ce:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025d0:	69c0      	ldr	r0, [r0, #28]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	6961      	ldr	r1, [r4, #20]
 80025d6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d8:	498f      	ldr	r1, [pc, #572]	; (8002818 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025da:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025dc:	4029      	ands	r1, r5
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68e1      	ldr	r1, [r4, #12]
 80025e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025ee:	4a8b      	ldr	r2, [pc, #556]	; (800281c <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025f0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025f2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025f4:	bf1c      	itt	ne
 80025f6:	6a22      	ldrne	r2, [r4, #32]
 80025f8:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	4a86      	ldr	r2, [pc, #536]	; (8002820 <UART_SetConfig+0x25c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d117      	bne.n	800263a <UART_SetConfig+0x76>
 800260a:	4b86      	ldr	r3, [pc, #536]	; (8002824 <UART_SetConfig+0x260>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	3b01      	subs	r3, #1
 8002616:	2b02      	cmp	r3, #2
 8002618:	f200 80cf 	bhi.w	80027ba <UART_SetConfig+0x1f6>
 800261c:	4a82      	ldr	r2, [pc, #520]	; (8002828 <UART_SetConfig+0x264>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002620:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002624:	f040 8099 	bne.w	800275a <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002628:	2b08      	cmp	r3, #8
 800262a:	d822      	bhi.n	8002672 <UART_SetConfig+0xae>
 800262c:	e8df f003 	tbb	[pc, r3]
 8002630:	2193c8d9 	.word	0x2193c8d9
 8002634:	212121ce 	.word	0x212121ce
 8002638:	dd          	.byte	0xdd
 8002639:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <UART_SetConfig+0x268>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d106      	bne.n	800264e <UART_SetConfig+0x8a>
 8002640:	4b78      	ldr	r3, [pc, #480]	; (8002824 <UART_SetConfig+0x260>)
 8002642:	4a7b      	ldr	r2, [pc, #492]	; (8002830 <UART_SetConfig+0x26c>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	e7e7      	b.n	800261e <UART_SetConfig+0x5a>
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <UART_SetConfig+0x270>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d119      	bne.n	8002688 <UART_SetConfig+0xc4>
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <UART_SetConfig+0x260>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800265e:	2b20      	cmp	r3, #32
 8002660:	f000 80b7 	beq.w	80027d2 <UART_SetConfig+0x20e>
 8002664:	d807      	bhi.n	8002676 <UART_SetConfig+0xb2>
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80b8 	beq.w	80027dc <UART_SetConfig+0x218>
 800266c:	2b10      	cmp	r3, #16
 800266e:	f000 80aa 	beq.w	80027c6 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002672:	2001      	movs	r0, #1
 8002674:	e04e      	b.n	8002714 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002676:	2b30      	cmp	r3, #48	; 0x30
 8002678:	d1fb      	bne.n	8002672 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800267e:	f000 80b4 	beq.w	80027ea <UART_SetConfig+0x226>
 8002682:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002686:	e083      	b.n	8002790 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002688:	4a6b      	ldr	r2, [pc, #428]	; (8002838 <UART_SetConfig+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10f      	bne.n	80026ae <UART_SetConfig+0xea>
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <UART_SetConfig+0x260>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	f000 809a 	beq.w	80027d2 <UART_SetConfig+0x20e>
 800269e:	d804      	bhi.n	80026aa <UART_SetConfig+0xe6>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 809b 	beq.w	80027dc <UART_SetConfig+0x218>
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	e7e1      	b.n	800266e <UART_SetConfig+0xaa>
 80026aa:	2bc0      	cmp	r3, #192	; 0xc0
 80026ac:	e7e4      	b.n	8002678 <UART_SetConfig+0xb4>
 80026ae:	4a63      	ldr	r2, [pc, #396]	; (800283c <UART_SetConfig+0x278>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d112      	bne.n	80026da <UART_SetConfig+0x116>
 80026b4:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <UART_SetConfig+0x260>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c2:	f000 8086 	beq.w	80027d2 <UART_SetConfig+0x20e>
 80026c6:	d805      	bhi.n	80026d4 <UART_SetConfig+0x110>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8087 	beq.w	80027dc <UART_SetConfig+0x218>
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d2:	e7cc      	b.n	800266e <UART_SetConfig+0xaa>
 80026d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d8:	e7ce      	b.n	8002678 <UART_SetConfig+0xb4>
 80026da:	4a50      	ldr	r2, [pc, #320]	; (800281c <UART_SetConfig+0x258>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d1c8      	bne.n	8002672 <UART_SetConfig+0xae>
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <UART_SetConfig+0x260>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ee:	d015      	beq.n	800271c <UART_SetConfig+0x158>
 80026f0:	d806      	bhi.n	8002700 <UART_SetConfig+0x13c>
 80026f2:	b15b      	cbz	r3, 800270c <UART_SetConfig+0x148>
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d1bb      	bne.n	8002672 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 80026fa:	f7ff f8d5 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
        break;
 80026fe:	e007      	b.n	8002710 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002704:	d1b5      	bne.n	8002672 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002706:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800270a:	e008      	b.n	800271e <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800270c:	f7ff fc4a 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002710:	b928      	cbnz	r0, 800271e <UART_SetConfig+0x15a>
 8002712:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002714:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002716:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 800271a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 800271c:	4848      	ldr	r0, [pc, #288]	; (8002840 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800271e:	6862      	ldr	r2, [r4, #4]
 8002720:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002724:	4283      	cmp	r3, r0
 8002726:	d8a4      	bhi.n	8002672 <UART_SetConfig+0xae>
 8002728:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800272c:	d8a1      	bhi.n	8002672 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800272e:	0851      	lsrs	r1, r2, #1
 8002730:	2500      	movs	r5, #0
 8002732:	468c      	mov	ip, r1
 8002734:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002738:	4629      	mov	r1, r5
 800273a:	fbe0 c106 	umlal	ip, r1, r0, r6
 800273e:	462b      	mov	r3, r5
 8002740:	4660      	mov	r0, ip
 8002742:	f7fe fa31 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <UART_SetConfig+0x280>)
 8002748:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800274c:	429a      	cmp	r2, r3
 800274e:	d890      	bhi.n	8002672 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	60d8      	str	r0, [r3, #12]
 8002754:	e7dd      	b.n	8002712 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002756:	483a      	ldr	r0, [pc, #232]	; (8002840 <UART_SetConfig+0x27c>)
 8002758:	e047      	b.n	80027ea <UART_SetConfig+0x226>
    switch (clocksource)
 800275a:	2b08      	cmp	r3, #8
 800275c:	d889      	bhi.n	8002672 <UART_SetConfig+0xae>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <UART_SetConfig+0x1a0>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002789 	.word	0x08002789
 8002768:	080027af 	.word	0x080027af
 800276c:	080027d9 	.word	0x080027d9
 8002770:	08002673 	.word	0x08002673
 8002774:	080027b5 	.word	0x080027b5
 8002778:	08002673 	.word	0x08002673
 800277c:	08002673 	.word	0x08002673
 8002780:	08002673 	.word	0x08002673
 8002784:	08002683 	.word	0x08002683
        pclk = HAL_RCC_GetPCLK1Freq();
 8002788:	f7ff fc0c 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800278c:	2800      	cmp	r0, #0
 800278e:	d0c0      	beq.n	8002712 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002790:	6862      	ldr	r2, [r4, #4]
 8002792:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002796:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800279a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800279e:	f1a3 0110 	sub.w	r1, r3, #16
 80027a2:	4291      	cmp	r1, r2
 80027a4:	f63f af65 	bhi.w	8002672 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	60d3      	str	r3, [r2, #12]
 80027ac:	e7b1      	b.n	8002712 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80027ae:	f7ff fc0b 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
        break;
 80027b2:	e7eb      	b.n	800278c <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80027b4:	f7ff f878 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
        break;
 80027b8:	e7e8      	b.n	800278c <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027be:	d1f6      	bne.n	80027ae <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 80027c0:	f7ff fc02 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
        break;
 80027c4:	e00f      	b.n	80027e6 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027ca:	d1f3      	bne.n	80027b4 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 80027cc:	f7ff f86c 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
        break;
 80027d0:	e009      	b.n	80027e6 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027d6:	d0be      	beq.n	8002756 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <UART_SetConfig+0x27c>)
 80027da:	e7d9      	b.n	8002790 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027e0:	d1d2      	bne.n	8002788 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff fbdf 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d093      	beq.n	8002712 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	0853      	lsrs	r3, r2, #1
 80027ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80027f2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80027fa:	f1a3 0110 	sub.w	r1, r3, #16
 80027fe:	4291      	cmp	r1, r2
 8002800:	f63f af37 	bhi.w	8002672 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002804:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002808:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800280a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800280c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002810:	4313      	orrs	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
 8002814:	e77d      	b.n	8002712 <UART_SetConfig+0x14e>
 8002816:	bf00      	nop
 8002818:	efff69f3 	.word	0xefff69f3
 800281c:	40008000 	.word	0x40008000
 8002820:	40013800 	.word	0x40013800
 8002824:	40021000 	.word	0x40021000
 8002828:	0800cb18 	.word	0x0800cb18
 800282c:	40004400 	.word	0x40004400
 8002830:	0800cb1b 	.word	0x0800cb1b
 8002834:	40004800 	.word	0x40004800
 8002838:	40004c00 	.word	0x40004c00
 800283c:	40005000 	.word	0x40005000
 8002840:	00f42400 	.word	0x00f42400
 8002844:	000ffcff 	.word	0x000ffcff

08002848 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800284a:	07da      	lsls	r2, r3, #31
{
 800284c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800284e:	d506      	bpl.n	800285e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002850:	6801      	ldr	r1, [r0, #0]
 8002852:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002854:	684a      	ldr	r2, [r1, #4]
 8002856:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800285a:	4322      	orrs	r2, r4
 800285c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800285e:	079c      	lsls	r4, r3, #30
 8002860:	d506      	bpl.n	8002870 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002862:	6801      	ldr	r1, [r0, #0]
 8002864:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800286c:	4322      	orrs	r2, r4
 800286e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002870:	0759      	lsls	r1, r3, #29
 8002872:	d506      	bpl.n	8002882 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002874:	6801      	ldr	r1, [r0, #0]
 8002876:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002878:	684a      	ldr	r2, [r1, #4]
 800287a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287e:	4322      	orrs	r2, r4
 8002880:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002882:	071a      	lsls	r2, r3, #28
 8002884:	d506      	bpl.n	8002894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002886:	6801      	ldr	r1, [r0, #0]
 8002888:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800288a:	684a      	ldr	r2, [r1, #4]
 800288c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002890:	4322      	orrs	r2, r4
 8002892:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002894:	06dc      	lsls	r4, r3, #27
 8002896:	d506      	bpl.n	80028a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002898:	6801      	ldr	r1, [r0, #0]
 800289a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800289c:	688a      	ldr	r2, [r1, #8]
 800289e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028a2:	4322      	orrs	r2, r4
 80028a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a6:	0699      	lsls	r1, r3, #26
 80028a8:	d506      	bpl.n	80028b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028aa:	6801      	ldr	r1, [r0, #0]
 80028ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028ae:	688a      	ldr	r2, [r1, #8]
 80028b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b4:	4322      	orrs	r2, r4
 80028b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028b8:	065a      	lsls	r2, r3, #25
 80028ba:	d50f      	bpl.n	80028dc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028bc:	6801      	ldr	r1, [r0, #0]
 80028be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028c0:	684a      	ldr	r2, [r1, #4]
 80028c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80028c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ce:	d105      	bne.n	80028dc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028d0:	684a      	ldr	r2, [r1, #4]
 80028d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80028d8:	4322      	orrs	r2, r4
 80028da:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	d506      	bpl.n	80028ee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028e0:	6802      	ldr	r2, [r0, #0]
 80028e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6053      	str	r3, [r2, #4]
  }
}
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80028f8:	4604      	mov	r4, r0
 80028fa:	460e      	mov	r6, r1
 80028fc:	4615      	mov	r5, r2
 80028fe:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	69d3      	ldr	r3, [r2, #28]
 8002904:	ea36 0303 	bics.w	r3, r6, r3
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	42ab      	cmp	r3, r5
 8002910:	d001      	beq.n	8002916 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2000      	movs	r0, #0
 8002914:	e025      	b.n	8002962 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8002916:	f1b8 3fff 	cmp.w	r8, #4294967295
 800291a:	d0f2      	beq.n	8002902 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe fd7e 	bl	800141c <HAL_GetTick>
 8002920:	1bc0      	subs	r0, r0, r7
 8002922:	4540      	cmp	r0, r8
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	d802      	bhi.n	800292e <UART_WaitOnFlagUntilTimeout+0x3e>
 8002928:	f1b8 0f00 	cmp.w	r8, #0
 800292c:	d11b      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	e840 3200 	strex	r2, r3, [r0]
 800293a:	2a00      	cmp	r2, #0
 800293c:	d1f7      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	f100 0308 	add.w	r3, r0, #8
 8002942:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002946:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	f100 0108 	add.w	r1, r0, #8
 800294e:	e841 3200 	strex	r2, r3, [r1]
 8002952:	2a00      	cmp	r2, #0
 8002954:	d1f3      	bne.n	800293e <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002956:	2320      	movs	r3, #32
 8002958:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800295a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800295c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002960:	2003      	movs	r0, #3
}
 8002962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002966:	6803      	ldr	r3, [r0, #0]
 8002968:	075a      	lsls	r2, r3, #29
 800296a:	d5c9      	bpl.n	8002900 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800296c:	69c3      	ldr	r3, [r0, #28]
 800296e:	051b      	lsls	r3, r3, #20
 8002970:	d5c6      	bpl.n	8002900 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002976:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800297c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002980:	e840 3200 	strex	r2, r3, [r0]
 8002984:	2a00      	cmp	r2, #0
 8002986:	d1f7      	bne.n	8002978 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	f100 0308 	add.w	r3, r0, #8
 800298c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	f100 0108 	add.w	r1, r0, #8
 8002998:	e841 3200 	strex	r2, r3, [r1]
 800299c:	2a00      	cmp	r2, #0
 800299e:	d1f3      	bne.n	8002988 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80029a0:	2320      	movs	r3, #32
 80029a2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029a4:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80029aa:	e7d7      	b.n	800295c <UART_WaitOnFlagUntilTimeout+0x6c>

080029ac <HAL_UART_Transmit>:
{
 80029ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80029b0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80029b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80029b4:	2b20      	cmp	r3, #32
{
 80029b6:	4604      	mov	r4, r0
 80029b8:	460e      	mov	r6, r1
 80029ba:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80029bc:	d14e      	bne.n	8002a5c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80029be:	2900      	cmp	r1, #0
 80029c0:	d04a      	beq.n	8002a58 <HAL_UART_Transmit+0xac>
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d048      	beq.n	8002a58 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80029c6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d046      	beq.n	8002a5c <HAL_UART_Transmit+0xb0>
 80029ce:	2301      	movs	r3, #1
 80029d0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029dc:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80029de:	f7fe fd1d 	bl	800141c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80029e4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80029ec:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80029ee:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f2:	d103      	bne.n	80029fc <HAL_UART_Transmit+0x50>
 80029f4:	6922      	ldr	r2, [r4, #16]
 80029f6:	b90a      	cbnz	r2, 80029fc <HAL_UART_Transmit+0x50>
 80029f8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80029fa:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80029fc:	2200      	movs	r2, #0
 80029fe:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002a02:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a06:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	b93a      	cbnz	r2, 8002a1e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ff6d 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 8002a16:	b950      	cbnz	r0, 8002a2e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002a1c:	e008      	b.n	8002a30 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	4620      	mov	r0, r4
 8002a24:	9303      	str	r3, [sp, #12]
 8002a26:	f7ff ff63 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	b118      	cbz	r0, 8002a36 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
}
 8002a30:	b004      	add	sp, #16
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a36:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002a38:	b95e      	cbnz	r6, 8002a52 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a3a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a42:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002a44:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002a50:	e7d7      	b.n	8002a02 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a52:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002a56:	e7f4      	b.n	8002a42 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e7e9      	b.n	8002a30 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	e7e7      	b.n	8002a30 <HAL_UART_Transmit+0x84>

08002a60 <HAL_UART_Receive>:
{
 8002a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a64:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a66:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002a68:	2b20      	cmp	r3, #32
{
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	460e      	mov	r6, r1
 8002a6e:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a70:	d163      	bne.n	8002b3a <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 8002a72:	2900      	cmp	r1, #0
 8002a74:	d05f      	beq.n	8002b36 <HAL_UART_Receive+0xd6>
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	d05d      	beq.n	8002b36 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 8002a7a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d05b      	beq.n	8002b3a <HAL_UART_Receive+0xda>
 8002a82:	2301      	movs	r3, #1
 8002a84:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a8a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a90:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8002a94:	f7fe fcc2 	bl	800141c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002a98:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8002a9a:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002aa2:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8002aa4:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002aa8:	d11a      	bne.n	8002ae0 <HAL_UART_Receive+0x80>
 8002aaa:	6922      	ldr	r2, [r4, #16]
 8002aac:	42aa      	cmp	r2, r5
 8002aae:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002ab2:	bf18      	it	ne
 8002ab4:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 8002aba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	d11f      	bne.n	8002b00 <HAL_UART_Receive+0xa0>
 8002ac0:	6923      	ldr	r3, [r4, #16]
 8002ac2:	b9eb      	cbnz	r3, 8002b00 <HAL_UART_Receive+0xa0>
 8002ac4:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8002ac6:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 8002ace:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002ad2:	b290      	uxth	r0, r2
 8002ad4:	b9b0      	cbnz	r0, 8002b04 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8002ada:	b003      	add	sp, #12
 8002adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8002ae0:	b92b      	cbnz	r3, 8002aee <HAL_UART_Receive+0x8e>
 8002ae2:	6922      	ldr	r2, [r4, #16]
 8002ae4:	2a00      	cmp	r2, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	257f      	movne	r5, #127	; 0x7f
 8002aea:	25ff      	moveq	r5, #255	; 0xff
 8002aec:	e7e3      	b.n	8002ab6 <HAL_UART_Receive+0x56>
 8002aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af2:	d1e0      	bne.n	8002ab6 <HAL_UART_Receive+0x56>
 8002af4:	6922      	ldr	r2, [r4, #16]
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	bf0c      	ite	eq
 8002afa:	257f      	moveq	r5, #127	; 0x7f
 8002afc:	253f      	movne	r5, #63	; 0x3f
 8002afe:	e7da      	b.n	8002ab6 <HAL_UART_Receive+0x56>
      pdata16bits = NULL;
 8002b00:	2700      	movs	r7, #0
 8002b02:	e7e1      	b.n	8002ac8 <HAL_UART_Receive+0x68>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b04:	f8cd 8000 	str.w	r8, [sp]
 8002b08:	464b      	mov	r3, r9
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff feee 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 8002b14:	b998      	cbnz	r0, 8002b3e <HAL_UART_Receive+0xde>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b1a:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8002b1c:	b946      	cbnz	r6, 8002b30 <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b1e:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002b22:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002b26:	3a01      	subs	r2, #1
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002b2e:	e7ce      	b.n	8002ace <HAL_UART_Receive+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b30:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8002b34:	e7f5      	b.n	8002b22 <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e7cf      	b.n	8002ada <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	e7cd      	b.n	8002ada <HAL_UART_Receive+0x7a>
        return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
 8002b40:	e7cb      	b.n	8002ada <HAL_UART_Receive+0x7a>

08002b42 <UART_CheckIdleState>:
{
 8002b42:	b530      	push	{r4, r5, lr}
 8002b44:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b46:	2500      	movs	r5, #0
{
 8002b48:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002b4e:	f7fe fc65 	bl	800141c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002b58:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b5a:	d415      	bmi.n	8002b88 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	0752      	lsls	r2, r2, #29
 8002b62:	d509      	bpl.n	8002b78 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b64:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002b68:	9200      	str	r2, [sp, #0]
 8002b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff febd 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 8002b76:	b9a0      	cbnz	r0, 8002ba2 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002b78:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b7c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002b7e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b82:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b84:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002b86:	e00d      	b.n	8002ba4 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b88:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002b8c:	9200      	str	r2, [sp, #0]
 8002b8e:	9003      	str	r0, [sp, #12]
 8002b90:	462a      	mov	r2, r5
 8002b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff feaa 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 8002b9c:	9b03      	ldr	r3, [sp, #12]
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0dc      	beq.n	8002b5c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002ba2:	2003      	movs	r0, #3
}
 8002ba4:	b005      	add	sp, #20
 8002ba6:	bd30      	pop	{r4, r5, pc}

08002ba8 <HAL_UART_Init>:
{
 8002ba8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002baa:	4604      	mov	r4, r0
 8002bac:	b340      	cbz	r0, 8002c00 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002bb0:	b91b      	cbnz	r3, 8002bba <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002bb6:	f7fe fb13 	bl	80011e0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002bba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	2324      	movs	r3, #36	; 0x24
 8002bbe:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fcfb 	bl	80025c4 <UART_SetConfig>
 8002bce:	2801      	cmp	r0, #1
 8002bd0:	d016      	beq.n	8002c00 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd4:	b113      	cbz	r3, 8002bdc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7ff fe36 	bl	8002848 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002bf4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002bf6:	601a      	str	r2, [r3, #0]
}
 8002bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002bfc:	f7ff bfa1 	b.w	8002b42 <UART_CheckIdleState>
}
 8002c00:	2001      	movs	r0, #1
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002c08:	221c      	movs	r2, #28
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4805      	ldr	r0, [pc, #20]	; (8002c24 <_mon_alloc_reset+0x20>)
 8002c0e:	f007 f85c 	bl	8009cca <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8002c12:	200a      	movs	r0, #10
 8002c14:	f000 ffec 	bl	8003bf0 <__wrap_malloc>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f810 	bl	8003c40 <__wrap_free>
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	2000154c 	.word	0x2000154c

08002c28 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <cyclesCounterEnd+0x44>)
 8002c2c:	4d10      	ldr	r5, [pc, #64]	; (8002c70 <cyclesCounterEnd+0x48>)
 8002c2e:	685c      	ldr	r4, [r3, #4]
 8002c30:	686b      	ldr	r3, [r5, #4]
 8002c32:	1ae4      	subs	r4, r4, r3
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002c38:	f7fe fbf0 	bl	800141c <HAL_GetTick>
 8002c3c:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002c3e:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002c40:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8002c42:	682a      	ldr	r2, [r5, #0]
 8002c44:	4290      	cmp	r0, r2
 8002c46:	d90c      	bls.n	8002c62 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd ffad 	bl	8000ba8 <__aeabi_uldivmod>
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	fba0 0303 	umull	r0, r3, r0, r3
 8002c56:	1900      	adds	r0, r0, r4
 8002c58:	eba3 0301 	sub.w	r3, r3, r1
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8002c62:	4620      	mov	r0, r4
 8002c64:	4619      	mov	r1, r3
 8002c66:	b003      	add	sp, #12
 8002c68:	bd30      	pop	{r4, r5, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e0001000 	.word	0xe0001000
 8002c70:	20001540 	.word	0x20001540

08002c74 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8002c74:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460e      	mov	r6, r1
 8002c7c:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002c7e:	f7ff ffd3 	bl	8002c28 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 8002c82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002c86:	3301      	adds	r3, #1
 8002c88:	f142 0200 	adc.w	r2, r2, #0
 8002c8c:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8002c90:	0773      	lsls	r3, r6, #29
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002c92:	e9cd 0100 	strd	r0, r1, [sp]
  if (flags & AI_OBSERVER_POST_EVT) {
 8002c96:	d51f      	bpl.n	8002cd8 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
 8002c98:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 8002ca6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8002caa:	185b      	adds	r3, r3, r1
 8002cac:	eb40 0202 	adc.w	r2, r0, r2
 8002cb0:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002cb4:	882b      	ldrh	r3, [r5, #0]
 8002cb6:	6a26      	ldr	r6, [r4, #32]
 8002cb8:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8002cbc:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8002cc0:	f856 200c 	ldr.w	r2, [r6, ip]
 8002cc4:	685d      	ldr	r5, [r3, #4]
 8002cc6:	1852      	adds	r2, r2, r1
 8002cc8:	f846 200c 	str.w	r2, [r6, ip]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002ccc:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002cce:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002cd2:	3201      	adds	r2, #1
    u_obs->nodes[node->c_idx].dur += end_t;
 8002cd4:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002cd8:	f7ff ffa6 	bl	8002c28 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002cdc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002ce0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002ce4:	ebb3 0308 	subs.w	r3, r3, r8
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002ce8:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002cec:	eb62 0209 	sbc.w	r2, r2, r9
 8002cf0:	1818      	adds	r0, r3, r0
 8002cf2:	eb41 0102 	adc.w	r1, r1, r2
 8002cf6:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return 0;
}
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	b002      	add	sp, #8
 8002cfe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

08002d04 <aiDeInit>:
{
 8002d04:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002d06:	4c09      	ldr	r4, [pc, #36]	; (8002d2c <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 8002d08:	4809      	ldr	r0, [pc, #36]	; (8002d30 <aiDeInit+0x2c>)
 8002d0a:	f000 ff5f 	bl	8003bcc <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	b150      	cbz	r0, 8002d28 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 8002d12:	f001 f979 	bl	8004008 <ai_mnetwork_destroy>
 8002d16:	b128      	cbz	r0, 8002d24 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8002d18:	6820      	ldr	r0, [r4, #0]
 8002d1a:	f001 f998 	bl	800404e <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 8002d1e:	4905      	ldr	r1, [pc, #20]	; (8002d34 <aiDeInit+0x30>)
 8002d20:	f000 fd48 	bl	80037b4 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	6023      	str	r3, [r4, #0]
}
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001480 	.word	0x20001480
 8002d30:	0800be40 	.word	0x0800be40
 8002d34:	0800be5f 	.word	0x0800be5f

08002d38 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8002d38:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8002d3a:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002d3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d40:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8002d44:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002d48:	f000 ff10 	bl	8003b6c <ioRawGetUint8>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d02c      	beq.n	8002daa <aiTestConsole+0x72>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 8002d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d54:	2b71      	cmp	r3, #113	; 0x71
 8002d56:	d02a      	beq.n	8002dae <aiTestConsole+0x76>
 8002d58:	2b52      	cmp	r3, #82	; 0x52
 8002d5a:	d816      	bhi.n	8002d8a <aiTestConsole+0x52>
 8002d5c:	2b43      	cmp	r3, #67	; 0x43
 8002d5e:	d805      	bhi.n	8002d6c <aiTestConsole+0x34>
 8002d60:	2b3f      	cmp	r3, #63	; 0x3f
 8002d62:	bf0c      	ite	eq
 8002d64:	2003      	moveq	r0, #3
 8002d66:	2064      	movne	r0, #100	; 0x64

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;

  return CONS_EVT_UNDEFINED;
}
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd10      	pop	{r4, pc}
 8002d6c:	3b44      	subs	r3, #68	; 0x44
 8002d6e:	2b0e      	cmp	r3, #14
 8002d70:	d809      	bhi.n	8002d86 <aiTestConsole+0x4e>
 8002d72:	e8df f003 	tbb	[pc, r3]
 8002d76:	0820      	.short	0x0820
 8002d78:	08220808 	.word	0x08220808
 8002d7c:	08080808 	.word	0x08080808
 8002d80:	1c1e0808 	.word	0x1c1e0808
 8002d84:	24          	.byte	0x24
 8002d85:	00          	.byte	0x00
  if ((c == 'q') || (c == 'Q'))
 8002d86:	2064      	movs	r0, #100	; 0x64
 8002d88:	e7ee      	b.n	8002d68 <aiTestConsole+0x30>
 8002d8a:	2b70      	cmp	r3, #112	; 0x70
 8002d8c:	d011      	beq.n	8002db2 <aiTestConsole+0x7a>
 8002d8e:	d808      	bhi.n	8002da2 <aiTestConsole+0x6a>
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d010      	beq.n	8002db6 <aiTestConsole+0x7e>
 8002d94:	2b68      	cmp	r3, #104	; 0x68
 8002d96:	d010      	beq.n	8002dba <aiTestConsole+0x82>
    return CONS_EVT_PROF;
 8002d98:	2b58      	cmp	r3, #88	; 0x58
 8002d9a:	bf14      	ite	ne
 8002d9c:	2064      	movne	r0, #100	; 0x64
 8002d9e:	2005      	moveq	r0, #5
 8002da0:	e7e2      	b.n	8002d68 <aiTestConsole+0x30>
 8002da2:	2b72      	cmp	r3, #114	; 0x72
 8002da4:	d00b      	beq.n	8002dbe <aiTestConsole+0x86>
 8002da6:	2b78      	cmp	r3, #120	; 0x78
 8002da8:	e7f7      	b.n	8002d9a <aiTestConsole+0x62>
    return CONS_EVT_TIMEOUT;
 8002daa:	4620      	mov	r0, r4
 8002dac:	e7dc      	b.n	8002d68 <aiTestConsole+0x30>
    return CONS_EVT_QUIT;
 8002dae:	2001      	movs	r0, #1
 8002db0:	e7da      	b.n	8002d68 <aiTestConsole+0x30>
    return CONS_EVT_PAUSE;
 8002db2:	2004      	movs	r0, #4
 8002db4:	e7d8      	b.n	8002d68 <aiTestConsole+0x30>
  if ((c == 'q') || (c == 'Q'))
 8002db6:	2006      	movs	r0, #6
 8002db8:	e7d6      	b.n	8002d68 <aiTestConsole+0x30>
    return CONS_EVT_HELP;
 8002dba:	2003      	movs	r0, #3
 8002dbc:	e7d4      	b.n	8002d68 <aiTestConsole+0x30>
    return CONS_EVT_RESTART;
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	e7d2      	b.n	8002d68 <aiTestConsole+0x30>
	...

08002dc4 <aiObserverInit>:
{
 8002dc4:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002dc6:	4604      	mov	r4, r0
{
 8002dc8:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002dca:	b1e0      	cbz	r0, 8002e06 <aiObserverInit+0x42>
 8002dcc:	6800      	ldr	r0, [r0, #0]
 8002dce:	b1d0      	cbz	r0, 8002e06 <aiObserverInit+0x42>
 8002dd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002dd4:	b1bb      	cbz	r3, 8002e06 <aiObserverInit+0x42>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002dd6:	4d17      	ldr	r5, [pc, #92]	; (8002e34 <aiObserverInit+0x70>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002dd8:	aa04      	add	r2, sp, #16
 8002dda:	a903      	add	r1, sp, #12
 8002ddc:	f001 f974 	bl	80040c8 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002de0:	2228      	movs	r2, #40	; 0x28
 8002de2:	2100      	movs	r1, #0
 8002de4:	4628      	mov	r0, r5
 8002de6:	f006 ff70 	bl	8009cca <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8002dea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002dee:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002df0:	4610      	mov	r0, r2
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	f000 fefc 	bl	8003bf0 <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 8002df8:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002dfa:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8002dfc:	b928      	cbnz	r0, 8002e0a <aiObserverInit+0x46>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8002dfe:	480e      	ldr	r0, [pc, #56]	; (8002e38 <aiObserverInit+0x74>)
 8002e00:	4611      	mov	r1, r2
 8002e02:	f000 fee3 	bl	8003bcc <lc_print>
}
 8002e06:	b013      	add	sp, #76	; 0x4c
 8002e08:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f006 ff5d 	bl	8009cca <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8002e10:	490a      	ldr	r1, [pc, #40]	; (8002e3c <aiObserverInit+0x78>)
 8002e12:	9803      	ldr	r0, [sp, #12]
 8002e14:	2306      	movs	r3, #6
 8002e16:	462a      	mov	r2, r5
 8002e18:	f003 fb86 	bl	8006528 <ai_platform_observer_register>
  if (!res) {
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d1f1      	bne.n	8002e06 <aiObserverInit+0x42>
    LC_PRINT("W: unable to register the user CB\r\n");
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <aiObserverInit+0x7c>)
 8002e24:	f000 fed2 	bl	8003bcc <lc_print>
    free(u_observer_ctx.nodes);
 8002e28:	6a28      	ldr	r0, [r5, #32]
 8002e2a:	f000 ff09 	bl	8003c40 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8002e2e:	622c      	str	r4, [r5, #32]
    return;
 8002e30:	e7e9      	b.n	8002e06 <aiObserverInit+0x42>
 8002e32:	bf00      	nop
 8002e34:	20001518 	.word	0x20001518
 8002e38:	0800be73 	.word	0x0800be73
 8002e3c:	08002c75 	.word	0x08002c75
 8002e40:	0800bea7 	.word	0x0800bea7

08002e44 <aiObserverDone>:
{
 8002e44:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002e48:	ed2d 8b02 	vpush	{d8}
 8002e4c:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f000 80de 	beq.w	8003010 <aiObserverDone+0x1cc>
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80da 	beq.w	8003010 <aiObserverDone+0x1cc>
 8002e5c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	f000 80d5 	beq.w	8003010 <aiObserverDone+0x1cc>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8002e66:	4c6d      	ldr	r4, [pc, #436]	; (800301c <aiObserverDone+0x1d8>)
 8002e68:	6a22      	ldr	r2, [r4, #32]
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	f000 80d0 	beq.w	8003010 <aiObserverDone+0x1cc>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002e70:	4618      	mov	r0, r3
 8002e72:	aa12      	add	r2, sp, #72	; 0x48
 8002e74:	a909      	add	r1, sp, #36	; 0x24
 8002e76:	f001 f927 	bl	80040c8 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002e7a:	4969      	ldr	r1, [pc, #420]	; (8003020 <aiObserverDone+0x1dc>)
 8002e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002e7e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003040 <aiObserverDone+0x1fc>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002e82:	4622      	mov	r2, r4
 8002e84:	f003 fbf0 	bl	8006668 <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 8002e88:	4866      	ldr	r0, [pc, #408]	; (8003024 <aiObserverDone+0x1e0>)
 8002e8a:	f000 fe9f 	bl	8003bcc <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002e8e:	6a23      	ldr	r3, [r4, #32]
 8002e90:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	2300      	movs	r3, #0
 8002e98:	f7fd fe86 	bl	8000ba8 <__aeabi_uldivmod>
 8002e9c:	aa0a      	add	r2, sp, #40	; 0x28
 8002e9e:	f000 ff23 	bl	8003ce8 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002ea2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8002ea6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002eaa:	fb05 3101 	mla	r1, r5, r1, r3
 8002eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002eb0:	485d      	ldr	r0, [pc, #372]	; (8003028 <aiObserverDone+0x1e4>)
 8002eb2:	f000 fe8b 	bl	8003bcc <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002eb6:	6a23      	ldr	r3, [r4, #32]
 8002eb8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f7fd fe72 	bl	8000ba8 <__aeabi_uldivmod>
 8002ec4:	aa0a      	add	r2, sp, #40	; 0x28
 8002ec6:	f000 ff0f 	bl	8003ce8 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8002eca:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8002ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ed0:	4856      	ldr	r0, [pc, #344]	; (800302c <aiObserverDone+0x1e8>)
 8002ed2:	fb05 3101 	mla	r1, r5, r1, r3
 8002ed6:	f000 fe79 	bl	8003bcc <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002eda:	f1a8 0324 	sub.w	r3, r8, #36	; 0x24
 8002ede:	f1a8 0221 	sub.w	r2, r8, #33	; 0x21
 8002ee2:	f1a8 011c 	sub.w	r1, r8, #28
 8002ee6:	f1a8 0017 	sub.w	r0, r8, #23
 8002eea:	f8cd 8000 	str.w	r8, [sp]
 8002eee:	f000 fe6d 	bl	8003bcc <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 8002ef2:	f108 000a 	add.w	r0, r8, #10
 8002ef6:	f000 fe69 	bl	8003bcc <lc_print>
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002efa:	2300      	movs	r3, #0
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002efc:	f1a8 02d6 	sub.w	r2, r8, #214	; 0xd6
  cumul = 0;
 8002f00:	461d      	mov	r5, r3
 8002f02:	461e      	mov	r6, r3
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002f04:	9207      	str	r2, [sp, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002f06:	9809      	ldr	r0, [sp, #36]	; 0x24
  node_info.c_idx = 0;
 8002f08:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002f0c:	a90e      	add	r1, sp, #56	; 0x38
 8002f0e:	f003 fa5d 	bl	80063cc <ai_platform_observer_node_info>
 8002f12:	4680      	mov	r8, r0
 8002f14:	bb20      	cbnz	r0, 8002f60 <aiObserverDone+0x11c>
  LC_PRINT(" -------------------------------------------------\r\n");
 8002f16:	4846      	ldr	r0, [pc, #280]	; (8003030 <aiObserverDone+0x1ec>)
 8002f18:	f000 fe58 	bl	8003bcc <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8002f1c:	6a23      	ldr	r3, [r4, #32]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4631      	mov	r1, r6
 8002f24:	4643      	mov	r3, r8
 8002f26:	f7fd fe3f 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 8002f2a:	aa0a      	add	r2, sp, #40	; 0x28
 8002f2c:	f000 fedc 	bl	8003ce8 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8002f30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f3a:	fb00 1202 	mla	r2, r0, r2, r1
 8002f3e:	493d      	ldr	r1, [pc, #244]	; (8003034 <aiObserverDone+0x1f0>)
 8002f40:	1c48      	adds	r0, r1, #1
 8002f42:	f000 fe43 	bl	8003bcc <lc_print>
  free(u_observer_ctx.nodes);
 8002f46:	6a20      	ldr	r0, [r4, #32]
 8002f48:	f000 fe7a 	bl	8003c40 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002f4c:	4833      	ldr	r0, [pc, #204]	; (800301c <aiObserverDone+0x1d8>)
 8002f4e:	2228      	movs	r2, #40	; 0x28
 8002f50:	4641      	mov	r1, r8
}
 8002f52:	b020      	add	sp, #128	; 0x80
 8002f54:	ecbd 8b02 	vpop	{d8}
 8002f58:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002f5c:	f006 beb5 	b.w	8009cca <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8002f60:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002f64:	6a22      	ldr	r2, [r4, #32]
 8002f66:	0119      	lsls	r1, r3, #4
 8002f68:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8002f6c:	5850      	ldr	r0, [r2, r1]
 8002f6e:	6859      	ldr	r1, [r3, #4]
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002f70:	689a      	ldr	r2, [r3, #8]
    cumul +=  sn->dur;
 8002f72:	1945      	adds	r5, r0, r5
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002f74:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 8002f78:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002f7c:	f7fd fe14 	bl	8000ba8 <__aeabi_uldivmod>
 8002f80:	aa0a      	add	r2, sp, #40	; 0x28
 8002f82:	f000 feb1 	bl	8003ce8 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002f86:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002f8a:	9907      	ldr	r1, [sp, #28]
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002f8c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <aiObserverDone+0x1f4>)
    LC_PRINT(fmt, node_info.c_idx,
 8002f92:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002f96:	ea12 0223 	ands.w	r2, r2, r3, asr #32
 8002f9a:	bf38      	it	cc
 8002f9c:	460a      	movcc	r2, r1
    LC_PRINT(fmt, node_info.c_idx,
 8002f9e:	f3c0 000e 	ubfx	r0, r0, #0, #15
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002fa2:	4691      	mov	r9, r2
    LC_PRINT(fmt, node_info.c_idx,
 8002fa4:	f003 fc2a 	bl	80067fc <ai_layer_type_name>
 8002fa8:	2325      	movs	r3, #37	; 0x25
 8002faa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8002fae:	9304      	str	r3, [sp, #16]
 8002fb0:	6a23      	ldr	r3, [r4, #32]
 8002fb2:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8002fb6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002fba:	4680      	mov	r8, r0
 8002fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc0:	f7fd fae4 	bl	800058c <__aeabi_ul2d>
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <aiObserverDone+0x1f8>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f7fd fb16 	bl	80005f8 <__aeabi_dmul>
 8002fcc:	ec41 0b18 	vmov	d8, r0, r1
 8002fd0:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002fd4:	f7fd fada 	bl	800058c <__aeabi_ul2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	ec51 0b18 	vmov	r0, r1, d8
 8002fe0:	f7fd fc34 	bl	800084c <__aeabi_ddiv>
 8002fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ff4:	fb01 3302 	mla	r3, r1, r2, r3
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	465b      	mov	r3, fp
 8002ffe:	4651      	mov	r1, sl
 8003000:	4648      	mov	r0, r9
 8003002:	f000 fde3 	bl	8003bcc <lc_print>
    node_info.c_idx++;
 8003006:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800300a:	3301      	adds	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	e77a      	b.n	8002f06 <aiObserverDone+0xc2>
}
 8003010:	b020      	add	sp, #128	; 0x80
 8003012:	ecbd 8b02 	vpop	{d8}
 8003016:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800301a:	bf00      	nop
 800301c:	20001518 	.word	0x20001518
 8003020:	08002c75 	.word	0x08002c75
 8003024:	0800bf16 	.word	0x0800bf16
 8003028:	0800bf34 	.word	0x0800bf34
 800302c:	0800bf6f 	.word	0x0800bf6f
 8003030:	0800c009 	.word	0x0800c009
 8003034:	0800c03e 	.word	0x0800c03e
 8003038:	0800becb 	.word	0x0800becb
 800303c:	40590000 	.word	0x40590000
 8003040:	0800bfc8 	.word	0x0800bfc8

08003044 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8003044:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 8003048:	484e      	ldr	r0, [pc, #312]	; (8003184 <aiSystemPerformanceInit+0x140>)
  port_dwt_reset();
 800304a:	4d4f      	ldr	r5, [pc, #316]	; (8003188 <aiSystemPerformanceInit+0x144>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800304c:	4e4f      	ldr	r6, [pc, #316]	; (800318c <aiSystemPerformanceInit+0x148>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800304e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80031b0 <aiSystemPerformanceInit+0x16c>
{
 8003052:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8003054:	f000 fdba 	bl	8003bcc <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8003058:	494d      	ldr	r1, [pc, #308]	; (8003190 <aiSystemPerformanceInit+0x14c>)
 800305a:	2300      	movs	r3, #0
 800305c:	f101 0022 	add.w	r0, r1, #34	; 0x22
 8003060:	2207      	movs	r2, #7
 8003062:	f000 fdb3 	bl	8003bcc <lc_print>
 8003066:	2400      	movs	r4, #0
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8003068:	484a      	ldr	r0, [pc, #296]	; (8003194 <aiSystemPerformanceInit+0x150>)
 800306a:	f000 fdaf 	bl	8003bcc <lc_print>

  systemSettingLog();
 800306e:	f000 fea7 	bl	8003dc0 <systemSettingLog>

  crcIpInit();
 8003072:	f000 ff3b 	bl	8003eec <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8003076:	f000 ff49 	bl	8003f0c <port_dwt_init_imp>
  port_dwt_reset();
 800307a:	606c      	str	r4, [r5, #4]
  port_hal_delay(100);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f7fe f9d3 	bl	8001428 <HAL_Delay>
  st = port_dwt_get_cycles();
 8003082:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8003084:	aa02      	add	r2, sp, #8
 8003086:	2564      	movs	r5, #100	; 0x64
 8003088:	4621      	mov	r1, r4
 800308a:	fbb0 f0f5 	udiv	r0, r0, r5
 800308e:	f000 fe2b 	bl	8003ce8 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8003092:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8003096:	9a05      	ldr	r2, [sp, #20]
 8003098:	483f      	ldr	r0, [pc, #252]	; (8003198 <aiSystemPerformanceInit+0x154>)
 800309a:	fb05 3101 	mla	r1, r5, r1, r3
 800309e:	f000 fd95 	bl	8003bcc <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 80030a2:	aa02      	add	r2, sp, #8
 80030a4:	2100      	movs	r1, #0
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295
 80030aa:	f000 fe1d 	bl	8003ce8 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80030ae:	9a03      	ldr	r2, [sp, #12]
 80030b0:	9b04      	ldr	r3, [sp, #16]
 80030b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030b6:	fb01 3302 	mla	r3, r1, r2, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80030ba:	4635      	mov	r5, r6
 80030bc:	4a37      	ldr	r2, [pc, #220]	; (800319c <aiSystemPerformanceInit+0x158>)
 80030be:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 80030c0:	f000 ff24 	bl	8003f0c <port_dwt_init_imp>
  aiPlatformVersion();
 80030c4:	f000 fb60 	bl	8003788 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80030c8:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 80030cc:	4834      	ldr	r0, [pc, #208]	; (80031a0 <aiSystemPerformanceInit+0x15c>)
 80030ce:	f000 fd7d 	bl	8003bcc <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80030d2:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 80030d6:	f109 0b48 	add.w	fp, r9, #72	; 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 80030da:	4621      	mov	r1, r4
 80030dc:	2000      	movs	r0, #0
 80030de:	f000 ff5b 	bl	8003f98 <ai_mnetwork_find>
    if (nn_name) {
 80030e2:	4680      	mov	r8, r0
 80030e4:	b190      	cbz	r0, 800310c <aiSystemPerformanceInit+0xc8>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80030e6:	4601      	mov	r1, r0
 80030e8:	4648      	mov	r0, r9
 80030ea:	f000 fd6f 	bl	8003bcc <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80030ee:	4641      	mov	r1, r8
 80030f0:	4650      	mov	r0, sl
 80030f2:	f000 fd6b 	bl	8003bcc <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f1a5 0108 	sub.w	r1, r5, #8
 80030fc:	4640      	mov	r0, r8
 80030fe:	f000 ff59 	bl	8003fb4 <ai_mnetwork_create>
  if (err.type) {
 8003102:	b2c3      	uxtb	r3, r0
 8003104:	b14b      	cbz	r3, 800311a <aiSystemPerformanceInit+0xd6>
    aiLogErr(err, "ai_mnetwork_create");
 8003106:	4927      	ldr	r1, [pc, #156]	; (80031a4 <aiSystemPerformanceInit+0x160>)
 8003108:	f000 fb54 	bl	80037b4 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 800310c:	2003      	movs	r0, #3
 800310e:	f005 fef3 	bl	8008ef8 <srand>

  return 0;
}
 8003112:	2000      	movs	r0, #0
 8003114:	b006      	add	sp, #24
 8003116:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 800311a:	4658      	mov	r0, fp
 800311c:	f000 fd56 	bl	8003bcc <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003120:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003124:	4629      	mov	r1, r5
 8003126:	f000 ff87 	bl	8004038 <ai_mnetwork_get_report>
 800312a:	46a8      	mov	r8, r5
 800312c:	4603      	mov	r3, r0
 800312e:	b938      	cbnz	r0, 8003140 <aiSystemPerformanceInit+0xfc>
    err = ai_mnetwork_get_error(ctx->handle);
 8003130:	2290      	movs	r2, #144	; 0x90
 8003132:	4354      	muls	r4, r2
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	5930      	ldr	r0, [r6, r4]
 8003138:	f000 ff89 	bl	800404e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 800313c:	491a      	ldr	r1, [pc, #104]	; (80031a8 <aiSystemPerformanceInit+0x164>)
 800313e:	e00b      	b.n	8003158 <aiSystemPerformanceInit+0x114>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003140:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003144:	f000 ff90 	bl	8004068 <ai_mnetwork_init>
 8003148:	b970      	cbnz	r0, 8003168 <aiSystemPerformanceInit+0x124>
    err = ai_mnetwork_get_error(ctx->handle);
 800314a:	2290      	movs	r2, #144	; 0x90
 800314c:	4354      	muls	r4, r2
 800314e:	9001      	str	r0, [sp, #4]
 8003150:	5930      	ldr	r0, [r6, r4]
 8003152:	f000 ff7c 	bl	800404e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003156:	4915      	ldr	r1, [pc, #84]	; (80031ac <aiSystemPerformanceInit+0x168>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8003158:	f000 fb2c 	bl	80037b4 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800315c:	5930      	ldr	r0, [r6, r4]
 800315e:	f000 ff53 	bl	8004008 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8003162:	9b01      	ldr	r3, [sp, #4]
 8003164:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8003166:	e7d1      	b.n	800310c <aiSystemPerformanceInit+0xc8>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003168:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800316c:	4629      	mov	r1, r5
 800316e:	f000 ff63 	bl	8004038 <ai_mnetwork_get_report>
 8003172:	3590      	adds	r5, #144	; 0x90
 8003174:	4603      	mov	r3, r0
 8003176:	2800      	cmp	r0, #0
 8003178:	d0da      	beq.n	8003130 <aiSystemPerformanceInit+0xec>
    aiPrintNetworkInfo(&ctx->report);
 800317a:	4640      	mov	r0, r8
 800317c:	f000 fc28 	bl	80039d0 <aiPrintNetworkInfo>
    idx++;
 8003180:	3401      	adds	r4, #1
  } while (nn_name);
 8003182:	e7aa      	b.n	80030da <aiSystemPerformanceInit+0x96>
 8003184:	0800c053 	.word	0x0800c053
 8003188:	e0001000 	.word	0xe0001000
 800318c:	20001480 	.word	0x20001480
 8003190:	0800c059 	.word	0x0800c059
 8003194:	0800c088 	.word	0x0800c088
 8003198:	0800c08c 	.word	0x0800c08c
 800319c:	20001540 	.word	0x20001540
 80031a0:	0800c0c2 	.word	0x0800c0c2
 80031a4:	0800c117 	.word	0x0800c117
 80031a8:	0800c145 	.word	0x0800c145
 80031ac:	0800c15a 	.word	0x0800c15a
 80031b0:	0800c0e2 	.word	0x0800c0e2

080031b4 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 80031b4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80031b8:	ed2d 8b02 	vpush	{d8}
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80031bc:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8003310 <aiSystemPerformanceProcess+0x15c>
{
 80031c0:	b09c      	sub	sp, #112	; 0x70
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 80031c2:	4c54      	ldr	r4, [pc, #336]	; (8003314 <aiSystemPerformanceProcess+0x160>)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	b94b      	cbnz	r3, 80031dc <aiSystemPerformanceProcess+0x28>
    LC_PRINT("E: network handle is NULL\r\n");
 80031c8:	4853      	ldr	r0, [pc, #332]	; (8003318 <aiSystemPerformanceProcess+0x164>)
 80031ca:	f000 fcff 	bl	8003bcc <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  } while (r==0);

  return r;
}
 80031d2:	b01c      	add	sp, #112	; 0x70
 80031d4:	ecbd 8b02 	vpop	{d8}
 80031d8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80031dc:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80031e0:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 80031e4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003344 <aiSystemPerformanceProcess+0x190>
  MON_STACK_INIT();
 80031e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ec:	f000 fd50 	bl	8003c90 <stackMonInit>
  if (profiling_mode)
 80031f0:	f899 3000 	ldrb.w	r3, [r9]
 80031f4:	b30b      	cbz	r3, 800323a <aiSystemPerformanceProcess+0x86>
    niter = _APP_ITER_ * profiling_factor;
 80031f6:	4b49      	ldr	r3, [pc, #292]	; (800331c <aiSystemPerformanceProcess+0x168>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 80031fe:	68a1      	ldr	r1, [r4, #8]
 8003200:	4847      	ldr	r0, [pc, #284]	; (8003320 <aiSystemPerformanceProcess+0x16c>)
 8003202:	4642      	mov	r2, r8
 8003204:	f000 fce2 	bl	8003bcc <lc_print>
 8003208:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 800320c:	4d45      	ldr	r5, [pc, #276]	; (8003324 <aiSystemPerformanceProcess+0x170>)
 800320e:	69aa      	ldr	r2, [r5, #24]
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <aiSystemPerformanceProcess+0x6a>
 8003214:	f3ef 8108 	mrs	r1, MSP
 8003218:	4843      	ldr	r0, [pc, #268]	; (8003328 <aiSystemPerformanceProcess+0x174>)
 800321a:	f000 fcd7 	bl	8003bcc <lc_print>
  MON_STACK_MARK();
 800321e:	792b      	ldrb	r3, [r5, #4]
 8003220:	b973      	cbnz	r3, 8003240 <aiSystemPerformanceProcess+0x8c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003222:	f8b4 e040 	ldrh.w	lr, [r4, #64]	; 0x40
 8003226:	f1be 0f01 	cmp.w	lr, #1
 800322a:	d915      	bls.n	8003258 <aiSystemPerformanceProcess+0xa4>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 800322c:	483f      	ldr	r0, [pc, #252]	; (800332c <aiSystemPerformanceProcess+0x178>)
 800322e:	f000 fccd 	bl	8003bcc <lc_print>
    port_hal_delay(100);
 8003232:	2064      	movs	r0, #100	; 0x64
 8003234:	f7fe f8f8 	bl	8001428 <HAL_Delay>
 8003238:	e7c9      	b.n	80031ce <aiSystemPerformanceProcess+0x1a>
    niter = _APP_ITER_;
 800323a:	f04f 0810 	mov.w	r8, #16
 800323e:	e7de      	b.n	80031fe <aiSystemPerformanceProcess+0x4a>
  MON_STACK_MARK();
 8003240:	69eb      	ldr	r3, [r5, #28]
 8003242:	3303      	adds	r3, #3
 8003244:	f023 0303 	bic.w	r3, r3, #3
 8003248:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 800324c:	69aa      	ldr	r2, [r5, #24]
 800324e:	4293      	cmp	r3, r2
 8003250:	d2e7      	bcs.n	8003222 <aiSystemPerformanceProcess+0x6e>
 8003252:	f843 1b04 	str.w	r1, [r3], #4
 8003256:	e7f9      	b.n	800324c <aiSystemPerformanceProcess+0x98>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8003258:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 800325c:	f1bc 0f01 	cmp.w	ip, #1
 8003260:	d8e4      	bhi.n	800322c <aiSystemPerformanceProcess+0x78>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003348 <aiSystemPerformanceProcess+0x194>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003266:	2300      	movs	r3, #0
 8003268:	e010      	b.n	800328c <aiSystemPerformanceProcess+0xd8>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 800326a:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
 800326e:	465e      	mov	r6, fp
 8003270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003272:	ad0e      	add	r5, sp, #56	; 0x38
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 800327a:	f8db 3004 	ldr.w	r3, [fp, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 800327e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003282:	b90b      	cbnz	r3, 8003288 <aiSystemPerformanceProcess+0xd4>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003284:	f8da 3000 	ldr.w	r3, [sl]
 8003288:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 800328a:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800328c:	459e      	cmp	lr, r3
 800328e:	dcec      	bgt.n	800326a <aiSystemPerformanceProcess+0xb6>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003290:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 800334c <aiSystemPerformanceProcess+0x198>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8003294:	2300      	movs	r3, #0
 8003296:	459c      	cmp	ip, r3
 8003298:	dc28      	bgt.n	80032ec <aiSystemPerformanceProcess+0x138>
  if (profiling_mode) {
 800329a:	f899 3000 	ldrb.w	r3, [r9]
 800329e:	b14b      	cbz	r3, 80032b4 <aiSystemPerformanceProcess+0x100>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <aiSystemPerformanceProcess+0x168>)
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <aiSystemPerformanceProcess+0x17c>)
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	f000 fc91 	bl	8003bcc <lc_print>
    fflush(stdout);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <aiSystemPerformanceProcess+0x180>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6898      	ldr	r0, [r3, #8]
 80032b0:	f006 fbd2 	bl	8009a58 <fflush>
  if (observer_mode) {
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <aiSystemPerformanceProcess+0x184>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b153      	cbz	r3, 80032d0 <aiSystemPerformanceProcess+0x11c>
    MON_ALLOC_ENABLE();
 80032ba:	4d20      	ldr	r5, [pc, #128]	; (800333c <aiSystemPerformanceProcess+0x188>)
    MON_ALLOC_RESET();
 80032bc:	f7ff fca2 	bl	8002c04 <_mon_alloc_reset>
    MON_ALLOC_ENABLE();
 80032c0:	682b      	ldr	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 80032c2:	4814      	ldr	r0, [pc, #80]	; (8003314 <aiSystemPerformanceProcess+0x160>)
    MON_ALLOC_ENABLE();
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 80032ca:	f7ff fd7b 	bl	8002dc4 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 80032ce:	696b      	ldr	r3, [r5, #20]
  int observer_heap_sz = 0UL;
 80032d0:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 80032d2:	f7ff fc97 	bl	8002c04 <_mon_alloc_reset>
  tcumul = 0ULL;
 80032d6:	2500      	movs	r5, #0
 80032d8:	46aa      	mov	sl, r5
  for (iter = 0; iter < niter; iter++) {
 80032da:	462e      	mov	r6, r5
 80032dc:	4546      	cmp	r6, r8
 80032de:	da74      	bge.n	80033ca <aiSystemPerformanceProcess+0x216>
            in_data[j] = (ai_i8)(v * 127);
 80032e0:	eddf 8a17 	vldr	s17, [pc, #92]	; 8003340 <aiSystemPerformanceProcess+0x18c>
 80032e4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80032e8:	2300      	movs	r3, #0
 80032ea:	e04b      	b.n	8003384 <aiSystemPerformanceProcess+0x1d0>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80032ec:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 80032f0:	4656      	mov	r6, sl
 80032f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032f4:	ad15      	add	r5, sp, #84	; 0x54
 80032f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80032fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003304:	b90b      	cbnz	r3, 800330a <aiSystemPerformanceProcess+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003306:	f8de 3000 	ldr.w	r3, [lr]
 800330a:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800330c:	2301      	movs	r3, #1
 800330e:	e7c2      	b.n	8003296 <aiSystemPerformanceProcess+0xe2>
 8003310:	30000000 	.word	0x30000000
 8003314:	20001480 	.word	0x20001480
 8003318:	0800c16b 	.word	0x0800c16b
 800331c:	20000650 	.word	0x20000650
 8003320:	0800c187 	.word	0x0800c187
 8003324:	20001568 	.word	0x20001568
 8003328:	0800c1ca 	.word	0x0800c1ca
 800332c:	0800c20e 	.word	0x0800c20e
 8003330:	0800c244 	.word	0x0800c244
 8003334:	20000be8 	.word	0x20000be8
 8003338:	2000064c 	.word	0x2000064c
 800333c:	2000154c 	.word	0x2000154c
 8003340:	42fe0000 	.word	0x42fe0000
 8003344:	20001510 	.word	0x20001510
 8003348:	2000065c 	.word	0x2000065c
 800334c:	20000660 	.word	0x20000660
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8003350:	e9db 1200 	ldrd	r1, r2, [fp]
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003354:	f3c1 4043 	ubfx	r0, r1, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003358:	f3c1 11d1 	ubfx	r1, r1, #7, #18
 800335c:	f001 0178 	and.w	r1, r1, #120	; 0x78
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003360:	9005      	str	r0, [sp, #20]
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003362:	9107      	str	r1, [sp, #28]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003364:	f04f 0900 	mov.w	r9, #0
 8003368:	2101      	movs	r1, #1
 800336a:	4658      	mov	r0, fp
 800336c:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8003370:	f001 fb0c 	bl	800498c <ai_buffer_get_size>
 8003374:	4581      	cmp	r9, r0
 8003376:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800337a:	f0c0 8106 	bcc.w	800358a <aiSystemPerformanceProcess+0x3d6>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800337e:	3301      	adds	r3, #1
 8003380:	f10b 0b1c 	add.w	fp, fp, #28
 8003384:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8003388:	4293      	cmp	r3, r2
 800338a:	dbe1      	blt.n	8003350 <aiSystemPerformanceProcess+0x19c>
    MON_ALLOC_ENABLE();
 800338c:	f8df 930c 	ldr.w	r9, [pc, #780]	; 800369c <aiSystemPerformanceProcess+0x4e8>
 8003390:	f8d9 3000 	ldr.w	r3, [r9]
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c9 3000 	str.w	r3, [r9]
  cyclesCount.tick_start = port_hal_get_tick();
 800339c:	f7fe f83e 	bl	800141c <HAL_GetTick>
 80033a0:	4bb1      	ldr	r3, [pc, #708]	; (8003668 <aiSystemPerformanceProcess+0x4b4>)
  port_dwt_reset();
 80033a2:	4ab2      	ldr	r2, [pc, #712]	; (800366c <aiSystemPerformanceProcess+0x4b8>)
  cyclesCount.tick_start = port_hal_get_tick();
 80033a4:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 80033a6:	2100      	movs	r1, #0
 80033a8:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 80033aa:	6852      	ldr	r2, [r2, #4]
 80033ac:	605a      	str	r2, [r3, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	aa15      	add	r2, sp, #84	; 0x54
 80033b2:	a90e      	add	r1, sp, #56	; 0x38
 80033b4:	f000 fe77 	bl	80040a6 <ai_mnetwork_run>
    if (batch != 1) {
 80033b8:	2801      	cmp	r0, #1
 80033ba:	f000 8116 	beq.w	80035ea <aiSystemPerformanceProcess+0x436>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	f000 fe45 	bl	800404e <ai_mnetwork_get_error>
 80033c4:	49aa      	ldr	r1, [pc, #680]	; (8003670 <aiSystemPerformanceProcess+0x4bc>)
 80033c6:	f000 f9f5 	bl	80037b4 <aiLogErr>
  LC_PRINT("\r\n");
 80033ca:	48aa      	ldr	r0, [pc, #680]	; (8003674 <aiSystemPerformanceProcess+0x4c0>)
 80033cc:	f000 fbfe 	bl	8003bcc <lc_print>
  MON_STACK_EVALUATE();
 80033d0:	4aa9      	ldr	r2, [pc, #676]	; (8003678 <aiSystemPerformanceProcess+0x4c4>)
 80033d2:	f892 c004 	ldrb.w	ip, [r2, #4]
 80033d6:	2000      	movs	r0, #0
 80033d8:	6090      	str	r0, [r2, #8]
 80033da:	f1bc 0f00 	cmp.w	ip, #0
 80033de:	d023      	beq.n	8003428 <aiSystemPerformanceProcess+0x274>
 80033e0:	68d3      	ldr	r3, [r2, #12]
 80033e2:	6951      	ldr	r1, [r2, #20]
 80033e4:	eba1 0903 	sub.w	r9, r1, r3
 80033e8:	69d3      	ldr	r3, [r2, #28]
 80033ea:	3303      	adds	r3, #3
 80033ec:	f023 0303 	bic.w	r3, r3, #3
 80033f0:	f103 0e20 	add.w	lr, r3, #32
 80033f4:	f853 8b04 	ldr.w	r8, [r3], #4
 80033f8:	f1b8 3fde 	cmp.w	r8, #3739147998	; 0xdededede
 80033fc:	bf18      	it	ne
 80033fe:	4660      	movne	r0, ip
 8003400:	4573      	cmp	r3, lr
 8003402:	d1f7      	bne.n	80033f4 <aiSystemPerformanceProcess+0x240>
 8003404:	2800      	cmp	r0, #0
 8003406:	f040 8114 	bne.w	8003632 <aiSystemPerformanceProcess+0x47e>
 800340a:	2020      	movs	r0, #32
 800340c:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8003410:	6090      	str	r0, [r2, #8]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6890      	ldr	r0, [r2, #8]
 8003416:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 800341a:	d102      	bne.n	8003422 <aiSystemPerformanceProcess+0x26e>
 800341c:	4573      	cmp	r3, lr
 800341e:	f0c0 8104 	bcc.w	800362a <aiSystemPerformanceProcess+0x476>
 8003422:	eba9 0100 	sub.w	r1, r9, r0
 8003426:	6091      	str	r1, [r2, #8]
  LC_PRINT("\r\n");
 8003428:	4892      	ldr	r0, [pc, #584]	; (8003674 <aiSystemPerformanceProcess+0x4c0>)
 800342a:	f000 fbcf 	bl	8003bcc <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 800342e:	4a93      	ldr	r2, [pc, #588]	; (800367c <aiSystemPerformanceProcess+0x4c8>)
 8003430:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8003434:	1a28      	subs	r0, r5, r0
 8003436:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 800343a:	17f3      	asrs	r3, r6, #31
 800343c:	4632      	mov	r2, r6
 800343e:	f7fd fbb3 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 8003442:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8003444:	4688      	mov	r8, r1
 8003446:	4681      	mov	r9, r0
  dwtCyclesToTime(tcumul, &t);
 8003448:	f000 fc4e 	bl	8003ce8 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 800344c:	68a1      	ldr	r1, [r4, #8]
 800344e:	9105      	str	r1, [sp, #20]
 8003450:	f7fe fda2 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8003454:	4683      	mov	fp, r0
 8003456:	f7fe fd9f 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 800345a:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 800345e:	4632      	mov	r2, r6
 8003460:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003464:	4b86      	ldr	r3, [pc, #536]	; (8003680 <aiSystemPerformanceProcess+0x4cc>)
 8003466:	9905      	ldr	r1, [sp, #20]
 8003468:	fbb0 f0f3 	udiv	r0, r0, r3
 800346c:	fbbb f3f3 	udiv	r3, fp, r3
 8003470:	9000      	str	r0, [sp, #0]
 8003472:	4884      	ldr	r0, [pc, #528]	; (8003684 <aiSystemPerformanceProcess+0x4d0>)
 8003474:	f000 fbaa 	bl	8003bcc <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800347a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800347c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800347e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003482:	fb00 3101 	mla	r1, r0, r1, r3
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003486:	2664      	movs	r6, #100	; 0x64
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003488:	487f      	ldr	r0, [pc, #508]	; (8003688 <aiSystemPerformanceProcess+0x4d4>)
 800348a:	f000 fb9f 	bl	8003bcc <lc_print>
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 800348e:	464a      	mov	r2, r9
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003490:	fba9 9506 	umull	r9, r5, r9, r6
 8003494:	fb06 5508 	mla	r5, r6, r8, r5
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 8003498:	487c      	ldr	r0, [pc, #496]	; (800368c <aiSystemPerformanceProcess+0x4d8>)
 800349a:	4643      	mov	r3, r8
 800349c:	f000 fb96 	bl	8003bcc <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80034a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a2:	2300      	movs	r3, #0
 80034a4:	4629      	mov	r1, r5
 80034a6:	4648      	mov	r0, r9
 80034a8:	f7fd fb7e 	bl	8000ba8 <__aeabi_uldivmod>
 80034ac:	2225      	movs	r2, #37	; 0x25
 80034ae:	4601      	mov	r1, r0
 80034b0:	4877      	ldr	r0, [pc, #476]	; (8003690 <aiSystemPerformanceProcess+0x4dc>)
 80034b2:	f000 fb8b 	bl	8003bcc <lc_print>
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80034b6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80034ba:	4629      	mov	r1, r5
 80034bc:	4648      	mov	r0, r9
 80034be:	f7fd fb73 	bl	8000ba8 <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80034c2:	2300      	movs	r3, #0
 80034c4:	2264      	movs	r2, #100	; 0x64
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80034c6:	4605      	mov	r5, r0
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80034c8:	f7fd fb6e 	bl	8000ba8 <__aeabi_uldivmod>
 80034cc:	fb06 5210 	mls	r2, r6, r0, r5
 80034d0:	4601      	mov	r1, r0
 80034d2:	4870      	ldr	r0, [pc, #448]	; (8003694 <aiSystemPerformanceProcess+0x4e0>)
 80034d4:	f000 fb7a 	bl	8003bcc <lc_print>
  MON_STACK_REPORT();
 80034d8:	4b67      	ldr	r3, [pc, #412]	; (8003678 <aiSystemPerformanceProcess+0x4c4>)
 80034da:	791a      	ldrb	r2, [r3, #4]
 80034dc:	2a00      	cmp	r2, #0
 80034de:	f000 80b3 	beq.w	8003648 <aiSystemPerformanceProcess+0x494>
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	486c      	ldr	r0, [pc, #432]	; (8003698 <aiSystemPerformanceProcess+0x4e4>)
 80034e6:	f000 fb71 	bl	8003bcc <lc_print>
  MON_ALLOC_REPORT();
 80034ea:	496c      	ldr	r1, [pc, #432]	; (800369c <aiSystemPerformanceProcess+0x4e8>)
 80034ec:	486c      	ldr	r0, [pc, #432]	; (80036a0 <aiSystemPerformanceProcess+0x4ec>)
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	698b      	ldr	r3, [r1, #24]
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	694b      	ldr	r3, [r1, #20]
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	688b      	ldr	r3, [r1, #8]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	690b      	ldr	r3, [r1, #16]
 8003504:	684a      	ldr	r2, [r1, #4]
 8003506:	68c9      	ldr	r1, [r1, #12]
 8003508:	f000 fb60 	bl	8003bcc <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 800350c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003510:	9906      	ldr	r1, [sp, #24]
 8003512:	4864      	ldr	r0, [pc, #400]	; (80036a4 <aiSystemPerformanceProcess+0x4f0>)
 8003514:	f000 fb5a 	bl	8003bcc <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8003518:	4863      	ldr	r0, [pc, #396]	; (80036a8 <aiSystemPerformanceProcess+0x4f4>)
 800351a:	f7ff fc93 	bl	8002e44 <aiObserverDone>
      r = aiTestConsole();
 800351e:	f7ff fc0b 	bl	8002d38 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 8003522:	2864      	cmp	r0, #100	; 0x64
 8003524:	f43f ae4d 	beq.w	80031c2 <aiSystemPerformanceProcess+0xe>
      } else if (r == CONS_EVT_HELP) {
 8003528:	2803      	cmp	r0, #3
 800352a:	d124      	bne.n	8003576 <aiSystemPerformanceProcess+0x3c2>
        LC_PRINT("\r\n");
 800352c:	4851      	ldr	r0, [pc, #324]	; (8003674 <aiSystemPerformanceProcess+0x4c0>)
 800352e:	f000 fb4d 	bl	8003bcc <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 8003532:	485e      	ldr	r0, [pc, #376]	; (80036ac <aiSystemPerformanceProcess+0x4f8>)
 8003534:	f000 fb4a 	bl	8003bcc <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8003538:	485d      	ldr	r0, [pc, #372]	; (80036b0 <aiSystemPerformanceProcess+0x4fc>)
 800353a:	f000 fb47 	bl	8003bcc <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 800353e:	485d      	ldr	r0, [pc, #372]	; (80036b4 <aiSystemPerformanceProcess+0x500>)
 8003540:	f000 fb44 	bl	8003bcc <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8003544:	485c      	ldr	r0, [pc, #368]	; (80036b8 <aiSystemPerformanceProcess+0x504>)
 8003546:	f000 fb41 	bl	8003bcc <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 800354a:	485c      	ldr	r0, [pc, #368]	; (80036bc <aiSystemPerformanceProcess+0x508>)
 800354c:	f000 fb3e 	bl	8003bcc <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8003550:	485b      	ldr	r0, [pc, #364]	; (80036c0 <aiSystemPerformanceProcess+0x50c>)
 8003552:	f000 fb3b 	bl	8003bcc <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8003556:	485b      	ldr	r0, [pc, #364]	; (80036c4 <aiSystemPerformanceProcess+0x510>)
 8003558:	f000 fb38 	bl	8003bcc <lc_print>
        LC_PRINT("\r\n");
 800355c:	4845      	ldr	r0, [pc, #276]	; (8003674 <aiSystemPerformanceProcess+0x4c0>)
 800355e:	f000 fb35 	bl	8003bcc <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003562:	4859      	ldr	r0, [pc, #356]	; (80036c8 <aiSystemPerformanceProcess+0x514>)
 8003564:	f000 fb32 	bl	8003bcc <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003568:	f7ff fbe6 	bl	8002d38 <aiTestConsole>
 800356c:	2800      	cmp	r0, #0
 800356e:	d06f      	beq.n	8003650 <aiSystemPerformanceProcess+0x49c>
        if (r == CONS_EVT_UNDEFINED)
 8003570:	2864      	cmp	r0, #100	; 0x64
 8003572:	f43f ae26 	beq.w	80031c2 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_PROF) {
 8003576:	2805      	cmp	r0, #5
 8003578:	d16f      	bne.n	800365a <aiSystemPerformanceProcess+0x4a6>
        profiling_mode = true;
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <aiSystemPerformanceProcess+0x518>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 8003580:	4a53      	ldr	r2, [pc, #332]	; (80036d0 <aiSystemPerformanceProcess+0x51c>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	6013      	str	r3, [r2, #0]
  } while (r==0);
 8003588:	e61b      	b.n	80031c2 <aiSystemPerformanceProcess+0xe>
 800358a:	e9cd 3208 	strd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 800358e:	f005 fce1 	bl	8008f54 <rand>
 8003592:	ee07 0a90 	vmov	s15, r0
 8003596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 800359a:	9b05      	ldr	r3, [sp, #20]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 800359c:	ee37 7aa7 	vadd.f32	s14, s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80035a0:	2b01      	cmp	r3, #1
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80035a2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80035a6:	eee7 7a08 	vfma.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80035aa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80035ae:	d106      	bne.n	80035be <aiSystemPerformanceProcess+0x40a>
          *(ai_float *)(in_data + j * 4) = v;
 80035b0:	eb02 0189 	add.w	r1, r2, r9, lsl #2
 80035b4:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 80035b8:	f109 0901 	add.w	r9, r9, #1
 80035bc:	e6d4      	b.n	8003368 <aiSystemPerformanceProcess+0x1b4>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80035be:	9907      	ldr	r1, [sp, #28]
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d0f9      	beq.n	80035b8 <aiSystemPerformanceProcess+0x404>
            in_data[j] = (ai_i8)(v * 127);
 80035c4:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80035c8:	9805      	ldr	r0, [sp, #20]
            in_data[j] = (ai_i8)(v * 127);
 80035ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80035ce:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 80035d0:	edcd 7a08 	vstr	s15, [sp, #32]
 80035d4:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80035d8:	d002      	beq.n	80035e0 <aiSystemPerformanceProcess+0x42c>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 80035da:	f802 1009 	strb.w	r1, [r2, r9]
 80035de:	e7eb      	b.n	80035b8 <aiSystemPerformanceProcess+0x404>
 80035e0:	2900      	cmp	r1, #0
 80035e2:	bfd4      	ite	le
 80035e4:	2100      	movle	r1, #0
 80035e6:	2101      	movgt	r1, #1
 80035e8:	e7f7      	b.n	80035da <aiSystemPerformanceProcess+0x426>
    tend = cyclesCounterEnd();
 80035ea:	f7ff fb1d 	bl	8002c28 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 80035ee:	f8d9 3000 	ldr.w	r3, [r9]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c9 3000 	str.w	r3, [r9]
    dwtCyclesToTime(tend, &t);
 80035fa:	aa0a      	add	r2, sp, #40	; 0x28
    tcumul += tend;
 80035fc:	1943      	adds	r3, r0, r5
 80035fe:	461d      	mov	r5, r3
 8003600:	eb4a 0a01 	adc.w	sl, sl, r1
    dwtCyclesToTime(tend, &t);
 8003604:	f000 fb70 	bl	8003ce8 <dwtCyclesToTime>
    if (!profiling_mode) {
 8003608:	4b30      	ldr	r3, [pc, #192]	; (80036cc <aiSystemPerformanceProcess+0x518>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b95b      	cbnz	r3, 8003626 <aiSystemPerformanceProcess+0x472>
      if (t.s > 10)
 800360e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 8003610:	4830      	ldr	r0, [pc, #192]	; (80036d4 <aiSystemPerformanceProcess+0x520>)
      if (t.s > 10)
 8003612:	2b0a      	cmp	r3, #10
 8003614:	bfc8      	it	gt
 8003616:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 8003618:	f000 fad8 	bl	8003bcc <lc_print>
      fflush(stdout);
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <aiSystemPerformanceProcess+0x524>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6898      	ldr	r0, [r3, #8]
 8003622:	f006 fa19 	bl	8009a58 <fflush>
  for (iter = 0; iter < niter; iter++) {
 8003626:	3601      	adds	r6, #1
 8003628:	e658      	b.n	80032dc <aiSystemPerformanceProcess+0x128>
  MON_STACK_EVALUATE();
 800362a:	3004      	adds	r0, #4
 800362c:	3304      	adds	r3, #4
 800362e:	6090      	str	r0, [r2, #8]
 8003630:	e6ef      	b.n	8003412 <aiSystemPerformanceProcess+0x25e>
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	4829      	ldr	r0, [pc, #164]	; (80036dc <aiSystemPerformanceProcess+0x528>)
 8003638:	6093      	str	r3, [r2, #8]
 800363a:	4649      	mov	r1, r9
 800363c:	f000 fac6 	bl	8003bcc <lc_print>
 8003640:	4827      	ldr	r0, [pc, #156]	; (80036e0 <aiSystemPerformanceProcess+0x52c>)
 8003642:	f000 fac3 	bl	8003bcc <lc_print>
 8003646:	e6ef      	b.n	8003428 <aiSystemPerformanceProcess+0x274>
  MON_STACK_REPORT();
 8003648:	4826      	ldr	r0, [pc, #152]	; (80036e4 <aiSystemPerformanceProcess+0x530>)
 800364a:	f000 fabf 	bl	8003bcc <lc_print>
 800364e:	e74c      	b.n	80034ea <aiSystemPerformanceProcess+0x336>
          port_hal_delay(1000);
 8003650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003654:	f7fd fee8 	bl	8001428 <HAL_Delay>
 8003658:	e786      	b.n	8003568 <aiSystemPerformanceProcess+0x3b4>
      if (r == CONS_EVT_HIDE) {
 800365a:	2806      	cmp	r0, #6
 800365c:	d146      	bne.n	80036ec <aiSystemPerformanceProcess+0x538>
        observer_mode = false;
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <aiSystemPerformanceProcess+0x534>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8003664:	e5ad      	b.n	80031c2 <aiSystemPerformanceProcess+0xe>
 8003666:	bf00      	nop
 8003668:	20001540 	.word	0x20001540
 800366c:	e0001000 	.word	0xe0001000
 8003670:	0800c25d 	.word	0x0800c25d
 8003674:	0800c26f 	.word	0x0800c26f
 8003678:	20001568 	.word	0x20001568
 800367c:	20001518 	.word	0x20001518
 8003680:	000f4240 	.word	0x000f4240
 8003684:	0800c2ef 	.word	0x0800c2ef
 8003688:	0800c336 	.word	0x0800c336
 800368c:	0800c35d 	.word	0x0800c35d
 8003690:	0800c37e 	.word	0x0800c37e
 8003694:	0800c3a7 	.word	0x0800c3a7
 8003698:	0800c3da 	.word	0x0800c3da
 800369c:	2000154c 	.word	0x2000154c
 80036a0:	0800c417 	.word	0x0800c417
 80036a4:	0800c470 	.word	0x0800c470
 80036a8:	20001480 	.word	0x20001480
 80036ac:	0800c4ab 	.word	0x0800c4ab
 80036b0:	0800c4d7 	.word	0x0800c4d7
 80036b4:	0800c4fb 	.word	0x0800c4fb
 80036b8:	0800c52c 	.word	0x0800c52c
 80036bc:	0800c541 	.word	0x0800c541
 80036c0:	0800c57b 	.word	0x0800c57b
 80036c4:	0800c59b 	.word	0x0800c59b
 80036c8:	0800c5bf 	.word	0x0800c5bf
 80036cc:	20001510 	.word	0x20001510
 80036d0:	20000650 	.word	0x20000650
 80036d4:	0800c26d 	.word	0x0800c26d
 80036d8:	20000be8 	.word	0x20000be8
 80036dc:	0800c272 	.word	0x0800c272
 80036e0:	0800c296 	.word	0x0800c296
 80036e4:	0800c3f6 	.word	0x0800c3f6
 80036e8:	2000064c 	.word	0x2000064c
      if (r == CONS_EVT_RESTART) {
 80036ec:	2802      	cmp	r0, #2
 80036ee:	d110      	bne.n	8003712 <aiSystemPerformanceProcess+0x55e>
        profiling_mode = false;
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <aiSystemPerformanceProcess+0x5bc>)
        LC_PRINT("\r\n");
 80036f2:	4820      	ldr	r0, [pc, #128]	; (8003774 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <aiSystemPerformanceProcess+0x5c4>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <aiSystemPerformanceProcess+0x5c8>)
 8003700:	2205      	movs	r2, #5
 8003702:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003704:	f000 fa62 	bl	8003bcc <lc_print>
        aiDeInit();
 8003708:	f7ff fafc 	bl	8002d04 <aiDeInit>
        aiSystemPerformanceInit();
 800370c:	f7ff fc9a 	bl	8003044 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8003710:	e557      	b.n	80031c2 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_QUIT) {
 8003712:	2801      	cmp	r0, #1
 8003714:	d115      	bne.n	8003742 <aiSystemPerformanceProcess+0x58e>
        profiling_mode = false;
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <aiSystemPerformanceProcess+0x5bc>)
        LC_PRINT("\r\n");
 8003718:	4816      	ldr	r0, [pc, #88]	; (8003774 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 800371e:	f000 fa55 	bl	8003bcc <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003722:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003726:	b672      	cpsid	i
        aiDeInit();
 8003728:	f7ff faec 	bl	8002d04 <aiDeInit>
        LC_PRINT("\r\n");
 800372c:	4811      	ldr	r0, [pc, #68]	; (8003774 <aiSystemPerformanceProcess+0x5c0>)
 800372e:	f000 fa4d 	bl	8003bcc <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 8003732:	4813      	ldr	r0, [pc, #76]	; (8003780 <aiSystemPerformanceProcess+0x5cc>)
 8003734:	f000 fa4a 	bl	8003bcc <lc_print>
          port_hal_delay(1000);
 8003738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373c:	f7fd fe74 	bl	8001428 <HAL_Delay>
        while (1) {
 8003740:	e7fa      	b.n	8003738 <aiSystemPerformanceProcess+0x584>
      if (r == CONS_EVT_PAUSE) {
 8003742:	2804      	cmp	r0, #4
 8003744:	d003      	beq.n	800374e <aiSystemPerformanceProcess+0x59a>
  } while (r==0);
 8003746:	2800      	cmp	r0, #0
 8003748:	f43f ad3b 	beq.w	80031c2 <aiSystemPerformanceProcess+0xe>
 800374c:	e541      	b.n	80031d2 <aiSystemPerformanceProcess+0x1e>
        LC_PRINT("\r\n");
 800374e:	4809      	ldr	r0, [pc, #36]	; (8003774 <aiSystemPerformanceProcess+0x5c0>)
 8003750:	f000 fa3c 	bl	8003bcc <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003754:	480b      	ldr	r0, [pc, #44]	; (8003784 <aiSystemPerformanceProcess+0x5d0>)
 8003756:	f000 fa39 	bl	8003bcc <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800375a:	f7ff faed 	bl	8002d38 <aiTestConsole>
 800375e:	2800      	cmp	r0, #0
 8003760:	f47f ad2f 	bne.w	80031c2 <aiSystemPerformanceProcess+0xe>
          port_hal_delay(1000);
 8003764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003768:	f7fd fe5e 	bl	8001428 <HAL_Delay>
 800376c:	e7f5      	b.n	800375a <aiSystemPerformanceProcess+0x5a6>
 800376e:	bf00      	nop
 8003770:	20001510 	.word	0x20001510
 8003774:	0800c26f 	.word	0x0800c26f
 8003778:	2000064c 	.word	0x2000064c
 800377c:	20000650 	.word	0x20000650
 8003780:	0800c5dd 	.word	0x0800c5dd
 8003784:	0800c5bf 	.word	0x0800c5bf

08003788 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 8003788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 800378a:	f001 fae7 	bl	8004d5c <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800378e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	2201      	movs	r2, #1
 8003796:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800379a:	b2c0      	uxtb	r0, r0
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	9000      	str	r0, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	4803      	ldr	r0, [pc, #12]	; (80037b0 <aiPlatformVersion+0x28>)
 80037a4:	4611      	mov	r1, r2
 80037a6:	f000 fa11 	bl	8003bcc <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80037aa:	b007      	add	sp, #28
 80037ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b0:	0800c608 	.word	0x0800c608

080037b4 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 80037b4:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80037b6:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80037ba:	b2c4      	uxtb	r4, r0
  if (fct)
 80037bc:	b129      	cbz	r1, 80037ca <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80037be:	4622      	mov	r2, r4
 80037c0:	4805      	ldr	r0, [pc, #20]	; (80037d8 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80037c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80037c6:	f000 ba01 	b.w	8003bcc <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80037ca:	4621      	mov	r1, r4
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <aiLogErr+0x28>)
}
 80037ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 b9fa 	b.w	8003bcc <lc_print>
 80037d8:	0800c63a 	.word	0x0800c63a
 80037dc:	0800c667 	.word	0x0800c667

080037e0 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 80037e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 80037e4:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 80037e6:	6807      	ldr	r7, [r0, #0]
{
 80037e8:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 80037ea:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80037ee:	486b      	ldr	r0, [pc, #428]	; (800399c <aiPrintBufferInfo+0x1bc>)
 80037f0:	6809      	ldr	r1, [r1, #0]
 80037f2:	f000 f9eb 	bl	8003bcc <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 80037f6:	696a      	ldr	r2, [r5, #20]
 80037f8:	69a8      	ldr	r0, [r5, #24]
 80037fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fe:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003802:	d119      	bne.n	8003838 <aiPrintBufferInfo+0x58>
  {
    LC_PRINT("%d,%d)",
 8003804:	6842      	ldr	r2, [r0, #4]
 8003806:	6901      	ldr	r1, [r0, #16]
 8003808:	4865      	ldr	r0, [pc, #404]	; (80039a0 <aiPrintBufferInfo+0x1c0>)
 800380a:	f000 f9df 	bl	8003bcc <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800380e:	2101      	movs	r1, #1
 8003810:	4628      	mov	r0, r5
 8003812:	f001 f8bb 	bl	800498c <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003816:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800381a:	4601      	mov	r1, r0
 800381c:	4861      	ldr	r0, [pc, #388]	; (80039a4 <aiPrintBufferInfo+0x1c4>)
 800381e:	f000 f9d5 	bl	8003bcc <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003822:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003824:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8003828:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800382c:	d113      	bne.n	8003856 <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800382e:	485e      	ldr	r0, [pc, #376]	; (80039a8 <aiPrintBufferInfo+0x1c8>)
 8003830:	4621      	mov	r1, r4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003832:	f000 f9cb 	bl	8003bcc <lc_print>
 8003836:	e046      	b.n	80038c6 <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003838:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 800383c:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800383e:	d105      	bne.n	800384c <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 8003840:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8003844:	4859      	ldr	r0, [pc, #356]	; (80039ac <aiPrintBufferInfo+0x1cc>)
 8003846:	f000 f9c1 	bl	8003bcc <lc_print>
 800384a:	e7e0      	b.n	800380e <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 800384c:	4858      	ldr	r0, [pc, #352]	; (80039b0 <aiPrintBufferInfo+0x1d0>)
 800384e:	4619      	mov	r1, r3
 8003850:	f000 f9bc 	bl	8003bcc <lc_print>
 8003854:	e7db      	b.n	800380e <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003856:	2e03      	cmp	r6, #3
 8003858:	d102      	bne.n	8003860 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800385a:	4856      	ldr	r0, [pc, #344]	; (80039b4 <aiPrintBufferInfo+0x1d4>)
 800385c:	4621      	mov	r1, r4
 800385e:	e7e8      	b.n	8003832 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8003860:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80039cc <aiPrintBufferInfo+0x1ec>
 8003864:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 8003868:	f108 0102 	add.w	r1, r8, #2
 800386c:	4622      	mov	r2, r4
 800386e:	bf18      	it	ne
 8003870:	4641      	movne	r1, r8
 8003872:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 8003876:	f000 f9a9 	bl	8003bcc <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 800387a:	2e02      	cmp	r6, #2
 800387c:	d123      	bne.n	80038c6 <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800387e:	68ab      	ldr	r3, [r5, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d069      	beq.n	8003958 <aiPrintBufferInfo+0x178>
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	07d2      	lsls	r2, r2, #31
 8003888:	d566      	bpl.n	8003958 <aiPrintBufferInfo+0x178>
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d063      	beq.n	8003958 <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8003890:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 8003894:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 8003898:	f1ba 0f04 	cmp.w	sl, #4
      LC_PRINT(" %d:", s_);
 800389c:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 800389e:	46d3      	mov	fp, sl
 80038a0:	bf28      	it	cs
 80038a2:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 80038a6:	f000 f991 	bl	8003bcc <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80038aa:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80038ac:	f04f 0900 	mov.w	r9, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80038b0:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 80038b4:	455e      	cmp	r6, fp
 80038b6:	db18      	blt.n	80038ea <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <aiPrintBufferInfo+0x1d8>)
 80038ba:	1cd8      	adds	r0, r3, #3
 80038bc:	45d3      	cmp	fp, sl
 80038be:	bf38      	it	cc
 80038c0:	4618      	movcc	r0, r3
 80038c2:	f000 f983 	bl	8003bcc <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 80038c6:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 80038c8:	2101      	movs	r1, #1
 80038ca:	4628      	mov	r0, r5
  if (buffer->data)
 80038cc:	2c00      	cmp	r4, #0
 80038ce:	d054      	beq.n	800397a <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 80038d0:	f001 f85c 	bl	800498c <ai_buffer_get_size>
 80038d4:	4639      	mov	r1, r7
 80038d6:	f001 f88d 	bl	80049f4 <ai_buffer_get_byte_size>
 80038da:	4602      	mov	r2, r0
 80038dc:	4837      	ldr	r0, [pc, #220]	; (80039bc <aiPrintBufferInfo+0x1dc>)
 80038de:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 80038e0:	b003      	add	sp, #12
 80038e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 80038e6:	f000 b971 	b.w	8003bcc <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80038ea:	68ab      	ldr	r3, [r5, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02e      	beq.n	800394e <aiPrintBufferInfo+0x16e>
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	f014 0401 	ands.w	r4, r4, #1
 80038f6:	d02d      	beq.n	8003954 <aiPrintBufferInfo+0x174>
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	d049      	beq.n	8003992 <aiPrintBufferInfo+0x1b2>
 80038fe:	6853      	ldr	r3, [r2, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d049      	beq.n	8003998 <aiPrintBufferInfo+0x1b8>
 8003904:	8851      	ldrh	r1, [r2, #2]
 8003906:	42b1      	cmp	r1, r6
 8003908:	dd46      	ble.n	8003998 <aiPrintBufferInfo+0x1b8>
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003910:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003912:	2a00      	cmp	r2, #0
 8003914:	d03e      	beq.n	8003994 <aiPrintBufferInfo+0x1b4>
 8003916:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003918:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800391a:	f014 0402 	ands.w	r4, r4, #2
 800391e:	d00f      	beq.n	8003940 <aiPrintBufferInfo+0x160>
 8003920:	b1b3      	cbz	r3, 8003950 <aiPrintBufferInfo+0x170>
 8003922:	8852      	ldrh	r2, [r2, #2]
 8003924:	42b2      	cmp	r2, r6
 8003926:	dd35      	ble.n	8003994 <aiPrintBufferInfo+0x1b4>
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800392c:	f7fc fe0c 	bl	8000548 <__aeabi_f2d>
 8003930:	9400      	str	r4, [sp, #0]
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4640      	mov	r0, r8
 8003938:	f000 f948 	bl	8003bcc <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800393c:	3601      	adds	r6, #1
 800393e:	e7b9      	b.n	80038b4 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003940:	b133      	cbz	r3, 8003950 <aiPrintBufferInfo+0x170>
 8003942:	8852      	ldrh	r2, [r2, #2]
 8003944:	42b2      	cmp	r2, r6
 8003946:	ddf1      	ble.n	800392c <aiPrintBufferInfo+0x14c>
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	579c      	ldrsb	r4, [r3, r6]
 800394c:	e7ee      	b.n	800392c <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800394e:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003950:	461c      	mov	r4, r3
 8003952:	e7eb      	b.n	800392c <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003954:	4648      	mov	r0, r9
 8003956:	e7e9      	b.n	800392c <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003958:	f019 0f78 	tst.w	r9, #120	; 0x78
 800395c:	d102      	bne.n	8003964 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800395e:	4818      	ldr	r0, [pc, #96]	; (80039c0 <aiPrintBufferInfo+0x1e0>)
 8003960:	4621      	mov	r1, r4
 8003962:	e766      	b.n	8003832 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 8003964:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 8003968:	3a40      	subs	r2, #64	; 0x40
 800396a:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 800396e:	4411      	add	r1, r2
 8003970:	4814      	ldr	r0, [pc, #80]	; (80039c4 <aiPrintBufferInfo+0x1e4>)
 8003972:	1a61      	subs	r1, r4, r1
 8003974:	f000 f92a 	bl	8003bcc <lc_print>
 8003978:	e7a5      	b.n	80038c6 <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 800397a:	f001 f807 	bl	800498c <ai_buffer_get_size>
 800397e:	4639      	mov	r1, r7
 8003980:	f001 f838 	bl	80049f4 <ai_buffer_get_byte_size>
 8003984:	4601      	mov	r1, r0
 8003986:	4810      	ldr	r0, [pc, #64]	; (80039c8 <aiPrintBufferInfo+0x1e8>)
}
 8003988:	b003      	add	sp, #12
 800398a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 800398e:	f000 b91d 	b.w	8003bcc <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003992:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003994:	2400      	movs	r4, #0
 8003996:	e7c9      	b.n	800392c <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003998:	4648      	mov	r0, r9
 800399a:	e7ba      	b.n	8003912 <aiPrintBufferInfo+0x132>
 800399c:	0800c697 	.word	0x0800c697
 80039a0:	0800c6a2 	.word	0x0800c6a2
 80039a4:	0800c6b7 	.word	0x0800c6b7
 80039a8:	0800c6bb 	.word	0x0800c6bb
 80039ac:	0800c6a9 	.word	0x0800c6a9
 80039b0:	0800c6b3 	.word	0x0800c6b3
 80039b4:	0800c6c3 	.word	0x0800c6c3
 80039b8:	0800c693 	.word	0x0800c693
 80039bc:	0800c6f0 	.word	0x0800c6f0
 80039c0:	0800c6dd 	.word	0x0800c6dd
 80039c4:	0800c6e8 	.word	0x0800c6e8
 80039c8:	0800c6fa 	.word	0x0800c6fa
 80039cc:	0800c68f 	.word	0x0800c68f

080039d0 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 80039d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d4:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80039d6:	484b      	ldr	r0, [pc, #300]	; (8003b04 <aiPrintNetworkInfo+0x134>)
 80039d8:	f000 f8f8 	bl	8003bcc <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80039dc:	6821      	ldr	r1, [r4, #0]
 80039de:	484a      	ldr	r0, [pc, #296]	; (8003b08 <aiPrintNetworkInfo+0x138>)
 80039e0:	f000 f8f4 	bl	8003bcc <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 80039e4:	6861      	ldr	r1, [r4, #4]
 80039e6:	4849      	ldr	r0, [pc, #292]	; (8003b0c <aiPrintNetworkInfo+0x13c>)
 80039e8:	f000 f8f0 	bl	8003bcc <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	4848      	ldr	r0, [pc, #288]	; (8003b10 <aiPrintNetworkInfo+0x140>)
 80039f0:	f000 f8ec 	bl	8003bcc <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 80039f4:	68e1      	ldr	r1, [r4, #12]
 80039f6:	4847      	ldr	r0, [pc, #284]	; (8003b14 <aiPrintNetworkInfo+0x144>)
 80039f8:	f000 f8e8 	bl	8003bcc <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 80039fc:	69a1      	ldr	r1, [r4, #24]
 80039fe:	780b      	ldrb	r3, [r1, #0]
 8003a00:	b113      	cbz	r3, 8003a08 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003a02:	4845      	ldr	r0, [pc, #276]	; (8003b18 <aiPrintNetworkInfo+0x148>)
 8003a04:	f000 f8e2 	bl	8003bcc <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003a08:	7f21      	ldrb	r1, [r4, #28]
 8003a0a:	7fa3      	ldrb	r3, [r4, #30]
 8003a0c:	7f62      	ldrb	r2, [r4, #29]
 8003a0e:	4843      	ldr	r0, [pc, #268]	; (8003b1c <aiPrintNetworkInfo+0x14c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003a10:	4f43      	ldr	r7, [pc, #268]	; (8003b20 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003a12:	f000 f8db 	bl	8003bcc <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8003a16:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003a1a:	4842      	ldr	r0, [pc, #264]	; (8003b24 <aiPrintNetworkInfo+0x154>)
 8003a1c:	f000 f8d6 	bl	8003bcc <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003a20:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003a22:	4841      	ldr	r0, [pc, #260]	; (8003b28 <aiPrintNetworkInfo+0x158>)
 8003a24:	f000 f8d2 	bl	8003bcc <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8003a28:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8003a2c:	483f      	ldr	r0, [pc, #252]	; (8003b2c <aiPrintNetworkInfo+0x15c>)
 8003a2e:	f000 f8cd 	bl	8003bcc <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003a32:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003a34:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003a38:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003a3c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	dc25      	bgt.n	8003a90 <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003a44:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8003a48:	4839      	ldr	r0, [pc, #228]	; (8003b30 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003a4a:	4f35      	ldr	r7, [pc, #212]	; (8003b20 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003a4c:	f000 f8be 	bl	8003bcc <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003a50:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003a52:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003a56:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003a5a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8003a5e:	42ab      	cmp	r3, r5
 8003a60:	dc25      	bgt.n	8003aae <aiPrintNetworkInfo+0xde>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003a62:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8003a64:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8003a66:	4833      	ldr	r0, [pc, #204]	; (8003b34 <aiPrintNetworkInfo+0x164>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8003a68:	4e33      	ldr	r6, [pc, #204]	; (8003b38 <aiPrintNetworkInfo+0x168>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003a6a:	f000 f8af 	bl	8003bcc <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003a6e:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8003a70:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003a72:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 8003a76:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003a78:	42ab      	cmp	r3, r5
 8003a7a:	dc27      	bgt.n	8003acc <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8003a7c:	4e2f      	ldr	r6, [pc, #188]	; (8003b3c <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 8003a7e:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8003a80:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003a82:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8003a86:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003a88:	42ab      	cmp	r3, r5
 8003a8a:	dc2d      	bgt.n	8003ae8 <aiPrintNetworkInfo+0x118>
  }
}
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 8003a92:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003a94:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f000 f897 	bl	8003bcc <lc_print>
      aiPrintBufferInfo(buffer);
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff fe9e 	bl	80037e0 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8003aa4:	4648      	mov	r0, r9
 8003aa6:	f000 f891 	bl	8003bcc <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003aaa:	3501      	adds	r5, #1
 8003aac:	e7c6      	b.n	8003a3c <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003aae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8003ab0:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003ab2:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f000 f888 	bl	8003bcc <lc_print>
      aiPrintBufferInfo(buffer);
 8003abc:	4630      	mov	r0, r6
 8003abe:	f7ff fe8f 	bl	80037e0 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8003ac2:	4648      	mov	r0, r9
 8003ac4:	f000 f882 	bl	8003bcc <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7c6      	b.n	8003a5a <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8003acc:	4629      	mov	r1, r5
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f000 f87c 	bl	8003bcc <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8003ad4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003ad6:	fb07 0005 	mla	r0, r7, r5, r0
 8003ada:	f7ff fe81 	bl	80037e0 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f000 f874 	bl	8003bcc <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	e7c6      	b.n	8003a76 <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 f86e 	bl	8003bcc <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8003af0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003af2:	fb07 0005 	mla	r0, r7, r5, r0
 8003af6:	f7ff fe73 	bl	80037e0 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003afa:	4640      	mov	r0, r8
 8003afc:	f000 f866 	bl	8003bcc <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7c0      	b.n	8003a86 <aiPrintNetworkInfo+0xb6>
 8003b04:	0800c70c 	.word	0x0800c70c
 8003b08:	0800c726 	.word	0x0800c726
 8003b0c:	0800c741 	.word	0x0800c741
 8003b10:	0800c75c 	.word	0x0800c75c
 8003b14:	0800c777 	.word	0x0800c777
 8003b18:	0800c792 	.word	0x0800c792
 8003b1c:	0800c7ad 	.word	0x0800c7ad
 8003b20:	0800c826 	.word	0x0800c826
 8003b24:	0800c7ce 	.word	0x0800c7ce
 8003b28:	0800c7f0 	.word	0x0800c7f0
 8003b2c:	0800c80b 	.word	0x0800c80b
 8003b30:	0800c831 	.word	0x0800c831
 8003b34:	0800c84c 	.word	0x0800c84c
 8003b38:	0800c86a 	.word	0x0800c86a
 8003b3c:	0800c873 	.word	0x0800c873

08003b40 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8003b40:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_put_c_driver+0x24>)
{
 8003b44:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b13b      	cbz	r3, 8003b5c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003b4c:	4806      	ldr	r0, [pc, #24]	; (8003b68 <_put_c_driver+0x28>)
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	2201      	movs	r2, #1
 8003b54:	f10d 0107 	add.w	r1, sp, #7
 8003b58:	f7fe ff28 	bl	80029ac <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8003b5c:	b003      	add	sp, #12
 8003b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b62:	bf00      	nop
 8003b64:	20000654 	.word	0x20000654
 8003b68:	200013f0 	.word	0x200013f0

08003b6c <ioRawGetUint8>:
 {
 8003b6c:	b508      	push	{r3, lr}
 8003b6e:	460b      	mov	r3, r1
  if (!c)
 8003b70:	4601      	mov	r1, r0
 8003b72:	b120      	cbz	r0, 8003b7e <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 8003b74:	4804      	ldr	r0, [pc, #16]	; (8003b88 <ioRawGetUint8+0x1c>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	f7fe ff72 	bl	8002a60 <HAL_UART_Receive>
   return port_io_get(c, timeout) == true?1:-1;
 8003b7c:	b110      	cbz	r0, 8003b84 <ioRawGetUint8+0x18>
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295
 }
 8003b82:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 8003b84:	2001      	movs	r0, #1
 8003b86:	e7fc      	b.n	8003b82 <ioRawGetUint8+0x16>
 8003b88:	200013f0 	.word	0x200013f0

08003b8c <_write>:
{
 8003b8c:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003b8e:	1e14      	subs	r4, r2, #0
 8003b90:	da0a      	bge.n	8003ba8 <_write+0x1c>
 8003b92:	3801      	subs	r0, #1
 8003b94:	2801      	cmp	r0, #1
 8003b96:	d907      	bls.n	8003ba8 <_write+0x1c>
    errno = EBADF;
 8003b98:	f006 f90c 	bl	8009db4 <__errno>
 8003b9c:	2309      	movs	r3, #9
 8003b9e:	6003      	str	r3, [r0, #0]
    return -1;
 8003ba0:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <_write+0x38>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f9      	beq.n	8003ba4 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003bb0:	b2a2      	uxth	r2, r4
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <_write+0x3c>)
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	f7fe fef8 	bl	80029ac <HAL_UART_Transmit>
  return (status ? count : 0);
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	bf18      	it	ne
 8003bc0:	2400      	movne	r4, #0
 8003bc2:	e7ef      	b.n	8003ba4 <_write+0x18>
 8003bc4:	20000654 	.word	0x20000654
 8003bc8:	200013f0 	.word	0x200013f0

08003bcc <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003bcc:	b40f      	push	{r0, r1, r2, r3}
 8003bce:	b507      	push	{r0, r1, r2, lr}
 8003bd0:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003bd2:	2100      	movs	r1, #0
{
 8003bd4:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <lc_print+0x20>)
  va_start(ap, fmt);
 8003bda:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003bdc:	f000 fb22 	bl	8004224 <vlc_print>
  va_end(ap);
}
 8003be0:	b003      	add	sp, #12
 8003be2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be6:	b004      	add	sp, #16
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	08003b41 	.word	0x08003b41

08003bf0 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003bf0:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8003bf2:	4d11      	ldr	r5, [pc, #68]	; (8003c38 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003bf4:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8003bf6:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003bf8:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003bfc:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003c00:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003c04:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003c06:	f005 f8bb 	bl	8008d80 <malloc>

  /* remember size */
  if (ptr) {
 8003c0a:	b1a0      	cbz	r0, 8003c36 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003c0c:	1903      	adds	r3, r0, r4
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003c10:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003c12:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	07db      	lsls	r3, r3, #31
 8003c18:	d50c      	bpl.n	8003c34 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003c1a:	68eb      	ldr	r3, [r5, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003c20:	686b      	ldr	r3, [r5, #4]
 8003c22:	4423      	add	r3, r4
 8003c24:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003c26:	69ab      	ldr	r3, [r5, #24]
 8003c28:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003c2a:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003c2c:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8003c2e:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8003c30:	bf88      	it	hi
 8003c32:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003c34:	3004      	adds	r0, #4
}
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	2000154c 	.word	0x2000154c
 8003c3c:	efdcba98 	.word	0xefdcba98

08003c40 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <__wrap_free+0x48>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	f042 0204 	orr.w	r2, r2, #4
{
 8003c48:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8003c4a:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	b1c0      	cbz	r0, 8003c82 <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8003c50:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__wrap_free+0x4c>)
 8003c56:	5855      	ldr	r5, [r2, r1]
 8003c58:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8003c5a:	bf04      	itt	eq
 8003c5c:	2400      	moveq	r4, #0
 8003c5e:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 8003c64:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 8003c68:	d508      	bpl.n	8003c7c <__wrap_free+0x3c>
    io_malloc.free_req++;
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	3201      	adds	r2, #1
 8003c6e:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	440a      	add	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	1a52      	subs	r2, r2, r1
 8003c7a:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8003c7c:	bc30      	pop	{r4, r5}
  __real_free(p);
 8003c7e:	f005 b887 	b.w	8008d90 <free>
}
 8003c82:	bc30      	pop	{r4, r5}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	2000154c 	.word	0x2000154c
 8003c8c:	efdcba98 	.word	0xefdcba98

08003c90 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8003c90:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003c92:	4c11      	ldr	r4, [pc, #68]	; (8003cd8 <stackMonInit+0x48>)
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <stackMonInit+0x4c>)
 8003c96:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8003c98:	1a9b      	subs	r3, r3, r2
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003c9a:	2500      	movs	r5, #0
  io_stack.bstack = io_stack.estack - msize;
 8003c9c:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003c9e:	0783      	lsls	r3, r0, #30
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003ca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ca4:	60e5      	str	r5, [r4, #12]
  io_stack.ctrl = ctrl;
 8003ca6:	6020      	str	r0, [r4, #0]
  io_stack.cstack = cstack;
 8003ca8:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8003caa:	6162      	str	r2, [r4, #20]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003cac:	d511      	bpl.n	8003cd2 <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8003cae:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <stackMonInit+0x50>)
 8003cb0:	f7ff ff8c 	bl	8003bcc <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003cb4:	6921      	ldr	r1, [r4, #16]
 8003cb6:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8003cb8:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003cba:	1ac9      	subs	r1, r1, r3
 8003cbc:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8003cbe:	b13d      	cbz	r5, 8003cd0 <stackMonInit+0x40>
 8003cc0:	6962      	ldr	r2, [r4, #20]
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	d904      	bls.n	8003cd0 <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8003cc6:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <stackMonInit+0x54>)
 8003cc8:	f7ff ff80 	bl	8003bcc <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	7123      	strb	r3, [r4, #4]
  }
}
 8003cd0:	bd38      	pop	{r3, r4, r5, pc}
 8003cd2:	2501      	movs	r5, #1
 8003cd4:	e7ee      	b.n	8003cb4 <stackMonInit+0x24>
 8003cd6:	bf00      	nop
 8003cd8:	20001568 	.word	0x20001568
 8003cdc:	20018000 	.word	0x20018000
 8003ce0:	0800c87c 	.word	0x0800c87c
 8003ce4:	0800c8bc 	.word	0x0800c8bc

08003ce8 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	468a      	mov	sl, r1
  if (!t)
 8003cf0:	4617      	mov	r7, r2
 8003cf2:	b382      	cbz	r2, 8003d56 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003cf4:	f7fe f950 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003cf8:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003cfa:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003cfc:	9001      	str	r0, [sp, #4]
 8003cfe:	4651      	mov	r1, sl
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7fc ff51 	bl	8000ba8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003d06:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003d0a:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003d0c:	fba4 0106 	umull	r0, r1, r4, r6
 8003d10:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003d12:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003d5c <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8003d16:	2300      	movs	r3, #0
 8003d18:	fb06 110a 	mla	r1, r6, sl, r1
 8003d1c:	f7fc ff44 	bl	8000ba8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003d20:	fbab 3106 	umull	r3, r1, fp, r6
 8003d24:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003d26:	fba4 0109 	umull	r0, r1, r4, r9
 8003d2a:	9a01      	ldr	r2, [sp, #4]
 8003d2c:	fb09 110a 	mla	r1, r9, sl, r1
 8003d30:	2300      	movs	r3, #0
 8003d32:	f7fc ff39 	bl	8000ba8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8003d36:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003d38:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003d3a:	fbab 8909 	umull	r8, r9, fp, r9
 8003d3e:	eba0 0008 	sub.w	r0, r0, r8
 8003d42:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8003d46:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003d4a:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003d4c:	60f8      	str	r0, [r7, #12]
  return 0;
 8003d4e:	2000      	movs	r0, #0
}
 8003d50:	b003      	add	sp, #12
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003d56:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5a:	e7f9      	b.n	8003d50 <dwtCyclesToTime+0x68>
 8003d5c:	000f4240 	.word	0x000f4240

08003d60 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <getFlashCacheConf+0x38>)
{
 8003d62:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003d68:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003d6a:	9b01      	ldr	r3, [sp, #4]
 8003d6c:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003d6e:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003d70:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 8003d74:	bf4c      	ite	mi
 8003d76:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003d7a:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003d7e:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003d80:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8003d82:	bf48      	it	mi
 8003d84:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003d88:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003d8a:	bf48      	it	mi
 8003d8c:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003d90:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003d94:	b002      	add	sp, #8
 8003d96:	4770      	bx	lr
 8003d98:	40022000 	.word	0x40022000

08003d9c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003da0:	f7fe f8fa 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8003da4:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8003da6:	f7fe f8f7 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8003daa:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003dac:	f7ff ffd8 	bl	8003d60 <getFlashCacheConf>
 8003db0:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003db2:	f7fd fb57 	bl	8001464 <HAL_GetDEVID>
 8003db6:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003db8:	f7fd fb4e 	bl	8001458 <HAL_GetREVID>
 8003dbc:	6120      	str	r0, [r4, #16]
}
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <systemSettingLog>:

void systemSettingLog(void)
{
 8003dc0:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003dc2:	2301      	movs	r3, #1
{
 8003dc4:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	210b      	movs	r1, #11
 8003dca:	4838      	ldr	r0, [pc, #224]	; (8003eac <systemSettingLog+0xec>)
 8003dcc:	f7ff fefe 	bl	8003bcc <lc_print>
  if (!conf)
 8003dd0:	a803      	add	r0, sp, #12
 8003dd2:	f7ff ffe3 	bl	8003d9c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003dd6:	4836      	ldr	r0, [pc, #216]	; (8003eb0 <systemSettingLog+0xf0>)
 8003dd8:	f7ff fef8 	bl	8003bcc <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003ddc:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8003dde:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003de2:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d056      	beq.n	8003e96 <systemSettingLog+0xd6>
 8003de8:	d848      	bhi.n	8003e7c <systemSettingLog+0xbc>
 8003dea:	f240 4235 	movw	r2, #1077	; 0x435
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d053      	beq.n	8003e9a <systemSettingLog+0xda>
 8003df2:	f240 4261 	movw	r2, #1121	; 0x461
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d051      	beq.n	8003e9e <systemSettingLog+0xde>
  case 0x415: str = "STM32L4x6xx"; break;  /* Orca_1M */
 8003dfa:	4a2e      	ldr	r2, [pc, #184]	; (8003eb4 <systemSettingLog+0xf4>)
 8003dfc:	f240 4415 	movw	r4, #1045	; 0x415
 8003e00:	f1a2 0022 	sub.w	r0, r2, #34	; 0x22
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	bf08      	it	eq
 8003e08:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003e0a:	9b07      	ldr	r3, [sp, #28]
 8003e0c:	482a      	ldr	r0, [pc, #168]	; (8003eb8 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003e0e:	4c2b      	ldr	r4, [pc, #172]	; (8003ebc <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003e10:	f7ff fedc 	bl	8003bcc <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <systemSettingLog+0x100>)
 8003e16:	2104      	movs	r1, #4
 8003e18:	1d5a      	adds	r2, r3, #5
 8003e1a:	f103 000a 	add.w	r0, r3, #10
 8003e1e:	f7ff fed5 	bl	8003bcc <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003e22:	f7fd fb15 	bl	8001450 <HAL_GetHalVersion>
 8003e26:	4601      	mov	r1, r0
 8003e28:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <systemSettingLog+0x104>)
 8003e2a:	f7ff fecf 	bl	8003bcc <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003e2e:	9903      	ldr	r1, [sp, #12]
 8003e30:	4825      	ldr	r0, [pc, #148]	; (8003ec8 <systemSettingLog+0x108>)
 8003e32:	fb91 f1f4 	sdiv	r1, r1, r4
 8003e36:	f7ff fec9 	bl	8003bcc <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003e3a:	9904      	ldr	r1, [sp, #16]
 8003e3c:	4823      	ldr	r0, [pc, #140]	; (8003ecc <systemSettingLog+0x10c>)
 8003e3e:	fb91 f1f4 	sdiv	r1, r1, r4
 8003e42:	f7ff fec3 	bl	8003bcc <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <systemSettingLog+0x110>)
    return "False";
 8003e48:	4822      	ldr	r0, [pc, #136]	; (8003ed4 <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 8003e4a:	6819      	ldr	r1, [r3, #0]
    return "False";
 8003e4c:	1d44      	adds	r4, r0, #5
 8003e4e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003e52:	bf14      	ite	ne
 8003e54:	4602      	movne	r2, r0
 8003e56:	4622      	moveq	r2, r4
 8003e58:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003e5c:	bf14      	ite	ne
 8003e5e:	4603      	movne	r3, r0
 8003e60:	4623      	moveq	r3, r4
 8003e62:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003e66:	bf18      	it	ne
 8003e68:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003e6a:	f001 0507 	and.w	r5, r1, #7
 8003e6e:	e9cd 4500 	strd	r4, r5, [sp]
 8003e72:	30ec      	adds	r0, #236	; 0xec
 8003e74:	f7ff feaa 	bl	8003bcc <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003e78:	b009      	add	sp, #36	; 0x24
 8003e7a:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 8003e7c:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8003e80:	d00f      	beq.n	8003ea2 <systemSettingLog+0xe2>
 8003e82:	f240 4271 	movw	r2, #1137	; 0x471
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00d      	beq.n	8003ea6 <systemSettingLog+0xe6>
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <systemSettingLog+0xf4>)
 8003e8c:	f240 4464 	movw	r4, #1124	; 0x464
 8003e90:	f1a2 0038 	sub.w	r0, r2, #56	; 0x38
 8003e94:	e7b6      	b.n	8003e04 <systemSettingLog+0x44>
  switch (dev_id) {
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <systemSettingLog+0x118>)
 8003e98:	e7b7      	b.n	8003e0a <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <systemSettingLog+0x11c>)
 8003e9c:	e7b5      	b.n	8003e0a <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <systemSettingLog+0x120>)
 8003ea0:	e7b3      	b.n	8003e0a <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 8003ea2:	4a10      	ldr	r2, [pc, #64]	; (8003ee4 <systemSettingLog+0x124>)
 8003ea4:	e7b1      	b.n	8003e0a <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <systemSettingLog+0x128>)
 8003ea8:	e7af      	b.n	8003e0a <systemSettingLog+0x4a>
 8003eaa:	bf00      	nop
 8003eac:	0800c945 	.word	0x0800c945
 8003eb0:	0800c962 	.word	0x0800c962
 8003eb4:	0800c932 	.word	0x0800c932
 8003eb8:	0800c982 	.word	0x0800c982
 8003ebc:	000f4240 	.word	0x000f4240
 8003ec0:	0800c9b3 	.word	0x0800c9b3
 8003ec4:	0800c9db 	.word	0x0800c9db
 8003ec8:	0800c9f4 	.word	0x0800c9f4
 8003ecc:	0800ca0d 	.word	0x0800ca0d
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	0800c93a 	.word	0x0800c93a
 8003ed8:	0800c8ee 	.word	0x0800c8ee
 8003edc:	0800c904 	.word	0x0800c904
 8003ee0:	0800c8e2 	.word	0x0800c8e2
 8003ee4:	0800c927 	.word	0x0800c927
 8003ee8:	0800c91c 	.word	0x0800c91c

08003eec <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <port_hal_crc_ip_init_imp+0x1c>)
 8003eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8003ef8:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8003efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003f02:	b002      	add	sp, #8
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003f0c:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <port_dwt_init_imp+0x20>)
 8003f0e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <port_dwt_init_imp+0x24>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed00 	.word	0xe000ed00
 8003f30:	e0001000 	.word	0xe0001000

08003f34 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <ai_mnetwork_handle+0x18>)
 8003f36:	b120      	cbz	r0, 8003f42 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	4618      	moveq	r0, r3
 8003f3e:	2000      	movne	r0, #0
 8003f40:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003f42:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003f44:	2a00      	cmp	r2, #0
 8003f46:	bf08      	it	eq
 8003f48:	4618      	moveq	r0, r3
}
 8003f4a:	4770      	bx	lr
 8003f4c:	20001598 	.word	0x20001598

08003f50 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003f50:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003f52:	4604      	mov	r4, r0
 8003f54:	b160      	cbz	r0, 8003f70 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003f56:	f7fc f98b 	bl	8000270 <strlen>
 8003f5a:	2807      	cmp	r0, #7
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	d107      	bne.n	8003f70 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003f62:	4621      	mov	r1, r4
 8003f64:	f005 feb9 	bl	8009cda <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003f68:	fab0 f080 	clz	r0, r0
 8003f6c:	0940      	lsrs	r0, r0, #5
}
 8003f6e:	bd10      	pop	{r4, pc}
    return false;
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7fc      	b.n	8003f6e <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003f74:	0800cb28 	.word	0x0800cb28

08003f78 <MX_X_CUBE_AI_Init>:
{
 8003f78:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003f7a:	f7fd f8e7 	bl	800114c <MX_USART2_UART_Init>
}
 8003f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8003f82:	f7ff b85f 	b.w	8003044 <aiSystemPerformanceInit>

08003f86 <MX_X_CUBE_AI_Process>:
{
 8003f86:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 8003f88:	f7ff f914 	bl	80031b4 <aiSystemPerformanceProcess>
}
 8003f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 8003f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f94:	f7fd ba48 	b.w	8001428 <HAL_Delay>

08003f98 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003f9c:	f7ff ffd8 	bl	8003f50 <ai_mnetwork_is_valid.constprop.0>
 8003fa0:	b920      	cbnz	r0, 8003fac <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <ai_mnetwork_find+0x18>)
 8003fa6:	bf18      	it	ne
 8003fa8:	2000      	movne	r0, #0
}
 8003faa:	bd10      	pop	{r4, pc}
            return entry->name;
 8003fac:	4800      	ldr	r0, [pc, #0]	; (8003fb0 <ai_mnetwork_find+0x18>)
 8003fae:	e7fc      	b.n	8003faa <ai_mnetwork_find+0x12>
 8003fb0:	0800cb28 	.word	0x0800cb28

08003fb4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003fb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fb6:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003fb8:	2000      	movs	r0, #0
{
 8003fba:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003fbc:	f7ff ffba 	bl	8003f34 <ai_mnetwork_handle>
{
 8003fc0:	460d      	mov	r5, r1

    if (!inst) {
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	b1e0      	cbz	r0, 8004000 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7ff ffc2 	bl	8003f50 <ai_mnetwork_is_valid.constprop.0>
 8003fcc:	9901      	ldr	r1, [sp, #4]
 8003fce:	b910      	cbnz	r0, 8003fd6 <ai_mnetwork_create+0x22>
 8003fd0:	2214      	movs	r2, #20
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	e00d      	b.n	8003ff2 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fbc8 	bl	800476c <ai_network_create>
 8003fdc:	b2c2      	uxtb	r2, r0
 8003fde:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003fe2:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003fe6:	d104      	bne.n	8003ff2 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003fe8:	4906      	ldr	r1, [pc, #24]	; (8004004 <ai_mnetwork_create+0x50>)
 8003fea:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003fec:	6829      	ldr	r1, [r5, #0]
 8003fee:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003ff0:	602c      	str	r4, [r5, #0]
        return err;
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f362 0007 	bfi	r0, r2, #0, #8
 8003ff8:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	2231      	movs	r2, #49	; 0x31
 8004002:	e7e6      	b.n	8003fd2 <ai_mnetwork_create+0x1e>
 8004004:	0800cb30 	.word	0x0800cb30

08004008 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800400c:	f7ff ff92 	bl	8003f34 <ai_mnetwork_handle>
    if (inn) {
 8004010:	4605      	mov	r5, r0
 8004012:	b160      	cbz	r0, 800402e <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	6840      	ldr	r0, [r0, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4798      	blx	r3
        if (hdl != inn->handle) {
 800401c:	686b      	ldr	r3, [r5, #4]
 800401e:	4283      	cmp	r3, r0
 8004020:	d005      	beq.n	800402e <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <ai_mnetwork_destroy+0x2c>)
 8004024:	429d      	cmp	r5, r3
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	d100      	bne.n	800402e <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 800402c:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 800402e:	4620      	mov	r0, r4
 8004030:	bd38      	pop	{r3, r4, r5, pc}
 8004032:	bf00      	nop
 8004034:	20001598 	.word	0x20001598

08004038 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004038:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800403a:	f7ff ff7b 	bl	8003f34 <ai_mnetwork_handle>
    if (inn)
 800403e:	b128      	cbz	r0, 800404c <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	6840      	ldr	r0, [r0, #4]
 8004044:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 800404a:	4710      	bx	r2
}
 800404c:	bd10      	pop	{r4, pc}

0800404e <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800404e:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004050:	f7ff ff70 	bl	8003f34 <ai_mnetwork_handle>
    if (inn)
 8004054:	b128      	cbz	r0, 8004062 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004056:	6803      	ldr	r3, [r0, #0]
 8004058:	6840      	ldr	r0, [r0, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 800405c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004060:	4718      	bx	r3
}
 8004062:	f241 0014 	movw	r0, #4116	; 0x1014
 8004066:	bd10      	pop	{r4, pc}

08004068 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004068:	b530      	push	{r4, r5, lr}
 800406a:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800406c:	f7ff ff62 	bl	8003f34 <ai_mnetwork_handle>
    if (inn) {
 8004070:	4604      	mov	r4, r0
 8004072:	b168      	cbz	r0, 8004090 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8004074:	6803      	ldr	r3, [r0, #0]
 8004076:	4668      	mov	r0, sp
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 800407c:	2500      	movs	r5, #0
 800407e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004082:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004084:	42aa      	cmp	r2, r5
 8004086:	dc05      	bgt.n	8004094 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	6860      	ldr	r0, [r4, #4]
 800408c:	4669      	mov	r1, sp
 800408e:	4798      	blx	r3
    }
    else
        return false;
}
 8004090:	b00f      	add	sp, #60	; 0x3c
 8004092:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	4629      	mov	r1, r5
 8004098:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800409c:	a803      	add	r0, sp, #12
 800409e:	f000 fcbb 	bl	8004a18 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80040a2:	3501      	adds	r5, #1
 80040a4:	e7eb      	b.n	800407e <ai_mnetwork_init+0x16>

080040a6 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80040a6:	b513      	push	{r0, r1, r4, lr}
 80040a8:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80040aa:	f7ff ff43 	bl	8003f34 <ai_mnetwork_handle>
    if (inn)
 80040ae:	4603      	mov	r3, r0
 80040b0:	b140      	cbz	r0, 80040c4 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80040b2:	6800      	ldr	r0, [r0, #0]
 80040b4:	9a01      	ldr	r2, [sp, #4]
 80040b6:	6a04      	ldr	r4, [r0, #32]
 80040b8:	6858      	ldr	r0, [r3, #4]
 80040ba:	4623      	mov	r3, r4
    else
        return 0;
}
 80040bc:	b002      	add	sp, #8
 80040be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80040c2:	4718      	bx	r3
}
 80040c4:	b002      	add	sp, #8
 80040c6:	bd10      	pop	{r4, pc}

080040c8 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80040cc:	f7ff ff32 	bl	8003f34 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 80040d0:	b188      	cbz	r0, 80040f6 <ai_mnetwork_get_private_handle+0x2e>
 80040d2:	b181      	cbz	r1, 80040f6 <ai_mnetwork_get_private_handle+0x2e>
 80040d4:	b17d      	cbz	r5, 80040f6 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 80040d6:	6843      	ldr	r3, [r0, #4]
 80040d8:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 80040da:	f100 0408 	add.w	r4, r0, #8
 80040de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ee:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 80040f2:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	e7fb      	b.n	80040f4 <ai_mnetwork_get_private_handle+0x2c>

080040fc <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004100:	6896      	ldr	r6, [r2, #8]
{
 8004102:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004104:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004106:	f016 0304 	ands.w	r3, r6, #4
{
 800410a:	4614      	mov	r4, r2
  buf[idx--] = 0;
 800410c:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004110:	d028      	beq.n	8004164 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8004112:	42a9      	cmp	r1, r5
 8004114:	da07      	bge.n	8004126 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004116:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004118:	4240      	negs	r0, r0
      specifier->width -= 1;
 800411a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 800411e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004122:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8004124:	252d      	movs	r5, #45	; 0x2d
 8004126:	f016 0f08 	tst.w	r6, #8
 800412a:	bf14      	ite	ne
 800412c:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004130:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8004134:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004138:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 800413a:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800413e:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004142:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004146:	f1ba 0f00 	cmp.w	sl, #0
 800414a:	d033      	beq.n	80041b4 <_write_number+0xb8>
      chr = number & 0x0F;
 800414c:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004150:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004152:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004154:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004158:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800415c:	d906      	bls.n	800416c <_write_number+0x70>
 800415e:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e004      	b.n	800416e <_write_number+0x72>
  char sign_neg = 0;
 8004164:	461d      	mov	r5, r3
 8004166:	e7de      	b.n	8004126 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004168:	4617      	mov	r7, r2
 800416a:	e7ea      	b.n	8004142 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800416c:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 800416e:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8004172:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004176:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 800417a:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 800417e:	d1f3      	bne.n	8004168 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004180:	f006 0101 	and.w	r1, r6, #1
 8004184:	b155      	cbz	r5, 800419c <_write_number+0xa0>
 8004186:	b949      	cbnz	r1, 800419c <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8004188:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800418c:	eb0d 0203 	add.w	r2, sp, r3
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8004196:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 800419a:	1eba      	subs	r2, r7, #2
 800419c:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	bf14      	ite	ne
 80041a2:	2130      	movne	r1, #48	; 0x30
 80041a4:	2120      	moveq	r1, #32
 80041a6:	f006 0602 	and.w	r6, r6, #2
 80041aa:	455b      	cmp	r3, fp
 80041ac:	dd13      	ble.n	80041d6 <_write_number+0xda>
 80041ae:	b166      	cbz	r6, 80041ca <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80041b0:	b9a5      	cbnz	r5, 80041dc <_write_number+0xe0>
 80041b2:	e01c      	b.n	80041ee <_write_number+0xf2>
      t = number / 10;
 80041b4:	220a      	movs	r2, #10
 80041b6:	2300      	movs	r3, #0
 80041b8:	f7fc fcf6 	bl	8000ba8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80041bc:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80041c0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80041c4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80041c8:	e7ca      	b.n	8004160 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80041ca:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80041ce:	f10b 0b01 	add.w	fp, fp, #1
 80041d2:	3a01      	subs	r2, #1
 80041d4:	e7e9      	b.n	80041aa <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80041d6:	b155      	cbz	r5, 80041ee <_write_number+0xf2>
 80041d8:	455b      	cmp	r3, fp
 80041da:	d108      	bne.n	80041ee <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80041dc:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80041e0:	446b      	add	r3, sp
 80041e2:	212d      	movs	r1, #45	; 0x2d
 80041e4:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 80041e8:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80041ec:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80041ee:	eb0d 0602 	add.w	r6, sp, r2
 80041f2:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041fa:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80041fc:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80041fe:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004200:	45ab      	cmp	fp, r5
 8004202:	d1f7      	bne.n	80041f4 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004204:	68a3      	ldr	r3, [r4, #8]
 8004206:	079b      	lsls	r3, r3, #30
 8004208:	d408      	bmi.n	800421c <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 800420a:	4628      	mov	r0, r5
 800420c:	b011      	add	sp, #68	; 0x44
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	6920      	ldr	r0, [r4, #16]
 8004216:	2120      	movs	r1, #32
 8004218:	4798      	blx	r3
 800421a:	3501      	adds	r5, #1
    while (count < specifier->width) {
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	42ab      	cmp	r3, r5
 8004220:	dcf7      	bgt.n	8004212 <_write_number+0x116>
 8004222:	e7f2      	b.n	800420a <_write_number+0x10e>

08004224 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	4682      	mov	sl, r0
 800422a:	b09d      	sub	sp, #116	; 0x74
 800422c:	4688      	mov	r8, r1
 800422e:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004230:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8004234:	4613      	mov	r3, r2
 8004236:	f813 1b01 	ldrb.w	r1, [r3], #1
 800423a:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 800423c:	b919      	cbnz	r1, 8004246 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 800423e:	4658      	mov	r0, fp
 8004240:	b01d      	add	sp, #116	; 0x74
 8004242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004246:	290a      	cmp	r1, #10
 8004248:	d104      	bne.n	8004254 <vlc_print+0x30>
      putc_fct(user, c);
 800424a:	4640      	mov	r0, r8
 800424c:	47d0      	blx	sl
      count++;
 800424e:	f10b 0b01 	add.w	fp, fp, #1
 8004252:	e0fb      	b.n	800444c <vlc_print+0x228>
    else if (c == '%')
 8004254:	2925      	cmp	r1, #37	; 0x25
 8004256:	d1f8      	bne.n	800424a <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004258:	2300      	movs	r3, #0
 800425a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800425e:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8004262:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004266:	461f      	mov	r7, r3
 8004268:	4618      	mov	r0, r3
 800426a:	461a      	mov	r2, r3
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	461e      	mov	r6, r3
      bool long_type = false;
 8004270:	469c      	mov	ip, r3
      bool has_precision = false;
 8004272:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8004274:	9904      	ldr	r1, [sp, #16]
 8004276:	f811 5b01 	ldrb.w	r5, [r1], #1
 800427a:	9104      	str	r1, [sp, #16]
        if (!c)
 800427c:	b32d      	cbz	r5, 80042ca <vlc_print+0xa6>
        else if (c == '0')
 800427e:	2d39      	cmp	r5, #57	; 0x39
 8004280:	d814      	bhi.n	80042ac <vlc_print+0x88>
 8004282:	2d2c      	cmp	r5, #44	; 0x2c
 8004284:	d91e      	bls.n	80042c4 <vlc_print+0xa0>
 8004286:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 800428a:	290c      	cmp	r1, #12
 800428c:	d811      	bhi.n	80042b2 <vlc_print+0x8e>
 800428e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004292:	0044      	.short	0x0044
 8004294:	001001ff 	.word	0x001001ff
 8004298:	00470030 	.word	0x00470030
 800429c:	00470047 	.word	0x00470047
 80042a0:	00470047 	.word	0x00470047
 80042a4:	00470047 	.word	0x00470047
 80042a8:	00470047 	.word	0x00470047
 80042ac:	2d6c      	cmp	r5, #108	; 0x6c
 80042ae:	f000 8202 	beq.w	80046b6 <vlc_print+0x492>
          switch(c)
 80042b2:	2d78      	cmp	r5, #120	; 0x78
 80042b4:	d809      	bhi.n	80042ca <vlc_print+0xa6>
 80042b6:	2d62      	cmp	r5, #98	; 0x62
 80042b8:	d83d      	bhi.n	8004336 <vlc_print+0x112>
 80042ba:	2d46      	cmp	r5, #70	; 0x46
 80042bc:	f000 810c 	beq.w	80044d8 <vlc_print+0x2b4>
 80042c0:	2d58      	cmp	r5, #88	; 0x58
 80042c2:	d06b      	beq.n	800439c <vlc_print+0x178>
 80042c4:	2d25      	cmp	r5, #37	; 0x25
 80042c6:	f000 8088 	beq.w	80043da <vlc_print+0x1b6>
 80042ca:	b103      	cbz	r3, 80042ce <vlc_print+0xaa>
 80042cc:	9709      	str	r7, [sp, #36]	; 0x24
 80042ce:	b100      	cbz	r0, 80042d2 <vlc_print+0xae>
 80042d0:	9208      	str	r2, [sp, #32]
 80042d2:	9b00      	ldr	r3, [sp, #0]
 80042d4:	b103      	cbz	r3, 80042d8 <vlc_print+0xb4>
 80042d6:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 80042d8:	213c      	movs	r1, #60	; 0x3c
 80042da:	4640      	mov	r0, r8
 80042dc:	47d0      	blx	sl
        putc_fct(user, '!');
 80042de:	2121      	movs	r1, #33	; 0x21
 80042e0:	4640      	mov	r0, r8
 80042e2:	47d0      	blx	sl
        putc_fct(user, '>');
 80042e4:	213e      	movs	r1, #62	; 0x3e
 80042e6:	4640      	mov	r0, r8
 80042e8:	47d0      	blx	sl
        va_arg(vl, signed long);
 80042ea:	3404      	adds	r4, #4
        count += 3;
 80042ec:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 80042f0:	e0ac      	b.n	800444c <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 80042f2:	ea56 0502 	orrs.w	r5, r6, r2
 80042f6:	d105      	bne.n	8004304 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80042f8:	f047 0701 	orr.w	r7, r7, #1
 80042fc:	462a      	mov	r2, r5
 80042fe:	462e      	mov	r6, r5
 8004300:	2301      	movs	r3, #1
 8004302:	e7b7      	b.n	8004274 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004304:	210a      	movs	r1, #10
          } else if (has_precision) {
 8004306:	f1be 0f00 	cmp.w	lr, #0
 800430a:	d002      	beq.n	8004312 <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800430c:	434a      	muls	r2, r1
 800430e:	4670      	mov	r0, lr
 8004310:	e7b0      	b.n	8004274 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 8004312:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8004314:	2101      	movs	r1, #1
 8004316:	9100      	str	r1, [sp, #0]
 8004318:	e7ac      	b.n	8004274 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 800431a:	f047 0702 	orr.w	r7, r7, #2
 800431e:	e7ef      	b.n	8004300 <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004320:	3d30      	subs	r5, #48	; 0x30
 8004322:	210a      	movs	r1, #10
          if (has_precision) {
 8004324:	f1be 0f00 	cmp.w	lr, #0
 8004328:	d002      	beq.n	8004330 <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800432a:	fb01 5202 	mla	r2, r1, r2, r5
 800432e:	e7ee      	b.n	800430e <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 8004330:	fb01 5606 	mla	r6, r1, r6, r5
 8004334:	e7ee      	b.n	8004314 <vlc_print+0xf0>
          switch(c)
 8004336:	3d63      	subs	r5, #99	; 0x63
 8004338:	2d15      	cmp	r5, #21
 800433a:	d8c6      	bhi.n	80042ca <vlc_print+0xa6>
 800433c:	f20f 0e04 	addw	lr, pc, #4
 8004340:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8004344:	080043ed 	.word	0x080043ed
 8004348:	080044a1 	.word	0x080044a1
 800434c:	080042cb 	.word	0x080042cb
 8004350:	080044d9 	.word	0x080044d9
 8004354:	080042cb 	.word	0x080042cb
 8004358:	080042cb 	.word	0x080042cb
 800435c:	080044a1 	.word	0x080044a1
 8004360:	080042cb 	.word	0x080042cb
 8004364:	080042cb 	.word	0x080042cb
 8004368:	080042cb 	.word	0x080042cb
 800436c:	080042cb 	.word	0x080042cb
 8004370:	080042cb 	.word	0x080042cb
 8004374:	080042cb 	.word	0x080042cb
 8004378:	0800448b 	.word	0x0800448b
 800437c:	080042cb 	.word	0x080042cb
 8004380:	080042cb 	.word	0x080042cb
 8004384:	08004401 	.word	0x08004401
 8004388:	080042cb 	.word	0x080042cb
 800438c:	08004697 	.word	0x08004697
 8004390:	080042cb 	.word	0x080042cb
 8004394:	080042cb 	.word	0x080042cb
 8004398:	080043b5 	.word	0x080043b5
 800439c:	b103      	cbz	r3, 80043a0 <vlc_print+0x17c>
 800439e:	9709      	str	r7, [sp, #36]	; 0x24
 80043a0:	b100      	cbz	r0, 80043a4 <vlc_print+0x180>
 80043a2:	9208      	str	r2, [sp, #32]
 80043a4:	9b00      	ldr	r3, [sp, #0]
 80043a6:	b103      	cbz	r3, 80043aa <vlc_print+0x186>
 80043a8:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 80043aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ac:	f043 0308 	orr.w	r3, r3, #8
 80043b0:	9309      	str	r3, [sp, #36]	; 0x24
 80043b2:	e006      	b.n	80043c2 <vlc_print+0x19e>
 80043b4:	b103      	cbz	r3, 80043b8 <vlc_print+0x194>
 80043b6:	9709      	str	r7, [sp, #36]	; 0x24
 80043b8:	b100      	cbz	r0, 80043bc <vlc_print+0x198>
 80043ba:	9208      	str	r2, [sp, #32]
 80043bc:	9b00      	ldr	r3, [sp, #0]
 80043be:	b103      	cbz	r3, 80043c2 <vlc_print+0x19e>
 80043c0:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 80043c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80043c4:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 80043c8:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 80043cc:	aa07      	add	r2, sp, #28
 80043ce:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80043d2:	f7ff fe93 	bl	80040fc <_write_number>
 80043d6:	4483      	add	fp, r0
            break;
 80043d8:	e038      	b.n	800444c <vlc_print+0x228>
 80043da:	b103      	cbz	r3, 80043de <vlc_print+0x1ba>
 80043dc:	9709      	str	r7, [sp, #36]	; 0x24
 80043de:	b100      	cbz	r0, 80043e2 <vlc_print+0x1be>
 80043e0:	9208      	str	r2, [sp, #32]
 80043e2:	9b00      	ldr	r3, [sp, #0]
 80043e4:	b103      	cbz	r3, 80043e8 <vlc_print+0x1c4>
 80043e6:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 80043e8:	2125      	movs	r1, #37	; 0x25
 80043ea:	e72e      	b.n	800424a <vlc_print+0x26>
 80043ec:	b103      	cbz	r3, 80043f0 <vlc_print+0x1cc>
 80043ee:	9709      	str	r7, [sp, #36]	; 0x24
 80043f0:	b100      	cbz	r0, 80043f4 <vlc_print+0x1d0>
 80043f2:	9208      	str	r2, [sp, #32]
 80043f4:	9b00      	ldr	r3, [sp, #0]
 80043f6:	b103      	cbz	r3, 80043fa <vlc_print+0x1d6>
 80043f8:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 80043fa:	f814 1b04 	ldrb.w	r1, [r4], #4
 80043fe:	e724      	b.n	800424a <vlc_print+0x26>
 8004400:	b103      	cbz	r3, 8004404 <vlc_print+0x1e0>
 8004402:	9709      	str	r7, [sp, #36]	; 0x24
 8004404:	b100      	cbz	r0, 8004408 <vlc_print+0x1e4>
 8004406:	9208      	str	r2, [sp, #32]
 8004408:	9b00      	ldr	r3, [sp, #0]
 800440a:	b103      	cbz	r3, 800440e <vlc_print+0x1ea>
 800440c:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 800440e:	4bab      	ldr	r3, [pc, #684]	; (80046bc <vlc_print+0x498>)
            str = va_arg(vl, char*);
 8004410:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004414:	f1b9 0f00 	cmp.w	r9, #0
 8004418:	bf08      	it	eq
 800441a:	4699      	moveq	r9, r3
  int len = strlen(str);
 800441c:	4648      	mov	r0, r9
 800441e:	f7fb ff27 	bl	8000270 <strlen>
  if (specifier->precision) {
 8004422:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004424:	4606      	mov	r6, r0
  if (specifier->precision) {
 8004426:	b113      	cbz	r3, 800442e <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8004428:	4298      	cmp	r0, r3
 800442a:	bfa8      	it	ge
 800442c:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800442e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004430:	f017 0702 	ands.w	r7, r7, #2
 8004434:	d015      	beq.n	8004462 <vlc_print+0x23e>
  int count = 0;
 8004436:	2500      	movs	r5, #0
 8004438:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 800443a:	eba2 0309 	sub.w	r3, r2, r9
 800443e:	429e      	cmp	r6, r3
 8004440:	dc11      	bgt.n	8004466 <vlc_print+0x242>
 8004442:	2e00      	cmp	r6, #0
 8004444:	bfa8      	it	ge
 8004446:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8004448:	b9ef      	cbnz	r7, 8004486 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 800444a:	44ab      	add	fp, r5
            break;
 800444c:	9a04      	ldr	r2, [sp, #16]
 800444e:	e6f1      	b.n	8004234 <vlc_print+0x10>
      _WRITE_C(' ');
 8004450:	2120      	movs	r1, #32
 8004452:	4640      	mov	r0, r8
 8004454:	47d0      	blx	sl
 8004456:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004458:	9a07      	ldr	r2, [sp, #28]
 800445a:	19ab      	adds	r3, r5, r6
 800445c:	429a      	cmp	r2, r3
 800445e:	dcf7      	bgt.n	8004450 <vlc_print+0x22c>
 8004460:	e7ea      	b.n	8004438 <vlc_print+0x214>
  int count = 0;
 8004462:	463d      	mov	r5, r7
 8004464:	e7f8      	b.n	8004458 <vlc_print+0x234>
    _WRITE_C(*str++);
 8004466:	f812 1b01 	ldrb.w	r1, [r2], #1
 800446a:	9200      	str	r2, [sp, #0]
 800446c:	4640      	mov	r0, r8
 800446e:	47d0      	blx	sl
 8004470:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 8004472:	e7e2      	b.n	800443a <vlc_print+0x216>
      _WRITE_C(' ');
 8004474:	2120      	movs	r1, #32
 8004476:	4640      	mov	r0, r8
 8004478:	47d0      	blx	sl
 800447a:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 800447c:	9a07      	ldr	r2, [sp, #28]
 800447e:	1973      	adds	r3, r6, r5
 8004480:	429a      	cmp	r2, r3
 8004482:	dcf7      	bgt.n	8004474 <vlc_print+0x250>
 8004484:	e7e1      	b.n	800444a <vlc_print+0x226>
 8004486:	1b76      	subs	r6, r6, r5
 8004488:	e7f8      	b.n	800447c <vlc_print+0x258>
 800448a:	b103      	cbz	r3, 800448e <vlc_print+0x26a>
 800448c:	9709      	str	r7, [sp, #36]	; 0x24
 800448e:	b100      	cbz	r0, 8004492 <vlc_print+0x26e>
 8004490:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 800449a:	2308      	movs	r3, #8
 800449c:	9307      	str	r3, [sp, #28]
 800449e:	e784      	b.n	80043aa <vlc_print+0x186>
 80044a0:	b103      	cbz	r3, 80044a4 <vlc_print+0x280>
 80044a2:	9709      	str	r7, [sp, #36]	; 0x24
 80044a4:	b100      	cbz	r0, 80044a8 <vlc_print+0x284>
 80044a6:	9208      	str	r2, [sp, #32]
 80044a8:	9b00      	ldr	r3, [sp, #0]
 80044aa:	b103      	cbz	r3, 80044ae <vlc_print+0x28a>
 80044ac:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 80044ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 80044b6:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 80044b8:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 80044ba:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 80044bc:	aa07      	add	r2, sp, #28
 80044be:	f7ff fe1d 	bl	80040fc <_write_number>
            break;
 80044c2:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 80044c4:	4483      	add	fp, r0
            break;
 80044c6:	e7c1      	b.n	800444c <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 80044c8:	3407      	adds	r4, #7
 80044ca:	f024 0407 	bic.w	r4, r4, #7
 80044ce:	4625      	mov	r5, r4
 80044d0:	6861      	ldr	r1, [r4, #4]
 80044d2:	f855 0b08 	ldr.w	r0, [r5], #8
 80044d6:	e7f1      	b.n	80044bc <vlc_print+0x298>
 80044d8:	b103      	cbz	r3, 80044dc <vlc_print+0x2b8>
 80044da:	9709      	str	r7, [sp, #36]	; 0x24
 80044dc:	b100      	cbz	r0, 80044e0 <vlc_print+0x2bc>
 80044de:	9208      	str	r2, [sp, #32]
 80044e0:	9b00      	ldr	r3, [sp, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <vlc_print+0x2c2>
 80044e4:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 80044e6:	3407      	adds	r4, #7
 80044e8:	f024 0407 	bic.w	r4, r4, #7
 80044ec:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 80044f0:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 80044f2:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 80044f6:	b90b      	cbnz	r3, 80044fc <vlc_print+0x2d8>
              specifier.precision = 6;
 80044f8:	2306      	movs	r3, #6
 80044fa:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 80044fc:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 80044fe:	4f70      	ldr	r7, [pc, #448]	; (80046c0 <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 8004500:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8004504:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8004506:	45a9      	cmp	r9, r5
    mul *= 10;
 8004508:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 800450c:	f2c0 80ac 	blt.w	8004668 <vlc_print+0x444>
  if (is_signed)
 8004510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004514:	2300      	movs	r3, #0
 8004516:	f7fc fae1 	bl	8000adc <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	f000 80ae 	beq.w	800467c <vlc_print+0x458>
    number = -number;
 8004520:	9b00      	ldr	r3, [sp, #0]
 8004522:	9302      	str	r3, [sp, #8]
 8004524:	9b01      	ldr	r3, [sp, #4]
 8004526:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800452a:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	4964      	ldr	r1, [pc, #400]	; (80046c4 <vlc_print+0x4a0>)
 8004532:	2000      	movs	r0, #0
 8004534:	f7fc f98a 	bl	800084c <__aeabi_ddiv>
 8004538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800453c:	f7fb fea6 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	f7fc f858 	bl	80005f8 <__aeabi_dmul>
 8004548:	f7fc fb46 	bl	8000bd8 <__aeabi_d2ulz>
  uint32_t count = 0;
 800454c:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 800454e:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8004550:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 8004552:	4691      	mov	r9, r2
 8004554:	2300      	movs	r3, #0
 8004556:	220a      	movs	r2, #10
 8004558:	4648      	mov	r0, r9
 800455a:	9105      	str	r1, [sp, #20]
 800455c:	f7fc fb24 	bl	8000ba8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004560:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8004564:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004568:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 800456a:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 800456e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004572:	446b      	add	r3, sp
 8004574:	f107 3cff 	add.w	ip, r7, #4294967295
 8004578:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 800457c:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 800457e:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 8004580:	bf01      	itttt	eq
 8004582:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8004586:	eb0d 0c03 	addeq.w	ip, sp, r3
 800458a:	232e      	moveq	r3, #46	; 0x2e
 800458c:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8004590:	bf18      	it	ne
 8004592:	461e      	movne	r6, r3
  } while (val);
 8004594:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8004596:	bf06      	itte	eq
 8004598:	3f02      	subeq	r7, #2
      count++;
 800459a:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 800459c:	4667      	movne	r7, ip
  } while (val);
 800459e:	f1b9 0f0a 	cmp.w	r9, #10
 80045a2:	f173 0900 	sbcs.w	r9, r3, #0
 80045a6:	d2d4      	bcs.n	8004552 <vlc_print+0x32e>
    buf[idx--] = '0';
 80045a8:	42ae      	cmp	r6, r5
 80045aa:	f1c5 0001 	rsb	r0, r5, #1
 80045ae:	4430      	add	r0, r6
 80045b0:	f04f 0130 	mov.w	r1, #48	; 0x30
 80045b4:	bf88      	it	hi
 80045b6:	2001      	movhi	r0, #1
 80045b8:	eba5 0906 	sub.w	r9, r5, r6
 80045bc:	eb0d 0301 	add.w	r3, sp, r1
 80045c0:	bf88      	it	hi
 80045c2:	f04f 0900 	movhi.w	r9, #0
 80045c6:	4438      	add	r0, r7
 80045c8:	4418      	add	r0, r3
 80045ca:	464a      	mov	r2, r9
 80045cc:	f005 fb7d 	bl	8009cca <memset>
 80045d0:	1b73      	subs	r3, r6, r5
 80045d2:	42ae      	cmp	r6, r5
 80045d4:	bf88      	it	hi
 80045d6:	2300      	movhi	r3, #0
 80045d8:	444e      	add	r6, r9
  if (count == specifier->precision) {
 80045da:	42b5      	cmp	r5, r6
 80045dc:	441f      	add	r7, r3
 80045de:	f105 0501 	add.w	r5, r5, #1
 80045e2:	d107      	bne.n	80045f4 <vlc_print+0x3d0>
    buf[idx--] = '.';
 80045e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045e8:	446b      	add	r3, sp
 80045ea:	222e      	movs	r2, #46	; 0x2e
 80045ec:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80045f0:	462e      	mov	r6, r5
    buf[idx--] = '.';
 80045f2:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 80045f4:	42b5      	cmp	r5, r6
 80045f6:	d107      	bne.n	8004608 <vlc_print+0x3e4>
    buf[idx--] = '0';
 80045f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045fc:	446b      	add	r3, sp
 80045fe:	2230      	movs	r2, #48	; 0x30
 8004600:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004604:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8004606:	3f01      	subs	r7, #1
  if (is_signed) {
 8004608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800460c:	2200      	movs	r2, #0
 800460e:	2300      	movs	r3, #0
 8004610:	f7fc fa64 	bl	8000adc <__aeabi_dcmplt>
 8004614:	b138      	cbz	r0, 8004626 <vlc_print+0x402>
    buf[idx--] = '-';
 8004616:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800461a:	446b      	add	r3, sp
 800461c:	222d      	movs	r2, #45	; 0x2d
 800461e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004622:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8004624:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8004626:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8004628:	42ae      	cmp	r6, r5
 800462a:	f1c5 0001 	rsb	r0, r5, #1
 800462e:	4430      	add	r0, r6
 8004630:	bf88      	it	hi
 8004632:	2001      	movhi	r0, #1
 8004634:	eba5 0906 	sub.w	r9, r5, r6
 8004638:	ab0c      	add	r3, sp, #48	; 0x30
 800463a:	bf88      	it	hi
 800463c:	f04f 0900 	movhi.w	r9, #0
 8004640:	4438      	add	r0, r7
 8004642:	464a      	mov	r2, r9
 8004644:	4418      	add	r0, r3
 8004646:	2120      	movs	r1, #32
 8004648:	f005 fb3f 	bl	8009cca <memset>
 800464c:	1b73      	subs	r3, r6, r5
 800464e:	42ae      	cmp	r6, r5
 8004650:	bf88      	it	hi
 8004652:	2300      	movhi	r3, #0
 8004654:	443b      	add	r3, r7
 8004656:	aa0c      	add	r2, sp, #48	; 0x30
 8004658:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 800465a:	18d7      	adds	r7, r2, r3
 800465c:	4433      	add	r3, r6
 800465e:	189d      	adds	r5, r3, r2
 8004660:	42bd      	cmp	r5, r7
 8004662:	d110      	bne.n	8004686 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8004664:	44b3      	add	fp, r6
            break;
 8004666:	e6f1      	b.n	800444c <vlc_print+0x228>
    mul *= 10;
 8004668:	4630      	mov	r0, r6
 800466a:	4639      	mov	r1, r7
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <vlc_print+0x4a4>)
 800466e:	f7fb ffc3 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004672:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004676:	4606      	mov	r6, r0
 8004678:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 800467a:	e744      	b.n	8004506 <vlc_print+0x2e2>
 800467c:	ed9d 7b00 	vldr	d7, [sp]
 8004680:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004684:	e752      	b.n	800452c <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004686:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800468a:	4640      	mov	r0, r8
 800468c:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 800468e:	e7e7      	b.n	8004660 <vlc_print+0x43c>
        if (!c)
 8004690:	f04f 0e01 	mov.w	lr, #1
 8004694:	e5ee      	b.n	8004274 <vlc_print+0x50>
 8004696:	b103      	cbz	r3, 800469a <vlc_print+0x476>
 8004698:	9709      	str	r7, [sp, #36]	; 0x24
 800469a:	b100      	cbz	r0, 800469e <vlc_print+0x47a>
 800469c:	9208      	str	r2, [sp, #32]
 800469e:	9b00      	ldr	r3, [sp, #0]
 80046a0:	b103      	cbz	r3, 80046a4 <vlc_print+0x480>
 80046a2:	9607      	str	r6, [sp, #28]
              if (long_type)
 80046a4:	f1bc 0f00 	cmp.w	ip, #0
 80046a8:	f47f af0e 	bne.w	80044c8 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 80046ac:	4625      	mov	r5, r4
 80046ae:	4661      	mov	r1, ip
 80046b0:	f855 0b04 	ldr.w	r0, [r5], #4
 80046b4:	e702      	b.n	80044bc <vlc_print+0x298>
        if (!c)
 80046b6:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 80046ba:	e5db      	b.n	8004274 <vlc_print+0x50>
 80046bc:	0800cb5c 	.word	0x0800cb5c
 80046c0:	3ff00000 	.word	0x3ff00000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	40240000 	.word	0x40240000

080046cc <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	b0a2      	sub	sp, #136	; 0x88
 80046d0:	4606      	mov	r6, r0
 80046d2:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80046d4:	f000 fc26 	bl	8004f24 <ai_platform_context_acquire>
 80046d8:	4604      	mov	r4, r0

  if (report && net_ctx)
 80046da:	2d00      	cmp	r5, #0
 80046dc:	d035      	beq.n	800474a <ai_network_get_report+0x7e>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d030      	beq.n	8004744 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 80046e2:	2278      	movs	r2, #120	; 0x78
 80046e4:	2100      	movs	r1, #0
 80046e6:	a804      	add	r0, sp, #16
 80046e8:	f005 faef 	bl	8009cca <memset>
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <ai_network_get_report+0x84>)
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <ai_network_get_report+0x88>)
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <ai_network_get_report+0x8c>)
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <ai_network_get_report+0x90>)
 80046fa:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80046fc:	f000 faf6 	bl	8004cec <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004700:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004702:	f000 fb2b 	bl	8004d5c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004706:	4b16      	ldr	r3, [pc, #88]	; (8004760 <ai_network_get_report+0x94>)
 8004708:	9306      	str	r3, [sp, #24]
 800470a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800470e:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004712:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004714:	f000 fb6e 	bl	8004df4 <ai_platform_api_get_version>
 8004718:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800471a:	f000 fbb7 	bl	8004e8c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800471e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004728:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <ai_network_get_report+0x98>)
 800472c:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800472e:	4669      	mov	r1, sp
 8004730:	4630      	mov	r0, r6
 8004732:	f000 fe51 	bl	80053d8 <ai_platform_api_get_network_report>
 8004736:	4604      	mov	r4, r0
 8004738:	b120      	cbz	r0, 8004744 <ai_network_get_report+0x78>

    *report = r;
 800473a:	2288      	movs	r2, #136	; 0x88
 800473c:	4669      	mov	r1, sp
 800473e:	4628      	mov	r0, r5
 8004740:	f005 fb65 	bl	8009e0e <memcpy>
    return true;
  }
  return false;
}
 8004744:	4620      	mov	r0, r4
 8004746:	b022      	add	sp, #136	; 0x88
 8004748:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800474a:	462c      	mov	r4, r5
 800474c:	e7fa      	b.n	8004744 <ai_network_get_report+0x78>
 800474e:	bf00      	nop
 8004750:	0800cb28 	.word	0x0800cb28
 8004754:	0800cb63 	.word	0x0800cb63
 8004758:	0800cb84 	.word	0x0800cb84
 800475c:	0800cb9d 	.word	0x0800cb9d
 8004760:	0800cabf 	.word	0x0800cabf
 8004764:	a1facade 	.word	0xa1facade

08004768 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004768:	f000 bc1c 	b.w	8004fa4 <ai_platform_network_get_error>

0800476c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800476c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800476e:	2305      	movs	r3, #5
 8004770:	2200      	movs	r2, #0
 8004772:	e9cd 3200 	strd	r3, r2, [sp]
 8004776:	4a03      	ldr	r2, [pc, #12]	; (8004784 <ai_network_create+0x18>)
 8004778:	2301      	movs	r3, #1
 800477a:	f001 f8eb 	bl	8005954 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800477e:	b003      	add	sp, #12
 8004780:	f85d fb04 	ldr.w	pc, [sp], #4
 8004784:	20000974 	.word	0x20000974

08004788 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8004788:	b910      	cbnz	r0, 8004790 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800478a:	4802      	ldr	r0, [pc, #8]	; (8004794 <ai_network_inputs_get+0xc>)
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <ai_network_inputs_get+0x10>)
 800478e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004790:	f000 bc7c 	b.w	800508c <ai_platform_inputs_get>
 8004794:	20000974 	.word	0x20000974
 8004798:	a1c00100 	.word	0xa1c00100

0800479c <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800479c:	b910      	cbnz	r0, 80047a4 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800479e:	4802      	ldr	r0, [pc, #8]	; (80047a8 <ai_network_outputs_get+0xc>)
 80047a0:	4b02      	ldr	r3, [pc, #8]	; (80047ac <ai_network_outputs_get+0x10>)
 80047a2:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80047a4:	f000 bd48 	b.w	8005238 <ai_platform_outputs_get>
 80047a8:	20000974 	.word	0x20000974
 80047ac:	a1c00100 	.word	0xa1c00100

080047b0 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80047b0:	f001 b9a6 	b.w	8005b00 <ai_platform_network_destroy>

080047b4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	4607      	mov	r7, r0
 80047ba:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80047bc:	f001 fa0c 	bl	8005bd8 <ai_platform_network_init>
  if (!net_ctx) return false;
 80047c0:	4604      	mov	r4, r0
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d05c      	beq.n	8004880 <ai_network_init+0xcc>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80047c6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80048bc <ai_network_init+0x108>
 80047ca:	4632      	mov	r2, r6
 80047cc:	2101      	movs	r1, #1
 80047ce:	4640      	mov	r0, r8
 80047d0:	f000 f9c2 	bl	8004b58 <ai_platform_get_weights_map>
 80047d4:	4605      	mov	r5, r0
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d054      	beq.n	8004884 <ai_network_init+0xd0>
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 80047da:	4a30      	ldr	r2, [pc, #192]	; (800489c <ai_network_init+0xe8>)
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e2:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80047e4:	f8d8 3000 	ldr.w	r3, [r8]
    lstm_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80047e8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80047ec:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <ai_network_init+0xec>)
 80047ee:	6811      	ldr	r1, [r2, #0]
 80047f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80047f4:	6011      	str	r1, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 1600);
 80047f6:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
    lstm_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 1600);
 80047fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 80047fe:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <ai_network_init+0xf0>)
 8004800:	6811      	ldr	r1, [r2, #0]
 8004802:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004806:	6011      	str	r1, [r2, #0]
    lstm_peephole_array.data = AI_PTR(g_network_weights_map[0] + 41600);
 8004808:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 800480c:	3180      	adds	r1, #128	; 0x80
    lstm_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 41600);
 800480e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 8004812:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <ai_network_init+0xf4>)
 8004814:	6811      	ldr	r1, [r2, #0]
 8004816:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800481a:	6011      	str	r1, [r2, #0]
    lstm_bias_array.data = AI_PTR(g_network_weights_map[0] + 42200);
 800481c:	f503 4124 	add.w	r1, r3, #41984	; 0xa400
 8004820:	31d8      	adds	r1, #216	; 0xd8
    lstm_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 42200);
 8004822:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <ai_network_init+0xf8>)
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800482e:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 43000);
 8004830:	f503 4127 	add.w	r1, r3, #42752	; 0xa700
 8004834:	31f8      	adds	r1, #248	; 0xf8
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 43000);
 8004836:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800483a:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <ai_network_init+0xfc>)
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 43400);
 800483c:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004840:	6811      	ldr	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 43400);
 8004842:	3388      	adds	r3, #136	; 0x88
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 43400);
 8004844:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004848:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800484c:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800484e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80048c0 <ai_network_init+0x10c>
 8004852:	4632      	mov	r2, r6
 8004854:	2101      	movs	r1, #1
 8004856:	4640      	mov	r0, r8
 8004858:	f000 f9d2 	bl	8004c00 <ai_platform_get_activations_map>
 800485c:	4606      	mov	r6, r0
 800485e:	b1b8      	cbz	r0, 8004890 <ai_network_init+0xdc>
    lstm_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004860:	f8d8 3000 	ldr.w	r3, [r8]
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <ai_network_init+0x100>)
    lstm_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004866:	e9c2 3302 	strd	r3, r3, [r2, #8]
    lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 1400);
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <ai_network_init+0x104>)
 800486c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
    lstm_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1400);
 8004870:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004874:	4638      	mov	r0, r7
 8004876:	f001 fa9d 	bl	8005db4 <ai_platform_network_post_init>
 800487a:	4030      	ands	r0, r6
 800487c:	4005      	ands	r5, r0
 800487e:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004884:	2212      	movs	r2, #18
 8004886:	2130      	movs	r1, #48	; 0x30
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fbf9 	bl	8005080 <ai_platform_network_set_error>
  return false;
 800488e:	e7de      	b.n	800484e <ai_network_init+0x9a>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004890:	2213      	movs	r2, #19
 8004892:	2130      	movs	r1, #48	; 0x30
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fbf3 	bl	8005080 <ai_platform_network_set_error>
  return false;
 800489a:	e7eb      	b.n	8004874 <ai_network_init+0xc0>
 800489c:	20000a34 	.word	0x20000a34
 80048a0:	20000afc 	.word	0x20000afc
 80048a4:	20000ad0 	.word	0x20000ad0
 80048a8:	20000a08 	.word	0x20000a08
 80048ac:	20000964 	.word	0x20000964
 80048b0:	200008f0 	.word	0x200008f0
 80048b4:	20000b28 	.word	0x20000b28
 80048b8:	20000aa4 	.word	0x20000aa4
 80048bc:	20001648 	.word	0x20001648
 80048c0:	20001644 	.word	0x20001644

080048c4 <ai_network_create_and_init>:
{
 80048c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048c8:	4688      	mov	r8, r1
 80048ca:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80048cc:	2100      	movs	r1, #0
{
 80048ce:	4606      	mov	r6, r0
 80048d0:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80048d2:	f7ff ff4b 	bl	800476c <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 80048d6:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80048da:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80048dc:	d107      	bne.n	80048ee <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 80048de:	4668      	mov	r0, sp
 80048e0:	f000 f83c 	bl	800495c <ai_network_data_params_get>
 80048e4:	b938      	cbnz	r0, 80048f6 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80048e6:	6830      	ldr	r0, [r6, #0]
 80048e8:	f000 fb5c 	bl	8004fa4 <ai_platform_network_get_error>
 80048ec:	4604      	mov	r4, r0
}
 80048ee:	4620      	mov	r0, r4
 80048f0:	b00f      	add	sp, #60	; 0x3c
 80048f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80048f6:	f1b8 0f00 	cmp.w	r8, #0
 80048fa:	d11a      	bne.n	8004932 <ai_network_create_and_init+0x6e>
    if (weights) {
 80048fc:	bb3f      	cbnz	r7, 800494e <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 80048fe:	6830      	ldr	r0, [r6, #0]
 8004900:	4669      	mov	r1, sp
 8004902:	f7ff ff57 	bl	80047b4 <ai_network_init>
 8004906:	b928      	cbnz	r0, 8004914 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8004908:	6830      	ldr	r0, [r6, #0]
 800490a:	f000 fb4b 	bl	8004fa4 <ai_platform_network_get_error>
 800490e:	fa5f f980 	uxtb.w	r9, r0
 8004912:	4604      	mov	r4, r0
    return err;
 8004914:	f369 0407 	bfi	r4, r9, #0, #8
 8004918:	e7e9      	b.n	80048ee <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800491a:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800491e:	4629      	mov	r1, r5
 8004920:	a803      	add	r0, sp, #12
 8004922:	f000 f879 	bl	8004a18 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004926:	3501      	adds	r5, #1
 8004928:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800492c:	42ab      	cmp	r3, r5
 800492e:	dcf4      	bgt.n	800491a <ai_network_create_and_init+0x56>
 8004930:	e7e4      	b.n	80048fc <ai_network_create_and_init+0x38>
 8004932:	464d      	mov	r5, r9
 8004934:	e7f8      	b.n	8004928 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004936:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800493a:	4629      	mov	r1, r5
 800493c:	a801      	add	r0, sp, #4
 800493e:	f000 f86b 	bl	8004a18 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004942:	3501      	adds	r5, #1
 8004944:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004948:	42ab      	cmp	r3, r5
 800494a:	dcf4      	bgt.n	8004936 <ai_network_create_and_init+0x72>
 800494c:	e7d7      	b.n	80048fe <ai_network_create_and_init+0x3a>
 800494e:	2500      	movs	r5, #0
 8004950:	e7f8      	b.n	8004944 <ai_network_create_and_init+0x80>

08004952 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004952:	f001 bab7 	b.w	8005ec4 <ai_platform_network_process>

08004956 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8004956:	2200      	movs	r2, #0
 8004958:	f001 bab4 	b.w	8005ec4 <ai_platform_network_process>

0800495c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800495c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800495e:	4603      	mov	r3, r0
{
 8004960:	b085      	sub	sp, #20
  if (!params) return false;
 8004962:	b170      	cbz	r0, 8004982 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004964:	4c08      	ldr	r4, [pc, #32]	; (8004988 <ai_network_data_params_get+0x2c>)
 8004966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800496a:	466a      	mov	r2, sp
 800496c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004970:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004974:	ad02      	add	r5, sp, #8
 8004976:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800497a:	4629      	mov	r1, r5
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f993 	bl	8004ca8 <ai_platform_bind_network_params>
}
 8004982:	b005      	add	sp, #20
 8004984:	bd30      	pop	{r4, r5, pc}
 8004986:	bf00      	nop
 8004988:	0800ca6c 	.word	0x0800ca6c

0800498c <ai_buffer_get_size>:
 800498c:	b378      	cbz	r0, 80049ee <ai_buffer_get_size+0x62>
 800498e:	b410      	push	{r4}
 8004990:	6803      	ldr	r3, [r0, #0]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <ai_buffer_get_size+0x64>)
 8004994:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004998:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800499c:	4293      	cmp	r3, r2
 800499e:	d01e      	beq.n	80049de <ai_buffer_get_size+0x52>
 80049a0:	6984      	ldr	r4, [r0, #24]
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	7d03      	ldrb	r3, [r0, #20]
 80049a6:	6941      	ldr	r1, [r0, #20]
 80049a8:	f1a3 0301 	sub.w	r3, r3, #1
 80049ac:	fab3 f383 	clz	r3, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80049b6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80049ba:	da0b      	bge.n	80049d4 <ai_buffer_get_size+0x48>
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d102      	bne.n	80049c6 <ai_buffer_get_size+0x3a>
 80049c0:	2802      	cmp	r0, #2
 80049c2:	d007      	beq.n	80049d4 <ai_buffer_get_size+0x48>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4298      	cmp	r0, r3
 80049ce:	fb01 f202 	mul.w	r2, r1, r2
 80049d2:	d1f3      	bne.n	80049bc <ai_buffer_get_size+0x30>
 80049d4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80049d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	2900      	cmp	r1, #0
 80049e0:	d0de      	beq.n	80049a0 <ai_buffer_get_size+0x14>
 80049e2:	6984      	ldr	r4, [r0, #24]
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	331f      	adds	r3, #31
 80049e8:	f023 021f 	bic.w	r2, r3, #31
 80049ec:	e7da      	b.n	80049a4 <ai_buffer_get_size+0x18>
 80049ee:	4770      	bx	lr
 80049f0:	000400c0 	.word	0x000400c0

080049f4 <ai_buffer_get_byte_size>:
 80049f4:	b128      	cbz	r0, 8004a02 <ai_buffer_get_byte_size+0xe>
 80049f6:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80049fa:	fb01 f000 	mul.w	r0, r1, r0
 80049fe:	3007      	adds	r0, #7
 8004a00:	08c0      	lsrs	r0, r0, #3
 8004a02:	4770      	bx	lr

08004a04 <ai_buffer_array_sane>:
 8004a04:	b138      	cbz	r0, 8004a16 <ai_buffer_array_sane+0x12>
 8004a06:	6843      	ldr	r3, [r0, #4]
 8004a08:	b123      	cbz	r3, 8004a14 <ai_buffer_array_sane+0x10>
 8004a0a:	8840      	ldrh	r0, [r0, #2]
 8004a0c:	3800      	subs	r0, #0
 8004a0e:	bf18      	it	ne
 8004a10:	2001      	movne	r0, #1
 8004a12:	4770      	bx	lr
 8004a14:	4618      	mov	r0, r3
 8004a16:	4770      	bx	lr

08004a18 <ai_buffer_array_item_set_address>:
 8004a18:	b150      	cbz	r0, 8004a30 <ai_buffer_array_item_set_address+0x18>
 8004a1a:	6843      	ldr	r3, [r0, #4]
 8004a1c:	b14b      	cbz	r3, 8004a32 <ai_buffer_array_item_set_address+0x1a>
 8004a1e:	8840      	ldrh	r0, [r0, #2]
 8004a20:	b900      	cbnz	r0, 8004a24 <ai_buffer_array_item_set_address+0xc>
 8004a22:	4770      	bx	lr
 8004a24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004a28:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	604a      	str	r2, [r1, #4]
 8004a30:	4770      	bx	lr
 8004a32:	4618      	mov	r0, r3
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop

08004a38 <_platform_observer_node_exec_cb>:
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	d07d      	beq.n	8004b38 <_platform_observer_node_exec_cb+0x100>
 8004a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a40:	6815      	ldr	r5, [r2, #0]
 8004a42:	b085      	sub	sp, #20
 8004a44:	4614      	mov	r4, r2
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	d078      	beq.n	8004b3c <_platform_observer_node_exec_cb+0x104>
 8004a4a:	8992      	ldrh	r2, [r2, #12]
 8004a4c:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	460b      	mov	r3, r1
 8004a54:	f240 3102 	movw	r1, #770	; 0x302
 8004a58:	f240 2e02 	movw	lr, #514	; 0x202
 8004a5c:	bf08      	it	eq
 8004a5e:	460e      	moveq	r6, r1
 8004a60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a64:	f240 2101 	movw	r1, #513	; 0x201
 8004a68:	bf1c      	itt	ne
 8004a6a:	4676      	movne	r6, lr
 8004a6c:	f44f 7901 	movne.w	r9, #516	; 0x204
 8004a70:	f240 3e01 	movw	lr, #769	; 0x301
 8004a74:	bf0e      	itee	eq
 8004a76:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8004a7a:	468e      	movne	lr, r1
 8004a7c:	f04f 0804 	movne.w	r8, #4
 8004a80:	f240 1101 	movw	r1, #257	; 0x101
 8004a84:	bf0d      	iteet	eq
 8004a86:	f44f 7882 	moveq.w	r8, #260	; 0x104
 8004a8a:	2101      	movne	r1, #1
 8004a8c:	2702      	movne	r7, #2
 8004a8e:	f44f 7781 	moveq.w	r7, #258	; 0x102
 8004a92:	4594      	cmp	ip, r2
 8004a94:	d034      	beq.n	8004b00 <_platform_observer_node_exec_cb+0xc8>
 8004a96:	b300      	cbz	r0, 8004ada <_platform_observer_node_exec_cb+0xa2>
 8004a98:	2801      	cmp	r0, #1
 8004a9a:	d053      	beq.n	8004b44 <_platform_observer_node_exec_cb+0x10c>
 8004a9c:	2802      	cmp	r0, #2
 8004a9e:	d035      	beq.n	8004b0c <_platform_observer_node_exec_cb+0xd4>
 8004aa0:	2803      	cmp	r0, #3
 8004aa2:	d116      	bne.n	8004ad2 <_platform_observer_node_exec_cb+0x9a>
 8004aa4:	68a3      	ldr	r3, [r4, #8]
 8004aa6:	075b      	lsls	r3, r3, #29
 8004aa8:	d511      	bpl.n	8004ace <_platform_observer_node_exec_cb+0x96>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	f8ad 2000 	strh.w	r2, [sp]
 8004ab0:	885a      	ldrh	r2, [r3, #2]
 8004ab2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	6860      	ldr	r0, [r4, #4]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	466a      	mov	r2, sp
 8004aca:	47a8      	blx	r5
 8004acc:	89a2      	ldrh	r2, [r4, #12]
 8004ace:	3201      	adds	r2, #1
 8004ad0:	81a2      	strh	r2, [r4, #12]
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	b005      	add	sp, #20
 8004ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ada:	68a6      	ldr	r6, [r4, #8]
 8004adc:	07f6      	lsls	r6, r6, #31
 8004ade:	d5f6      	bpl.n	8004ace <_platform_observer_node_exec_cb+0x96>
 8004ae0:	9002      	str	r0, [sp, #8]
 8004ae2:	8858      	ldrh	r0, [r3, #2]
 8004ae4:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004ae8:	8818      	ldrh	r0, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f8ad 2000 	strh.w	r2, [sp]
 8004af0:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004af4:	466a      	mov	r2, sp
 8004af6:	6860      	ldr	r0, [r4, #4]
 8004af8:	9303      	str	r3, [sp, #12]
 8004afa:	47a8      	blx	r5
 8004afc:	89a2      	ldrh	r2, [r4, #12]
 8004afe:	e7e6      	b.n	8004ace <_platform_observer_node_exec_cb+0x96>
 8004b00:	46c8      	mov	r8, r9
 8004b02:	4637      	mov	r7, r6
 8004b04:	4671      	mov	r1, lr
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d1c6      	bne.n	8004a98 <_platform_observer_node_exec_cb+0x60>
 8004b0a:	e7e6      	b.n	8004ada <_platform_observer_node_exec_cb+0xa2>
 8004b0c:	68a1      	ldr	r1, [r4, #8]
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	0789      	lsls	r1, r1, #30
 8004b12:	d5de      	bpl.n	8004ad2 <_platform_observer_node_exec_cb+0x9a>
 8004b14:	f8ad 2000 	strh.w	r2, [sp]
 8004b18:	885a      	ldrh	r2, [r3, #2]
 8004b1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	6860      	ldr	r0, [r4, #4]
 8004b24:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004b28:	2400      	movs	r4, #0
 8004b2a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004b2e:	4639      	mov	r1, r7
 8004b30:	466a      	mov	r2, sp
 8004b32:	47a8      	blx	r5
 8004b34:	4620      	mov	r0, r4
 8004b36:	e7cd      	b.n	8004ad4 <_platform_observer_node_exec_cb+0x9c>
 8004b38:	2001      	movs	r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	b005      	add	sp, #20
 8004b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b44:	2000      	movs	r0, #0
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	81a0      	strh	r0, [r4, #12]
 8004b4a:	b005      	add	sp, #20
 8004b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004b50 <_ai_platform_acquire_crc>:
 8004b50:	2001      	movs	r0, #1
 8004b52:	4770      	bx	lr

08004b54 <_ai_platform_release_crc>:
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <ai_platform_get_weights_map>:
 8004b58:	2a00      	cmp	r2, #0
 8004b5a:	d037      	beq.n	8004bcc <ai_platform_get_weights_map+0x74>
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	4604      	mov	r4, r0
 8004b60:	b1a0      	cbz	r0, 8004b8c <ai_platform_get_weights_map+0x34>
 8004b62:	460f      	mov	r7, r1
 8004b64:	b191      	cbz	r1, 8004b8c <ai_platform_get_weights_map+0x34>
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <ai_platform_get_weights_map+0xa4>)
 8004b68:	6810      	ldr	r0, [r2, #0]
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	d00f      	beq.n	8004b90 <ai_platform_get_weights_map+0x38>
 8004b70:	6855      	ldr	r5, [r2, #4]
 8004b72:	b15d      	cbz	r5, 8004b8c <ai_platform_get_weights_map+0x34>
 8004b74:	682e      	ldr	r6, [r5, #0]
 8004b76:	429e      	cmp	r6, r3
 8004b78:	d02a      	beq.n	8004bd0 <ai_platform_get_weights_map+0x78>
 8004b7a:	f1a1 0001 	sub.w	r0, r1, #1
 8004b7e:	6025      	str	r5, [r4, #0]
 8004b80:	fab0 f080 	clz	r0, r0
 8004b84:	0940      	lsrs	r0, r0, #5
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	42a7      	cmp	r7, r4
 8004b8a:	d034      	beq.n	8004bf6 <ai_platform_get_weights_map+0x9e>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b90:	1d10      	adds	r0, r2, #4
 8004b92:	f7ff ff37 	bl	8004a04 <ai_buffer_array_sane>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d0f8      	beq.n	8004b8c <ai_platform_get_weights_map+0x34>
 8004b9a:	88eb      	ldrh	r3, [r5, #6]
 8004b9c:	429f      	cmp	r7, r3
 8004b9e:	d1f5      	bne.n	8004b8c <ai_platform_get_weights_map+0x34>
 8004ba0:	f04f 0e00 	mov.w	lr, #0
 8004ba4:	1f23      	subs	r3, r4, #4
 8004ba6:	4670      	mov	r0, lr
 8004ba8:	68aa      	ldr	r2, [r5, #8]
 8004baa:	eb02 0c0e 	add.w	ip, r2, lr
 8004bae:	f10e 0e1c 	add.w	lr, lr, #28
 8004bb2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004bb6:	b124      	cbz	r4, 8004bc2 <ai_platform_get_weights_map+0x6a>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	4287      	cmp	r7, r0
 8004bbc:	f843 4f04 	str.w	r4, [r3, #4]!
 8004bc0:	d1f2      	bne.n	8004ba8 <ai_platform_get_weights_map+0x50>
 8004bc2:	1a38      	subs	r0, r7, r0
 8004bc4:	fab0 f080 	clz	r0, r0
 8004bc8:	0940      	lsrs	r0, r0, #5
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4770      	bx	lr
 8004bd0:	1f23      	subs	r3, r4, #4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	2400      	movs	r4, #0
 8004bd6:	e000      	b.n	8004bda <ai_platform_get_weights_map+0x82>
 8004bd8:	4614      	mov	r4, r2
 8004bda:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004bde:	42b2      	cmp	r2, r6
 8004be0:	d0d2      	beq.n	8004b88 <ai_platform_get_weights_map+0x30>
 8004be2:	f843 2f04 	str.w	r2, [r3, #4]!
 8004be6:	1c62      	adds	r2, r4, #1
 8004be8:	4297      	cmp	r7, r2
 8004bea:	d1f5      	bne.n	8004bd8 <ai_platform_get_weights_map+0x80>
 8004bec:	3402      	adds	r4, #2
 8004bee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004bf2:	42b3      	cmp	r3, r6
 8004bf4:	d1ca      	bne.n	8004b8c <ai_platform_get_weights_map+0x34>
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	a1facade 	.word	0xa1facade

08004c00 <ai_platform_get_activations_map>:
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	d038      	beq.n	8004c76 <ai_platform_get_activations_map+0x76>
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	4604      	mov	r4, r0
 8004c08:	b1a0      	cbz	r0, 8004c34 <ai_platform_get_activations_map+0x34>
 8004c0a:	460f      	mov	r7, r1
 8004c0c:	b191      	cbz	r1, 8004c34 <ai_platform_get_activations_map+0x34>
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <ai_platform_get_activations_map+0xa4>)
 8004c10:	6810      	ldr	r0, [r2, #0]
 8004c12:	4298      	cmp	r0, r3
 8004c14:	4615      	mov	r5, r2
 8004c16:	d00f      	beq.n	8004c38 <ai_platform_get_activations_map+0x38>
 8004c18:	6a15      	ldr	r5, [r2, #32]
 8004c1a:	b15d      	cbz	r5, 8004c34 <ai_platform_get_activations_map+0x34>
 8004c1c:	682e      	ldr	r6, [r5, #0]
 8004c1e:	429e      	cmp	r6, r3
 8004c20:	d02b      	beq.n	8004c7a <ai_platform_get_activations_map+0x7a>
 8004c22:	f1a1 0001 	sub.w	r0, r1, #1
 8004c26:	6025      	str	r5, [r4, #0]
 8004c28:	fab0 f080 	clz	r0, r0
 8004c2c:	0940      	lsrs	r0, r0, #5
 8004c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c30:	42a7      	cmp	r7, r4
 8004c32:	d035      	beq.n	8004ca0 <ai_platform_get_activations_map+0xa0>
 8004c34:	2000      	movs	r0, #0
 8004c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c38:	f102 000c 	add.w	r0, r2, #12
 8004c3c:	f7ff fee2 	bl	8004a04 <ai_buffer_array_sane>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d0f7      	beq.n	8004c34 <ai_platform_get_activations_map+0x34>
 8004c44:	89eb      	ldrh	r3, [r5, #14]
 8004c46:	429f      	cmp	r7, r3
 8004c48:	d1f4      	bne.n	8004c34 <ai_platform_get_activations_map+0x34>
 8004c4a:	f04f 0e00 	mov.w	lr, #0
 8004c4e:	1f23      	subs	r3, r4, #4
 8004c50:	4670      	mov	r0, lr
 8004c52:	692a      	ldr	r2, [r5, #16]
 8004c54:	eb02 0c0e 	add.w	ip, r2, lr
 8004c58:	f10e 0e1c 	add.w	lr, lr, #28
 8004c5c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004c60:	b124      	cbz	r4, 8004c6c <ai_platform_get_activations_map+0x6c>
 8004c62:	3001      	adds	r0, #1
 8004c64:	4287      	cmp	r7, r0
 8004c66:	f843 4f04 	str.w	r4, [r3, #4]!
 8004c6a:	d1f2      	bne.n	8004c52 <ai_platform_get_activations_map+0x52>
 8004c6c:	1a38      	subs	r0, r7, r0
 8004c6e:	fab0 f080 	clz	r0, r0
 8004c72:	0940      	lsrs	r0, r0, #5
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c76:	2000      	movs	r0, #0
 8004c78:	4770      	bx	lr
 8004c7a:	1f23      	subs	r3, r4, #4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	2400      	movs	r4, #0
 8004c80:	e000      	b.n	8004c84 <ai_platform_get_activations_map+0x84>
 8004c82:	4614      	mov	r4, r2
 8004c84:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004c88:	42b2      	cmp	r2, r6
 8004c8a:	d0d1      	beq.n	8004c30 <ai_platform_get_activations_map+0x30>
 8004c8c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c90:	1c62      	adds	r2, r4, #1
 8004c92:	4297      	cmp	r7, r2
 8004c94:	d1f5      	bne.n	8004c82 <ai_platform_get_activations_map+0x82>
 8004c96:	3402      	adds	r4, #2
 8004c98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004c9c:	42b3      	cmp	r3, r6
 8004c9e:	d1c9      	bne.n	8004c34 <ai_platform_get_activations_map+0x34>
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca4:	a1facade 	.word	0xa1facade

08004ca8 <ai_platform_bind_network_params>:
 8004ca8:	b1a0      	cbz	r0, 8004cd4 <ai_platform_bind_network_params+0x2c>
 8004caa:	b1b1      	cbz	r1, 8004cda <ai_platform_bind_network_params+0x32>
 8004cac:	b1c2      	cbz	r2, 8004ce0 <ai_platform_bind_network_params+0x38>
 8004cae:	b410      	push	{r4}
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <ai_platform_bind_network_params+0x40>)
 8004cb4:	f843 4b04 	str.w	r4, [r3], #4
 8004cb8:	f100 0c0c 	add.w	ip, r0, #12
 8004cbc:	c903      	ldmia	r1, {r0, r1}
 8004cbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8004cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4770      	bx	lr
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	4770      	bx	lr
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	a1facade 	.word	0xa1facade

08004cec <ai_platform_runtime_get_revision>:
 8004cec:	b508      	push	{r3, lr}
 8004cee:	f7ff ff2f 	bl	8004b50 <_ai_platform_acquire_crc>
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <ai_platform_runtime_get_revision+0x58>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfe:	d010      	beq.n	8004d22 <ai_platform_runtime_get_revision+0x36>
 8004d00:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <ai_platform_runtime_get_revision+0x5c>)
 8004d02:	2301      	movs	r3, #1
 8004d04:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d08:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1fb      	bne.n	8004d08 <ai_platform_runtime_get_revision+0x1c>
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <ai_platform_runtime_get_revision+0x60>)
 8004d12:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d16:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <ai_platform_runtime_get_revision+0x64>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d00c      	beq.n	8004d3a <ai_platform_runtime_get_revision+0x4e>
 8004d20:	e7fe      	b.n	8004d20 <ai_platform_runtime_get_revision+0x34>
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <ai_platform_runtime_get_revision+0x68>)
 8004d24:	2301      	movs	r3, #1
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	6893      	ldr	r3, [r2, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1fc      	bne.n	8004d28 <ai_platform_runtime_get_revision+0x3c>
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <ai_platform_runtime_get_revision+0x60>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <ai_platform_runtime_get_revision+0x64>)
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d103      	bne.n	8004d42 <ai_platform_runtime_get_revision+0x56>
 8004d3a:	f7ff ff0b 	bl	8004b54 <_ai_platform_release_crc>
 8004d3e:	4806      	ldr	r0, [pc, #24]	; (8004d58 <ai_platform_runtime_get_revision+0x6c>)
 8004d40:	bd08      	pop	{r3, pc}
 8004d42:	e7fe      	b.n	8004d42 <ai_platform_runtime_get_revision+0x56>
 8004d44:	e0042000 	.word	0xe0042000
 8004d48:	58024000 	.word	0x58024000
 8004d4c:	f407a5c2 	.word	0xf407a5c2
 8004d50:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d54:	40023000 	.word	0x40023000
 8004d58:	080175bc 	.word	0x080175bc

08004d5c <ai_platform_runtime_get_version>:
 8004d5c:	b500      	push	{lr}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	f7ff fef6 	bl	8004b50 <_ai_platform_acquire_crc>
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <ai_platform_runtime_get_version+0x80>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d70:	d010      	beq.n	8004d94 <ai_platform_runtime_get_version+0x38>
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <ai_platform_runtime_get_version+0x84>)
 8004d74:	2301      	movs	r3, #1
 8004d76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1fb      	bne.n	8004d7a <ai_platform_runtime_get_version+0x1e>
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <ai_platform_runtime_get_version+0x88>)
 8004d84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <ai_platform_runtime_get_version+0x8c>)
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d00c      	beq.n	8004dac <ai_platform_runtime_get_version+0x50>
 8004d92:	e7fe      	b.n	8004d92 <ai_platform_runtime_get_version+0x36>
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <ai_platform_runtime_get_version+0x90>)
 8004d96:	2301      	movs	r3, #1
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	6893      	ldr	r3, [r2, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1fc      	bne.n	8004d9a <ai_platform_runtime_get_version+0x3e>
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <ai_platform_runtime_get_version+0x88>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <ai_platform_runtime_get_version+0x8c>)
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d115      	bne.n	8004dd8 <ai_platform_runtime_get_version+0x7c>
 8004dac:	f7ff fed2 	bl	8004b54 <_ai_platform_release_crc>
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <ai_platform_runtime_get_version+0x94>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2000      	movs	r0, #0
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	f362 0007 	bfi	r0, r2, #0, #8
 8004dbc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004dc0:	f362 200f 	bfi	r0, r2, #8, #8
 8004dc4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004dc8:	f362 4017 	bfi	r0, r2, #16, #8
 8004dcc:	0e1b      	lsrs	r3, r3, #24
 8004dce:	f363 601f 	bfi	r0, r3, #24, #8
 8004dd2:	b003      	add	sp, #12
 8004dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd8:	e7fe      	b.n	8004dd8 <ai_platform_runtime_get_version+0x7c>
 8004dda:	bf00      	nop
 8004ddc:	e0042000 	.word	0xe0042000
 8004de0:	58024000 	.word	0x58024000
 8004de4:	f407a5c2 	.word	0xf407a5c2
 8004de8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004dec:	40023000 	.word	0x40023000
 8004df0:	08017570 	.word	0x08017570

08004df4 <ai_platform_api_get_version>:
 8004df4:	b500      	push	{lr}
 8004df6:	b083      	sub	sp, #12
 8004df8:	f7ff feaa 	bl	8004b50 <_ai_platform_acquire_crc>
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <ai_platform_api_get_version+0x80>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d010      	beq.n	8004e2c <ai_platform_api_get_version+0x38>
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <ai_platform_api_get_version+0x84>)
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1fb      	bne.n	8004e12 <ai_platform_api_get_version+0x1e>
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <ai_platform_api_get_version+0x88>)
 8004e1c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <ai_platform_api_get_version+0x8c>)
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d00c      	beq.n	8004e44 <ai_platform_api_get_version+0x50>
 8004e2a:	e7fe      	b.n	8004e2a <ai_platform_api_get_version+0x36>
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <ai_platform_api_get_version+0x90>)
 8004e2e:	2301      	movs	r3, #1
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	6893      	ldr	r3, [r2, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1fc      	bne.n	8004e32 <ai_platform_api_get_version+0x3e>
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <ai_platform_api_get_version+0x88>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <ai_platform_api_get_version+0x8c>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d115      	bne.n	8004e70 <ai_platform_api_get_version+0x7c>
 8004e44:	f7ff fe86 	bl	8004b54 <_ai_platform_release_crc>
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <ai_platform_api_get_version+0x94>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	f362 0007 	bfi	r0, r2, #0, #8
 8004e54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e58:	f362 200f 	bfi	r0, r2, #8, #8
 8004e5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004e60:	f362 4017 	bfi	r0, r2, #16, #8
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	f363 601f 	bfi	r0, r3, #24, #8
 8004e6a:	b003      	add	sp, #12
 8004e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e70:	e7fe      	b.n	8004e70 <ai_platform_api_get_version+0x7c>
 8004e72:	bf00      	nop
 8004e74:	e0042000 	.word	0xe0042000
 8004e78:	58024000 	.word	0x58024000
 8004e7c:	f407a5c2 	.word	0xf407a5c2
 8004e80:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e84:	40023000 	.word	0x40023000
 8004e88:	08017574 	.word	0x08017574

08004e8c <ai_platform_interface_api_get_version>:
 8004e8c:	b500      	push	{lr}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	f7ff fe5e 	bl	8004b50 <_ai_platform_acquire_crc>
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <ai_platform_interface_api_get_version+0x80>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d010      	beq.n	8004ec4 <ai_platform_interface_api_get_version+0x38>
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <ai_platform_interface_api_get_version+0x84>)
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004eaa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1fb      	bne.n	8004eaa <ai_platform_interface_api_get_version+0x1e>
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <ai_platform_interface_api_get_version+0x88>)
 8004eb4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004eb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <ai_platform_interface_api_get_version+0x8c>)
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d00c      	beq.n	8004edc <ai_platform_interface_api_get_version+0x50>
 8004ec2:	e7fe      	b.n	8004ec2 <ai_platform_interface_api_get_version+0x36>
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <ai_platform_interface_api_get_version+0x90>)
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	6893      	ldr	r3, [r2, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1fc      	bne.n	8004eca <ai_platform_interface_api_get_version+0x3e>
 8004ed0:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <ai_platform_interface_api_get_version+0x88>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <ai_platform_interface_api_get_version+0x8c>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d115      	bne.n	8004f08 <ai_platform_interface_api_get_version+0x7c>
 8004edc:	f7ff fe3a 	bl	8004b54 <_ai_platform_release_crc>
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <ai_platform_interface_api_get_version+0x94>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	f362 0007 	bfi	r0, r2, #0, #8
 8004eec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ef0:	f362 200f 	bfi	r0, r2, #8, #8
 8004ef4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004ef8:	f362 4017 	bfi	r0, r2, #16, #8
 8004efc:	0e1b      	lsrs	r3, r3, #24
 8004efe:	f363 601f 	bfi	r0, r3, #24, #8
 8004f02:	b003      	add	sp, #12
 8004f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f08:	e7fe      	b.n	8004f08 <ai_platform_interface_api_get_version+0x7c>
 8004f0a:	bf00      	nop
 8004f0c:	e0042000 	.word	0xe0042000
 8004f10:	58024000 	.word	0x58024000
 8004f14:	f407a5c2 	.word	0xf407a5c2
 8004f18:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f1c:	40023000 	.word	0x40023000
 8004f20:	08017578 	.word	0x08017578

08004f24 <ai_platform_context_acquire>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4604      	mov	r4, r0
 8004f28:	b120      	cbz	r0, 8004f34 <ai_platform_context_acquire+0x10>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <ai_platform_context_acquire+0x68>)
 8004f2c:	6802      	ldr	r2, [r0, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	bf18      	it	ne
 8004f32:	2400      	movne	r4, #0
 8004f34:	f7ff fe0c 	bl	8004b50 <_ai_platform_acquire_crc>
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <ai_platform_context_acquire+0x6c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f44:	d010      	beq.n	8004f68 <ai_platform_context_acquire+0x44>
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <ai_platform_context_acquire+0x70>)
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1fb      	bne.n	8004f4e <ai_platform_context_acquire+0x2a>
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <ai_platform_context_acquire+0x74>)
 8004f58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <ai_platform_context_acquire+0x78>)
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d00c      	beq.n	8004f80 <ai_platform_context_acquire+0x5c>
 8004f66:	e7fe      	b.n	8004f66 <ai_platform_context_acquire+0x42>
 8004f68:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <ai_platform_context_acquire+0x7c>)
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	6093      	str	r3, [r2, #8]
 8004f6e:	6893      	ldr	r3, [r2, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1fc      	bne.n	8004f6e <ai_platform_context_acquire+0x4a>
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <ai_platform_context_acquire+0x74>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <ai_platform_context_acquire+0x78>)
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d103      	bne.n	8004f88 <ai_platform_context_acquire+0x64>
 8004f80:	f7ff fde8 	bl	8004b54 <_ai_platform_release_crc>
 8004f84:	4620      	mov	r0, r4
 8004f86:	bd10      	pop	{r4, pc}
 8004f88:	e7fe      	b.n	8004f88 <ai_platform_context_acquire+0x64>
 8004f8a:	bf00      	nop
 8004f8c:	a1c00100 	.word	0xa1c00100
 8004f90:	e0042000 	.word	0xe0042000
 8004f94:	58024000 	.word	0x58024000
 8004f98:	f407a5c2 	.word	0xf407a5c2
 8004f9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004fa0:	40023000 	.word	0x40023000

08004fa4 <ai_platform_network_get_error>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	b1f0      	cbz	r0, 8004fe6 <ai_platform_network_get_error+0x42>
 8004fa8:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <ai_platform_network_get_error+0xc4>)
 8004faa:	6802      	ldr	r2, [r0, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	4604      	mov	r4, r0
 8004fb0:	d119      	bne.n	8004fe6 <ai_platform_network_get_error+0x42>
 8004fb2:	f7ff fdcd 	bl	8004b50 <_ai_platform_acquire_crc>
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <ai_platform_network_get_error+0xc8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d03c      	beq.n	800503e <ai_platform_network_get_error+0x9a>
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <ai_platform_network_get_error+0xcc>)
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004fcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1fb      	bne.n	8004fcc <ai_platform_network_get_error+0x28>
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <ai_platform_network_get_error+0xd0>)
 8004fd6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004fda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <ai_platform_network_get_error+0xd4>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d038      	beq.n	8005056 <ai_platform_network_get_error+0xb2>
 8004fe4:	e7fe      	b.n	8004fe4 <ai_platform_network_get_error+0x40>
 8004fe6:	f7ff fdb3 	bl	8004b50 <_ai_platform_acquire_crc>
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <ai_platform_network_get_error+0xc8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d010      	beq.n	800501a <ai_platform_network_get_error+0x76>
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <ai_platform_network_get_error+0xcc>)
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005000:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1fb      	bne.n	8005000 <ai_platform_network_get_error+0x5c>
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <ai_platform_network_get_error+0xd0>)
 800500a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800500e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <ai_platform_network_get_error+0xd4>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d00d      	beq.n	8005034 <ai_platform_network_get_error+0x90>
 8005018:	e7fe      	b.n	8005018 <ai_platform_network_get_error+0x74>
 800501a:	4a18      	ldr	r2, [pc, #96]	; (800507c <ai_platform_network_get_error+0xd8>)
 800501c:	2301      	movs	r3, #1
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	6893      	ldr	r3, [r2, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1fc      	bne.n	8005020 <ai_platform_network_get_error+0x7c>
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <ai_platform_network_get_error+0xd0>)
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <ai_platform_network_get_error+0xd4>)
 800502e:	429a      	cmp	r2, r3
 8005030:	d000      	beq.n	8005034 <ai_platform_network_get_error+0x90>
 8005032:	e7fe      	b.n	8005032 <ai_platform_network_get_error+0x8e>
 8005034:	f7ff fd8e 	bl	8004b54 <_ai_platform_release_crc>
 8005038:	f241 0010 	movw	r0, #4112	; 0x1010
 800503c:	bd10      	pop	{r4, pc}
 800503e:	4a0f      	ldr	r2, [pc, #60]	; (800507c <ai_platform_network_get_error+0xd8>)
 8005040:	2301      	movs	r3, #1
 8005042:	6093      	str	r3, [r2, #8]
 8005044:	6893      	ldr	r3, [r2, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1fc      	bne.n	8005044 <ai_platform_network_get_error+0xa0>
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <ai_platform_network_get_error+0xd0>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <ai_platform_network_get_error+0xd4>)
 8005052:	429a      	cmp	r2, r3
 8005054:	d107      	bne.n	8005066 <ai_platform_network_get_error+0xc2>
 8005056:	f7ff fd7d 	bl	8004b54 <_ai_platform_release_crc>
 800505a:	f104 0010 	add.w	r0, r4, #16
 800505e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005062:	f001 bb73 	b.w	800674c <core_get_error>
 8005066:	e7fe      	b.n	8005066 <ai_platform_network_get_error+0xc2>
 8005068:	a1c00100 	.word	0xa1c00100
 800506c:	e0042000 	.word	0xe0042000
 8005070:	58024000 	.word	0x58024000
 8005074:	f407a5c2 	.word	0xf407a5c2
 8005078:	b5e8b5cd 	.word	0xb5e8b5cd
 800507c:	40023000 	.word	0x40023000

08005080 <ai_platform_network_set_error>:
 8005080:	b110      	cbz	r0, 8005088 <ai_platform_network_set_error+0x8>
 8005082:	3010      	adds	r0, #16
 8005084:	f001 bb68 	b.w	8006758 <core_set_error>
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <ai_platform_inputs_get>:
 800508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005090:	b085      	sub	sp, #20
 8005092:	9102      	str	r1, [sp, #8]
 8005094:	b1f0      	cbz	r0, 80050d4 <ai_platform_inputs_get+0x48>
 8005096:	4b62      	ldr	r3, [pc, #392]	; (8005220 <ai_platform_inputs_get+0x194>)
 8005098:	6802      	ldr	r2, [r0, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	4607      	mov	r7, r0
 800509e:	d119      	bne.n	80050d4 <ai_platform_inputs_get+0x48>
 80050a0:	f7ff fd56 	bl	8004b50 <_ai_platform_acquire_crc>
 80050a4:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <ai_platform_inputs_get+0x198>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d03d      	beq.n	800512e <ai_platform_inputs_get+0xa2>
 80050b2:	4a5d      	ldr	r2, [pc, #372]	; (8005228 <ai_platform_inputs_get+0x19c>)
 80050b4:	2301      	movs	r3, #1
 80050b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80050ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1fb      	bne.n	80050ba <ai_platform_inputs_get+0x2e>
 80050c2:	4b5a      	ldr	r3, [pc, #360]	; (800522c <ai_platform_inputs_get+0x1a0>)
 80050c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80050c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80050cc:	4b58      	ldr	r3, [pc, #352]	; (8005230 <ai_platform_inputs_get+0x1a4>)
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d039      	beq.n	8005146 <ai_platform_inputs_get+0xba>
 80050d2:	e7fe      	b.n	80050d2 <ai_platform_inputs_get+0x46>
 80050d4:	f7ff fd3c 	bl	8004b50 <_ai_platform_acquire_crc>
 80050d8:	4b52      	ldr	r3, [pc, #328]	; (8005224 <ai_platform_inputs_get+0x198>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d010      	beq.n	8005108 <ai_platform_inputs_get+0x7c>
 80050e6:	4a50      	ldr	r2, [pc, #320]	; (8005228 <ai_platform_inputs_get+0x19c>)
 80050e8:	2301      	movs	r3, #1
 80050ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80050ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1fb      	bne.n	80050ee <ai_platform_inputs_get+0x62>
 80050f6:	4b4d      	ldr	r3, [pc, #308]	; (800522c <ai_platform_inputs_get+0x1a0>)
 80050f8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80050fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005100:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <ai_platform_inputs_get+0x1a4>)
 8005102:	429a      	cmp	r2, r3
 8005104:	d00d      	beq.n	8005122 <ai_platform_inputs_get+0x96>
 8005106:	e7fe      	b.n	8005106 <ai_platform_inputs_get+0x7a>
 8005108:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <ai_platform_inputs_get+0x1a8>)
 800510a:	2301      	movs	r3, #1
 800510c:	6093      	str	r3, [r2, #8]
 800510e:	6893      	ldr	r3, [r2, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1fc      	bne.n	800510e <ai_platform_inputs_get+0x82>
 8005114:	4b45      	ldr	r3, [pc, #276]	; (800522c <ai_platform_inputs_get+0x1a0>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <ai_platform_inputs_get+0x1a4>)
 800511c:	429a      	cmp	r2, r3
 800511e:	d000      	beq.n	8005122 <ai_platform_inputs_get+0x96>
 8005120:	e7fe      	b.n	8005120 <ai_platform_inputs_get+0x94>
 8005122:	f7ff fd17 	bl	8004b54 <_ai_platform_release_crc>
 8005126:	2000      	movs	r0, #0
 8005128:	b005      	add	sp, #20
 800512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512e:	4a41      	ldr	r2, [pc, #260]	; (8005234 <ai_platform_inputs_get+0x1a8>)
 8005130:	2301      	movs	r3, #1
 8005132:	6093      	str	r3, [r2, #8]
 8005134:	6893      	ldr	r3, [r2, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1fc      	bne.n	8005134 <ai_platform_inputs_get+0xa8>
 800513a:	4b3c      	ldr	r3, [pc, #240]	; (800522c <ai_platform_inputs_get+0x1a0>)
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <ai_platform_inputs_get+0x1a4>)
 8005142:	429a      	cmp	r2, r3
 8005144:	d155      	bne.n	80051f2 <ai_platform_inputs_get+0x166>
 8005146:	f7ff fd05 	bl	8004b54 <_ai_platform_release_crc>
 800514a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d051      	beq.n	80051f4 <ai_platform_inputs_get+0x168>
 8005150:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005154:	f1ba 0f00 	cmp.w	sl, #0
 8005158:	d04c      	beq.n	80051f4 <ai_platform_inputs_get+0x168>
 800515a:	f04f 0b00 	mov.w	fp, #0
 800515e:	465d      	mov	r5, fp
 8005160:	9703      	str	r7, [sp, #12]
 8005162:	e016      	b.n	8005192 <ai_platform_inputs_get+0x106>
 8005164:	9901      	ldr	r1, [sp, #4]
 8005166:	2301      	movs	r3, #1
 8005168:	507b      	str	r3, [r7, r1]
 800516a:	69b1      	ldr	r1, [r6, #24]
 800516c:	6849      	ldr	r1, [r1, #4]
 800516e:	6121      	str	r1, [r4, #16]
 8005170:	f04f 0301 	mov.w	r3, #1
 8005174:	7523      	strb	r3, [r4, #20]
 8005176:	e9c4 c200 	strd	ip, r2, [r4]
 800517a:	6962      	ldr	r2, [r4, #20]
 800517c:	60a0      	str	r0, [r4, #8]
 800517e:	2300      	movs	r3, #0
 8005180:	f369 221f 	bfi	r2, r9, #8, #24
 8005184:	f8c4 8018 	str.w	r8, [r4, #24]
 8005188:	60e3      	str	r3, [r4, #12]
 800518a:	3501      	adds	r5, #1
 800518c:	f10b 0b1c 	add.w	fp, fp, #28
 8005190:	6162      	str	r2, [r4, #20]
 8005192:	f8ba 3000 	ldrh.w	r3, [sl]
 8005196:	42ab      	cmp	r3, r5
 8005198:	b2aa      	uxth	r2, r5
 800519a:	d93a      	bls.n	8005212 <ai_platform_inputs_get+0x186>
 800519c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80051a0:	00e9      	lsls	r1, r5, #3
 80051a2:	9101      	str	r1, [sp, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d034      	beq.n	8005212 <ai_platform_inputs_get+0x186>
 80051a8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	d030      	beq.n	8005212 <ai_platform_inputs_get+0x186>
 80051b0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80051b4:	69b2      	ldr	r2, [r6, #24]
 80051b6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80051ba:	6810      	ldr	r0, [r2, #0]
 80051bc:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80051c0:	68b3      	ldr	r3, [r6, #8]
 80051c2:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80051c6:	f003 fd05 	bl	8008bd4 <ai_array_to_buffer_fmt>
 80051ca:	69b1      	ldr	r1, [r6, #24]
 80051cc:	4684      	mov	ip, r0
 80051ce:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80051d2:	688a      	ldr	r2, [r1, #8]
 80051d4:	445c      	add	r4, fp
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d0c8      	beq.n	800516c <ai_platform_inputs_get+0xe0>
 80051da:	2100      	movs	r1, #0
 80051dc:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80051e0:	6831      	ldr	r1, [r6, #0]
 80051e2:	6041      	str	r1, [r0, #4]
 80051e4:	b111      	cbz	r1, 80051ec <ai_platform_inputs_get+0x160>
 80051e6:	8849      	ldrh	r1, [r1, #2]
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d1bb      	bne.n	8005164 <ai_platform_inputs_get+0xd8>
 80051ec:	69b1      	ldr	r1, [r6, #24]
 80051ee:	2000      	movs	r0, #0
 80051f0:	e7bc      	b.n	800516c <ai_platform_inputs_get+0xe0>
 80051f2:	e7fe      	b.n	80051f2 <ai_platform_inputs_get+0x166>
 80051f4:	2218      	movs	r2, #24
 80051f6:	2111      	movs	r1, #17
 80051f8:	f107 0010 	add.w	r0, r7, #16
 80051fc:	f001 faac 	bl	8006758 <core_set_error>
 8005200:	2200      	movs	r2, #0
 8005202:	4610      	mov	r0, r2
 8005204:	9b02      	ldr	r3, [sp, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d08e      	beq.n	8005128 <ai_platform_inputs_get+0x9c>
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	b005      	add	sp, #20
 800520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005212:	9f03      	ldr	r7, [sp, #12]
 8005214:	2a00      	cmp	r2, #0
 8005216:	d0ed      	beq.n	80051f4 <ai_platform_inputs_get+0x168>
 8005218:	f8da 3008 	ldr.w	r3, [sl, #8]
 800521c:	6858      	ldr	r0, [r3, #4]
 800521e:	e7f1      	b.n	8005204 <ai_platform_inputs_get+0x178>
 8005220:	a1c00100 	.word	0xa1c00100
 8005224:	e0042000 	.word	0xe0042000
 8005228:	58024000 	.word	0x58024000
 800522c:	f407a5c2 	.word	0xf407a5c2
 8005230:	b5e8b5cd 	.word	0xb5e8b5cd
 8005234:	40023000 	.word	0x40023000

08005238 <ai_platform_outputs_get>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	b085      	sub	sp, #20
 800523e:	9102      	str	r1, [sp, #8]
 8005240:	b1f0      	cbz	r0, 8005280 <ai_platform_outputs_get+0x48>
 8005242:	4b5f      	ldr	r3, [pc, #380]	; (80053c0 <ai_platform_outputs_get+0x188>)
 8005244:	6802      	ldr	r2, [r0, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	4607      	mov	r7, r0
 800524a:	d119      	bne.n	8005280 <ai_platform_outputs_get+0x48>
 800524c:	f7ff fc80 	bl	8004b50 <_ai_platform_acquire_crc>
 8005250:	4b5c      	ldr	r3, [pc, #368]	; (80053c4 <ai_platform_outputs_get+0x18c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	d03d      	beq.n	80052da <ai_platform_outputs_get+0xa2>
 800525e:	4a5a      	ldr	r2, [pc, #360]	; (80053c8 <ai_platform_outputs_get+0x190>)
 8005260:	2301      	movs	r3, #1
 8005262:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005266:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1fb      	bne.n	8005266 <ai_platform_outputs_get+0x2e>
 800526e:	4b57      	ldr	r3, [pc, #348]	; (80053cc <ai_platform_outputs_get+0x194>)
 8005270:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005274:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005278:	4b55      	ldr	r3, [pc, #340]	; (80053d0 <ai_platform_outputs_get+0x198>)
 800527a:	429a      	cmp	r2, r3
 800527c:	d039      	beq.n	80052f2 <ai_platform_outputs_get+0xba>
 800527e:	e7fe      	b.n	800527e <ai_platform_outputs_get+0x46>
 8005280:	f7ff fc66 	bl	8004b50 <_ai_platform_acquire_crc>
 8005284:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <ai_platform_outputs_get+0x18c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d010      	beq.n	80052b4 <ai_platform_outputs_get+0x7c>
 8005292:	4a4d      	ldr	r2, [pc, #308]	; (80053c8 <ai_platform_outputs_get+0x190>)
 8005294:	2301      	movs	r3, #1
 8005296:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800529a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1fb      	bne.n	800529a <ai_platform_outputs_get+0x62>
 80052a2:	4b4a      	ldr	r3, [pc, #296]	; (80053cc <ai_platform_outputs_get+0x194>)
 80052a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80052a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80052ac:	4b48      	ldr	r3, [pc, #288]	; (80053d0 <ai_platform_outputs_get+0x198>)
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d00d      	beq.n	80052ce <ai_platform_outputs_get+0x96>
 80052b2:	e7fe      	b.n	80052b2 <ai_platform_outputs_get+0x7a>
 80052b4:	4a47      	ldr	r2, [pc, #284]	; (80053d4 <ai_platform_outputs_get+0x19c>)
 80052b6:	2301      	movs	r3, #1
 80052b8:	6093      	str	r3, [r2, #8]
 80052ba:	6893      	ldr	r3, [r2, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1fc      	bne.n	80052ba <ai_platform_outputs_get+0x82>
 80052c0:	4b42      	ldr	r3, [pc, #264]	; (80053cc <ai_platform_outputs_get+0x194>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <ai_platform_outputs_get+0x198>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d000      	beq.n	80052ce <ai_platform_outputs_get+0x96>
 80052cc:	e7fe      	b.n	80052cc <ai_platform_outputs_get+0x94>
 80052ce:	f7ff fc41 	bl	8004b54 <_ai_platform_release_crc>
 80052d2:	2000      	movs	r0, #0
 80052d4:	b005      	add	sp, #20
 80052d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052da:	4a3e      	ldr	r2, [pc, #248]	; (80053d4 <ai_platform_outputs_get+0x19c>)
 80052dc:	2301      	movs	r3, #1
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	6893      	ldr	r3, [r2, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1fc      	bne.n	80052e0 <ai_platform_outputs_get+0xa8>
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <ai_platform_outputs_get+0x194>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <ai_platform_outputs_get+0x198>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d150      	bne.n	8005394 <ai_platform_outputs_get+0x15c>
 80052f2:	f7ff fc2f 	bl	8004b54 <_ai_platform_release_crc>
 80052f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d958      	bls.n	80053ae <ai_platform_outputs_get+0x176>
 80052fc:	f04f 0b00 	mov.w	fp, #0
 8005300:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005304:	9703      	str	r7, [sp, #12]
 8005306:	465d      	mov	r5, fp
 8005308:	e016      	b.n	8005338 <ai_platform_outputs_get+0x100>
 800530a:	9901      	ldr	r1, [sp, #4]
 800530c:	2301      	movs	r3, #1
 800530e:	507b      	str	r3, [r7, r1]
 8005310:	69b1      	ldr	r1, [r6, #24]
 8005312:	6849      	ldr	r1, [r1, #4]
 8005314:	6121      	str	r1, [r4, #16]
 8005316:	f04f 0301 	mov.w	r3, #1
 800531a:	7523      	strb	r3, [r4, #20]
 800531c:	e9c4 c200 	strd	ip, r2, [r4]
 8005320:	6962      	ldr	r2, [r4, #20]
 8005322:	60a0      	str	r0, [r4, #8]
 8005324:	2300      	movs	r3, #0
 8005326:	f369 221f 	bfi	r2, r9, #8, #24
 800532a:	f8c4 8018 	str.w	r8, [r4, #24]
 800532e:	60e3      	str	r3, [r4, #12]
 8005330:	3501      	adds	r5, #1
 8005332:	f10b 0b1c 	add.w	fp, fp, #28
 8005336:	6162      	str	r2, [r4, #20]
 8005338:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800533c:	42ab      	cmp	r3, r5
 800533e:	b2aa      	uxth	r2, r5
 8005340:	d929      	bls.n	8005396 <ai_platform_outputs_get+0x15e>
 8005342:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005346:	00e9      	lsls	r1, r5, #3
 8005348:	9101      	str	r1, [sp, #4]
 800534a:	b323      	cbz	r3, 8005396 <ai_platform_outputs_get+0x15e>
 800534c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005350:	b30e      	cbz	r6, 8005396 <ai_platform_outputs_get+0x15e>
 8005352:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005356:	69b2      	ldr	r2, [r6, #24]
 8005358:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800535c:	6810      	ldr	r0, [r2, #0]
 800535e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005362:	68b3      	ldr	r3, [r6, #8]
 8005364:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005368:	f003 fc34 	bl	8008bd4 <ai_array_to_buffer_fmt>
 800536c:	69b1      	ldr	r1, [r6, #24]
 800536e:	4684      	mov	ip, r0
 8005370:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	445c      	add	r4, fp
 8005378:	2800      	cmp	r0, #0
 800537a:	d0ca      	beq.n	8005312 <ai_platform_outputs_get+0xda>
 800537c:	2100      	movs	r1, #0
 800537e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005382:	6831      	ldr	r1, [r6, #0]
 8005384:	6041      	str	r1, [r0, #4]
 8005386:	b111      	cbz	r1, 800538e <ai_platform_outputs_get+0x156>
 8005388:	8849      	ldrh	r1, [r1, #2]
 800538a:	2900      	cmp	r1, #0
 800538c:	d1bd      	bne.n	800530a <ai_platform_outputs_get+0xd2>
 800538e:	69b1      	ldr	r1, [r6, #24]
 8005390:	2000      	movs	r0, #0
 8005392:	e7be      	b.n	8005312 <ai_platform_outputs_get+0xda>
 8005394:	e7fe      	b.n	8005394 <ai_platform_outputs_get+0x15c>
 8005396:	9f03      	ldr	r7, [sp, #12]
 8005398:	b14a      	cbz	r2, 80053ae <ai_platform_outputs_get+0x176>
 800539a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800539e:	6858      	ldr	r0, [r3, #4]
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d096      	beq.n	80052d4 <ai_platform_outputs_get+0x9c>
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	b005      	add	sp, #20
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	2218      	movs	r2, #24
 80053b0:	2111      	movs	r1, #17
 80053b2:	f107 0010 	add.w	r0, r7, #16
 80053b6:	f001 f9cf 	bl	8006758 <core_set_error>
 80053ba:	2200      	movs	r2, #0
 80053bc:	4610      	mov	r0, r2
 80053be:	e7ef      	b.n	80053a0 <ai_platform_outputs_get+0x168>
 80053c0:	a1c00100 	.word	0xa1c00100
 80053c4:	e0042000 	.word	0xe0042000
 80053c8:	58024000 	.word	0x58024000
 80053cc:	f407a5c2 	.word	0xf407a5c2
 80053d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80053d4:	40023000 	.word	0x40023000

080053d8 <ai_platform_api_get_network_report>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	b087      	sub	sp, #28
 80053de:	b1f8      	cbz	r0, 8005420 <ai_platform_api_get_network_report+0x48>
 80053e0:	4b95      	ldr	r3, [pc, #596]	; (8005638 <ai_platform_api_get_network_report+0x260>)
 80053e2:	6802      	ldr	r2, [r0, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	4607      	mov	r7, r0
 80053e8:	d11a      	bne.n	8005420 <ai_platform_api_get_network_report+0x48>
 80053ea:	468b      	mov	fp, r1
 80053ec:	f7ff fbb0 	bl	8004b50 <_ai_platform_acquire_crc>
 80053f0:	4b92      	ldr	r3, [pc, #584]	; (800563c <ai_platform_api_get_network_report+0x264>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fc:	d03e      	beq.n	800547c <ai_platform_api_get_network_report+0xa4>
 80053fe:	4a90      	ldr	r2, [pc, #576]	; (8005640 <ai_platform_api_get_network_report+0x268>)
 8005400:	2301      	movs	r3, #1
 8005402:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005406:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1fb      	bne.n	8005406 <ai_platform_api_get_network_report+0x2e>
 800540e:	4b8d      	ldr	r3, [pc, #564]	; (8005644 <ai_platform_api_get_network_report+0x26c>)
 8005410:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005414:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005418:	4b8b      	ldr	r3, [pc, #556]	; (8005648 <ai_platform_api_get_network_report+0x270>)
 800541a:	429a      	cmp	r2, r3
 800541c:	d03a      	beq.n	8005494 <ai_platform_api_get_network_report+0xbc>
 800541e:	e7fe      	b.n	800541e <ai_platform_api_get_network_report+0x46>
 8005420:	f7ff fb96 	bl	8004b50 <_ai_platform_acquire_crc>
 8005424:	4b85      	ldr	r3, [pc, #532]	; (800563c <ai_platform_api_get_network_report+0x264>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d010      	beq.n	8005454 <ai_platform_api_get_network_report+0x7c>
 8005432:	4a83      	ldr	r2, [pc, #524]	; (8005640 <ai_platform_api_get_network_report+0x268>)
 8005434:	2301      	movs	r3, #1
 8005436:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800543a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1fb      	bne.n	800543a <ai_platform_api_get_network_report+0x62>
 8005442:	4b80      	ldr	r3, [pc, #512]	; (8005644 <ai_platform_api_get_network_report+0x26c>)
 8005444:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005448:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800544c:	4b7e      	ldr	r3, [pc, #504]	; (8005648 <ai_platform_api_get_network_report+0x270>)
 800544e:	429a      	cmp	r2, r3
 8005450:	d00d      	beq.n	800546e <ai_platform_api_get_network_report+0x96>
 8005452:	e7fe      	b.n	8005452 <ai_platform_api_get_network_report+0x7a>
 8005454:	4a7d      	ldr	r2, [pc, #500]	; (800564c <ai_platform_api_get_network_report+0x274>)
 8005456:	2301      	movs	r3, #1
 8005458:	6093      	str	r3, [r2, #8]
 800545a:	6893      	ldr	r3, [r2, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1fc      	bne.n	800545a <ai_platform_api_get_network_report+0x82>
 8005460:	4b78      	ldr	r3, [pc, #480]	; (8005644 <ai_platform_api_get_network_report+0x26c>)
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	4b78      	ldr	r3, [pc, #480]	; (8005648 <ai_platform_api_get_network_report+0x270>)
 8005468:	429a      	cmp	r2, r3
 800546a:	d000      	beq.n	800546e <ai_platform_api_get_network_report+0x96>
 800546c:	e7fe      	b.n	800546c <ai_platform_api_get_network_report+0x94>
 800546e:	f7ff fb71 	bl	8004b54 <_ai_platform_release_crc>
 8005472:	2400      	movs	r4, #0
 8005474:	4620      	mov	r0, r4
 8005476:	b007      	add	sp, #28
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	4a73      	ldr	r2, [pc, #460]	; (800564c <ai_platform_api_get_network_report+0x274>)
 800547e:	2301      	movs	r3, #1
 8005480:	6093      	str	r3, [r2, #8]
 8005482:	6893      	ldr	r3, [r2, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1fc      	bne.n	8005482 <ai_platform_api_get_network_report+0xaa>
 8005488:	4b6e      	ldr	r3, [pc, #440]	; (8005644 <ai_platform_api_get_network_report+0x26c>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4b6e      	ldr	r3, [pc, #440]	; (8005648 <ai_platform_api_get_network_report+0x270>)
 8005490:	429a      	cmp	r2, r3
 8005492:	d112      	bne.n	80054ba <ai_platform_api_get_network_report+0xe2>
 8005494:	f7ff fb5e 	bl	8004b54 <_ai_platform_release_crc>
 8005498:	f1bb 0f00 	cmp.w	fp, #0
 800549c:	d0e9      	beq.n	8005472 <ai_platform_api_get_network_report+0x9a>
 800549e:	2400      	movs	r4, #0
 80054a0:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	b14b      	cbz	r3, 80054bc <ai_platform_api_get_network_report+0xe4>
 80054a8:	3401      	adds	r4, #1
 80054aa:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d003      	beq.n	80054bc <ai_platform_api_get_network_report+0xe4>
 80054b4:	b112      	cbz	r2, 80054bc <ai_platform_api_get_network_report+0xe4>
 80054b6:	4613      	mov	r3, r2
 80054b8:	e7f5      	b.n	80054a6 <ai_platform_api_get_network_report+0xce>
 80054ba:	e7fe      	b.n	80054ba <ai_platform_api_get_network_report+0xe2>
 80054bc:	2c00      	cmp	r4, #0
 80054be:	f000 819e 	beq.w	80057fe <ai_platform_api_get_network_report+0x426>
 80054c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04e      	beq.n	8005566 <ai_platform_api_get_network_report+0x18e>
 80054c8:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80054cc:	f1b9 0f00 	cmp.w	r9, #0
 80054d0:	d049      	beq.n	8005566 <ai_platform_api_get_network_report+0x18e>
 80054d2:	f04f 0a00 	mov.w	sl, #0
 80054d6:	e9cd 7b00 	strd	r7, fp, [sp]
 80054da:	4655      	mov	r5, sl
 80054dc:	e016      	b.n	800550c <ai_platform_api_get_network_report+0x134>
 80054de:	2101      	movs	r1, #1
 80054e0:	f847 100e 	str.w	r1, [r7, lr]
 80054e4:	69b1      	ldr	r1, [r6, #24]
 80054e6:	6849      	ldr	r1, [r1, #4]
 80054e8:	60a3      	str	r3, [r4, #8]
 80054ea:	f04f 0301 	mov.w	r3, #1
 80054ee:	7523      	strb	r3, [r4, #20]
 80054f0:	2300      	movs	r3, #0
 80054f2:	60e3      	str	r3, [r4, #12]
 80054f4:	6963      	ldr	r3, [r4, #20]
 80054f6:	6121      	str	r1, [r4, #16]
 80054f8:	e9c4 0200 	strd	r0, r2, [r4]
 80054fc:	f368 231f 	bfi	r3, r8, #8, #24
 8005500:	f8c4 b018 	str.w	fp, [r4, #24]
 8005504:	3501      	adds	r5, #1
 8005506:	f10a 0a1c 	add.w	sl, sl, #28
 800550a:	6163      	str	r3, [r4, #20]
 800550c:	f8b9 3000 	ldrh.w	r3, [r9]
 8005510:	42ab      	cmp	r3, r5
 8005512:	b2aa      	uxth	r2, r5
 8005514:	d933      	bls.n	800557e <ai_platform_api_get_network_report+0x1a6>
 8005516:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800551a:	b383      	cbz	r3, 800557e <ai_platform_api_get_network_report+0x1a6>
 800551c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005520:	b36e      	cbz	r6, 800557e <ai_platform_api_get_network_report+0x1a6>
 8005522:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005526:	69b2      	ldr	r2, [r6, #24]
 8005528:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800552c:	6810      	ldr	r0, [r2, #0]
 800552e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005532:	68b3      	ldr	r3, [r6, #8]
 8005534:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005538:	f003 fb4c 	bl	8008bd4 <ai_array_to_buffer_fmt>
 800553c:	69b1      	ldr	r1, [r6, #24]
 800553e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005542:	688a      	ldr	r2, [r1, #8]
 8005544:	4454      	add	r4, sl
 8005546:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0cb      	beq.n	80054e6 <ai_platform_api_get_network_report+0x10e>
 800554e:	2100      	movs	r1, #0
 8005550:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005554:	6831      	ldr	r1, [r6, #0]
 8005556:	6059      	str	r1, [r3, #4]
 8005558:	b111      	cbz	r1, 8005560 <ai_platform_api_get_network_report+0x188>
 800555a:	8849      	ldrh	r1, [r1, #2]
 800555c:	2900      	cmp	r1, #0
 800555e:	d1be      	bne.n	80054de <ai_platform_api_get_network_report+0x106>
 8005560:	69b1      	ldr	r1, [r6, #24]
 8005562:	2300      	movs	r3, #0
 8005564:	e7bf      	b.n	80054e6 <ai_platform_api_get_network_report+0x10e>
 8005566:	2400      	movs	r4, #0
 8005568:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 800556c:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8005570:	2218      	movs	r2, #24
 8005572:	2112      	movs	r1, #18
 8005574:	f107 0010 	add.w	r0, r7, #16
 8005578:	f001 f8ee 	bl	8006758 <core_set_error>
 800557c:	e77a      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 800557e:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005582:	2a00      	cmp	r2, #0
 8005584:	d0ef      	beq.n	8005566 <ai_platform_api_get_network_report+0x18e>
 8005586:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8005590:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 8005594:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005596:	2b01      	cmp	r3, #1
 8005598:	f240 8125 	bls.w	80057e6 <ai_platform_api_get_network_report+0x40e>
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	e9cd 7b00 	strd	r7, fp, [sp]
 80055a4:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80055a8:	4655      	mov	r5, sl
 80055aa:	e016      	b.n	80055da <ai_platform_api_get_network_report+0x202>
 80055ac:	2101      	movs	r1, #1
 80055ae:	f847 100e 	str.w	r1, [r7, lr]
 80055b2:	69b1      	ldr	r1, [r6, #24]
 80055b4:	6849      	ldr	r1, [r1, #4]
 80055b6:	60a3      	str	r3, [r4, #8]
 80055b8:	f04f 0301 	mov.w	r3, #1
 80055bc:	7523      	strb	r3, [r4, #20]
 80055be:	2300      	movs	r3, #0
 80055c0:	60e3      	str	r3, [r4, #12]
 80055c2:	6963      	ldr	r3, [r4, #20]
 80055c4:	6121      	str	r1, [r4, #16]
 80055c6:	e9c4 0200 	strd	r0, r2, [r4]
 80055ca:	f368 231f 	bfi	r3, r8, #8, #24
 80055ce:	f8c4 b018 	str.w	fp, [r4, #24]
 80055d2:	3501      	adds	r5, #1
 80055d4:	f10a 0a1c 	add.w	sl, sl, #28
 80055d8:	6163      	str	r3, [r4, #20]
 80055da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80055de:	42ab      	cmp	r3, r5
 80055e0:	b2aa      	uxth	r2, r5
 80055e2:	d935      	bls.n	8005650 <ai_platform_api_get_network_report+0x278>
 80055e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d031      	beq.n	8005650 <ai_platform_api_get_network_report+0x278>
 80055ec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80055f0:	b376      	cbz	r6, 8005650 <ai_platform_api_get_network_report+0x278>
 80055f2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80055f6:	69b2      	ldr	r2, [r6, #24]
 80055f8:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80055fc:	6810      	ldr	r0, [r2, #0]
 80055fe:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005602:	68b3      	ldr	r3, [r6, #8]
 8005604:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005608:	f003 fae4 	bl	8008bd4 <ai_array_to_buffer_fmt>
 800560c:	69b1      	ldr	r1, [r6, #24]
 800560e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005612:	688a      	ldr	r2, [r1, #8]
 8005614:	4454      	add	r4, sl
 8005616:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ca      	beq.n	80055b4 <ai_platform_api_get_network_report+0x1dc>
 800561e:	2100      	movs	r1, #0
 8005620:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005624:	6831      	ldr	r1, [r6, #0]
 8005626:	6059      	str	r1, [r3, #4]
 8005628:	b111      	cbz	r1, 8005630 <ai_platform_api_get_network_report+0x258>
 800562a:	8849      	ldrh	r1, [r1, #2]
 800562c:	2900      	cmp	r1, #0
 800562e:	d1bd      	bne.n	80055ac <ai_platform_api_get_network_report+0x1d4>
 8005630:	69b1      	ldr	r1, [r6, #24]
 8005632:	2300      	movs	r3, #0
 8005634:	e7be      	b.n	80055b4 <ai_platform_api_get_network_report+0x1dc>
 8005636:	bf00      	nop
 8005638:	a1c00100 	.word	0xa1c00100
 800563c:	e0042000 	.word	0xe0042000
 8005640:	58024000 	.word	0x58024000
 8005644:	f407a5c2 	.word	0xf407a5c2
 8005648:	b5e8b5cd 	.word	0xb5e8b5cd
 800564c:	40023000 	.word	0x40023000
 8005650:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005654:	2a00      	cmp	r2, #0
 8005656:	f000 80c6 	beq.w	80057e6 <ai_platform_api_get_network_report+0x40e>
 800565a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800565e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8005668:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 800566c:	4630      	mov	r0, r6
 800566e:	f7ff f9c9 	bl	8004a04 <ai_buffer_array_sane>
 8005672:	4604      	mov	r4, r0
 8005674:	b938      	cbnz	r0, 8005686 <ai_platform_api_get_network_report+0x2ae>
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff f9c4 	bl	8004a04 <ai_buffer_array_sane>
 800567c:	b118      	cbz	r0, 8005686 <ai_platform_api_get_network_report+0x2ae>
 800567e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 80c5 	bne.w	8005810 <ai_platform_api_get_network_report+0x438>
 8005686:	f107 081c 	add.w	r8, r7, #28
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff f9ba 	bl	8004a04 <ai_buffer_array_sane>
 8005690:	4604      	mov	r4, r0
 8005692:	b938      	cbnz	r0, 80056a4 <ai_platform_api_get_network_report+0x2cc>
 8005694:	4640      	mov	r0, r8
 8005696:	f7ff f9b5 	bl	8004a04 <ai_buffer_array_sane>
 800569a:	b118      	cbz	r0, 80056a4 <ai_platform_api_get_network_report+0x2cc>
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 80bd 	bne.w	800581e <ai_platform_api_get_network_report+0x446>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 80056aa:	f7ff fa51 	bl	8004b50 <_ai_platform_acquire_crc>
 80056ae:	4ba0      	ldr	r3, [pc, #640]	; (8005930 <ai_platform_api_get_network_report+0x558>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ba:	d010      	beq.n	80056de <ai_platform_api_get_network_report+0x306>
 80056bc:	4a9d      	ldr	r2, [pc, #628]	; (8005934 <ai_platform_api_get_network_report+0x55c>)
 80056be:	2301      	movs	r3, #1
 80056c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80056c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1fb      	bne.n	80056c4 <ai_platform_api_get_network_report+0x2ec>
 80056cc:	4b9a      	ldr	r3, [pc, #616]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 80056ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80056d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80056d6:	4b99      	ldr	r3, [pc, #612]	; (800593c <ai_platform_api_get_network_report+0x564>)
 80056d8:	429a      	cmp	r2, r3
 80056da:	d00d      	beq.n	80056f8 <ai_platform_api_get_network_report+0x320>
 80056dc:	e7fe      	b.n	80056dc <ai_platform_api_get_network_report+0x304>
 80056de:	4a98      	ldr	r2, [pc, #608]	; (8005940 <ai_platform_api_get_network_report+0x568>)
 80056e0:	2301      	movs	r3, #1
 80056e2:	6093      	str	r3, [r2, #8]
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1fc      	bne.n	80056e4 <ai_platform_api_get_network_report+0x30c>
 80056ea:	4b93      	ldr	r3, [pc, #588]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4b92      	ldr	r3, [pc, #584]	; (800593c <ai_platform_api_get_network_report+0x564>)
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f040 808a 	bne.w	800580c <ai_platform_api_get_network_report+0x434>
 80056f8:	f7ff fa2c 	bl	8004b54 <_ai_platform_release_crc>
 80056fc:	4b91      	ldr	r3, [pc, #580]	; (8005944 <ai_platform_api_get_network_report+0x56c>)
 80056fe:	f8cb 3010 	str.w	r3, [fp, #16]
 8005702:	f7ff fa25 	bl	8004b50 <_ai_platform_acquire_crc>
 8005706:	4b8a      	ldr	r3, [pc, #552]	; (8005930 <ai_platform_api_get_network_report+0x558>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005712:	d010      	beq.n	8005736 <ai_platform_api_get_network_report+0x35e>
 8005714:	4b87      	ldr	r3, [pc, #540]	; (8005934 <ai_platform_api_get_network_report+0x55c>)
 8005716:	2201      	movs	r2, #1
 8005718:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800571c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005720:	2a00      	cmp	r2, #0
 8005722:	d1fb      	bne.n	800571c <ai_platform_api_get_network_report+0x344>
 8005724:	4a84      	ldr	r2, [pc, #528]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 8005726:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800572a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800572e:	4b83      	ldr	r3, [pc, #524]	; (800593c <ai_platform_api_get_network_report+0x564>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d00c      	beq.n	800574e <ai_platform_api_get_network_report+0x376>
 8005734:	e7fe      	b.n	8005734 <ai_platform_api_get_network_report+0x35c>
 8005736:	4b82      	ldr	r3, [pc, #520]	; (8005940 <ai_platform_api_get_network_report+0x568>)
 8005738:	2201      	movs	r2, #1
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	2a00      	cmp	r2, #0
 8005740:	d1fc      	bne.n	800573c <ai_platform_api_get_network_report+0x364>
 8005742:	4a7d      	ldr	r2, [pc, #500]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b7c      	ldr	r3, [pc, #496]	; (800593c <ai_platform_api_get_network_report+0x564>)
 800574a:	429a      	cmp	r2, r3
 800574c:	d15f      	bne.n	800580e <ai_platform_api_get_network_report+0x436>
 800574e:	f7ff fa01 	bl	8004b54 <_ai_platform_release_crc>
 8005752:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005756:	f8cb 3014 	str.w	r3, [fp, #20]
 800575a:	f7ff f9f9 	bl	8004b50 <_ai_platform_acquire_crc>
 800575e:	4b74      	ldr	r3, [pc, #464]	; (8005930 <ai_platform_api_get_network_report+0x558>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d010      	beq.n	800578e <ai_platform_api_get_network_report+0x3b6>
 800576c:	4b71      	ldr	r3, [pc, #452]	; (8005934 <ai_platform_api_get_network_report+0x55c>)
 800576e:	2201      	movs	r2, #1
 8005770:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005774:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005778:	2a00      	cmp	r2, #0
 800577a:	d1fb      	bne.n	8005774 <ai_platform_api_get_network_report+0x39c>
 800577c:	4a6e      	ldr	r2, [pc, #440]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 800577e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005782:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005786:	4b6d      	ldr	r3, [pc, #436]	; (800593c <ai_platform_api_get_network_report+0x564>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d00c      	beq.n	80057a6 <ai_platform_api_get_network_report+0x3ce>
 800578c:	e7fe      	b.n	800578c <ai_platform_api_get_network_report+0x3b4>
 800578e:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <ai_platform_api_get_network_report+0x568>)
 8005790:	2201      	movs	r2, #1
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1fc      	bne.n	8005794 <ai_platform_api_get_network_report+0x3bc>
 800579a:	4a67      	ldr	r2, [pc, #412]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b66      	ldr	r3, [pc, #408]	; (800593c <ai_platform_api_get_network_report+0x564>)
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d142      	bne.n	800582c <ai_platform_api_get_network_report+0x454>
 80057a6:	f7ff f9d5 	bl	8004b54 <_ai_platform_release_crc>
 80057aa:	f240 2301 	movw	r3, #513	; 0x201
 80057ae:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 80057b2:	f7ff f9cd 	bl	8004b50 <_ai_platform_acquire_crc>
 80057b6:	4b5e      	ldr	r3, [pc, #376]	; (8005930 <ai_platform_api_get_network_report+0x558>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d034      	beq.n	800582e <ai_platform_api_get_network_report+0x456>
 80057c4:	4b5b      	ldr	r3, [pc, #364]	; (8005934 <ai_platform_api_get_network_report+0x55c>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80057cc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	d1fb      	bne.n	80057cc <ai_platform_api_get_network_report+0x3f4>
 80057d4:	4a58      	ldr	r2, [pc, #352]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 80057d6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80057da:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80057de:	4b57      	ldr	r3, [pc, #348]	; (800593c <ai_platform_api_get_network_report+0x564>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d030      	beq.n	8005846 <ai_platform_api_get_network_report+0x46e>
 80057e4:	e7fe      	b.n	80057e4 <ai_platform_api_get_network_report+0x40c>
 80057e6:	2400      	movs	r4, #0
 80057e8:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 80057ec:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 80057f0:	2218      	movs	r2, #24
 80057f2:	2113      	movs	r1, #19
 80057f4:	f107 0010 	add.w	r0, r7, #16
 80057f8:	f000 ffae 	bl	8006758 <core_set_error>
 80057fc:	e63a      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 80057fe:	2218      	movs	r2, #24
 8005800:	2111      	movs	r1, #17
 8005802:	f107 0010 	add.w	r0, r7, #16
 8005806:	f000 ffa7 	bl	8006758 <core_set_error>
 800580a:	e633      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 800580c:	e7fe      	b.n	800580c <ai_platform_api_get_network_report+0x434>
 800580e:	e7fe      	b.n	800580e <ai_platform_api_get_network_report+0x436>
 8005810:	2213      	movs	r2, #19
 8005812:	2111      	movs	r1, #17
 8005814:	f107 0010 	add.w	r0, r7, #16
 8005818:	f000 ff9e 	bl	8006758 <core_set_error>
 800581c:	e62a      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 800581e:	2212      	movs	r2, #18
 8005820:	2111      	movs	r1, #17
 8005822:	f107 0010 	add.w	r0, r7, #16
 8005826:	f000 ff97 	bl	8006758 <core_set_error>
 800582a:	e623      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 800582c:	e7fe      	b.n	800582c <ai_platform_api_get_network_report+0x454>
 800582e:	4b44      	ldr	r3, [pc, #272]	; (8005940 <ai_platform_api_get_network_report+0x568>)
 8005830:	2201      	movs	r2, #1
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	2a00      	cmp	r2, #0
 8005838:	d1fc      	bne.n	8005834 <ai_platform_api_get_network_report+0x45c>
 800583a:	4a3f      	ldr	r2, [pc, #252]	; (8005938 <ai_platform_api_get_network_report+0x560>)
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b3e      	ldr	r3, [pc, #248]	; (800593c <ai_platform_api_get_network_report+0x564>)
 8005842:	429a      	cmp	r2, r3
 8005844:	d14a      	bne.n	80058dc <ai_platform_api_get_network_report+0x504>
 8005846:	f7ff f985 	bl	8004b54 <_ai_platform_release_crc>
 800584a:	f240 5301 	movw	r3, #1281	; 0x501
 800584e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8005852:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005854:	f003 fa6a 	bl	8008d2c <ai_platform_version_get>
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <ai_platform_api_get_network_report+0x570>)
 800585a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800585e:	f8cb 0020 	str.w	r0, [fp, #32]
 8005862:	429a      	cmp	r2, r3
 8005864:	d10d      	bne.n	8005882 <ai_platform_api_get_network_report+0x4aa>
 8005866:	e896 0003 	ldmia.w	r6, {r0, r1}
 800586a:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 800586e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005872:	e898 0003 	ldmia.w	r8, {r0, r1}
 8005876:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 800587a:	e883 0003 	stmia.w	r3, {r0, r1}
 800587e:	2401      	movs	r4, #1
 8005880:	e5f8      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 8005882:	4a32      	ldr	r2, [pc, #200]	; (800594c <ai_platform_api_get_network_report+0x574>)
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <ai_platform_api_get_network_report+0x578>)
 8005886:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 800588a:	2000      	movs	r0, #0
 800588c:	2100      	movs	r1, #0
 800588e:	f240 4201 	movw	r2, #1025	; 0x401
 8005892:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8005896:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 800589a:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 800589e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058a0:	f10d 0908 	add.w	r9, sp, #8
 80058a4:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 80058a8:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 80058ac:	46a6      	mov	lr, r4
 80058ae:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 80058b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80058b6:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 80058ba:	46ac      	mov	ip, r5
 80058bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80058c0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80058c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff f89b 	bl	8004a04 <ai_buffer_array_sane>
 80058ce:	b990      	cbnz	r0, 80058f6 <ai_platform_api_get_network_report+0x51e>
 80058d0:	4640      	mov	r0, r8
 80058d2:	f7ff f897 	bl	8004a04 <ai_buffer_array_sane>
 80058d6:	b910      	cbnz	r0, 80058de <ai_platform_api_get_network_report+0x506>
 80058d8:	2401      	movs	r4, #1
 80058da:	e5cb      	b.n	8005474 <ai_platform_api_get_network_report+0x9c>
 80058dc:	e7fe      	b.n	80058dc <ai_platform_api_get_network_report+0x504>
 80058de:	4640      	mov	r0, r8
 80058e0:	f7ff f890 	bl	8004a04 <ai_buffer_array_sane>
 80058e4:	b198      	cbz	r0, 800590e <ai_platform_api_get_network_report+0x536>
 80058e6:	6a3d      	ldr	r5, [r7, #32]
 80058e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058f4:	e7f0      	b.n	80058d8 <ai_platform_api_get_network_report+0x500>
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff f884 	bl	8004a04 <ai_buffer_array_sane>
 80058fc:	b178      	cbz	r0, 800591e <ai_platform_api_get_network_report+0x546>
 80058fe:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005904:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005908:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800590c:	e7e0      	b.n	80058d0 <ai_platform_api_get_network_report+0x4f8>
 800590e:	4605      	mov	r5, r0
 8005910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800591c:	deff      	udf	#255	; 0xff
 800591e:	4604      	mov	r4, r0
 8005920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005924:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005928:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800592c:	deff      	udf	#255	; 0xff
 800592e:	bf00      	nop
 8005930:	e0042000 	.word	0xe0042000
 8005934:	58024000 	.word	0x58024000
 8005938:	f407a5c2 	.word	0xf407a5c2
 800593c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005940:	40023000 	.word	0x40023000
 8005944:	080175bc 	.word	0x080175bc
 8005948:	a1facade 	.word	0xa1facade
 800594c:	00040440 	.word	0x00040440
 8005950:	0800ca7c 	.word	0x0800ca7c

08005954 <ai_platform_network_create>:
 8005954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005958:	b083      	sub	sp, #12
 800595a:	4606      	mov	r6, r0
 800595c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005960:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005964:	4615      	mov	r5, r2
 8005966:	461f      	mov	r7, r3
 8005968:	f7ff f8f2 	bl	8004b50 <_ai_platform_acquire_crc>
 800596c:	b188      	cbz	r0, 8005992 <ai_platform_network_create+0x3e>
 800596e:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <ai_platform_network_create+0x190>)
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005976:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800597a:	4603      	mov	r3, r0
 800597c:	d00e      	beq.n	800599c <ai_platform_network_create+0x48>
 800597e:	4a5a      	ldr	r2, [pc, #360]	; (8005ae8 <ai_platform_network_create+0x194>)
 8005980:	2118      	movs	r1, #24
 8005982:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005986:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800598a:	2918      	cmp	r1, #24
 800598c:	d018      	beq.n	80059c0 <ai_platform_network_create+0x6c>
 800598e:	f7ff f8e1 	bl	8004b54 <_ai_platform_release_crc>
 8005992:	f244 1033 	movw	r0, #16691	; 0x4133
 8005996:	b003      	add	sp, #12
 8005998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800599c:	4a53      	ldr	r2, [pc, #332]	; (8005aec <ai_platform_network_create+0x198>)
 800599e:	2101      	movs	r1, #1
 80059a0:	6091      	str	r1, [r2, #8]
 80059a2:	2114      	movs	r1, #20
 80059a4:	e001      	b.n	80059aa <ai_platform_network_create+0x56>
 80059a6:	3901      	subs	r1, #1
 80059a8:	d002      	beq.n	80059b0 <ai_platform_network_create+0x5c>
 80059aa:	6894      	ldr	r4, [r2, #8]
 80059ac:	2c00      	cmp	r4, #0
 80059ae:	d1fa      	bne.n	80059a6 <ai_platform_network_create+0x52>
 80059b0:	4a4e      	ldr	r2, [pc, #312]	; (8005aec <ai_platform_network_create+0x198>)
 80059b2:	6891      	ldr	r1, [r2, #8]
 80059b4:	b911      	cbnz	r1, 80059bc <ai_platform_network_create+0x68>
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	3201      	adds	r2, #1
 80059ba:	d008      	beq.n	80059ce <ai_platform_network_create+0x7a>
 80059bc:	4618      	mov	r0, r3
 80059be:	e7e6      	b.n	800598e <ai_platform_network_create+0x3a>
 80059c0:	2101      	movs	r1, #1
 80059c2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80059c6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80059ca:	2900      	cmp	r1, #0
 80059cc:	d1fb      	bne.n	80059c6 <ai_platform_network_create+0x72>
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f8c0 	bl	8004b54 <_ai_platform_release_crc>
 80059d4:	f7ff f8bc 	bl	8004b50 <_ai_platform_acquire_crc>
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <ai_platform_network_create+0x190>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d010      	beq.n	8005a08 <ai_platform_network_create+0xb4>
 80059e6:	4b40      	ldr	r3, [pc, #256]	; (8005ae8 <ai_platform_network_create+0x194>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80059ee:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80059f2:	2900      	cmp	r1, #0
 80059f4:	d1fb      	bne.n	80059ee <ai_platform_network_create+0x9a>
 80059f6:	4a3e      	ldr	r2, [pc, #248]	; (8005af0 <ai_platform_network_create+0x19c>)
 80059f8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80059fc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005a00:	4b3c      	ldr	r3, [pc, #240]	; (8005af4 <ai_platform_network_create+0x1a0>)
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d00c      	beq.n	8005a20 <ai_platform_network_create+0xcc>
 8005a06:	e7fe      	b.n	8005a06 <ai_platform_network_create+0xb2>
 8005a08:	4a38      	ldr	r2, [pc, #224]	; (8005aec <ai_platform_network_create+0x198>)
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	6093      	str	r3, [r2, #8]
 8005a0e:	6893      	ldr	r3, [r2, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1fc      	bne.n	8005a0e <ai_platform_network_create+0xba>
 8005a14:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <ai_platform_network_create+0x19c>)
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <ai_platform_network_create+0x1a0>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d122      	bne.n	8005a66 <ai_platform_network_create+0x112>
 8005a20:	f7ff f898 	bl	8004b54 <_ai_platform_release_crc>
 8005a24:	b38e      	cbz	r6, 8005a8a <ai_platform_network_create+0x136>
 8005a26:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <ai_platform_network_create+0x1a4>)
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	6035      	str	r5, [r6, #0]
 8005a2c:	f000 fe8c 	bl	8006748 <core_init>
 8005a30:	b1d0      	cbz	r0, 8005a68 <ai_platform_network_create+0x114>
 8005a32:	f7ff f88d 	bl	8004b50 <_ai_platform_acquire_crc>
 8005a36:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <ai_platform_network_create+0x190>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d025      	beq.n	8005a90 <ai_platform_network_create+0x13c>
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <ai_platform_network_create+0x194>)
 8005a46:	2301      	movs	r3, #1
 8005a48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1fb      	bne.n	8005a4c <ai_platform_network_create+0xf8>
 8005a54:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <ai_platform_network_create+0x19c>)
 8005a56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <ai_platform_network_create+0x1a0>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d022      	beq.n	8005aaa <ai_platform_network_create+0x156>
 8005a64:	e7fe      	b.n	8005a64 <ai_platform_network_create+0x110>
 8005a66:	e7fe      	b.n	8005a66 <ai_platform_network_create+0x112>
 8005a68:	2430      	movs	r4, #48	; 0x30
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	2610      	movs	r6, #16
 8005a70:	464a      	mov	r2, r9
 8005a72:	4641      	mov	r1, r8
 8005a74:	4638      	mov	r0, r7
 8005a76:	f003 f953 	bl	8008d20 <ai_version_get>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f364 0007 	bfi	r0, r4, #0, #8
 8005a82:	64ab      	str	r3, [r5, #72]	; 0x48
 8005a84:	f366 201f 	bfi	r0, r6, #8, #24
 8005a88:	e785      	b.n	8005996 <ai_platform_network_create+0x42>
 8005a8a:	f241 0010 	movw	r0, #4112	; 0x1010
 8005a8e:	e782      	b.n	8005996 <ai_platform_network_create+0x42>
 8005a90:	4a16      	ldr	r2, [pc, #88]	; (8005aec <ai_platform_network_create+0x198>)
 8005a92:	2301      	movs	r3, #1
 8005a94:	6093      	str	r3, [r2, #8]
 8005a96:	6893      	ldr	r3, [r2, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1fc      	bne.n	8005a96 <ai_platform_network_create+0x142>
 8005a9c:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <ai_platform_network_create+0x19c>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <ai_platform_network_create+0x1a0>)
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d000      	beq.n	8005aaa <ai_platform_network_create+0x156>
 8005aa8:	e7fe      	b.n	8005aa8 <ai_platform_network_create+0x154>
 8005aaa:	f7ff f853 	bl	8004b54 <_ai_platform_release_crc>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f003 f934 	bl	8008d20 <ai_version_get>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	2105      	movs	r1, #5
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f003 f92e 	bl	8008d20 <ai_version_get>
 8005ac4:	4284      	cmp	r4, r0
 8005ac6:	d001      	beq.n	8005acc <ai_platform_network_create+0x178>
 8005ac8:	2401      	movs	r4, #1
 8005aca:	e7ce      	b.n	8005a6a <ai_platform_network_create+0x116>
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <ai_platform_network_create+0x1a8>)
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	a801      	add	r0, sp, #4
 8005ad2:	f000 fe69 	bl	80067a8 <ai_check_custom_types>
 8005ad6:	b110      	cbz	r0, 8005ade <ai_platform_network_create+0x18a>
 8005ad8:	2600      	movs	r6, #0
 8005ada:	4634      	mov	r4, r6
 8005adc:	e7c8      	b.n	8005a70 <ai_platform_network_create+0x11c>
 8005ade:	2402      	movs	r4, #2
 8005ae0:	e7c3      	b.n	8005a6a <ai_platform_network_create+0x116>
 8005ae2:	bf00      	nop
 8005ae4:	e0042000 	.word	0xe0042000
 8005ae8:	58024000 	.word	0x58024000
 8005aec:	40023000 	.word	0x40023000
 8005af0:	f407a5c2 	.word	0xf407a5c2
 8005af4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005af8:	a1c00100 	.word	0xa1c00100
 8005afc:	84048403 	.word	0x84048403

08005b00 <ai_platform_network_destroy>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	b1e8      	cbz	r0, 8005b42 <ai_platform_network_destroy+0x42>
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <ai_platform_network_destroy+0xc0>)
 8005b08:	6802      	ldr	r2, [r0, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d119      	bne.n	8005b42 <ai_platform_network_destroy+0x42>
 8005b0e:	f7ff f81f 	bl	8004b50 <_ai_platform_acquire_crc>
 8005b12:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <ai_platform_network_destroy+0xc4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d03b      	beq.n	8005b98 <ai_platform_network_destroy+0x98>
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <ai_platform_network_destroy+0xc8>)
 8005b22:	2301      	movs	r3, #1
 8005b24:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b28:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1fb      	bne.n	8005b28 <ai_platform_network_destroy+0x28>
 8005b30:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <ai_platform_network_destroy+0xcc>)
 8005b32:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <ai_platform_network_destroy+0xd0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d037      	beq.n	8005bb0 <ai_platform_network_destroy+0xb0>
 8005b40:	e7fe      	b.n	8005b40 <ai_platform_network_destroy+0x40>
 8005b42:	f7ff f805 	bl	8004b50 <_ai_platform_acquire_crc>
 8005b46:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <ai_platform_network_destroy+0xc4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d010      	beq.n	8005b76 <ai_platform_network_destroy+0x76>
 8005b54:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <ai_platform_network_destroy+0xc8>)
 8005b56:	2301      	movs	r3, #1
 8005b58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1fb      	bne.n	8005b5c <ai_platform_network_destroy+0x5c>
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <ai_platform_network_destroy+0xcc>)
 8005b66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <ai_platform_network_destroy+0xd0>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d00d      	beq.n	8005b90 <ai_platform_network_destroy+0x90>
 8005b74:	e7fe      	b.n	8005b74 <ai_platform_network_destroy+0x74>
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <ai_platform_network_destroy+0xd4>)
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6093      	str	r3, [r2, #8]
 8005b7c:	6893      	ldr	r3, [r2, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1fc      	bne.n	8005b7c <ai_platform_network_destroy+0x7c>
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <ai_platform_network_destroy+0xcc>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <ai_platform_network_destroy+0xd0>)
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d000      	beq.n	8005b90 <ai_platform_network_destroy+0x90>
 8005b8e:	e7fe      	b.n	8005b8e <ai_platform_network_destroy+0x8e>
 8005b90:	f7fe ffe0 	bl	8004b54 <_ai_platform_release_crc>
 8005b94:	4620      	mov	r0, r4
 8005b96:	bd10      	pop	{r4, pc}
 8005b98:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <ai_platform_network_destroy+0xd4>)
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	6893      	ldr	r3, [r2, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1fc      	bne.n	8005b9e <ai_platform_network_destroy+0x9e>
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <ai_platform_network_destroy+0xcc>)
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <ai_platform_network_destroy+0xd0>)
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d106      	bne.n	8005bbe <ai_platform_network_destroy+0xbe>
 8005bb0:	f7fe ffd0 	bl	8004b54 <_ai_platform_release_crc>
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 febb 	bl	8006930 <ai_layers_destroy_all>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	e7fe      	b.n	8005bbe <ai_platform_network_destroy+0xbe>
 8005bc0:	a1c00100 	.word	0xa1c00100
 8005bc4:	e0042000 	.word	0xe0042000
 8005bc8:	58024000 	.word	0x58024000
 8005bcc:	f407a5c2 	.word	0xf407a5c2
 8005bd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bd4:	40023000 	.word	0x40023000

08005bd8 <ai_platform_network_init>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	b1f8      	cbz	r0, 8005c1e <ai_platform_network_init+0x46>
 8005bde:	4b6e      	ldr	r3, [pc, #440]	; (8005d98 <ai_platform_network_init+0x1c0>)
 8005be0:	6802      	ldr	r2, [r0, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	4604      	mov	r4, r0
 8005be6:	d11a      	bne.n	8005c1e <ai_platform_network_init+0x46>
 8005be8:	460e      	mov	r6, r1
 8005bea:	f7fe ffb1 	bl	8004b50 <_ai_platform_acquire_crc>
 8005bee:	4b6b      	ldr	r3, [pc, #428]	; (8005d9c <ai_platform_network_init+0x1c4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfa:	d03d      	beq.n	8005c78 <ai_platform_network_init+0xa0>
 8005bfc:	4a68      	ldr	r2, [pc, #416]	; (8005da0 <ai_platform_network_init+0x1c8>)
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1fb      	bne.n	8005c04 <ai_platform_network_init+0x2c>
 8005c0c:	4b65      	ldr	r3, [pc, #404]	; (8005da4 <ai_platform_network_init+0x1cc>)
 8005c0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c16:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <ai_platform_network_init+0x1d0>)
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d039      	beq.n	8005c90 <ai_platform_network_init+0xb8>
 8005c1c:	e7fe      	b.n	8005c1c <ai_platform_network_init+0x44>
 8005c1e:	f7fe ff97 	bl	8004b50 <_ai_platform_acquire_crc>
 8005c22:	4b5e      	ldr	r3, [pc, #376]	; (8005d9c <ai_platform_network_init+0x1c4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d010      	beq.n	8005c52 <ai_platform_network_init+0x7a>
 8005c30:	4a5b      	ldr	r2, [pc, #364]	; (8005da0 <ai_platform_network_init+0x1c8>)
 8005c32:	2301      	movs	r3, #1
 8005c34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1fb      	bne.n	8005c38 <ai_platform_network_init+0x60>
 8005c40:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <ai_platform_network_init+0x1cc>)
 8005c42:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c4a:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <ai_platform_network_init+0x1d0>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d00d      	beq.n	8005c6c <ai_platform_network_init+0x94>
 8005c50:	e7fe      	b.n	8005c50 <ai_platform_network_init+0x78>
 8005c52:	4a56      	ldr	r2, [pc, #344]	; (8005dac <ai_platform_network_init+0x1d4>)
 8005c54:	2301      	movs	r3, #1
 8005c56:	6093      	str	r3, [r2, #8]
 8005c58:	6893      	ldr	r3, [r2, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1fc      	bne.n	8005c58 <ai_platform_network_init+0x80>
 8005c5e:	4b51      	ldr	r3, [pc, #324]	; (8005da4 <ai_platform_network_init+0x1cc>)
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	4b50      	ldr	r3, [pc, #320]	; (8005da8 <ai_platform_network_init+0x1d0>)
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d000      	beq.n	8005c6c <ai_platform_network_init+0x94>
 8005c6a:	e7fe      	b.n	8005c6a <ai_platform_network_init+0x92>
 8005c6c:	f7fe ff72 	bl	8004b54 <_ai_platform_release_crc>
 8005c70:	2600      	movs	r6, #0
 8005c72:	4630      	mov	r0, r6
 8005c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c78:	4a4c      	ldr	r2, [pc, #304]	; (8005dac <ai_platform_network_init+0x1d4>)
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	6093      	str	r3, [r2, #8]
 8005c7e:	6893      	ldr	r3, [r2, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1fc      	bne.n	8005c7e <ai_platform_network_init+0xa6>
 8005c84:	4b47      	ldr	r3, [pc, #284]	; (8005da4 <ai_platform_network_init+0x1cc>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	4b47      	ldr	r3, [pc, #284]	; (8005da8 <ai_platform_network_init+0x1d0>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d11c      	bne.n	8005cca <ai_platform_network_init+0xf2>
 8005c90:	f7fe ff60 	bl	8004b54 <_ai_platform_release_crc>
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	d06f      	beq.n	8005d78 <ai_platform_network_init+0x1a0>
 8005c98:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <ai_platform_network_init+0x1d8>)
 8005c9a:	6832      	ldr	r2, [r6, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d115      	bne.n	8005ccc <ai_platform_network_init+0xf4>
 8005ca0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8005ca4:	6933      	ldr	r3, [r6, #16]
 8005ca6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8005caa:	89f7      	ldrh	r7, [r6, #14]
 8005cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cae:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	84e7      	strh	r7, [r4, #38]	; 0x26
 8005cb6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8005cba:	60e3      	str	r3, [r4, #12]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4626      	mov	r6, r4
 8005cc0:	f000 fdca 	bl	8006858 <ai_layers_init_all>
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cca:	e7fe      	b.n	8005cca <ai_platform_network_init+0xf2>
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4635      	mov	r5, r6
 8005cd2:	6876      	ldr	r6, [r6, #4]
 8005cd4:	f7fe fe5a 	bl	800498c <ai_buffer_get_size>
 8005cd8:	f105 081c 	add.w	r8, r5, #28
 8005cdc:	4681      	mov	r9, r0
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	6a2f      	ldr	r7, [r5, #32]
 8005ce4:	f7fe fe52 	bl	800498c <ai_buffer_get_size>
 8005ce8:	f1b9 0f00 	cmp.w	r9, #0
 8005cec:	d025      	beq.n	8005d3a <ai_platform_network_init+0x162>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4696      	mov	lr, r2
 8005cf2:	bb30      	cbnz	r0, 8005d42 <ai_platform_network_init+0x16a>
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	b376      	cbz	r6, 8005d58 <ai_platform_network_init+0x180>
 8005cfa:	8be3      	ldrh	r3, [r4, #30]
 8005cfc:	4573      	cmp	r3, lr
 8005cfe:	d323      	bcc.n	8005d48 <ai_platform_network_init+0x170>
 8005d00:	b142      	cbz	r2, 8005d14 <ai_platform_network_init+0x13c>
 8005d02:	46ac      	mov	ip, r5
 8005d04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005d08:	6a25      	ldr	r5, [r4, #32]
 8005d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d0c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005d10:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005d14:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005d16:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42bb      	cmp	r3, r7
 8005d1e:	83a6      	strh	r6, [r4, #28]
 8005d20:	d323      	bcc.n	8005d6a <ai_platform_network_init+0x192>
 8005d22:	b37f      	cbz	r7, 8005d84 <ai_platform_network_init+0x1ac>
 8005d24:	46c4      	mov	ip, r8
 8005d26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005d2a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005d32:	46b6      	mov	lr, r6
 8005d34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005d38:	e7bb      	b.n	8005cb2 <ai_platform_network_init+0xda>
 8005d3a:	464a      	mov	r2, r9
 8005d3c:	46ce      	mov	lr, r9
 8005d3e:	464d      	mov	r5, r9
 8005d40:	e7d7      	b.n	8005cf2 <ai_platform_network_init+0x11a>
 8005d42:	b30f      	cbz	r7, 8005d88 <ai_platform_network_init+0x1b0>
 8005d44:	2701      	movs	r7, #1
 8005d46:	e7d7      	b.n	8005cf8 <ai_platform_network_init+0x120>
 8005d48:	2212      	movs	r2, #18
 8005d4a:	2116      	movs	r1, #22
 8005d4c:	f104 0010 	add.w	r0, r4, #16
 8005d50:	f000 fd02 	bl	8006758 <core_set_error>
 8005d54:	2600      	movs	r6, #0
 8005d56:	e78c      	b.n	8005c72 <ai_platform_network_init+0x9a>
 8005d58:	f1b9 0f00 	cmp.w	r9, #0
 8005d5c:	d0cd      	beq.n	8005cfa <ai_platform_network_init+0x122>
 8005d5e:	2110      	movs	r1, #16
 8005d60:	2212      	movs	r2, #18
 8005d62:	1860      	adds	r0, r4, r1
 8005d64:	f000 fcf8 	bl	8006758 <core_set_error>
 8005d68:	e783      	b.n	8005c72 <ai_platform_network_init+0x9a>
 8005d6a:	2213      	movs	r2, #19
 8005d6c:	2116      	movs	r1, #22
 8005d6e:	f104 0010 	add.w	r0, r4, #16
 8005d72:	f000 fcf1 	bl	8006758 <core_set_error>
 8005d76:	e77c      	b.n	8005c72 <ai_platform_network_init+0x9a>
 8005d78:	2110      	movs	r1, #16
 8005d7a:	2211      	movs	r2, #17
 8005d7c:	1860      	adds	r0, r4, r1
 8005d7e:	f000 fceb 	bl	8006758 <core_set_error>
 8005d82:	e776      	b.n	8005c72 <ai_platform_network_init+0x9a>
 8005d84:	46be      	mov	lr, r7
 8005d86:	e794      	b.n	8005cb2 <ai_platform_network_init+0xda>
 8005d88:	2110      	movs	r1, #16
 8005d8a:	2213      	movs	r2, #19
 8005d8c:	1860      	adds	r0, r4, r1
 8005d8e:	f000 fce3 	bl	8006758 <core_set_error>
 8005d92:	463e      	mov	r6, r7
 8005d94:	e76d      	b.n	8005c72 <ai_platform_network_init+0x9a>
 8005d96:	bf00      	nop
 8005d98:	a1c00100 	.word	0xa1c00100
 8005d9c:	e0042000 	.word	0xe0042000
 8005da0:	58024000 	.word	0x58024000
 8005da4:	f407a5c2 	.word	0xf407a5c2
 8005da8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005dac:	40023000 	.word	0x40023000
 8005db0:	a1facade 	.word	0xa1facade

08005db4 <ai_platform_network_post_init>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	b1f0      	cbz	r0, 8005df6 <ai_platform_network_post_init+0x42>
 8005db8:	4b3c      	ldr	r3, [pc, #240]	; (8005eac <ai_platform_network_post_init+0xf8>)
 8005dba:	6802      	ldr	r2, [r0, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	d119      	bne.n	8005df6 <ai_platform_network_post_init+0x42>
 8005dc2:	f7fe fec5 	bl	8004b50 <_ai_platform_acquire_crc>
 8005dc6:	4b3a      	ldr	r3, [pc, #232]	; (8005eb0 <ai_platform_network_post_init+0xfc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd2:	d03b      	beq.n	8005e4c <ai_platform_network_post_init+0x98>
 8005dd4:	4a37      	ldr	r2, [pc, #220]	; (8005eb4 <ai_platform_network_post_init+0x100>)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ddc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1fb      	bne.n	8005ddc <ai_platform_network_post_init+0x28>
 8005de4:	4b34      	ldr	r3, [pc, #208]	; (8005eb8 <ai_platform_network_post_init+0x104>)
 8005de6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005dea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <ai_platform_network_post_init+0x108>)
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d037      	beq.n	8005e64 <ai_platform_network_post_init+0xb0>
 8005df4:	e7fe      	b.n	8005df4 <ai_platform_network_post_init+0x40>
 8005df6:	f7fe feab 	bl	8004b50 <_ai_platform_acquire_crc>
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <ai_platform_network_post_init+0xfc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d010      	beq.n	8005e2a <ai_platform_network_post_init+0x76>
 8005e08:	4a2a      	ldr	r2, [pc, #168]	; (8005eb4 <ai_platform_network_post_init+0x100>)
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1fb      	bne.n	8005e10 <ai_platform_network_post_init+0x5c>
 8005e18:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <ai_platform_network_post_init+0x104>)
 8005e1a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005e1e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e22:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <ai_platform_network_post_init+0x108>)
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d00d      	beq.n	8005e44 <ai_platform_network_post_init+0x90>
 8005e28:	e7fe      	b.n	8005e28 <ai_platform_network_post_init+0x74>
 8005e2a:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <ai_platform_network_post_init+0x10c>)
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	6093      	str	r3, [r2, #8]
 8005e30:	6893      	ldr	r3, [r2, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1fc      	bne.n	8005e30 <ai_platform_network_post_init+0x7c>
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <ai_platform_network_post_init+0x104>)
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <ai_platform_network_post_init+0x108>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d000      	beq.n	8005e44 <ai_platform_network_post_init+0x90>
 8005e42:	e7fe      	b.n	8005e42 <ai_platform_network_post_init+0x8e>
 8005e44:	f7fe fe86 	bl	8004b54 <_ai_platform_release_crc>
 8005e48:	2000      	movs	r0, #0
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <ai_platform_network_post_init+0x10c>)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	6093      	str	r3, [r2, #8]
 8005e52:	6893      	ldr	r3, [r2, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1fc      	bne.n	8005e52 <ai_platform_network_post_init+0x9e>
 8005e58:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <ai_platform_network_post_init+0x104>)
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <ai_platform_network_post_init+0x108>)
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d11a      	bne.n	8005e9a <ai_platform_network_post_init+0xe6>
 8005e64:	f7fe fe76 	bl	8004b54 <_ai_platform_release_crc>
 8005e68:	68e3      	ldr	r3, [r4, #12]
 8005e6a:	f013 0502 	ands.w	r5, r3, #2
 8005e6e:	d015      	beq.n	8005e9c <ai_platform_network_post_init+0xe8>
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fcff 	bl	8006874 <ai_layers_post_init_all>
 8005e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e78:	b16b      	cbz	r3, 8005e96 <ai_platform_network_post_init+0xe2>
 8005e7a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005e7c:	e007      	b.n	8005e8e <ai_platform_network_post_init+0xda>
 8005e7e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8005e82:	4798      	blx	r3
 8005e84:	692b      	ldr	r3, [r5, #16]
 8005e86:	42ab      	cmp	r3, r5
 8005e88:	d005      	beq.n	8005e96 <ai_platform_network_post_init+0xe2>
 8005e8a:	b123      	cbz	r3, 8005e96 <ai_platform_network_post_init+0xe2>
 8005e8c:	461d      	mov	r5, r3
 8005e8e:	4629      	mov	r1, r5
 8005e90:	2000      	movs	r0, #0
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	d1f3      	bne.n	8005e7e <ai_platform_network_post_init+0xca>
 8005e96:	2001      	movs	r0, #1
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
 8005e9a:	e7fe      	b.n	8005e9a <ai_platform_network_post_init+0xe6>
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	2111      	movs	r1, #17
 8005ea0:	18a0      	adds	r0, r4, r2
 8005ea2:	f000 fc59 	bl	8006758 <core_set_error>
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	a1c00100 	.word	0xa1c00100
 8005eb0:	e0042000 	.word	0xe0042000
 8005eb4:	58024000 	.word	0x58024000
 8005eb8:	f407a5c2 	.word	0xf407a5c2
 8005ebc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ec0:	40023000 	.word	0x40023000

08005ec4 <ai_platform_network_process>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b085      	sub	sp, #20
 8005ecc:	4693      	mov	fp, r2
 8005ece:	4605      	mov	r5, r0
 8005ed0:	b120      	cbz	r0, 8005edc <ai_platform_network_process+0x18>
 8005ed2:	4bb8      	ldr	r3, [pc, #736]	; (80061b4 <ai_platform_network_process+0x2f0>)
 8005ed4:	6802      	ldr	r2, [r0, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf18      	it	ne
 8005eda:	2500      	movne	r5, #0
 8005edc:	f7fe fe38 	bl	8004b50 <_ai_platform_acquire_crc>
 8005ee0:	4bb5      	ldr	r3, [pc, #724]	; (80061b8 <ai_platform_network_process+0x2f4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d010      	beq.n	8005f10 <ai_platform_network_process+0x4c>
 8005eee:	4ab3      	ldr	r2, [pc, #716]	; (80061bc <ai_platform_network_process+0x2f8>)
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ef6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1fb      	bne.n	8005ef6 <ai_platform_network_process+0x32>
 8005efe:	4bb0      	ldr	r3, [pc, #704]	; (80061c0 <ai_platform_network_process+0x2fc>)
 8005f00:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f08:	4bae      	ldr	r3, [pc, #696]	; (80061c4 <ai_platform_network_process+0x300>)
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d00d      	beq.n	8005f2a <ai_platform_network_process+0x66>
 8005f0e:	e7fe      	b.n	8005f0e <ai_platform_network_process+0x4a>
 8005f10:	4aad      	ldr	r2, [pc, #692]	; (80061c8 <ai_platform_network_process+0x304>)
 8005f12:	2301      	movs	r3, #1
 8005f14:	6093      	str	r3, [r2, #8]
 8005f16:	6893      	ldr	r3, [r2, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1fc      	bne.n	8005f16 <ai_platform_network_process+0x52>
 8005f1c:	4ba8      	ldr	r3, [pc, #672]	; (80061c0 <ai_platform_network_process+0x2fc>)
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	4ba8      	ldr	r3, [pc, #672]	; (80061c4 <ai_platform_network_process+0x300>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	f040 812c 	bne.w	8006182 <ai_platform_network_process+0x2be>
 8005f2a:	f7fe fe13 	bl	8004b54 <_ai_platform_release_crc>
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	f000 8154 	beq.w	80061dc <ai_platform_network_process+0x318>
 8005f34:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8124 	beq.w	8006184 <ai_platform_network_process+0x2c0>
 8005f3c:	68eb      	ldr	r3, [r5, #12]
 8005f3e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2700      	movs	r7, #0
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	616f      	str	r7, [r5, #20]
 8005f4c:	f040 813e 	bne.w	80061cc <ai_platform_network_process+0x308>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	f000 811d 	beq.w	8006190 <ai_platform_network_process+0x2cc>
 8005f56:	f1ba 0f00 	cmp.w	sl, #0
 8005f5a:	f000 8119 	beq.w	8006190 <ai_platform_network_process+0x2cc>
 8005f5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8114 	beq.w	8006190 <ai_platform_network_process+0x2cc>
 8005f68:	69b3      	ldr	r3, [r6, #24]
 8005f6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8005f74:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d072      	beq.n	8006062 <ai_platform_network_process+0x19e>
 8005f7c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d06e      	beq.n	8006062 <ai_platform_network_process+0x19e>
 8005f84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f88:	f8d3 9000 	ldr.w	r9, [r3]
 8005f8c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005f90:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005f94:	f000 81de 	beq.w	8006354 <ai_platform_network_process+0x490>
 8005f98:	69a3      	ldr	r3, [r4, #24]
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	685d      	ldr	r5, [r3, #4]
 8005fa0:	f7fe fcf4 	bl	800498c <ai_buffer_get_size>
 8005fa4:	4285      	cmp	r5, r0
 8005fa6:	f0c0 811b 	bcc.w	80061e0 <ai_platform_network_process+0x31c>
 8005faa:	68e0      	ldr	r0, [r4, #12]
 8005fac:	69b1      	ldr	r1, [r6, #24]
 8005fae:	68c2      	ldr	r2, [r0, #12]
 8005fb0:	68cb      	ldr	r3, [r1, #12]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	f040 8114 	bne.w	80061e0 <ai_platform_network_process+0x31c>
 8005fb8:	6882      	ldr	r2, [r0, #8]
 8005fba:	688b      	ldr	r3, [r1, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	f040 810f 	bne.w	80061e0 <ai_platform_network_process+0x31c>
 8005fc2:	6842      	ldr	r2, [r0, #4]
 8005fc4:	684b      	ldr	r3, [r1, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	f040 810a 	bne.w	80061e0 <ai_platform_network_process+0x31c>
 8005fcc:	69a3      	ldr	r3, [r4, #24]
 8005fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fd2:	f002 fe93 	bl	8008cfc <ai_array_get_data_byte_size>
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f002 feb9 	bl	8008d50 <get_tensor_byte_size>
 8005fde:	4285      	cmp	r5, r0
 8005fe0:	f0c0 80fe 	bcc.w	80061e0 <ai_platform_network_process+0x31c>
 8005fe4:	69a3      	ldr	r3, [r4, #24]
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	f002 fdf4 	bl	8008bd4 <ai_array_to_buffer_fmt>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	4058      	eors	r0, r3
 8005ff0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005ff4:	f040 81b9 	bne.w	800636a <ai_platform_network_process+0x4a6>
 8005ff8:	6873      	ldr	r3, [r6, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 81ac 	beq.w	8006358 <ai_platform_network_process+0x494>
 8006000:	69b3      	ldr	r3, [r6, #24]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 819c 	beq.w	8006342 <ai_platform_network_process+0x47e>
 800600a:	9a01      	ldr	r2, [sp, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	bf38      	it	cc
 8006010:	461a      	movcc	r2, r3
 8006012:	4620      	mov	r0, r4
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	f002 fe9b 	bl	8008d50 <get_tensor_byte_size>
 800601a:	f8c8 0008 	str.w	r0, [r8, #8]
 800601e:	69b3      	ldr	r3, [r6, #24]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	fb00 f303 	mul.w	r3, r0, r3
 8006026:	f8c8 300c 	str.w	r3, [r8, #12]
 800602a:	6871      	ldr	r1, [r6, #4]
 800602c:	f8c8 1004 	str.w	r1, [r8, #4]
 8006030:	440b      	add	r3, r1
 8006032:	f849 300b 	str.w	r3, [r9, fp]
 8006036:	69a0      	ldr	r0, [r4, #24]
 8006038:	6803      	ldr	r3, [r0, #0]
 800603a:	009a      	lsls	r2, r3, #2
 800603c:	f107 0701 	add.w	r7, r7, #1
 8006040:	f106 061c 	add.w	r6, r6, #28
 8006044:	f100 80af 	bmi.w	80061a6 <ai_platform_network_process+0x2e2>
 8006048:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	4419      	add	r1, r3
 8006050:	6081      	str	r1, [r0, #8]
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	f8ba 3000 	ldrh.w	r3, [sl]
 800605e:	42bb      	cmp	r3, r7
 8006060:	d888      	bhi.n	8005f74 <ai_platform_network_process+0xb0>
 8006062:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8006066:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006068:	f1bb 0f00 	cmp.w	fp, #0
 800606c:	f000 8186 	beq.w	800637c <ai_platform_network_process+0x4b8>
 8006070:	2a01      	cmp	r2, #1
 8006072:	f240 815e 	bls.w	8006332 <ai_platform_network_process+0x46e>
 8006076:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800607a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8157 	beq.w	8006332 <ai_platform_network_process+0x46e>
 8006084:	465e      	mov	r6, fp
 8006086:	2700      	movs	r7, #0
 8006088:	462c      	mov	r4, r5
 800608a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80b4 	beq.w	80061fc <ai_platform_network_process+0x338>
 8006094:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006098:	2d00      	cmp	r5, #0
 800609a:	f000 80af 	beq.w	80061fc <ai_platform_network_process+0x338>
 800609e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80060a2:	f8d3 8000 	ldr.w	r8, [r3]
 80060a6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80060aa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80060ae:	f000 8171 	beq.w	8006394 <ai_platform_network_process+0x4d0>
 80060b2:	69ab      	ldr	r3, [r5, #24]
 80060b4:	2101      	movs	r1, #1
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	9302      	str	r3, [sp, #8]
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7fe fc66 	bl	800498c <ai_buffer_get_size>
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	4283      	cmp	r3, r0
 80060c4:	f0c0 8134 	bcc.w	8006330 <ai_platform_network_process+0x46c>
 80060c8:	68e8      	ldr	r0, [r5, #12]
 80060ca:	69b1      	ldr	r1, [r6, #24]
 80060cc:	68c2      	ldr	r2, [r0, #12]
 80060ce:	68cb      	ldr	r3, [r1, #12]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	f040 812d 	bne.w	8006330 <ai_platform_network_process+0x46c>
 80060d6:	6882      	ldr	r2, [r0, #8]
 80060d8:	688b      	ldr	r3, [r1, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	f040 8128 	bne.w	8006330 <ai_platform_network_process+0x46c>
 80060e0:	6842      	ldr	r2, [r0, #4]
 80060e2:	684b      	ldr	r3, [r1, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f040 8123 	bne.w	8006330 <ai_platform_network_process+0x46c>
 80060ea:	69ab      	ldr	r3, [r5, #24]
 80060ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060f0:	f002 fe04 	bl	8008cfc <ai_array_get_data_byte_size>
 80060f4:	9002      	str	r0, [sp, #8]
 80060f6:	4628      	mov	r0, r5
 80060f8:	f002 fe2a 	bl	8008d50 <get_tensor_byte_size>
 80060fc:	9b02      	ldr	r3, [sp, #8]
 80060fe:	4283      	cmp	r3, r0
 8006100:	f0c0 8116 	bcc.w	8006330 <ai_platform_network_process+0x46c>
 8006104:	69ab      	ldr	r3, [r5, #24]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	f002 fd64 	bl	8008bd4 <ai_array_to_buffer_fmt>
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	4058      	eors	r0, r3
 8006110:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006114:	f040 8136 	bne.w	8006384 <ai_platform_network_process+0x4c0>
 8006118:	6873      	ldr	r3, [r6, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 814d 	beq.w	80063ba <ai_platform_network_process+0x4f6>
 8006120:	69b3      	ldr	r3, [r6, #24]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 813f 	beq.w	80063a8 <ai_platform_network_process+0x4e4>
 800612a:	9a01      	ldr	r2, [sp, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	bf38      	it	cc
 8006130:	461a      	movcc	r2, r3
 8006132:	4628      	mov	r0, r5
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	f002 fe0b 	bl	8008d50 <get_tensor_byte_size>
 800613a:	f8ca 0008 	str.w	r0, [sl, #8]
 800613e:	69b3      	ldr	r3, [r6, #24]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	fb00 f303 	mul.w	r3, r0, r3
 8006146:	f8ca 300c 	str.w	r3, [sl, #12]
 800614a:	6871      	ldr	r1, [r6, #4]
 800614c:	f8ca 1004 	str.w	r1, [sl, #4]
 8006150:	440b      	add	r3, r1
 8006152:	f848 300b 	str.w	r3, [r8, fp]
 8006156:	69a8      	ldr	r0, [r5, #24]
 8006158:	6803      	ldr	r3, [r0, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	f107 0701 	add.w	r7, r7, #1
 8006160:	f106 061c 	add.w	r6, r6, #28
 8006164:	d445      	bmi.n	80061f2 <ai_platform_network_process+0x32e>
 8006166:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	4419      	add	r1, r3
 800616e:	6081      	str	r1, [r0, #8]
 8006170:	69ab      	ldr	r3, [r5, #24]
 8006172:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800617c:	429f      	cmp	r7, r3
 800617e:	d384      	bcc.n	800608a <ai_platform_network_process+0x1c6>
 8006180:	e03c      	b.n	80061fc <ai_platform_network_process+0x338>
 8006182:	e7fe      	b.n	8006182 <ai_platform_network_process+0x2be>
 8006184:	68ea      	ldr	r2, [r5, #12]
 8006186:	616b      	str	r3, [r5, #20]
 8006188:	f002 0203 	and.w	r2, r2, #3
 800618c:	2a03      	cmp	r2, #3
 800618e:	d11d      	bne.n	80061cc <ai_platform_network_process+0x308>
 8006190:	2217      	movs	r2, #23
 8006192:	2112      	movs	r1, #18
 8006194:	f105 0010 	add.w	r0, r5, #16
 8006198:	f000 fade 	bl	8006758 <core_set_error>
 800619c:	2400      	movs	r4, #0
 800619e:	4620      	mov	r0, r4
 80061a0:	b005      	add	sp, #20
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80061aa:	429f      	cmp	r7, r3
 80061ac:	f4ff aee2 	bcc.w	8005f74 <ai_platform_network_process+0xb0>
 80061b0:	e757      	b.n	8006062 <ai_platform_network_process+0x19e>
 80061b2:	bf00      	nop
 80061b4:	a1c00100 	.word	0xa1c00100
 80061b8:	e0042000 	.word	0xe0042000
 80061bc:	58024000 	.word	0x58024000
 80061c0:	f407a5c2 	.word	0xf407a5c2
 80061c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80061c8:	40023000 	.word	0x40023000
 80061cc:	2230      	movs	r2, #48	; 0x30
 80061ce:	2111      	movs	r1, #17
 80061d0:	f105 0010 	add.w	r0, r5, #16
 80061d4:	f000 fac0 	bl	8006758 <core_set_error>
 80061d8:	2400      	movs	r4, #0
 80061da:	e7e0      	b.n	800619e <ai_platform_network_process+0x2da>
 80061dc:	462c      	mov	r4, r5
 80061de:	e7de      	b.n	800619e <ai_platform_network_process+0x2da>
 80061e0:	9d02      	ldr	r5, [sp, #8]
 80061e2:	2218      	movs	r2, #24
 80061e4:	2112      	movs	r1, #18
 80061e6:	f105 0010 	add.w	r0, r5, #16
 80061ea:	f000 fab5 	bl	8006758 <core_set_error>
 80061ee:	2400      	movs	r4, #0
 80061f0:	e7d5      	b.n	800619e <ai_platform_network_process+0x2da>
 80061f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80061f6:	429f      	cmp	r7, r3
 80061f8:	f4ff af47 	bcc.w	800608a <ai_platform_network_process+0x1c6>
 80061fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006200:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006202:	82a3      	strh	r3, [r4, #20]
 8006204:	4625      	mov	r5, r4
 8006206:	2a00      	cmp	r2, #0
 8006208:	f040 808c 	bne.w	8006324 <ai_platform_network_process+0x460>
 800620c:	4616      	mov	r6, r2
 800620e:	4617      	mov	r7, r2
 8006210:	8aec      	ldrh	r4, [r5, #22]
 8006212:	429c      	cmp	r4, r3
 8006214:	bf38      	it	cc
 8006216:	46ab      	movcc	fp, r5
 8006218:	d2c1      	bcs.n	800619e <ai_platform_network_process+0x2da>
 800621a:	2e00      	cmp	r6, #0
 800621c:	d030      	beq.n	8006280 <ai_platform_network_process+0x3bc>
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	e014      	b.n	800624e <ai_platform_network_process+0x38a>
 8006224:	6882      	ldr	r2, [r0, #8]
 8006226:	68c5      	ldr	r5, [r0, #12]
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	1b52      	subs	r2, r2, r5
 800622c:	4413      	add	r3, r2
 800622e:	6083      	str	r3, [r0, #8]
 8006230:	698b      	ldr	r3, [r1, #24]
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800623a:	f859 200a 	ldr.w	r2, [r9, sl]
 800623e:	440b      	add	r3, r1
 8006240:	4293      	cmp	r3, r2
 8006242:	bf24      	itt	cs
 8006244:	68e3      	ldrcs	r3, [r4, #12]
 8006246:	1ad3      	subcs	r3, r2, r3
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	f108 0801 	add.w	r8, r8, #1
 800624e:	8833      	ldrh	r3, [r6, #0]
 8006250:	4543      	cmp	r3, r8
 8006252:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006256:	d913      	bls.n	8006280 <ai_platform_network_process+0x3bc>
 8006258:	6873      	ldr	r3, [r6, #4]
 800625a:	b18b      	cbz	r3, 8006280 <ai_platform_network_process+0x3bc>
 800625c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006260:	b171      	cbz	r1, 8006280 <ai_platform_network_process+0x3bc>
 8006262:	6988      	ldr	r0, [r1, #24]
 8006264:	68b2      	ldr	r2, [r6, #8]
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	f8d2 9000 	ldr.w	r9, [r2]
 800626c:	009d      	lsls	r5, r3, #2
 800626e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006272:	d5d7      	bpl.n	8006224 <ai_platform_network_process+0x360>
 8006274:	6881      	ldr	r1, [r0, #8]
 8006276:	68a2      	ldr	r2, [r4, #8]
 8006278:	6860      	ldr	r0, [r4, #4]
 800627a:	f002 fc25 	bl	8008ac8 <st_int8_copy>
 800627e:	e7da      	b.n	8006236 <ai_platform_network_process+0x372>
 8006280:	4658      	mov	r0, fp
 8006282:	f000 fb0b 	bl	800689c <ai_layers_forward_all>
 8006286:	2f00      	cmp	r7, #0
 8006288:	d03d      	beq.n	8006306 <ai_platform_network_process+0x442>
 800628a:	2400      	movs	r4, #0
 800628c:	e016      	b.n	80062bc <ai_platform_network_process+0x3f8>
 800628e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006292:	f859 100a 	ldr.w	r1, [r9, sl]
 8006296:	4413      	add	r3, r2
 8006298:	428b      	cmp	r3, r1
 800629a:	bf24      	itt	cs
 800629c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80062a0:	1acb      	subcs	r3, r1, r3
 80062a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80062a6:	6981      	ldr	r1, [r0, #24]
 80062a8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80062ac:	1b52      	subs	r2, r2, r5
 80062ae:	4413      	add	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
 80062b2:	6983      	ldr	r3, [r0, #24]
 80062b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	3401      	adds	r4, #1
 80062bc:	883b      	ldrh	r3, [r7, #0]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	d921      	bls.n	8006306 <ai_platform_network_process+0x442>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	b1fb      	cbz	r3, 8006306 <ai_platform_network_process+0x442>
 80062c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80062ca:	b1e0      	cbz	r0, 8006306 <ai_platform_network_process+0x442>
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	6983      	ldr	r3, [r0, #24]
 80062d0:	f8d2 9000 	ldr.w	r9, [r2]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	0092      	lsls	r2, r2, #2
 80062d8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80062dc:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80062e0:	d5d5      	bpl.n	800628e <ai_platform_network_process+0x3ca>
 80062e2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80062e6:	6898      	ldr	r0, [r3, #8]
 80062e8:	f002 fbee 	bl	8008ac8 <st_int8_copy>
 80062ec:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80062f0:	f859 200a 	ldr.w	r2, [r9, sl]
 80062f4:	440b      	add	r3, r1
 80062f6:	4293      	cmp	r3, r2
 80062f8:	bf24      	itt	cs
 80062fa:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80062fe:	1ad3      	subcs	r3, r2, r3
 8006300:	f8c8 3004 	str.w	r3, [r8, #4]
 8006304:	e7d9      	b.n	80062ba <ai_platform_network_process+0x3f6>
 8006306:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800630a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800630e:	3401      	adds	r4, #1
 8006310:	b2a4      	uxth	r4, r4
 8006312:	42a3      	cmp	r3, r4
 8006314:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006318:	f63f af7f 	bhi.w	800621a <ai_platform_network_process+0x356>
 800631c:	4620      	mov	r0, r4
 800631e:	b005      	add	sp, #20
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	2a01      	cmp	r2, #1
 8006326:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006328:	d03c      	beq.n	80063a4 <ai_platform_network_process+0x4e0>
 800632a:	f106 070c 	add.w	r7, r6, #12
 800632e:	e76f      	b.n	8006210 <ai_platform_network_process+0x34c>
 8006330:	4625      	mov	r5, r4
 8006332:	2218      	movs	r2, #24
 8006334:	2113      	movs	r1, #19
 8006336:	f105 0010 	add.w	r0, r5, #16
 800633a:	f000 fa0d 	bl	8006758 <core_set_error>
 800633e:	2400      	movs	r4, #0
 8006340:	e72d      	b.n	800619e <ai_platform_network_process+0x2da>
 8006342:	9d02      	ldr	r5, [sp, #8]
 8006344:	4604      	mov	r4, r0
 8006346:	2221      	movs	r2, #33	; 0x21
 8006348:	2112      	movs	r1, #18
 800634a:	f105 0010 	add.w	r0, r5, #16
 800634e:	f000 fa03 	bl	8006758 <core_set_error>
 8006352:	e724      	b.n	800619e <ai_platform_network_process+0x2da>
 8006354:	9d02      	ldr	r5, [sp, #8]
 8006356:	e71b      	b.n	8006190 <ai_platform_network_process+0x2cc>
 8006358:	9d02      	ldr	r5, [sp, #8]
 800635a:	4604      	mov	r4, r0
 800635c:	2217      	movs	r2, #23
 800635e:	2112      	movs	r1, #18
 8006360:	f105 0010 	add.w	r0, r5, #16
 8006364:	f000 f9f8 	bl	8006758 <core_set_error>
 8006368:	e719      	b.n	800619e <ai_platform_network_process+0x2da>
 800636a:	9d02      	ldr	r5, [sp, #8]
 800636c:	2219      	movs	r2, #25
 800636e:	2112      	movs	r1, #18
 8006370:	f105 0010 	add.w	r0, r5, #16
 8006374:	f000 f9f0 	bl	8006758 <core_set_error>
 8006378:	2400      	movs	r4, #0
 800637a:	e710      	b.n	800619e <ai_platform_network_process+0x2da>
 800637c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006380:	82ab      	strh	r3, [r5, #20]
 8006382:	e740      	b.n	8006206 <ai_platform_network_process+0x342>
 8006384:	f104 0010 	add.w	r0, r4, #16
 8006388:	2219      	movs	r2, #25
 800638a:	2113      	movs	r1, #19
 800638c:	f000 f9e4 	bl	8006758 <core_set_error>
 8006390:	2400      	movs	r4, #0
 8006392:	e704      	b.n	800619e <ai_platform_network_process+0x2da>
 8006394:	f104 0010 	add.w	r0, r4, #16
 8006398:	2217      	movs	r2, #23
 800639a:	2113      	movs	r1, #19
 800639c:	f000 f9dc 	bl	8006758 <core_set_error>
 80063a0:	4654      	mov	r4, sl
 80063a2:	e6fc      	b.n	800619e <ai_platform_network_process+0x2da>
 80063a4:	2700      	movs	r7, #0
 80063a6:	e733      	b.n	8006210 <ai_platform_network_process+0x34c>
 80063a8:	4625      	mov	r5, r4
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	4604      	mov	r4, r0
 80063ae:	2113      	movs	r1, #19
 80063b0:	f105 0010 	add.w	r0, r5, #16
 80063b4:	f000 f9d0 	bl	8006758 <core_set_error>
 80063b8:	e6f1      	b.n	800619e <ai_platform_network_process+0x2da>
 80063ba:	4625      	mov	r5, r4
 80063bc:	2217      	movs	r2, #23
 80063be:	4604      	mov	r4, r0
 80063c0:	2113      	movs	r1, #19
 80063c2:	f105 0010 	add.w	r0, r5, #16
 80063c6:	f000 f9c7 	bl	8006758 <core_set_error>
 80063ca:	e6e8      	b.n	800619e <ai_platform_network_process+0x2da>

080063cc <ai_platform_observer_node_info>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	b1f8      	cbz	r0, 8006410 <ai_platform_observer_node_info+0x44>
 80063d0:	4b4f      	ldr	r3, [pc, #316]	; (8006510 <ai_platform_observer_node_info+0x144>)
 80063d2:	6802      	ldr	r2, [r0, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	4604      	mov	r4, r0
 80063d8:	d11a      	bne.n	8006410 <ai_platform_observer_node_info+0x44>
 80063da:	460d      	mov	r5, r1
 80063dc:	f7fe fbb8 	bl	8004b50 <_ai_platform_acquire_crc>
 80063e0:	4b4c      	ldr	r3, [pc, #304]	; (8006514 <ai_platform_observer_node_info+0x148>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d03b      	beq.n	8006466 <ai_platform_observer_node_info+0x9a>
 80063ee:	4a4a      	ldr	r2, [pc, #296]	; (8006518 <ai_platform_observer_node_info+0x14c>)
 80063f0:	2301      	movs	r3, #1
 80063f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80063f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1fb      	bne.n	80063f6 <ai_platform_observer_node_info+0x2a>
 80063fe:	4b47      	ldr	r3, [pc, #284]	; (800651c <ai_platform_observer_node_info+0x150>)
 8006400:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006404:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <ai_platform_observer_node_info+0x154>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d037      	beq.n	800647e <ai_platform_observer_node_info+0xb2>
 800640e:	e7fe      	b.n	800640e <ai_platform_observer_node_info+0x42>
 8006410:	f7fe fb9e 	bl	8004b50 <_ai_platform_acquire_crc>
 8006414:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <ai_platform_observer_node_info+0x148>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d010      	beq.n	8006444 <ai_platform_observer_node_info+0x78>
 8006422:	4a3d      	ldr	r2, [pc, #244]	; (8006518 <ai_platform_observer_node_info+0x14c>)
 8006424:	2301      	movs	r3, #1
 8006426:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800642a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1fb      	bne.n	800642a <ai_platform_observer_node_info+0x5e>
 8006432:	4b3a      	ldr	r3, [pc, #232]	; (800651c <ai_platform_observer_node_info+0x150>)
 8006434:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006438:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800643c:	4b38      	ldr	r3, [pc, #224]	; (8006520 <ai_platform_observer_node_info+0x154>)
 800643e:	429a      	cmp	r2, r3
 8006440:	d00d      	beq.n	800645e <ai_platform_observer_node_info+0x92>
 8006442:	e7fe      	b.n	8006442 <ai_platform_observer_node_info+0x76>
 8006444:	4a37      	ldr	r2, [pc, #220]	; (8006524 <ai_platform_observer_node_info+0x158>)
 8006446:	2301      	movs	r3, #1
 8006448:	6093      	str	r3, [r2, #8]
 800644a:	6893      	ldr	r3, [r2, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1fc      	bne.n	800644a <ai_platform_observer_node_info+0x7e>
 8006450:	4b32      	ldr	r3, [pc, #200]	; (800651c <ai_platform_observer_node_info+0x150>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	4b32      	ldr	r3, [pc, #200]	; (8006520 <ai_platform_observer_node_info+0x154>)
 8006458:	429a      	cmp	r2, r3
 800645a:	d000      	beq.n	800645e <ai_platform_observer_node_info+0x92>
 800645c:	e7fe      	b.n	800645c <ai_platform_observer_node_info+0x90>
 800645e:	f7fe fb79 	bl	8004b54 <_ai_platform_release_crc>
 8006462:	2000      	movs	r0, #0
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	4a2f      	ldr	r2, [pc, #188]	; (8006524 <ai_platform_observer_node_info+0x158>)
 8006468:	2301      	movs	r3, #1
 800646a:	6093      	str	r3, [r2, #8]
 800646c:	6893      	ldr	r3, [r2, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1fc      	bne.n	800646c <ai_platform_observer_node_info+0xa0>
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <ai_platform_observer_node_info+0x150>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	4b29      	ldr	r3, [pc, #164]	; (8006520 <ai_platform_observer_node_info+0x154>)
 800647a:	429a      	cmp	r2, r3
 800647c:	d11d      	bne.n	80064ba <ai_platform_observer_node_info+0xee>
 800647e:	f7fe fb69 	bl	8004b54 <_ai_platform_release_crc>
 8006482:	b1dd      	cbz	r5, 80064bc <ai_platform_observer_node_info+0xf0>
 8006484:	68e3      	ldr	r3, [r4, #12]
 8006486:	f013 0602 	ands.w	r6, r3, #2
 800648a:	d03a      	beq.n	8006502 <ai_platform_observer_node_info+0x136>
 800648c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648e:	2100      	movs	r1, #0
 8006490:	e001      	b.n	8006496 <ai_platform_observer_node_info+0xca>
 8006492:	b152      	cbz	r2, 80064aa <ai_platform_observer_node_info+0xde>
 8006494:	4613      	mov	r3, r2
 8006496:	b288      	uxth	r0, r1
 8006498:	b13b      	cbz	r3, 80064aa <ai_platform_observer_node_info+0xde>
 800649a:	882a      	ldrh	r2, [r5, #0]
 800649c:	4282      	cmp	r2, r0
 800649e:	f101 0101 	add.w	r1, r1, #1
 80064a2:	d012      	beq.n	80064ca <ai_platform_observer_node_info+0xfe>
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d1f3      	bne.n	8006492 <ai_platform_observer_node_info+0xc6>
 80064aa:	2214      	movs	r2, #20
 80064ac:	4611      	mov	r1, r2
 80064ae:	f104 0010 	add.w	r0, r4, #16
 80064b2:	f000 f951 	bl	8006758 <core_set_error>
 80064b6:	2000      	movs	r0, #0
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	e7fe      	b.n	80064ba <ai_platform_observer_node_info+0xee>
 80064bc:	2210      	movs	r2, #16
 80064be:	4611      	mov	r1, r2
 80064c0:	18a0      	adds	r0, r4, r2
 80064c2:	f000 f949 	bl	8006758 <core_set_error>
 80064c6:	4628      	mov	r0, r5
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	60ea      	str	r2, [r5, #12]
 80064ce:	8819      	ldrh	r1, [r3, #0]
 80064d0:	f240 120f 	movw	r2, #271	; 0x10f
 80064d4:	4291      	cmp	r1, r2
 80064d6:	d007      	beq.n	80064e8 <ai_platform_observer_node_info+0x11c>
 80064d8:	885a      	ldrh	r2, [r3, #2]
 80064da:	80aa      	strh	r2, [r5, #4]
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	806a      	strh	r2, [r5, #2]
 80064e0:	2300      	movs	r3, #0
 80064e2:	60ab      	str	r3, [r5, #8]
 80064e4:	2001      	movs	r0, #1
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	8853      	ldrh	r3, [r2, #2]
 80064ec:	80ab      	strh	r3, [r5, #4]
 80064ee:	8813      	ldrh	r3, [r2, #0]
 80064f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f8:	806b      	strh	r3, [r5, #2]
 80064fa:	6993      	ldr	r3, [r2, #24]
 80064fc:	60ab      	str	r3, [r5, #8]
 80064fe:	2001      	movs	r0, #1
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	2210      	movs	r2, #16
 8006504:	2111      	movs	r1, #17
 8006506:	18a0      	adds	r0, r4, r2
 8006508:	f000 f926 	bl	8006758 <core_set_error>
 800650c:	4630      	mov	r0, r6
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	a1c00100 	.word	0xa1c00100
 8006514:	e0042000 	.word	0xe0042000
 8006518:	58024000 	.word	0x58024000
 800651c:	f407a5c2 	.word	0xf407a5c2
 8006520:	b5e8b5cd 	.word	0xb5e8b5cd
 8006524:	40023000 	.word	0x40023000

08006528 <ai_platform_observer_register>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	b308      	cbz	r0, 8006572 <ai_platform_observer_register+0x4a>
 800652e:	4691      	mov	r9, r2
 8006530:	461f      	mov	r7, r3
 8006532:	6802      	ldr	r2, [r0, #0]
 8006534:	4b45      	ldr	r3, [pc, #276]	; (800664c <ai_platform_observer_register+0x124>)
 8006536:	429a      	cmp	r2, r3
 8006538:	4605      	mov	r5, r0
 800653a:	d11a      	bne.n	8006572 <ai_platform_observer_register+0x4a>
 800653c:	4688      	mov	r8, r1
 800653e:	f7fe fb07 	bl	8004b50 <_ai_platform_acquire_crc>
 8006542:	4b43      	ldr	r3, [pc, #268]	; (8006650 <ai_platform_observer_register+0x128>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654e:	d03c      	beq.n	80065ca <ai_platform_observer_register+0xa2>
 8006550:	4e40      	ldr	r6, [pc, #256]	; (8006654 <ai_platform_observer_register+0x12c>)
 8006552:	2301      	movs	r3, #1
 8006554:	f8c6 3c08 	str.w	r3, [r6, #3080]	; 0xc08
 8006558:	f8d6 4c08 	ldr.w	r4, [r6, #3080]	; 0xc08
 800655c:	2c00      	cmp	r4, #0
 800655e:	d1fb      	bne.n	8006558 <ai_platform_observer_register+0x30>
 8006560:	4b3d      	ldr	r3, [pc, #244]	; (8006658 <ai_platform_observer_register+0x130>)
 8006562:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
 8006566:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
 800656a:	4b3c      	ldr	r3, [pc, #240]	; (800665c <ai_platform_observer_register+0x134>)
 800656c:	429a      	cmp	r2, r3
 800656e:	d038      	beq.n	80065e2 <ai_platform_observer_register+0xba>
 8006570:	e7fe      	b.n	8006570 <ai_platform_observer_register+0x48>
 8006572:	f7fe faed 	bl	8004b50 <_ai_platform_acquire_crc>
 8006576:	4b36      	ldr	r3, [pc, #216]	; (8006650 <ai_platform_observer_register+0x128>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006582:	d010      	beq.n	80065a6 <ai_platform_observer_register+0x7e>
 8006584:	4a33      	ldr	r2, [pc, #204]	; (8006654 <ai_platform_observer_register+0x12c>)
 8006586:	2301      	movs	r3, #1
 8006588:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800658c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1fb      	bne.n	800658c <ai_platform_observer_register+0x64>
 8006594:	4b30      	ldr	r3, [pc, #192]	; (8006658 <ai_platform_observer_register+0x130>)
 8006596:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800659a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <ai_platform_observer_register+0x134>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d00d      	beq.n	80065c0 <ai_platform_observer_register+0x98>
 80065a4:	e7fe      	b.n	80065a4 <ai_platform_observer_register+0x7c>
 80065a6:	4a2e      	ldr	r2, [pc, #184]	; (8006660 <ai_platform_observer_register+0x138>)
 80065a8:	2301      	movs	r3, #1
 80065aa:	6093      	str	r3, [r2, #8]
 80065ac:	6893      	ldr	r3, [r2, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1fc      	bne.n	80065ac <ai_platform_observer_register+0x84>
 80065b2:	4b29      	ldr	r3, [pc, #164]	; (8006658 <ai_platform_observer_register+0x130>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <ai_platform_observer_register+0x134>)
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d000      	beq.n	80065c0 <ai_platform_observer_register+0x98>
 80065be:	e7fe      	b.n	80065be <ai_platform_observer_register+0x96>
 80065c0:	f7fe fac8 	bl	8004b54 <_ai_platform_release_crc>
 80065c4:	2000      	movs	r0, #0
 80065c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ca:	4a25      	ldr	r2, [pc, #148]	; (8006660 <ai_platform_observer_register+0x138>)
 80065cc:	2301      	movs	r3, #1
 80065ce:	6093      	str	r3, [r2, #8]
 80065d0:	6893      	ldr	r3, [r2, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1fc      	bne.n	80065d0 <ai_platform_observer_register+0xa8>
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <ai_platform_observer_register+0x130>)
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <ai_platform_observer_register+0x134>)
 80065de:	429a      	cmp	r2, r3
 80065e0:	d10b      	bne.n	80065fa <ai_platform_observer_register+0xd2>
 80065e2:	f7fe fab7 	bl	8004b54 <_ai_platform_release_crc>
 80065e6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80065e8:	b144      	cbz	r4, 80065fc <ai_platform_observer_register+0xd4>
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	2111      	movs	r1, #17
 80065ee:	f105 0010 	add.w	r0, r5, #16
 80065f2:	f000 f8b1 	bl	8006758 <core_set_error>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e7e5      	b.n	80065c6 <ai_platform_observer_register+0x9e>
 80065fa:	e7fe      	b.n	80065fa <ai_platform_observer_register+0xd2>
 80065fc:	2014      	movs	r0, #20
 80065fe:	f000 f8b7 	bl	8006770 <core_mem_alloc>
 8006602:	4606      	mov	r6, r0
 8006604:	b1d8      	cbz	r0, 800663e <ai_platform_observer_register+0x116>
 8006606:	81c4      	strh	r4, [r0, #14]
 8006608:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800660a:	2101      	movs	r1, #1
 800660c:	e006      	b.n	800661c <ai_platform_observer_register+0xf4>
 800660e:	81f1      	strh	r1, [r6, #14]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	b2a1      	uxth	r1, r4
 8006616:	d004      	beq.n	8006622 <ai_platform_observer_register+0xfa>
 8006618:	b11a      	cbz	r2, 8006622 <ai_platform_observer_register+0xfa>
 800661a:	4613      	mov	r3, r2
 800661c:	1c4c      	adds	r4, r1, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f5      	bne.n	800660e <ai_platform_observer_register+0xe6>
 8006622:	4a10      	ldr	r2, [pc, #64]	; (8006664 <ai_platform_observer_register+0x13c>)
 8006624:	f8c6 8000 	str.w	r8, [r6]
 8006628:	b2fb      	uxtb	r3, r7
 800662a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662e:	2100      	movs	r1, #0
 8006630:	e9c6 9301 	strd	r9, r3, [r6, #4]
 8006634:	81b1      	strh	r1, [r6, #12]
 8006636:	2001      	movs	r0, #1
 8006638:	e9c5 260f 	strd	r2, r6, [r5, #60]	; 0x3c
 800663c:	e7c3      	b.n	80065c6 <ai_platform_observer_register+0x9e>
 800663e:	2210      	movs	r2, #16
 8006640:	2131      	movs	r1, #49	; 0x31
 8006642:	18a8      	adds	r0, r5, r2
 8006644:	f000 f888 	bl	8006758 <core_set_error>
 8006648:	4630      	mov	r0, r6
 800664a:	e7bc      	b.n	80065c6 <ai_platform_observer_register+0x9e>
 800664c:	a1c00100 	.word	0xa1c00100
 8006650:	e0042000 	.word	0xe0042000
 8006654:	58024000 	.word	0x58024000
 8006658:	f407a5c2 	.word	0xf407a5c2
 800665c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006660:	40023000 	.word	0x40023000
 8006664:	08004a39 	.word	0x08004a39

08006668 <ai_platform_observer_unregister>:
 8006668:	b510      	push	{r4, lr}
 800666a:	b1f0      	cbz	r0, 80066aa <ai_platform_observer_unregister+0x42>
 800666c:	4b30      	ldr	r3, [pc, #192]	; (8006730 <ai_platform_observer_unregister+0xc8>)
 800666e:	6802      	ldr	r2, [r0, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	4604      	mov	r4, r0
 8006674:	d119      	bne.n	80066aa <ai_platform_observer_unregister+0x42>
 8006676:	f7fe fa6b 	bl	8004b50 <_ai_platform_acquire_crc>
 800667a:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <ai_platform_observer_unregister+0xcc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d03b      	beq.n	8006700 <ai_platform_observer_unregister+0x98>
 8006688:	4a2b      	ldr	r2, [pc, #172]	; (8006738 <ai_platform_observer_unregister+0xd0>)
 800668a:	2301      	movs	r3, #1
 800668c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006690:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1fb      	bne.n	8006690 <ai_platform_observer_unregister+0x28>
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <ai_platform_observer_unregister+0xd4>)
 800669a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800669e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80066a2:	4b27      	ldr	r3, [pc, #156]	; (8006740 <ai_platform_observer_unregister+0xd8>)
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d037      	beq.n	8006718 <ai_platform_observer_unregister+0xb0>
 80066a8:	e7fe      	b.n	80066a8 <ai_platform_observer_unregister+0x40>
 80066aa:	f7fe fa51 	bl	8004b50 <_ai_platform_acquire_crc>
 80066ae:	4b21      	ldr	r3, [pc, #132]	; (8006734 <ai_platform_observer_unregister+0xcc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	d010      	beq.n	80066de <ai_platform_observer_unregister+0x76>
 80066bc:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <ai_platform_observer_unregister+0xd0>)
 80066be:	2301      	movs	r3, #1
 80066c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80066c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1fb      	bne.n	80066c4 <ai_platform_observer_unregister+0x5c>
 80066cc:	4b1b      	ldr	r3, [pc, #108]	; (800673c <ai_platform_observer_unregister+0xd4>)
 80066ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80066d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80066d6:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <ai_platform_observer_unregister+0xd8>)
 80066d8:	429a      	cmp	r2, r3
 80066da:	d00d      	beq.n	80066f8 <ai_platform_observer_unregister+0x90>
 80066dc:	e7fe      	b.n	80066dc <ai_platform_observer_unregister+0x74>
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <ai_platform_observer_unregister+0xdc>)
 80066e0:	2301      	movs	r3, #1
 80066e2:	6093      	str	r3, [r2, #8]
 80066e4:	6893      	ldr	r3, [r2, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1fc      	bne.n	80066e4 <ai_platform_observer_unregister+0x7c>
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <ai_platform_observer_unregister+0xd4>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	4b13      	ldr	r3, [pc, #76]	; (8006740 <ai_platform_observer_unregister+0xd8>)
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d000      	beq.n	80066f8 <ai_platform_observer_unregister+0x90>
 80066f6:	e7fe      	b.n	80066f6 <ai_platform_observer_unregister+0x8e>
 80066f8:	f7fe fa2c 	bl	8004b54 <_ai_platform_release_crc>
 80066fc:	2000      	movs	r0, #0
 80066fe:	bd10      	pop	{r4, pc}
 8006700:	4a10      	ldr	r2, [pc, #64]	; (8006744 <ai_platform_observer_unregister+0xdc>)
 8006702:	2301      	movs	r3, #1
 8006704:	6093      	str	r3, [r2, #8]
 8006706:	6893      	ldr	r3, [r2, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1fc      	bne.n	8006706 <ai_platform_observer_unregister+0x9e>
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <ai_platform_observer_unregister+0xd4>)
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <ai_platform_observer_unregister+0xd8>)
 8006714:	429a      	cmp	r2, r3
 8006716:	d10a      	bne.n	800672e <ai_platform_observer_unregister+0xc6>
 8006718:	f7fe fa1c 	bl	8004b54 <_ai_platform_release_crc>
 800671c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800671e:	b108      	cbz	r0, 8006724 <ai_platform_observer_unregister+0xbc>
 8006720:	f000 f834 	bl	800678c <core_mem_free>
 8006724:	2300      	movs	r3, #0
 8006726:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800672a:	2001      	movs	r0, #1
 800672c:	bd10      	pop	{r4, pc}
 800672e:	e7fe      	b.n	800672e <ai_platform_observer_unregister+0xc6>
 8006730:	a1c00100 	.word	0xa1c00100
 8006734:	e0042000 	.word	0xe0042000
 8006738:	58024000 	.word	0x58024000
 800673c:	f407a5c2 	.word	0xf407a5c2
 8006740:	b5e8b5cd 	.word	0xb5e8b5cd
 8006744:	40023000 	.word	0x40023000

08006748 <core_init>:
 8006748:	2001      	movs	r0, #1
 800674a:	4770      	bx	lr

0800674c <core_get_error>:
 800674c:	4603      	mov	r3, r0
 800674e:	2200      	movs	r2, #0
 8006750:	6800      	ldr	r0, [r0, #0]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <core_set_error>:
 8006758:	4603      	mov	r3, r0
 800675a:	7800      	ldrb	r0, [r0, #0]
 800675c:	b108      	cbz	r0, 8006762 <core_set_error+0xa>
 800675e:	2000      	movs	r0, #0
 8006760:	4770      	bx	lr
 8006762:	7019      	strb	r1, [r3, #0]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	f362 211f 	bfi	r1, r2, #8, #24
 800676a:	2001      	movs	r0, #1
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	4770      	bx	lr

08006770 <core_mem_alloc>:
 8006770:	b148      	cbz	r0, 8006786 <core_mem_alloc+0x16>
 8006772:	b508      	push	{r3, lr}
 8006774:	3004      	adds	r0, #4
 8006776:	f7fd fa3b 	bl	8003bf0 <__wrap_malloc>
 800677a:	b110      	cbz	r0, 8006782 <core_mem_alloc+0x12>
 800677c:	6000      	str	r0, [r0, #0]
 800677e:	3004      	adds	r0, #4
 8006780:	bd08      	pop	{r3, pc}
 8006782:	2000      	movs	r0, #0
 8006784:	bd08      	pop	{r3, pc}
 8006786:	2000      	movs	r0, #0
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <core_mem_free>:
 800678c:	b150      	cbz	r0, 80067a4 <core_mem_free+0x18>
 800678e:	b508      	push	{r3, lr}
 8006790:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006794:	1f03      	subs	r3, r0, #4
 8006796:	4293      	cmp	r3, r2
 8006798:	d103      	bne.n	80067a2 <core_mem_free+0x16>
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fa50 	bl	8003c40 <__wrap_free>
 80067a0:	2000      	movs	r0, #0
 80067a2:	bd08      	pop	{r3, pc}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop

080067a8 <ai_check_custom_types>:
 80067a8:	b082      	sub	sp, #8
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <ai_check_custom_types+0x50>)
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	b118      	cbz	r0, 80067b8 <ai_check_custom_types+0x10>
 80067b0:	7803      	ldrb	r3, [r0, #0]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d002      	beq.n	80067bc <ai_check_custom_types+0x14>
 80067b6:	2000      	movs	r0, #0
 80067b8:	b002      	add	sp, #8
 80067ba:	4770      	bx	lr
 80067bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <ai_check_custom_types+0x26>
 80067c4:	2001      	movs	r0, #1
 80067c6:	f080 0001 	eor.w	r0, r0, #1
 80067ca:	b002      	add	sp, #8
 80067cc:	4770      	bx	lr
 80067ce:	7842      	ldrb	r2, [r0, #1]
 80067d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	f100 0001 	add.w	r0, r0, #1
 80067da:	d1f3      	bne.n	80067c4 <ai_check_custom_types+0x1c>
 80067dc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80067e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1ed      	bne.n	80067c4 <ai_check_custom_types+0x1c>
 80067e8:	7842      	ldrb	r2, [r0, #1]
 80067ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d1e8      	bne.n	80067c4 <ai_check_custom_types+0x1c>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e7e7      	b.n	80067c6 <ai_check_custom_types+0x1e>
 80067f6:	bf00      	nop
 80067f8:	84048403 	.word	0x84048403

080067fc <ai_layer_type_name>:
 80067fc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 8006800:	d809      	bhi.n	8006816 <ai_layer_type_name+0x1a>
 8006802:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 8006806:	d217      	bcs.n	8006838 <ai_layer_type_name+0x3c>
 8006808:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800680c:	d80e      	bhi.n	800682c <ai_layer_type_name+0x30>
 800680e:	28ff      	cmp	r0, #255	; 0xff
 8006810:	d805      	bhi.n	800681e <ai_layer_type_name+0x22>
 8006812:	480e      	ldr	r0, [pc, #56]	; (800684c <ai_layer_type_name+0x50>)
 8006814:	4770      	bx	lr
 8006816:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 800681a:	2b03      	cmp	r3, #3
 800681c:	d8f9      	bhi.n	8006812 <ai_layer_type_name+0x16>
 800681e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <ai_layer_type_name+0x54>)
 8006824:	b280      	uxth	r0, r0
 8006826:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800682a:	4770      	bx	lr
 800682c:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 8006830:	2b27      	cmp	r3, #39	; 0x27
 8006832:	d9f4      	bls.n	800681e <ai_layer_type_name+0x22>
 8006834:	4805      	ldr	r0, [pc, #20]	; (800684c <ai_layer_type_name+0x50>)
 8006836:	4770      	bx	lr
 8006838:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 800683c:	b29a      	uxth	r2, r3
 800683e:	4905      	ldr	r1, [pc, #20]	; (8006854 <ai_layer_type_name+0x58>)
 8006840:	2301      	movs	r3, #1
 8006842:	4093      	lsls	r3, r2
 8006844:	420b      	tst	r3, r1
 8006846:	d1ea      	bne.n	800681e <ai_layer_type_name+0x22>
 8006848:	4800      	ldr	r0, [pc, #0]	; (800684c <ai_layer_type_name+0x50>)
 800684a:	4770      	bx	lr
 800684c:	080175bc 	.word	0x080175bc
 8006850:	080177a8 	.word	0x080177a8
 8006854:	00012007 	.word	0x00012007

08006858 <ai_layers_init_all>:
 8006858:	4601      	mov	r1, r0
 800685a:	2000      	movs	r0, #0
 800685c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800685e:	b143      	cbz	r3, 8006872 <ai_layers_init_all+0x1a>
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	60d9      	str	r1, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	f100 0001 	add.w	r0, r0, #1
 800686a:	d002      	beq.n	8006872 <ai_layers_init_all+0x1a>
 800686c:	b10a      	cbz	r2, 8006872 <ai_layers_init_all+0x1a>
 800686e:	4613      	mov	r3, r2
 8006870:	e7f5      	b.n	800685e <ai_layers_init_all+0x6>
 8006872:	4770      	bx	lr

08006874 <ai_layers_post_init_all>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006878:	2500      	movs	r5, #0
 800687a:	b16c      	cbz	r4, 8006898 <ai_layers_post_init_all+0x24>
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	07db      	lsls	r3, r3, #31
 8006880:	d504      	bpl.n	800688c <ai_layers_post_init_all+0x18>
 8006882:	6a23      	ldr	r3, [r4, #32]
 8006884:	4620      	mov	r0, r4
 8006886:	b10b      	cbz	r3, 800688c <ai_layers_post_init_all+0x18>
 8006888:	4798      	blx	r3
 800688a:	3501      	adds	r5, #1
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	42a3      	cmp	r3, r4
 8006890:	d002      	beq.n	8006898 <ai_layers_post_init_all+0x24>
 8006892:	b10b      	cbz	r3, 8006898 <ai_layers_post_init_all+0x24>
 8006894:	461c      	mov	r4, r3
 8006896:	e7f0      	b.n	800687a <ai_layers_post_init_all+0x6>
 8006898:	4628      	mov	r0, r5
 800689a:	bd38      	pop	{r3, r4, r5, pc}

0800689c <ai_layers_forward_all>:
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80068a4:	4604      	mov	r4, r0
 80068a6:	f1b8 0f00 	cmp.w	r8, #0
 80068aa:	d02b      	beq.n	8006904 <ai_layers_forward_all+0x68>
 80068ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80068ae:	6381      	str	r1, [r0, #56]	; 0x38
 80068b0:	b321      	cbz	r1, 80068fc <ai_layers_forward_all+0x60>
 80068b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80068b4:	2001      	movs	r0, #1
 80068b6:	47c0      	blx	r8
 80068b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80068ba:	b1fe      	cbz	r6, 80068fc <ai_layers_forward_all+0x60>
 80068bc:	2700      	movs	r7, #0
 80068be:	4631      	mov	r1, r6
 80068c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068c2:	2002      	movs	r0, #2
 80068c4:	47c0      	blx	r8
 80068c6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80068c8:	4628      	mov	r0, r5
 80068ca:	696b      	ldr	r3, [r5, #20]
 80068cc:	4798      	blx	r3
 80068ce:	692e      	ldr	r6, [r5, #16]
 80068d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068d4:	42b5      	cmp	r5, r6
 80068d6:	f04f 0003 	mov.w	r0, #3
 80068da:	d007      	beq.n	80068ec <ai_layers_forward_all+0x50>
 80068dc:	47c0      	blx	r8
 80068de:	3701      	adds	r7, #1
 80068e0:	63a6      	str	r6, [r4, #56]	; 0x38
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d1eb      	bne.n	80068be <ai_layers_forward_all+0x22>
 80068e6:	4638      	mov	r0, r7
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	2003      	movs	r0, #3
 80068ee:	47c0      	blx	r8
 80068f0:	2300      	movs	r3, #0
 80068f2:	3701      	adds	r7, #1
 80068f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80068f6:	4638      	mov	r0, r7
 80068f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068fc:	2700      	movs	r7, #0
 80068fe:	4638      	mov	r0, r7
 8006900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006904:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006906:	6385      	str	r5, [r0, #56]	; 0x38
 8006908:	2d00      	cmp	r5, #0
 800690a:	d0f7      	beq.n	80068fc <ai_layers_forward_all+0x60>
 800690c:	4647      	mov	r7, r8
 800690e:	696b      	ldr	r3, [r5, #20]
 8006910:	4628      	mov	r0, r5
 8006912:	4798      	blx	r3
 8006914:	462b      	mov	r3, r5
 8006916:	692d      	ldr	r5, [r5, #16]
 8006918:	429d      	cmp	r5, r3
 800691a:	d004      	beq.n	8006926 <ai_layers_forward_all+0x8a>
 800691c:	63a5      	str	r5, [r4, #56]	; 0x38
 800691e:	3701      	adds	r7, #1
 8006920:	2d00      	cmp	r5, #0
 8006922:	d1f4      	bne.n	800690e <ai_layers_forward_all+0x72>
 8006924:	e7df      	b.n	80068e6 <ai_layers_forward_all+0x4a>
 8006926:	2300      	movs	r3, #0
 8006928:	63a3      	str	r3, [r4, #56]	; 0x38
 800692a:	3701      	adds	r7, #1
 800692c:	e7db      	b.n	80068e6 <ai_layers_forward_all+0x4a>
 800692e:	bf00      	nop

08006930 <ai_layers_destroy_all>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006934:	2500      	movs	r5, #0
 8006936:	b16c      	cbz	r4, 8006954 <ai_layers_destroy_all+0x24>
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	075b      	lsls	r3, r3, #29
 800693c:	d504      	bpl.n	8006948 <ai_layers_destroy_all+0x18>
 800693e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006940:	4620      	mov	r0, r4
 8006942:	b10b      	cbz	r3, 8006948 <ai_layers_destroy_all+0x18>
 8006944:	4798      	blx	r3
 8006946:	3501      	adds	r5, #1
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	42a3      	cmp	r3, r4
 800694c:	d002      	beq.n	8006954 <ai_layers_destroy_all+0x24>
 800694e:	b10b      	cbz	r3, 8006954 <ai_layers_destroy_all+0x24>
 8006950:	461c      	mov	r4, r3
 8006952:	e7f0      	b.n	8006936 <ai_layers_destroy_all+0x6>
 8006954:	4628      	mov	r0, r5
 8006956:	bd38      	pop	{r3, r4, r5, pc}

08006958 <forward_dense>:
 8006958:	6983      	ldr	r3, [r0, #24]
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	2a00      	cmp	r2, #0
 800695e:	f000 8181 	beq.w	8006c64 <forward_dense+0x30c>
 8006962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	ed2d 8b02 	vpush	{d8}
 800696a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800696e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006972:	b095      	sub	sp, #84	; 0x54
 8006974:	b105      	cbz	r5, 8006978 <forward_dense+0x20>
 8006976:	682d      	ldr	r5, [r5, #0]
 8006978:	2a01      	cmp	r2, #1
 800697a:	f000 828f 	beq.w	8006e9c <forward_dense+0x544>
 800697e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8006982:	b106      	cbz	r6, 8006986 <forward_dense+0x2e>
 8006984:	6836      	ldr	r6, [r6, #0]
 8006986:	2a02      	cmp	r2, #2
 8006988:	f000 816e 	beq.w	8006c68 <forward_dense+0x310>
 800698c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006990:	930b      	str	r3, [sp, #44]	; 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8274 	beq.w	8006e80 <forward_dense+0x528>
 8006998:	4619      	mov	r1, r3
 800699a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800699e:	6809      	ldr	r1, [r1, #0]
 80069a0:	910d      	str	r1, [sp, #52]	; 0x34
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	f240 826e 	bls.w	8006e84 <forward_dense+0x52c>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ae:	460b      	mov	r3, r1
 80069b0:	68e8      	ldr	r0, [r5, #12]
 80069b2:	68f7      	ldr	r7, [r6, #12]
 80069b4:	6840      	ldr	r0, [r0, #4]
 80069b6:	6999      	ldr	r1, [r3, #24]
 80069b8:	9013      	str	r0, [sp, #76]	; 0x4c
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	680b      	ldr	r3, [r1, #0]
 80069be:	9012      	str	r0, [sp, #72]	; 0x48
 80069c0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80069c4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80069c8:	fb00 f404 	mul.w	r4, r0, r4
 80069cc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80069d0:	fa4e f000 	asr.w	r0, lr, r0
 80069d4:	2a03      	cmp	r2, #3
 80069d6:	9010      	str	r0, [sp, #64]	; 0x40
 80069d8:	f000 825d 	beq.w	8006e96 <forward_dense+0x53e>
 80069dc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80069e0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	f000 8246 	beq.w	8006e76 <forward_dense+0x51e>
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	f000 8242 	beq.w	8006e76 <forward_dense+0x51e>
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80069f8:	f000 822c 	beq.w	8006e54 <forward_dense+0x4fc>
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	f000 8229 	beq.w	8006e54 <forward_dense+0x4fc>
 8006a02:	f04f 0b00 	mov.w	fp, #0
 8006a06:	69b2      	ldr	r2, [r6, #24]
 8006a08:	69ab      	ldr	r3, [r5, #24]
 8006a0a:	6891      	ldr	r1, [r2, #8]
 8006a0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	6952      	ldr	r2, [r2, #20]
 8006a12:	9106      	str	r1, [sp, #24]
 8006a14:	fb07 f404 	mul.w	r4, r7, r4
 8006a18:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006a22:	4281      	cmp	r1, r0
 8006a24:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8006a28:	900e      	str	r0, [sp, #56]	; 0x38
 8006a2a:	940c      	str	r4, [sp, #48]	; 0x30
 8006a2c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006a30:	f080 8113 	bcs.w	8006c5a <forward_dense+0x302>
 8006a34:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a36:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8006c84 <forward_dense+0x32c>
 8006a3a:	f021 0201 	bic.w	r2, r1, #1
 8006a3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006a42:	9204      	str	r2, [sp, #16]
 8006a44:	f001 0201 	and.w	r2, r1, #1
 8006a48:	08c8      	lsrs	r0, r1, #3
 8006a4a:	9208      	str	r2, [sp, #32]
 8006a4c:	008a      	lsls	r2, r1, #2
 8006a4e:	f001 0a07 	and.w	sl, r1, #7
 8006a52:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a54:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8006a58:	3320      	adds	r3, #32
 8006a5a:	465c      	mov	r4, fp
 8006a5c:	9007      	str	r0, [sp, #28]
 8006a5e:	46cb      	mov	fp, r9
 8006a60:	9205      	str	r2, [sp, #20]
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	46c1      	mov	r9, r8
 8006a66:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	3b20      	subs	r3, #32
 8006a74:	930a      	str	r3, [sp, #40]	; 0x28
 8006a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a78:	b10b      	cbz	r3, 8006a7e <forward_dense+0x126>
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	f000 81da 	beq.w	8006e38 <forward_dense+0x4e0>
 8006a84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a86:	2904      	cmp	r1, #4
 8006a88:	9906      	ldr	r1, [sp, #24]
 8006a8a:	f000 80fd 	beq.w	8006c88 <forward_dense+0x330>
 8006a8e:	4549      	cmp	r1, r9
 8006a90:	f080 80d2 	bcs.w	8006c38 <forward_dense+0x2e0>
 8006a94:	460f      	mov	r7, r1
 8006a96:	9907      	ldr	r1, [sp, #28]
 8006a98:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a9c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006aa0:	1c4e      	adds	r6, r1, #1
 8006aa2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006aa6:	4694      	mov	ip, r2
 8006aa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006aaa:	468e      	mov	lr, r1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80de 	beq.w	8006c6e <forward_dense+0x316>
 8006ab2:	ecf3 2a01 	vldmia	r3!, {s5}
 8006ab6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006c84 <forward_dense+0x32c>
 8006aba:	f1be 0f00 	cmp.w	lr, #0
 8006abe:	f000 80de 	beq.w	8006c7e <forward_dense+0x326>
 8006ac2:	f10c 0108 	add.w	r1, ip, #8
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006acc:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8006ad0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8006ad4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8006ad8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8006adc:	ed10 5a04 	vldr	s10, [r0, #-16]
 8006ae0:	ed50 5a03 	vldr	s11, [r0, #-12]
 8006ae4:	ed10 6a02 	vldr	s12, [r0, #-8]
 8006ae8:	ed50 6a01 	vldr	s13, [r0, #-4]
 8006aec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006af0:	edd5 7a00 	vldr	s15, [r5]
 8006af4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8006af8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006afc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006b00:	ed95 3a00 	vldr	s6, [r5]
 8006b04:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8006b08:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b0c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b10:	3108      	adds	r1, #8
 8006b12:	edd5 3a00 	vldr	s7, [r5]
 8006b16:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006b1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006b1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b22:	3020      	adds	r0, #32
 8006b24:	ed95 4a00 	vldr	s8, [r5]
 8006b28:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006b2c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b34:	edd5 4a00 	vldr	s9, [r5]
 8006b38:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006b3c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006b40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b44:	ed95 5a00 	vldr	s10, [r5]
 8006b48:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006b4c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b54:	edd5 5a00 	vldr	s11, [r5]
 8006b58:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006b5c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006b60:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b64:	428e      	cmp	r6, r1
 8006b66:	ed95 6a00 	vldr	s12, [r5]
 8006b6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b72:	d1a9      	bne.n	8006ac8 <forward_dense+0x170>
 8006b74:	f1a6 0108 	sub.w	r1, r6, #8
 8006b78:	4650      	mov	r0, sl
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	d04a      	beq.n	8006c14 <forward_dense+0x2bc>
 8006b7e:	780d      	ldrb	r5, [r1, #0]
 8006b80:	edd0 6a00 	vldr	s13, [r0]
 8006b84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b88:	edd5 7a00 	vldr	s15, [r5]
 8006b8c:	2a01      	cmp	r2, #1
 8006b8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b92:	d03f      	beq.n	8006c14 <forward_dense+0x2bc>
 8006b94:	784d      	ldrb	r5, [r1, #1]
 8006b96:	edd0 6a01 	vldr	s13, [r0, #4]
 8006b9a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b9e:	edd5 7a00 	vldr	s15, [r5]
 8006ba2:	2a02      	cmp	r2, #2
 8006ba4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ba8:	d034      	beq.n	8006c14 <forward_dense+0x2bc>
 8006baa:	788d      	ldrb	r5, [r1, #2]
 8006bac:	edd0 6a02 	vldr	s13, [r0, #8]
 8006bb0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bb4:	edd5 7a00 	vldr	s15, [r5]
 8006bb8:	2a03      	cmp	r2, #3
 8006bba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bbe:	d029      	beq.n	8006c14 <forward_dense+0x2bc>
 8006bc0:	78cd      	ldrb	r5, [r1, #3]
 8006bc2:	edd0 6a03 	vldr	s13, [r0, #12]
 8006bc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bca:	edd5 7a00 	vldr	s15, [r5]
 8006bce:	2a04      	cmp	r2, #4
 8006bd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bd4:	d01e      	beq.n	8006c14 <forward_dense+0x2bc>
 8006bd6:	790d      	ldrb	r5, [r1, #4]
 8006bd8:	edd0 6a04 	vldr	s13, [r0, #16]
 8006bdc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006be0:	edd5 7a00 	vldr	s15, [r5]
 8006be4:	2a05      	cmp	r2, #5
 8006be6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bea:	d013      	beq.n	8006c14 <forward_dense+0x2bc>
 8006bec:	794d      	ldrb	r5, [r1, #5]
 8006bee:	edd0 6a05 	vldr	s13, [r0, #20]
 8006bf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bf6:	edd5 7a00 	vldr	s15, [r5]
 8006bfa:	2a06      	cmp	r2, #6
 8006bfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c00:	d008      	beq.n	8006c14 <forward_dense+0x2bc>
 8006c02:	7989      	ldrb	r1, [r1, #6]
 8006c04:	edd0 7a06 	vldr	s15, [r0, #24]
 8006c08:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006c0c:	edd1 6a00 	vldr	s13, [r1]
 8006c10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c14:	44dc      	add	ip, fp
 8006c16:	445e      	add	r6, fp
 8006c18:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006c1c:	eca7 7a01 	vstmia	r7!, {s14}
 8006c20:	454f      	cmp	r7, r9
 8006c22:	f4ff af43 	bcc.w	8006aac <forward_dense+0x154>
 8006c26:	9a06      	ldr	r2, [sp, #24]
 8006c28:	eba9 0302 	sub.w	r3, r9, r2
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	3304      	adds	r3, #4
 8006c34:	18d3      	adds	r3, r2, r3
 8006c36:	9306      	str	r3, [sp, #24]
 8006c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3a:	9a05      	ldr	r2, [sp, #20]
 8006c3c:	4499      	add	r9, r3
 8006c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c40:	441a      	add	r2, r3
 8006c42:	9205      	str	r2, [sp, #20]
 8006c44:	9a02      	ldr	r2, [sp, #8]
 8006c46:	441a      	add	r2, r3
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	9204      	str	r2, [sp, #16]
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c54:	4293      	cmp	r3, r2
 8006c56:	f4ff af08 	bcc.w	8006a6a <forward_dense+0x112>
 8006c5a:	b015      	add	sp, #84	; 0x54
 8006c5c:	ecbd 8b02 	vpop	{d8}
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	6853      	ldr	r3, [r2, #4]
 8006c66:	deff      	udf	#255	; 0xff
 8006c68:	2300      	movs	r3, #0
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	deff      	udf	#255	; 0xff
 8006c6e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006c84 <forward_dense+0x32c>
 8006c72:	eef0 2a48 	vmov.f32	s5, s16
 8006c76:	f1be 0f00 	cmp.w	lr, #0
 8006c7a:	f47f af22 	bne.w	8006ac2 <forward_dense+0x16a>
 8006c7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c80:	4661      	mov	r1, ip
 8006c82:	e77a      	b.n	8006b7a <forward_dense+0x222>
 8006c84:	00000000 	.word	0x00000000
 8006c88:	4549      	cmp	r1, r9
 8006c8a:	d2d5      	bcs.n	8006c38 <forward_dense+0x2e0>
 8006c8c:	9807      	ldr	r0, [sp, #28]
 8006c8e:	9103      	str	r1, [sp, #12]
 8006c90:	9904      	ldr	r1, [sp, #16]
 8006c92:	f100 0c01 	add.w	ip, r0, #1
 8006c96:	3901      	subs	r1, #1
 8006c98:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80b2 	beq.w	8006e08 <forward_dense+0x4b0>
 8006ca4:	9907      	ldr	r1, [sp, #28]
 8006ca6:	ecf3 2a01 	vldmia	r3!, {s5}
 8006caa:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8006c84 <forward_dense+0x32c>
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	f000 80b2 	beq.w	8006e18 <forward_dense+0x4c0>
 8006cb4:	9902      	ldr	r1, [sp, #8]
 8006cb6:	1d10      	adds	r0, r2, #4
 8006cb8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8006cbc:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8006cc0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8006cc4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006cc8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8006ccc:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8006cd0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006cd4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006cd8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006cdc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006ce0:	f006 070f 	and.w	r7, r6, #15
 8006ce4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006ce8:	edd7 7a00 	vldr	s15, [r7]
 8006cec:	0936      	lsrs	r6, r6, #4
 8006cee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006cf2:	ed96 3a00 	vldr	s6, [r6]
 8006cf6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006cfa:	092e      	lsrs	r6, r5, #4
 8006cfc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006d00:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006d04:	f005 050f 	and.w	r5, r5, #15
 8006d08:	edd6 3a00 	vldr	s7, [r6]
 8006d0c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8006d10:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006d14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006d18:	0937      	lsrs	r7, r6, #4
 8006d1a:	ed95 4a00 	vldr	s8, [r5]
 8006d1e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8006d22:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006d26:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006d2a:	f006 060f 	and.w	r6, r6, #15
 8006d2e:	edd7 4a00 	vldr	s9, [r7]
 8006d32:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006d36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006d3a:	3004      	adds	r0, #4
 8006d3c:	ed96 5a00 	vldr	s10, [r6]
 8006d40:	092e      	lsrs	r6, r5, #4
 8006d42:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006d46:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006d4a:	f005 050f 	and.w	r5, r5, #15
 8006d4e:	edd6 5a00 	vldr	s11, [r6]
 8006d52:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006d56:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006d5a:	4584      	cmp	ip, r0
 8006d5c:	ed95 6a00 	vldr	s12, [r5]
 8006d60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d64:	f101 0120 	add.w	r1, r1, #32
 8006d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d6c:	d1a4      	bne.n	8006cb8 <forward_dense+0x360>
 8006d6e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8006d72:	f1ac 0804 	sub.w	r8, ip, #4
 8006d76:	9904      	ldr	r1, [sp, #16]
 8006d78:	458e      	cmp	lr, r1
 8006d7a:	d22a      	bcs.n	8006dd2 <forward_dense+0x47a>
 8006d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7e:	eba1 070e 	sub.w	r7, r1, lr
 8006d82:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8006d86:	f10e 0008 	add.w	r0, lr, #8
 8006d8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006d8e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8006d92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d96:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006d9a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006d9e:	f001 050f 	and.w	r5, r1, #15
 8006da2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006da6:	edd5 7a00 	vldr	s15, [r5]
 8006daa:	0909      	lsrs	r1, r1, #4
 8006dac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006db0:	ed91 6a00 	vldr	s12, [r1]
 8006db4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006db8:	42b7      	cmp	r7, r6
 8006dba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006dbe:	f100 0008 	add.w	r0, r0, #8
 8006dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dc6:	d1e4      	bne.n	8006d92 <forward_dense+0x43a>
 8006dc8:	f10a 0a01 	add.w	sl, sl, #1
 8006dcc:	44d0      	add	r8, sl
 8006dce:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006dd2:	9908      	ldr	r1, [sp, #32]
 8006dd4:	b321      	cbz	r1, 8006e20 <forward_dense+0x4c8>
 8006dd6:	f898 1000 	ldrb.w	r1, [r8]
 8006dda:	edde 7a00 	vldr	s15, [lr]
 8006dde:	0909      	lsrs	r1, r1, #4
 8006de0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006de4:	edd1 6a00 	vldr	s13, [r1]
 8006de8:	9903      	ldr	r1, [sp, #12]
 8006dea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006dee:	445a      	add	r2, fp
 8006df0:	44dc      	add	ip, fp
 8006df2:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006df6:	ece1 2a01 	vstmia	r1!, {s5}
 8006dfa:	4589      	cmp	r9, r1
 8006dfc:	9103      	str	r1, [sp, #12]
 8006dfe:	f67f af12 	bls.w	8006c26 <forward_dense+0x2ce>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f af4e 	bne.w	8006ca4 <forward_dense+0x34c>
 8006e08:	9907      	ldr	r1, [sp, #28]
 8006e0a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8006c84 <forward_dense+0x32c>
 8006e0e:	eef0 2a48 	vmov.f32	s5, s16
 8006e12:	2900      	cmp	r1, #0
 8006e14:	f47f af4e 	bne.w	8006cb4 <forward_dense+0x35c>
 8006e18:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006e1c:	4690      	mov	r8, r2
 8006e1e:	e7aa      	b.n	8006d76 <forward_dense+0x41e>
 8006e20:	9903      	ldr	r1, [sp, #12]
 8006e22:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006e26:	445a      	add	r2, fp
 8006e28:	eca1 7a01 	vstmia	r1!, {s14}
 8006e2c:	4549      	cmp	r1, r9
 8006e2e:	9103      	str	r1, [sp, #12]
 8006e30:	44dc      	add	ip, fp
 8006e32:	f4ff af34 	bcc.w	8006c9e <forward_dense+0x346>
 8006e36:	e6f6      	b.n	8006c26 <forward_dense+0x2ce>
 8006e38:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006e3a:	9d06      	ldr	r5, [sp, #24]
 8006e3c:	9101      	str	r1, [sp, #4]
 8006e3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e40:	9100      	str	r1, [sp, #0]
 8006e42:	4628      	mov	r0, r5
 8006e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e46:	f001 fcbf 	bl	80087c8 <forward_lite_dense_if32of32wf32>
 8006e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	4413      	add	r3, r2
 8006e50:	9306      	str	r3, [sp, #24]
 8006e52:	e6f1      	b.n	8006c38 <forward_dense+0x2e0>
 8006e54:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8006e58:	f1b9 0f00 	cmp.w	r9, #0
 8006e5c:	d016      	beq.n	8006e8c <forward_dense+0x534>
 8006e5e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006e62:	f001 ff23 	bl	8008cac <ai_array_get_byte_size>
 8006e66:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f001 fe2a 	bl	8008ac8 <st_int8_copy>
 8006e74:	e5c7      	b.n	8006a06 <forward_dense+0xae>
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d00a      	beq.n	8006e90 <forward_dense+0x538>
 8006e7a:	f04f 0900 	mov.w	r9, #0
 8006e7e:	e5bd      	b.n	80069fc <forward_dense+0xa4>
 8006e80:	930d      	str	r3, [sp, #52]	; 0x34
 8006e82:	e595      	b.n	80069b0 <forward_dense+0x58>
 8006e84:	2300      	movs	r3, #0
 8006e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e88:	460b      	mov	r3, r1
 8006e8a:	e591      	b.n	80069b0 <forward_dense+0x58>
 8006e8c:	46c3      	mov	fp, r8
 8006e8e:	e5ba      	b.n	8006a06 <forward_dense+0xae>
 8006e90:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8006e94:	e5b7      	b.n	8006a06 <forward_dense+0xae>
 8006e96:	2300      	movs	r3, #0
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	deff      	udf	#255	; 0xff
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	deff      	udf	#255	; 0xff
 8006ea2:	bf00      	nop

08006ea4 <nl_func_sigmoid_array_f32>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	ed2d 8b02 	vpush	{d8}
 8006eaa:	698f      	ldr	r7, [r1, #24]
 8006eac:	6980      	ldr	r0, [r0, #24]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	6886      	ldr	r6, [r0, #8]
 8006eb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006eb6:	3a01      	subs	r2, #1
 8006eb8:	0093      	lsls	r3, r2, #2
 8006eba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	d815      	bhi.n	8006eee <nl_func_sigmoid_array_f32+0x4a>
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	1d14      	adds	r4, r2, #4
 8006ec6:	441e      	add	r6, r3
 8006ec8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006ecc:	4625      	mov	r5, r4
 8006ece:	ed34 0a01 	vldmdb	r4!, {s0}
 8006ed2:	eeb1 0a40 	vneg.f32	s0, s0
 8006ed6:	f004 fe73 	bl	800bbc0 <expf>
 8006eda:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006ede:	3d08      	subs	r5, #8
 8006ee0:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8006ee4:	ed66 7a01 	vstmdb	r6!, {s15}
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d9ee      	bls.n	8006ecc <nl_func_sigmoid_array_f32+0x28>
 8006eee:	ecbd 8b02 	vpop	{d8}
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ef4 <nl_func_relu_array_f32>:
 8006ef4:	b430      	push	{r4, r5}
 8006ef6:	698c      	ldr	r4, [r1, #24]
 8006ef8:	6981      	ldr	r1, [r0, #24]
 8006efa:	68a5      	ldr	r5, [r4, #8]
 8006efc:	6889      	ldr	r1, [r1, #8]
 8006efe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006f02:	3a01      	subs	r2, #1
 8006f04:	0093      	lsls	r3, r2, #2
 8006f06:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006f0a:	4295      	cmp	r5, r2
 8006f0c:	d814      	bhi.n	8006f38 <nl_func_relu_array_f32+0x44>
 8006f0e:	1d18      	adds	r0, r3, #4
 8006f10:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006f3c <nl_func_relu_array_f32+0x48>
 8006f14:	1d13      	adds	r3, r2, #4
 8006f16:	4401      	add	r1, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8006f1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f26:	bfb8      	it	lt
 8006f28:	eef0 7a47 	vmovlt.f32	s15, s14
 8006f2c:	ed61 7a01 	vstmdb	r1!, {s15}
 8006f30:	68a0      	ldr	r0, [r4, #8]
 8006f32:	3a08      	subs	r2, #8
 8006f34:	4290      	cmp	r0, r2
 8006f36:	d9ef      	bls.n	8006f18 <nl_func_relu_array_f32+0x24>
 8006f38:	bc30      	pop	{r4, r5}
 8006f3a:	4770      	bx	lr
 8006f3c:	00000000 	.word	0x00000000

08006f40 <array_f32_identity>:
 8006f40:	6980      	ldr	r0, [r0, #24]
 8006f42:	698b      	ldr	r3, [r1, #24]
 8006f44:	4298      	cmp	r0, r3
 8006f46:	d004      	beq.n	8006f52 <array_f32_identity+0x12>
 8006f48:	68c1      	ldr	r1, [r0, #12]
 8006f4a:	68d8      	ldr	r0, [r3, #12]
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	f001 bdbb 	b.w	8008ac8 <st_int8_copy>
 8006f52:	4770      	bx	lr

08006f54 <forward_lstm>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	ed2d 8b06 	vpush	{d8-d10}
 8006f5c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8006f60:	6983      	ldr	r3, [r0, #24]
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	881a      	ldrh	r2, [r3, #0]
 8006f66:	60b8      	str	r0, [r7, #8]
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	f001 842a 	beq.w	80087c2 <forward_lstm+0x186e>
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f74:	2a01      	cmp	r2, #1
 8006f76:	f001 8424 	beq.w	80087c2 <forward_lstm+0x186e>
 8006f7a:	2a02      	cmp	r2, #2
 8006f7c:	f001 8421 	beq.w	80087c2 <forward_lstm+0x186e>
 8006f80:	69d8      	ldr	r0, [r3, #28]
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f001 8414 	beq.w	80087b0 <forward_lstm+0x185c>
 8006f88:	8b1b      	ldrh	r3, [r3, #24]
 8006f8a:	6801      	ldr	r1, [r0, #0]
 8006f8c:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	6883      	ldr	r3, [r0, #8]
 8006f94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f98:	bf88      	it	hi
 8006f9a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006f9e:	68c3      	ldr	r3, [r0, #12]
 8006fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fa4:	bf98      	it	ls
 8006fa6:	f04f 0b00 	movls.w	fp, #0
 8006faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb2:	b10b      	cbz	r3, 8006fb8 <forward_lstm+0x64>
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006fbe:	899b      	ldrh	r3, [r3, #12]
 8006fc0:	68cd      	ldr	r5, [r1, #12]
 8006fc2:	0099      	lsls	r1, r3, #2
 8006fc4:	3107      	adds	r1, #7
 8006fc6:	08c9      	lsrs	r1, r1, #3
 8006fc8:	466c      	mov	r4, sp
 8006fca:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 8006fce:	46a5      	mov	sp, r4
 8006fd0:	1ddc      	adds	r4, r3, #7
 8006fd2:	466e      	mov	r6, sp
 8006fd4:	08e4      	lsrs	r4, r4, #3
 8006fd6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8006fda:	46a5      	mov	sp, r4
 8006fdc:	68bc      	ldr	r4, [r7, #8]
 8006fde:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8006fe2:	466c      	mov	r4, sp
 8006fe4:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8006fe8:	46e5      	mov	sp, ip
 8006fea:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 8006fee:	f8c7 d010 	str.w	sp, [r7, #16]
 8006ff2:	468d      	mov	sp, r1
 8006ff4:	68e9      	ldr	r1, [r5, #12]
 8006ff6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	6779      	str	r1, [r7, #116]	; 0x74
 8006ffc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8007000:	ee09 1a10 	vmov	s18, r1
 8007004:	46ee      	mov	lr, sp
 8007006:	2800      	cmp	r0, #0
 8007008:	f001 83c9 	beq.w	800879e <forward_lstm+0x184a>
 800700c:	6945      	ldr	r5, [r0, #20]
 800700e:	6901      	ldr	r1, [r0, #16]
 8007010:	ee09 5a90 	vmov	s19, r5
 8007014:	6985      	ldr	r5, [r0, #24]
 8007016:	ee0a 1a90 	vmov	s21, r1
 800701a:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 800701e:	ee0a 5a10 	vmov	s20, r5
 8007022:	b119      	cbz	r1, 800702c <forward_lstm+0xd8>
 8007024:	6989      	ldr	r1, [r1, #24]
 8007026:	6889      	ldr	r1, [r1, #8]
 8007028:	ee0a 1a90 	vmov	s21, r1
 800702c:	ee19 1a90 	vmov	r1, s19
 8007030:	b119      	cbz	r1, 800703a <forward_lstm+0xe6>
 8007032:	6989      	ldr	r1, [r1, #24]
 8007034:	6889      	ldr	r1, [r1, #8]
 8007036:	ee09 1a90 	vmov	s19, r1
 800703a:	ee1a 1a10 	vmov	r1, s20
 800703e:	b119      	cbz	r1, 8007048 <forward_lstm+0xf4>
 8007040:	6989      	ldr	r1, [r1, #24]
 8007042:	6889      	ldr	r1, [r1, #8]
 8007044:	ee0a 1a10 	vmov	s20, r1
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	d003      	beq.n	8007056 <forward_lstm+0x102>
 800704e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007052:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8007056:	b108      	cbz	r0, 800705c <forward_lstm+0x108>
 8007058:	6981      	ldr	r1, [r0, #24]
 800705a:	6888      	ldr	r0, [r1, #8]
 800705c:	2a03      	cmp	r2, #3
 800705e:	f001 83b0 	beq.w	80087c2 <forward_lstm+0x186e>
 8007062:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007066:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800706a:	f1ba 0f00 	cmp.w	sl, #0
 800706e:	d001      	beq.n	8007074 <forward_lstm+0x120>
 8007070:	f8da a000 	ldr.w	sl, [sl]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 800707a:	4423      	add	r3, r4
 800707c:	4621      	mov	r1, r4
 800707e:	f1ae 0404 	sub.w	r4, lr, #4
 8007082:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 8007086:	60fc      	str	r4, [r7, #12]
 8007088:	3e04      	subs	r6, #4
 800708a:	f1ce 0e04 	rsb	lr, lr, #4
 800708e:	1f15      	subs	r5, r2, #4
 8007090:	4699      	mov	r9, r3
 8007092:	e016      	b.n	80070c2 <forward_lstm+0x16e>
 8007094:	4423      	add	r3, r4
 8007096:	f853 200e 	ldr.w	r2, [r3, lr]
 800709a:	b1c2      	cbz	r2, 80070ce <forward_lstm+0x17a>
 800709c:	68d3      	ldr	r3, [r2, #12]
 800709e:	f846 2f04 	str.w	r2, [r6, #4]!
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	6992      	ldr	r2, [r2, #24]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	6893      	ldr	r3, [r2, #8]
 80070aa:	f845 3f04 	str.w	r3, [r5, #4]!
 80070ae:	bf8c      	ite	hi
 80070b0:	2301      	movhi	r3, #1
 80070b2:	2300      	movls	r3, #0
 80070b4:	f801 3b01 	strb.w	r3, [r1], #1
 80070b8:	bf8c      	ite	hi
 80070ba:	4643      	movhi	r3, r8
 80070bc:	2300      	movls	r3, #0
 80070be:	f844 3f04 	str.w	r3, [r4, #4]!
 80070c2:	4549      	cmp	r1, r9
 80070c4:	d003      	beq.n	80070ce <forward_lstm+0x17a>
 80070c6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e2      	bne.n	8007094 <forward_lstm+0x140>
 80070ce:	f8da 3018 	ldr.w	r3, [sl, #24]
 80070d2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80070d6:	689d      	ldr	r5, [r3, #8]
 80070d8:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80070dc:	f8db 3018 	ldr.w	r3, [fp, #24]
 80070e0:	6989      	ldr	r1, [r1, #24]
 80070e2:	69a4      	ldr	r4, [r4, #24]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	667b      	str	r3, [r7, #100]	; 0x64
 80070e8:	688b      	ldr	r3, [r1, #8]
 80070ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80070ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80070f0:	68a3      	ldr	r3, [r4, #8]
 80070f2:	663b      	str	r3, [r7, #96]	; 0x60
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6992      	ldr	r2, [r2, #24]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	6892      	ldr	r2, [r2, #8]
 80070fc:	66ba      	str	r2, [r7, #104]	; 0x68
 80070fe:	ee19 1a10 	vmov	r1, s18
 8007102:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8007106:	186a      	adds	r2, r5, r1
 8007108:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 800710c:	4421      	add	r1, r4
 800710e:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 8007112:	673d      	str	r5, [r7, #112]	; 0x70
 8007114:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007118:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800711c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007120:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	f041 8264 	bne.w	80085f2 <forward_lstm+0x169e>
 800712a:	4629      	mov	r1, r5
 800712c:	2800      	cmp	r0, #0
 800712e:	f001 826e 	beq.w	800860e <forward_lstm+0x16ba>
 8007132:	ee19 2a10 	vmov	r2, s18
 8007136:	f001 fcc7 	bl	8008ac8 <st_int8_copy>
 800713a:	ee19 2a10 	vmov	r2, s18
 800713e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8007142:	4648      	mov	r0, r9
 8007144:	f1b9 0f00 	cmp.w	r9, #0
 8007148:	f001 826f 	beq.w	800862a <forward_lstm+0x16d6>
 800714c:	f001 fcbc 	bl	8008ac8 <st_int8_copy>
 8007150:	ee19 2a10 	vmov	r2, s18
 8007154:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007158:	2000      	movs	r0, #0
 800715a:	f001 fc59 	bl	8008a10 <st_int8_fill>
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4bab      	ldr	r3, [pc, #684]	; (8007410 <forward_lstm+0x4bc>)
 8007162:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007164:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8007168:	2900      	cmp	r1, #0
 800716a:	bf08      	it	eq
 800716c:	4619      	moveq	r1, r3
 800716e:	6479      	str	r1, [r7, #68]	; 0x44
 8007170:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007172:	2900      	cmp	r1, #0
 8007174:	bf08      	it	eq
 8007176:	4619      	moveq	r1, r3
 8007178:	67f9      	str	r1, [r7, #124]	; 0x7c
 800717a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800717c:	2900      	cmp	r1, #0
 800717e:	bf08      	it	eq
 8007180:	4619      	moveq	r1, r3
 8007182:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8007186:	6439      	str	r1, [r7, #64]	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	f001 8301 	beq.w	8008790 <forward_lstm+0x183c>
 800718e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007190:	3b01      	subs	r3, #1
 8007192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007196:	f04f 33ff 	mov.w	r3, #4294967295
 800719a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800719c:	4613      	mov	r3, r2
 800719e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a2:	b1b3      	cbz	r3, 80071d2 <forward_lstm+0x27e>
 80071a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071a8:	899d      	ldrh	r5, [r3, #12]
 80071aa:	b195      	cbz	r5, 80071d2 <forward_lstm+0x27e>
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80071b6:	1e5e      	subs	r6, r3, #1
 80071b8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80071bc:	6811      	ldr	r1, [r2, #0]
 80071be:	fb03 f406 	mul.w	r4, r3, r6
 80071c2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071c6:	f842 1b04 	str.w	r1, [r2], #4
 80071ca:	425b      	negs	r3, r3
 80071cc:	4295      	cmp	r5, r2
 80071ce:	6003      	str	r3, [r0, #0]
 80071d0:	d1f2      	bne.n	80071b8 <forward_lstm+0x264>
 80071d2:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 80071d4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80071d6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80071da:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8007418 <forward_lstm+0x4c4>
 80071de:	b2a9      	uxth	r1, r5
 80071e0:	fa1f f288 	uxth.w	r2, r8
 80071e4:	f1a1 0310 	sub.w	r3, r1, #16
 80071e8:	0096      	lsls	r6, r2, #2
 80071ea:	091b      	lsrs	r3, r3, #4
 80071ec:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80071f0:	3301      	adds	r3, #1
 80071f2:	fb06 f101 	mul.w	r1, r6, r1
 80071f6:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 80071fa:	019b      	lsls	r3, r3, #6
 80071fc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80071fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007206:	f1a2 0310 	sub.w	r3, r2, #16
 800720a:	fb02 f202 	mul.w	r2, r2, r2
 800720e:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8007212:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8007216:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8007218:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8007222:	1c5c      	adds	r4, r3, #1
 8007224:	019b      	lsls	r3, r3, #6
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	01a3      	lsls	r3, r4, #6
 800722a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800722e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007230:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 8007234:	440b      	add	r3, r1
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800723a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800723e:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8007242:	440b      	add	r3, r1
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38
 8007246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007248:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
 800724e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007250:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
 8007258:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800725c:	4633      	mov	r3, r6
 800725e:	1996      	adds	r6, r2, r6
 8007260:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007262:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8007264:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8007268:	441e      	add	r6, r3
 800726a:	62be      	str	r6, [r7, #40]	; 0x28
 800726c:	18e6      	adds	r6, r4, r3
 800726e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007270:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8007274:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8007278:	ea04 0600 	and.w	r6, r4, r0
 800727c:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8007280:	ea08 0600 	and.w	r6, r8, r0
 8007284:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8007288:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800728c:	0089      	lsls	r1, r1, #2
 800728e:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007292:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007294:	00ad      	lsls	r5, r5, #2
 8007296:	fb05 f101 	mul.w	r1, r5, r1
 800729a:	61b9      	str	r1, [r7, #24]
 800729c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80072a0:	fb05 f501 	mul.w	r5, r5, r1
 80072a4:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 80072a8:	4661      	mov	r1, ip
 80072aa:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 80072ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80072b2:	61fd      	str	r5, [r7, #28]
 80072b4:	4419      	add	r1, r3
 80072b6:	6279      	str	r1, [r7, #36]	; 0x24
 80072b8:	18d1      	adds	r1, r2, r3
 80072ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80072be:	f008 060f 	and.w	r6, r8, #15
 80072c2:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ce:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80072d2:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80072d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80072da:	4413      	add	r3, r2
 80072dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072e4:	4b4b      	ldr	r3, [pc, #300]	; (8007414 <forward_lstm+0x4c0>)
 80072e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072ea:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 80072ee:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 80072f2:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 80072f6:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 80072fa:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 80072fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007300:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800730c:	4403      	add	r3, r0
 800730e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007312:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800731a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800731e:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8007322:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8007326:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 800732a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800732e:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007330:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8007334:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8007338:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800733c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8007340:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8007344:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8007348:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 800734c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007350:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8007354:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007358:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 800735c:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8007360:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8007364:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8007368:	2a00      	cmp	r2, #0
 800736a:	f001 81a2 	beq.w	80086b2 <forward_lstm+0x175e>
 800736e:	6a38      	ldr	r0, [r7, #32]
 8007370:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007378:	46a9      	mov	r9, r5
 800737a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800737c:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8007380:	3080      	adds	r0, #128	; 0x80
 8007382:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007384:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8007388:	4410      	add	r0, r2
 800738a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800738c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800738e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007392:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8007396:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800739a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800739e:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 80073a2:	1955      	adds	r5, r2, r5
 80073a4:	469e      	mov	lr, r3
 80073a6:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 80073aa:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80073ae:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 80073b2:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ba:	442a      	add	r2, r5
 80073bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073be:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80073c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80073da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073dc:	f002 020f 	and.w	r2, r2, #15
 80073e0:	46a0      	mov	r8, r4
 80073e2:	468c      	mov	ip, r1
 80073e4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80073e8:	469a      	mov	sl, r3
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007418 <forward_lstm+0x4c4>
 80073f2:	ecac 8a01 	vstmia	ip!, {s16}
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f001 8154 	beq.w	80086a4 <forward_lstm+0x1750>
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007400:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007404:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007408:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 800740c:	e006      	b.n	800741c <forward_lstm+0x4c8>
 800740e:	bf00      	nop
 8007410:	08006f41 	.word	0x08006f41
 8007414:	01821040 	.word	0x01821040
 8007418:	00000000 	.word	0x00000000
 800741c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007420:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007424:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007428:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800742c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007430:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007434:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007438:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800743c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8007440:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007444:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8007448:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800744c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007450:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007454:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007458:	eee6 7a26 	vfma.f32	s15, s12, s13
 800745c:	3910      	subs	r1, #16
 800745e:	290f      	cmp	r1, #15
 8007460:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007464:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007468:	eee5 7a86 	vfma.f32	s15, s11, s12
 800746c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007470:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007474:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007478:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800747c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007480:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007484:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007488:	eee5 7a25 	vfma.f32	s15, s10, s11
 800748c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007490:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007494:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007498:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800749c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80074a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80074a4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80074a8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80074ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074b0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80074b4:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80074b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80074bc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80074c0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80074c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074c8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80074cc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80074d0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80074d4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80074d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80074dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80074e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ec:	d896      	bhi.n	800741c <forward_lstm+0x4c8>
 80074ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f2:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 80074f6:	4453      	add	r3, sl
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d076      	beq.n	80075ea <forward_lstm+0x696>
 80074fc:	edd4 6a00 	vldr	s13, [r4]
 8007500:	edd3 7a00 	vldr	s15, [r3]
 8007504:	2d01      	cmp	r5, #1
 8007506:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800750a:	d06e      	beq.n	80075ea <forward_lstm+0x696>
 800750c:	edd3 6a01 	vldr	s13, [r3, #4]
 8007510:	edd4 7a01 	vldr	s15, [r4, #4]
 8007514:	2d02      	cmp	r5, #2
 8007516:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800751a:	d066      	beq.n	80075ea <forward_lstm+0x696>
 800751c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007520:	edd4 7a02 	vldr	s15, [r4, #8]
 8007524:	2d03      	cmp	r5, #3
 8007526:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800752a:	d05e      	beq.n	80075ea <forward_lstm+0x696>
 800752c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007530:	edd4 7a03 	vldr	s15, [r4, #12]
 8007534:	2d04      	cmp	r5, #4
 8007536:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800753a:	d056      	beq.n	80075ea <forward_lstm+0x696>
 800753c:	edd3 6a04 	vldr	s13, [r3, #16]
 8007540:	edd4 7a04 	vldr	s15, [r4, #16]
 8007544:	2d05      	cmp	r5, #5
 8007546:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800754a:	d04e      	beq.n	80075ea <forward_lstm+0x696>
 800754c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007550:	edd4 7a05 	vldr	s15, [r4, #20]
 8007554:	2d06      	cmp	r5, #6
 8007556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800755a:	d046      	beq.n	80075ea <forward_lstm+0x696>
 800755c:	edd3 6a06 	vldr	s13, [r3, #24]
 8007560:	edd4 7a06 	vldr	s15, [r4, #24]
 8007564:	2d07      	cmp	r5, #7
 8007566:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800756a:	d03e      	beq.n	80075ea <forward_lstm+0x696>
 800756c:	edd3 6a07 	vldr	s13, [r3, #28]
 8007570:	edd4 7a07 	vldr	s15, [r4, #28]
 8007574:	2d08      	cmp	r5, #8
 8007576:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800757a:	d036      	beq.n	80075ea <forward_lstm+0x696>
 800757c:	edd3 6a08 	vldr	s13, [r3, #32]
 8007580:	edd4 7a08 	vldr	s15, [r4, #32]
 8007584:	2d09      	cmp	r5, #9
 8007586:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800758a:	d02e      	beq.n	80075ea <forward_lstm+0x696>
 800758c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007590:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8007594:	2d0a      	cmp	r5, #10
 8007596:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800759a:	d026      	beq.n	80075ea <forward_lstm+0x696>
 800759c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80075a0:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80075a4:	2d0b      	cmp	r5, #11
 80075a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075aa:	d01e      	beq.n	80075ea <forward_lstm+0x696>
 80075ac:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80075b0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075ba:	d016      	beq.n	80075ea <forward_lstm+0x696>
 80075bc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80075c0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80075c4:	f1b5 020d 	subs.w	r2, r5, #13
 80075c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075cc:	d00d      	beq.n	80075ea <forward_lstm+0x696>
 80075ce:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80075d2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80075d6:	2a01      	cmp	r2, #1
 80075d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075dc:	d005      	beq.n	80075ea <forward_lstm+0x696>
 80075de:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80075e2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80075e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075ee:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8007418 <forward_lstm+0x4c4>
 80075f2:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f001 804c 	beq.w	8008694 <forward_lstm+0x1740>
 80075fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007600:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007604:	3340      	adds	r3, #64	; 0x40
 8007606:	3240      	adds	r2, #64	; 0x40
 8007608:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800760c:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8007610:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007614:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007618:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 800761c:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8007620:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8007624:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007628:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 800762c:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8007630:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007634:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8007638:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800763c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007640:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8007644:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007648:	3340      	adds	r3, #64	; 0x40
 800764a:	3240      	adds	r2, #64	; 0x40
 800764c:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007650:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007654:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007658:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 800765c:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007660:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007664:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007668:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 800766c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007670:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007674:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007678:	eee5 7a86 	vfma.f32	s15, s11, s12
 800767c:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007680:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007684:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007688:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800768c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007690:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007694:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8007698:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800769c:	eee4 7a85 	vfma.f32	s15, s9, s10
 80076a0:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80076a4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80076a8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80076ac:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80076b0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80076b4:	eee0 7a81 	vfma.f32	s15, s1, s2
 80076b8:	4298      	cmp	r0, r3
 80076ba:	eee1 7a82 	vfma.f32	s15, s3, s4
 80076be:	eee2 7a83 	vfma.f32	s15, s5, s6
 80076c2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80076c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80076ca:	eee5 7a86 	vfma.f32	s15, s11, s12
 80076ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80076d2:	d199      	bne.n	8007608 <forward_lstm+0x6b4>
 80076d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80076dc:	189a      	adds	r2, r3, r2
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d078      	beq.n	80077d4 <forward_lstm+0x880>
 80076e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80076e6:	4633      	mov	r3, r6
 80076e8:	ed91 6a00 	vldr	s12, [r1]
 80076ec:	edd2 7a00 	vldr	s15, [r2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80076f6:	d06d      	beq.n	80077d4 <forward_lstm+0x880>
 80076f8:	ed91 6a01 	vldr	s12, [r1, #4]
 80076fc:	edd2 7a01 	vldr	s15, [r2, #4]
 8007700:	2b02      	cmp	r3, #2
 8007702:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007706:	d065      	beq.n	80077d4 <forward_lstm+0x880>
 8007708:	ed91 6a02 	vldr	s12, [r1, #8]
 800770c:	edd2 7a02 	vldr	s15, [r2, #8]
 8007710:	2b03      	cmp	r3, #3
 8007712:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007716:	d05d      	beq.n	80077d4 <forward_lstm+0x880>
 8007718:	ed91 6a03 	vldr	s12, [r1, #12]
 800771c:	edd2 7a03 	vldr	s15, [r2, #12]
 8007720:	2b04      	cmp	r3, #4
 8007722:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007726:	d055      	beq.n	80077d4 <forward_lstm+0x880>
 8007728:	ed91 6a04 	vldr	s12, [r1, #16]
 800772c:	edd2 7a04 	vldr	s15, [r2, #16]
 8007730:	2b05      	cmp	r3, #5
 8007732:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007736:	d04d      	beq.n	80077d4 <forward_lstm+0x880>
 8007738:	ed91 6a05 	vldr	s12, [r1, #20]
 800773c:	edd2 7a05 	vldr	s15, [r2, #20]
 8007740:	2b06      	cmp	r3, #6
 8007742:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007746:	d045      	beq.n	80077d4 <forward_lstm+0x880>
 8007748:	ed91 6a06 	vldr	s12, [r1, #24]
 800774c:	edd2 7a06 	vldr	s15, [r2, #24]
 8007750:	2b07      	cmp	r3, #7
 8007752:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007756:	d03d      	beq.n	80077d4 <forward_lstm+0x880>
 8007758:	ed91 6a07 	vldr	s12, [r1, #28]
 800775c:	edd2 7a07 	vldr	s15, [r2, #28]
 8007760:	2b08      	cmp	r3, #8
 8007762:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007766:	d035      	beq.n	80077d4 <forward_lstm+0x880>
 8007768:	ed91 6a08 	vldr	s12, [r1, #32]
 800776c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007770:	2b09      	cmp	r3, #9
 8007772:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007776:	d02d      	beq.n	80077d4 <forward_lstm+0x880>
 8007778:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800777c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007780:	2b0a      	cmp	r3, #10
 8007782:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007786:	d025      	beq.n	80077d4 <forward_lstm+0x880>
 8007788:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800778c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007790:	2b0b      	cmp	r3, #11
 8007792:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007796:	d01d      	beq.n	80077d4 <forward_lstm+0x880>
 8007798:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800779c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077a6:	d015      	beq.n	80077d4 <forward_lstm+0x880>
 80077a8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80077ac:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80077b0:	3b0d      	subs	r3, #13
 80077b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077b6:	d00d      	beq.n	80077d4 <forward_lstm+0x880>
 80077b8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80077bc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077c6:	d005      	beq.n	80077d4 <forward_lstm+0x880>
 80077c8:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80077cc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80077d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077d8:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 80077dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80077e0:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80077e4:	ecb3 6a01 	vldmia	r3!, {s12}
 80077e8:	edd9 6a00 	vldr	s13, [r9]
 80077ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077f4:	ecf3 7a01 	vldmia	r3!, {s15}
 80077f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007808:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800780c:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8007afc <forward_lstm+0xba8>
 8007810:	ed88 8a00 	vstr	s16, [r8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8739 	beq.w	800868c <forward_lstm+0x1738>
 800781a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007822:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007826:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800782a:	3340      	adds	r3, #64	; 0x40
 800782c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007830:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007834:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007838:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800783c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007840:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007844:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007848:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800784c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8007850:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007854:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8007858:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800785c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007860:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007864:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007868:	eee6 7a26 	vfma.f32	s15, s12, s13
 800786c:	3910      	subs	r1, #16
 800786e:	290f      	cmp	r1, #15
 8007870:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007874:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007878:	eee5 7a86 	vfma.f32	s15, s11, s12
 800787c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007880:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007884:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007888:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800788c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007890:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007894:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007898:	eee5 7a25 	vfma.f32	s15, s10, s11
 800789c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80078a0:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80078a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078a8:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80078ac:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80078b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80078b4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80078b8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80078bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078c0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80078c4:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80078c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078cc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80078d0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80078d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078d8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80078dc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80078e0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80078e4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80078e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80078ec:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078fc:	d896      	bhi.n	800782c <forward_lstm+0x8d8>
 80078fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007902:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007906:	4413      	add	r3, r2
 8007908:	2d00      	cmp	r5, #0
 800790a:	d076      	beq.n	80079fa <forward_lstm+0xaa6>
 800790c:	edd4 6a00 	vldr	s13, [r4]
 8007910:	edd3 7a00 	vldr	s15, [r3]
 8007914:	2d01      	cmp	r5, #1
 8007916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800791a:	d06e      	beq.n	80079fa <forward_lstm+0xaa6>
 800791c:	edd4 6a01 	vldr	s13, [r4, #4]
 8007920:	edd3 7a01 	vldr	s15, [r3, #4]
 8007924:	2d02      	cmp	r5, #2
 8007926:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800792a:	d066      	beq.n	80079fa <forward_lstm+0xaa6>
 800792c:	edd4 6a02 	vldr	s13, [r4, #8]
 8007930:	edd3 7a02 	vldr	s15, [r3, #8]
 8007934:	2d03      	cmp	r5, #3
 8007936:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800793a:	d05e      	beq.n	80079fa <forward_lstm+0xaa6>
 800793c:	edd4 6a03 	vldr	s13, [r4, #12]
 8007940:	edd3 7a03 	vldr	s15, [r3, #12]
 8007944:	2d04      	cmp	r5, #4
 8007946:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800794a:	d056      	beq.n	80079fa <forward_lstm+0xaa6>
 800794c:	edd4 6a04 	vldr	s13, [r4, #16]
 8007950:	edd3 7a04 	vldr	s15, [r3, #16]
 8007954:	2d05      	cmp	r5, #5
 8007956:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800795a:	d04e      	beq.n	80079fa <forward_lstm+0xaa6>
 800795c:	edd4 6a05 	vldr	s13, [r4, #20]
 8007960:	edd3 7a05 	vldr	s15, [r3, #20]
 8007964:	2d06      	cmp	r5, #6
 8007966:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800796a:	d046      	beq.n	80079fa <forward_lstm+0xaa6>
 800796c:	edd4 6a06 	vldr	s13, [r4, #24]
 8007970:	edd3 7a06 	vldr	s15, [r3, #24]
 8007974:	2d07      	cmp	r5, #7
 8007976:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800797a:	d03e      	beq.n	80079fa <forward_lstm+0xaa6>
 800797c:	edd4 6a07 	vldr	s13, [r4, #28]
 8007980:	edd3 7a07 	vldr	s15, [r3, #28]
 8007984:	2d08      	cmp	r5, #8
 8007986:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800798a:	d036      	beq.n	80079fa <forward_lstm+0xaa6>
 800798c:	edd4 6a08 	vldr	s13, [r4, #32]
 8007990:	edd3 7a08 	vldr	s15, [r3, #32]
 8007994:	2d09      	cmp	r5, #9
 8007996:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800799a:	d02e      	beq.n	80079fa <forward_lstm+0xaa6>
 800799c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80079a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80079a4:	2d0a      	cmp	r5, #10
 80079a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079aa:	d026      	beq.n	80079fa <forward_lstm+0xaa6>
 80079ac:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80079b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80079b4:	2d0b      	cmp	r5, #11
 80079b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079ba:	d01e      	beq.n	80079fa <forward_lstm+0xaa6>
 80079bc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80079c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80079c4:	2d0c      	cmp	r5, #12
 80079c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079ca:	d016      	beq.n	80079fa <forward_lstm+0xaa6>
 80079cc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80079d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80079d4:	f1b5 020d 	subs.w	r2, r5, #13
 80079d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079dc:	d00d      	beq.n	80079fa <forward_lstm+0xaa6>
 80079de:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80079e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80079e6:	2a01      	cmp	r2, #1
 80079e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079ec:	d005      	beq.n	80079fa <forward_lstm+0xaa6>
 80079ee:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80079f2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80079f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079fe:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8007afc <forward_lstm+0xba8>
 8007a02:	ed88 7a00 	vstr	s14, [r8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8638 	beq.w	800867c <forward_lstm+0x1728>
 8007a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007a14:	3340      	adds	r3, #64	; 0x40
 8007a16:	3240      	adds	r2, #64	; 0x40
 8007a18:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8007a1c:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8007a20:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007a24:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007a28:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8007a2c:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8007a30:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8007a34:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007a38:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8007a3c:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8007a40:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007a44:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8007a48:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007a4c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007a50:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8007a54:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a58:	3340      	adds	r3, #64	; 0x40
 8007a5a:	3240      	adds	r2, #64	; 0x40
 8007a5c:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007a60:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007a64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a68:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8007a6c:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007a70:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007a74:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007a78:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8007a7c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007a80:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007a84:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007a88:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a8c:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007a90:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007a94:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007a98:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8007a9c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007aa0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007aa4:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8007aa8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007aac:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ab0:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8007ab4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007ab8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007abc:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007ac0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007ac4:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007ac8:	4283      	cmp	r3, r0
 8007aca:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007ace:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007ad2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ad6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ada:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007ade:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007ae2:	d199      	bne.n	8007a18 <forward_lstm+0xac4>
 8007ae4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007aec:	189a      	adds	r2, r3, r2
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d07c      	beq.n	8007bec <forward_lstm+0xc98>
 8007af2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007af6:	4633      	mov	r3, r6
 8007af8:	e002      	b.n	8007b00 <forward_lstm+0xbac>
 8007afa:	bf00      	nop
 8007afc:	00000000 	.word	0x00000000
 8007b00:	ed91 6a00 	vldr	s12, [r1]
 8007b04:	edd2 7a00 	vldr	s15, [r2]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b0e:	d06d      	beq.n	8007bec <forward_lstm+0xc98>
 8007b10:	ed91 6a01 	vldr	s12, [r1, #4]
 8007b14:	edd2 7a01 	vldr	s15, [r2, #4]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b1e:	d065      	beq.n	8007bec <forward_lstm+0xc98>
 8007b20:	ed91 6a02 	vldr	s12, [r1, #8]
 8007b24:	edd2 7a02 	vldr	s15, [r2, #8]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b2e:	d05d      	beq.n	8007bec <forward_lstm+0xc98>
 8007b30:	ed91 6a03 	vldr	s12, [r1, #12]
 8007b34:	edd2 7a03 	vldr	s15, [r2, #12]
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b3e:	d055      	beq.n	8007bec <forward_lstm+0xc98>
 8007b40:	ed91 6a04 	vldr	s12, [r1, #16]
 8007b44:	edd2 7a04 	vldr	s15, [r2, #16]
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b4e:	d04d      	beq.n	8007bec <forward_lstm+0xc98>
 8007b50:	ed91 6a05 	vldr	s12, [r1, #20]
 8007b54:	edd2 7a05 	vldr	s15, [r2, #20]
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b5e:	d045      	beq.n	8007bec <forward_lstm+0xc98>
 8007b60:	ed91 6a06 	vldr	s12, [r1, #24]
 8007b64:	edd2 7a06 	vldr	s15, [r2, #24]
 8007b68:	2b07      	cmp	r3, #7
 8007b6a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b6e:	d03d      	beq.n	8007bec <forward_lstm+0xc98>
 8007b70:	ed91 6a07 	vldr	s12, [r1, #28]
 8007b74:	edd2 7a07 	vldr	s15, [r2, #28]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b7e:	d035      	beq.n	8007bec <forward_lstm+0xc98>
 8007b80:	ed91 6a08 	vldr	s12, [r1, #32]
 8007b84:	edd2 7a08 	vldr	s15, [r2, #32]
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b8e:	d02d      	beq.n	8007bec <forward_lstm+0xc98>
 8007b90:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8007b94:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007b98:	2b0a      	cmp	r3, #10
 8007b9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007b9e:	d025      	beq.n	8007bec <forward_lstm+0xc98>
 8007ba0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8007ba4:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007ba8:	2b0b      	cmp	r3, #11
 8007baa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bae:	d01d      	beq.n	8007bec <forward_lstm+0xc98>
 8007bb0:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8007bb4:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007bb8:	2b0c      	cmp	r3, #12
 8007bba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bbe:	d015      	beq.n	8007bec <forward_lstm+0xc98>
 8007bc0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8007bc4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007bc8:	3b0d      	subs	r3, #13
 8007bca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bce:	d00d      	beq.n	8007bec <forward_lstm+0xc98>
 8007bd0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8007bd4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bde:	d005      	beq.n	8007bec <forward_lstm+0xc98>
 8007be0:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8007be4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007be8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bf0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007bf4:	f109 0904 	add.w	r9, r9, #4
 8007bf8:	ed88 7a00 	vstr	s14, [r8]
 8007bfc:	edd3 7a00 	vldr	s15, [r3]
 8007c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c04:	ecb3 6a01 	vldmia	r3!, {s12}
 8007c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c10:	ecf3 6a01 	vldmia	r3!, {s13}
 8007c14:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007c18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007c24:	eca8 7a01 	vstmia	r8!, {s14}
 8007c28:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8007afc <forward_lstm+0xba8>
 8007c2c:	ed8e 8a00 	vstr	s16, [lr]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 851f 	beq.w	8008674 <forward_lstm+0x1720>
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007c3e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c46:	3340      	adds	r3, #64	; 0x40
 8007c48:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007c4c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007c50:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007c54:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8007c58:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007c5c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007c60:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007c64:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8007c68:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8007c6c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007c70:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8007c74:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007c78:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007c7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c80:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007c84:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c88:	3910      	subs	r1, #16
 8007c8a:	290f      	cmp	r1, #15
 8007c8c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007c90:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007c94:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c98:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007c9c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007ca0:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007ca4:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007ca8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007cac:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007cb0:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007cb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007cb8:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007cbc:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007cc0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cc4:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007cc8:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007ccc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007cd0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007cd4:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007cd8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007cdc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007ce0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007ce4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ce8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007cec:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007cf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cf4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007cf8:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007cfc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007d00:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007d04:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007d08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007d0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007d10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d18:	d896      	bhi.n	8007c48 <forward_lstm+0xcf4>
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007d22:	4413      	add	r3, r2
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	d076      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d28:	edd4 6a00 	vldr	s13, [r4]
 8007d2c:	edd3 7a00 	vldr	s15, [r3]
 8007d30:	2d01      	cmp	r5, #1
 8007d32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d36:	d06e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d38:	edd4 6a01 	vldr	s13, [r4, #4]
 8007d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d40:	2d02      	cmp	r5, #2
 8007d42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d46:	d066      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d48:	edd4 6a02 	vldr	s13, [r4, #8]
 8007d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d50:	2d03      	cmp	r5, #3
 8007d52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d56:	d05e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d58:	edd4 6a03 	vldr	s13, [r4, #12]
 8007d5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d60:	2d04      	cmp	r5, #4
 8007d62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d66:	d056      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d68:	edd4 6a04 	vldr	s13, [r4, #16]
 8007d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d70:	2d05      	cmp	r5, #5
 8007d72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d76:	d04e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d78:	edd4 6a05 	vldr	s13, [r4, #20]
 8007d7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d80:	2d06      	cmp	r5, #6
 8007d82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d86:	d046      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d88:	edd4 6a06 	vldr	s13, [r4, #24]
 8007d8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007d90:	2d07      	cmp	r5, #7
 8007d92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d96:	d03e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007d98:	edd4 6a07 	vldr	s13, [r4, #28]
 8007d9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8007da0:	2d08      	cmp	r5, #8
 8007da2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007da6:	d036      	beq.n	8007e16 <forward_lstm+0xec2>
 8007da8:	edd4 6a08 	vldr	s13, [r4, #32]
 8007dac:	edd3 7a08 	vldr	s15, [r3, #32]
 8007db0:	2d09      	cmp	r5, #9
 8007db2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007db6:	d02e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007db8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8007dbc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007dc0:	2d0a      	cmp	r5, #10
 8007dc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dc6:	d026      	beq.n	8007e16 <forward_lstm+0xec2>
 8007dc8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8007dcc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007dd0:	2d0b      	cmp	r5, #11
 8007dd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dd6:	d01e      	beq.n	8007e16 <forward_lstm+0xec2>
 8007dd8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8007ddc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007de0:	2d0c      	cmp	r5, #12
 8007de2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007de6:	d016      	beq.n	8007e16 <forward_lstm+0xec2>
 8007de8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007dec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007df0:	f1b5 020d 	subs.w	r2, r5, #13
 8007df4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007df8:	d00d      	beq.n	8007e16 <forward_lstm+0xec2>
 8007dfa:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8007dfe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e08:	d005      	beq.n	8007e16 <forward_lstm+0xec2>
 8007e0a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8007e0e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8007e12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e1a:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8007afc <forward_lstm+0xba8>
 8007e1e:	ed8e 7a00 	vstr	s14, [lr]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8420 	beq.w	8008668 <forward_lstm+0x1714>
 8007e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2c:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 8007e30:	3340      	adds	r3, #64	; 0x40
 8007e32:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8007e36:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8007e3a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007e3e:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007e42:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8007e46:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8007e4a:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8007e4e:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007e52:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8007e56:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8007e5a:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007e5e:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8007e62:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007e66:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007e6a:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8007e6e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e72:	3340      	adds	r3, #64	; 0x40
 8007e74:	3240      	adds	r2, #64	; 0x40
 8007e76:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007e7a:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007e7e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e82:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8007e86:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007e8a:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007e8e:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007e92:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8007e96:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e9a:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007e9e:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007ea2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007ea6:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007eaa:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007eae:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007eb2:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8007eb6:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007eba:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ebe:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8007ec2:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007ec6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007eca:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8007ece:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007ed2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007ed6:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007eda:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007ede:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007ee8:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007eec:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ef0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ef4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007ef8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007efc:	d199      	bne.n	8007e32 <forward_lstm+0xede>
 8007efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f02:	eb0b 0203 	add.w	r2, fp, r3
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d078      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f0a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007f0e:	4633      	mov	r3, r6
 8007f10:	ed91 6a00 	vldr	s12, [r1]
 8007f14:	edd2 7a00 	vldr	s15, [r2]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f1e:	d06d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f20:	ed91 6a01 	vldr	s12, [r1, #4]
 8007f24:	edd2 7a01 	vldr	s15, [r2, #4]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f2e:	d065      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f30:	ed91 6a02 	vldr	s12, [r1, #8]
 8007f34:	edd2 7a02 	vldr	s15, [r2, #8]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f3e:	d05d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f40:	ed91 6a03 	vldr	s12, [r1, #12]
 8007f44:	edd2 7a03 	vldr	s15, [r2, #12]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f4e:	d055      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f50:	ed91 6a04 	vldr	s12, [r1, #16]
 8007f54:	edd2 7a04 	vldr	s15, [r2, #16]
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f5e:	d04d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f60:	ed91 6a05 	vldr	s12, [r1, #20]
 8007f64:	edd2 7a05 	vldr	s15, [r2, #20]
 8007f68:	2b06      	cmp	r3, #6
 8007f6a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f6e:	d045      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f70:	ed91 6a06 	vldr	s12, [r1, #24]
 8007f74:	edd2 7a06 	vldr	s15, [r2, #24]
 8007f78:	2b07      	cmp	r3, #7
 8007f7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f7e:	d03d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f80:	ed91 6a07 	vldr	s12, [r1, #28]
 8007f84:	edd2 7a07 	vldr	s15, [r2, #28]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f8e:	d035      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007f90:	ed91 6a08 	vldr	s12, [r1, #32]
 8007f94:	edd2 7a08 	vldr	s15, [r2, #32]
 8007f98:	2b09      	cmp	r3, #9
 8007f9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f9e:	d02d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007fa0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8007fa4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007fa8:	2b0a      	cmp	r3, #10
 8007faa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fae:	d025      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007fb0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8007fb4:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007fb8:	2b0b      	cmp	r3, #11
 8007fba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fbe:	d01d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007fc0:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8007fc4:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fce:	d015      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007fd0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8007fd4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007fd8:	3b0d      	subs	r3, #13
 8007fda:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fde:	d00d      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007fe0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8007fe4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fee:	d005      	beq.n	8007ffc <forward_lstm+0x10a8>
 8007ff0:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8007ff4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007ff8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ffc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008000:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008008:	ee37 7a26 	vadd.f32	s14, s14, s13
 800800c:	449a      	add	sl, r3
 800800e:	ed8e 7a00 	vstr	s14, [lr]
 8008012:	ecf2 7a01 	vldmia	r2!, {s15}
 8008016:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800801a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800801e:	4411      	add	r1, r2
 8008020:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008024:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008028:	4419      	add	r1, r3
 800802a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800802e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008032:	4411      	add	r1, r2
 8008034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008038:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800803c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8008040:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8008044:	4419      	add	r1, r3
 8008046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800804a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008052:	bf88      	it	hi
 8008054:	eeb0 7a68 	vmovhi.f32	s14, s17
 8008058:	4563      	cmp	r3, ip
 800805a:	ecae 7a01 	vstmia	lr!, {s14}
 800805e:	4493      	add	fp, r2
 8008060:	f47f a9c3 	bne.w	80073ea <forward_lstm+0x496>
 8008064:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8008068:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 800806c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8008070:	4642      	mov	r2, r8
 8008072:	4608      	mov	r0, r1
 8008074:	ee19 3a90 	vmov	r3, s19
 8008078:	46a3      	mov	fp, r4
 800807a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800807c:	47a0      	blx	r4
 800807e:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8008082:	4642      	mov	r2, r8
 8008084:	4608      	mov	r0, r1
 8008086:	ee19 3a90 	vmov	r3, s19
 800808a:	47a0      	blx	r4
 800808c:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8008090:	4642      	mov	r2, r8
 8008092:	4608      	mov	r0, r1
 8008094:	ee1a 3a90 	vmov	r3, s21
 8008098:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800809a:	47a0      	blx	r4
 800809c:	1e6a      	subs	r2, r5, #1
 800809e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080a2:	1eaa      	subs	r2, r5, #2
 80080a4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80080a8:	1eea      	subs	r2, r5, #3
 80080aa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80080ae:	1f2a      	subs	r2, r5, #4
 80080b0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80080b4:	1f6a      	subs	r2, r5, #5
 80080b6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080ba:	1faa      	subs	r2, r5, #6
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80080c2:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 80080c6:	1fea      	subs	r2, r5, #7
 80080c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080cc:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 80080d0:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 80080d4:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 80080d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080da:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 80080de:	f1a5 0208 	sub.w	r2, r5, #8
 80080e2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80080e6:	465c      	mov	r4, fp
 80080e8:	461e      	mov	r6, r3
 80080ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080ee:	ecf8 7a01 	vldmia	r8!, {s15}
 80080f2:	ecb3 6a01 	vldmia	r3!, {s12}
 80080f6:	ed9a 7a00 	vldr	s14, [sl]
 80080fa:	ecfe 6a01 	vldmia	lr!, {s13}
 80080fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008102:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800810e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 800842c <forward_lstm+0x14d8>
 8008112:	ecea 7a01 	vstmia	sl!, {s15}
 8008116:	eca1 8a01 	vstmia	r1!, {s16}
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 82a2 	beq.w	8008664 <forward_lstm+0x1710>
 8008120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008124:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 8008128:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800812c:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8008130:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8008134:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008138:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800813c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008140:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8008144:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8008148:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800814c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008150:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008154:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008158:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800815c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008160:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008164:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008168:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800816c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008170:	f1ab 0b10 	sub.w	fp, fp, #16
 8008174:	f1bb 0f0f 	cmp.w	fp, #15
 8008178:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800817c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008180:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008184:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008188:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800818c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008190:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008194:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008198:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800819c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80081a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081a4:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80081a8:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80081ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081b0:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80081b4:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80081b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80081bc:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80081c0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80081c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80081c8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80081cc:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80081d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081d4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80081d8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80081dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081e0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80081e4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80081e8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80081ec:	eee2 7a22 	vfma.f32	s15, s4, s5
 80081f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80081f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80081f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008204:	d894      	bhi.n	8008130 <forward_lstm+0x11dc>
 8008206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820a:	18c3      	adds	r3, r0, r3
 800820c:	2d00      	cmp	r5, #0
 800820e:	f000 8085 	beq.w	800831c <forward_lstm+0x13c8>
 8008212:	edd4 6a00 	vldr	s13, [r4]
 8008216:	edd3 7a00 	vldr	s15, [r3]
 800821a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800821e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008222:	2a00      	cmp	r2, #0
 8008224:	d07a      	beq.n	800831c <forward_lstm+0x13c8>
 8008226:	edd4 6a01 	vldr	s13, [r4, #4]
 800822a:	edd3 7a01 	vldr	s15, [r3, #4]
 800822e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008232:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008236:	2a00      	cmp	r2, #0
 8008238:	d070      	beq.n	800831c <forward_lstm+0x13c8>
 800823a:	edd4 6a02 	vldr	s13, [r4, #8]
 800823e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008246:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800824a:	2a00      	cmp	r2, #0
 800824c:	d066      	beq.n	800831c <forward_lstm+0x13c8>
 800824e:	edd4 6a03 	vldr	s13, [r4, #12]
 8008252:	edd3 7a03 	vldr	s15, [r3, #12]
 8008256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800825a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800825e:	2a00      	cmp	r2, #0
 8008260:	d05c      	beq.n	800831c <forward_lstm+0x13c8>
 8008262:	edd4 6a04 	vldr	s13, [r4, #16]
 8008266:	edd3 7a04 	vldr	s15, [r3, #16]
 800826a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800826e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008272:	2a00      	cmp	r2, #0
 8008274:	d052      	beq.n	800831c <forward_lstm+0x13c8>
 8008276:	edd4 6a05 	vldr	s13, [r4, #20]
 800827a:	edd3 7a05 	vldr	s15, [r3, #20]
 800827e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008282:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008286:	2a00      	cmp	r2, #0
 8008288:	d048      	beq.n	800831c <forward_lstm+0x13c8>
 800828a:	edd4 6a06 	vldr	s13, [r4, #24]
 800828e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008292:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008296:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800829a:	b3fa      	cbz	r2, 800831c <forward_lstm+0x13c8>
 800829c:	edd4 6a07 	vldr	s13, [r4, #28]
 80082a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80082a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082ac:	b3b2      	cbz	r2, 800831c <forward_lstm+0x13c8>
 80082ae:	edd4 6a08 	vldr	s13, [r4, #32]
 80082b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80082b6:	2d09      	cmp	r5, #9
 80082b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082bc:	d02e      	beq.n	800831c <forward_lstm+0x13c8>
 80082be:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80082c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082c6:	2d0a      	cmp	r5, #10
 80082c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082cc:	d026      	beq.n	800831c <forward_lstm+0x13c8>
 80082ce:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80082d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80082d6:	2d0b      	cmp	r5, #11
 80082d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082dc:	d01e      	beq.n	800831c <forward_lstm+0x13c8>
 80082de:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80082e2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80082e6:	2d0c      	cmp	r5, #12
 80082e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082ec:	d016      	beq.n	800831c <forward_lstm+0x13c8>
 80082ee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80082f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80082f6:	f1b5 020d 	subs.w	r2, r5, #13
 80082fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082fe:	d00d      	beq.n	800831c <forward_lstm+0x13c8>
 8008300:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8008304:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008308:	2a01      	cmp	r2, #1
 800830a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800830e:	d005      	beq.n	800831c <forward_lstm+0x13c8>
 8008310:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8008314:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008318:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800831c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008320:	eddf 6a42 	vldr	s13, [pc, #264]	; 800842c <forward_lstm+0x14d8>
 8008324:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8195 	beq.w	8008658 <forward_lstm+0x1704>
 800832e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008332:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 8008336:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800833a:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 800833e:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8008342:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008346:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 800834a:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800834e:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8008352:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8008356:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 800835a:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 800835e:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8008362:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8008366:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 800836a:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 800836e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8008372:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008376:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800837a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800837e:	f1ab 0b10 	sub.w	fp, fp, #16
 8008382:	f1bb 0f0f 	cmp.w	fp, #15
 8008386:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 800838a:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 800838e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008392:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008396:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800839a:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800839e:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 80083a2:	eee4 7a06 	vfma.f32	s15, s8, s12
 80083a6:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 80083aa:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 80083ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 80083b2:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 80083b6:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 80083ba:	eee5 7a86 	vfma.f32	s15, s11, s12
 80083be:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 80083c2:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 80083c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80083ca:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 80083ce:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 80083d2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80083d6:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80083da:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80083de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80083e2:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80083e6:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80083ea:	eee5 7a86 	vfma.f32	s15, s11, s12
 80083ee:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 80083f2:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 80083f6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80083fa:	eee1 7a82 	vfma.f32	s15, s3, s4
 80083fe:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008402:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008406:	eee4 7a85 	vfma.f32	s15, s9, s10
 800840a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800840e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008412:	d894      	bhi.n	800833e <forward_lstm+0x13ea>
 8008414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008418:	eb0c 0203 	add.w	r2, ip, r3
 800841c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d07b      	beq.n	800851c <forward_lstm+0x15c8>
 8008424:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8008428:	e002      	b.n	8008430 <forward_lstm+0x14dc>
 800842a:	bf00      	nop
 800842c:	00000000 	.word	0x00000000
 8008430:	ed9b 6a00 	vldr	s12, [fp]
 8008434:	edd2 7a00 	vldr	s15, [r2]
 8008438:	2b01      	cmp	r3, #1
 800843a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800843e:	d06d      	beq.n	800851c <forward_lstm+0x15c8>
 8008440:	ed9b 6a01 	vldr	s12, [fp, #4]
 8008444:	edd2 7a01 	vldr	s15, [r2, #4]
 8008448:	2b02      	cmp	r3, #2
 800844a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800844e:	d065      	beq.n	800851c <forward_lstm+0x15c8>
 8008450:	ed9b 6a02 	vldr	s12, [fp, #8]
 8008454:	edd2 7a02 	vldr	s15, [r2, #8]
 8008458:	2b03      	cmp	r3, #3
 800845a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800845e:	d05d      	beq.n	800851c <forward_lstm+0x15c8>
 8008460:	ed9b 6a03 	vldr	s12, [fp, #12]
 8008464:	edd2 7a03 	vldr	s15, [r2, #12]
 8008468:	2b04      	cmp	r3, #4
 800846a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800846e:	d055      	beq.n	800851c <forward_lstm+0x15c8>
 8008470:	ed9b 6a04 	vldr	s12, [fp, #16]
 8008474:	edd2 7a04 	vldr	s15, [r2, #16]
 8008478:	2b05      	cmp	r3, #5
 800847a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800847e:	d04d      	beq.n	800851c <forward_lstm+0x15c8>
 8008480:	ed9b 6a05 	vldr	s12, [fp, #20]
 8008484:	edd2 7a05 	vldr	s15, [r2, #20]
 8008488:	2b06      	cmp	r3, #6
 800848a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800848e:	d045      	beq.n	800851c <forward_lstm+0x15c8>
 8008490:	ed9b 6a06 	vldr	s12, [fp, #24]
 8008494:	edd2 7a06 	vldr	s15, [r2, #24]
 8008498:	2b07      	cmp	r3, #7
 800849a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800849e:	d03d      	beq.n	800851c <forward_lstm+0x15c8>
 80084a0:	ed9b 6a07 	vldr	s12, [fp, #28]
 80084a4:	edd2 7a07 	vldr	s15, [r2, #28]
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084ae:	d035      	beq.n	800851c <forward_lstm+0x15c8>
 80084b0:	ed9b 6a08 	vldr	s12, [fp, #32]
 80084b4:	edd2 7a08 	vldr	s15, [r2, #32]
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084be:	d02d      	beq.n	800851c <forward_lstm+0x15c8>
 80084c0:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 80084c4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80084c8:	2b0a      	cmp	r3, #10
 80084ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084ce:	d025      	beq.n	800851c <forward_lstm+0x15c8>
 80084d0:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 80084d4:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80084d8:	2b0b      	cmp	r3, #11
 80084da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084de:	d01d      	beq.n	800851c <forward_lstm+0x15c8>
 80084e0:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 80084e4:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80084e8:	2b0c      	cmp	r3, #12
 80084ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084ee:	d015      	beq.n	800851c <forward_lstm+0x15c8>
 80084f0:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 80084f4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80084f8:	3b0d      	subs	r3, #13
 80084fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084fe:	d00d      	beq.n	800851c <forward_lstm+0x15c8>
 8008500:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8008504:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008508:	2b01      	cmp	r3, #1
 800850a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800850e:	d005      	beq.n	800851c <forward_lstm+0x15c8>
 8008510:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 8008514:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008518:	eee6 6a27 	vfma.f32	s13, s12, s15
 800851c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008520:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008524:	4418      	add	r0, r3
 8008526:	ed01 7a01 	vstr	s14, [r1, #-4]
 800852a:	ecb6 6a01 	vldmia	r6!, {s12}
 800852e:	ecf9 7a01 	vldmia	r9!, {s15}
 8008532:	ed5a 6a01 	vldr	s13, [sl, #-4]
 8008536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800853a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800853e:	449c      	add	ip, r3
 8008540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008548:	459e      	cmp	lr, r3
 800854a:	ed01 7a01 	vstr	s14, [r1, #-4]
 800854e:	f47f adcc 	bne.w	80080ea <forward_lstm+0x1196>
 8008552:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8008556:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008558:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 800855c:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8008560:	4608      	mov	r0, r1
 8008562:	ee19 3a90 	vmov	r3, s19
 8008566:	462a      	mov	r2, r5
 8008568:	47a0      	blx	r4
 800856a:	ee1a 3a10 	vmov	r3, s20
 800856e:	462a      	mov	r2, r5
 8008570:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8008574:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008576:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 800857a:	47a0      	blx	r4
 800857c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	ecf3 7a01 	vldmia	r3!, {s15}
 800858a:	ed92 7a00 	vldr	s14, [r2]
 800858e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008592:	428b      	cmp	r3, r1
 8008594:	ece2 7a01 	vstmia	r2!, {s15}
 8008598:	d1f5      	bne.n	8008586 <forward_lstm+0x1632>
 800859a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800859e:	899b      	ldrh	r3, [r3, #12]
 80085a0:	b163      	cbz	r3, 80085bc <forward_lstm+0x1668>
 80085a2:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 80085a6:	2400      	movs	r4, #0
 80085a8:	46a8      	mov	r8, r5
 80085aa:	f859 5f04 	ldr.w	r5, [r9, #4]!
 80085ae:	3401      	adds	r4, #1
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	d13e      	bne.n	8008632 <forward_lstm+0x16de>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	f108 0804 	add.w	r8, r8, #4
 80085ba:	dcf6      	bgt.n	80085aa <forward_lstm+0x1656>
 80085bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80085c2:	428a      	cmp	r2, r1
 80085c4:	f340 809d 	ble.w	8008702 <forward_lstm+0x17ae>
 80085c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	440a      	add	r2, r1
 80085d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80085d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80085d8:	2a00      	cmp	r2, #0
 80085da:	f2c0 8092 	blt.w	8008702 <forward_lstm+0x17ae>
 80085de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085e6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80085ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085ee:	f7fe be6b 	b.w	80072c8 <forward_lstm+0x374>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4629      	mov	r1, r5
 80085f6:	69d8      	ldr	r0, [r3, #28]
 80085f8:	f000 fa66 	bl	8008ac8 <st_int8_copy>
 80085fc:	ee19 2a10 	vmov	r2, s18
 8008600:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008604:	2000      	movs	r0, #0
 8008606:	f000 fa03 	bl	8008a10 <st_int8_fill>
 800860a:	f7fe bda8 	b.w	800715e <forward_lstm+0x20a>
 800860e:	ee19 2a10 	vmov	r2, s18
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f9fc 	bl	8008a10 <st_int8_fill>
 8008618:	ee19 2a10 	vmov	r2, s18
 800861c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008620:	4648      	mov	r0, r9
 8008622:	f1b9 0f00 	cmp.w	r9, #0
 8008626:	f47e ad91 	bne.w	800714c <forward_lstm+0x1f8>
 800862a:	f000 f9f1 	bl	8008a10 <st_int8_fill>
 800862e:	f7fe bd8f 	b.w	8007150 <forward_lstm+0x1fc>
 8008632:	f8d8 a000 	ldr.w	sl, [r8]
 8008636:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800863a:	ee19 2a10 	vmov	r2, s18
 800863e:	4651      	mov	r1, sl
 8008640:	f000 fa42 	bl	8008ac8 <st_int8_copy>
 8008644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008648:	899b      	ldrh	r3, [r3, #12]
 800864a:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 800864e:	42a3      	cmp	r3, r4
 8008650:	f848 5b04 	str.w	r5, [r8], #4
 8008654:	dca9      	bgt.n	80085aa <forward_lstm+0x1656>
 8008656:	e7b1      	b.n	80085bc <forward_lstm+0x1668>
 8008658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800865c:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8008660:	4662      	mov	r2, ip
 8008662:	e6e5      	b.n	8008430 <forward_lstm+0x14dc>
 8008664:	4603      	mov	r3, r0
 8008666:	e5d1      	b.n	800820c <forward_lstm+0x12b8>
 8008668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800866c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008670:	465a      	mov	r2, fp
 8008672:	e44d      	b.n	8007f10 <forward_lstm+0xfbc>
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008678:	f7ff bb54 	b.w	8007d24 <forward_lstm+0xdd0>
 800867c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008680:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008684:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008688:	f7ff ba3a 	b.w	8007b00 <forward_lstm+0xbac>
 800868c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008690:	f7ff b93a 	b.w	8007908 <forward_lstm+0x9b4>
 8008694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008698:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800869c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80086a0:	f7ff b822 	b.w	80076e8 <forward_lstm+0x794>
 80086a4:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 80086a8:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80086ac:	4653      	mov	r3, sl
 80086ae:	f7fe bf23 	b.w	80074f8 <forward_lstm+0x5a4>
 80086b2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80086b6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80086b8:	ee19 3a90 	vmov	r3, s19
 80086bc:	4608      	mov	r0, r1
 80086be:	4690      	mov	r8, r2
 80086c0:	47a0      	blx	r4
 80086c2:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80086c6:	ee19 3a90 	vmov	r3, s19
 80086ca:	4642      	mov	r2, r8
 80086cc:	4608      	mov	r0, r1
 80086ce:	47a0      	blx	r4
 80086d0:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80086d4:	ee1a 3a90 	vmov	r3, s21
 80086d8:	4642      	mov	r2, r8
 80086da:	4608      	mov	r0, r1
 80086dc:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80086de:	47a8      	blx	r5
 80086e0:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 80086e4:	ee19 3a90 	vmov	r3, s19
 80086e8:	4642      	mov	r2, r8
 80086ea:	4608      	mov	r0, r1
 80086ec:	47a0      	blx	r4
 80086ee:	ee1a 3a10 	vmov	r3, s20
 80086f2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80086f4:	4642      	mov	r2, r8
 80086f6:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80086fa:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 80086fe:	47a0      	blx	r4
 8008700:	e74b      	b.n	800859a <forward_lstm+0x1646>
 8008702:	b353      	cbz	r3, 800875a <forward_lstm+0x1806>
 8008704:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8008708:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 800870c:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8008710:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008714:	ee19 ba10 	vmov	fp, s18
 8008718:	2600      	movs	r6, #0
 800871a:	e00b      	b.n	8008734 <forward_lstm+0x17e0>
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	465a      	mov	r2, fp
 8008720:	4648      	mov	r0, r9
 8008722:	f000 f9d1 	bl	8008ac8 <st_int8_copy>
 8008726:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800872a:	3601      	adds	r6, #1
 800872c:	42b3      	cmp	r3, r6
 800872e:	f104 0404 	add.w	r4, r4, #4
 8008732:	dd12      	ble.n	800875a <forward_lstm+0x1806>
 8008734:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8008738:	2a00      	cmp	r2, #0
 800873a:	d1f6      	bne.n	800872a <forward_lstm+0x17d6>
 800873c:	3b01      	subs	r3, #1
 800873e:	42b3      	cmp	r3, r6
 8008740:	d1ec      	bne.n	800871c <forward_lstm+0x17c8>
 8008742:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0e8      	beq.n	800871c <forward_lstm+0x17c8>
 800874a:	6821      	ldr	r1, [r4, #0]
 800874c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800874e:	465a      	mov	r2, fp
 8008750:	f000 f9ba 	bl	8008ac8 <st_int8_copy>
 8008754:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008758:	e7e7      	b.n	800872a <forward_lstm+0x17d6>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	b18b      	cbz	r3, 8008782 <forward_lstm+0x182e>
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	69dc      	ldr	r4, [r3, #28]
 8008762:	b174      	cbz	r4, 8008782 <forward_lstm+0x182e>
 8008764:	ee19 5a10 	vmov	r5, s18
 8008768:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800876a:	ee19 2a10 	vmov	r2, s18
 800876e:	4621      	mov	r1, r4
 8008770:	f000 f9aa 	bl	8008ac8 <st_int8_copy>
 8008774:	ee19 2a10 	vmov	r2, s18
 8008778:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800877c:	1961      	adds	r1, r4, r5
 800877e:	f000 f9a3 	bl	8008ac8 <st_int8_copy>
 8008782:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8008786:	46bd      	mov	sp, r7
 8008788:	ecbd 8b06 	vpop	{d8-d10}
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008794:	2301      	movs	r3, #1
 8008796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008798:	4613      	mov	r3, r2
 800879a:	f7fe bd00 	b.w	800719e <forward_lstm+0x24a>
 800879e:	ee0a 0a10 	vmov	s20, r0
 80087a2:	ee09 0a90 	vmov	s19, r0
 80087a6:	ee0a 0a90 	vmov	s21, r0
 80087aa:	4681      	mov	r9, r0
 80087ac:	f7fe bc56 	b.w	800705c <forward_lstm+0x108>
 80087b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80087b4:	4683      	mov	fp, r0
 80087b6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80087ba:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80087be:	f7fe bbf4 	b.w	8006faa <forward_lstm+0x56>
 80087c2:	2300      	movs	r3, #0
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	deff      	udf	#255	; 0xff

080087c8 <forward_lite_dense_if32of32wf32>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80087d0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80087d4:	4287      	cmp	r7, r0
 80087d6:	f240 8106 	bls.w	80089e6 <forward_lite_dense_if32of32wf32+0x21e>
 80087da:	f1a6 0810 	sub.w	r8, r6, #16
 80087de:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80087e2:	f108 0801 	add.w	r8, r8, #1
 80087e6:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80087ea:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80087ee:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80087f2:	4605      	mov	r5, r0
 80087f4:	f006 0a0f 	and.w	sl, r6, #15
 80087f8:	2e0f      	cmp	r6, #15
 80087fa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8008a0c <forward_lite_dense_if32of32wf32+0x244>
 80087fe:	f240 8101 	bls.w	8008a04 <forward_lite_dense_if32of32wf32+0x23c>
 8008802:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008806:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800880a:	46b6      	mov	lr, r6
 800880c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008810:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008814:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008818:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800881c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008820:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008824:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008828:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800882c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008830:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008834:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008838:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800883c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008840:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008844:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008848:	eee6 7a26 	vfma.f32	s15, s12, s13
 800884c:	f1ae 0e10 	sub.w	lr, lr, #16
 8008850:	f1be 0f0f 	cmp.w	lr, #15
 8008854:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008858:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800885c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008860:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008864:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008868:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800886c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008870:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008874:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008878:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800887c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008880:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008884:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008888:	eee6 7a26 	vfma.f32	s15, s12, s13
 800888c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008890:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008894:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008898:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800889c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80088a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088a4:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80088a8:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80088ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088b0:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80088b4:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80088b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088bc:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80088c0:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80088c4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80088c8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80088cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088e0:	d894      	bhi.n	800880c <forward_lite_dense_if32of32wf32+0x44>
 80088e2:	eb02 0e0b 	add.w	lr, r2, fp
 80088e6:	4654      	mov	r4, sl
 80088e8:	46c4      	mov	ip, r8
 80088ea:	2c00      	cmp	r4, #0
 80088ec:	d075      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 80088ee:	eddc 6a00 	vldr	s13, [ip]
 80088f2:	edde 7a00 	vldr	s15, [lr]
 80088f6:	2c01      	cmp	r4, #1
 80088f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088fc:	d06d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 80088fe:	eddc 6a01 	vldr	s13, [ip, #4]
 8008902:	edde 7a01 	vldr	s15, [lr, #4]
 8008906:	2c02      	cmp	r4, #2
 8008908:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800890c:	d065      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800890e:	eddc 6a02 	vldr	s13, [ip, #8]
 8008912:	edde 7a02 	vldr	s15, [lr, #8]
 8008916:	2c03      	cmp	r4, #3
 8008918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800891c:	d05d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800891e:	eddc 6a03 	vldr	s13, [ip, #12]
 8008922:	edde 7a03 	vldr	s15, [lr, #12]
 8008926:	2c04      	cmp	r4, #4
 8008928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800892c:	d055      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800892e:	eddc 6a04 	vldr	s13, [ip, #16]
 8008932:	edde 7a04 	vldr	s15, [lr, #16]
 8008936:	2c05      	cmp	r4, #5
 8008938:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800893c:	d04d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800893e:	eddc 6a05 	vldr	s13, [ip, #20]
 8008942:	edde 7a05 	vldr	s15, [lr, #20]
 8008946:	2c06      	cmp	r4, #6
 8008948:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800894c:	d045      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800894e:	eddc 6a06 	vldr	s13, [ip, #24]
 8008952:	edde 7a06 	vldr	s15, [lr, #24]
 8008956:	2c07      	cmp	r4, #7
 8008958:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800895c:	d03d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800895e:	eddc 6a07 	vldr	s13, [ip, #28]
 8008962:	edde 7a07 	vldr	s15, [lr, #28]
 8008966:	2c08      	cmp	r4, #8
 8008968:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800896c:	d035      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800896e:	eddc 6a08 	vldr	s13, [ip, #32]
 8008972:	edde 7a08 	vldr	s15, [lr, #32]
 8008976:	2c09      	cmp	r4, #9
 8008978:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800897c:	d02d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800897e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008982:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008986:	2c0a      	cmp	r4, #10
 8008988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800898c:	d025      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800898e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008992:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008996:	2c0b      	cmp	r4, #11
 8008998:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800899c:	d01d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 800899e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80089a2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80089a6:	2c0c      	cmp	r4, #12
 80089a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089ac:	d015      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 80089ae:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80089b2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80089b6:	3c0d      	subs	r4, #13
 80089b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089bc:	d00d      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 80089be:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80089c2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80089c6:	2c01      	cmp	r4, #1
 80089c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089cc:	d005      	beq.n	80089da <forward_lite_dense_if32of32wf32+0x212>
 80089ce:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80089d2:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80089d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089da:	444a      	add	r2, r9
 80089dc:	eca5 7a01 	vstmia	r5!, {s14}
 80089e0:	42af      	cmp	r7, r5
 80089e2:	f63f af09 	bhi.w	80087f8 <forward_lite_dense_if32of32wf32+0x30>
 80089e6:	b15b      	cbz	r3, 8008a00 <forward_lite_dense_if32of32wf32+0x238>
 80089e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ea:	b14a      	cbz	r2, 8008a00 <forward_lite_dense_if32of32wf32+0x238>
 80089ec:	edd0 7a00 	vldr	s15, [r0]
 80089f0:	ecb3 7a01 	vldmia	r3!, {s14}
 80089f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089f8:	ece0 7a01 	vstmia	r0!, {s15}
 80089fc:	4287      	cmp	r7, r0
 80089fe:	d1f5      	bne.n	80089ec <forward_lite_dense_if32of32wf32+0x224>
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	4634      	mov	r4, r6
 8008a06:	4696      	mov	lr, r2
 8008a08:	468c      	mov	ip, r1
 8008a0a:	e76e      	b.n	80088ea <forward_lite_dense_if32of32wf32+0x122>
 8008a0c:	00000000 	.word	0x00000000

08008a10 <st_int8_fill>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	b2c3      	uxtb	r3, r0
 8008a14:	0204      	lsls	r4, r0, #8
 8008a16:	b2a4      	uxth	r4, r4
 8008a18:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008a1c:	4323      	orrs	r3, r4
 8008a1e:	0404      	lsls	r4, r0, #16
 8008a20:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8008a24:	431c      	orrs	r4, r3
 8008a26:	078b      	lsls	r3, r1, #30
 8008a28:	468c      	mov	ip, r1
 8008a2a:	d007      	beq.n	8008a3c <st_int8_fill+0x2c>
 8008a2c:	b3a2      	cbz	r2, 8008a98 <st_int8_fill+0x88>
 8008a2e:	f80c 0b01 	strb.w	r0, [ip], #1
 8008a32:	f01c 0f03 	tst.w	ip, #3
 8008a36:	f102 32ff 	add.w	r2, r2, #4294967295
 8008a3a:	d1f7      	bne.n	8008a2c <st_int8_fill+0x1c>
 8008a3c:	0911      	lsrs	r1, r2, #4
 8008a3e:	d03e      	beq.n	8008abe <st_int8_fill+0xae>
 8008a40:	1e4b      	subs	r3, r1, #1
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d929      	bls.n	8008a9a <st_int8_fill+0x8a>
 8008a46:	f01c 0f07 	tst.w	ip, #7
 8008a4a:	d126      	bne.n	8008a9a <st_int8_fill+0x8a>
 8008a4c:	f10c 0310 	add.w	r3, ip, #16
 8008a50:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8008a54:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8008a58:	e943 4404 	strd	r4, r4, [r3, #-16]
 8008a5c:	e943 4402 	strd	r4, r4, [r3, #-8]
 8008a60:	3310      	adds	r3, #16
 8008a62:	428b      	cmp	r3, r1
 8008a64:	d1f8      	bne.n	8008a58 <st_int8_fill+0x48>
 8008a66:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008a6a:	44f4      	add	ip, lr
 8008a6c:	f002 0203 	and.w	r2, r2, #3
 8008a70:	b15b      	cbz	r3, 8008a8a <st_int8_fill+0x7a>
 8008a72:	1e59      	subs	r1, r3, #1
 8008a74:	f8cc 4000 	str.w	r4, [ip]
 8008a78:	d005      	beq.n	8008a86 <st_int8_fill+0x76>
 8008a7a:	2901      	cmp	r1, #1
 8008a7c:	f8cc 4004 	str.w	r4, [ip, #4]
 8008a80:	bf18      	it	ne
 8008a82:	f8cc 4008 	strne.w	r4, [ip, #8]
 8008a86:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8008a8a:	b12a      	cbz	r2, 8008a98 <st_int8_fill+0x88>
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a92:	4660      	mov	r0, ip
 8008a94:	f001 b919 	b.w	8009cca <memset>
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8008a9e:	4663      	mov	r3, ip
 8008aa0:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8008aa4:	601c      	str	r4, [r3, #0]
 8008aa6:	605c      	str	r4, [r3, #4]
 8008aa8:	609c      	str	r4, [r3, #8]
 8008aaa:	60dc      	str	r4, [r3, #12]
 8008aac:	3310      	adds	r3, #16
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	d1f8      	bne.n	8008aa4 <st_int8_fill+0x94>
 8008ab2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008ab6:	44f4      	add	ip, lr
 8008ab8:	f002 0203 	and.w	r2, r2, #3
 8008abc:	e7d8      	b.n	8008a70 <st_int8_fill+0x60>
 8008abe:	0893      	lsrs	r3, r2, #2
 8008ac0:	f002 0203 	and.w	r2, r2, #3
 8008ac4:	e7d4      	b.n	8008a70 <st_int8_fill+0x60>
 8008ac6:	bf00      	nop

08008ac8 <st_int8_copy>:
 8008ac8:	4288      	cmp	r0, r1
 8008aca:	d057      	beq.n	8008b7c <st_int8_copy+0xb4>
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	d055      	beq.n	8008b7c <st_int8_copy+0xb4>
 8008ad0:	4288      	cmp	r0, r1
 8008ad2:	d354      	bcc.n	8008b7e <st_int8_copy+0xb6>
 8008ad4:	078b      	lsls	r3, r1, #30
 8008ad6:	d102      	bne.n	8008ade <st_int8_copy+0x16>
 8008ad8:	e009      	b.n	8008aee <st_int8_copy+0x26>
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	d05c      	beq.n	8008b98 <st_int8_copy+0xd0>
 8008ade:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008ae2:	f801 3b01 	strb.w	r3, [r1], #1
 8008ae6:	078b      	lsls	r3, r1, #30
 8008ae8:	f102 32ff 	add.w	r2, r2, #4294967295
 8008aec:	d1f5      	bne.n	8008ada <st_int8_copy+0x12>
 8008aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008af6:	d069      	beq.n	8008bcc <st_int8_copy+0x104>
 8008af8:	ea41 0300 	orr.w	r3, r1, r0
 8008afc:	075b      	lsls	r3, r3, #29
 8008afe:	d14c      	bne.n	8008b9a <st_int8_copy+0xd2>
 8008b00:	f10e 33ff 	add.w	r3, lr, #4294967295
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d948      	bls.n	8008b9a <st_int8_copy+0xd2>
 8008b08:	f100 0310 	add.w	r3, r0, #16
 8008b0c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008b10:	f101 0c10 	add.w	ip, r1, #16
 8008b14:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008b18:	ed13 6b04 	vldr	d6, [r3, #-16]
 8008b1c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4573      	cmp	r3, lr
 8008b24:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8008b28:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8008b2c:	f10c 0c10 	add.w	ip, ip, #16
 8008b30:	d1f2      	bne.n	8008b18 <st_int8_copy+0x50>
 8008b32:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008b36:	4421      	add	r1, r4
 8008b38:	4420      	add	r0, r4
 8008b3a:	f002 0203 	and.w	r2, r2, #3
 8008b3e:	b16b      	cbz	r3, 8008b5c <st_int8_copy+0x94>
 8008b40:	6804      	ldr	r4, [r0, #0]
 8008b42:	600c      	str	r4, [r1, #0]
 8008b44:	1e5c      	subs	r4, r3, #1
 8008b46:	d005      	beq.n	8008b54 <st_int8_copy+0x8c>
 8008b48:	6845      	ldr	r5, [r0, #4]
 8008b4a:	604d      	str	r5, [r1, #4]
 8008b4c:	2c01      	cmp	r4, #1
 8008b4e:	bf1c      	itt	ne
 8008b50:	6884      	ldrne	r4, [r0, #8]
 8008b52:	608c      	strne	r4, [r1, #8]
 8008b54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008b58:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008b5c:	b162      	cbz	r2, 8008b78 <st_int8_copy+0xb0>
 8008b5e:	f990 3000 	ldrsb.w	r3, [r0]
 8008b62:	700b      	strb	r3, [r1, #0]
 8008b64:	3a01      	subs	r2, #1
 8008b66:	d007      	beq.n	8008b78 <st_int8_copy+0xb0>
 8008b68:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008b6c:	704b      	strb	r3, [r1, #1]
 8008b6e:	2a01      	cmp	r2, #1
 8008b70:	bf1c      	itt	ne
 8008b72:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8008b76:	708b      	strbne	r3, [r1, #2]
 8008b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7c:	4770      	bx	lr
 8008b7e:	1883      	adds	r3, r0, r2
 8008b80:	428b      	cmp	r3, r1
 8008b82:	d9a7      	bls.n	8008ad4 <st_int8_copy+0xc>
 8008b84:	4283      	cmp	r3, r0
 8008b86:	440a      	add	r2, r1
 8008b88:	d9f8      	bls.n	8008b7c <st_int8_copy+0xb4>
 8008b8a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008b8e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008b92:	4283      	cmp	r3, r0
 8008b94:	d1f9      	bne.n	8008b8a <st_int8_copy+0xc2>
 8008b96:	4770      	bx	lr
 8008b98:	4770      	bx	lr
 8008b9a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008ba4:	4684      	mov	ip, r0
 8008ba6:	f8dc 7000 	ldr.w	r7, [ip]
 8008baa:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008bae:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008bb2:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008bb6:	f8c3 800c 	str.w	r8, [r3, #12]
 8008bba:	601f      	str	r7, [r3, #0]
 8008bbc:	605e      	str	r6, [r3, #4]
 8008bbe:	609d      	str	r5, [r3, #8]
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	459e      	cmp	lr, r3
 8008bc4:	f10c 0c10 	add.w	ip, ip, #16
 8008bc8:	d1ed      	bne.n	8008ba6 <st_int8_copy+0xde>
 8008bca:	e7b2      	b.n	8008b32 <st_int8_copy+0x6a>
 8008bcc:	0893      	lsrs	r3, r2, #2
 8008bce:	f002 0203 	and.w	r2, r2, #3
 8008bd2:	e7b4      	b.n	8008b3e <st_int8_copy+0x76>

08008bd4 <ai_array_to_buffer_fmt>:
 8008bd4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d050      	beq.n	8008c7e <ai_array_to_buffer_fmt+0xaa>
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <ai_array_to_buffer_fmt+0xb4>)
 8008bde:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d00b      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008be6:	dc1c      	bgt.n	8008c22 <ai_array_to_buffer_fmt+0x4e>
 8008be8:	4b28      	ldr	r3, [pc, #160]	; (8008c8c <ai_array_to_buffer_fmt+0xb8>)
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d007      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008bee:	dd0b      	ble.n	8008c08 <ai_array_to_buffer_fmt+0x34>
 8008bf0:	4b27      	ldr	r3, [pc, #156]	; (8008c90 <ai_array_to_buffer_fmt+0xbc>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d003      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008bf6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d131      	bne.n	8008c62 <ai_array_to_buffer_fmt+0x8e>
 8008bfe:	4613      	mov	r3, r2
 8008c00:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c04:	4318      	orrs	r0, r3
 8008c06:	4770      	bx	lr
 8008c08:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d0f6      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c10:	dd2c      	ble.n	8008c6c <ai_array_to_buffer_fmt+0x98>
 8008c12:	4b20      	ldr	r3, [pc, #128]	; (8008c94 <ai_array_to_buffer_fmt+0xc0>)
 8008c14:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bf18      	it	ne
 8008c1c:	2340      	movne	r3, #64	; 0x40
 8008c1e:	4318      	orrs	r0, r3
 8008c20:	4770      	bx	lr
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <ai_array_to_buffer_fmt+0xc4>)
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d0ea      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c28:	dd0e      	ble.n	8008c48 <ai_array_to_buffer_fmt+0x74>
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <ai_array_to_buffer_fmt+0xc8>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d0e6      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c30:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d0e2      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c38:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <ai_array_to_buffer_fmt+0xcc>)
 8008c3a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	bf18      	it	ne
 8008c42:	2340      	movne	r3, #64	; 0x40
 8008c44:	4318      	orrs	r0, r3
 8008c46:	4770      	bx	lr
 8008c48:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d0d6      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c50:	3307      	adds	r3, #7
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d0d3      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c56:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	bf18      	it	ne
 8008c5e:	2340      	movne	r3, #64	; 0x40
 8008c60:	e7ce      	b.n	8008c00 <ai_array_to_buffer_fmt+0x2c>
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <ai_array_to_buffer_fmt+0xd0>)
 8008c64:	429a      	cmp	r2, r3
 8008c66:	bf18      	it	ne
 8008c68:	2340      	movne	r3, #64	; 0x40
 8008c6a:	e7c9      	b.n	8008c00 <ai_array_to_buffer_fmt+0x2c>
 8008c6c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d0c4      	beq.n	8008bfe <ai_array_to_buffer_fmt+0x2a>
 8008c74:	3380      	adds	r3, #128	; 0x80
 8008c76:	429a      	cmp	r2, r3
 8008c78:	bf18      	it	ne
 8008c7a:	2340      	movne	r3, #64	; 0x40
 8008c7c:	e7c0      	b.n	8008c00 <ai_array_to_buffer_fmt+0x2c>
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <ai_array_to_buffer_fmt+0xd4>)
 8008c80:	4003      	ands	r3, r0
 8008c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c86:	e7bb      	b.n	8008c00 <ai_array_to_buffer_fmt+0x2c>
 8008c88:	00840040 	.word	0x00840040
 8008c8c:	00040840 	.word	0x00040840
 8008c90:	00041040 	.word	0x00041040
 8008c94:	00040447 	.word	0x00040447
 8008c98:	00840840 	.word	0x00840840
 8008c9c:	00841040 	.word	0x00841040
 8008ca0:	0084084f 	.word	0x0084084f
 8008ca4:	0004084f 	.word	0x0004084f
 8008ca8:	00803fff 	.word	0x00803fff

08008cac <ai_array_get_byte_size>:
 8008cac:	b319      	cbz	r1, 8008cf6 <ai_array_get_byte_size+0x4a>
 8008cae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008cb2:	fb03 f101 	mul.w	r1, r3, r1
 8008cb6:	3107      	adds	r1, #7
 8008cb8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008cbc:	f021 0307 	bic.w	r3, r1, #7
 8008cc0:	2a04      	cmp	r2, #4
 8008cc2:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008cc6:	fa23 f101 	lsr.w	r1, r3, r1
 8008cca:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008cce:	d00b      	beq.n	8008ce8 <ai_array_get_byte_size+0x3c>
 8008cd0:	2a08      	cmp	r2, #8
 8008cd2:	d002      	beq.n	8008cda <ai_array_get_byte_size+0x2e>
 8008cd4:	3107      	adds	r1, #7
 8008cd6:	08c8      	lsrs	r0, r1, #3
 8008cd8:	4770      	bx	lr
 8008cda:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008cde:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008ce2:	3107      	adds	r1, #7
 8008ce4:	08c8      	lsrs	r0, r1, #3
 8008ce6:	4770      	bx	lr
 8008ce8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008cec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008cf0:	3107      	adds	r1, #7
 8008cf2:	08c8      	lsrs	r0, r1, #3
 8008cf4:	4770      	bx	lr
 8008cf6:	4608      	mov	r0, r1
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop

08008cfc <ai_array_get_data_byte_size>:
 8008cfc:	b169      	cbz	r1, 8008d1a <ai_array_get_data_byte_size+0x1e>
 8008cfe:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008d02:	fb02 f101 	mul.w	r1, r2, r1
 8008d06:	1dcb      	adds	r3, r1, #7
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008d10:	fa23 f000 	lsr.w	r0, r3, r0
 8008d14:	3007      	adds	r0, #7
 8008d16:	08c0      	lsrs	r0, r0, #3
 8008d18:	4770      	bx	lr
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop

08008d20 <ai_version_get>:
 8008d20:	0212      	lsls	r2, r2, #8
 8008d22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008d26:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008d2a:	4770      	bx	lr

08008d2c <ai_platform_version_get>:
 8008d2c:	0e02      	lsrs	r2, r0, #24
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f362 0307 	bfi	r3, r2, #0, #8
 8008d34:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008d38:	f362 230f 	bfi	r3, r2, #8, #8
 8008d3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008d40:	f360 4317 	bfi	r3, r0, #16, #8
 8008d44:	b082      	sub	sp, #8
 8008d46:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8008d4a:	b002      	add	sp, #8
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <get_tensor_byte_size>:
 8008d50:	b410      	push	{r4}
 8008d52:	6983      	ldr	r3, [r0, #24]
 8008d54:	68c4      	ldr	r4, [r0, #12]
 8008d56:	6941      	ldr	r1, [r0, #20]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68e0      	ldr	r0, [r4, #12]
 8008d5c:	4a07      	ldr	r2, [pc, #28]	; (8008d7c <get_tensor_byte_size+0x2c>)
 8008d5e:	68c9      	ldr	r1, [r1, #12]
 8008d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008d68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d6c:	fb01 f000 	mul.w	r0, r1, r0
 8008d70:	4293      	cmp	r3, r2
 8008d72:	bf04      	itt	eq
 8008d74:	3007      	addeq	r0, #7
 8008d76:	08c0      	lsreq	r0, r0, #3
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	000400c0 	.word	0x000400c0

08008d80 <malloc>:
 8008d80:	4b02      	ldr	r3, [pc, #8]	; (8008d8c <malloc+0xc>)
 8008d82:	4601      	mov	r1, r0
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	f000 b82b 	b.w	8008de0 <_malloc_r>
 8008d8a:	bf00      	nop
 8008d8c:	20000be8 	.word	0x20000be8

08008d90 <free>:
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <free+0xc>)
 8008d92:	4601      	mov	r1, r0
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	f001 bee1 	b.w	800ab5c <_free_r>
 8008d9a:	bf00      	nop
 8008d9c:	20000be8 	.word	0x20000be8

08008da0 <sbrk_aligned>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4e0e      	ldr	r6, [pc, #56]	; (8008ddc <sbrk_aligned+0x3c>)
 8008da4:	460c      	mov	r4, r1
 8008da6:	6831      	ldr	r1, [r6, #0]
 8008da8:	4605      	mov	r5, r0
 8008daa:	b911      	cbnz	r1, 8008db2 <sbrk_aligned+0x12>
 8008dac:	f000 ffe0 	bl	8009d70 <_sbrk_r>
 8008db0:	6030      	str	r0, [r6, #0]
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 ffdb 	bl	8009d70 <_sbrk_r>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d00a      	beq.n	8008dd4 <sbrk_aligned+0x34>
 8008dbe:	1cc4      	adds	r4, r0, #3
 8008dc0:	f024 0403 	bic.w	r4, r4, #3
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d007      	beq.n	8008dd8 <sbrk_aligned+0x38>
 8008dc8:	1a21      	subs	r1, r4, r0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 ffd0 	bl	8009d70 <_sbrk_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d101      	bne.n	8008dd8 <sbrk_aligned+0x38>
 8008dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd8:	4620      	mov	r0, r4
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	20001650 	.word	0x20001650

08008de0 <_malloc_r>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	1ccd      	adds	r5, r1, #3
 8008de6:	f025 0503 	bic.w	r5, r5, #3
 8008dea:	3508      	adds	r5, #8
 8008dec:	2d0c      	cmp	r5, #12
 8008dee:	bf38      	it	cc
 8008df0:	250c      	movcc	r5, #12
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	4607      	mov	r7, r0
 8008df6:	db01      	blt.n	8008dfc <_malloc_r+0x1c>
 8008df8:	42a9      	cmp	r1, r5
 8008dfa:	d905      	bls.n	8008e08 <_malloc_r+0x28>
 8008dfc:	230c      	movs	r3, #12
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	2600      	movs	r6, #0
 8008e02:	4630      	mov	r0, r6
 8008e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008edc <_malloc_r+0xfc>
 8008e0c:	f000 f868 	bl	8008ee0 <__malloc_lock>
 8008e10:	f8d8 3000 	ldr.w	r3, [r8]
 8008e14:	461c      	mov	r4, r3
 8008e16:	bb5c      	cbnz	r4, 8008e70 <_malloc_r+0x90>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	f7ff ffc0 	bl	8008da0 <sbrk_aligned>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	4604      	mov	r4, r0
 8008e24:	d155      	bne.n	8008ed2 <_malloc_r+0xf2>
 8008e26:	f8d8 4000 	ldr.w	r4, [r8]
 8008e2a:	4626      	mov	r6, r4
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	d145      	bne.n	8008ebc <_malloc_r+0xdc>
 8008e30:	2c00      	cmp	r4, #0
 8008e32:	d048      	beq.n	8008ec6 <_malloc_r+0xe6>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	4631      	mov	r1, r6
 8008e38:	4638      	mov	r0, r7
 8008e3a:	eb04 0903 	add.w	r9, r4, r3
 8008e3e:	f000 ff97 	bl	8009d70 <_sbrk_r>
 8008e42:	4581      	cmp	r9, r0
 8008e44:	d13f      	bne.n	8008ec6 <_malloc_r+0xe6>
 8008e46:	6821      	ldr	r1, [r4, #0]
 8008e48:	1a6d      	subs	r5, r5, r1
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f7ff ffa7 	bl	8008da0 <sbrk_aligned>
 8008e52:	3001      	adds	r0, #1
 8008e54:	d037      	beq.n	8008ec6 <_malloc_r+0xe6>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	442b      	add	r3, r5
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d038      	beq.n	8008ed6 <_malloc_r+0xf6>
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	42a2      	cmp	r2, r4
 8008e68:	d12b      	bne.n	8008ec2 <_malloc_r+0xe2>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	605a      	str	r2, [r3, #4]
 8008e6e:	e00f      	b.n	8008e90 <_malloc_r+0xb0>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	1b52      	subs	r2, r2, r5
 8008e74:	d41f      	bmi.n	8008eb6 <_malloc_r+0xd6>
 8008e76:	2a0b      	cmp	r2, #11
 8008e78:	d917      	bls.n	8008eaa <_malloc_r+0xca>
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	6025      	str	r5, [r4, #0]
 8008e80:	bf18      	it	ne
 8008e82:	6059      	strne	r1, [r3, #4]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	bf08      	it	eq
 8008e88:	f8c8 1000 	streq.w	r1, [r8]
 8008e8c:	5162      	str	r2, [r4, r5]
 8008e8e:	604b      	str	r3, [r1, #4]
 8008e90:	4638      	mov	r0, r7
 8008e92:	f104 060b 	add.w	r6, r4, #11
 8008e96:	f000 f829 	bl	8008eec <__malloc_unlock>
 8008e9a:	f026 0607 	bic.w	r6, r6, #7
 8008e9e:	1d23      	adds	r3, r4, #4
 8008ea0:	1af2      	subs	r2, r6, r3
 8008ea2:	d0ae      	beq.n	8008e02 <_malloc_r+0x22>
 8008ea4:	1b9b      	subs	r3, r3, r6
 8008ea6:	50a3      	str	r3, [r4, r2]
 8008ea8:	e7ab      	b.n	8008e02 <_malloc_r+0x22>
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	6862      	ldr	r2, [r4, #4]
 8008eae:	d1dd      	bne.n	8008e6c <_malloc_r+0x8c>
 8008eb0:	f8c8 2000 	str.w	r2, [r8]
 8008eb4:	e7ec      	b.n	8008e90 <_malloc_r+0xb0>
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	6864      	ldr	r4, [r4, #4]
 8008eba:	e7ac      	b.n	8008e16 <_malloc_r+0x36>
 8008ebc:	4634      	mov	r4, r6
 8008ebe:	6876      	ldr	r6, [r6, #4]
 8008ec0:	e7b4      	b.n	8008e2c <_malloc_r+0x4c>
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	e7cc      	b.n	8008e60 <_malloc_r+0x80>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f000 f80e 	bl	8008eec <__malloc_unlock>
 8008ed0:	e797      	b.n	8008e02 <_malloc_r+0x22>
 8008ed2:	6025      	str	r5, [r4, #0]
 8008ed4:	e7dc      	b.n	8008e90 <_malloc_r+0xb0>
 8008ed6:	605b      	str	r3, [r3, #4]
 8008ed8:	deff      	udf	#255	; 0xff
 8008eda:	bf00      	nop
 8008edc:	2000164c 	.word	0x2000164c

08008ee0 <__malloc_lock>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	; (8008ee8 <__malloc_lock+0x8>)
 8008ee2:	f000 bf92 	b.w	8009e0a <__retarget_lock_acquire_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	20001794 	.word	0x20001794

08008eec <__malloc_unlock>:
 8008eec:	4801      	ldr	r0, [pc, #4]	; (8008ef4 <__malloc_unlock+0x8>)
 8008eee:	f000 bf8d 	b.w	8009e0c <__retarget_lock_release_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	20001794 	.word	0x20001794

08008ef8 <srand>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <srand+0x44>)
 8008efc:	681d      	ldr	r5, [r3, #0]
 8008efe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008f00:	4604      	mov	r4, r0
 8008f02:	b9b3      	cbnz	r3, 8008f32 <srand+0x3a>
 8008f04:	2018      	movs	r0, #24
 8008f06:	f7fa fe73 	bl	8003bf0 <__wrap_malloc>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	6328      	str	r0, [r5, #48]	; 0x30
 8008f0e:	b920      	cbnz	r0, 8008f1a <srand+0x22>
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <srand+0x48>)
 8008f12:	480c      	ldr	r0, [pc, #48]	; (8008f44 <srand+0x4c>)
 8008f14:	2146      	movs	r1, #70	; 0x46
 8008f16:	f000 ff89 	bl	8009e2c <__assert_func>
 8008f1a:	490b      	ldr	r1, [pc, #44]	; (8008f48 <srand+0x50>)
 8008f1c:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <srand+0x54>)
 8008f1e:	e9c0 1300 	strd	r1, r3, [r0]
 8008f22:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <srand+0x58>)
 8008f24:	6083      	str	r3, [r0, #8]
 8008f26:	230b      	movs	r3, #11
 8008f28:	8183      	strh	r3, [r0, #12]
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008f32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008f34:	2200      	movs	r2, #0
 8008f36:	611c      	str	r4, [r3, #16]
 8008f38:	615a      	str	r2, [r3, #20]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20000be8 	.word	0x20000be8
 8008f40:	080179b8 	.word	0x080179b8
 8008f44:	080179cf 	.word	0x080179cf
 8008f48:	abcd330e 	.word	0xabcd330e
 8008f4c:	e66d1234 	.word	0xe66d1234
 8008f50:	0005deec 	.word	0x0005deec

08008f54 <rand>:
 8008f54:	4b16      	ldr	r3, [pc, #88]	; (8008fb0 <rand+0x5c>)
 8008f56:	b510      	push	{r4, lr}
 8008f58:	681c      	ldr	r4, [r3, #0]
 8008f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008f5c:	b9b3      	cbnz	r3, 8008f8c <rand+0x38>
 8008f5e:	2018      	movs	r0, #24
 8008f60:	f7fa fe46 	bl	8003bf0 <__wrap_malloc>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6320      	str	r0, [r4, #48]	; 0x30
 8008f68:	b920      	cbnz	r0, 8008f74 <rand+0x20>
 8008f6a:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <rand+0x60>)
 8008f6c:	4812      	ldr	r0, [pc, #72]	; (8008fb8 <rand+0x64>)
 8008f6e:	2152      	movs	r1, #82	; 0x52
 8008f70:	f000 ff5c 	bl	8009e2c <__assert_func>
 8008f74:	4911      	ldr	r1, [pc, #68]	; (8008fbc <rand+0x68>)
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <rand+0x6c>)
 8008f78:	e9c0 1300 	strd	r1, r3, [r0]
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <rand+0x70>)
 8008f7e:	6083      	str	r3, [r0, #8]
 8008f80:	230b      	movs	r3, #11
 8008f82:	8183      	strh	r3, [r0, #12]
 8008f84:	2100      	movs	r1, #0
 8008f86:	2001      	movs	r0, #1
 8008f88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008f8e:	480e      	ldr	r0, [pc, #56]	; (8008fc8 <rand+0x74>)
 8008f90:	690b      	ldr	r3, [r1, #16]
 8008f92:	694c      	ldr	r4, [r1, #20]
 8008f94:	4a0d      	ldr	r2, [pc, #52]	; (8008fcc <rand+0x78>)
 8008f96:	4358      	muls	r0, r3
 8008f98:	fb02 0004 	mla	r0, r2, r4, r0
 8008f9c:	fba3 3202 	umull	r3, r2, r3, r2
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	eb40 0002 	adc.w	r0, r0, r2
 8008fa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008faa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008fae:	bd10      	pop	{r4, pc}
 8008fb0:	20000be8 	.word	0x20000be8
 8008fb4:	080179b8 	.word	0x080179b8
 8008fb8:	080179cf 	.word	0x080179cf
 8008fbc:	abcd330e 	.word	0xabcd330e
 8008fc0:	e66d1234 	.word	0xe66d1234
 8008fc4:	0005deec 	.word	0x0005deec
 8008fc8:	5851f42d 	.word	0x5851f42d
 8008fcc:	4c957f2d 	.word	0x4c957f2d

08008fd0 <_realloc_r>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	460e      	mov	r6, r1
 8008fda:	b921      	cbnz	r1, 8008fe6 <_realloc_r+0x16>
 8008fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	f7ff befd 	b.w	8008de0 <_malloc_r>
 8008fe6:	b92a      	cbnz	r2, 8008ff4 <_realloc_r+0x24>
 8008fe8:	f001 fdb8 	bl	800ab5c <_free_r>
 8008fec:	4625      	mov	r5, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	f002 f97a 	bl	800b2ec <_malloc_usable_size_r>
 8008ff8:	4284      	cmp	r4, r0
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	d802      	bhi.n	8009004 <_realloc_r+0x34>
 8008ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009002:	d812      	bhi.n	800902a <_realloc_r+0x5a>
 8009004:	4621      	mov	r1, r4
 8009006:	4640      	mov	r0, r8
 8009008:	f7ff feea 	bl	8008de0 <_malloc_r>
 800900c:	4605      	mov	r5, r0
 800900e:	2800      	cmp	r0, #0
 8009010:	d0ed      	beq.n	8008fee <_realloc_r+0x1e>
 8009012:	42bc      	cmp	r4, r7
 8009014:	4622      	mov	r2, r4
 8009016:	4631      	mov	r1, r6
 8009018:	bf28      	it	cs
 800901a:	463a      	movcs	r2, r7
 800901c:	f000 fef7 	bl	8009e0e <memcpy>
 8009020:	4631      	mov	r1, r6
 8009022:	4640      	mov	r0, r8
 8009024:	f001 fd9a 	bl	800ab5c <_free_r>
 8009028:	e7e1      	b.n	8008fee <_realloc_r+0x1e>
 800902a:	4635      	mov	r5, r6
 800902c:	e7df      	b.n	8008fee <_realloc_r+0x1e>

0800902e <__cvt>:
 800902e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009032:	ec55 4b10 	vmov	r4, r5, d0
 8009036:	2d00      	cmp	r5, #0
 8009038:	460e      	mov	r6, r1
 800903a:	4619      	mov	r1, r3
 800903c:	462b      	mov	r3, r5
 800903e:	bfbb      	ittet	lt
 8009040:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009044:	461d      	movlt	r5, r3
 8009046:	2300      	movge	r3, #0
 8009048:	232d      	movlt	r3, #45	; 0x2d
 800904a:	700b      	strb	r3, [r1, #0]
 800904c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800904e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009052:	4691      	mov	r9, r2
 8009054:	f023 0820 	bic.w	r8, r3, #32
 8009058:	bfbc      	itt	lt
 800905a:	4622      	movlt	r2, r4
 800905c:	4614      	movlt	r4, r2
 800905e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009062:	d005      	beq.n	8009070 <__cvt+0x42>
 8009064:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009068:	d100      	bne.n	800906c <__cvt+0x3e>
 800906a:	3601      	adds	r6, #1
 800906c:	2102      	movs	r1, #2
 800906e:	e000      	b.n	8009072 <__cvt+0x44>
 8009070:	2103      	movs	r1, #3
 8009072:	ab03      	add	r3, sp, #12
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	ab02      	add	r3, sp, #8
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	ec45 4b10 	vmov	d0, r4, r5
 800907e:	4653      	mov	r3, sl
 8009080:	4632      	mov	r2, r6
 8009082:	f000 ff79 	bl	8009f78 <_dtoa_r>
 8009086:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800908a:	4607      	mov	r7, r0
 800908c:	d102      	bne.n	8009094 <__cvt+0x66>
 800908e:	f019 0f01 	tst.w	r9, #1
 8009092:	d022      	beq.n	80090da <__cvt+0xac>
 8009094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009098:	eb07 0906 	add.w	r9, r7, r6
 800909c:	d110      	bne.n	80090c0 <__cvt+0x92>
 800909e:	783b      	ldrb	r3, [r7, #0]
 80090a0:	2b30      	cmp	r3, #48	; 0x30
 80090a2:	d10a      	bne.n	80090ba <__cvt+0x8c>
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b0:	b918      	cbnz	r0, 80090ba <__cvt+0x8c>
 80090b2:	f1c6 0601 	rsb	r6, r6, #1
 80090b6:	f8ca 6000 	str.w	r6, [sl]
 80090ba:	f8da 3000 	ldr.w	r3, [sl]
 80090be:	4499      	add	r9, r3
 80090c0:	2200      	movs	r2, #0
 80090c2:	2300      	movs	r3, #0
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80090cc:	b108      	cbz	r0, 80090d2 <__cvt+0xa4>
 80090ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80090d2:	2230      	movs	r2, #48	; 0x30
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	454b      	cmp	r3, r9
 80090d8:	d307      	bcc.n	80090ea <__cvt+0xbc>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090de:	1bdb      	subs	r3, r3, r7
 80090e0:	4638      	mov	r0, r7
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	b004      	add	sp, #16
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	1c59      	adds	r1, r3, #1
 80090ec:	9103      	str	r1, [sp, #12]
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	e7f0      	b.n	80090d4 <__cvt+0xa6>

080090f2 <__exponent>:
 80090f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f4:	4603      	mov	r3, r0
 80090f6:	2900      	cmp	r1, #0
 80090f8:	bfb8      	it	lt
 80090fa:	4249      	neglt	r1, r1
 80090fc:	f803 2b02 	strb.w	r2, [r3], #2
 8009100:	bfb4      	ite	lt
 8009102:	222d      	movlt	r2, #45	; 0x2d
 8009104:	222b      	movge	r2, #43	; 0x2b
 8009106:	2909      	cmp	r1, #9
 8009108:	7042      	strb	r2, [r0, #1]
 800910a:	dd2a      	ble.n	8009162 <__exponent+0x70>
 800910c:	f10d 0207 	add.w	r2, sp, #7
 8009110:	4617      	mov	r7, r2
 8009112:	260a      	movs	r6, #10
 8009114:	4694      	mov	ip, r2
 8009116:	fb91 f5f6 	sdiv	r5, r1, r6
 800911a:	fb06 1415 	mls	r4, r6, r5, r1
 800911e:	3430      	adds	r4, #48	; 0x30
 8009120:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009124:	460c      	mov	r4, r1
 8009126:	2c63      	cmp	r4, #99	; 0x63
 8009128:	f102 32ff 	add.w	r2, r2, #4294967295
 800912c:	4629      	mov	r1, r5
 800912e:	dcf1      	bgt.n	8009114 <__exponent+0x22>
 8009130:	3130      	adds	r1, #48	; 0x30
 8009132:	f1ac 0402 	sub.w	r4, ip, #2
 8009136:	f802 1c01 	strb.w	r1, [r2, #-1]
 800913a:	1c41      	adds	r1, r0, #1
 800913c:	4622      	mov	r2, r4
 800913e:	42ba      	cmp	r2, r7
 8009140:	d30a      	bcc.n	8009158 <__exponent+0x66>
 8009142:	f10d 0209 	add.w	r2, sp, #9
 8009146:	eba2 020c 	sub.w	r2, r2, ip
 800914a:	42bc      	cmp	r4, r7
 800914c:	bf88      	it	hi
 800914e:	2200      	movhi	r2, #0
 8009150:	4413      	add	r3, r2
 8009152:	1a18      	subs	r0, r3, r0
 8009154:	b003      	add	sp, #12
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009158:	f812 5b01 	ldrb.w	r5, [r2], #1
 800915c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009160:	e7ed      	b.n	800913e <__exponent+0x4c>
 8009162:	2330      	movs	r3, #48	; 0x30
 8009164:	3130      	adds	r1, #48	; 0x30
 8009166:	7083      	strb	r3, [r0, #2]
 8009168:	70c1      	strb	r1, [r0, #3]
 800916a:	1d03      	adds	r3, r0, #4
 800916c:	e7f1      	b.n	8009152 <__exponent+0x60>
	...

08009170 <_printf_float>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	ed2d 8b02 	vpush	{d8}
 8009178:	b08d      	sub	sp, #52	; 0x34
 800917a:	460c      	mov	r4, r1
 800917c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009180:	4616      	mov	r6, r2
 8009182:	461f      	mov	r7, r3
 8009184:	4605      	mov	r5, r0
 8009186:	f000 fdbb 	bl	8009d00 <_localeconv_r>
 800918a:	f8d0 a000 	ldr.w	sl, [r0]
 800918e:	4650      	mov	r0, sl
 8009190:	f7f7 f86e 	bl	8000270 <strlen>
 8009194:	2300      	movs	r3, #0
 8009196:	930a      	str	r3, [sp, #40]	; 0x28
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	f8d8 3000 	ldr.w	r3, [r8]
 80091a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091a4:	3307      	adds	r3, #7
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	f103 0208 	add.w	r2, r3, #8
 80091ae:	f8c8 2000 	str.w	r2, [r8]
 80091b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80091c0:	ee08 0a10 	vmov	s16, r0
 80091c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80091c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091cc:	4b9e      	ldr	r3, [pc, #632]	; (8009448 <_printf_float+0x2d8>)
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	f7f7 fcab 	bl	8000b2c <__aeabi_dcmpun>
 80091d6:	bb88      	cbnz	r0, 800923c <_printf_float+0xcc>
 80091d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091dc:	4b9a      	ldr	r3, [pc, #616]	; (8009448 <_printf_float+0x2d8>)
 80091de:	f04f 32ff 	mov.w	r2, #4294967295
 80091e2:	f7f7 fc85 	bl	8000af0 <__aeabi_dcmple>
 80091e6:	bb48      	cbnz	r0, 800923c <_printf_float+0xcc>
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	4640      	mov	r0, r8
 80091ee:	4649      	mov	r1, r9
 80091f0:	f7f7 fc74 	bl	8000adc <__aeabi_dcmplt>
 80091f4:	b110      	cbz	r0, 80091fc <_printf_float+0x8c>
 80091f6:	232d      	movs	r3, #45	; 0x2d
 80091f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fc:	4a93      	ldr	r2, [pc, #588]	; (800944c <_printf_float+0x2dc>)
 80091fe:	4b94      	ldr	r3, [pc, #592]	; (8009450 <_printf_float+0x2e0>)
 8009200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009204:	bf94      	ite	ls
 8009206:	4690      	movls	r8, r2
 8009208:	4698      	movhi	r8, r3
 800920a:	2303      	movs	r3, #3
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	9b05      	ldr	r3, [sp, #20]
 8009210:	f023 0304 	bic.w	r3, r3, #4
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	f04f 0900 	mov.w	r9, #0
 800921a:	9700      	str	r7, [sp, #0]
 800921c:	4633      	mov	r3, r6
 800921e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f9da 	bl	80095dc <_printf_common>
 8009228:	3001      	adds	r0, #1
 800922a:	f040 8090 	bne.w	800934e <_printf_float+0x1de>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	b00d      	add	sp, #52	; 0x34
 8009234:	ecbd 8b02 	vpop	{d8}
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 fc72 	bl	8000b2c <__aeabi_dcmpun>
 8009248:	b140      	cbz	r0, 800925c <_printf_float+0xec>
 800924a:	464b      	mov	r3, r9
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfbc      	itt	lt
 8009250:	232d      	movlt	r3, #45	; 0x2d
 8009252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009256:	4a7f      	ldr	r2, [pc, #508]	; (8009454 <_printf_float+0x2e4>)
 8009258:	4b7f      	ldr	r3, [pc, #508]	; (8009458 <_printf_float+0x2e8>)
 800925a:	e7d1      	b.n	8009200 <_printf_float+0x90>
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009262:	9206      	str	r2, [sp, #24]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	d13f      	bne.n	80092e8 <_printf_float+0x178>
 8009268:	2306      	movs	r3, #6
 800926a:	6063      	str	r3, [r4, #4]
 800926c:	9b05      	ldr	r3, [sp, #20]
 800926e:	6861      	ldr	r1, [r4, #4]
 8009270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009274:	2300      	movs	r3, #0
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	ab0a      	add	r3, sp, #40	; 0x28
 800927a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800927e:	ab09      	add	r3, sp, #36	; 0x24
 8009280:	ec49 8b10 	vmov	d0, r8, r9
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800928c:	4628      	mov	r0, r5
 800928e:	f7ff fece 	bl	800902e <__cvt>
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009296:	2b47      	cmp	r3, #71	; 0x47
 8009298:	4680      	mov	r8, r0
 800929a:	d108      	bne.n	80092ae <_printf_float+0x13e>
 800929c:	1cc8      	adds	r0, r1, #3
 800929e:	db02      	blt.n	80092a6 <_printf_float+0x136>
 80092a0:	6863      	ldr	r3, [r4, #4]
 80092a2:	4299      	cmp	r1, r3
 80092a4:	dd41      	ble.n	800932a <_printf_float+0x1ba>
 80092a6:	f1ab 0302 	sub.w	r3, fp, #2
 80092aa:	fa5f fb83 	uxtb.w	fp, r3
 80092ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092b2:	d820      	bhi.n	80092f6 <_printf_float+0x186>
 80092b4:	3901      	subs	r1, #1
 80092b6:	465a      	mov	r2, fp
 80092b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092bc:	9109      	str	r1, [sp, #36]	; 0x24
 80092be:	f7ff ff18 	bl	80090f2 <__exponent>
 80092c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c4:	1813      	adds	r3, r2, r0
 80092c6:	2a01      	cmp	r2, #1
 80092c8:	4681      	mov	r9, r0
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	dc02      	bgt.n	80092d4 <_printf_float+0x164>
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	07d2      	lsls	r2, r2, #31
 80092d2:	d501      	bpl.n	80092d8 <_printf_float+0x168>
 80092d4:	3301      	adds	r3, #1
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d09c      	beq.n	800921a <_printf_float+0xaa>
 80092e0:	232d      	movs	r3, #45	; 0x2d
 80092e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e6:	e798      	b.n	800921a <_printf_float+0xaa>
 80092e8:	9a06      	ldr	r2, [sp, #24]
 80092ea:	2a47      	cmp	r2, #71	; 0x47
 80092ec:	d1be      	bne.n	800926c <_printf_float+0xfc>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1bc      	bne.n	800926c <_printf_float+0xfc>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7b9      	b.n	800926a <_printf_float+0xfa>
 80092f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092fa:	d118      	bne.n	800932e <_printf_float+0x1be>
 80092fc:	2900      	cmp	r1, #0
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	dd0b      	ble.n	800931a <_printf_float+0x1aa>
 8009302:	6121      	str	r1, [r4, #16]
 8009304:	b913      	cbnz	r3, 800930c <_printf_float+0x19c>
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	07d0      	lsls	r0, r2, #31
 800930a:	d502      	bpl.n	8009312 <_printf_float+0x1a2>
 800930c:	3301      	adds	r3, #1
 800930e:	440b      	add	r3, r1
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	65a1      	str	r1, [r4, #88]	; 0x58
 8009314:	f04f 0900 	mov.w	r9, #0
 8009318:	e7de      	b.n	80092d8 <_printf_float+0x168>
 800931a:	b913      	cbnz	r3, 8009322 <_printf_float+0x1b2>
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	07d2      	lsls	r2, r2, #31
 8009320:	d501      	bpl.n	8009326 <_printf_float+0x1b6>
 8009322:	3302      	adds	r3, #2
 8009324:	e7f4      	b.n	8009310 <_printf_float+0x1a0>
 8009326:	2301      	movs	r3, #1
 8009328:	e7f2      	b.n	8009310 <_printf_float+0x1a0>
 800932a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	4299      	cmp	r1, r3
 8009332:	db05      	blt.n	8009340 <_printf_float+0x1d0>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	6121      	str	r1, [r4, #16]
 8009338:	07d8      	lsls	r0, r3, #31
 800933a:	d5ea      	bpl.n	8009312 <_printf_float+0x1a2>
 800933c:	1c4b      	adds	r3, r1, #1
 800933e:	e7e7      	b.n	8009310 <_printf_float+0x1a0>
 8009340:	2900      	cmp	r1, #0
 8009342:	bfd4      	ite	le
 8009344:	f1c1 0202 	rsble	r2, r1, #2
 8009348:	2201      	movgt	r2, #1
 800934a:	4413      	add	r3, r2
 800934c:	e7e0      	b.n	8009310 <_printf_float+0x1a0>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	055a      	lsls	r2, r3, #21
 8009352:	d407      	bmi.n	8009364 <_printf_float+0x1f4>
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	4642      	mov	r2, r8
 8009358:	4631      	mov	r1, r6
 800935a:	4628      	mov	r0, r5
 800935c:	47b8      	blx	r7
 800935e:	3001      	adds	r0, #1
 8009360:	d12c      	bne.n	80093bc <_printf_float+0x24c>
 8009362:	e764      	b.n	800922e <_printf_float+0xbe>
 8009364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009368:	f240 80e0 	bls.w	800952c <_printf_float+0x3bc>
 800936c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	f7f7 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009378:	2800      	cmp	r0, #0
 800937a:	d034      	beq.n	80093e6 <_printf_float+0x276>
 800937c:	4a37      	ldr	r2, [pc, #220]	; (800945c <_printf_float+0x2ec>)
 800937e:	2301      	movs	r3, #1
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af51 	beq.w	800922e <_printf_float+0xbe>
 800938c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009390:	429a      	cmp	r2, r3
 8009392:	db02      	blt.n	800939a <_printf_float+0x22a>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07d8      	lsls	r0, r3, #31
 8009398:	d510      	bpl.n	80093bc <_printf_float+0x24c>
 800939a:	ee18 3a10 	vmov	r3, s16
 800939e:	4652      	mov	r2, sl
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af41 	beq.w	800922e <_printf_float+0xbe>
 80093ac:	f04f 0800 	mov.w	r8, #0
 80093b0:	f104 091a 	add.w	r9, r4, #26
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	3b01      	subs	r3, #1
 80093b8:	4543      	cmp	r3, r8
 80093ba:	dc09      	bgt.n	80093d0 <_printf_float+0x260>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	079b      	lsls	r3, r3, #30
 80093c0:	f100 8107 	bmi.w	80095d2 <_printf_float+0x462>
 80093c4:	68e0      	ldr	r0, [r4, #12]
 80093c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c8:	4298      	cmp	r0, r3
 80093ca:	bfb8      	it	lt
 80093cc:	4618      	movlt	r0, r3
 80093ce:	e730      	b.n	8009232 <_printf_float+0xc2>
 80093d0:	2301      	movs	r3, #1
 80093d2:	464a      	mov	r2, r9
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f43f af27 	beq.w	800922e <_printf_float+0xbe>
 80093e0:	f108 0801 	add.w	r8, r8, #1
 80093e4:	e7e6      	b.n	80093b4 <_printf_float+0x244>
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc39      	bgt.n	8009460 <_printf_float+0x2f0>
 80093ec:	4a1b      	ldr	r2, [pc, #108]	; (800945c <_printf_float+0x2ec>)
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af19 	beq.w	800922e <_printf_float+0xbe>
 80093fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009400:	4313      	orrs	r3, r2
 8009402:	d102      	bne.n	800940a <_printf_float+0x29a>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	07d9      	lsls	r1, r3, #31
 8009408:	d5d8      	bpl.n	80093bc <_printf_float+0x24c>
 800940a:	ee18 3a10 	vmov	r3, s16
 800940e:	4652      	mov	r2, sl
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f af09 	beq.w	800922e <_printf_float+0xbe>
 800941c:	f04f 0900 	mov.w	r9, #0
 8009420:	f104 0a1a 	add.w	sl, r4, #26
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	425b      	negs	r3, r3
 8009428:	454b      	cmp	r3, r9
 800942a:	dc01      	bgt.n	8009430 <_printf_float+0x2c0>
 800942c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942e:	e792      	b.n	8009356 <_printf_float+0x1e6>
 8009430:	2301      	movs	r3, #1
 8009432:	4652      	mov	r2, sl
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f aef7 	beq.w	800922e <_printf_float+0xbe>
 8009440:	f109 0901 	add.w	r9, r9, #1
 8009444:	e7ee      	b.n	8009424 <_printf_float+0x2b4>
 8009446:	bf00      	nop
 8009448:	7fefffff 	.word	0x7fefffff
 800944c:	08017a27 	.word	0x08017a27
 8009450:	08017a2b 	.word	0x08017a2b
 8009454:	08017a2f 	.word	0x08017a2f
 8009458:	08017a33 	.word	0x08017a33
 800945c:	08017a37 	.word	0x08017a37
 8009460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009464:	429a      	cmp	r2, r3
 8009466:	bfa8      	it	ge
 8009468:	461a      	movge	r2, r3
 800946a:	2a00      	cmp	r2, #0
 800946c:	4691      	mov	r9, r2
 800946e:	dc37      	bgt.n	80094e0 <_printf_float+0x370>
 8009470:	f04f 0b00 	mov.w	fp, #0
 8009474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009478:	f104 021a 	add.w	r2, r4, #26
 800947c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	eba3 0309 	sub.w	r3, r3, r9
 8009484:	455b      	cmp	r3, fp
 8009486:	dc33      	bgt.n	80094f0 <_printf_float+0x380>
 8009488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800948c:	429a      	cmp	r2, r3
 800948e:	db3b      	blt.n	8009508 <_printf_float+0x398>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	07da      	lsls	r2, r3, #31
 8009494:	d438      	bmi.n	8009508 <_printf_float+0x398>
 8009496:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800949a:	eba2 0903 	sub.w	r9, r2, r3
 800949e:	9b05      	ldr	r3, [sp, #20]
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	4591      	cmp	r9, r2
 80094a4:	bfa8      	it	ge
 80094a6:	4691      	movge	r9, r2
 80094a8:	f1b9 0f00 	cmp.w	r9, #0
 80094ac:	dc35      	bgt.n	800951a <_printf_float+0x3aa>
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b6:	f104 0a1a 	add.w	sl, r4, #26
 80094ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	eba3 0309 	sub.w	r3, r3, r9
 80094c4:	4543      	cmp	r3, r8
 80094c6:	f77f af79 	ble.w	80093bc <_printf_float+0x24c>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4652      	mov	r2, sl
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	f43f aeaa 	beq.w	800922e <_printf_float+0xbe>
 80094da:	f108 0801 	add.w	r8, r8, #1
 80094de:	e7ec      	b.n	80094ba <_printf_float+0x34a>
 80094e0:	4613      	mov	r3, r2
 80094e2:	4631      	mov	r1, r6
 80094e4:	4642      	mov	r2, r8
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	d1c0      	bne.n	8009470 <_printf_float+0x300>
 80094ee:	e69e      	b.n	800922e <_printf_float+0xbe>
 80094f0:	2301      	movs	r3, #1
 80094f2:	4631      	mov	r1, r6
 80094f4:	4628      	mov	r0, r5
 80094f6:	9205      	str	r2, [sp, #20]
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f ae97 	beq.w	800922e <_printf_float+0xbe>
 8009500:	9a05      	ldr	r2, [sp, #20]
 8009502:	f10b 0b01 	add.w	fp, fp, #1
 8009506:	e7b9      	b.n	800947c <_printf_float+0x30c>
 8009508:	ee18 3a10 	vmov	r3, s16
 800950c:	4652      	mov	r2, sl
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	d1be      	bne.n	8009496 <_printf_float+0x326>
 8009518:	e689      	b.n	800922e <_printf_float+0xbe>
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	464b      	mov	r3, r9
 800951e:	4442      	add	r2, r8
 8009520:	4631      	mov	r1, r6
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	d1c1      	bne.n	80094ae <_printf_float+0x33e>
 800952a:	e680      	b.n	800922e <_printf_float+0xbe>
 800952c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800952e:	2a01      	cmp	r2, #1
 8009530:	dc01      	bgt.n	8009536 <_printf_float+0x3c6>
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d53a      	bpl.n	80095ac <_printf_float+0x43c>
 8009536:	2301      	movs	r3, #1
 8009538:	4642      	mov	r2, r8
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f ae74 	beq.w	800922e <_printf_float+0xbe>
 8009546:	ee18 3a10 	vmov	r3, s16
 800954a:	4652      	mov	r2, sl
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f ae6b 	beq.w	800922e <_printf_float+0xbe>
 8009558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800955c:	2200      	movs	r2, #0
 800955e:	2300      	movs	r3, #0
 8009560:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009564:	f7f7 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009568:	b9d8      	cbnz	r0, 80095a2 <_printf_float+0x432>
 800956a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800956e:	f108 0201 	add.w	r2, r8, #1
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	d10e      	bne.n	800959a <_printf_float+0x42a>
 800957c:	e657      	b.n	800922e <_printf_float+0xbe>
 800957e:	2301      	movs	r3, #1
 8009580:	4652      	mov	r2, sl
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f ae50 	beq.w	800922e <_printf_float+0xbe>
 800958e:	f108 0801 	add.w	r8, r8, #1
 8009592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009594:	3b01      	subs	r3, #1
 8009596:	4543      	cmp	r3, r8
 8009598:	dcf1      	bgt.n	800957e <_printf_float+0x40e>
 800959a:	464b      	mov	r3, r9
 800959c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095a0:	e6da      	b.n	8009358 <_printf_float+0x1e8>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	f104 0a1a 	add.w	sl, r4, #26
 80095aa:	e7f2      	b.n	8009592 <_printf_float+0x422>
 80095ac:	2301      	movs	r3, #1
 80095ae:	4642      	mov	r2, r8
 80095b0:	e7df      	b.n	8009572 <_printf_float+0x402>
 80095b2:	2301      	movs	r3, #1
 80095b4:	464a      	mov	r2, r9
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	f43f ae36 	beq.w	800922e <_printf_float+0xbe>
 80095c2:	f108 0801 	add.w	r8, r8, #1
 80095c6:	68e3      	ldr	r3, [r4, #12]
 80095c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095ca:	1a5b      	subs	r3, r3, r1
 80095cc:	4543      	cmp	r3, r8
 80095ce:	dcf0      	bgt.n	80095b2 <_printf_float+0x442>
 80095d0:	e6f8      	b.n	80093c4 <_printf_float+0x254>
 80095d2:	f04f 0800 	mov.w	r8, #0
 80095d6:	f104 0919 	add.w	r9, r4, #25
 80095da:	e7f4      	b.n	80095c6 <_printf_float+0x456>

080095dc <_printf_common>:
 80095dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	4616      	mov	r6, r2
 80095e2:	4699      	mov	r9, r3
 80095e4:	688a      	ldr	r2, [r1, #8]
 80095e6:	690b      	ldr	r3, [r1, #16]
 80095e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095ec:	4293      	cmp	r3, r2
 80095ee:	bfb8      	it	lt
 80095f0:	4613      	movlt	r3, r2
 80095f2:	6033      	str	r3, [r6, #0]
 80095f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f8:	4607      	mov	r7, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	b10a      	cbz	r2, 8009602 <_printf_common+0x26>
 80095fe:	3301      	adds	r3, #1
 8009600:	6033      	str	r3, [r6, #0]
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	0699      	lsls	r1, r3, #26
 8009606:	bf42      	ittt	mi
 8009608:	6833      	ldrmi	r3, [r6, #0]
 800960a:	3302      	addmi	r3, #2
 800960c:	6033      	strmi	r3, [r6, #0]
 800960e:	6825      	ldr	r5, [r4, #0]
 8009610:	f015 0506 	ands.w	r5, r5, #6
 8009614:	d106      	bne.n	8009624 <_printf_common+0x48>
 8009616:	f104 0a19 	add.w	sl, r4, #25
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	6832      	ldr	r2, [r6, #0]
 800961e:	1a9b      	subs	r3, r3, r2
 8009620:	42ab      	cmp	r3, r5
 8009622:	dc26      	bgt.n	8009672 <_printf_common+0x96>
 8009624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009628:	1e13      	subs	r3, r2, #0
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	bf18      	it	ne
 800962e:	2301      	movne	r3, #1
 8009630:	0692      	lsls	r2, r2, #26
 8009632:	d42b      	bmi.n	800968c <_printf_common+0xb0>
 8009634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009638:	4649      	mov	r1, r9
 800963a:	4638      	mov	r0, r7
 800963c:	47c0      	blx	r8
 800963e:	3001      	adds	r0, #1
 8009640:	d01e      	beq.n	8009680 <_printf_common+0xa4>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	6922      	ldr	r2, [r4, #16]
 8009646:	f003 0306 	and.w	r3, r3, #6
 800964a:	2b04      	cmp	r3, #4
 800964c:	bf02      	ittt	eq
 800964e:	68e5      	ldreq	r5, [r4, #12]
 8009650:	6833      	ldreq	r3, [r6, #0]
 8009652:	1aed      	subeq	r5, r5, r3
 8009654:	68a3      	ldr	r3, [r4, #8]
 8009656:	bf0c      	ite	eq
 8009658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800965c:	2500      	movne	r5, #0
 800965e:	4293      	cmp	r3, r2
 8009660:	bfc4      	itt	gt
 8009662:	1a9b      	subgt	r3, r3, r2
 8009664:	18ed      	addgt	r5, r5, r3
 8009666:	2600      	movs	r6, #0
 8009668:	341a      	adds	r4, #26
 800966a:	42b5      	cmp	r5, r6
 800966c:	d11a      	bne.n	80096a4 <_printf_common+0xc8>
 800966e:	2000      	movs	r0, #0
 8009670:	e008      	b.n	8009684 <_printf_common+0xa8>
 8009672:	2301      	movs	r3, #1
 8009674:	4652      	mov	r2, sl
 8009676:	4649      	mov	r1, r9
 8009678:	4638      	mov	r0, r7
 800967a:	47c0      	blx	r8
 800967c:	3001      	adds	r0, #1
 800967e:	d103      	bne.n	8009688 <_printf_common+0xac>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009688:	3501      	adds	r5, #1
 800968a:	e7c6      	b.n	800961a <_printf_common+0x3e>
 800968c:	18e1      	adds	r1, r4, r3
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	2030      	movs	r0, #48	; 0x30
 8009692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009696:	4422      	add	r2, r4
 8009698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800969c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a0:	3302      	adds	r3, #2
 80096a2:	e7c7      	b.n	8009634 <_printf_common+0x58>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4622      	mov	r2, r4
 80096a8:	4649      	mov	r1, r9
 80096aa:	4638      	mov	r0, r7
 80096ac:	47c0      	blx	r8
 80096ae:	3001      	adds	r0, #1
 80096b0:	d0e6      	beq.n	8009680 <_printf_common+0xa4>
 80096b2:	3601      	adds	r6, #1
 80096b4:	e7d9      	b.n	800966a <_printf_common+0x8e>
	...

080096b8 <_printf_i>:
 80096b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096bc:	7e0f      	ldrb	r7, [r1, #24]
 80096be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c0:	2f78      	cmp	r7, #120	; 0x78
 80096c2:	4691      	mov	r9, r2
 80096c4:	4680      	mov	r8, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	469a      	mov	sl, r3
 80096ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096ce:	d807      	bhi.n	80096e0 <_printf_i+0x28>
 80096d0:	2f62      	cmp	r7, #98	; 0x62
 80096d2:	d80a      	bhi.n	80096ea <_printf_i+0x32>
 80096d4:	2f00      	cmp	r7, #0
 80096d6:	f000 80d4 	beq.w	8009882 <_printf_i+0x1ca>
 80096da:	2f58      	cmp	r7, #88	; 0x58
 80096dc:	f000 80c0 	beq.w	8009860 <_printf_i+0x1a8>
 80096e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e8:	e03a      	b.n	8009760 <_printf_i+0xa8>
 80096ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ee:	2b15      	cmp	r3, #21
 80096f0:	d8f6      	bhi.n	80096e0 <_printf_i+0x28>
 80096f2:	a101      	add	r1, pc, #4	; (adr r1, 80096f8 <_printf_i+0x40>)
 80096f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f8:	08009751 	.word	0x08009751
 80096fc:	08009765 	.word	0x08009765
 8009700:	080096e1 	.word	0x080096e1
 8009704:	080096e1 	.word	0x080096e1
 8009708:	080096e1 	.word	0x080096e1
 800970c:	080096e1 	.word	0x080096e1
 8009710:	08009765 	.word	0x08009765
 8009714:	080096e1 	.word	0x080096e1
 8009718:	080096e1 	.word	0x080096e1
 800971c:	080096e1 	.word	0x080096e1
 8009720:	080096e1 	.word	0x080096e1
 8009724:	08009869 	.word	0x08009869
 8009728:	08009791 	.word	0x08009791
 800972c:	08009823 	.word	0x08009823
 8009730:	080096e1 	.word	0x080096e1
 8009734:	080096e1 	.word	0x080096e1
 8009738:	0800988b 	.word	0x0800988b
 800973c:	080096e1 	.word	0x080096e1
 8009740:	08009791 	.word	0x08009791
 8009744:	080096e1 	.word	0x080096e1
 8009748:	080096e1 	.word	0x080096e1
 800974c:	0800982b 	.word	0x0800982b
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	1d1a      	adds	r2, r3, #4
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	602a      	str	r2, [r5, #0]
 8009758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800975c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009760:	2301      	movs	r3, #1
 8009762:	e09f      	b.n	80098a4 <_printf_i+0x1ec>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	0607      	lsls	r7, r0, #24
 800976a:	f103 0104 	add.w	r1, r3, #4
 800976e:	6029      	str	r1, [r5, #0]
 8009770:	d501      	bpl.n	8009776 <_printf_i+0xbe>
 8009772:	681e      	ldr	r6, [r3, #0]
 8009774:	e003      	b.n	800977e <_printf_i+0xc6>
 8009776:	0646      	lsls	r6, r0, #25
 8009778:	d5fb      	bpl.n	8009772 <_printf_i+0xba>
 800977a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800977e:	2e00      	cmp	r6, #0
 8009780:	da03      	bge.n	800978a <_printf_i+0xd2>
 8009782:	232d      	movs	r3, #45	; 0x2d
 8009784:	4276      	negs	r6, r6
 8009786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800978a:	485a      	ldr	r0, [pc, #360]	; (80098f4 <_printf_i+0x23c>)
 800978c:	230a      	movs	r3, #10
 800978e:	e012      	b.n	80097b6 <_printf_i+0xfe>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	6820      	ldr	r0, [r4, #0]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	6029      	str	r1, [r5, #0]
 8009798:	0605      	lsls	r5, r0, #24
 800979a:	d501      	bpl.n	80097a0 <_printf_i+0xe8>
 800979c:	681e      	ldr	r6, [r3, #0]
 800979e:	e002      	b.n	80097a6 <_printf_i+0xee>
 80097a0:	0641      	lsls	r1, r0, #25
 80097a2:	d5fb      	bpl.n	800979c <_printf_i+0xe4>
 80097a4:	881e      	ldrh	r6, [r3, #0]
 80097a6:	4853      	ldr	r0, [pc, #332]	; (80098f4 <_printf_i+0x23c>)
 80097a8:	2f6f      	cmp	r7, #111	; 0x6f
 80097aa:	bf0c      	ite	eq
 80097ac:	2308      	moveq	r3, #8
 80097ae:	230a      	movne	r3, #10
 80097b0:	2100      	movs	r1, #0
 80097b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097b6:	6865      	ldr	r5, [r4, #4]
 80097b8:	60a5      	str	r5, [r4, #8]
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	bfa2      	ittt	ge
 80097be:	6821      	ldrge	r1, [r4, #0]
 80097c0:	f021 0104 	bicge.w	r1, r1, #4
 80097c4:	6021      	strge	r1, [r4, #0]
 80097c6:	b90e      	cbnz	r6, 80097cc <_printf_i+0x114>
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	d04b      	beq.n	8009864 <_printf_i+0x1ac>
 80097cc:	4615      	mov	r5, r2
 80097ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80097d2:	fb03 6711 	mls	r7, r3, r1, r6
 80097d6:	5dc7      	ldrb	r7, [r0, r7]
 80097d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097dc:	4637      	mov	r7, r6
 80097de:	42bb      	cmp	r3, r7
 80097e0:	460e      	mov	r6, r1
 80097e2:	d9f4      	bls.n	80097ce <_printf_i+0x116>
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d10b      	bne.n	8009800 <_printf_i+0x148>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	07de      	lsls	r6, r3, #31
 80097ec:	d508      	bpl.n	8009800 <_printf_i+0x148>
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	6861      	ldr	r1, [r4, #4]
 80097f2:	4299      	cmp	r1, r3
 80097f4:	bfde      	ittt	le
 80097f6:	2330      	movle	r3, #48	; 0x30
 80097f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009800:	1b52      	subs	r2, r2, r5
 8009802:	6122      	str	r2, [r4, #16]
 8009804:	f8cd a000 	str.w	sl, [sp]
 8009808:	464b      	mov	r3, r9
 800980a:	aa03      	add	r2, sp, #12
 800980c:	4621      	mov	r1, r4
 800980e:	4640      	mov	r0, r8
 8009810:	f7ff fee4 	bl	80095dc <_printf_common>
 8009814:	3001      	adds	r0, #1
 8009816:	d14a      	bne.n	80098ae <_printf_i+0x1f6>
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	b004      	add	sp, #16
 800981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	f043 0320 	orr.w	r3, r3, #32
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	4833      	ldr	r0, [pc, #204]	; (80098f8 <_printf_i+0x240>)
 800982c:	2778      	movs	r7, #120	; 0x78
 800982e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	061f      	lsls	r7, r3, #24
 8009838:	f851 6b04 	ldr.w	r6, [r1], #4
 800983c:	d402      	bmi.n	8009844 <_printf_i+0x18c>
 800983e:	065f      	lsls	r7, r3, #25
 8009840:	bf48      	it	mi
 8009842:	b2b6      	uxthmi	r6, r6
 8009844:	07df      	lsls	r7, r3, #31
 8009846:	bf48      	it	mi
 8009848:	f043 0320 	orrmi.w	r3, r3, #32
 800984c:	6029      	str	r1, [r5, #0]
 800984e:	bf48      	it	mi
 8009850:	6023      	strmi	r3, [r4, #0]
 8009852:	b91e      	cbnz	r6, 800985c <_printf_i+0x1a4>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	f023 0320 	bic.w	r3, r3, #32
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	2310      	movs	r3, #16
 800985e:	e7a7      	b.n	80097b0 <_printf_i+0xf8>
 8009860:	4824      	ldr	r0, [pc, #144]	; (80098f4 <_printf_i+0x23c>)
 8009862:	e7e4      	b.n	800982e <_printf_i+0x176>
 8009864:	4615      	mov	r5, r2
 8009866:	e7bd      	b.n	80097e4 <_printf_i+0x12c>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	6826      	ldr	r6, [r4, #0]
 800986c:	6961      	ldr	r1, [r4, #20]
 800986e:	1d18      	adds	r0, r3, #4
 8009870:	6028      	str	r0, [r5, #0]
 8009872:	0635      	lsls	r5, r6, #24
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	d501      	bpl.n	800987c <_printf_i+0x1c4>
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	e002      	b.n	8009882 <_printf_i+0x1ca>
 800987c:	0670      	lsls	r0, r6, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0x1c0>
 8009880:	8019      	strh	r1, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	4615      	mov	r5, r2
 8009888:	e7bc      	b.n	8009804 <_printf_i+0x14c>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	602a      	str	r2, [r5, #0]
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	2100      	movs	r1, #0
 8009896:	4628      	mov	r0, r5
 8009898:	f7f6 fc9a 	bl	80001d0 <memchr>
 800989c:	b108      	cbz	r0, 80098a2 <_printf_i+0x1ea>
 800989e:	1b40      	subs	r0, r0, r5
 80098a0:	6060      	str	r0, [r4, #4]
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	2300      	movs	r3, #0
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ac:	e7aa      	b.n	8009804 <_printf_i+0x14c>
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0ad      	beq.n	8009818 <_printf_i+0x160>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	d413      	bmi.n	80098ea <_printf_i+0x232>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	4298      	cmp	r0, r3
 80098c8:	bfb8      	it	lt
 80098ca:	4618      	movlt	r0, r3
 80098cc:	e7a6      	b.n	800981c <_printf_i+0x164>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4632      	mov	r2, r6
 80098d2:	4649      	mov	r1, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	47d0      	blx	sl
 80098d8:	3001      	adds	r0, #1
 80098da:	d09d      	beq.n	8009818 <_printf_i+0x160>
 80098dc:	3501      	adds	r5, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dcf2      	bgt.n	80098ce <_printf_i+0x216>
 80098e8:	e7eb      	b.n	80098c2 <_printf_i+0x20a>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f104 0619 	add.w	r6, r4, #25
 80098f0:	e7f5      	b.n	80098de <_printf_i+0x226>
 80098f2:	bf00      	nop
 80098f4:	08017a39 	.word	0x08017a39
 80098f8:	08017a4a 	.word	0x08017a4a

080098fc <__sflush_r>:
 80098fc:	898a      	ldrh	r2, [r1, #12]
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	4605      	mov	r5, r0
 8009904:	0710      	lsls	r0, r2, #28
 8009906:	460c      	mov	r4, r1
 8009908:	d458      	bmi.n	80099bc <__sflush_r+0xc0>
 800990a:	684b      	ldr	r3, [r1, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dc05      	bgt.n	800991c <__sflush_r+0x20>
 8009910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	dc02      	bgt.n	800991c <__sflush_r+0x20>
 8009916:	2000      	movs	r0, #0
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800991e:	2e00      	cmp	r6, #0
 8009920:	d0f9      	beq.n	8009916 <__sflush_r+0x1a>
 8009922:	2300      	movs	r3, #0
 8009924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009928:	682f      	ldr	r7, [r5, #0]
 800992a:	6a21      	ldr	r1, [r4, #32]
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	d032      	beq.n	8009996 <__sflush_r+0x9a>
 8009930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	075a      	lsls	r2, r3, #29
 8009936:	d505      	bpl.n	8009944 <__sflush_r+0x48>
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	1ac0      	subs	r0, r0, r3
 800993c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800993e:	b10b      	cbz	r3, 8009944 <__sflush_r+0x48>
 8009940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009942:	1ac0      	subs	r0, r0, r3
 8009944:	2300      	movs	r3, #0
 8009946:	4602      	mov	r2, r0
 8009948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994a:	6a21      	ldr	r1, [r4, #32]
 800994c:	4628      	mov	r0, r5
 800994e:	47b0      	blx	r6
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	d106      	bne.n	8009964 <__sflush_r+0x68>
 8009956:	6829      	ldr	r1, [r5, #0]
 8009958:	291d      	cmp	r1, #29
 800995a:	d82b      	bhi.n	80099b4 <__sflush_r+0xb8>
 800995c:	4a29      	ldr	r2, [pc, #164]	; (8009a04 <__sflush_r+0x108>)
 800995e:	410a      	asrs	r2, r1
 8009960:	07d6      	lsls	r6, r2, #31
 8009962:	d427      	bmi.n	80099b4 <__sflush_r+0xb8>
 8009964:	2200      	movs	r2, #0
 8009966:	6062      	str	r2, [r4, #4]
 8009968:	04d9      	lsls	r1, r3, #19
 800996a:	6922      	ldr	r2, [r4, #16]
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	d504      	bpl.n	800997a <__sflush_r+0x7e>
 8009970:	1c42      	adds	r2, r0, #1
 8009972:	d101      	bne.n	8009978 <__sflush_r+0x7c>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b903      	cbnz	r3, 800997a <__sflush_r+0x7e>
 8009978:	6560      	str	r0, [r4, #84]	; 0x54
 800997a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997c:	602f      	str	r7, [r5, #0]
 800997e:	2900      	cmp	r1, #0
 8009980:	d0c9      	beq.n	8009916 <__sflush_r+0x1a>
 8009982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009986:	4299      	cmp	r1, r3
 8009988:	d002      	beq.n	8009990 <__sflush_r+0x94>
 800998a:	4628      	mov	r0, r5
 800998c:	f001 f8e6 	bl	800ab5c <_free_r>
 8009990:	2000      	movs	r0, #0
 8009992:	6360      	str	r0, [r4, #52]	; 0x34
 8009994:	e7c0      	b.n	8009918 <__sflush_r+0x1c>
 8009996:	2301      	movs	r3, #1
 8009998:	4628      	mov	r0, r5
 800999a:	47b0      	blx	r6
 800999c:	1c41      	adds	r1, r0, #1
 800999e:	d1c8      	bne.n	8009932 <__sflush_r+0x36>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0c5      	beq.n	8009932 <__sflush_r+0x36>
 80099a6:	2b1d      	cmp	r3, #29
 80099a8:	d001      	beq.n	80099ae <__sflush_r+0xb2>
 80099aa:	2b16      	cmp	r3, #22
 80099ac:	d101      	bne.n	80099b2 <__sflush_r+0xb6>
 80099ae:	602f      	str	r7, [r5, #0]
 80099b0:	e7b1      	b.n	8009916 <__sflush_r+0x1a>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	e7ad      	b.n	8009918 <__sflush_r+0x1c>
 80099bc:	690f      	ldr	r7, [r1, #16]
 80099be:	2f00      	cmp	r7, #0
 80099c0:	d0a9      	beq.n	8009916 <__sflush_r+0x1a>
 80099c2:	0793      	lsls	r3, r2, #30
 80099c4:	680e      	ldr	r6, [r1, #0]
 80099c6:	bf08      	it	eq
 80099c8:	694b      	ldreq	r3, [r1, #20]
 80099ca:	600f      	str	r7, [r1, #0]
 80099cc:	bf18      	it	ne
 80099ce:	2300      	movne	r3, #0
 80099d0:	eba6 0807 	sub.w	r8, r6, r7
 80099d4:	608b      	str	r3, [r1, #8]
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	dd9c      	ble.n	8009916 <__sflush_r+0x1a>
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e0:	4643      	mov	r3, r8
 80099e2:	463a      	mov	r2, r7
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b0      	blx	r6
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dc06      	bgt.n	80099fa <__sflush_r+0xfe>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e78e      	b.n	8009918 <__sflush_r+0x1c>
 80099fa:	4407      	add	r7, r0
 80099fc:	eba8 0800 	sub.w	r8, r8, r0
 8009a00:	e7e9      	b.n	80099d6 <__sflush_r+0xda>
 8009a02:	bf00      	nop
 8009a04:	dfbffffe 	.word	0xdfbffffe

08009a08 <_fflush_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	b913      	cbnz	r3, 8009a18 <_fflush_r+0x10>
 8009a12:	2500      	movs	r5, #0
 8009a14:	4628      	mov	r0, r5
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	b118      	cbz	r0, 8009a22 <_fflush_r+0x1a>
 8009a1a:	6a03      	ldr	r3, [r0, #32]
 8009a1c:	b90b      	cbnz	r3, 8009a22 <_fflush_r+0x1a>
 8009a1e:	f000 f8bb 	bl	8009b98 <__sinit>
 8009a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0f3      	beq.n	8009a12 <_fflush_r+0xa>
 8009a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a2c:	07d0      	lsls	r0, r2, #31
 8009a2e:	d404      	bmi.n	8009a3a <_fflush_r+0x32>
 8009a30:	0599      	lsls	r1, r3, #22
 8009a32:	d402      	bmi.n	8009a3a <_fflush_r+0x32>
 8009a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a36:	f000 f9e8 	bl	8009e0a <__retarget_lock_acquire_recursive>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	f7ff ff5d 	bl	80098fc <__sflush_r>
 8009a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a44:	07da      	lsls	r2, r3, #31
 8009a46:	4605      	mov	r5, r0
 8009a48:	d4e4      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	059b      	lsls	r3, r3, #22
 8009a4e:	d4e1      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a52:	f000 f9db 	bl	8009e0c <__retarget_lock_release_recursive>
 8009a56:	e7dd      	b.n	8009a14 <_fflush_r+0xc>

08009a58 <fflush>:
 8009a58:	4601      	mov	r1, r0
 8009a5a:	b920      	cbnz	r0, 8009a66 <fflush+0xe>
 8009a5c:	4a04      	ldr	r2, [pc, #16]	; (8009a70 <fflush+0x18>)
 8009a5e:	4905      	ldr	r1, [pc, #20]	; (8009a74 <fflush+0x1c>)
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <fflush+0x20>)
 8009a62:	f000 b8b1 	b.w	8009bc8 <_fwalk_sglue>
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <fflush+0x24>)
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f7ff bfcd 	b.w	8009a08 <_fflush_r>
 8009a6e:	bf00      	nop
 8009a70:	20000b90 	.word	0x20000b90
 8009a74:	08009a09 	.word	0x08009a09
 8009a78:	20000b9c 	.word	0x20000b9c
 8009a7c:	20000be8 	.word	0x20000be8

08009a80 <std>:
 8009a80:	2300      	movs	r3, #0
 8009a82:	b510      	push	{r4, lr}
 8009a84:	4604      	mov	r4, r0
 8009a86:	e9c0 3300 	strd	r3, r3, [r0]
 8009a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a8e:	6083      	str	r3, [r0, #8]
 8009a90:	8181      	strh	r1, [r0, #12]
 8009a92:	6643      	str	r3, [r0, #100]	; 0x64
 8009a94:	81c2      	strh	r2, [r0, #14]
 8009a96:	6183      	str	r3, [r0, #24]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	2208      	movs	r2, #8
 8009a9c:	305c      	adds	r0, #92	; 0x5c
 8009a9e:	f000 f914 	bl	8009cca <memset>
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <std+0x58>)
 8009aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <std+0x5c>)
 8009aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <std+0x60>)
 8009aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aae:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <std+0x64>)
 8009ab0:	6323      	str	r3, [r4, #48]	; 0x30
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <std+0x68>)
 8009ab4:	6224      	str	r4, [r4, #32]
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	d006      	beq.n	8009ac8 <std+0x48>
 8009aba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009abe:	4294      	cmp	r4, r2
 8009ac0:	d002      	beq.n	8009ac8 <std+0x48>
 8009ac2:	33d0      	adds	r3, #208	; 0xd0
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	d105      	bne.n	8009ad4 <std+0x54>
 8009ac8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad0:	f000 b99a 	b.w	8009e08 <__retarget_lock_init_recursive>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	bf00      	nop
 8009ad8:	08009c45 	.word	0x08009c45
 8009adc:	08009c67 	.word	0x08009c67
 8009ae0:	08009c9f 	.word	0x08009c9f
 8009ae4:	08009cc3 	.word	0x08009cc3
 8009ae8:	20001654 	.word	0x20001654

08009aec <stdio_exit_handler>:
 8009aec:	4a02      	ldr	r2, [pc, #8]	; (8009af8 <stdio_exit_handler+0xc>)
 8009aee:	4903      	ldr	r1, [pc, #12]	; (8009afc <stdio_exit_handler+0x10>)
 8009af0:	4803      	ldr	r0, [pc, #12]	; (8009b00 <stdio_exit_handler+0x14>)
 8009af2:	f000 b869 	b.w	8009bc8 <_fwalk_sglue>
 8009af6:	bf00      	nop
 8009af8:	20000b90 	.word	0x20000b90
 8009afc:	08009a09 	.word	0x08009a09
 8009b00:	20000b9c 	.word	0x20000b9c

08009b04 <cleanup_stdio>:
 8009b04:	6841      	ldr	r1, [r0, #4]
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <cleanup_stdio+0x34>)
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	d001      	beq.n	8009b14 <cleanup_stdio+0x10>
 8009b10:	f7ff ff7a 	bl	8009a08 <_fflush_r>
 8009b14:	68a1      	ldr	r1, [r4, #8]
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <cleanup_stdio+0x38>)
 8009b18:	4299      	cmp	r1, r3
 8009b1a:	d002      	beq.n	8009b22 <cleanup_stdio+0x1e>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7ff ff73 	bl	8009a08 <_fflush_r>
 8009b22:	68e1      	ldr	r1, [r4, #12]
 8009b24:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <cleanup_stdio+0x3c>)
 8009b26:	4299      	cmp	r1, r3
 8009b28:	d004      	beq.n	8009b34 <cleanup_stdio+0x30>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f7ff bf6a 	b.w	8009a08 <_fflush_r>
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	bf00      	nop
 8009b38:	20001654 	.word	0x20001654
 8009b3c:	200016bc 	.word	0x200016bc
 8009b40:	20001724 	.word	0x20001724

08009b44 <global_stdio_init.part.0>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <global_stdio_init.part.0+0x30>)
 8009b48:	4c0b      	ldr	r4, [pc, #44]	; (8009b78 <global_stdio_init.part.0+0x34>)
 8009b4a:	4a0c      	ldr	r2, [pc, #48]	; (8009b7c <global_stdio_init.part.0+0x38>)
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	2200      	movs	r2, #0
 8009b52:	2104      	movs	r1, #4
 8009b54:	f7ff ff94 	bl	8009a80 <std>
 8009b58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	2109      	movs	r1, #9
 8009b60:	f7ff ff8e 	bl	8009a80 <std>
 8009b64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b68:	2202      	movs	r2, #2
 8009b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b6e:	2112      	movs	r1, #18
 8009b70:	f7ff bf86 	b.w	8009a80 <std>
 8009b74:	2000178c 	.word	0x2000178c
 8009b78:	20001654 	.word	0x20001654
 8009b7c:	08009aed 	.word	0x08009aed

08009b80 <__sfp_lock_acquire>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sfp_lock_acquire+0x8>)
 8009b82:	f000 b942 	b.w	8009e0a <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	20001795 	.word	0x20001795

08009b8c <__sfp_lock_release>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sfp_lock_release+0x8>)
 8009b8e:	f000 b93d 	b.w	8009e0c <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	20001795 	.word	0x20001795

08009b98 <__sinit>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	f7ff fff0 	bl	8009b80 <__sfp_lock_acquire>
 8009ba0:	6a23      	ldr	r3, [r4, #32]
 8009ba2:	b11b      	cbz	r3, 8009bac <__sinit+0x14>
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f7ff bff0 	b.w	8009b8c <__sfp_lock_release>
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <__sinit+0x28>)
 8009bae:	6223      	str	r3, [r4, #32]
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <__sinit+0x2c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f5      	bne.n	8009ba4 <__sinit+0xc>
 8009bb8:	f7ff ffc4 	bl	8009b44 <global_stdio_init.part.0>
 8009bbc:	e7f2      	b.n	8009ba4 <__sinit+0xc>
 8009bbe:	bf00      	nop
 8009bc0:	08009b05 	.word	0x08009b05
 8009bc4:	2000178c 	.word	0x2000178c

08009bc8 <_fwalk_sglue>:
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bcc:	4607      	mov	r7, r0
 8009bce:	4688      	mov	r8, r1
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8009bdc:	d505      	bpl.n	8009bea <_fwalk_sglue+0x22>
 8009bde:	6824      	ldr	r4, [r4, #0]
 8009be0:	2c00      	cmp	r4, #0
 8009be2:	d1f7      	bne.n	8009bd4 <_fwalk_sglue+0xc>
 8009be4:	4630      	mov	r0, r6
 8009be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bea:	89ab      	ldrh	r3, [r5, #12]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d907      	bls.n	8009c00 <_fwalk_sglue+0x38>
 8009bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	d003      	beq.n	8009c00 <_fwalk_sglue+0x38>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	47c0      	blx	r8
 8009bfe:	4306      	orrs	r6, r0
 8009c00:	3568      	adds	r5, #104	; 0x68
 8009c02:	e7e9      	b.n	8009bd8 <_fwalk_sglue+0x10>

08009c04 <siprintf>:
 8009c04:	b40e      	push	{r1, r2, r3}
 8009c06:	b500      	push	{lr}
 8009c08:	b09c      	sub	sp, #112	; 0x70
 8009c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c0c:	9002      	str	r0, [sp, #8]
 8009c0e:	9006      	str	r0, [sp, #24]
 8009c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c14:	4809      	ldr	r0, [pc, #36]	; (8009c3c <siprintf+0x38>)
 8009c16:	9107      	str	r1, [sp, #28]
 8009c18:	9104      	str	r1, [sp, #16]
 8009c1a:	4909      	ldr	r1, [pc, #36]	; (8009c40 <siprintf+0x3c>)
 8009c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c20:	9105      	str	r1, [sp, #20]
 8009c22:	6800      	ldr	r0, [r0, #0]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	a902      	add	r1, sp, #8
 8009c28:	f001 fbc2 	bl	800b3b0 <_svfiprintf_r>
 8009c2c:	9b02      	ldr	r3, [sp, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	b01c      	add	sp, #112	; 0x70
 8009c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c38:	b003      	add	sp, #12
 8009c3a:	4770      	bx	lr
 8009c3c:	20000be8 	.word	0x20000be8
 8009c40:	ffff0208 	.word	0xffff0208

08009c44 <__sread>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	460c      	mov	r4, r1
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	f000 f87e 	bl	8009d4c <_read_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	bfab      	itete	ge
 8009c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c56:	89a3      	ldrhlt	r3, [r4, #12]
 8009c58:	181b      	addge	r3, r3, r0
 8009c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c5e:	bfac      	ite	ge
 8009c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c62:	81a3      	strhlt	r3, [r4, #12]
 8009c64:	bd10      	pop	{r4, pc}

08009c66 <__swrite>:
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	461f      	mov	r7, r3
 8009c6c:	898b      	ldrh	r3, [r1, #12]
 8009c6e:	05db      	lsls	r3, r3, #23
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4616      	mov	r6, r2
 8009c76:	d505      	bpl.n	8009c84 <__swrite+0x1e>
 8009c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f000 f852 	bl	8009d28 <_lseek_r>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	4628      	mov	r0, r5
 8009c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	f000 b879 	b.w	8009d90 <_write_r>

08009c9e <__sseek>:
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca6:	f000 f83f 	bl	8009d28 <_lseek_r>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	bf15      	itete	ne
 8009cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cba:	81a3      	strheq	r3, [r4, #12]
 8009cbc:	bf18      	it	ne
 8009cbe:	81a3      	strhne	r3, [r4, #12]
 8009cc0:	bd10      	pop	{r4, pc}

08009cc2 <__sclose>:
 8009cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc6:	f000 b81f 	b.w	8009d08 <_close_r>

08009cca <memset>:
 8009cca:	4402      	add	r2, r0
 8009ccc:	4603      	mov	r3, r0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d100      	bne.n	8009cd4 <memset+0xa>
 8009cd2:	4770      	bx	lr
 8009cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd8:	e7f9      	b.n	8009cce <memset+0x4>

08009cda <strncmp>:
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	b16a      	cbz	r2, 8009cfa <strncmp+0x20>
 8009cde:	3901      	subs	r1, #1
 8009ce0:	1884      	adds	r4, r0, r2
 8009ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ce6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d103      	bne.n	8009cf6 <strncmp+0x1c>
 8009cee:	42a0      	cmp	r0, r4
 8009cf0:	d001      	beq.n	8009cf6 <strncmp+0x1c>
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d1f5      	bne.n	8009ce2 <strncmp+0x8>
 8009cf6:	1ad0      	subs	r0, r2, r3
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	e7fc      	b.n	8009cf8 <strncmp+0x1e>
	...

08009d00 <_localeconv_r>:
 8009d00:	4800      	ldr	r0, [pc, #0]	; (8009d04 <_localeconv_r+0x4>)
 8009d02:	4770      	bx	lr
 8009d04:	20000cdc 	.word	0x20000cdc

08009d08 <_close_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d06      	ldr	r5, [pc, #24]	; (8009d24 <_close_r+0x1c>)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	f7f7 fada 	bl	80012cc <_close>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_close_r+0x1a>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_close_r+0x1a>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	20001790 	.word	0x20001790

08009d28 <_lseek_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	; (8009d48 <_lseek_r+0x20>)
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4611      	mov	r1, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	602a      	str	r2, [r5, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f7f7 fad2 	bl	80012e0 <_lseek>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_lseek_r+0x1e>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_lseek_r+0x1e>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20001790 	.word	0x20001790

08009d4c <_read_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_read_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f7 faa8 	bl	80012b0 <_read>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_read_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_read_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20001790 	.word	0x20001790

08009d70 <_sbrk_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d06      	ldr	r5, [pc, #24]	; (8009d8c <_sbrk_r+0x1c>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	f7f7 fab2 	bl	80012e4 <_sbrk>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_sbrk_r+0x1a>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_sbrk_r+0x1a>
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	20001790 	.word	0x20001790

08009d90 <_write_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	; (8009db0 <_write_r+0x20>)
 8009d94:	4604      	mov	r4, r0
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	602a      	str	r2, [r5, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f7f9 fef4 	bl	8003b8c <_write>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_write_r+0x1e>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_write_r+0x1e>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20001790 	.word	0x20001790

08009db4 <__errno>:
 8009db4:	4b01      	ldr	r3, [pc, #4]	; (8009dbc <__errno+0x8>)
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20000be8 	.word	0x20000be8

08009dc0 <__libc_init_array>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4d0d      	ldr	r5, [pc, #52]	; (8009df8 <__libc_init_array+0x38>)
 8009dc4:	4c0d      	ldr	r4, [pc, #52]	; (8009dfc <__libc_init_array+0x3c>)
 8009dc6:	1b64      	subs	r4, r4, r5
 8009dc8:	10a4      	asrs	r4, r4, #2
 8009dca:	2600      	movs	r6, #0
 8009dcc:	42a6      	cmp	r6, r4
 8009dce:	d109      	bne.n	8009de4 <__libc_init_array+0x24>
 8009dd0:	4d0b      	ldr	r5, [pc, #44]	; (8009e00 <__libc_init_array+0x40>)
 8009dd2:	4c0c      	ldr	r4, [pc, #48]	; (8009e04 <__libc_init_array+0x44>)
 8009dd4:	f002 f828 	bl	800be28 <_init>
 8009dd8:	1b64      	subs	r4, r4, r5
 8009dda:	10a4      	asrs	r4, r4, #2
 8009ddc:	2600      	movs	r6, #0
 8009dde:	42a6      	cmp	r6, r4
 8009de0:	d105      	bne.n	8009dee <__libc_init_array+0x2e>
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de8:	4798      	blx	r3
 8009dea:	3601      	adds	r6, #1
 8009dec:	e7ee      	b.n	8009dcc <__libc_init_array+0xc>
 8009dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df2:	4798      	blx	r3
 8009df4:	3601      	adds	r6, #1
 8009df6:	e7f2      	b.n	8009dde <__libc_init_array+0x1e>
 8009df8:	08017da0 	.word	0x08017da0
 8009dfc:	08017da0 	.word	0x08017da0
 8009e00:	08017da0 	.word	0x08017da0
 8009e04:	08017da4 	.word	0x08017da4

08009e08 <__retarget_lock_init_recursive>:
 8009e08:	4770      	bx	lr

08009e0a <__retarget_lock_acquire_recursive>:
 8009e0a:	4770      	bx	lr

08009e0c <__retarget_lock_release_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <memcpy>:
 8009e0e:	440a      	add	r2, r1
 8009e10:	4291      	cmp	r1, r2
 8009e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e16:	d100      	bne.n	8009e1a <memcpy+0xc>
 8009e18:	4770      	bx	lr
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e24:	4291      	cmp	r1, r2
 8009e26:	d1f9      	bne.n	8009e1c <memcpy+0xe>
 8009e28:	bd10      	pop	{r4, pc}
	...

08009e2c <__assert_func>:
 8009e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e2e:	4614      	mov	r4, r2
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <__assert_func+0x2c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4605      	mov	r5, r0
 8009e38:	68d8      	ldr	r0, [r3, #12]
 8009e3a:	b14c      	cbz	r4, 8009e50 <__assert_func+0x24>
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <__assert_func+0x30>)
 8009e3e:	9100      	str	r1, [sp, #0]
 8009e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e44:	4906      	ldr	r1, [pc, #24]	; (8009e60 <__assert_func+0x34>)
 8009e46:	462b      	mov	r3, r5
 8009e48:	f001 fbb0 	bl	800b5ac <fiprintf>
 8009e4c:	f001 fbda 	bl	800b604 <abort>
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <__assert_func+0x38>)
 8009e52:	461c      	mov	r4, r3
 8009e54:	e7f3      	b.n	8009e3e <__assert_func+0x12>
 8009e56:	bf00      	nop
 8009e58:	20000be8 	.word	0x20000be8
 8009e5c:	08017a5b 	.word	0x08017a5b
 8009e60:	08017a68 	.word	0x08017a68
 8009e64:	0800cabf 	.word	0x0800cabf

08009e68 <quorem>:
 8009e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	6903      	ldr	r3, [r0, #16]
 8009e6e:	690c      	ldr	r4, [r1, #16]
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	4607      	mov	r7, r0
 8009e74:	db7e      	blt.n	8009f74 <quorem+0x10c>
 8009e76:	3c01      	subs	r4, #1
 8009e78:	f101 0814 	add.w	r8, r1, #20
 8009e7c:	f100 0514 	add.w	r5, r0, #20
 8009e80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e9e:	d331      	bcc.n	8009f04 <quorem+0x9c>
 8009ea0:	f04f 0e00 	mov.w	lr, #0
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	46ac      	mov	ip, r5
 8009ea8:	46f2      	mov	sl, lr
 8009eaa:	f850 2b04 	ldr.w	r2, [r0], #4
 8009eae:	b293      	uxth	r3, r2
 8009eb0:	fb06 e303 	mla	r3, r6, r3, lr
 8009eb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eb8:	0c1a      	lsrs	r2, r3, #16
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8009ec0:	f8dc a000 	ldr.w	sl, [ip]
 8009ec4:	fa13 f38a 	uxtah	r3, r3, sl
 8009ec8:	fb06 220e 	mla	r2, r6, lr, r2
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ede:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ee2:	4581      	cmp	r9, r0
 8009ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee8:	f84c 3b04 	str.w	r3, [ip], #4
 8009eec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ef0:	d2db      	bcs.n	8009eaa <quorem+0x42>
 8009ef2:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ef6:	b92b      	cbnz	r3, 8009f04 <quorem+0x9c>
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	3b04      	subs	r3, #4
 8009efc:	429d      	cmp	r5, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	d32c      	bcc.n	8009f5c <quorem+0xf4>
 8009f02:	613c      	str	r4, [r7, #16]
 8009f04:	4638      	mov	r0, r7
 8009f06:	f001 f8f1 	bl	800b0ec <__mcmp>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	db22      	blt.n	8009f54 <quorem+0xec>
 8009f0e:	3601      	adds	r6, #1
 8009f10:	4629      	mov	r1, r5
 8009f12:	2000      	movs	r0, #0
 8009f14:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f18:	f8d1 c000 	ldr.w	ip, [r1]
 8009f1c:	b293      	uxth	r3, r2
 8009f1e:	1ac3      	subs	r3, r0, r3
 8009f20:	0c12      	lsrs	r2, r2, #16
 8009f22:	fa13 f38c 	uxtah	r3, r3, ip
 8009f26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009f2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f34:	45c1      	cmp	r9, r8
 8009f36:	f841 3b04 	str.w	r3, [r1], #4
 8009f3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f3e:	d2e9      	bcs.n	8009f14 <quorem+0xac>
 8009f40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f48:	b922      	cbnz	r2, 8009f54 <quorem+0xec>
 8009f4a:	3b04      	subs	r3, #4
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	d30a      	bcc.n	8009f68 <quorem+0x100>
 8009f52:	613c      	str	r4, [r7, #16]
 8009f54:	4630      	mov	r0, r6
 8009f56:	b003      	add	sp, #12
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	6812      	ldr	r2, [r2, #0]
 8009f5e:	3b04      	subs	r3, #4
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d1ce      	bne.n	8009f02 <quorem+0x9a>
 8009f64:	3c01      	subs	r4, #1
 8009f66:	e7c9      	b.n	8009efc <quorem+0x94>
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	3b04      	subs	r3, #4
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d1f0      	bne.n	8009f52 <quorem+0xea>
 8009f70:	3c01      	subs	r4, #1
 8009f72:	e7eb      	b.n	8009f4c <quorem+0xe4>
 8009f74:	2000      	movs	r0, #0
 8009f76:	e7ee      	b.n	8009f56 <quorem+0xee>

08009f78 <_dtoa_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b04 	vpush	{d8-d9}
 8009f80:	69c5      	ldr	r5, [r0, #28]
 8009f82:	b093      	sub	sp, #76	; 0x4c
 8009f84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f88:	ec57 6b10 	vmov	r6, r7, d0
 8009f8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f90:	9107      	str	r1, [sp, #28]
 8009f92:	4604      	mov	r4, r0
 8009f94:	920a      	str	r2, [sp, #40]	; 0x28
 8009f96:	930d      	str	r3, [sp, #52]	; 0x34
 8009f98:	b975      	cbnz	r5, 8009fb8 <_dtoa_r+0x40>
 8009f9a:	2010      	movs	r0, #16
 8009f9c:	f7f9 fe28 	bl	8003bf0 <__wrap_malloc>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	61e0      	str	r0, [r4, #28]
 8009fa4:	b920      	cbnz	r0, 8009fb0 <_dtoa_r+0x38>
 8009fa6:	4bae      	ldr	r3, [pc, #696]	; (800a260 <_dtoa_r+0x2e8>)
 8009fa8:	21ef      	movs	r1, #239	; 0xef
 8009faa:	48ae      	ldr	r0, [pc, #696]	; (800a264 <_dtoa_r+0x2ec>)
 8009fac:	f7ff ff3e 	bl	8009e2c <__assert_func>
 8009fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fb4:	6005      	str	r5, [r0, #0]
 8009fb6:	60c5      	str	r5, [r0, #12]
 8009fb8:	69e3      	ldr	r3, [r4, #28]
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	b151      	cbz	r1, 8009fd4 <_dtoa_r+0x5c>
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	604a      	str	r2, [r1, #4]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4093      	lsls	r3, r2
 8009fc6:	608b      	str	r3, [r1, #8]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fe53 	bl	800ac74 <_Bfree>
 8009fce:	69e3      	ldr	r3, [r4, #28]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	1e3b      	subs	r3, r7, #0
 8009fd6:	bfbb      	ittet	lt
 8009fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fdc:	9303      	strlt	r3, [sp, #12]
 8009fde:	2300      	movge	r3, #0
 8009fe0:	2201      	movlt	r2, #1
 8009fe2:	bfac      	ite	ge
 8009fe4:	f8c8 3000 	strge.w	r3, [r8]
 8009fe8:	f8c8 2000 	strlt.w	r2, [r8]
 8009fec:	4b9e      	ldr	r3, [pc, #632]	; (800a268 <_dtoa_r+0x2f0>)
 8009fee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ff2:	ea33 0308 	bics.w	r3, r3, r8
 8009ff6:	d11b      	bne.n	800a030 <_dtoa_r+0xb8>
 8009ff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a004:	4333      	orrs	r3, r6
 800a006:	f000 8593 	beq.w	800ab30 <_dtoa_r+0xbb8>
 800a00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a00c:	b963      	cbnz	r3, 800a028 <_dtoa_r+0xb0>
 800a00e:	4b97      	ldr	r3, [pc, #604]	; (800a26c <_dtoa_r+0x2f4>)
 800a010:	e027      	b.n	800a062 <_dtoa_r+0xea>
 800a012:	4b97      	ldr	r3, [pc, #604]	; (800a270 <_dtoa_r+0x2f8>)
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	9800      	ldr	r0, [sp, #0]
 800a01e:	b013      	add	sp, #76	; 0x4c
 800a020:	ecbd 8b04 	vpop	{d8-d9}
 800a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a028:	4b90      	ldr	r3, [pc, #576]	; (800a26c <_dtoa_r+0x2f4>)
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	3303      	adds	r3, #3
 800a02e:	e7f3      	b.n	800a018 <_dtoa_r+0xa0>
 800a030:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	ec51 0b17 	vmov	r0, r1, d7
 800a03a:	eeb0 8a47 	vmov.f32	s16, s14
 800a03e:	eef0 8a67 	vmov.f32	s17, s15
 800a042:	2300      	movs	r3, #0
 800a044:	f7f6 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a048:	4681      	mov	r9, r0
 800a04a:	b160      	cbz	r0, 800a066 <_dtoa_r+0xee>
 800a04c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a04e:	2301      	movs	r3, #1
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8568 	beq.w	800ab2a <_dtoa_r+0xbb2>
 800a05a:	4b86      	ldr	r3, [pc, #536]	; (800a274 <_dtoa_r+0x2fc>)
 800a05c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	3b01      	subs	r3, #1
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	e7da      	b.n	800a01c <_dtoa_r+0xa4>
 800a066:	aa10      	add	r2, sp, #64	; 0x40
 800a068:	a911      	add	r1, sp, #68	; 0x44
 800a06a:	4620      	mov	r0, r4
 800a06c:	eeb0 0a48 	vmov.f32	s0, s16
 800a070:	eef0 0a68 	vmov.f32	s1, s17
 800a074:	f001 f8e0 	bl	800b238 <__d2b>
 800a078:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a07c:	4682      	mov	sl, r0
 800a07e:	2d00      	cmp	r5, #0
 800a080:	d07f      	beq.n	800a182 <_dtoa_r+0x20a>
 800a082:	ee18 3a90 	vmov	r3, s17
 800a086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a08a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a08e:	ec51 0b18 	vmov	r0, r1, d8
 800a092:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a09a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a09e:	4619      	mov	r1, r3
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4b75      	ldr	r3, [pc, #468]	; (800a278 <_dtoa_r+0x300>)
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	a367      	add	r3, pc, #412	; (adr r3, 800a248 <_dtoa_r+0x2d0>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	a367      	add	r3, pc, #412	; (adr r3, 800a250 <_dtoa_r+0x2d8>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 f8e8 	bl	800028c <__adddf3>
 800a0bc:	4606      	mov	r6, r0
 800a0be:	4628      	mov	r0, r5
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	f7f6 fa2f 	bl	8000524 <__aeabi_i2d>
 800a0c6:	a364      	add	r3, pc, #400	; (adr r3, 800a258 <_dtoa_r+0x2e0>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fa94 	bl	80005f8 <__aeabi_dmul>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 f8d8 	bl	800028c <__adddf3>
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	f7f6 fd3a 	bl	8000b58 <__aeabi_d2iz>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4683      	mov	fp, r0
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 fcf5 	bl	8000adc <__aeabi_dcmplt>
 800a0f2:	b148      	cbz	r0, 800a108 <_dtoa_r+0x190>
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	f7f6 fa15 	bl	8000524 <__aeabi_i2d>
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	f7f6 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a102:	b908      	cbnz	r0, 800a108 <_dtoa_r+0x190>
 800a104:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a108:	f1bb 0f16 	cmp.w	fp, #22
 800a10c:	d857      	bhi.n	800a1be <_dtoa_r+0x246>
 800a10e:	4b5b      	ldr	r3, [pc, #364]	; (800a27c <_dtoa_r+0x304>)
 800a110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	ec51 0b18 	vmov	r0, r1, d8
 800a11c:	f7f6 fcde 	bl	8000adc <__aeabi_dcmplt>
 800a120:	2800      	cmp	r0, #0
 800a122:	d04e      	beq.n	800a1c2 <_dtoa_r+0x24a>
 800a124:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a128:	2300      	movs	r3, #0
 800a12a:	930c      	str	r3, [sp, #48]	; 0x30
 800a12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a12e:	1b5b      	subs	r3, r3, r5
 800a130:	1e5a      	subs	r2, r3, #1
 800a132:	bf45      	ittet	mi
 800a134:	f1c3 0301 	rsbmi	r3, r3, #1
 800a138:	9305      	strmi	r3, [sp, #20]
 800a13a:	2300      	movpl	r3, #0
 800a13c:	2300      	movmi	r3, #0
 800a13e:	9206      	str	r2, [sp, #24]
 800a140:	bf54      	ite	pl
 800a142:	9305      	strpl	r3, [sp, #20]
 800a144:	9306      	strmi	r3, [sp, #24]
 800a146:	f1bb 0f00 	cmp.w	fp, #0
 800a14a:	db3c      	blt.n	800a1c6 <_dtoa_r+0x24e>
 800a14c:	9b06      	ldr	r3, [sp, #24]
 800a14e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a152:	445b      	add	r3, fp
 800a154:	9306      	str	r3, [sp, #24]
 800a156:	2300      	movs	r3, #0
 800a158:	9308      	str	r3, [sp, #32]
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d868      	bhi.n	800a232 <_dtoa_r+0x2ba>
 800a160:	2b05      	cmp	r3, #5
 800a162:	bfc4      	itt	gt
 800a164:	3b04      	subgt	r3, #4
 800a166:	9307      	strgt	r3, [sp, #28]
 800a168:	9b07      	ldr	r3, [sp, #28]
 800a16a:	f1a3 0302 	sub.w	r3, r3, #2
 800a16e:	bfcc      	ite	gt
 800a170:	2500      	movgt	r5, #0
 800a172:	2501      	movle	r5, #1
 800a174:	2b03      	cmp	r3, #3
 800a176:	f200 8085 	bhi.w	800a284 <_dtoa_r+0x30c>
 800a17a:	e8df f003 	tbb	[pc, r3]
 800a17e:	3b2e      	.short	0x3b2e
 800a180:	5839      	.short	0x5839
 800a182:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a186:	441d      	add	r5, r3
 800a188:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	bfc1      	itttt	gt
 800a190:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a194:	fa08 f803 	lslgt.w	r8, r8, r3
 800a198:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a19c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a1a0:	bfd6      	itet	le
 800a1a2:	f1c3 0320 	rsble	r3, r3, #32
 800a1a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a1aa:	fa06 f003 	lslle.w	r0, r6, r3
 800a1ae:	f7f6 f9a9 	bl	8000504 <__aeabi_ui2d>
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a1b8:	3d01      	subs	r5, #1
 800a1ba:	920e      	str	r2, [sp, #56]	; 0x38
 800a1bc:	e76f      	b.n	800a09e <_dtoa_r+0x126>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e7b3      	b.n	800a12a <_dtoa_r+0x1b2>
 800a1c2:	900c      	str	r0, [sp, #48]	; 0x30
 800a1c4:	e7b2      	b.n	800a12c <_dtoa_r+0x1b4>
 800a1c6:	9b05      	ldr	r3, [sp, #20]
 800a1c8:	eba3 030b 	sub.w	r3, r3, fp
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	f1cb 0300 	rsb	r3, fp, #0
 800a1d2:	9308      	str	r3, [sp, #32]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1d8:	e7bf      	b.n	800a15a <_dtoa_r+0x1e2>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dc52      	bgt.n	800a28a <_dtoa_r+0x312>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a1ee:	e00b      	b.n	800a208 <_dtoa_r+0x290>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e7f3      	b.n	800a1dc <_dtoa_r+0x264>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fa:	445b      	add	r3, fp
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	3301      	adds	r3, #1
 800a200:	2b01      	cmp	r3, #1
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	bfb8      	it	lt
 800a206:	2301      	movlt	r3, #1
 800a208:	69e0      	ldr	r0, [r4, #28]
 800a20a:	2100      	movs	r1, #0
 800a20c:	2204      	movs	r2, #4
 800a20e:	f102 0614 	add.w	r6, r2, #20
 800a212:	429e      	cmp	r6, r3
 800a214:	d93d      	bls.n	800a292 <_dtoa_r+0x31a>
 800a216:	6041      	str	r1, [r0, #4]
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fceb 	bl	800abf4 <_Balloc>
 800a21e:	9000      	str	r0, [sp, #0]
 800a220:	2800      	cmp	r0, #0
 800a222:	d139      	bne.n	800a298 <_dtoa_r+0x320>
 800a224:	4b16      	ldr	r3, [pc, #88]	; (800a280 <_dtoa_r+0x308>)
 800a226:	4602      	mov	r2, r0
 800a228:	f240 11af 	movw	r1, #431	; 0x1af
 800a22c:	e6bd      	b.n	8009faa <_dtoa_r+0x32>
 800a22e:	2301      	movs	r3, #1
 800a230:	e7e1      	b.n	800a1f6 <_dtoa_r+0x27e>
 800a232:	2501      	movs	r5, #1
 800a234:	2300      	movs	r3, #0
 800a236:	9307      	str	r3, [sp, #28]
 800a238:	9509      	str	r5, [sp, #36]	; 0x24
 800a23a:	f04f 33ff 	mov.w	r3, #4294967295
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	2200      	movs	r2, #0
 800a244:	2312      	movs	r3, #18
 800a246:	e7d1      	b.n	800a1ec <_dtoa_r+0x274>
 800a248:	636f4361 	.word	0x636f4361
 800a24c:	3fd287a7 	.word	0x3fd287a7
 800a250:	8b60c8b3 	.word	0x8b60c8b3
 800a254:	3fc68a28 	.word	0x3fc68a28
 800a258:	509f79fb 	.word	0x509f79fb
 800a25c:	3fd34413 	.word	0x3fd34413
 800a260:	080179b8 	.word	0x080179b8
 800a264:	08017aa4 	.word	0x08017aa4
 800a268:	7ff00000 	.word	0x7ff00000
 800a26c:	08017aa0 	.word	0x08017aa0
 800a270:	08017a97 	.word	0x08017a97
 800a274:	08017a38 	.word	0x08017a38
 800a278:	3ff80000 	.word	0x3ff80000
 800a27c:	08017b90 	.word	0x08017b90
 800a280:	08017afc 	.word	0x08017afc
 800a284:	2301      	movs	r3, #1
 800a286:	9309      	str	r3, [sp, #36]	; 0x24
 800a288:	e7d7      	b.n	800a23a <_dtoa_r+0x2c2>
 800a28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	e7ba      	b.n	800a208 <_dtoa_r+0x290>
 800a292:	3101      	adds	r1, #1
 800a294:	0052      	lsls	r2, r2, #1
 800a296:	e7ba      	b.n	800a20e <_dtoa_r+0x296>
 800a298:	69e3      	ldr	r3, [r4, #28]
 800a29a:	9a00      	ldr	r2, [sp, #0]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	2b0e      	cmp	r3, #14
 800a2a2:	f200 80a8 	bhi.w	800a3f6 <_dtoa_r+0x47e>
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	f000 80a5 	beq.w	800a3f6 <_dtoa_r+0x47e>
 800a2ac:	f1bb 0f00 	cmp.w	fp, #0
 800a2b0:	dd38      	ble.n	800a324 <_dtoa_r+0x3ac>
 800a2b2:	4bc0      	ldr	r3, [pc, #768]	; (800a5b4 <_dtoa_r+0x63c>)
 800a2b4:	f00b 020f 	and.w	r2, fp, #15
 800a2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a2c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a2c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a2c8:	d019      	beq.n	800a2fe <_dtoa_r+0x386>
 800a2ca:	4bbb      	ldr	r3, [pc, #748]	; (800a5b8 <_dtoa_r+0x640>)
 800a2cc:	ec51 0b18 	vmov	r0, r1, d8
 800a2d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2d4:	f7f6 faba 	bl	800084c <__aeabi_ddiv>
 800a2d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2dc:	f008 080f 	and.w	r8, r8, #15
 800a2e0:	2503      	movs	r5, #3
 800a2e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a5b8 <_dtoa_r+0x640>
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	d10a      	bne.n	800a302 <_dtoa_r+0x38a>
 800a2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	f7f6 faaa 	bl	800084c <__aeabi_ddiv>
 800a2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2fc:	e02b      	b.n	800a356 <_dtoa_r+0x3de>
 800a2fe:	2502      	movs	r5, #2
 800a300:	e7ef      	b.n	800a2e2 <_dtoa_r+0x36a>
 800a302:	f018 0f01 	tst.w	r8, #1
 800a306:	d008      	beq.n	800a31a <_dtoa_r+0x3a2>
 800a308:	4630      	mov	r0, r6
 800a30a:	4639      	mov	r1, r7
 800a30c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	3501      	adds	r5, #1
 800a316:	4606      	mov	r6, r0
 800a318:	460f      	mov	r7, r1
 800a31a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a31e:	f109 0908 	add.w	r9, r9, #8
 800a322:	e7e0      	b.n	800a2e6 <_dtoa_r+0x36e>
 800a324:	f000 809f 	beq.w	800a466 <_dtoa_r+0x4ee>
 800a328:	f1cb 0600 	rsb	r6, fp, #0
 800a32c:	4ba1      	ldr	r3, [pc, #644]	; (800a5b4 <_dtoa_r+0x63c>)
 800a32e:	4fa2      	ldr	r7, [pc, #648]	; (800a5b8 <_dtoa_r+0x640>)
 800a330:	f006 020f 	and.w	r2, r6, #15
 800a334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	ec51 0b18 	vmov	r0, r1, d8
 800a340:	f7f6 f95a 	bl	80005f8 <__aeabi_dmul>
 800a344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a348:	1136      	asrs	r6, r6, #4
 800a34a:	2300      	movs	r3, #0
 800a34c:	2502      	movs	r5, #2
 800a34e:	2e00      	cmp	r6, #0
 800a350:	d17e      	bne.n	800a450 <_dtoa_r+0x4d8>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d0      	bne.n	800a2f8 <_dtoa_r+0x380>
 800a356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a358:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8084 	beq.w	800a46a <_dtoa_r+0x4f2>
 800a362:	4b96      	ldr	r3, [pc, #600]	; (800a5bc <_dtoa_r+0x644>)
 800a364:	2200      	movs	r2, #0
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	f7f6 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d07b      	beq.n	800a46a <_dtoa_r+0x4f2>
 800a372:	9b04      	ldr	r3, [sp, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d078      	beq.n	800a46a <_dtoa_r+0x4f2>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd39      	ble.n	800a3f2 <_dtoa_r+0x47a>
 800a37e:	4b90      	ldr	r3, [pc, #576]	; (800a5c0 <_dtoa_r+0x648>)
 800a380:	2200      	movs	r2, #0
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	f7f6 f937 	bl	80005f8 <__aeabi_dmul>
 800a38a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a38e:	9e01      	ldr	r6, [sp, #4]
 800a390:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a394:	3501      	adds	r5, #1
 800a396:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a39a:	4628      	mov	r0, r5
 800a39c:	f7f6 f8c2 	bl	8000524 <__aeabi_i2d>
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	464b      	mov	r3, r9
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	4b86      	ldr	r3, [pc, #536]	; (800a5c4 <_dtoa_r+0x64c>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff6e 	bl	800028c <__adddf3>
 800a3b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d158      	bne.n	800a470 <_dtoa_r+0x4f8>
 800a3be:	4b82      	ldr	r3, [pc, #520]	; (800a5c8 <_dtoa_r+0x650>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f5 ff5f 	bl	8000288 <__aeabi_dsub>
 800a3ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	4689      	mov	r9, r1
 800a3d2:	f7f6 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8296 	bne.w	800a908 <_dtoa_r+0x990>
 800a3dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	f7f6 fb78 	bl	8000adc <__aeabi_dcmplt>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	f040 8289 	bne.w	800a904 <_dtoa_r+0x98c>
 800a3f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f2c0 814e 	blt.w	800a69a <_dtoa_r+0x722>
 800a3fe:	f1bb 0f0e 	cmp.w	fp, #14
 800a402:	f300 814a 	bgt.w	800a69a <_dtoa_r+0x722>
 800a406:	4b6b      	ldr	r3, [pc, #428]	; (800a5b4 <_dtoa_r+0x63c>)
 800a408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a40c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a412:	2b00      	cmp	r3, #0
 800a414:	f280 80dc 	bge.w	800a5d0 <_dtoa_r+0x658>
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f300 80d8 	bgt.w	800a5d0 <_dtoa_r+0x658>
 800a420:	f040 826f 	bne.w	800a902 <_dtoa_r+0x98a>
 800a424:	4b68      	ldr	r3, [pc, #416]	; (800a5c8 <_dtoa_r+0x650>)
 800a426:	2200      	movs	r2, #0
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a434:	f7f6 fb66 	bl	8000b04 <__aeabi_dcmpge>
 800a438:	9e04      	ldr	r6, [sp, #16]
 800a43a:	4637      	mov	r7, r6
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f040 8245 	bne.w	800a8cc <_dtoa_r+0x954>
 800a442:	9d00      	ldr	r5, [sp, #0]
 800a444:	2331      	movs	r3, #49	; 0x31
 800a446:	f805 3b01 	strb.w	r3, [r5], #1
 800a44a:	f10b 0b01 	add.w	fp, fp, #1
 800a44e:	e241      	b.n	800a8d4 <_dtoa_r+0x95c>
 800a450:	07f2      	lsls	r2, r6, #31
 800a452:	d505      	bpl.n	800a460 <_dtoa_r+0x4e8>
 800a454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	3501      	adds	r5, #1
 800a45e:	2301      	movs	r3, #1
 800a460:	1076      	asrs	r6, r6, #1
 800a462:	3708      	adds	r7, #8
 800a464:	e773      	b.n	800a34e <_dtoa_r+0x3d6>
 800a466:	2502      	movs	r5, #2
 800a468:	e775      	b.n	800a356 <_dtoa_r+0x3de>
 800a46a:	9e04      	ldr	r6, [sp, #16]
 800a46c:	465f      	mov	r7, fp
 800a46e:	e792      	b.n	800a396 <_dtoa_r+0x41e>
 800a470:	9900      	ldr	r1, [sp, #0]
 800a472:	4b50      	ldr	r3, [pc, #320]	; (800a5b4 <_dtoa_r+0x63c>)
 800a474:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a478:	4431      	add	r1, r6
 800a47a:	9102      	str	r1, [sp, #8]
 800a47c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a47e:	eeb0 9a47 	vmov.f32	s18, s14
 800a482:	eef0 9a67 	vmov.f32	s19, s15
 800a486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a48a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a48e:	2900      	cmp	r1, #0
 800a490:	d044      	beq.n	800a51c <_dtoa_r+0x5a4>
 800a492:	494e      	ldr	r1, [pc, #312]	; (800a5cc <_dtoa_r+0x654>)
 800a494:	2000      	movs	r0, #0
 800a496:	f7f6 f9d9 	bl	800084c <__aeabi_ddiv>
 800a49a:	ec53 2b19 	vmov	r2, r3, d9
 800a49e:	f7f5 fef3 	bl	8000288 <__aeabi_dsub>
 800a4a2:	9d00      	ldr	r5, [sp, #0]
 800a4a4:	ec41 0b19 	vmov	d9, r0, r1
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f7f6 fb54 	bl	8000b58 <__aeabi_d2iz>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	f7f6 f837 	bl	8000524 <__aeabi_i2d>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	4649      	mov	r1, r9
 800a4be:	f7f5 fee3 	bl	8000288 <__aeabi_dsub>
 800a4c2:	3630      	adds	r6, #48	; 0x30
 800a4c4:	f805 6b01 	strb.w	r6, [r5], #1
 800a4c8:	ec53 2b19 	vmov	r2, r3, d9
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	4689      	mov	r9, r1
 800a4d0:	f7f6 fb04 	bl	8000adc <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d164      	bne.n	800a5a2 <_dtoa_r+0x62a>
 800a4d8:	4642      	mov	r2, r8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	4937      	ldr	r1, [pc, #220]	; (800a5bc <_dtoa_r+0x644>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	ec53 2b19 	vmov	r2, r3, d9
 800a4e8:	f7f6 faf8 	bl	8000adc <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 80b6 	bne.w	800a65e <_dtoa_r+0x6e6>
 800a4f2:	9b02      	ldr	r3, [sp, #8]
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	f43f af7c 	beq.w	800a3f2 <_dtoa_r+0x47a>
 800a4fa:	4b31      	ldr	r3, [pc, #196]	; (800a5c0 <_dtoa_r+0x648>)
 800a4fc:	ec51 0b19 	vmov	r0, r1, d9
 800a500:	2200      	movs	r2, #0
 800a502:	f7f6 f879 	bl	80005f8 <__aeabi_dmul>
 800a506:	4b2e      	ldr	r3, [pc, #184]	; (800a5c0 <_dtoa_r+0x648>)
 800a508:	ec41 0b19 	vmov	d9, r0, r1
 800a50c:	2200      	movs	r2, #0
 800a50e:	4640      	mov	r0, r8
 800a510:	4649      	mov	r1, r9
 800a512:	f7f6 f871 	bl	80005f8 <__aeabi_dmul>
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	e7c5      	b.n	800a4a8 <_dtoa_r+0x530>
 800a51c:	ec51 0b17 	vmov	r0, r1, d7
 800a520:	f7f6 f86a 	bl	80005f8 <__aeabi_dmul>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	9d00      	ldr	r5, [sp, #0]
 800a528:	930f      	str	r3, [sp, #60]	; 0x3c
 800a52a:	ec41 0b19 	vmov	d9, r0, r1
 800a52e:	4649      	mov	r1, r9
 800a530:	4640      	mov	r0, r8
 800a532:	f7f6 fb11 	bl	8000b58 <__aeabi_d2iz>
 800a536:	4606      	mov	r6, r0
 800a538:	f7f5 fff4 	bl	8000524 <__aeabi_i2d>
 800a53c:	3630      	adds	r6, #48	; 0x30
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4640      	mov	r0, r8
 800a544:	4649      	mov	r1, r9
 800a546:	f7f5 fe9f 	bl	8000288 <__aeabi_dsub>
 800a54a:	f805 6b01 	strb.w	r6, [r5], #1
 800a54e:	9b02      	ldr	r3, [sp, #8]
 800a550:	429d      	cmp	r5, r3
 800a552:	4680      	mov	r8, r0
 800a554:	4689      	mov	r9, r1
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	d124      	bne.n	800a5a6 <_dtoa_r+0x62e>
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <_dtoa_r+0x654>)
 800a55e:	ec51 0b19 	vmov	r0, r1, d9
 800a562:	f7f5 fe93 	bl	800028c <__adddf3>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f6 fad3 	bl	8000b18 <__aeabi_dcmpgt>
 800a572:	2800      	cmp	r0, #0
 800a574:	d173      	bne.n	800a65e <_dtoa_r+0x6e6>
 800a576:	ec53 2b19 	vmov	r2, r3, d9
 800a57a:	4914      	ldr	r1, [pc, #80]	; (800a5cc <_dtoa_r+0x654>)
 800a57c:	2000      	movs	r0, #0
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f6 faa7 	bl	8000adc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f43f af2f 	beq.w	800a3f2 <_dtoa_r+0x47a>
 800a594:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a596:	1e6b      	subs	r3, r5, #1
 800a598:	930f      	str	r3, [sp, #60]	; 0x3c
 800a59a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	d0f8      	beq.n	800a594 <_dtoa_r+0x61c>
 800a5a2:	46bb      	mov	fp, r7
 800a5a4:	e04a      	b.n	800a63c <_dtoa_r+0x6c4>
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <_dtoa_r+0x648>)
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	4689      	mov	r9, r1
 800a5b0:	e7bd      	b.n	800a52e <_dtoa_r+0x5b6>
 800a5b2:	bf00      	nop
 800a5b4:	08017b90 	.word	0x08017b90
 800a5b8:	08017b68 	.word	0x08017b68
 800a5bc:	3ff00000 	.word	0x3ff00000
 800a5c0:	40240000 	.word	0x40240000
 800a5c4:	401c0000 	.word	0x401c0000
 800a5c8:	40140000 	.word	0x40140000
 800a5cc:	3fe00000 	.word	0x3fe00000
 800a5d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5d4:	9d00      	ldr	r5, [sp, #0]
 800a5d6:	4642      	mov	r2, r8
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f6 f935 	bl	800084c <__aeabi_ddiv>
 800a5e2:	f7f6 fab9 	bl	8000b58 <__aeabi_d2iz>
 800a5e6:	9001      	str	r0, [sp, #4]
 800a5e8:	f7f5 ff9c 	bl	8000524 <__aeabi_i2d>
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	f7f6 f802 	bl	80005f8 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f5 fe44 	bl	8000288 <__aeabi_dsub>
 800a600:	9e01      	ldr	r6, [sp, #4]
 800a602:	9f04      	ldr	r7, [sp, #16]
 800a604:	3630      	adds	r6, #48	; 0x30
 800a606:	f805 6b01 	strb.w	r6, [r5], #1
 800a60a:	9e00      	ldr	r6, [sp, #0]
 800a60c:	1bae      	subs	r6, r5, r6
 800a60e:	42b7      	cmp	r7, r6
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	d134      	bne.n	800a680 <_dtoa_r+0x708>
 800a616:	f7f5 fe39 	bl	800028c <__adddf3>
 800a61a:	4642      	mov	r2, r8
 800a61c:	464b      	mov	r3, r9
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	f7f6 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 800a626:	b9c8      	cbnz	r0, 800a65c <_dtoa_r+0x6e4>
 800a628:	4642      	mov	r2, r8
 800a62a:	464b      	mov	r3, r9
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f6 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a634:	b110      	cbz	r0, 800a63c <_dtoa_r+0x6c4>
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	07db      	lsls	r3, r3, #31
 800a63a:	d40f      	bmi.n	800a65c <_dtoa_r+0x6e4>
 800a63c:	4651      	mov	r1, sl
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 fb18 	bl	800ac74 <_Bfree>
 800a644:	2300      	movs	r3, #0
 800a646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a648:	702b      	strb	r3, [r5, #0]
 800a64a:	f10b 0301 	add.w	r3, fp, #1
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a652:	2b00      	cmp	r3, #0
 800a654:	f43f ace2 	beq.w	800a01c <_dtoa_r+0xa4>
 800a658:	601d      	str	r5, [r3, #0]
 800a65a:	e4df      	b.n	800a01c <_dtoa_r+0xa4>
 800a65c:	465f      	mov	r7, fp
 800a65e:	462b      	mov	r3, r5
 800a660:	461d      	mov	r5, r3
 800a662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a666:	2a39      	cmp	r2, #57	; 0x39
 800a668:	d106      	bne.n	800a678 <_dtoa_r+0x700>
 800a66a:	9a00      	ldr	r2, [sp, #0]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d1f7      	bne.n	800a660 <_dtoa_r+0x6e8>
 800a670:	9900      	ldr	r1, [sp, #0]
 800a672:	2230      	movs	r2, #48	; 0x30
 800a674:	3701      	adds	r7, #1
 800a676:	700a      	strb	r2, [r1, #0]
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	3201      	adds	r2, #1
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e790      	b.n	800a5a2 <_dtoa_r+0x62a>
 800a680:	4ba3      	ldr	r3, [pc, #652]	; (800a910 <_dtoa_r+0x998>)
 800a682:	2200      	movs	r2, #0
 800a684:	f7f5 ffb8 	bl	80005f8 <__aeabi_dmul>
 800a688:	2200      	movs	r2, #0
 800a68a:	2300      	movs	r3, #0
 800a68c:	4606      	mov	r6, r0
 800a68e:	460f      	mov	r7, r1
 800a690:	f7f6 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a694:	2800      	cmp	r0, #0
 800a696:	d09e      	beq.n	800a5d6 <_dtoa_r+0x65e>
 800a698:	e7d0      	b.n	800a63c <_dtoa_r+0x6c4>
 800a69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	f000 80ca 	beq.w	800a836 <_dtoa_r+0x8be>
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	2a01      	cmp	r2, #1
 800a6a6:	f300 80ad 	bgt.w	800a804 <_dtoa_r+0x88c>
 800a6aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f000 80a5 	beq.w	800a7fc <_dtoa_r+0x884>
 800a6b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6b6:	9e08      	ldr	r6, [sp, #32]
 800a6b8:	9d05      	ldr	r5, [sp, #20]
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	441a      	add	r2, r3
 800a6be:	9205      	str	r2, [sp, #20]
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	441a      	add	r2, r3
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	9206      	str	r2, [sp, #24]
 800a6ca:	f000 fb89 	bl	800ade0 <__i2b>
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	b165      	cbz	r5, 800a6ec <_dtoa_r+0x774>
 800a6d2:	9b06      	ldr	r3, [sp, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd09      	ble.n	800a6ec <_dtoa_r+0x774>
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	9a05      	ldr	r2, [sp, #20]
 800a6dc:	bfa8      	it	ge
 800a6de:	462b      	movge	r3, r5
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	9205      	str	r2, [sp, #20]
 800a6e4:	9a06      	ldr	r2, [sp, #24]
 800a6e6:	1aed      	subs	r5, r5, r3
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	9306      	str	r3, [sp, #24]
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	b1f3      	cbz	r3, 800a72e <_dtoa_r+0x7b6>
 800a6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80a3 	beq.w	800a83e <_dtoa_r+0x8c6>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	dd10      	ble.n	800a71e <_dtoa_r+0x7a6>
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	4632      	mov	r2, r6
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fc2d 	bl	800af60 <__pow5mult>
 800a706:	4652      	mov	r2, sl
 800a708:	4601      	mov	r1, r0
 800a70a:	4607      	mov	r7, r0
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fb7d 	bl	800ae0c <__multiply>
 800a712:	4651      	mov	r1, sl
 800a714:	4680      	mov	r8, r0
 800a716:	4620      	mov	r0, r4
 800a718:	f000 faac 	bl	800ac74 <_Bfree>
 800a71c:	46c2      	mov	sl, r8
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	1b9a      	subs	r2, r3, r6
 800a722:	d004      	beq.n	800a72e <_dtoa_r+0x7b6>
 800a724:	4651      	mov	r1, sl
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fc1a 	bl	800af60 <__pow5mult>
 800a72c:	4682      	mov	sl, r0
 800a72e:	2101      	movs	r1, #1
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fb55 	bl	800ade0 <__i2b>
 800a736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	4606      	mov	r6, r0
 800a73c:	f340 8081 	ble.w	800a842 <_dtoa_r+0x8ca>
 800a740:	461a      	mov	r2, r3
 800a742:	4601      	mov	r1, r0
 800a744:	4620      	mov	r0, r4
 800a746:	f000 fc0b 	bl	800af60 <__pow5mult>
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	4606      	mov	r6, r0
 800a750:	dd7a      	ble.n	800a848 <_dtoa_r+0x8d0>
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	6933      	ldr	r3, [r6, #16]
 800a758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a75c:	6918      	ldr	r0, [r3, #16]
 800a75e:	f000 faf1 	bl	800ad44 <__hi0bits>
 800a762:	f1c0 0020 	rsb	r0, r0, #32
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	4418      	add	r0, r3
 800a76a:	f010 001f 	ands.w	r0, r0, #31
 800a76e:	f000 8094 	beq.w	800a89a <_dtoa_r+0x922>
 800a772:	f1c0 0320 	rsb	r3, r0, #32
 800a776:	2b04      	cmp	r3, #4
 800a778:	f340 8085 	ble.w	800a886 <_dtoa_r+0x90e>
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	f1c0 001c 	rsb	r0, r0, #28
 800a782:	4403      	add	r3, r0
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	9b06      	ldr	r3, [sp, #24]
 800a788:	4403      	add	r3, r0
 800a78a:	4405      	add	r5, r0
 800a78c:	9306      	str	r3, [sp, #24]
 800a78e:	9b05      	ldr	r3, [sp, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd05      	ble.n	800a7a0 <_dtoa_r+0x828>
 800a794:	4651      	mov	r1, sl
 800a796:	461a      	mov	r2, r3
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fc3b 	bl	800b014 <__lshift>
 800a79e:	4682      	mov	sl, r0
 800a7a0:	9b06      	ldr	r3, [sp, #24]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd05      	ble.n	800a7b2 <_dtoa_r+0x83a>
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fc32 	bl	800b014 <__lshift>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d072      	beq.n	800a89e <_dtoa_r+0x926>
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	f000 fc96 	bl	800b0ec <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	da6c      	bge.n	800a89e <_dtoa_r+0x926>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4651      	mov	r1, sl
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fa74 	bl	800acb8 <__multadd>
 800a7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 81b0 	beq.w	800ab3e <_dtoa_r+0xbc6>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fa67 	bl	800acb8 <__multadd>
 800a7ea:	9b01      	ldr	r3, [sp, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f300 8096 	bgt.w	800a920 <_dtoa_r+0x9a8>
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dc59      	bgt.n	800a8ae <_dtoa_r+0x936>
 800a7fa:	e091      	b.n	800a920 <_dtoa_r+0x9a8>
 800a7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a802:	e758      	b.n	800a6b6 <_dtoa_r+0x73e>
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	1e5e      	subs	r6, r3, #1
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	42b3      	cmp	r3, r6
 800a80c:	bfbf      	itttt	lt
 800a80e:	9b08      	ldrlt	r3, [sp, #32]
 800a810:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a812:	9608      	strlt	r6, [sp, #32]
 800a814:	1af3      	sublt	r3, r6, r3
 800a816:	bfb4      	ite	lt
 800a818:	18d2      	addlt	r2, r2, r3
 800a81a:	1b9e      	subge	r6, r3, r6
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	bfbc      	itt	lt
 800a820:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a822:	2600      	movlt	r6, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb7      	itett	lt
 800a828:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a82c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a830:	1a9d      	sublt	r5, r3, r2
 800a832:	2300      	movlt	r3, #0
 800a834:	e741      	b.n	800a6ba <_dtoa_r+0x742>
 800a836:	9e08      	ldr	r6, [sp, #32]
 800a838:	9d05      	ldr	r5, [sp, #20]
 800a83a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a83c:	e748      	b.n	800a6d0 <_dtoa_r+0x758>
 800a83e:	9a08      	ldr	r2, [sp, #32]
 800a840:	e770      	b.n	800a724 <_dtoa_r+0x7ac>
 800a842:	9b07      	ldr	r3, [sp, #28]
 800a844:	2b01      	cmp	r3, #1
 800a846:	dc19      	bgt.n	800a87c <_dtoa_r+0x904>
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	b9bb      	cbnz	r3, 800a87c <_dtoa_r+0x904>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a852:	b99b      	cbnz	r3, 800a87c <_dtoa_r+0x904>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a85a:	0d1b      	lsrs	r3, r3, #20
 800a85c:	051b      	lsls	r3, r3, #20
 800a85e:	b183      	cbz	r3, 800a882 <_dtoa_r+0x90a>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	3301      	adds	r3, #1
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	3301      	adds	r3, #1
 800a86a:	9306      	str	r3, [sp, #24]
 800a86c:	f04f 0801 	mov.w	r8, #1
 800a870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a872:	2b00      	cmp	r3, #0
 800a874:	f47f af6f 	bne.w	800a756 <_dtoa_r+0x7de>
 800a878:	2001      	movs	r0, #1
 800a87a:	e774      	b.n	800a766 <_dtoa_r+0x7ee>
 800a87c:	f04f 0800 	mov.w	r8, #0
 800a880:	e7f6      	b.n	800a870 <_dtoa_r+0x8f8>
 800a882:	4698      	mov	r8, r3
 800a884:	e7f4      	b.n	800a870 <_dtoa_r+0x8f8>
 800a886:	d082      	beq.n	800a78e <_dtoa_r+0x816>
 800a888:	9a05      	ldr	r2, [sp, #20]
 800a88a:	331c      	adds	r3, #28
 800a88c:	441a      	add	r2, r3
 800a88e:	9205      	str	r2, [sp, #20]
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	441a      	add	r2, r3
 800a894:	441d      	add	r5, r3
 800a896:	9206      	str	r2, [sp, #24]
 800a898:	e779      	b.n	800a78e <_dtoa_r+0x816>
 800a89a:	4603      	mov	r3, r0
 800a89c:	e7f4      	b.n	800a888 <_dtoa_r+0x910>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc37      	bgt.n	800a914 <_dtoa_r+0x99c>
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	dd34      	ble.n	800a914 <_dtoa_r+0x99c>
 800a8aa:	9b04      	ldr	r3, [sp, #16]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	b963      	cbnz	r3, 800a8cc <_dtoa_r+0x954>
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f9fe 	bl	800acb8 <__multadd>
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4606      	mov	r6, r0
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	f000 fc13 	bl	800b0ec <__mcmp>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f73f adbb 	bgt.w	800a442 <_dtoa_r+0x4ca>
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ce:	9d00      	ldr	r5, [sp, #0]
 800a8d0:	ea6f 0b03 	mvn.w	fp, r3
 800a8d4:	f04f 0800 	mov.w	r8, #0
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f9ca 	bl	800ac74 <_Bfree>
 800a8e0:	2f00      	cmp	r7, #0
 800a8e2:	f43f aeab 	beq.w	800a63c <_dtoa_r+0x6c4>
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	d005      	beq.n	800a8f8 <_dtoa_r+0x980>
 800a8ec:	45b8      	cmp	r8, r7
 800a8ee:	d003      	beq.n	800a8f8 <_dtoa_r+0x980>
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f9be 	bl	800ac74 <_Bfree>
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 f9ba 	bl	800ac74 <_Bfree>
 800a900:	e69c      	b.n	800a63c <_dtoa_r+0x6c4>
 800a902:	2600      	movs	r6, #0
 800a904:	4637      	mov	r7, r6
 800a906:	e7e1      	b.n	800a8cc <_dtoa_r+0x954>
 800a908:	46bb      	mov	fp, r7
 800a90a:	4637      	mov	r7, r6
 800a90c:	e599      	b.n	800a442 <_dtoa_r+0x4ca>
 800a90e:	bf00      	nop
 800a910:	40240000 	.word	0x40240000
 800a914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80c8 	beq.w	800aaac <_dtoa_r+0xb34>
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	2d00      	cmp	r5, #0
 800a922:	dd05      	ble.n	800a930 <_dtoa_r+0x9b8>
 800a924:	4639      	mov	r1, r7
 800a926:	462a      	mov	r2, r5
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fb73 	bl	800b014 <__lshift>
 800a92e:	4607      	mov	r7, r0
 800a930:	f1b8 0f00 	cmp.w	r8, #0
 800a934:	d05b      	beq.n	800a9ee <_dtoa_r+0xa76>
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f95b 	bl	800abf4 <_Balloc>
 800a93e:	4605      	mov	r5, r0
 800a940:	b928      	cbnz	r0, 800a94e <_dtoa_r+0x9d6>
 800a942:	4b83      	ldr	r3, [pc, #524]	; (800ab50 <_dtoa_r+0xbd8>)
 800a944:	4602      	mov	r2, r0
 800a946:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a94a:	f7ff bb2e 	b.w	8009faa <_dtoa_r+0x32>
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	3202      	adds	r2, #2
 800a952:	0092      	lsls	r2, r2, #2
 800a954:	f107 010c 	add.w	r1, r7, #12
 800a958:	300c      	adds	r0, #12
 800a95a:	f7ff fa58 	bl	8009e0e <memcpy>
 800a95e:	2201      	movs	r2, #1
 800a960:	4629      	mov	r1, r5
 800a962:	4620      	mov	r0, r4
 800a964:	f000 fb56 	bl	800b014 <__lshift>
 800a968:	9b00      	ldr	r3, [sp, #0]
 800a96a:	3301      	adds	r3, #1
 800a96c:	9304      	str	r3, [sp, #16]
 800a96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a972:	4413      	add	r3, r2
 800a974:	9308      	str	r3, [sp, #32]
 800a976:	9b02      	ldr	r3, [sp, #8]
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	46b8      	mov	r8, r7
 800a97e:	9306      	str	r3, [sp, #24]
 800a980:	4607      	mov	r7, r0
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	4631      	mov	r1, r6
 800a986:	3b01      	subs	r3, #1
 800a988:	4650      	mov	r0, sl
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	f7ff fa6c 	bl	8009e68 <quorem>
 800a990:	4641      	mov	r1, r8
 800a992:	9002      	str	r0, [sp, #8]
 800a994:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a998:	4650      	mov	r0, sl
 800a99a:	f000 fba7 	bl	800b0ec <__mcmp>
 800a99e:	463a      	mov	r2, r7
 800a9a0:	9005      	str	r0, [sp, #20]
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fbbd 	bl	800b124 <__mdiff>
 800a9aa:	68c2      	ldr	r2, [r0, #12]
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	bb02      	cbnz	r2, 800a9f2 <_dtoa_r+0xa7a>
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	f000 fb9a 	bl	800b0ec <__mcmp>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4620      	mov	r0, r4
 800a9be:	9209      	str	r2, [sp, #36]	; 0x24
 800a9c0:	f000 f958 	bl	800ac74 <_Bfree>
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c8:	9d04      	ldr	r5, [sp, #16]
 800a9ca:	ea43 0102 	orr.w	r1, r3, r2
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	4319      	orrs	r1, r3
 800a9d2:	d110      	bne.n	800a9f6 <_dtoa_r+0xa7e>
 800a9d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9d8:	d029      	beq.n	800aa2e <_dtoa_r+0xab6>
 800a9da:	9b05      	ldr	r3, [sp, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd02      	ble.n	800a9e6 <_dtoa_r+0xa6e>
 800a9e0:	9b02      	ldr	r3, [sp, #8]
 800a9e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	f883 9000 	strb.w	r9, [r3]
 800a9ec:	e774      	b.n	800a8d8 <_dtoa_r+0x960>
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	e7ba      	b.n	800a968 <_dtoa_r+0x9f0>
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	e7e1      	b.n	800a9ba <_dtoa_r+0xa42>
 800a9f6:	9b05      	ldr	r3, [sp, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db04      	blt.n	800aa06 <_dtoa_r+0xa8e>
 800a9fc:	9907      	ldr	r1, [sp, #28]
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	9906      	ldr	r1, [sp, #24]
 800aa02:	430b      	orrs	r3, r1
 800aa04:	d120      	bne.n	800aa48 <_dtoa_r+0xad0>
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	dded      	ble.n	800a9e6 <_dtoa_r+0xa6e>
 800aa0a:	4651      	mov	r1, sl
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fb00 	bl	800b014 <__lshift>
 800aa14:	4631      	mov	r1, r6
 800aa16:	4682      	mov	sl, r0
 800aa18:	f000 fb68 	bl	800b0ec <__mcmp>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	dc03      	bgt.n	800aa28 <_dtoa_r+0xab0>
 800aa20:	d1e1      	bne.n	800a9e6 <_dtoa_r+0xa6e>
 800aa22:	f019 0f01 	tst.w	r9, #1
 800aa26:	d0de      	beq.n	800a9e6 <_dtoa_r+0xa6e>
 800aa28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa2c:	d1d8      	bne.n	800a9e0 <_dtoa_r+0xa68>
 800aa2e:	9a01      	ldr	r2, [sp, #4]
 800aa30:	2339      	movs	r3, #57	; 0x39
 800aa32:	7013      	strb	r3, [r2, #0]
 800aa34:	462b      	mov	r3, r5
 800aa36:	461d      	mov	r5, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa3e:	2a39      	cmp	r2, #57	; 0x39
 800aa40:	d06c      	beq.n	800ab1c <_dtoa_r+0xba4>
 800aa42:	3201      	adds	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e747      	b.n	800a8d8 <_dtoa_r+0x960>
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	dd07      	ble.n	800aa5c <_dtoa_r+0xae4>
 800aa4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa50:	d0ed      	beq.n	800aa2e <_dtoa_r+0xab6>
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	f109 0301 	add.w	r3, r9, #1
 800aa58:	7013      	strb	r3, [r2, #0]
 800aa5a:	e73d      	b.n	800a8d8 <_dtoa_r+0x960>
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	9a08      	ldr	r2, [sp, #32]
 800aa60:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d043      	beq.n	800aaf0 <_dtoa_r+0xb78>
 800aa68:	4651      	mov	r1, sl
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	220a      	movs	r2, #10
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 f922 	bl	800acb8 <__multadd>
 800aa74:	45b8      	cmp	r8, r7
 800aa76:	4682      	mov	sl, r0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	f04f 020a 	mov.w	r2, #10
 800aa80:	4641      	mov	r1, r8
 800aa82:	4620      	mov	r0, r4
 800aa84:	d107      	bne.n	800aa96 <_dtoa_r+0xb1e>
 800aa86:	f000 f917 	bl	800acb8 <__multadd>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	3301      	adds	r3, #1
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	e775      	b.n	800a982 <_dtoa_r+0xa0a>
 800aa96:	f000 f90f 	bl	800acb8 <__multadd>
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 f908 	bl	800acb8 <__multadd>
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	e7f0      	b.n	800aa8e <_dtoa_r+0xb16>
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	9d00      	ldr	r5, [sp, #0]
 800aab2:	4631      	mov	r1, r6
 800aab4:	4650      	mov	r0, sl
 800aab6:	f7ff f9d7 	bl	8009e68 <quorem>
 800aaba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	f805 9b01 	strb.w	r9, [r5], #1
 800aac4:	1aea      	subs	r2, r5, r3
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	4293      	cmp	r3, r2
 800aaca:	dd07      	ble.n	800aadc <_dtoa_r+0xb64>
 800aacc:	4651      	mov	r1, sl
 800aace:	2300      	movs	r3, #0
 800aad0:	220a      	movs	r2, #10
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f8f0 	bl	800acb8 <__multadd>
 800aad8:	4682      	mov	sl, r0
 800aada:	e7ea      	b.n	800aab2 <_dtoa_r+0xb3a>
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	bfc8      	it	gt
 800aae2:	461d      	movgt	r5, r3
 800aae4:	9b00      	ldr	r3, [sp, #0]
 800aae6:	bfd8      	it	le
 800aae8:	2501      	movle	r5, #1
 800aaea:	441d      	add	r5, r3
 800aaec:	f04f 0800 	mov.w	r8, #0
 800aaf0:	4651      	mov	r1, sl
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fa8d 	bl	800b014 <__lshift>
 800aafa:	4631      	mov	r1, r6
 800aafc:	4682      	mov	sl, r0
 800aafe:	f000 faf5 	bl	800b0ec <__mcmp>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	dc96      	bgt.n	800aa34 <_dtoa_r+0xabc>
 800ab06:	d102      	bne.n	800ab0e <_dtoa_r+0xb96>
 800ab08:	f019 0f01 	tst.w	r9, #1
 800ab0c:	d192      	bne.n	800aa34 <_dtoa_r+0xabc>
 800ab0e:	462b      	mov	r3, r5
 800ab10:	461d      	mov	r5, r3
 800ab12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab16:	2a30      	cmp	r2, #48	; 0x30
 800ab18:	d0fa      	beq.n	800ab10 <_dtoa_r+0xb98>
 800ab1a:	e6dd      	b.n	800a8d8 <_dtoa_r+0x960>
 800ab1c:	9a00      	ldr	r2, [sp, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d189      	bne.n	800aa36 <_dtoa_r+0xabe>
 800ab22:	f10b 0b01 	add.w	fp, fp, #1
 800ab26:	2331      	movs	r3, #49	; 0x31
 800ab28:	e796      	b.n	800aa58 <_dtoa_r+0xae0>
 800ab2a:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <_dtoa_r+0xbdc>)
 800ab2c:	f7ff ba99 	b.w	800a062 <_dtoa_r+0xea>
 800ab30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f47f aa6d 	bne.w	800a012 <_dtoa_r+0x9a>
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <_dtoa_r+0xbe0>)
 800ab3a:	f7ff ba92 	b.w	800a062 <_dtoa_r+0xea>
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dcb5      	bgt.n	800aab0 <_dtoa_r+0xb38>
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	f73f aeb1 	bgt.w	800a8ae <_dtoa_r+0x936>
 800ab4c:	e7b0      	b.n	800aab0 <_dtoa_r+0xb38>
 800ab4e:	bf00      	nop
 800ab50:	08017afc 	.word	0x08017afc
 800ab54:	08017a37 	.word	0x08017a37
 800ab58:	08017a97 	.word	0x08017a97

0800ab5c <_free_r>:
 800ab5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d044      	beq.n	800abec <_free_r+0x90>
 800ab62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab66:	9001      	str	r0, [sp, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab6e:	bfb8      	it	lt
 800ab70:	18e4      	addlt	r4, r4, r3
 800ab72:	f7fe f9b5 	bl	8008ee0 <__malloc_lock>
 800ab76:	4a1e      	ldr	r2, [pc, #120]	; (800abf0 <_free_r+0x94>)
 800ab78:	9801      	ldr	r0, [sp, #4]
 800ab7a:	6813      	ldr	r3, [r2, #0]
 800ab7c:	b933      	cbnz	r3, 800ab8c <_free_r+0x30>
 800ab7e:	6063      	str	r3, [r4, #4]
 800ab80:	6014      	str	r4, [r2, #0]
 800ab82:	b003      	add	sp, #12
 800ab84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab88:	f7fe b9b0 	b.w	8008eec <__malloc_unlock>
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	d908      	bls.n	800aba2 <_free_r+0x46>
 800ab90:	6825      	ldr	r5, [r4, #0]
 800ab92:	1961      	adds	r1, r4, r5
 800ab94:	428b      	cmp	r3, r1
 800ab96:	bf01      	itttt	eq
 800ab98:	6819      	ldreq	r1, [r3, #0]
 800ab9a:	685b      	ldreq	r3, [r3, #4]
 800ab9c:	1949      	addeq	r1, r1, r5
 800ab9e:	6021      	streq	r1, [r4, #0]
 800aba0:	e7ed      	b.n	800ab7e <_free_r+0x22>
 800aba2:	461a      	mov	r2, r3
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	b10b      	cbz	r3, 800abac <_free_r+0x50>
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	d9fa      	bls.n	800aba2 <_free_r+0x46>
 800abac:	6811      	ldr	r1, [r2, #0]
 800abae:	1855      	adds	r5, r2, r1
 800abb0:	42a5      	cmp	r5, r4
 800abb2:	d10b      	bne.n	800abcc <_free_r+0x70>
 800abb4:	6824      	ldr	r4, [r4, #0]
 800abb6:	4421      	add	r1, r4
 800abb8:	1854      	adds	r4, r2, r1
 800abba:	42a3      	cmp	r3, r4
 800abbc:	6011      	str	r1, [r2, #0]
 800abbe:	d1e0      	bne.n	800ab82 <_free_r+0x26>
 800abc0:	681c      	ldr	r4, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	6053      	str	r3, [r2, #4]
 800abc6:	440c      	add	r4, r1
 800abc8:	6014      	str	r4, [r2, #0]
 800abca:	e7da      	b.n	800ab82 <_free_r+0x26>
 800abcc:	d902      	bls.n	800abd4 <_free_r+0x78>
 800abce:	230c      	movs	r3, #12
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	e7d6      	b.n	800ab82 <_free_r+0x26>
 800abd4:	6825      	ldr	r5, [r4, #0]
 800abd6:	1961      	adds	r1, r4, r5
 800abd8:	428b      	cmp	r3, r1
 800abda:	bf04      	itt	eq
 800abdc:	6819      	ldreq	r1, [r3, #0]
 800abde:	685b      	ldreq	r3, [r3, #4]
 800abe0:	6063      	str	r3, [r4, #4]
 800abe2:	bf04      	itt	eq
 800abe4:	1949      	addeq	r1, r1, r5
 800abe6:	6021      	streq	r1, [r4, #0]
 800abe8:	6054      	str	r4, [r2, #4]
 800abea:	e7ca      	b.n	800ab82 <_free_r+0x26>
 800abec:	b003      	add	sp, #12
 800abee:	bd30      	pop	{r4, r5, pc}
 800abf0:	2000164c 	.word	0x2000164c

0800abf4 <_Balloc>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	69c6      	ldr	r6, [r0, #28]
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	b976      	cbnz	r6, 800ac1c <_Balloc+0x28>
 800abfe:	2010      	movs	r0, #16
 800ac00:	f7f8 fff6 	bl	8003bf0 <__wrap_malloc>
 800ac04:	4602      	mov	r2, r0
 800ac06:	61e0      	str	r0, [r4, #28]
 800ac08:	b920      	cbnz	r0, 800ac14 <_Balloc+0x20>
 800ac0a:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <_Balloc+0x78>)
 800ac0c:	4818      	ldr	r0, [pc, #96]	; (800ac70 <_Balloc+0x7c>)
 800ac0e:	216b      	movs	r1, #107	; 0x6b
 800ac10:	f7ff f90c 	bl	8009e2c <__assert_func>
 800ac14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac18:	6006      	str	r6, [r0, #0]
 800ac1a:	60c6      	str	r6, [r0, #12]
 800ac1c:	69e6      	ldr	r6, [r4, #28]
 800ac1e:	68f3      	ldr	r3, [r6, #12]
 800ac20:	b183      	cbz	r3, 800ac44 <_Balloc+0x50>
 800ac22:	69e3      	ldr	r3, [r4, #28]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac2a:	b9b8      	cbnz	r0, 800ac5c <_Balloc+0x68>
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac32:	1d72      	adds	r2, r6, #5
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 fceb 	bl	800b612 <_calloc_r>
 800ac3c:	b160      	cbz	r0, 800ac58 <_Balloc+0x64>
 800ac3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac42:	e00e      	b.n	800ac62 <_Balloc+0x6e>
 800ac44:	2221      	movs	r2, #33	; 0x21
 800ac46:	2104      	movs	r1, #4
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fce2 	bl	800b612 <_calloc_r>
 800ac4e:	69e3      	ldr	r3, [r4, #28]
 800ac50:	60f0      	str	r0, [r6, #12]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e4      	bne.n	800ac22 <_Balloc+0x2e>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	6802      	ldr	r2, [r0, #0]
 800ac5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac62:	2300      	movs	r3, #0
 800ac64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac68:	e7f7      	b.n	800ac5a <_Balloc+0x66>
 800ac6a:	bf00      	nop
 800ac6c:	080179b8 	.word	0x080179b8
 800ac70:	08017b0d 	.word	0x08017b0d

0800ac74 <_Bfree>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	69c6      	ldr	r6, [r0, #28]
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b976      	cbnz	r6, 800ac9c <_Bfree+0x28>
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f7f8 ffb6 	bl	8003bf0 <__wrap_malloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	61e8      	str	r0, [r5, #28]
 800ac88:	b920      	cbnz	r0, 800ac94 <_Bfree+0x20>
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <_Bfree+0x3c>)
 800ac8c:	4809      	ldr	r0, [pc, #36]	; (800acb4 <_Bfree+0x40>)
 800ac8e:	218f      	movs	r1, #143	; 0x8f
 800ac90:	f7ff f8cc 	bl	8009e2c <__assert_func>
 800ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac98:	6006      	str	r6, [r0, #0]
 800ac9a:	60c6      	str	r6, [r0, #12]
 800ac9c:	b13c      	cbz	r4, 800acae <_Bfree+0x3a>
 800ac9e:	69eb      	ldr	r3, [r5, #28]
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	6021      	str	r1, [r4, #0]
 800acaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	080179b8 	.word	0x080179b8
 800acb4:	08017b0d 	.word	0x08017b0d

0800acb8 <__multadd>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	690d      	ldr	r5, [r1, #16]
 800acbe:	4607      	mov	r7, r0
 800acc0:	460c      	mov	r4, r1
 800acc2:	461e      	mov	r6, r3
 800acc4:	f101 0c14 	add.w	ip, r1, #20
 800acc8:	2000      	movs	r0, #0
 800acca:	f8dc 3000 	ldr.w	r3, [ip]
 800acce:	b299      	uxth	r1, r3
 800acd0:	fb02 6101 	mla	r1, r2, r1, r6
 800acd4:	0c1e      	lsrs	r6, r3, #16
 800acd6:	0c0b      	lsrs	r3, r1, #16
 800acd8:	fb02 3306 	mla	r3, r2, r6, r3
 800acdc:	b289      	uxth	r1, r1
 800acde:	3001      	adds	r0, #1
 800ace0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ace4:	4285      	cmp	r5, r0
 800ace6:	f84c 1b04 	str.w	r1, [ip], #4
 800acea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acee:	dcec      	bgt.n	800acca <__multadd+0x12>
 800acf0:	b30e      	cbz	r6, 800ad36 <__multadd+0x7e>
 800acf2:	68a3      	ldr	r3, [r4, #8]
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	dc19      	bgt.n	800ad2c <__multadd+0x74>
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4638      	mov	r0, r7
 800acfc:	3101      	adds	r1, #1
 800acfe:	f7ff ff79 	bl	800abf4 <_Balloc>
 800ad02:	4680      	mov	r8, r0
 800ad04:	b928      	cbnz	r0, 800ad12 <__multadd+0x5a>
 800ad06:	4602      	mov	r2, r0
 800ad08:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <__multadd+0x84>)
 800ad0a:	480d      	ldr	r0, [pc, #52]	; (800ad40 <__multadd+0x88>)
 800ad0c:	21ba      	movs	r1, #186	; 0xba
 800ad0e:	f7ff f88d 	bl	8009e2c <__assert_func>
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	3202      	adds	r2, #2
 800ad16:	f104 010c 	add.w	r1, r4, #12
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	300c      	adds	r0, #12
 800ad1e:	f7ff f876 	bl	8009e0e <memcpy>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff ffa5 	bl	800ac74 <_Bfree>
 800ad2a:	4644      	mov	r4, r8
 800ad2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad30:	3501      	adds	r5, #1
 800ad32:	615e      	str	r6, [r3, #20]
 800ad34:	6125      	str	r5, [r4, #16]
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	08017afc 	.word	0x08017afc
 800ad40:	08017b0d 	.word	0x08017b0d

0800ad44 <__hi0bits>:
 800ad44:	0c03      	lsrs	r3, r0, #16
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	b9d3      	cbnz	r3, 800ad80 <__hi0bits+0x3c>
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad52:	bf04      	itt	eq
 800ad54:	0200      	lsleq	r0, r0, #8
 800ad56:	3308      	addeq	r3, #8
 800ad58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad5c:	bf04      	itt	eq
 800ad5e:	0100      	lsleq	r0, r0, #4
 800ad60:	3304      	addeq	r3, #4
 800ad62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad66:	bf04      	itt	eq
 800ad68:	0080      	lsleq	r0, r0, #2
 800ad6a:	3302      	addeq	r3, #2
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	db05      	blt.n	800ad7c <__hi0bits+0x38>
 800ad70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad74:	f103 0301 	add.w	r3, r3, #1
 800ad78:	bf08      	it	eq
 800ad7a:	2320      	moveq	r3, #32
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4770      	bx	lr
 800ad80:	2300      	movs	r3, #0
 800ad82:	e7e4      	b.n	800ad4e <__hi0bits+0xa>

0800ad84 <__lo0bits>:
 800ad84:	6803      	ldr	r3, [r0, #0]
 800ad86:	f013 0207 	ands.w	r2, r3, #7
 800ad8a:	d00c      	beq.n	800ada6 <__lo0bits+0x22>
 800ad8c:	07d9      	lsls	r1, r3, #31
 800ad8e:	d422      	bmi.n	800add6 <__lo0bits+0x52>
 800ad90:	079a      	lsls	r2, r3, #30
 800ad92:	bf49      	itett	mi
 800ad94:	085b      	lsrmi	r3, r3, #1
 800ad96:	089b      	lsrpl	r3, r3, #2
 800ad98:	6003      	strmi	r3, [r0, #0]
 800ad9a:	2201      	movmi	r2, #1
 800ad9c:	bf5c      	itt	pl
 800ad9e:	6003      	strpl	r3, [r0, #0]
 800ada0:	2202      	movpl	r2, #2
 800ada2:	4610      	mov	r0, r2
 800ada4:	4770      	bx	lr
 800ada6:	b299      	uxth	r1, r3
 800ada8:	b909      	cbnz	r1, 800adae <__lo0bits+0x2a>
 800adaa:	0c1b      	lsrs	r3, r3, #16
 800adac:	2210      	movs	r2, #16
 800adae:	b2d9      	uxtb	r1, r3
 800adb0:	b909      	cbnz	r1, 800adb6 <__lo0bits+0x32>
 800adb2:	3208      	adds	r2, #8
 800adb4:	0a1b      	lsrs	r3, r3, #8
 800adb6:	0719      	lsls	r1, r3, #28
 800adb8:	bf04      	itt	eq
 800adba:	091b      	lsreq	r3, r3, #4
 800adbc:	3204      	addeq	r2, #4
 800adbe:	0799      	lsls	r1, r3, #30
 800adc0:	bf04      	itt	eq
 800adc2:	089b      	lsreq	r3, r3, #2
 800adc4:	3202      	addeq	r2, #2
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d403      	bmi.n	800add2 <__lo0bits+0x4e>
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f102 0201 	add.w	r2, r2, #1
 800add0:	d003      	beq.n	800adda <__lo0bits+0x56>
 800add2:	6003      	str	r3, [r0, #0]
 800add4:	e7e5      	b.n	800ada2 <__lo0bits+0x1e>
 800add6:	2200      	movs	r2, #0
 800add8:	e7e3      	b.n	800ada2 <__lo0bits+0x1e>
 800adda:	2220      	movs	r2, #32
 800addc:	e7e1      	b.n	800ada2 <__lo0bits+0x1e>
	...

0800ade0 <__i2b>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	460c      	mov	r4, r1
 800ade4:	2101      	movs	r1, #1
 800ade6:	f7ff ff05 	bl	800abf4 <_Balloc>
 800adea:	4602      	mov	r2, r0
 800adec:	b928      	cbnz	r0, 800adfa <__i2b+0x1a>
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <__i2b+0x24>)
 800adf0:	4805      	ldr	r0, [pc, #20]	; (800ae08 <__i2b+0x28>)
 800adf2:	f240 1145 	movw	r1, #325	; 0x145
 800adf6:	f7ff f819 	bl	8009e2c <__assert_func>
 800adfa:	2301      	movs	r3, #1
 800adfc:	6144      	str	r4, [r0, #20]
 800adfe:	6103      	str	r3, [r0, #16]
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	bf00      	nop
 800ae04:	08017afc 	.word	0x08017afc
 800ae08:	08017b0d 	.word	0x08017b0d

0800ae0c <__multiply>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4691      	mov	r9, r2
 800ae12:	690a      	ldr	r2, [r1, #16]
 800ae14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	bfb8      	it	lt
 800ae1c:	460b      	movlt	r3, r1
 800ae1e:	460c      	mov	r4, r1
 800ae20:	bfbc      	itt	lt
 800ae22:	464c      	movlt	r4, r9
 800ae24:	4699      	movlt	r9, r3
 800ae26:	6927      	ldr	r7, [r4, #16]
 800ae28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	6861      	ldr	r1, [r4, #4]
 800ae30:	eb07 060a 	add.w	r6, r7, sl
 800ae34:	42b3      	cmp	r3, r6
 800ae36:	b085      	sub	sp, #20
 800ae38:	bfb8      	it	lt
 800ae3a:	3101      	addlt	r1, #1
 800ae3c:	f7ff feda 	bl	800abf4 <_Balloc>
 800ae40:	b930      	cbnz	r0, 800ae50 <__multiply+0x44>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b44      	ldr	r3, [pc, #272]	; (800af58 <__multiply+0x14c>)
 800ae46:	4845      	ldr	r0, [pc, #276]	; (800af5c <__multiply+0x150>)
 800ae48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae4c:	f7fe ffee 	bl	8009e2c <__assert_func>
 800ae50:	f100 0514 	add.w	r5, r0, #20
 800ae54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae58:	462b      	mov	r3, r5
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	4543      	cmp	r3, r8
 800ae5e:	d321      	bcc.n	800aea4 <__multiply+0x98>
 800ae60:	f104 0314 	add.w	r3, r4, #20
 800ae64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae68:	f109 0314 	add.w	r3, r9, #20
 800ae6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae70:	9202      	str	r2, [sp, #8]
 800ae72:	1b3a      	subs	r2, r7, r4
 800ae74:	3a15      	subs	r2, #21
 800ae76:	f022 0203 	bic.w	r2, r2, #3
 800ae7a:	3204      	adds	r2, #4
 800ae7c:	f104 0115 	add.w	r1, r4, #21
 800ae80:	428f      	cmp	r7, r1
 800ae82:	bf38      	it	cc
 800ae84:	2204      	movcc	r2, #4
 800ae86:	9201      	str	r2, [sp, #4]
 800ae88:	9a02      	ldr	r2, [sp, #8]
 800ae8a:	9303      	str	r3, [sp, #12]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d80c      	bhi.n	800aeaa <__multiply+0x9e>
 800ae90:	2e00      	cmp	r6, #0
 800ae92:	dd03      	ble.n	800ae9c <__multiply+0x90>
 800ae94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d05b      	beq.n	800af54 <__multiply+0x148>
 800ae9c:	6106      	str	r6, [r0, #16]
 800ae9e:	b005      	add	sp, #20
 800aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	f843 2b04 	str.w	r2, [r3], #4
 800aea8:	e7d8      	b.n	800ae5c <__multiply+0x50>
 800aeaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeae:	f1ba 0f00 	cmp.w	sl, #0
 800aeb2:	d024      	beq.n	800aefe <__multiply+0xf2>
 800aeb4:	f104 0e14 	add.w	lr, r4, #20
 800aeb8:	46a9      	mov	r9, r5
 800aeba:	f04f 0c00 	mov.w	ip, #0
 800aebe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aec2:	f8d9 1000 	ldr.w	r1, [r9]
 800aec6:	fa1f fb82 	uxth.w	fp, r2
 800aeca:	b289      	uxth	r1, r1
 800aecc:	fb0a 110b 	mla	r1, sl, fp, r1
 800aed0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aed4:	f8d9 2000 	ldr.w	r2, [r9]
 800aed8:	4461      	add	r1, ip
 800aeda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aede:	fb0a c20b 	mla	r2, sl, fp, ip
 800aee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aee6:	b289      	uxth	r1, r1
 800aee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aeec:	4577      	cmp	r7, lr
 800aeee:	f849 1b04 	str.w	r1, [r9], #4
 800aef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aef6:	d8e2      	bhi.n	800aebe <__multiply+0xb2>
 800aef8:	9a01      	ldr	r2, [sp, #4]
 800aefa:	f845 c002 	str.w	ip, [r5, r2]
 800aefe:	9a03      	ldr	r2, [sp, #12]
 800af00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af04:	3304      	adds	r3, #4
 800af06:	f1b9 0f00 	cmp.w	r9, #0
 800af0a:	d021      	beq.n	800af50 <__multiply+0x144>
 800af0c:	6829      	ldr	r1, [r5, #0]
 800af0e:	f104 0c14 	add.w	ip, r4, #20
 800af12:	46ae      	mov	lr, r5
 800af14:	f04f 0a00 	mov.w	sl, #0
 800af18:	f8bc b000 	ldrh.w	fp, [ip]
 800af1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af20:	fb09 220b 	mla	r2, r9, fp, r2
 800af24:	4452      	add	r2, sl
 800af26:	b289      	uxth	r1, r1
 800af28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af2c:	f84e 1b04 	str.w	r1, [lr], #4
 800af30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af38:	f8be 1000 	ldrh.w	r1, [lr]
 800af3c:	fb09 110a 	mla	r1, r9, sl, r1
 800af40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af44:	4567      	cmp	r7, ip
 800af46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af4a:	d8e5      	bhi.n	800af18 <__multiply+0x10c>
 800af4c:	9a01      	ldr	r2, [sp, #4]
 800af4e:	50a9      	str	r1, [r5, r2]
 800af50:	3504      	adds	r5, #4
 800af52:	e799      	b.n	800ae88 <__multiply+0x7c>
 800af54:	3e01      	subs	r6, #1
 800af56:	e79b      	b.n	800ae90 <__multiply+0x84>
 800af58:	08017afc 	.word	0x08017afc
 800af5c:	08017b0d 	.word	0x08017b0d

0800af60 <__pow5mult>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	4615      	mov	r5, r2
 800af66:	f012 0203 	ands.w	r2, r2, #3
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	d007      	beq.n	800af80 <__pow5mult+0x20>
 800af70:	4c25      	ldr	r4, [pc, #148]	; (800b008 <__pow5mult+0xa8>)
 800af72:	3a01      	subs	r2, #1
 800af74:	2300      	movs	r3, #0
 800af76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af7a:	f7ff fe9d 	bl	800acb8 <__multadd>
 800af7e:	4607      	mov	r7, r0
 800af80:	10ad      	asrs	r5, r5, #2
 800af82:	d03d      	beq.n	800b000 <__pow5mult+0xa0>
 800af84:	69f4      	ldr	r4, [r6, #28]
 800af86:	b97c      	cbnz	r4, 800afa8 <__pow5mult+0x48>
 800af88:	2010      	movs	r0, #16
 800af8a:	f7f8 fe31 	bl	8003bf0 <__wrap_malloc>
 800af8e:	4602      	mov	r2, r0
 800af90:	61f0      	str	r0, [r6, #28]
 800af92:	b928      	cbnz	r0, 800afa0 <__pow5mult+0x40>
 800af94:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <__pow5mult+0xac>)
 800af96:	481e      	ldr	r0, [pc, #120]	; (800b010 <__pow5mult+0xb0>)
 800af98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af9c:	f7fe ff46 	bl	8009e2c <__assert_func>
 800afa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa4:	6004      	str	r4, [r0, #0]
 800afa6:	60c4      	str	r4, [r0, #12]
 800afa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800afac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afb0:	b94c      	cbnz	r4, 800afc6 <__pow5mult+0x66>
 800afb2:	f240 2171 	movw	r1, #625	; 0x271
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ff12 	bl	800ade0 <__i2b>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800afc2:	4604      	mov	r4, r0
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	07eb      	lsls	r3, r5, #31
 800afcc:	d50a      	bpl.n	800afe4 <__pow5mult+0x84>
 800afce:	4639      	mov	r1, r7
 800afd0:	4622      	mov	r2, r4
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff ff1a 	bl	800ae0c <__multiply>
 800afd8:	4639      	mov	r1, r7
 800afda:	4680      	mov	r8, r0
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff fe49 	bl	800ac74 <_Bfree>
 800afe2:	4647      	mov	r7, r8
 800afe4:	106d      	asrs	r5, r5, #1
 800afe6:	d00b      	beq.n	800b000 <__pow5mult+0xa0>
 800afe8:	6820      	ldr	r0, [r4, #0]
 800afea:	b938      	cbnz	r0, 800affc <__pow5mult+0x9c>
 800afec:	4622      	mov	r2, r4
 800afee:	4621      	mov	r1, r4
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff ff0b 	bl	800ae0c <__multiply>
 800aff6:	6020      	str	r0, [r4, #0]
 800aff8:	f8c0 9000 	str.w	r9, [r0]
 800affc:	4604      	mov	r4, r0
 800affe:	e7e4      	b.n	800afca <__pow5mult+0x6a>
 800b000:	4638      	mov	r0, r7
 800b002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b006:	bf00      	nop
 800b008:	08017c58 	.word	0x08017c58
 800b00c:	080179b8 	.word	0x080179b8
 800b010:	08017b0d 	.word	0x08017b0d

0800b014 <__lshift>:
 800b014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	6849      	ldr	r1, [r1, #4]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	4607      	mov	r7, r0
 800b026:	4691      	mov	r9, r2
 800b028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b02c:	f108 0601 	add.w	r6, r8, #1
 800b030:	42b3      	cmp	r3, r6
 800b032:	db0b      	blt.n	800b04c <__lshift+0x38>
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff fddd 	bl	800abf4 <_Balloc>
 800b03a:	4605      	mov	r5, r0
 800b03c:	b948      	cbnz	r0, 800b052 <__lshift+0x3e>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b28      	ldr	r3, [pc, #160]	; (800b0e4 <__lshift+0xd0>)
 800b042:	4829      	ldr	r0, [pc, #164]	; (800b0e8 <__lshift+0xd4>)
 800b044:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b048:	f7fe fef0 	bl	8009e2c <__assert_func>
 800b04c:	3101      	adds	r1, #1
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	e7ee      	b.n	800b030 <__lshift+0x1c>
 800b052:	2300      	movs	r3, #0
 800b054:	f100 0114 	add.w	r1, r0, #20
 800b058:	f100 0210 	add.w	r2, r0, #16
 800b05c:	4618      	mov	r0, r3
 800b05e:	4553      	cmp	r3, sl
 800b060:	db33      	blt.n	800b0ca <__lshift+0xb6>
 800b062:	6920      	ldr	r0, [r4, #16]
 800b064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b068:	f104 0314 	add.w	r3, r4, #20
 800b06c:	f019 091f 	ands.w	r9, r9, #31
 800b070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b078:	d02b      	beq.n	800b0d2 <__lshift+0xbe>
 800b07a:	f1c9 0e20 	rsb	lr, r9, #32
 800b07e:	468a      	mov	sl, r1
 800b080:	2200      	movs	r2, #0
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	fa00 f009 	lsl.w	r0, r0, r9
 800b088:	4310      	orrs	r0, r2
 800b08a:	f84a 0b04 	str.w	r0, [sl], #4
 800b08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b092:	459c      	cmp	ip, r3
 800b094:	fa22 f20e 	lsr.w	r2, r2, lr
 800b098:	d8f3      	bhi.n	800b082 <__lshift+0x6e>
 800b09a:	ebac 0304 	sub.w	r3, ip, r4
 800b09e:	3b15      	subs	r3, #21
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	f104 0015 	add.w	r0, r4, #21
 800b0aa:	4584      	cmp	ip, r0
 800b0ac:	bf38      	it	cc
 800b0ae:	2304      	movcc	r3, #4
 800b0b0:	50ca      	str	r2, [r1, r3]
 800b0b2:	b10a      	cbz	r2, 800b0b8 <__lshift+0xa4>
 800b0b4:	f108 0602 	add.w	r6, r8, #2
 800b0b8:	3e01      	subs	r6, #1
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	612e      	str	r6, [r5, #16]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	f7ff fdd8 	bl	800ac74 <_Bfree>
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	e7c5      	b.n	800b05e <__lshift+0x4a>
 800b0d2:	3904      	subs	r1, #4
 800b0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0dc:	459c      	cmp	ip, r3
 800b0de:	d8f9      	bhi.n	800b0d4 <__lshift+0xc0>
 800b0e0:	e7ea      	b.n	800b0b8 <__lshift+0xa4>
 800b0e2:	bf00      	nop
 800b0e4:	08017afc 	.word	0x08017afc
 800b0e8:	08017b0d 	.word	0x08017b0d

0800b0ec <__mcmp>:
 800b0ec:	b530      	push	{r4, r5, lr}
 800b0ee:	6902      	ldr	r2, [r0, #16]
 800b0f0:	690c      	ldr	r4, [r1, #16]
 800b0f2:	1b12      	subs	r2, r2, r4
 800b0f4:	d10e      	bne.n	800b114 <__mcmp+0x28>
 800b0f6:	f100 0314 	add.w	r3, r0, #20
 800b0fa:	3114      	adds	r1, #20
 800b0fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b10c:	42a5      	cmp	r5, r4
 800b10e:	d003      	beq.n	800b118 <__mcmp+0x2c>
 800b110:	d305      	bcc.n	800b11e <__mcmp+0x32>
 800b112:	2201      	movs	r2, #1
 800b114:	4610      	mov	r0, r2
 800b116:	bd30      	pop	{r4, r5, pc}
 800b118:	4283      	cmp	r3, r0
 800b11a:	d3f3      	bcc.n	800b104 <__mcmp+0x18>
 800b11c:	e7fa      	b.n	800b114 <__mcmp+0x28>
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	e7f7      	b.n	800b114 <__mcmp+0x28>

0800b124 <__mdiff>:
 800b124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	460c      	mov	r4, r1
 800b12a:	4606      	mov	r6, r0
 800b12c:	4611      	mov	r1, r2
 800b12e:	4620      	mov	r0, r4
 800b130:	4690      	mov	r8, r2
 800b132:	f7ff ffdb 	bl	800b0ec <__mcmp>
 800b136:	1e05      	subs	r5, r0, #0
 800b138:	d110      	bne.n	800b15c <__mdiff+0x38>
 800b13a:	4629      	mov	r1, r5
 800b13c:	4630      	mov	r0, r6
 800b13e:	f7ff fd59 	bl	800abf4 <_Balloc>
 800b142:	b930      	cbnz	r0, 800b152 <__mdiff+0x2e>
 800b144:	4b3a      	ldr	r3, [pc, #232]	; (800b230 <__mdiff+0x10c>)
 800b146:	4602      	mov	r2, r0
 800b148:	f240 2137 	movw	r1, #567	; 0x237
 800b14c:	4839      	ldr	r0, [pc, #228]	; (800b234 <__mdiff+0x110>)
 800b14e:	f7fe fe6d 	bl	8009e2c <__assert_func>
 800b152:	2301      	movs	r3, #1
 800b154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15c:	bfa4      	itt	ge
 800b15e:	4643      	movge	r3, r8
 800b160:	46a0      	movge	r8, r4
 800b162:	4630      	mov	r0, r6
 800b164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b168:	bfa6      	itte	ge
 800b16a:	461c      	movge	r4, r3
 800b16c:	2500      	movge	r5, #0
 800b16e:	2501      	movlt	r5, #1
 800b170:	f7ff fd40 	bl	800abf4 <_Balloc>
 800b174:	b920      	cbnz	r0, 800b180 <__mdiff+0x5c>
 800b176:	4b2e      	ldr	r3, [pc, #184]	; (800b230 <__mdiff+0x10c>)
 800b178:	4602      	mov	r2, r0
 800b17a:	f240 2145 	movw	r1, #581	; 0x245
 800b17e:	e7e5      	b.n	800b14c <__mdiff+0x28>
 800b180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b184:	6926      	ldr	r6, [r4, #16]
 800b186:	60c5      	str	r5, [r0, #12]
 800b188:	f104 0914 	add.w	r9, r4, #20
 800b18c:	f108 0514 	add.w	r5, r8, #20
 800b190:	f100 0e14 	add.w	lr, r0, #20
 800b194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b19c:	f108 0210 	add.w	r2, r8, #16
 800b1a0:	46f2      	mov	sl, lr
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1ac:	fa11 f88b 	uxtah	r8, r1, fp
 800b1b0:	b299      	uxth	r1, r3
 800b1b2:	0c1b      	lsrs	r3, r3, #16
 800b1b4:	eba8 0801 	sub.w	r8, r8, r1
 800b1b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1c0:	fa1f f888 	uxth.w	r8, r8
 800b1c4:	1419      	asrs	r1, r3, #16
 800b1c6:	454e      	cmp	r6, r9
 800b1c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1cc:	f84a 3b04 	str.w	r3, [sl], #4
 800b1d0:	d8e8      	bhi.n	800b1a4 <__mdiff+0x80>
 800b1d2:	1b33      	subs	r3, r6, r4
 800b1d4:	3b15      	subs	r3, #21
 800b1d6:	f023 0303 	bic.w	r3, r3, #3
 800b1da:	3304      	adds	r3, #4
 800b1dc:	3415      	adds	r4, #21
 800b1de:	42a6      	cmp	r6, r4
 800b1e0:	bf38      	it	cc
 800b1e2:	2304      	movcc	r3, #4
 800b1e4:	441d      	add	r5, r3
 800b1e6:	4473      	add	r3, lr
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	462e      	mov	r6, r5
 800b1ec:	4566      	cmp	r6, ip
 800b1ee:	d30e      	bcc.n	800b20e <__mdiff+0xea>
 800b1f0:	f10c 0203 	add.w	r2, ip, #3
 800b1f4:	1b52      	subs	r2, r2, r5
 800b1f6:	f022 0203 	bic.w	r2, r2, #3
 800b1fa:	3d03      	subs	r5, #3
 800b1fc:	45ac      	cmp	ip, r5
 800b1fe:	bf38      	it	cc
 800b200:	2200      	movcc	r2, #0
 800b202:	4413      	add	r3, r2
 800b204:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b208:	b17a      	cbz	r2, 800b22a <__mdiff+0x106>
 800b20a:	6107      	str	r7, [r0, #16]
 800b20c:	e7a4      	b.n	800b158 <__mdiff+0x34>
 800b20e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b212:	fa11 f288 	uxtah	r2, r1, r8
 800b216:	1414      	asrs	r4, r2, #16
 800b218:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b21c:	b292      	uxth	r2, r2
 800b21e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b222:	f84e 2b04 	str.w	r2, [lr], #4
 800b226:	1421      	asrs	r1, r4, #16
 800b228:	e7e0      	b.n	800b1ec <__mdiff+0xc8>
 800b22a:	3f01      	subs	r7, #1
 800b22c:	e7ea      	b.n	800b204 <__mdiff+0xe0>
 800b22e:	bf00      	nop
 800b230:	08017afc 	.word	0x08017afc
 800b234:	08017b0d 	.word	0x08017b0d

0800b238 <__d2b>:
 800b238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	460f      	mov	r7, r1
 800b23e:	2101      	movs	r1, #1
 800b240:	ec59 8b10 	vmov	r8, r9, d0
 800b244:	4616      	mov	r6, r2
 800b246:	f7ff fcd5 	bl	800abf4 <_Balloc>
 800b24a:	4604      	mov	r4, r0
 800b24c:	b930      	cbnz	r0, 800b25c <__d2b+0x24>
 800b24e:	4602      	mov	r2, r0
 800b250:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <__d2b+0xac>)
 800b252:	4825      	ldr	r0, [pc, #148]	; (800b2e8 <__d2b+0xb0>)
 800b254:	f240 310f 	movw	r1, #783	; 0x30f
 800b258:	f7fe fde8 	bl	8009e2c <__assert_func>
 800b25c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b264:	bb2d      	cbnz	r5, 800b2b2 <__d2b+0x7a>
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	f1b8 0300 	subs.w	r3, r8, #0
 800b26c:	d026      	beq.n	800b2bc <__d2b+0x84>
 800b26e:	4668      	mov	r0, sp
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	f7ff fd87 	bl	800ad84 <__lo0bits>
 800b276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b27a:	b1e8      	cbz	r0, 800b2b8 <__d2b+0x80>
 800b27c:	f1c0 0320 	rsb	r3, r0, #32
 800b280:	fa02 f303 	lsl.w	r3, r2, r3
 800b284:	430b      	orrs	r3, r1
 800b286:	40c2      	lsrs	r2, r0
 800b288:	6163      	str	r3, [r4, #20]
 800b28a:	9201      	str	r2, [sp, #4]
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	61a3      	str	r3, [r4, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	bf14      	ite	ne
 800b294:	2202      	movne	r2, #2
 800b296:	2201      	moveq	r2, #1
 800b298:	6122      	str	r2, [r4, #16]
 800b29a:	b1bd      	cbz	r5, 800b2cc <__d2b+0x94>
 800b29c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2a0:	4405      	add	r5, r0
 800b2a2:	603d      	str	r5, [r7, #0]
 800b2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a8:	6030      	str	r0, [r6, #0]
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	b003      	add	sp, #12
 800b2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b6:	e7d6      	b.n	800b266 <__d2b+0x2e>
 800b2b8:	6161      	str	r1, [r4, #20]
 800b2ba:	e7e7      	b.n	800b28c <__d2b+0x54>
 800b2bc:	a801      	add	r0, sp, #4
 800b2be:	f7ff fd61 	bl	800ad84 <__lo0bits>
 800b2c2:	9b01      	ldr	r3, [sp, #4]
 800b2c4:	6163      	str	r3, [r4, #20]
 800b2c6:	3020      	adds	r0, #32
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	e7e5      	b.n	800b298 <__d2b+0x60>
 800b2cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2d4:	6038      	str	r0, [r7, #0]
 800b2d6:	6918      	ldr	r0, [r3, #16]
 800b2d8:	f7ff fd34 	bl	800ad44 <__hi0bits>
 800b2dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2e0:	e7e2      	b.n	800b2a8 <__d2b+0x70>
 800b2e2:	bf00      	nop
 800b2e4:	08017afc 	.word	0x08017afc
 800b2e8:	08017b0d 	.word	0x08017b0d

0800b2ec <_malloc_usable_size_r>:
 800b2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f0:	1f18      	subs	r0, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bfbc      	itt	lt
 800b2f6:	580b      	ldrlt	r3, [r1, r0]
 800b2f8:	18c0      	addlt	r0, r0, r3
 800b2fa:	4770      	bx	lr

0800b2fc <__ssputs_r>:
 800b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	688e      	ldr	r6, [r1, #8]
 800b302:	461f      	mov	r7, r3
 800b304:	42be      	cmp	r6, r7
 800b306:	680b      	ldr	r3, [r1, #0]
 800b308:	4682      	mov	sl, r0
 800b30a:	460c      	mov	r4, r1
 800b30c:	4690      	mov	r8, r2
 800b30e:	d82c      	bhi.n	800b36a <__ssputs_r+0x6e>
 800b310:	898a      	ldrh	r2, [r1, #12]
 800b312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b316:	d026      	beq.n	800b366 <__ssputs_r+0x6a>
 800b318:	6965      	ldr	r5, [r4, #20]
 800b31a:	6909      	ldr	r1, [r1, #16]
 800b31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b320:	eba3 0901 	sub.w	r9, r3, r1
 800b324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b328:	1c7b      	adds	r3, r7, #1
 800b32a:	444b      	add	r3, r9
 800b32c:	106d      	asrs	r5, r5, #1
 800b32e:	429d      	cmp	r5, r3
 800b330:	bf38      	it	cc
 800b332:	461d      	movcc	r5, r3
 800b334:	0553      	lsls	r3, r2, #21
 800b336:	d527      	bpl.n	800b388 <__ssputs_r+0x8c>
 800b338:	4629      	mov	r1, r5
 800b33a:	f7fd fd51 	bl	8008de0 <_malloc_r>
 800b33e:	4606      	mov	r6, r0
 800b340:	b360      	cbz	r0, 800b39c <__ssputs_r+0xa0>
 800b342:	6921      	ldr	r1, [r4, #16]
 800b344:	464a      	mov	r2, r9
 800b346:	f7fe fd62 	bl	8009e0e <memcpy>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	6126      	str	r6, [r4, #16]
 800b358:	6165      	str	r5, [r4, #20]
 800b35a:	444e      	add	r6, r9
 800b35c:	eba5 0509 	sub.w	r5, r5, r9
 800b360:	6026      	str	r6, [r4, #0]
 800b362:	60a5      	str	r5, [r4, #8]
 800b364:	463e      	mov	r6, r7
 800b366:	42be      	cmp	r6, r7
 800b368:	d900      	bls.n	800b36c <__ssputs_r+0x70>
 800b36a:	463e      	mov	r6, r7
 800b36c:	6820      	ldr	r0, [r4, #0]
 800b36e:	4632      	mov	r2, r6
 800b370:	4641      	mov	r1, r8
 800b372:	f000 f92d 	bl	800b5d0 <memmove>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	1b9b      	subs	r3, r3, r6
 800b37a:	60a3      	str	r3, [r4, #8]
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	4433      	add	r3, r6
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	2000      	movs	r0, #0
 800b384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b388:	462a      	mov	r2, r5
 800b38a:	f7fd fe21 	bl	8008fd0 <_realloc_r>
 800b38e:	4606      	mov	r6, r0
 800b390:	2800      	cmp	r0, #0
 800b392:	d1e0      	bne.n	800b356 <__ssputs_r+0x5a>
 800b394:	6921      	ldr	r1, [r4, #16]
 800b396:	4650      	mov	r0, sl
 800b398:	f7ff fbe0 	bl	800ab5c <_free_r>
 800b39c:	230c      	movs	r3, #12
 800b39e:	f8ca 3000 	str.w	r3, [sl]
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	e7e9      	b.n	800b384 <__ssputs_r+0x88>

0800b3b0 <_svfiprintf_r>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	4698      	mov	r8, r3
 800b3b6:	898b      	ldrh	r3, [r1, #12]
 800b3b8:	061b      	lsls	r3, r3, #24
 800b3ba:	b09d      	sub	sp, #116	; 0x74
 800b3bc:	4607      	mov	r7, r0
 800b3be:	460d      	mov	r5, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	d50e      	bpl.n	800b3e2 <_svfiprintf_r+0x32>
 800b3c4:	690b      	ldr	r3, [r1, #16]
 800b3c6:	b963      	cbnz	r3, 800b3e2 <_svfiprintf_r+0x32>
 800b3c8:	2140      	movs	r1, #64	; 0x40
 800b3ca:	f7fd fd09 	bl	8008de0 <_malloc_r>
 800b3ce:	6028      	str	r0, [r5, #0]
 800b3d0:	6128      	str	r0, [r5, #16]
 800b3d2:	b920      	cbnz	r0, 800b3de <_svfiprintf_r+0x2e>
 800b3d4:	230c      	movs	r3, #12
 800b3d6:	603b      	str	r3, [r7, #0]
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	e0d0      	b.n	800b580 <_svfiprintf_r+0x1d0>
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	616b      	str	r3, [r5, #20]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e6:	2320      	movs	r3, #32
 800b3e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f0:	2330      	movs	r3, #48	; 0x30
 800b3f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b598 <_svfiprintf_r+0x1e8>
 800b3f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3fa:	f04f 0901 	mov.w	r9, #1
 800b3fe:	4623      	mov	r3, r4
 800b400:	469a      	mov	sl, r3
 800b402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b406:	b10a      	cbz	r2, 800b40c <_svfiprintf_r+0x5c>
 800b408:	2a25      	cmp	r2, #37	; 0x25
 800b40a:	d1f9      	bne.n	800b400 <_svfiprintf_r+0x50>
 800b40c:	ebba 0b04 	subs.w	fp, sl, r4
 800b410:	d00b      	beq.n	800b42a <_svfiprintf_r+0x7a>
 800b412:	465b      	mov	r3, fp
 800b414:	4622      	mov	r2, r4
 800b416:	4629      	mov	r1, r5
 800b418:	4638      	mov	r0, r7
 800b41a:	f7ff ff6f 	bl	800b2fc <__ssputs_r>
 800b41e:	3001      	adds	r0, #1
 800b420:	f000 80a9 	beq.w	800b576 <_svfiprintf_r+0x1c6>
 800b424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b426:	445a      	add	r2, fp
 800b428:	9209      	str	r2, [sp, #36]	; 0x24
 800b42a:	f89a 3000 	ldrb.w	r3, [sl]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 80a1 	beq.w	800b576 <_svfiprintf_r+0x1c6>
 800b434:	2300      	movs	r3, #0
 800b436:	f04f 32ff 	mov.w	r2, #4294967295
 800b43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b43e:	f10a 0a01 	add.w	sl, sl, #1
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	9307      	str	r3, [sp, #28]
 800b446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b44a:	931a      	str	r3, [sp, #104]	; 0x68
 800b44c:	4654      	mov	r4, sl
 800b44e:	2205      	movs	r2, #5
 800b450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b454:	4850      	ldr	r0, [pc, #320]	; (800b598 <_svfiprintf_r+0x1e8>)
 800b456:	f7f4 febb 	bl	80001d0 <memchr>
 800b45a:	9a04      	ldr	r2, [sp, #16]
 800b45c:	b9d8      	cbnz	r0, 800b496 <_svfiprintf_r+0xe6>
 800b45e:	06d0      	lsls	r0, r2, #27
 800b460:	bf44      	itt	mi
 800b462:	2320      	movmi	r3, #32
 800b464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b468:	0711      	lsls	r1, r2, #28
 800b46a:	bf44      	itt	mi
 800b46c:	232b      	movmi	r3, #43	; 0x2b
 800b46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b472:	f89a 3000 	ldrb.w	r3, [sl]
 800b476:	2b2a      	cmp	r3, #42	; 0x2a
 800b478:	d015      	beq.n	800b4a6 <_svfiprintf_r+0xf6>
 800b47a:	9a07      	ldr	r2, [sp, #28]
 800b47c:	4654      	mov	r4, sl
 800b47e:	2000      	movs	r0, #0
 800b480:	f04f 0c0a 	mov.w	ip, #10
 800b484:	4621      	mov	r1, r4
 800b486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b48a:	3b30      	subs	r3, #48	; 0x30
 800b48c:	2b09      	cmp	r3, #9
 800b48e:	d94d      	bls.n	800b52c <_svfiprintf_r+0x17c>
 800b490:	b1b0      	cbz	r0, 800b4c0 <_svfiprintf_r+0x110>
 800b492:	9207      	str	r2, [sp, #28]
 800b494:	e014      	b.n	800b4c0 <_svfiprintf_r+0x110>
 800b496:	eba0 0308 	sub.w	r3, r0, r8
 800b49a:	fa09 f303 	lsl.w	r3, r9, r3
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	46a2      	mov	sl, r4
 800b4a4:	e7d2      	b.n	800b44c <_svfiprintf_r+0x9c>
 800b4a6:	9b03      	ldr	r3, [sp, #12]
 800b4a8:	1d19      	adds	r1, r3, #4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	9103      	str	r1, [sp, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bfbb      	ittet	lt
 800b4b2:	425b      	neglt	r3, r3
 800b4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4b8:	9307      	strge	r3, [sp, #28]
 800b4ba:	9307      	strlt	r3, [sp, #28]
 800b4bc:	bfb8      	it	lt
 800b4be:	9204      	strlt	r2, [sp, #16]
 800b4c0:	7823      	ldrb	r3, [r4, #0]
 800b4c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b4c4:	d10c      	bne.n	800b4e0 <_svfiprintf_r+0x130>
 800b4c6:	7863      	ldrb	r3, [r4, #1]
 800b4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ca:	d134      	bne.n	800b536 <_svfiprintf_r+0x186>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	9203      	str	r2, [sp, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfb8      	it	lt
 800b4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4dc:	3402      	adds	r4, #2
 800b4de:	9305      	str	r3, [sp, #20]
 800b4e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b5a8 <_svfiprintf_r+0x1f8>
 800b4e4:	7821      	ldrb	r1, [r4, #0]
 800b4e6:	2203      	movs	r2, #3
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	f7f4 fe71 	bl	80001d0 <memchr>
 800b4ee:	b138      	cbz	r0, 800b500 <_svfiprintf_r+0x150>
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	eba0 000a 	sub.w	r0, r0, sl
 800b4f6:	2240      	movs	r2, #64	; 0x40
 800b4f8:	4082      	lsls	r2, r0
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	9304      	str	r3, [sp, #16]
 800b500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b504:	4825      	ldr	r0, [pc, #148]	; (800b59c <_svfiprintf_r+0x1ec>)
 800b506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b50a:	2206      	movs	r2, #6
 800b50c:	f7f4 fe60 	bl	80001d0 <memchr>
 800b510:	2800      	cmp	r0, #0
 800b512:	d038      	beq.n	800b586 <_svfiprintf_r+0x1d6>
 800b514:	4b22      	ldr	r3, [pc, #136]	; (800b5a0 <_svfiprintf_r+0x1f0>)
 800b516:	bb1b      	cbnz	r3, 800b560 <_svfiprintf_r+0x1b0>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	3307      	adds	r3, #7
 800b51c:	f023 0307 	bic.w	r3, r3, #7
 800b520:	3308      	adds	r3, #8
 800b522:	9303      	str	r3, [sp, #12]
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	4433      	add	r3, r6
 800b528:	9309      	str	r3, [sp, #36]	; 0x24
 800b52a:	e768      	b.n	800b3fe <_svfiprintf_r+0x4e>
 800b52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b530:	460c      	mov	r4, r1
 800b532:	2001      	movs	r0, #1
 800b534:	e7a6      	b.n	800b484 <_svfiprintf_r+0xd4>
 800b536:	2300      	movs	r3, #0
 800b538:	3401      	adds	r4, #1
 800b53a:	9305      	str	r3, [sp, #20]
 800b53c:	4619      	mov	r1, r3
 800b53e:	f04f 0c0a 	mov.w	ip, #10
 800b542:	4620      	mov	r0, r4
 800b544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b548:	3a30      	subs	r2, #48	; 0x30
 800b54a:	2a09      	cmp	r2, #9
 800b54c:	d903      	bls.n	800b556 <_svfiprintf_r+0x1a6>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0c6      	beq.n	800b4e0 <_svfiprintf_r+0x130>
 800b552:	9105      	str	r1, [sp, #20]
 800b554:	e7c4      	b.n	800b4e0 <_svfiprintf_r+0x130>
 800b556:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55a:	4604      	mov	r4, r0
 800b55c:	2301      	movs	r3, #1
 800b55e:	e7f0      	b.n	800b542 <_svfiprintf_r+0x192>
 800b560:	ab03      	add	r3, sp, #12
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	462a      	mov	r2, r5
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <_svfiprintf_r+0x1f4>)
 800b568:	a904      	add	r1, sp, #16
 800b56a:	4638      	mov	r0, r7
 800b56c:	f7fd fe00 	bl	8009170 <_printf_float>
 800b570:	1c42      	adds	r2, r0, #1
 800b572:	4606      	mov	r6, r0
 800b574:	d1d6      	bne.n	800b524 <_svfiprintf_r+0x174>
 800b576:	89ab      	ldrh	r3, [r5, #12]
 800b578:	065b      	lsls	r3, r3, #25
 800b57a:	f53f af2d 	bmi.w	800b3d8 <_svfiprintf_r+0x28>
 800b57e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b580:	b01d      	add	sp, #116	; 0x74
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	ab03      	add	r3, sp, #12
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	462a      	mov	r2, r5
 800b58c:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <_svfiprintf_r+0x1f4>)
 800b58e:	a904      	add	r1, sp, #16
 800b590:	4638      	mov	r0, r7
 800b592:	f7fe f891 	bl	80096b8 <_printf_i>
 800b596:	e7eb      	b.n	800b570 <_svfiprintf_r+0x1c0>
 800b598:	08017c64 	.word	0x08017c64
 800b59c:	08017c6e 	.word	0x08017c6e
 800b5a0:	08009171 	.word	0x08009171
 800b5a4:	0800b2fd 	.word	0x0800b2fd
 800b5a8:	08017c6a 	.word	0x08017c6a

0800b5ac <fiprintf>:
 800b5ac:	b40e      	push	{r1, r2, r3}
 800b5ae:	b503      	push	{r0, r1, lr}
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	4805      	ldr	r0, [pc, #20]	; (800b5cc <fiprintf+0x20>)
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	6800      	ldr	r0, [r0, #0]
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	f000 f887 	bl	800b6d0 <_vfiprintf_r>
 800b5c2:	b002      	add	sp, #8
 800b5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c8:	b003      	add	sp, #12
 800b5ca:	4770      	bx	lr
 800b5cc:	20000be8 	.word	0x20000be8

0800b5d0 <memmove>:
 800b5d0:	4288      	cmp	r0, r1
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	eb01 0402 	add.w	r4, r1, r2
 800b5d8:	d902      	bls.n	800b5e0 <memmove+0x10>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4623      	mov	r3, r4
 800b5de:	d807      	bhi.n	800b5f0 <memmove+0x20>
 800b5e0:	1e43      	subs	r3, r0, #1
 800b5e2:	42a1      	cmp	r1, r4
 800b5e4:	d008      	beq.n	800b5f8 <memmove+0x28>
 800b5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ee:	e7f8      	b.n	800b5e2 <memmove+0x12>
 800b5f0:	4402      	add	r2, r0
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	428a      	cmp	r2, r1
 800b5f6:	d100      	bne.n	800b5fa <memmove+0x2a>
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b602:	e7f7      	b.n	800b5f4 <memmove+0x24>

0800b604 <abort>:
 800b604:	b508      	push	{r3, lr}
 800b606:	2006      	movs	r0, #6
 800b608:	f000 fa3a 	bl	800ba80 <raise>
 800b60c:	2001      	movs	r0, #1
 800b60e:	f7f5 fe49 	bl	80012a4 <_exit>

0800b612 <_calloc_r>:
 800b612:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b614:	fba1 2402 	umull	r2, r4, r1, r2
 800b618:	b94c      	cbnz	r4, 800b62e <_calloc_r+0x1c>
 800b61a:	4611      	mov	r1, r2
 800b61c:	9201      	str	r2, [sp, #4]
 800b61e:	f7fd fbdf 	bl	8008de0 <_malloc_r>
 800b622:	9a01      	ldr	r2, [sp, #4]
 800b624:	4605      	mov	r5, r0
 800b626:	b930      	cbnz	r0, 800b636 <_calloc_r+0x24>
 800b628:	4628      	mov	r0, r5
 800b62a:	b003      	add	sp, #12
 800b62c:	bd30      	pop	{r4, r5, pc}
 800b62e:	220c      	movs	r2, #12
 800b630:	6002      	str	r2, [r0, #0]
 800b632:	2500      	movs	r5, #0
 800b634:	e7f8      	b.n	800b628 <_calloc_r+0x16>
 800b636:	4621      	mov	r1, r4
 800b638:	f7fe fb47 	bl	8009cca <memset>
 800b63c:	e7f4      	b.n	800b628 <_calloc_r+0x16>

0800b63e <__ascii_mbtowc>:
 800b63e:	b082      	sub	sp, #8
 800b640:	b901      	cbnz	r1, 800b644 <__ascii_mbtowc+0x6>
 800b642:	a901      	add	r1, sp, #4
 800b644:	b142      	cbz	r2, 800b658 <__ascii_mbtowc+0x1a>
 800b646:	b14b      	cbz	r3, 800b65c <__ascii_mbtowc+0x1e>
 800b648:	7813      	ldrb	r3, [r2, #0]
 800b64a:	600b      	str	r3, [r1, #0]
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	1e10      	subs	r0, r2, #0
 800b650:	bf18      	it	ne
 800b652:	2001      	movne	r0, #1
 800b654:	b002      	add	sp, #8
 800b656:	4770      	bx	lr
 800b658:	4610      	mov	r0, r2
 800b65a:	e7fb      	b.n	800b654 <__ascii_mbtowc+0x16>
 800b65c:	f06f 0001 	mvn.w	r0, #1
 800b660:	e7f8      	b.n	800b654 <__ascii_mbtowc+0x16>

0800b662 <__ascii_wctomb>:
 800b662:	b149      	cbz	r1, 800b678 <__ascii_wctomb+0x16>
 800b664:	2aff      	cmp	r2, #255	; 0xff
 800b666:	bf85      	ittet	hi
 800b668:	238a      	movhi	r3, #138	; 0x8a
 800b66a:	6003      	strhi	r3, [r0, #0]
 800b66c:	700a      	strbls	r2, [r1, #0]
 800b66e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b672:	bf98      	it	ls
 800b674:	2001      	movls	r0, #1
 800b676:	4770      	bx	lr
 800b678:	4608      	mov	r0, r1
 800b67a:	4770      	bx	lr

0800b67c <__sfputc_r>:
 800b67c:	6893      	ldr	r3, [r2, #8]
 800b67e:	3b01      	subs	r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	b410      	push	{r4}
 800b684:	6093      	str	r3, [r2, #8]
 800b686:	da08      	bge.n	800b69a <__sfputc_r+0x1e>
 800b688:	6994      	ldr	r4, [r2, #24]
 800b68a:	42a3      	cmp	r3, r4
 800b68c:	db01      	blt.n	800b692 <__sfputc_r+0x16>
 800b68e:	290a      	cmp	r1, #10
 800b690:	d103      	bne.n	800b69a <__sfputc_r+0x1e>
 800b692:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b696:	f000 b935 	b.w	800b904 <__swbuf_r>
 800b69a:	6813      	ldr	r3, [r2, #0]
 800b69c:	1c58      	adds	r0, r3, #1
 800b69e:	6010      	str	r0, [r2, #0]
 800b6a0:	7019      	strb	r1, [r3, #0]
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <__sfputs_r>:
 800b6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	4614      	mov	r4, r2
 800b6b2:	18d5      	adds	r5, r2, r3
 800b6b4:	42ac      	cmp	r4, r5
 800b6b6:	d101      	bne.n	800b6bc <__sfputs_r+0x12>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e007      	b.n	800b6cc <__sfputs_r+0x22>
 800b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c0:	463a      	mov	r2, r7
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff ffda 	bl	800b67c <__sfputc_r>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d1f3      	bne.n	800b6b4 <__sfputs_r+0xa>
 800b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6d0 <_vfiprintf_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	b09d      	sub	sp, #116	; 0x74
 800b6d8:	4614      	mov	r4, r2
 800b6da:	4698      	mov	r8, r3
 800b6dc:	4606      	mov	r6, r0
 800b6de:	b118      	cbz	r0, 800b6e8 <_vfiprintf_r+0x18>
 800b6e0:	6a03      	ldr	r3, [r0, #32]
 800b6e2:	b90b      	cbnz	r3, 800b6e8 <_vfiprintf_r+0x18>
 800b6e4:	f7fe fa58 	bl	8009b98 <__sinit>
 800b6e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ea:	07d9      	lsls	r1, r3, #31
 800b6ec:	d405      	bmi.n	800b6fa <_vfiprintf_r+0x2a>
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	059a      	lsls	r2, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_vfiprintf_r+0x2a>
 800b6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f6:	f7fe fb88 	bl	8009e0a <__retarget_lock_acquire_recursive>
 800b6fa:	89ab      	ldrh	r3, [r5, #12]
 800b6fc:	071b      	lsls	r3, r3, #28
 800b6fe:	d501      	bpl.n	800b704 <_vfiprintf_r+0x34>
 800b700:	692b      	ldr	r3, [r5, #16]
 800b702:	b99b      	cbnz	r3, 800b72c <_vfiprintf_r+0x5c>
 800b704:	4629      	mov	r1, r5
 800b706:	4630      	mov	r0, r6
 800b708:	f000 f93a 	bl	800b980 <__swsetup_r>
 800b70c:	b170      	cbz	r0, 800b72c <_vfiprintf_r+0x5c>
 800b70e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b710:	07dc      	lsls	r4, r3, #31
 800b712:	d504      	bpl.n	800b71e <_vfiprintf_r+0x4e>
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	b01d      	add	sp, #116	; 0x74
 800b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	0598      	lsls	r0, r3, #22
 800b722:	d4f7      	bmi.n	800b714 <_vfiprintf_r+0x44>
 800b724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b726:	f7fe fb71 	bl	8009e0c <__retarget_lock_release_recursive>
 800b72a:	e7f3      	b.n	800b714 <_vfiprintf_r+0x44>
 800b72c:	2300      	movs	r3, #0
 800b72e:	9309      	str	r3, [sp, #36]	; 0x24
 800b730:	2320      	movs	r3, #32
 800b732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b736:	f8cd 800c 	str.w	r8, [sp, #12]
 800b73a:	2330      	movs	r3, #48	; 0x30
 800b73c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b8f0 <_vfiprintf_r+0x220>
 800b740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b744:	f04f 0901 	mov.w	r9, #1
 800b748:	4623      	mov	r3, r4
 800b74a:	469a      	mov	sl, r3
 800b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b750:	b10a      	cbz	r2, 800b756 <_vfiprintf_r+0x86>
 800b752:	2a25      	cmp	r2, #37	; 0x25
 800b754:	d1f9      	bne.n	800b74a <_vfiprintf_r+0x7a>
 800b756:	ebba 0b04 	subs.w	fp, sl, r4
 800b75a:	d00b      	beq.n	800b774 <_vfiprintf_r+0xa4>
 800b75c:	465b      	mov	r3, fp
 800b75e:	4622      	mov	r2, r4
 800b760:	4629      	mov	r1, r5
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ffa1 	bl	800b6aa <__sfputs_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	f000 80a9 	beq.w	800b8c0 <_vfiprintf_r+0x1f0>
 800b76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b770:	445a      	add	r2, fp
 800b772:	9209      	str	r2, [sp, #36]	; 0x24
 800b774:	f89a 3000 	ldrb.w	r3, [sl]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 80a1 	beq.w	800b8c0 <_vfiprintf_r+0x1f0>
 800b77e:	2300      	movs	r3, #0
 800b780:	f04f 32ff 	mov.w	r2, #4294967295
 800b784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b788:	f10a 0a01 	add.w	sl, sl, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	9307      	str	r3, [sp, #28]
 800b790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b794:	931a      	str	r3, [sp, #104]	; 0x68
 800b796:	4654      	mov	r4, sl
 800b798:	2205      	movs	r2, #5
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	4854      	ldr	r0, [pc, #336]	; (800b8f0 <_vfiprintf_r+0x220>)
 800b7a0:	f7f4 fd16 	bl	80001d0 <memchr>
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	b9d8      	cbnz	r0, 800b7e0 <_vfiprintf_r+0x110>
 800b7a8:	06d1      	lsls	r1, r2, #27
 800b7aa:	bf44      	itt	mi
 800b7ac:	2320      	movmi	r3, #32
 800b7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b2:	0713      	lsls	r3, r2, #28
 800b7b4:	bf44      	itt	mi
 800b7b6:	232b      	movmi	r3, #43	; 0x2b
 800b7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c2:	d015      	beq.n	800b7f0 <_vfiprintf_r+0x120>
 800b7c4:	9a07      	ldr	r2, [sp, #28]
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d4:	3b30      	subs	r3, #48	; 0x30
 800b7d6:	2b09      	cmp	r3, #9
 800b7d8:	d94d      	bls.n	800b876 <_vfiprintf_r+0x1a6>
 800b7da:	b1b0      	cbz	r0, 800b80a <_vfiprintf_r+0x13a>
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	e014      	b.n	800b80a <_vfiprintf_r+0x13a>
 800b7e0:	eba0 0308 	sub.w	r3, r0, r8
 800b7e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	46a2      	mov	sl, r4
 800b7ee:	e7d2      	b.n	800b796 <_vfiprintf_r+0xc6>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	1d19      	adds	r1, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9103      	str	r1, [sp, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bfbb      	ittet	lt
 800b7fc:	425b      	neglt	r3, r3
 800b7fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b802:	9307      	strge	r3, [sp, #28]
 800b804:	9307      	strlt	r3, [sp, #28]
 800b806:	bfb8      	it	lt
 800b808:	9204      	strlt	r2, [sp, #16]
 800b80a:	7823      	ldrb	r3, [r4, #0]
 800b80c:	2b2e      	cmp	r3, #46	; 0x2e
 800b80e:	d10c      	bne.n	800b82a <_vfiprintf_r+0x15a>
 800b810:	7863      	ldrb	r3, [r4, #1]
 800b812:	2b2a      	cmp	r3, #42	; 0x2a
 800b814:	d134      	bne.n	800b880 <_vfiprintf_r+0x1b0>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d1a      	adds	r2, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9203      	str	r2, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfb8      	it	lt
 800b822:	f04f 33ff 	movlt.w	r3, #4294967295
 800b826:	3402      	adds	r4, #2
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b900 <_vfiprintf_r+0x230>
 800b82e:	7821      	ldrb	r1, [r4, #0]
 800b830:	2203      	movs	r2, #3
 800b832:	4650      	mov	r0, sl
 800b834:	f7f4 fccc 	bl	80001d0 <memchr>
 800b838:	b138      	cbz	r0, 800b84a <_vfiprintf_r+0x17a>
 800b83a:	9b04      	ldr	r3, [sp, #16]
 800b83c:	eba0 000a 	sub.w	r0, r0, sl
 800b840:	2240      	movs	r2, #64	; 0x40
 800b842:	4082      	lsls	r2, r0
 800b844:	4313      	orrs	r3, r2
 800b846:	3401      	adds	r4, #1
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84e:	4829      	ldr	r0, [pc, #164]	; (800b8f4 <_vfiprintf_r+0x224>)
 800b850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b854:	2206      	movs	r2, #6
 800b856:	f7f4 fcbb 	bl	80001d0 <memchr>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d03f      	beq.n	800b8de <_vfiprintf_r+0x20e>
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <_vfiprintf_r+0x228>)
 800b860:	bb1b      	cbnz	r3, 800b8aa <_vfiprintf_r+0x1da>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	3307      	adds	r3, #7
 800b866:	f023 0307 	bic.w	r3, r3, #7
 800b86a:	3308      	adds	r3, #8
 800b86c:	9303      	str	r3, [sp, #12]
 800b86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b870:	443b      	add	r3, r7
 800b872:	9309      	str	r3, [sp, #36]	; 0x24
 800b874:	e768      	b.n	800b748 <_vfiprintf_r+0x78>
 800b876:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87a:	460c      	mov	r4, r1
 800b87c:	2001      	movs	r0, #1
 800b87e:	e7a6      	b.n	800b7ce <_vfiprintf_r+0xfe>
 800b880:	2300      	movs	r3, #0
 800b882:	3401      	adds	r4, #1
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	4619      	mov	r1, r3
 800b888:	f04f 0c0a 	mov.w	ip, #10
 800b88c:	4620      	mov	r0, r4
 800b88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b892:	3a30      	subs	r2, #48	; 0x30
 800b894:	2a09      	cmp	r2, #9
 800b896:	d903      	bls.n	800b8a0 <_vfiprintf_r+0x1d0>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d0c6      	beq.n	800b82a <_vfiprintf_r+0x15a>
 800b89c:	9105      	str	r1, [sp, #20]
 800b89e:	e7c4      	b.n	800b82a <_vfiprintf_r+0x15a>
 800b8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e7f0      	b.n	800b88c <_vfiprintf_r+0x1bc>
 800b8aa:	ab03      	add	r3, sp, #12
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	462a      	mov	r2, r5
 800b8b0:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <_vfiprintf_r+0x22c>)
 800b8b2:	a904      	add	r1, sp, #16
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f7fd fc5b 	bl	8009170 <_printf_float>
 800b8ba:	4607      	mov	r7, r0
 800b8bc:	1c78      	adds	r0, r7, #1
 800b8be:	d1d6      	bne.n	800b86e <_vfiprintf_r+0x19e>
 800b8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c2:	07d9      	lsls	r1, r3, #31
 800b8c4:	d405      	bmi.n	800b8d2 <_vfiprintf_r+0x202>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	059a      	lsls	r2, r3, #22
 800b8ca:	d402      	bmi.n	800b8d2 <_vfiprintf_r+0x202>
 800b8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ce:	f7fe fa9d 	bl	8009e0c <__retarget_lock_release_recursive>
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	065b      	lsls	r3, r3, #25
 800b8d6:	f53f af1d 	bmi.w	800b714 <_vfiprintf_r+0x44>
 800b8da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8dc:	e71c      	b.n	800b718 <_vfiprintf_r+0x48>
 800b8de:	ab03      	add	r3, sp, #12
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <_vfiprintf_r+0x22c>)
 800b8e6:	a904      	add	r1, sp, #16
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7fd fee5 	bl	80096b8 <_printf_i>
 800b8ee:	e7e4      	b.n	800b8ba <_vfiprintf_r+0x1ea>
 800b8f0:	08017c64 	.word	0x08017c64
 800b8f4:	08017c6e 	.word	0x08017c6e
 800b8f8:	08009171 	.word	0x08009171
 800b8fc:	0800b6ab 	.word	0x0800b6ab
 800b900:	08017c6a 	.word	0x08017c6a

0800b904 <__swbuf_r>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	460e      	mov	r6, r1
 800b908:	4614      	mov	r4, r2
 800b90a:	4605      	mov	r5, r0
 800b90c:	b118      	cbz	r0, 800b916 <__swbuf_r+0x12>
 800b90e:	6a03      	ldr	r3, [r0, #32]
 800b910:	b90b      	cbnz	r3, 800b916 <__swbuf_r+0x12>
 800b912:	f7fe f941 	bl	8009b98 <__sinit>
 800b916:	69a3      	ldr	r3, [r4, #24]
 800b918:	60a3      	str	r3, [r4, #8]
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	071a      	lsls	r2, r3, #28
 800b91e:	d525      	bpl.n	800b96c <__swbuf_r+0x68>
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	b31b      	cbz	r3, 800b96c <__swbuf_r+0x68>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	6922      	ldr	r2, [r4, #16]
 800b928:	1a98      	subs	r0, r3, r2
 800b92a:	6963      	ldr	r3, [r4, #20]
 800b92c:	b2f6      	uxtb	r6, r6
 800b92e:	4283      	cmp	r3, r0
 800b930:	4637      	mov	r7, r6
 800b932:	dc04      	bgt.n	800b93e <__swbuf_r+0x3a>
 800b934:	4621      	mov	r1, r4
 800b936:	4628      	mov	r0, r5
 800b938:	f7fe f866 	bl	8009a08 <_fflush_r>
 800b93c:	b9e0      	cbnz	r0, 800b978 <__swbuf_r+0x74>
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	3b01      	subs	r3, #1
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	701e      	strb	r6, [r3, #0]
 800b94c:	6962      	ldr	r2, [r4, #20]
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	429a      	cmp	r2, r3
 800b952:	d004      	beq.n	800b95e <__swbuf_r+0x5a>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	07db      	lsls	r3, r3, #31
 800b958:	d506      	bpl.n	800b968 <__swbuf_r+0x64>
 800b95a:	2e0a      	cmp	r6, #10
 800b95c:	d104      	bne.n	800b968 <__swbuf_r+0x64>
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f7fe f851 	bl	8009a08 <_fflush_r>
 800b966:	b938      	cbnz	r0, 800b978 <__swbuf_r+0x74>
 800b968:	4638      	mov	r0, r7
 800b96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f806 	bl	800b980 <__swsetup_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0d5      	beq.n	800b924 <__swbuf_r+0x20>
 800b978:	f04f 37ff 	mov.w	r7, #4294967295
 800b97c:	e7f4      	b.n	800b968 <__swbuf_r+0x64>
	...

0800b980 <__swsetup_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <__swsetup_r+0xac>)
 800b984:	4605      	mov	r5, r0
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	460c      	mov	r4, r1
 800b98a:	b118      	cbz	r0, 800b994 <__swsetup_r+0x14>
 800b98c:	6a03      	ldr	r3, [r0, #32]
 800b98e:	b90b      	cbnz	r3, 800b994 <__swsetup_r+0x14>
 800b990:	f7fe f902 	bl	8009b98 <__sinit>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b99a:	0718      	lsls	r0, r3, #28
 800b99c:	d422      	bmi.n	800b9e4 <__swsetup_r+0x64>
 800b99e:	06d9      	lsls	r1, r3, #27
 800b9a0:	d407      	bmi.n	800b9b2 <__swsetup_r+0x32>
 800b9a2:	2309      	movs	r3, #9
 800b9a4:	602b      	str	r3, [r5, #0]
 800b9a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	e034      	b.n	800ba1c <__swsetup_r+0x9c>
 800b9b2:	0758      	lsls	r0, r3, #29
 800b9b4:	d512      	bpl.n	800b9dc <__swsetup_r+0x5c>
 800b9b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b8:	b141      	cbz	r1, 800b9cc <__swsetup_r+0x4c>
 800b9ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9be:	4299      	cmp	r1, r3
 800b9c0:	d002      	beq.n	800b9c8 <__swsetup_r+0x48>
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f7ff f8ca 	bl	800ab5c <_free_r>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	6363      	str	r3, [r4, #52]	; 0x34
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f043 0308 	orr.w	r3, r3, #8
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	b94b      	cbnz	r3, 800b9fc <__swsetup_r+0x7c>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f2:	d003      	beq.n	800b9fc <__swsetup_r+0x7c>
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f884 	bl	800bb04 <__smakebuf_r>
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba02:	f010 0301 	ands.w	r3, r0, #1
 800ba06:	d00a      	beq.n	800ba1e <__swsetup_r+0x9e>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6963      	ldr	r3, [r4, #20]
 800ba0e:	425b      	negs	r3, r3
 800ba10:	61a3      	str	r3, [r4, #24]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	b943      	cbnz	r3, 800ba28 <__swsetup_r+0xa8>
 800ba16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba1a:	d1c4      	bne.n	800b9a6 <__swsetup_r+0x26>
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	0781      	lsls	r1, r0, #30
 800ba20:	bf58      	it	pl
 800ba22:	6963      	ldrpl	r3, [r4, #20]
 800ba24:	60a3      	str	r3, [r4, #8]
 800ba26:	e7f4      	b.n	800ba12 <__swsetup_r+0x92>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7f7      	b.n	800ba1c <__swsetup_r+0x9c>
 800ba2c:	20000be8 	.word	0x20000be8

0800ba30 <_raise_r>:
 800ba30:	291f      	cmp	r1, #31
 800ba32:	b538      	push	{r3, r4, r5, lr}
 800ba34:	4604      	mov	r4, r0
 800ba36:	460d      	mov	r5, r1
 800ba38:	d904      	bls.n	800ba44 <_raise_r+0x14>
 800ba3a:	2316      	movs	r3, #22
 800ba3c:	6003      	str	r3, [r0, #0]
 800ba3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba46:	b112      	cbz	r2, 800ba4e <_raise_r+0x1e>
 800ba48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba4c:	b94b      	cbnz	r3, 800ba62 <_raise_r+0x32>
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 f830 	bl	800bab4 <_getpid_r>
 800ba54:	462a      	mov	r2, r5
 800ba56:	4601      	mov	r1, r0
 800ba58:	4620      	mov	r0, r4
 800ba5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba5e:	f000 b817 	b.w	800ba90 <_kill_r>
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d00a      	beq.n	800ba7c <_raise_r+0x4c>
 800ba66:	1c59      	adds	r1, r3, #1
 800ba68:	d103      	bne.n	800ba72 <_raise_r+0x42>
 800ba6a:	2316      	movs	r3, #22
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	2001      	movs	r0, #1
 800ba70:	e7e7      	b.n	800ba42 <_raise_r+0x12>
 800ba72:	2400      	movs	r4, #0
 800ba74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba78:	4628      	mov	r0, r5
 800ba7a:	4798      	blx	r3
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	e7e0      	b.n	800ba42 <_raise_r+0x12>

0800ba80 <raise>:
 800ba80:	4b02      	ldr	r3, [pc, #8]	; (800ba8c <raise+0xc>)
 800ba82:	4601      	mov	r1, r0
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	f7ff bfd3 	b.w	800ba30 <_raise_r>
 800ba8a:	bf00      	nop
 800ba8c:	20000be8 	.word	0x20000be8

0800ba90 <_kill_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	; (800bab0 <_kill_r+0x20>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	4604      	mov	r4, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	602b      	str	r3, [r5, #0]
 800ba9e:	f7f5 fbf9 	bl	8001294 <_kill>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d102      	bne.n	800baac <_kill_r+0x1c>
 800baa6:	682b      	ldr	r3, [r5, #0]
 800baa8:	b103      	cbz	r3, 800baac <_kill_r+0x1c>
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	20001790 	.word	0x20001790

0800bab4 <_getpid_r>:
 800bab4:	f7f5 bbec 	b.w	8001290 <_getpid>

0800bab8 <__swhatbuf_r>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	460c      	mov	r4, r1
 800babc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac0:	2900      	cmp	r1, #0
 800bac2:	b096      	sub	sp, #88	; 0x58
 800bac4:	4615      	mov	r5, r2
 800bac6:	461e      	mov	r6, r3
 800bac8:	da0d      	bge.n	800bae6 <__swhatbuf_r+0x2e>
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bad0:	f04f 0100 	mov.w	r1, #0
 800bad4:	bf0c      	ite	eq
 800bad6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bada:	2340      	movne	r3, #64	; 0x40
 800badc:	2000      	movs	r0, #0
 800bade:	6031      	str	r1, [r6, #0]
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	b016      	add	sp, #88	; 0x58
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	466a      	mov	r2, sp
 800bae8:	f000 f848 	bl	800bb7c <_fstat_r>
 800baec:	2800      	cmp	r0, #0
 800baee:	dbec      	blt.n	800baca <__swhatbuf_r+0x12>
 800baf0:	9901      	ldr	r1, [sp, #4]
 800baf2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800baf6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bafa:	4259      	negs	r1, r3
 800bafc:	4159      	adcs	r1, r3
 800bafe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb02:	e7eb      	b.n	800badc <__swhatbuf_r+0x24>

0800bb04 <__smakebuf_r>:
 800bb04:	898b      	ldrh	r3, [r1, #12]
 800bb06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb08:	079d      	lsls	r5, r3, #30
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	d507      	bpl.n	800bb20 <__smakebuf_r+0x1c>
 800bb10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	2301      	movs	r3, #1
 800bb1a:	6163      	str	r3, [r4, #20]
 800bb1c:	b002      	add	sp, #8
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	ab01      	add	r3, sp, #4
 800bb22:	466a      	mov	r2, sp
 800bb24:	f7ff ffc8 	bl	800bab8 <__swhatbuf_r>
 800bb28:	9900      	ldr	r1, [sp, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7fd f957 	bl	8008de0 <_malloc_r>
 800bb32:	b948      	cbnz	r0, 800bb48 <__smakebuf_r+0x44>
 800bb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb38:	059a      	lsls	r2, r3, #22
 800bb3a:	d4ef      	bmi.n	800bb1c <__smakebuf_r+0x18>
 800bb3c:	f023 0303 	bic.w	r3, r3, #3
 800bb40:	f043 0302 	orr.w	r3, r3, #2
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	e7e3      	b.n	800bb10 <__smakebuf_r+0xc>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	6020      	str	r0, [r4, #0]
 800bb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	9b00      	ldr	r3, [sp, #0]
 800bb54:	6163      	str	r3, [r4, #20]
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	6120      	str	r0, [r4, #16]
 800bb5a:	b15b      	cbz	r3, 800bb74 <__smakebuf_r+0x70>
 800bb5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 f81d 	bl	800bba0 <_isatty_r>
 800bb66:	b128      	cbz	r0, 800bb74 <__smakebuf_r+0x70>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	f023 0303 	bic.w	r3, r3, #3
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	431d      	orrs	r5, r3
 800bb78:	81a5      	strh	r5, [r4, #12]
 800bb7a:	e7cf      	b.n	800bb1c <__smakebuf_r+0x18>

0800bb7c <_fstat_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d07      	ldr	r5, [pc, #28]	; (800bb9c <_fstat_r+0x20>)
 800bb80:	2300      	movs	r3, #0
 800bb82:	4604      	mov	r4, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	4611      	mov	r1, r2
 800bb88:	602b      	str	r3, [r5, #0]
 800bb8a:	f7f5 fba2 	bl	80012d2 <_fstat>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	d102      	bne.n	800bb98 <_fstat_r+0x1c>
 800bb92:	682b      	ldr	r3, [r5, #0]
 800bb94:	b103      	cbz	r3, 800bb98 <_fstat_r+0x1c>
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	bd38      	pop	{r3, r4, r5, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20001790 	.word	0x20001790

0800bba0 <_isatty_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4d06      	ldr	r5, [pc, #24]	; (800bbbc <_isatty_r+0x1c>)
 800bba4:	2300      	movs	r3, #0
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	f7f5 fb96 	bl	80012dc <_isatty>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_isatty_r+0x1a>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_isatty_r+0x1a>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20001790 	.word	0x20001790

0800bbc0 <expf>:
 800bbc0:	b508      	push	{r3, lr}
 800bbc2:	ed2d 8b02 	vpush	{d8}
 800bbc6:	eef0 8a40 	vmov.f32	s17, s0
 800bbca:	f000 f85f 	bl	800bc8c <__ieee754_expf>
 800bbce:	eeb0 8a40 	vmov.f32	s16, s0
 800bbd2:	eeb0 0a68 	vmov.f32	s0, s17
 800bbd6:	f000 f829 	bl	800bc2c <finitef>
 800bbda:	b160      	cbz	r0, 800bbf6 <expf+0x36>
 800bbdc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bc1c <expf+0x5c>
 800bbe0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	dd0a      	ble.n	800bc00 <expf+0x40>
 800bbea:	f7fe f8e3 	bl	8009db4 <__errno>
 800bbee:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800bc20 <expf+0x60>
 800bbf2:	2322      	movs	r3, #34	; 0x22
 800bbf4:	6003      	str	r3, [r0, #0]
 800bbf6:	eeb0 0a48 	vmov.f32	s0, s16
 800bbfa:	ecbd 8b02 	vpop	{d8}
 800bbfe:	bd08      	pop	{r3, pc}
 800bc00:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bc24 <expf+0x64>
 800bc04:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	d5f3      	bpl.n	800bbf6 <expf+0x36>
 800bc0e:	f7fe f8d1 	bl	8009db4 <__errno>
 800bc12:	2322      	movs	r3, #34	; 0x22
 800bc14:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800bc28 <expf+0x68>
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	e7ec      	b.n	800bbf6 <expf+0x36>
 800bc1c:	42b17217 	.word	0x42b17217
 800bc20:	7f800000 	.word	0x7f800000
 800bc24:	c2cff1b5 	.word	0xc2cff1b5
 800bc28:	00000000 	.word	0x00000000

0800bc2c <finitef>:
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bc32:	9801      	ldr	r0, [sp, #4]
 800bc34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bc38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bc3c:	bfac      	ite	ge
 800bc3e:	2000      	movge	r0, #0
 800bc40:	2001      	movlt	r0, #1
 800bc42:	b002      	add	sp, #8
 800bc44:	4770      	bx	lr

0800bc46 <with_errnof>:
 800bc46:	b513      	push	{r0, r1, r4, lr}
 800bc48:	4604      	mov	r4, r0
 800bc4a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bc4e:	f7fe f8b1 	bl	8009db4 <__errno>
 800bc52:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bc56:	6004      	str	r4, [r0, #0]
 800bc58:	b002      	add	sp, #8
 800bc5a:	bd10      	pop	{r4, pc}

0800bc5c <xflowf>:
 800bc5c:	b130      	cbz	r0, 800bc6c <xflowf+0x10>
 800bc5e:	eef1 7a40 	vneg.f32	s15, s0
 800bc62:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc66:	2022      	movs	r0, #34	; 0x22
 800bc68:	f7ff bfed 	b.w	800bc46 <with_errnof>
 800bc6c:	eef0 7a40 	vmov.f32	s15, s0
 800bc70:	e7f7      	b.n	800bc62 <xflowf+0x6>
	...

0800bc74 <__math_uflowf>:
 800bc74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc7c <__math_uflowf+0x8>
 800bc78:	f7ff bff0 	b.w	800bc5c <xflowf>
 800bc7c:	10000000 	.word	0x10000000

0800bc80 <__math_oflowf>:
 800bc80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc88 <__math_oflowf+0x8>
 800bc84:	f7ff bfea 	b.w	800bc5c <xflowf>
 800bc88:	70000000 	.word	0x70000000

0800bc8c <__ieee754_expf>:
 800bc8c:	ee10 2a10 	vmov	r2, s0
 800bc90:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bc94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bc98:	d902      	bls.n	800bca0 <__ieee754_expf+0x14>
 800bc9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc9e:	4770      	bx	lr
 800bca0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800bca4:	d106      	bne.n	800bcb4 <__ieee754_expf+0x28>
 800bca6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800bde0 <__ieee754_expf+0x154>
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	bf18      	it	ne
 800bcae:	eeb0 0a67 	vmovne.f32	s0, s15
 800bcb2:	4770      	bx	lr
 800bcb4:	484b      	ldr	r0, [pc, #300]	; (800bde4 <__ieee754_expf+0x158>)
 800bcb6:	4282      	cmp	r2, r0
 800bcb8:	dd02      	ble.n	800bcc0 <__ieee754_expf+0x34>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f7ff bfe0 	b.w	800bc80 <__math_oflowf>
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	da05      	bge.n	800bcd0 <__ieee754_expf+0x44>
 800bcc4:	4a48      	ldr	r2, [pc, #288]	; (800bde8 <__ieee754_expf+0x15c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d902      	bls.n	800bcd0 <__ieee754_expf+0x44>
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7ff bfd2 	b.w	800bc74 <__math_uflowf>
 800bcd0:	4a46      	ldr	r2, [pc, #280]	; (800bdec <__ieee754_expf+0x160>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bcd8:	d952      	bls.n	800bd80 <__ieee754_expf+0xf4>
 800bcda:	4a45      	ldr	r2, [pc, #276]	; (800bdf0 <__ieee754_expf+0x164>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800bce2:	d834      	bhi.n	800bd4e <__ieee754_expf+0xc2>
 800bce4:	4b43      	ldr	r3, [pc, #268]	; (800bdf4 <__ieee754_expf+0x168>)
 800bce6:	4413      	add	r3, r2
 800bce8:	ed93 7a00 	vldr	s14, [r3]
 800bcec:	4b42      	ldr	r3, [pc, #264]	; (800bdf8 <__ieee754_expf+0x16c>)
 800bcee:	4413      	add	r3, r2
 800bcf0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bcf4:	f1c1 0201 	rsb	r2, r1, #1
 800bcf8:	edd3 7a00 	vldr	s15, [r3]
 800bcfc:	1a52      	subs	r2, r2, r1
 800bcfe:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bd02:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bd06:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800bdfc <__ieee754_expf+0x170>
 800bd0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be00 <__ieee754_expf+0x174>
 800bd0e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bd12:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800be04 <__ieee754_expf+0x178>
 800bd16:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bd1a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be08 <__ieee754_expf+0x17c>
 800bd1e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bd22:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800be0c <__ieee754_expf+0x180>
 800bd26:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bd2a:	eef0 6a40 	vmov.f32	s13, s0
 800bd2e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bd32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800bd36:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bd3a:	bb92      	cbnz	r2, 800bda2 <__ieee754_expf+0x116>
 800bd3c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bd40:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bd44:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd48:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bd4c:	4770      	bx	lr
 800bd4e:	4b30      	ldr	r3, [pc, #192]	; (800be10 <__ieee754_expf+0x184>)
 800bd50:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800be14 <__ieee754_expf+0x188>
 800bd54:	eddf 6a30 	vldr	s13, [pc, #192]	; 800be18 <__ieee754_expf+0x18c>
 800bd58:	4413      	add	r3, r2
 800bd5a:	edd3 7a00 	vldr	s15, [r3]
 800bd5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bd62:	eeb0 7a40 	vmov.f32	s14, s0
 800bd66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd6a:	ee17 2a90 	vmov	r2, s15
 800bd6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd72:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bd76:	eddf 6a29 	vldr	s13, [pc, #164]	; 800be1c <__ieee754_expf+0x190>
 800bd7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd7e:	e7be      	b.n	800bcfe <__ieee754_expf+0x72>
 800bd80:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800bd84:	d20b      	bcs.n	800bd9e <__ieee754_expf+0x112>
 800bd86:	eddf 6a26 	vldr	s13, [pc, #152]	; 800be20 <__ieee754_expf+0x194>
 800bd8a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bd8e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd96:	dd02      	ble.n	800bd9e <__ieee754_expf+0x112>
 800bd98:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bd9c:	4770      	bx	lr
 800bd9e:	2200      	movs	r2, #0
 800bda0:	e7af      	b.n	800bd02 <__ieee754_expf+0x76>
 800bda2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bda6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800bdaa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bdae:	bfb8      	it	lt
 800bdb0:	3264      	addlt	r2, #100	; 0x64
 800bdb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bdbe:	ee17 3a90 	vmov	r3, s15
 800bdc2:	bfab      	itete	ge
 800bdc4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bdc8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bdcc:	ee00 3a10 	vmovge	s0, r3
 800bdd0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800be24 <__ieee754_expf+0x198>
 800bdd4:	bfbc      	itt	lt
 800bdd6:	ee00 3a10 	vmovlt	s0, r3
 800bdda:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bdde:	4770      	bx	lr
 800bde0:	00000000 	.word	0x00000000
 800bde4:	42b17217 	.word	0x42b17217
 800bde8:	42cff1b5 	.word	0x42cff1b5
 800bdec:	3eb17218 	.word	0x3eb17218
 800bdf0:	3f851591 	.word	0x3f851591
 800bdf4:	08017d88 	.word	0x08017d88
 800bdf8:	08017d90 	.word	0x08017d90
 800bdfc:	3331bb4c 	.word	0x3331bb4c
 800be00:	b5ddea0e 	.word	0xb5ddea0e
 800be04:	388ab355 	.word	0x388ab355
 800be08:	bb360b61 	.word	0xbb360b61
 800be0c:	3e2aaaab 	.word	0x3e2aaaab
 800be10:	08017d80 	.word	0x08017d80
 800be14:	3fb8aa3b 	.word	0x3fb8aa3b
 800be18:	3f317180 	.word	0x3f317180
 800be1c:	3717f7d1 	.word	0x3717f7d1
 800be20:	7149f2ca 	.word	0x7149f2ca
 800be24:	0d800000 	.word	0x0d800000

0800be28 <_init>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr

0800be34 <_fini>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	bf00      	nop
 800be38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3a:	bc08      	pop	{r3}
 800be3c:	469e      	mov	lr, r3
 800be3e:	4770      	bx	lr
