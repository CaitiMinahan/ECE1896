
Nucleo-F446RE_contactor_and_model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003306c  0800b3e0  0800b3e0  0001b3e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e44c  0803e44c  00050dd8  2**0
                  CONTENTS
  4 .ARM          00000008  0803e44c  0803e44c  0004e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e454  0803e454  00050dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e454  0803e454  0004e454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803e458  0803e458  0004e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dd8  20000000  0803e45c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000dd8  0803f234  00050dd8  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001908  0803f234  00051908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050dd8  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00050e08  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8fe  00000000  00000000  00050e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004599  00000000  00000000  0006b799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000822e  00000000  00000000  0006fd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc0  00000000  00000000  00077f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d26  00000000  00000000  00078b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000061a6  00000000  00000000  00079846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001883f  00000000  00000000  0007f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f08bb  00000000  00000000  0009822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003564  00000000  00000000  00188ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0018c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000dd8 	.word	0x20000dd8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3b0 	.word	0x0800b3b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000ddc 	.word	0x20000ddc
 800020c:	0800b3b0 	.word	0x0800b3b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b98e 	b.w	8000f1c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f824 	bl	8000c54 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fd09 	bl	8000638 <__aeabi_dmul>
 8000c26:	f000 f97b 	bl	8000f20 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc8a 	bl	8000544 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fd00 	bl	8000638 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb42 	bl	80002c8 <__aeabi_dsub>
 8000c44:	f000 f96c 	bl	8000f20 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9e08      	ldr	r6, [sp, #32]
 8000c5a:	460d      	mov	r5, r1
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	460f      	mov	r7, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14a      	bne.n	8000cfa <__udivmoddi4+0xa6>
 8000c64:	428a      	cmp	r2, r1
 8000c66:	4694      	mov	ip, r2
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0xe2>
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	b143      	cbz	r3, 8000c82 <__udivmoddi4+0x2e>
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	f1c3 0220 	rsb	r2, r3, #32
 8000c78:	409f      	lsls	r7, r3
 8000c7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	409c      	lsls	r4, r3
 8000c82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c86:	fa1f f58c 	uxth.w	r5, ip
 8000c8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c8e:	0c22      	lsrs	r2, r4, #16
 8000c90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c98:	fb01 f005 	mul.w	r0, r1, r5
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x62>
 8000ca0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca8:	f080 811c 	bcs.w	8000ee4 <__udivmoddi4+0x290>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f240 8119 	bls.w	8000ee4 <__udivmoddi4+0x290>
 8000cb2:	3902      	subs	r1, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a12      	subs	r2, r2, r0
 8000cb8:	b2a4      	uxth	r4, r4
 8000cba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc6:	fb00 f505 	mul.w	r5, r0, r5
 8000cca:	42a5      	cmp	r5, r4
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x90>
 8000cce:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x294>
 8000cda:	42a5      	cmp	r5, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x294>
 8000ce0:	4464      	add	r4, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11e      	cbz	r6, 8000cf6 <__udivmoddi4+0xa2>
 8000cee:	40dc      	lsrs	r4, r3
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0xbc>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f000 80ed 	beq.w	8000ede <__udivmoddi4+0x28a>
 8000d04:	2100      	movs	r1, #0
 8000d06:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	fab3 f183 	clz	r1, r3
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d149      	bne.n	8000dac <__udivmoddi4+0x158>
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	d302      	bcc.n	8000d22 <__udivmoddi4+0xce>
 8000d1c:	4282      	cmp	r2, r0
 8000d1e:	f200 80f8 	bhi.w	8000f12 <__udivmoddi4+0x2be>
 8000d22:	1a84      	subs	r4, r0, r2
 8000d24:	eb65 0203 	sbc.w	r2, r5, r3
 8000d28:	2001      	movs	r0, #1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d0e2      	beq.n	8000cf6 <__udivmoddi4+0xa2>
 8000d30:	e9c6 4700 	strd	r4, r7, [r6]
 8000d34:	e7df      	b.n	8000cf6 <__udivmoddi4+0xa2>
 8000d36:	b902      	cbnz	r2, 8000d3a <__udivmoddi4+0xe6>
 8000d38:	deff      	udf	#255	; 0xff
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8090 	bne.w	8000e64 <__udivmoddi4+0x210>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d54:	fb07 2015 	mls	r0, r7, r5, r2
 8000d58:	0c22      	lsrs	r2, r4, #16
 8000d5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d5e:	fb0e f005 	mul.w	r0, lr, r5
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x124>
 8000d66:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x122>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2b8>
 8000d76:	4645      	mov	r5, r8
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d80:	fb07 2210 	mls	r2, r7, r0, r2
 8000d84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x14e>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x14c>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2c2>
 8000da0:	4610      	mov	r0, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000daa:	e79f      	b.n	8000cec <__udivmoddi4+0x98>
 8000dac:	f1c1 0720 	rsb	r7, r1, #32
 8000db0:	408b      	lsls	r3, r1
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa05 f401 	lsl.w	r4, r5, r1
 8000dbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc2:	40fd      	lsrs	r5, r7
 8000dc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc8:	4323      	orrs	r3, r4
 8000dca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000dd6:	0c1c      	lsrs	r4, r3, #16
 8000dd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ddc:	fb08 f50e 	mul.w	r5, r8, lr
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b0>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2b4>
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2b4>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4464      	add	r4, ip
 8000e04:	1b64      	subs	r4, r4, r5
 8000e06:	b29d      	uxth	r5, r3
 8000e08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1da>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2ac>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2ac>
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e32:	fba3 9502 	umull	r9, r5, r3, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	42ac      	cmp	r4, r5
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46ae      	mov	lr, r5
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x29c>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x298>
 8000e44:	b156      	cbz	r6, 8000e5c <__udivmoddi4+0x208>
 8000e46:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e52:	40ca      	lsrs	r2, r1
 8000e54:	40cc      	lsrs	r4, r1
 8000e56:	4317      	orrs	r7, r2
 8000e58:	e9c6 7400 	strd	r7, r4, [r6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e64:	f1c3 0120 	rsb	r1, r3, #32
 8000e68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e70:	fa25 f101 	lsr.w	r1, r5, r1
 8000e74:	409d      	lsls	r5, r3
 8000e76:	432a      	orrs	r2, r5
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e84:	fb07 1510 	mls	r5, r7, r0, r1
 8000e88:	0c11      	lsrs	r1, r2, #16
 8000e8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e92:	428d      	cmp	r5, r1
 8000e94:	fa04 f403 	lsl.w	r4, r4, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x258>
 8000e9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b0>
 8000ea4:	428d      	cmp	r5, r1
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b0>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	1b49      	subs	r1, r1, r5
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec0:	4291      	cmp	r1, r2
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x282>
 8000ec4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2a8>
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2a8>
 8000ed2:	3d02      	subs	r5, #2
 8000ed4:	4462      	add	r2, ip
 8000ed6:	1a52      	subs	r2, r2, r1
 8000ed8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0xfc>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xa2>
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	e6e6      	b.n	8000cb6 <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x90>
 8000eec:	4548      	cmp	r0, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f0>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f0>
 8000efc:	4645      	mov	r5, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x282>
 8000f00:	462b      	mov	r3, r5
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1da>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x258>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b0>
 8000f0c:	3d02      	subs	r5, #2
 8000f0e:	4462      	add	r2, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x124>
 8000f12:	4608      	mov	r0, r1
 8000f14:	e70a      	b.n	8000d2c <__udivmoddi4+0xd8>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x14e>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_d2uiz>:
 8000f20:	004a      	lsls	r2, r1, #1
 8000f22:	d211      	bcs.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f28:	d211      	bcs.n	8000f4e <__aeabi_d2uiz+0x2e>
 8000f2a:	d50d      	bpl.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f34:	d40e      	bmi.n	8000f54 <__aeabi_d2uiz+0x34>
 8000f36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f42:	fa23 f002 	lsr.w	r0, r3, r2
 8000f46:	4770      	bx	lr
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	4770      	bx	lr
 8000f4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f52:	d102      	bne.n	8000f5a <__aeabi_d2uiz+0x3a>
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4770      	bx	lr

08000f60 <initCellDefaults>:
    newCell.over_temp = false;
    newCell.under_temp = false;
    newCell.over_current = false;
    newCell.under_current = false;

    return newCell;
 8000f60:	7042      	strb	r2, [r0, #1]
 8000f62:	2200      	movs	r2, #0
 8000f64:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8000f68:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8000f6c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8000f70:	7001      	strb	r1, [r0, #0]
 8000f72:	61c2      	str	r2, [r0, #28]
}
 8000f74:	4770      	bx	lr

08000f76 <getCellFaults>:
    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
    result |= (cell->cell & 0x0F) << 8;

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 8000f76:	7e02      	ldrb	r2, [r0, #24]
    result |= (cell->module & 0x0F) << 12;
 8000f78:	7803      	ldrb	r3, [r0, #0]
    result |= (cell->power_rail & 0x01) << 7;
 8000f7a:	01d2      	lsls	r2, r2, #7
    result |= (cell->over_voltage & 0x01) << 5;
    result |= (cell->under_voltage & 0x01) << 4;
    result |= (cell->over_temp & 0x01) << 3;
    result |= (cell->under_temp & 0x01) << 2;
    result |= (cell->over_current & 0x01) << 1;
    result |= (cell->under_current & 0x01);
 8000f7c:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
 8000f80:	7fc3      	ldrb	r3, [r0, #31]
 8000f82:	4313      	orrs	r3, r2
    result |= (cell->comm & 0x01) << 6;
 8000f84:	7e42      	ldrb	r2, [r0, #25]
    result |= (cell->under_current & 0x01);
 8000f86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    result |= (cell->over_voltage & 0x01) << 5;
 8000f8a:	7e82      	ldrb	r2, [r0, #26]
    result |= (cell->under_current & 0x01);
 8000f8c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    result |= (cell->under_voltage & 0x01) << 4;
 8000f90:	7ec2      	ldrb	r2, [r0, #27]
    result |= (cell->under_current & 0x01);
 8000f92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    result |= (cell->over_temp & 0x01) << 3;
 8000f96:	7f02      	ldrb	r2, [r0, #28]
    result |= (cell->under_current & 0x01);
 8000f98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    result |= (cell->under_temp & 0x01) << 2;
 8000f9c:	7f42      	ldrb	r2, [r0, #29]
    result |= (cell->under_current & 0x01);
 8000f9e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    result |= (cell->over_current & 0x01) << 1;
 8000fa2:	7f82      	ldrb	r2, [r0, #30]
    result |= (cell->under_current & 0x01);
 8000fa4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    result |= (cell->cell & 0x0F) << 8;
 8000fa8:	7842      	ldrb	r2, [r0, #1]
 8000faa:	0212      	lsls	r2, r2, #8
 8000fac:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    result |= (cell->under_current & 0x01);
 8000fb0:	ea43 0002 	orr.w	r0, r3, r2

    return result;
}
 8000fb4:	b280      	uxth	r0, r0
 8000fb6:	4770      	bx	lr

08000fb8 <WakeBQ79616>:
float sop; 					 // State of Power
// End Analog Capture

// Start BMS Functions
void WakeBQ79616(void)
{
 8000fb8:	b510      	push	{r4, lr}
	BQ79616_GPIO->MODER &= ~(0b11 << (BQ79616_PIN*2)); // clear the GPIO MODE to 00
 8000fba:	4c0e      	ldr	r4, [pc, #56]	; (8000ff4 <WakeBQ79616+0x3c>)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000fc2:	6023      	str	r3, [r4, #0]
	BQ79616_GPIO->MODER |= (0b10 << (BQ79616_PIN*2)); // Sets the mode of PC10 to alternate function
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fca:	6023      	str	r3, [r4, #0]
	BQ79616_GPIO->AFR[2] &= ~(0b1111<<(12)); //sets Alternate function for PC10 to AF8
 8000fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000fd2:	62a3      	str	r3, [r4, #40]	; 0x28
	BQ79616_GPIO->ODR &= ~(0b1 <<(BQ79616_PIN)); // output 0 when in gpio mode
 8000fd4:	6963      	ldr	r3, [r4, #20]
 8000fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fda:	6163      	str	r3, [r4, #20]
	BQ79616_GPIO->MODER ^= (0b11 << (BQ79616_PIN*2)); // GPIO MODE
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 8000fe2:	6023      	str	r3, [r4, #0]
	HAL_Delay(2); // Use Veronica's Delay Function
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 ff8f 	bl	8001f08 <HAL_Delay>
//	DELAY_US(2500);
//	DELAY_US(2500);
	BQ79616_GPIO->MODER ^= (0b11 << (BQ79616_PIN*2)); // AF
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 8000ff0:	6023      	str	r3, [r4, #0]
}
 8000ff2:	bd10      	pop	{r4, pc}
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <startupSequence>:
	HAL_Delay(8);
	BQ79616_GPIO->MODER ^= (0b11 << (BQ79616_PIN*2));
}
// End BMS Functions

int startupSequence(void){
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b085      	sub	sp, #20
	//
	// BMS Wakeup
	//

	WakeBQ79616();
 8000ffc:	f7ff ffdc 	bl	8000fb8 <WakeBQ79616>
	//
	// Negative Contactor Enable
	//

	// Send high Signal to NEG_LSD_OUTPUT
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8001000:	4868      	ldr	r0, [pc, #416]	; (80011a4 <startupSequence+0x1ac>)
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	2201      	movs	r2, #1
 8001008:	f001 fff6 	bl	8002ff8 <HAL_GPIO_WritePin>

	// Read NEG_LSD_INPUT
    // If high, proceed, else EPO/return -1
    if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 800100c:	4866      	ldr	r0, [pc, #408]	; (80011a8 <startupSequence+0x1b0>)
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	f001 ffec 	bl	8002fec <HAL_GPIO_ReadPin>
 8001014:	b918      	cbnz	r0, 800101e <startupSequence+0x26>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
    // If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
    if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }

	// Start-up Sequence Concluded Successfully
	return 0;
}
 800101a:	b005      	add	sp, #20
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_GPIO_WritePin(NEG_HSD_OUTPUT_GPIO, NEG_HSD_OUTPUT_PIN, 1);
 800101e:	4862      	ldr	r0, [pc, #392]	; (80011a8 <startupSequence+0x1b0>)
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	2201      	movs	r2, #1
 8001026:	f001 ffe7 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 800102a:	485f      	ldr	r0, [pc, #380]	; (80011a8 <startupSequence+0x1b0>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	f001 ffdd 	bl	8002fec <HAL_GPIO_ReadPin>
 8001032:	2800      	cmp	r0, #0
 8001034:	d0ef      	beq.n	8001016 <startupSequence+0x1e>
    if (HAL_GPIO_ReadPin(NEG_CON_INPUT_GPIO, NEG_CON_INPUT_PIN)){ return -1; }
 8001036:	485d      	ldr	r0, [pc, #372]	; (80011ac <startupSequence+0x1b4>)
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	f001 ffd6 	bl	8002fec <HAL_GPIO_ReadPin>
 8001040:	2800      	cmp	r0, #0
 8001042:	d1e8      	bne.n	8001016 <startupSequence+0x1e>
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 1);
 8001044:	4859      	ldr	r0, [pc, #356]	; (80011ac <startupSequence+0x1b4>)
 8001046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104a:	2201      	movs	r2, #1
 800104c:	f001 ffd4 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (!HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 8001050:	4857      	ldr	r0, [pc, #348]	; (80011b0 <startupSequence+0x1b8>)
 8001052:	2104      	movs	r1, #4
 8001054:	f001 ffca 	bl	8002fec <HAL_GPIO_ReadPin>
 8001058:	2800      	cmp	r0, #0
 800105a:	d0dc      	beq.n	8001016 <startupSequence+0x1e>
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 1);
 800105c:	4852      	ldr	r0, [pc, #328]	; (80011a8 <startupSequence+0x1b0>)
 800105e:	2120      	movs	r1, #32
 8001060:	2201      	movs	r2, #1
 8001062:	f001 ffc9 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (!HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 8001066:	4850      	ldr	r0, [pc, #320]	; (80011a8 <startupSequence+0x1b0>)
 8001068:	2110      	movs	r1, #16
 800106a:	f001 ffbf 	bl	8002fec <HAL_GPIO_ReadPin>
 800106e:	2800      	cmp	r0, #0
 8001070:	d0d1      	beq.n	8001016 <startupSequence+0x1e>
    if (HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 8001072:	484c      	ldr	r0, [pc, #304]	; (80011a4 <startupSequence+0x1ac>)
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	f001 ffb8 	bl	8002fec <HAL_GPIO_ReadPin>
 800107c:	2800      	cmp	r0, #0
 800107e:	d1ca      	bne.n	8001016 <startupSequence+0x1e>
    while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 8001080:	4d4c      	ldr	r5, [pc, #304]	; (80011b4 <startupSequence+0x1bc>)
        HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8001082:	4f4d      	ldr	r7, [pc, #308]	; (80011b8 <startupSequence+0x1c0>)
 8001084:	4e4d      	ldr	r6, [pc, #308]	; (80011bc <startupSequence+0x1c4>)
    while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 8001086:	ed95 7a00 	vldr	s14, [r5]
 800108a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800108e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d43f      	bmi.n	8001118 <startupSequence+0x120>
	HAL_GPIO_WritePin(POS_LSD_OUTPUT_GPIO, POS_LSD_OUTPUT_PIN, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	4843      	ldr	r0, [pc, #268]	; (80011a8 <startupSequence+0x1b0>)
 800109c:	4611      	mov	r1, r2
 800109e:	f001 ffab 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (!HAL_GPIO_ReadPin(POS_LSD_INPUT_GPIO, POS_LSD_INPUT_PIN)){ return -1; }
 80010a2:	4840      	ldr	r0, [pc, #256]	; (80011a4 <startupSequence+0x1ac>)
 80010a4:	2102      	movs	r1, #2
 80010a6:	f001 ffa1 	bl	8002fec <HAL_GPIO_ReadPin>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d0b3      	beq.n	8001016 <startupSequence+0x1e>
	HAL_GPIO_WritePin(POS_HSD_OUTPUT_GPIO, POS_HSD_OUTPUT_PIN, 1);
 80010ae:	483d      	ldr	r0, [pc, #244]	; (80011a4 <startupSequence+0x1ac>)
 80010b0:	2108      	movs	r1, #8
 80010b2:	2201      	movs	r2, #1
 80010b4:	f001 ffa0 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (!HAL_GPIO_ReadPin(POS_HSD_INPUT_GPIO, POS_HSD_INPUT_PIN)){ return -1; }
 80010b8:	483a      	ldr	r0, [pc, #232]	; (80011a4 <startupSequence+0x1ac>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	f001 ff96 	bl	8002fec <HAL_GPIO_ReadPin>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d0a8      	beq.n	8001016 <startupSequence+0x1e>
    if (HAL_GPIO_ReadPin(POS_CON_INPUT_GPIO, POS_CON_INPUT_PIN)){ return -1; }
 80010c4:	4837      	ldr	r0, [pc, #220]	; (80011a4 <startupSequence+0x1ac>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	f001 ff90 	bl	8002fec <HAL_GPIO_ReadPin>
 80010cc:	4602      	mov	r2, r0
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d1a1      	bne.n	8001016 <startupSequence+0x1e>
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 0);
 80010d2:	4835      	ldr	r0, [pc, #212]	; (80011a8 <startupSequence+0x1b0>)
 80010d4:	2120      	movs	r1, #32
 80010d6:	f001 ff8f 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80010da:	4833      	ldr	r0, [pc, #204]	; (80011a8 <startupSequence+0x1b0>)
 80010dc:	2110      	movs	r1, #16
 80010de:	f001 ff85 	bl	8002fec <HAL_GPIO_ReadPin>
 80010e2:	4602      	mov	r2, r0
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d196      	bne.n	8001016 <startupSequence+0x1e>
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 0);
 80010e8:	4830      	ldr	r0, [pc, #192]	; (80011ac <startupSequence+0x1b4>)
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	f001 ff83 	bl	8002ff8 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 80010f2:	482f      	ldr	r0, [pc, #188]	; (80011b0 <startupSequence+0x1b8>)
 80010f4:	2104      	movs	r1, #4
 80010f6:	f001 ff79 	bl	8002fec <HAL_GPIO_ReadPin>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d18b      	bne.n	8001016 <startupSequence+0x1e>
    if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 80010fe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 800110a:	f001 ff6f 	bl	8002fec <HAL_GPIO_ReadPin>
 800110e:	fab0 f080 	clz	r0, r0
 8001112:	0940      	lsrs	r0, r0, #5
 8001114:	4240      	negs	r0, r0
 8001116:	e780      	b.n	800101a <startupSequence+0x22>
        HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8001118:	2203      	movs	r2, #3
 800111a:	4927      	ldr	r1, [pc, #156]	; (80011b8 <startupSequence+0x1c0>)
 800111c:	4630      	mov	r0, r6
 800111e:	f001 f813 	bl	8002148 <HAL_ADC_Start_DMA>
        HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 8001122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001126:	4630      	mov	r0, r6
 8001128:	f000 ffba 	bl	80020a0 <HAL_ADC_PollForConversion>
        pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 800112c:	883b      	ldrh	r3, [r7, #0]
 800112e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80011c0 <startupSequence+0x1c8>
        sprintf(IntPartStr, "%02X", intPart);
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <startupSequence+0x1cc>)
        pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 8001134:	ee07 3a10 	vmov	s14, r3
 8001138:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        sprintf(IntPartStr, "%02X", intPart);
 800113c:	4668      	mov	r0, sp
        pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 800113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001142:	edc5 7a00 	vstr	s15, [r5]
        uint16_t intPart = (uint16_t)pre_charge_voltage;
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        sprintf(IntPartStr, "%02X", intPart);
 800114a:	ee17 3a90 	vmov	r3, s15
 800114e:	b29c      	uxth	r4, r3
 8001150:	4622      	mov	r2, r4
 8001152:	f007 fdb5 	bl	8008cc0 <siprintf>
        uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 8001156:	ee07 4a90 	vmov	s15, r4
 800115a:	ed95 7a00 	vldr	s14, [r5]
        sprintf(FracPartStr, "%02X", fracPart);
 800115e:	4919      	ldr	r1, [pc, #100]	; (80011c4 <startupSequence+0x1cc>)
        uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sprintf(FracPartStr, "%02X", fracPart);
 8001164:	a801      	add	r0, sp, #4
        uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 8001166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80011c8 <startupSequence+0x1d0>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        sprintf(FracPartStr, "%02X", fracPart);
 8001176:	ee17 3a90 	vmov	r3, s15
 800117a:	b29a      	uxth	r2, r3
 800117c:	f007 fda0 	bl	8008cc0 <siprintf>
        sprintf(ResultStr, "%s.%s\r\n", IntPartStr, FracPartStr);
 8001180:	ab01      	add	r3, sp, #4
 8001182:	466a      	mov	r2, sp
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <startupSequence+0x1d4>)
 8001186:	a802      	add	r0, sp, #8
 8001188:	f007 fd9a 	bl	8008cc0 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 800118c:	2208      	movs	r2, #8
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	eb0d 0102 	add.w	r1, sp, r2
 8001194:	480e      	ldr	r0, [pc, #56]	; (80011d0 <startupSequence+0x1d8>)
 8001196:	f002 fb63 	bl	8003860 <HAL_UART_Transmit>
        HAL_Delay(1000);
 800119a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119e:	f000 feb3 	bl	8001f08 <HAL_Delay>
 80011a2:	e770      	b.n	8001086 <startupSequence+0x8e>
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	200016f4 	.word	0x200016f4
 80011b8:	2000152c 	.word	0x2000152c
 80011bc:	20001540 	.word	0x20001540
 80011c0:	447a0000 	.word	0x447a0000
 80011c4:	0800b8f4 	.word	0x0800b8f4
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	0800b90d 	.word	0x0800b90d
 80011d0:	20001618 	.word	0x20001618

080011d4 <checkStatusTransmit>:

void checkStatusTransmit(Cell* cell){
 80011d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d8:	ed2d 8b02 	vpush	{d8}

	// TODO: Change this to read from BQ Board
	// append id, mod and cell number to sensor reading
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80011dc:	4db5      	ldr	r5, [pc, #724]	; (80014b4 <checkStatusTransmit+0x2e0>)
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 80011de:	f8df 832c 	ldr.w	r8, [pc, #812]	; 800150c <checkStatusTransmit+0x338>
	cell_current = cell_voltage / known_resistance;
	cell->I = cell_current;

	// TODO: determine temp based off linear eq of degrees vs ohms
	// calculate thermistor R = (Vref - V) /I
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 80011e2:	f8df 932c 	ldr.w	r9, [pc, #812]	; 8001510 <checkStatusTransmit+0x33c>
	cell_current = cell_voltage / known_resistance;
 80011e6:	4fb4      	ldr	r7, [pc, #720]	; (80014b8 <checkStatusTransmit+0x2e4>)
	uint16_t intPart = (uint16_t)cell_voltage;
	char IntPartStr[3];
	sprintf(IntPartStr, "%02X", intPart);

	// Convert the fractional part to a hexadecimal string
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 80011e8:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 80014bc <checkStatusTransmit+0x2e8>
void checkStatusTransmit(Cell* cell){
 80011ec:	b08f      	sub	sp, #60	; 0x3c
 80011ee:	4604      	mov	r4, r0
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80011f0:	2203      	movs	r2, #3
 80011f2:	4629      	mov	r1, r5
 80011f4:	48b2      	ldr	r0, [pc, #712]	; (80014c0 <checkStatusTransmit+0x2ec>)
 80011f6:	f000 ffa7 	bl	8002148 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 80011fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011fe:	48b0      	ldr	r0, [pc, #704]	; (80014c0 <checkStatusTransmit+0x2ec>)
 8001200:	f000 ff4e 	bl	80020a0 <HAL_ADC_PollForConversion>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8001204:	886b      	ldrh	r3, [r5, #2]
 8001206:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 80014c4 <checkStatusTransmit+0x2f0>
	sprintf(mod_numStr, "%1X", mod_num);
 800120a:	49af      	ldr	r1, [pc, #700]	; (80014c8 <checkStatusTransmit+0x2f4>)
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
	cell_vref = (float)cell_analog_values[2]/1000;
 8001214:	88ab      	ldrh	r3, [r5, #4]
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8001216:	ee87 7a86 	vdiv.f32	s14, s15, s12
	sprintf(mod_numStr, "%1X", mod_num);
 800121a:	a803      	add	r0, sp, #12
	sprintf(IntPartStr, "%02X", intPart);
 800121c:	ad05      	add	r5, sp, #20
	char FracPartStr[3];
	sprintf(FracPartStr, "%02X", fracPart);
 800121e:	ae06      	add	r6, sp, #24
	cell_vref = (float)cell_analog_values[2]/1000;
 8001220:	ee06 3a90 	vmov	s13, r3
	cell->V = cell_voltage;
 8001224:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	cell_vref = (float)cell_analog_values[2]/1000;
 8001228:	eef8 6a66 	vcvt.f32.u32	s13, s13
	cell->V = cell_voltage;
 800122c:	edc4 7a03 	vstr	s15, [r4, #12]
	cell_vref = (float)cell_analog_values[2]/1000;
 8001230:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001234:	4ba5      	ldr	r3, [pc, #660]	; (80014cc <checkStatusTransmit+0x2f8>)
	cell_current = cell_voltage / known_resistance;
 8001236:	ed9f 6aa6 	vldr	s12, [pc, #664]	; 80014d0 <checkStatusTransmit+0x2fc>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 800123a:	ed88 7a00 	vstr	s14, [r8]
	cell_current = cell_voltage / known_resistance;
 800123e:	eec7 6a06 	vdiv.f32	s13, s14, s12
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8001242:	ee37 7ac7 	vsub.f32	s14, s15, s14
	cell_vref = (float)cell_analog_values[2]/1000;
 8001246:	edc3 7a00 	vstr	s15, [r3]
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	cell->I = cell_current;
 800124e:	eebc 6ae6 	vcvt.u32.f32	s12, s13
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8001252:	edc9 7a00 	vstr	s15, [r9]
	cell->T = thermistor_resistance;
 8001256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	cell_current = cell_voltage / known_resistance;
 800125a:	edc7 6a00 	vstr	s13, [r7]
	cell->I = cell_current;
 800125e:	ed84 6a04 	vstr	s12, [r4, #16]
	cell->T = thermistor_resistance;
 8001262:	edc4 7a05 	vstr	s15, [r4, #20]
	sprintf(mod_numStr, "%1X", mod_num);
 8001266:	7822      	ldrb	r2, [r4, #0]
 8001268:	f007 fd2a 	bl	8008cc0 <siprintf>
	sprintf(cell_numStr, "%1X", cell_num);
 800126c:	7862      	ldrb	r2, [r4, #1]
 800126e:	4996      	ldr	r1, [pc, #600]	; (80014c8 <checkStatusTransmit+0x2f4>)
 8001270:	a804      	add	r0, sp, #16
 8001272:	f007 fd25 	bl	8008cc0 <siprintf>
    Fault = getCellFaults(cell);
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff fe7d 	bl	8000f76 <getCellFaults>
    sprintf(FaultStr, "%04X", Fault);
 800127c:	4995      	ldr	r1, [pc, #596]	; (80014d4 <checkStatusTransmit+0x300>)
    Fault = getCellFaults(cell);
 800127e:	4602      	mov	r2, r0
    sprintf(FaultStr, "%04X", Fault);
 8001280:	a807      	add	r0, sp, #28
 8001282:	f007 fd1d 	bl	8008cc0 <siprintf>
	sprintf(FaultResultStr, "7%s\r\n", FaultStr);
 8001286:	4994      	ldr	r1, [pc, #592]	; (80014d8 <checkStatusTransmit+0x304>)
 8001288:	aa07      	add	r2, sp, #28
 800128a:	a809      	add	r0, sp, #36	; 0x24
 800128c:	f007 fd18 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)FaultResultStr, sizeof(FaultResultStr), 100);
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	2207      	movs	r2, #7
 8001294:	a909      	add	r1, sp, #36	; 0x24
 8001296:	4891      	ldr	r0, [pc, #580]	; (80014dc <checkStatusTransmit+0x308>)
 8001298:	f002 fae2 	bl	8003860 <HAL_UART_Transmit>
	uint16_t intPart = (uint16_t)cell_voltage;
 800129c:	edd8 7a00 	vldr	s15, [r8]
	sprintf(IntPartStr, "%02X", intPart);
 80012a0:	498f      	ldr	r1, [pc, #572]	; (80014e0 <checkStatusTransmit+0x30c>)
	uint16_t intPart = (uint16_t)cell_voltage;
 80012a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 80012a6:	4628      	mov	r0, r5
 80012a8:	ee17 3a90 	vmov	r3, s15
 80012ac:	b29c      	uxth	r4, r3
 80012ae:	4622      	mov	r2, r4
 80012b0:	f007 fd06 	bl	8008cc0 <siprintf>
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 80012b4:	ee07 4a90 	vmov	s15, r4
 80012b8:	ed98 7a00 	vldr	s14, [r8]
	sprintf(FracPartStr, "%02X", fracPart);
 80012bc:	4988      	ldr	r1, [pc, #544]	; (80014e0 <checkStatusTransmit+0x30c>)
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 80012be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80012c2:	4630      	mov	r0, r6
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80012cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f007 fcf3 	bl	8008cc0 <siprintf>

	// Write to UART
	char ResultStr[11];
	sprintf(ResultStr, "1%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 80012da:	4982      	ldr	r1, [pc, #520]	; (80014e4 <checkStatusTransmit+0x310>)
 80012dc:	ab04      	add	r3, sp, #16
 80012de:	aa03      	add	r2, sp, #12
 80012e0:	e9cd 5600 	strd	r5, r6, [sp]
 80012e4:	a80b      	add	r0, sp, #44	; 0x2c
 80012e6:	f007 fceb 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80012ea:	2364      	movs	r3, #100	; 0x64
 80012ec:	220b      	movs	r2, #11
 80012ee:	a90b      	add	r1, sp, #44	; 0x2c
 80012f0:	487a      	ldr	r0, [pc, #488]	; (80014dc <checkStatusTransmit+0x308>)
 80012f2:	f002 fab5 	bl	8003860 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)cell_current;
 80012f6:	edd7 7a00 	vldr	s15, [r7]
	sprintf(IntPartStr, "%02X", intPart);
 80012fa:	4979      	ldr	r1, [pc, #484]	; (80014e0 <checkStatusTransmit+0x30c>)
	intPart = (uint16_t)cell_current;
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 8001300:	4628      	mov	r0, r5
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	b29c      	uxth	r4, r3
 8001308:	4622      	mov	r2, r4
 800130a:	f007 fcd9 	bl	8008cc0 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 800130e:	ee07 4a90 	vmov	s15, r4
 8001312:	ed97 7a00 	vldr	s14, [r7]
	sprintf(FracPartStr, "%02X", fracPart);
 8001316:	4972      	ldr	r1, [pc, #456]	; (80014e0 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800131c:	4630      	mov	r0, r6
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 800131e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001322:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800132a:	ee17 3a90 	vmov	r3, s15
 800132e:	b29a      	uxth	r2, r3
 8001330:	f007 fcc6 	bl	8008cc0 <siprintf>

	// Write to UART
	sprintf(ResultStr, "2%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8001334:	496c      	ldr	r1, [pc, #432]	; (80014e8 <checkStatusTransmit+0x314>)
 8001336:	ab04      	add	r3, sp, #16
 8001338:	aa03      	add	r2, sp, #12
 800133a:	e9cd 5600 	strd	r5, r6, [sp]
 800133e:	a80b      	add	r0, sp, #44	; 0x2c
 8001340:	f007 fcbe 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	220b      	movs	r2, #11
 8001348:	a90b      	add	r1, sp, #44	; 0x2c
 800134a:	4864      	ldr	r0, [pc, #400]	; (80014dc <checkStatusTransmit+0x308>)
 800134c:	f002 fa88 	bl	8003860 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)thermistor_resistance;
 8001350:	edd9 7a00 	vldr	s15, [r9]
	sprintf(IntPartStr, "%02X", intPart);
 8001354:	4962      	ldr	r1, [pc, #392]	; (80014e0 <checkStatusTransmit+0x30c>)
	intPart = (uint16_t)thermistor_resistance;
 8001356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 800135a:	4628      	mov	r0, r5
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b29c      	uxth	r4, r3
 8001362:	4622      	mov	r2, r4
 8001364:	f007 fcac 	bl	8008cc0 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8001368:	ee07 4a90 	vmov	s15, r4
 800136c:	ed99 7a00 	vldr	s14, [r9]
	sprintf(FracPartStr, "%02X", fracPart);
 8001370:	495b      	ldr	r1, [pc, #364]	; (80014e0 <checkStatusTransmit+0x30c>)

	// Update IO handlers with the data payload
	ai_input[0].data = AI_HANDLE_PTR(pIn);
	ai_output[0].data = AI_HANDLE_PTR(pOut);

	batch = ai_network_run(network, ai_input, ai_output);
 8001372:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001514 <checkStatusTransmit+0x340>
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001376:	4c5d      	ldr	r4, [pc, #372]	; (80014ec <checkStatusTransmit+0x318>)
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8001378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800137c:	4630      	mov	r0, r6
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	b29a      	uxth	r2, r3
 8001390:	f007 fc96 	bl	8008cc0 <siprintf>
	sprintf(ResultStr, "3%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8001394:	4956      	ldr	r1, [pc, #344]	; (80014f0 <checkStatusTransmit+0x31c>)
 8001396:	ab04      	add	r3, sp, #16
 8001398:	aa03      	add	r2, sp, #12
 800139a:	e9cd 5600 	strd	r5, r6, [sp]
 800139e:	a80b      	add	r0, sp, #44	; 0x2c
 80013a0:	f007 fc8e 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80013a4:	2364      	movs	r3, #100	; 0x64
 80013a6:	220b      	movs	r2, #11
 80013a8:	a90b      	add	r1, sp, #44	; 0x2c
 80013aa:	484c      	ldr	r0, [pc, #304]	; (80014dc <checkStatusTransmit+0x308>)
 80013ac:	f002 fa58 	bl	8003860 <HAL_UART_Transmit>
	aiInData[0] = cell_voltage;
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <checkStatusTransmit+0x320>)
 80013b2:	f8d8 2000 	ldr.w	r2, [r8]
 80013b6:	601a      	str	r2, [r3, #0]
	aiInData[1] = cell_current;
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80013bc:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <checkStatusTransmit+0x324>)
	batch = ai_network_run(network, ai_input, ai_output);
 80013be:	f8d9 0000 	ldr.w	r0, [r9]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	604b      	str	r3, [r1, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80013c6:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <checkStatusTransmit+0x328>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	6054      	str	r4, [r2, #4]
	batch = ai_network_run(network, ai_input, ai_output);
 80013cc:	f003 fa75 	bl	80048ba <ai_network_run>
	if (batch != 1){
 80013d0:	2801      	cmp	r0, #1
 80013d2:	d005      	beq.n	80013e0 <checkStatusTransmit+0x20c>
		err = ai_network_get_error(network);
 80013d4:	f8d9 0000 	ldr.w	r0, [r9]
 80013d8:	f003 f8e6 	bl	80045a8 <ai_network_get_error>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013de:	e7fe      	b.n	80013de <checkStatusTransmit+0x20a>
    soc = aiOutData[0];
 80013e0:	edd4 7a00 	vldr	s15, [r4]
 80013e4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8001518 <checkStatusTransmit+0x344>
	sprintf(IntPartStr, "%02X", intPart);
 80013e8:	493d      	ldr	r1, [pc, #244]	; (80014e0 <checkStatusTransmit+0x30c>)
    soc = aiOutData[0];
 80013ea:	edc9 7a00 	vstr	s15, [r9]
	intPart = (uint16_t)soc;
 80013ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 80013f2:	4628      	mov	r0, r5
 80013f4:	ee17 3a90 	vmov	r3, s15
 80013f8:	b29c      	uxth	r4, r3
 80013fa:	4622      	mov	r2, r4
 80013fc:	f007 fc60 	bl	8008cc0 <siprintf>
	fracPart = (uint16_t)((soc - intPart) * 100);
 8001400:	ee07 4a90 	vmov	s15, r4
 8001404:	ed99 7a00 	vldr	s14, [r9]
	sprintf(FracPartStr, "%02X", fracPart);
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((soc - intPart) * 100);
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800140e:	4630      	mov	r0, r6
	fracPart = (uint16_t)((soc - intPart) * 100);
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b29a      	uxth	r2, r3
 8001422:	f007 fc4d 	bl	8008cc0 <siprintf>
	sprintf(ResultStr, "5%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8001426:	ab04      	add	r3, sp, #16
 8001428:	aa03      	add	r2, sp, #12
 800142a:	e9cd 5600 	strd	r5, r6, [sp]
 800142e:	4934      	ldr	r1, [pc, #208]	; (8001500 <checkStatusTransmit+0x32c>)
 8001430:	a80b      	add	r0, sp, #44	; 0x2c
 8001432:	f007 fc45 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001436:	a90b      	add	r1, sp, #44	; 0x2c
 8001438:	2364      	movs	r3, #100	; 0x64
 800143a:	220b      	movs	r2, #11
 800143c:	4827      	ldr	r0, [pc, #156]	; (80014dc <checkStatusTransmit+0x308>)
 800143e:	f002 fa0f 	bl	8003860 <HAL_UART_Transmit>
	sop = cell_voltage * cell_current;
 8001442:	ed97 7a00 	vldr	s14, [r7]
 8001446:	edd8 7a00 	vldr	s15, [r8]
 800144a:	4f2e      	ldr	r7, [pc, #184]	; (8001504 <checkStatusTransmit+0x330>)
	sprintf(IntPartStr, "%02X", intPart);
 800144c:	4924      	ldr	r1, [pc, #144]	; (80014e0 <checkStatusTransmit+0x30c>)
	sop = cell_voltage * cell_current;
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
	sprintf(IntPartStr, "%02X", intPart);
 8001452:	4628      	mov	r0, r5
	sop = cell_voltage * cell_current;
 8001454:	edc7 7a00 	vstr	s15, [r7]
	intPart = (uint16_t)sop;
 8001458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 800145c:	ee17 3a90 	vmov	r3, s15
 8001460:	b29c      	uxth	r4, r3
 8001462:	4622      	mov	r2, r4
 8001464:	f007 fc2c 	bl	8008cc0 <siprintf>
	fracPart = (uint16_t)((sop - intPart) * 100);
 8001468:	ee07 4a90 	vmov	s15, r4
 800146c:	ed97 7a00 	vldr	s14, [r7]
	sprintf(FracPartStr, "%02X", fracPart);
 8001470:	491b      	ldr	r1, [pc, #108]	; (80014e0 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((sop - intPart) * 100);
 8001472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 8001476:	4630      	mov	r0, r6
	fracPart = (uint16_t)((sop - intPart) * 100);
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 8001484:	ee17 3a90 	vmov	r3, s15
 8001488:	b29a      	uxth	r2, r3
 800148a:	f007 fc19 	bl	8008cc0 <siprintf>
	sprintf(ResultStr, "6%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 800148e:	ab04      	add	r3, sp, #16
 8001490:	aa03      	add	r2, sp, #12
 8001492:	e9cd 5600 	strd	r5, r6, [sp]
 8001496:	491c      	ldr	r1, [pc, #112]	; (8001508 <checkStatusTransmit+0x334>)
 8001498:	a80b      	add	r0, sp, #44	; 0x2c
 800149a:	f007 fc11 	bl	8008cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	220b      	movs	r2, #11
 80014a2:	a90b      	add	r1, sp, #44	; 0x2c
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <checkStatusTransmit+0x308>)
 80014a6:	f002 f9db 	bl	8003860 <HAL_UART_Transmit>
}
 80014aa:	b00f      	add	sp, #60	; 0x3c
 80014ac:	ecbd 8b02 	vpop	{d8}
 80014b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014b4:	2000152c 	.word	0x2000152c
 80014b8:	20001534 	.word	0x20001534
 80014bc:	42c80000 	.word	0x42c80000
 80014c0:	20001540 	.word	0x20001540
 80014c4:	447a0000 	.word	0x447a0000
 80014c8:	0800b8f9 	.word	0x0800b8f9
 80014cc:	2000153c 	.word	0x2000153c
 80014d0:	435c0000 	.word	0x435c0000
 80014d4:	0800b8fd 	.word	0x0800b8fd
 80014d8:	0800b902 	.word	0x0800b902
 80014dc:	20001618 	.word	0x20001618
 80014e0:	0800b8f4 	.word	0x0800b8f4
 80014e4:	0800b908 	.word	0x0800b908
 80014e8:	0800b915 	.word	0x0800b915
 80014ec:	20001520 	.word	0x20001520
 80014f0:	0800b922 	.word	0x0800b922
 80014f4:	20001518 	.word	0x20001518
 80014f8:	20001524 	.word	0x20001524
 80014fc:	20001528 	.word	0x20001528
 8001500:	0800b92f 	.word	0x0800b92f
 8001504:	200016fc 	.word	0x200016fc
 8001508:	0800b93c 	.word	0x0800b93c
 800150c:	20001538 	.word	0x20001538
 8001510:	20001700 	.word	0x20001700
 8001514:	200016f0 	.word	0x200016f0
 8001518:	200016f8 	.word	0x200016f8

0800151c <SystemClock_Config>:
{
 800151c:	b510      	push	{r4, lr}
 800151e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001520:	2214      	movs	r2, #20
 8001522:	2100      	movs	r1, #0
 8001524:	a808      	add	r0, sp, #32
 8001526:	f007 fc2e 	bl	8008d86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152a:	2214      	movs	r2, #20
 800152c:	2100      	movs	r1, #0
 800152e:	a802      	add	r0, sp, #8
 8001530:	f007 fc29 	bl	8008d86 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SystemClock_Config+0xa0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800153c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001540:	6411      	str	r1, [r2, #64]	; 0x40
 8001542:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001544:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001548:	9200      	str	r2, [sp, #0]
 800154a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <SystemClock_Config+0xa4>)
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001556:	6011      	str	r1, [r2, #0]
 8001558:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155a:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001560:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001562:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001566:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001568:	23b4      	movs	r3, #180	; 0xb4
 800156a:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001572:	2101      	movs	r1, #1
 8001574:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f001 fe81 	bl	8003288 <HAL_RCC_OscConfig>
 8001586:	b108      	cbz	r0, 800158c <SystemClock_Config+0x70>
 8001588:	b672      	cpsid	i
  while (1)
 800158a:	e7fe      	b.n	800158a <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800158c:	f001 fd3a 	bl	8003004 <HAL_PWREx_EnableOverDrive>
 8001590:	b108      	cbz	r0, 8001596 <SystemClock_Config+0x7a>
 8001592:	b672      	cpsid	i
  while (1)
 8001594:	e7fe      	b.n	8001594 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a6:	2105      	movs	r1, #5
 80015a8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ae:	f001 fd63 	bl	8003078 <HAL_RCC_ClockConfig>
 80015b2:	b108      	cbz	r0, 80015b8 <SystemClock_Config+0x9c>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <SystemClock_Config+0x9a>
}
 80015b8:	b014      	add	sp, #80	; 0x50
 80015ba:	bd10      	pop	{r4, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000

080015c4 <main>:
{
 80015c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c8:	b0f1      	sub	sp, #452	; 0x1c4
  HAL_Init();
 80015ca:	f000 fc71 	bl	8001eb0 <HAL_Init>
        for (int i = 0; i < SERIES_CELL; i++) {
 80015ce:	2700      	movs	r7, #0
            module1[i] = initCellDefaults(1, i + 1);
 80015d0:	1c7b      	adds	r3, r7, #1
 80015d2:	a810      	add	r0, sp, #64	; 0x40
 80015d4:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	2101      	movs	r1, #1
 80015dc:	f7ff fcc0 	bl	8000f60 <initCellDefaults>
        for (int i = 0; i < SERIES_CELL; i++) {
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	461f      	mov	r7, r3
 80015e4:	d1f4      	bne.n	80015d0 <main+0xc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f04f 0814 	mov.w	r8, #20
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2400      	movs	r4, #0
  SystemClock_Config();
 80015ec:	f7ff ff96 	bl	800151c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4dab      	ldr	r5, [pc, #684]	; (80018a0 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	4642      	mov	r2, r8
 80015f4:	2100      	movs	r1, #0
 80015f6:	a806      	add	r0, sp, #24
 80015f8:	f007 fbc5 	bl	8008d86 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	9401      	str	r4, [sp, #4]
 80015fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_12, GPIO_PIN_RESET);
 8001600:	48a8      	ldr	r0, [pc, #672]	; (80018a4 <main+0x2e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	632b      	str	r3, [r5, #48]	; 0x30
 8001608:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	9402      	str	r4, [sp, #8]
 8001614:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161a:	632b      	str	r3, [r5, #48]	; 0x30
 800161c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	9403      	str	r4, [sp, #12]
 8001628:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	632b      	str	r3, [r5, #48]	; 0x30
 8001630:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	9303      	str	r3, [sp, #12]
 8001638:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	9404      	str	r4, [sp, #16]
 800163c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	632b      	str	r3, [r5, #48]	; 0x30
 8001644:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	9304      	str	r3, [sp, #16]
 800164c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	9405      	str	r4, [sp, #20]
 8001650:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	632b      	str	r3, [r5, #48]	; 0x30
 8001658:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_12, GPIO_PIN_RESET);
 8001660:	4622      	mov	r2, r4
 8001662:	f241 0108 	movw	r1, #4104	; 0x1008
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_12, GPIO_PIN_RESET);
 8001668:	f001 fcc6 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 800166c:	488e      	ldr	r0, [pc, #568]	; (80018a8 <main+0x2e4>)
 800166e:	4622      	mov	r2, r4
 8001670:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001674:	f001 fcc0 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001678:	4622      	mov	r2, r4
 800167a:	488c      	ldr	r0, [pc, #560]	; (80018ac <main+0x2e8>)
 800167c:	f240 1161 	movw	r1, #353	; 0x161
 8001680:	f001 fcba 	bl	8002ff8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001684:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001688:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	4885      	ldr	r0, [pc, #532]	; (80018a4 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001690:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001692:	e9cd 6306 	strd	r6, r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001696:	f001 fbd5 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 800169a:	f240 2307 	movw	r3, #519	; 0x207
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	4881      	ldr	r0, [pc, #516]	; (80018a4 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016aa:	f001 fbcb 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	f241 0308 	movw	r3, #4104	; 0x1008
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	487c      	ldr	r0, [pc, #496]	; (80018a4 <main+0x2e0>)
 80016b4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f001 fbc1 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80016c2:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	4878      	ldr	r0, [pc, #480]	; (80018a8 <main+0x2e4>)
 80016c8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f001 fbb7 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80016d6:	f240 1361 	movw	r3, #353	; 0x161
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	4874      	ldr	r0, [pc, #464]	; (80018ac <main+0x2e8>)
 80016dc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f001 fbad 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 80016ea:	f44f 4303 	mov.w	r3, #33536	; 0x8300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	486e      	ldr	r0, [pc, #440]	; (80018a8 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f8:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f001 fba2 	bl	8002e44 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001700:	486b      	ldr	r0, [pc, #428]	; (80018b0 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	e9cd a406 	strd	sl, r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	f001 fb9b 	bl	8002e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_9;
 800170e:	f44f 7324 	mov.w	r3, #656	; 0x290
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	4866      	ldr	r0, [pc, #408]	; (80018ac <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f001 fb92 	bl	8002e44 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001720:	9400      	str	r4, [sp, #0]
 8001722:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001728:	632b      	str	r3, [r5, #48]	; 0x30
 800172a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 800172c:	4d61      	ldr	r5, [pc, #388]	; (80018b4 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001732:	4622      	mov	r2, r4
 8001734:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001738:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173a:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173c:	f001 f940 	bl	80029c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001740:	2038      	movs	r0, #56	; 0x38
 8001742:	f001 f96f 	bl	8002a24 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001746:	2210      	movs	r2, #16
 8001748:	4621      	mov	r1, r4
 800174a:	a806      	add	r0, sp, #24
 800174c:	f007 fb1b 	bl	8008d86 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <main+0x2f4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001752:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001754:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8001758:	e9c5 3900 	strd	r3, r9, [r5]
  hadc1.Init.NbrOfConversion = 3;
 800175c:	f04f 0b03 	mov.w	fp, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001760:	4b56      	ldr	r3, [pc, #344]	; (80018bc <main+0x2f8>)
  hadc1.Init.ScanConvMode = ENABLE;
 8001762:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	4628      	mov	r0, r5
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001766:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001768:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176c:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001770:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001772:	f8c5 b01c 	str.w	fp, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001776:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800177a:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800177c:	f000 fbea 	bl	8001f54 <HAL_ADC_Init>
 8001780:	b108      	cbz	r0, 8001786 <main+0x1c2>
 8001782:	b672      	cpsid	i
  while (1)
 8001784:	e7fe      	b.n	8001784 <main+0x1c0>
  sConfig.Rank = 1;
 8001786:	e9cd 0606 	strd	r0, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800178a:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	a906      	add	r1, sp, #24
 800178e:	4628      	mov	r0, r5
 8001790:	f000 fdd2 	bl	8002338 <HAL_ADC_ConfigChannel>
 8001794:	b108      	cbz	r0, 800179a <main+0x1d6>
 8001796:	b672      	cpsid	i
  while (1)
 8001798:	e7fe      	b.n	8001798 <main+0x1d4>
  sConfig.Rank = 2;
 800179a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	a906      	add	r1, sp, #24
 800179e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80017a0:	9606      	str	r6, [sp, #24]
  sConfig.Rank = 2;
 80017a2:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a4:	f000 fdc8 	bl	8002338 <HAL_ADC_ConfigChannel>
 80017a8:	b108      	cbz	r0, 80017ae <main+0x1ea>
 80017aa:	b672      	cpsid	i
  while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0x1e8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ae:	a906      	add	r1, sp, #24
 80017b0:	4628      	mov	r0, r5
  sConfig.Rank = 3;
 80017b2:	e9cd ab06 	strd	sl, fp, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	f000 fdbf 	bl	8002338 <HAL_ADC_ConfigChannel>
 80017ba:	b108      	cbz	r0, 80017c0 <main+0x1fc>
 80017bc:	b672      	cpsid	i
  while (1)
 80017be:	e7fe      	b.n	80017be <main+0x1fa>
  hcan1.Instance = CAN1;
 80017c0:	4c3f      	ldr	r4, [pc, #252]	; (80018c0 <main+0x2fc>)
  hcan1.Init.Prescaler = 18;
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <main+0x300>)
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017c4:	83a0      	strh	r0, [r4, #28]
  hcan1.Init.Prescaler = 18;
 80017c6:	2512      	movs	r5, #18
 80017c8:	e9c4 3500 	strd	r3, r5, [r4]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017d0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017d4:	e9c4 3005 	strd	r3, r0, [r4, #20]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017d8:	4620      	mov	r0, r4
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017da:	f8c4 9010 	str.w	r9, [r4, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017de:	f000 fe45 	bl	800246c <HAL_CAN_Init>
 80017e2:	b108      	cbz	r0, 80017e8 <main+0x224>
 80017e4:	b672      	cpsid	i
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <main+0x222>
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 80017e8:	f242 0360 	movw	r3, #8288	; 0x2060
  canfilterconfig.FilterIdLow = 0;
 80017ec:	e9cd 3006 	strd	r3, r0, [sp, #24]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80017f0:	e9cd 3008 	strd	r3, r0, [sp, #32]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017f4:	e9cd 050a 	strd	r0, r5, [sp, #40]	; 0x28
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017f8:	e9cd 060c 	strd	r0, r6, [sp, #48]	; 0x30
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80017fc:	a906      	add	r1, sp, #24
 80017fe:	4620      	mov	r0, r4
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001800:	960e      	str	r6, [sp, #56]	; 0x38
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001802:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001806:	f000 fead 	bl	8002564 <HAL_CAN_ConfigFilter>
  hcrc.Instance = CRC;
 800180a:	482f      	ldr	r0, [pc, #188]	; (80018c8 <main+0x304>)
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <main+0x308>)
 800180e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001810:	f001 f92a 	bl	8002a68 <HAL_CRC_Init>
 8001814:	b108      	cbz	r0, 800181a <main+0x256>
 8001816:	b672      	cpsid	i
  while (1)
 8001818:	e7fe      	b.n	8001818 <main+0x254>
  huart3.Instance = USART3;
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <main+0x30c>)
  huart3.Init.BaudRate = 100000;
 800181c:	4c2d      	ldr	r4, [pc, #180]	; (80018d4 <main+0x310>)
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001820:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001824:	e9c3 0704 	strd	r0, r7, [r3, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	e9c3 0006 	strd	r0, r0, [r3, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800182c:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 100000;
 800182e:	e9c3 4200 	strd	r4, r2, [r3]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001832:	f001 ffb3 	bl	800379c <HAL_UART_Init>
 8001836:	b108      	cbz	r0, 800183c <main+0x278>
 8001838:	b672      	cpsid	i
  while (1)
 800183a:	e7fe      	b.n	800183a <main+0x276>
  huart4.Instance = UART4;
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <main+0x318>)
  huart4.Init.BaudRate = 1000000;
 800183e:	4928      	ldr	r1, [pc, #160]	; (80018e0 <main+0x31c>)
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <main+0x320>)
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001842:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001846:	e9c3 0704 	strd	r0, r7, [r3, #16]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800184a:	e9c3 0006 	strd	r0, r0, [r3, #24]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800184e:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 1000000;
 8001850:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8001854:	f001 ffd1 	bl	80037fa <HAL_HalfDuplex_Init>
 8001858:	4604      	mov	r4, r0
 800185a:	b108      	cbz	r0, 8001860 <main+0x29c>
 800185c:	b672      	cpsid	i
  while (1)
 800185e:	e7fe      	b.n	800185e <main+0x29a>
  MX_X_CUBE_AI_Init();
 8001860:	f002 fbb2 	bl	8003fc8 <MX_X_CUBE_AI_Init>
	const ai_handle act_addr[] = { activations };
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <main+0x324>)
	err = ai_network_create_and_init(&network, act_addr, NULL);
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <main+0x328>)
	const ai_handle act_addr[] = { activations };
 8001868:	9306      	str	r3, [sp, #24]
	err = ai_network_create_and_init(&network, act_addr, NULL);
 800186a:	4622      	mov	r2, r4
 800186c:	a906      	add	r1, sp, #24
 800186e:	f002 ffdd 	bl	800482c <ai_network_create_and_init>
	if (err.type != AI_ERROR_NONE){
 8001872:	b2c0      	uxtb	r0, r0
 8001874:	b108      	cbz	r0, 800187a <main+0x2b6>
 8001876:	b672      	cpsid	i
  while (1)
 8001878:	e7fe      	b.n	8001878 <main+0x2b4>
	ai_input = ai_network_inputs_get(network, NULL);
 800187a:	4d1c      	ldr	r5, [pc, #112]	; (80018ec <main+0x328>)
 800187c:	4c1c      	ldr	r4, [pc, #112]	; (80018f0 <main+0x32c>)
 800187e:	6828      	ldr	r0, [r5, #0]
 8001880:	2100      	movs	r1, #0
 8001882:	f002 fea1 	bl	80045c8 <ai_network_inputs_get>
	ai_output = ai_network_outputs_get(network, NULL);
 8001886:	2100      	movs	r1, #0
	ai_input = ai_network_inputs_get(network, NULL);
 8001888:	6020      	str	r0, [r4, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 800188a:	6828      	ldr	r0, [r5, #0]
 800188c:	f002 fea6 	bl	80045dc <ai_network_outputs_get>
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <main+0x330>)
 8001892:	6018      	str	r0, [r3, #0]
	if (ai_input == NULL || ai_output == NULL) {
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	b103      	cbz	r3, 800189a <main+0x2d6>
 8001898:	bb70      	cbnz	r0, 80018f8 <main+0x334>
 800189a:	b672      	cpsid	i
  while (1)
 800189c:	e7fe      	b.n	800189c <main+0x2d8>
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	20001540 	.word	0x20001540
 80018b8:	40012000 	.word	0x40012000
 80018bc:	0f000001 	.word	0x0f000001
 80018c0:	20001588 	.word	0x20001588
 80018c4:	40006400 	.word	0x40006400
 80018c8:	200015b0 	.word	0x200015b0
 80018cc:	40023000 	.word	0x40023000
 80018d0:	20001660 	.word	0x20001660
 80018d4:	40004800 	.word	0x40004800
 80018d8:	000186a0 	.word	0x000186a0
 80018dc:	200016a8 	.word	0x200016a8
 80018e0:	40004c00 	.word	0x40004c00
 80018e4:	000f4240 	.word	0x000f4240
 80018e8:	20000e10 	.word	0x20000e10
 80018ec:	200016f0 	.word	0x200016f0
 80018f0:	20001524 	.word	0x20001524
 80018f4:	20001528 	.word	0x20001528
  HAL_CAN_Start(&hcan1);
 80018f8:	484d      	ldr	r0, [pc, #308]	; (8001a30 <main+0x46c>)
 80018fa:	f000 feb9 	bl	8002670 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80018fe:	2102      	movs	r1, #2
 8001900:	484b      	ldr	r0, [pc, #300]	; (8001a30 <main+0x46c>)
 8001902:	f000 ff2f 	bl	8002764 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; // data length
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <main+0x470>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001908:	484b      	ldr	r0, [pc, #300]	; (8001a38 <main+0x474>)
  TxHeader.DLC = 2; // data length
 800190a:	2202      	movs	r2, #2
 800190c:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x446; // ID
 800190e:	f240 4246 	movw	r2, #1094	; 0x446
 8001912:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001914:	2120      	movs	r1, #32
 8001916:	2201      	movs	r2, #1
  TxHeader.IDE = CAN_ID_STD;
 8001918:	2400      	movs	r4, #0
  TxHeader.RTR = CAN_RTR_DATA;
 800191a:	e9c3 4402 	strd	r4, r4, [r3, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800191e:	f001 fb6b 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f000 faef 	bl	8001f08 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800192a:	4843      	ldr	r0, [pc, #268]	; (8001a38 <main+0x474>)
 800192c:	4622      	mov	r2, r4
 800192e:	2120      	movs	r1, #32
 8001930:	f001 fb62 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	4840      	ldr	r0, [pc, #256]	; (8001a3c <main+0x478>)
 800193a:	f001 fb5d 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800193e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001942:	f000 fae1 	bl	8001f08 <HAL_Delay>
  success = startupSequence();
 8001946:	f7ff fb57 	bl	8000ff8 <startupSequence>
  if (success == -1) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); }
 800194a:	3001      	adds	r0, #1
 800194c:	d104      	bne.n	8001958 <main+0x394>
 800194e:	483a      	ldr	r0, [pc, #232]	; (8001a38 <main+0x474>)
 8001950:	2201      	movs	r2, #1
 8001952:	2120      	movs	r1, #32
 8001954:	f001 fb50 	bl	8002ff8 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8001958:	4c37      	ldr	r4, [pc, #220]	; (8001a38 <main+0x474>)
		  sprintf(FaultStr, "%05X", Fault);
 800195a:	4f39      	ldr	r7, [pc, #228]	; (8001a40 <main+0x47c>)
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 800195c:	4e39      	ldr	r6, [pc, #228]	; (8001a44 <main+0x480>)
	  for (int i = 0; i < sizeof(module1) / sizeof(module1[0]); i++){
 800195e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8001962:	2500      	movs	r5, #0
          checkStatusTransmit(&module1[i]);
 8001964:	4640      	mov	r0, r8
	  for (int i = 0; i < sizeof(module1) / sizeof(module1[0]); i++){
 8001966:	3501      	adds	r5, #1
          checkStatusTransmit(&module1[i]);
 8001968:	f7ff fc34 	bl	80011d4 <checkStatusTransmit>
	  for (int i = 0; i < sizeof(module1) / sizeof(module1[0]); i++){
 800196c:	2d0c      	cmp	r5, #12
 800196e:	f108 0820 	add.w	r8, r8, #32
 8001972:	d1f7      	bne.n	8001964 <main+0x3a0>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8001974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001978:	4620      	mov	r0, r4
 800197a:	f001 fb37 	bl	8002fec <HAL_GPIO_ReadPin>
 800197e:	b330      	cbz	r0, 80019ce <main+0x40a>
 8001980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001984:	4620      	mov	r0, r4
 8001986:	f001 fb31 	bl	8002fec <HAL_GPIO_ReadPin>
 800198a:	4605      	mov	r5, r0
 800198c:	b9f8      	cbnz	r0, 80019ce <main+0x40a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800198e:	2201      	movs	r2, #1
 8001990:	2140      	movs	r1, #64	; 0x40
 8001992:	4620      	mov	r0, r4
 8001994:	f001 fb30 	bl	8002ff8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	f000 fab5 	bl	8001f08 <HAL_Delay>
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 800199e:	2301      	movs	r3, #1
		  Fault = getCellFaults(&module1[0]);
 80019a0:	a810      	add	r0, sp, #64	; 0x40
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 80019a2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		  Fault = getCellFaults(&module1[0]);
 80019a6:	f7ff fae6 	bl	8000f76 <getCellFaults>
		  sprintf(FaultStr, "%05X", Fault);
 80019aa:	4639      	mov	r1, r7
		  Fault = getCellFaults(&module1[0]);
 80019ac:	4602      	mov	r2, r0
		  sprintf(FaultStr, "%05X", Fault);
 80019ae:	a806      	add	r0, sp, #24
 80019b0:	f007 f986 	bl	8008cc0 <siprintf>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 80019b4:	491f      	ldr	r1, [pc, #124]	; (8001a34 <main+0x470>)
 80019b6:	481e      	ldr	r0, [pc, #120]	; (8001a30 <main+0x46c>)
 80019b8:	aa06      	add	r2, sp, #24
 80019ba:	4633      	mov	r3, r6
 80019bc:	f000 fe86 	bl	80026cc <HAL_CAN_AddTxMessage>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80019c0:	462a      	mov	r2, r5
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4620      	mov	r0, r4
            cell->over_current = false;
 80019c6:	f88d 505e 	strb.w	r5, [sp, #94]	; 0x5e
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80019ca:	f001 fb15 	bl	8002ff8 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 80019ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d2:	4620      	mov	r0, r4
 80019d4:	f001 fb0a 	bl	8002fec <HAL_GPIO_ReadPin>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d0c0      	beq.n	800195e <main+0x39a>
 80019dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e0:	4620      	mov	r0, r4
 80019e2:	f001 fb03 	bl	8002fec <HAL_GPIO_ReadPin>
 80019e6:	4605      	mov	r5, r0
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1b8      	bne.n	800195e <main+0x39a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	4620      	mov	r0, r4
 80019f2:	f001 fb01 	bl	8002ff8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80019f6:	2064      	movs	r0, #100	; 0x64
 80019f8:	f000 fa86 	bl	8001f08 <HAL_Delay>
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 80019fc:	2301      	movs	r3, #1
		  Fault = getCellFaults(&module1[0]);
 80019fe:	a810      	add	r0, sp, #64	; 0x40
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 8001a00:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
		  Fault = getCellFaults(&module1[0]);
 8001a04:	f7ff fab7 	bl	8000f76 <getCellFaults>
		  sprintf(FaultStr, "%05X", Fault);
 8001a08:	4639      	mov	r1, r7
		  Fault = getCellFaults(&module1[0]);
 8001a0a:	4602      	mov	r2, r0
		  sprintf(FaultStr, "%05X", Fault);
 8001a0c:	a806      	add	r0, sp, #24
 8001a0e:	f007 f957 	bl	8008cc0 <siprintf>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8001a12:	aa06      	add	r2, sp, #24
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <main+0x470>)
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <main+0x46c>)
 8001a18:	4633      	mov	r3, r6
 8001a1a:	f000 fe57 	bl	80026cc <HAL_CAN_AddTxMessage>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001a1e:	462a      	mov	r2, r5
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	4620      	mov	r0, r4
            cell->over_temp = false;
 8001a24:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001a28:	f001 fae6 	bl	8002ff8 <HAL_GPIO_WritePin>
 8001a2c:	e797      	b.n	800195e <main+0x39a>
 8001a2e:	bf00      	nop
 8001a30:	20001588 	.word	0x20001588
 8001a34:	20000df4 	.word	0x20000df4
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	0800b949 	.word	0x0800b949
 8001a44:	20000e0c 	.word	0x20000e0c

08001a48 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 9600;
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <MX_USART2_UART_Init+0x30>)
{
 8001a4c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 9600;
 8001a4e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a52:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a58:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a66:	f001 fe99 	bl	800379c <HAL_UART_Init>
 8001a6a:	b108      	cbz	r0, 8001a70 <MX_USART2_UART_Init+0x28>
 8001a6c:	b672      	cpsid	i
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <MX_USART2_UART_Init+0x26>
}
 8001a70:	bd08      	pop	{r3, pc}
 8001a72:	bf00      	nop
 8001a74:	20001618 	.word	0x20001618
 8001a78:	40004400 	.word	0x40004400

08001a7c <Error_Handler>:
 8001a7c:	b672      	cpsid	i
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <Error_Handler+0x2>

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_MspInit+0x38>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	9100      	str	r1, [sp, #0]
 8001a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a96:	9200      	str	r2, [sp, #0]
 8001a98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	9101      	str	r1, [sp, #4]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aae:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ab2:	f000 bf73 	b.w	800299c <HAL_NVIC_SetPriorityGrouping>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	4606      	mov	r6, r0
 8001ac0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	2214      	movs	r2, #20
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	a803      	add	r0, sp, #12
 8001ac8:	f007 f95d 	bl	8008d86 <memset>
  if(hadc->Instance==ADC1)
 8001acc:	6832      	ldr	r2, [r6, #0]
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_ADC_MspInit+0x94>)
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d13a      	bne.n	8001b4a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ad4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ad8:	2500      	movs	r5, #0
 8001ada:	9501      	str	r5, [sp, #4]
 8001adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	481d      	ldr	r0, [pc, #116]	; (8001b54 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae0:	4c1d      	ldr	r4, [pc, #116]	; (8001b58 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001aee:	9201      	str	r2, [sp, #4]
 8001af0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	9502      	str	r5, [sp, #8]
 8001af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2213      	movs	r2, #19
 8001b08:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f001 f998 	bl	8002e44 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b1a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b26:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b32:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b34:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b38:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b3c:	f000 ffba 	bl	8002ab4 <HAL_DMA_Init>
 8001b40:	b108      	cbz	r0, 8001b46 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001b42:	f7ff ff9b 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b46:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b48:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4a:	b008      	add	sp, #32
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40020000 	.word	0x40020000
 8001b58:	200015b8 	.word	0x200015b8
 8001b5c:	40026410 	.word	0x40026410

08001b60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b60:	b510      	push	{r4, lr}
 8001b62:	4604      	mov	r4, r0
 8001b64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	2214      	movs	r2, #20
 8001b68:	2100      	movs	r1, #0
 8001b6a:	a803      	add	r0, sp, #12
 8001b6c:	f007 f90b 	bl	8008d86 <memset>
  if(hcan->Instance==CAN1)
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_CAN_MspInit+0x74>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d12b      	bne.n	8001bd0 <HAL_CAN_MspInit+0x70>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b78:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	9401      	str	r4, [sp, #4]
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <HAL_CAN_MspInit+0x78>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b84:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	2309      	movs	r3, #9
 8001bb6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	a903      	add	r1, sp, #12
 8001bbc:	f001 f942 	bl	8002e44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001bc0:	2014      	movs	r0, #20
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	f000 fefb 	bl	80029c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bca:	2014      	movs	r0, #20
 8001bcc:	f000 ff2a 	bl	8002a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bd0:	b008      	add	sp, #32
 8001bd2:	bd10      	pop	{r4, pc}
 8001bd4:	40006400 	.word	0x40006400
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_CRC_MspInit+0x28>)
 8001be0:	429a      	cmp	r2, r3
{
 8001be2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001be4:	d10b      	bne.n	8001bfe <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_CRC_MspInit+0x2c>)
 8001bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bfe:	b002      	add	sp, #8
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023000 	.word	0x40023000
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	4604      	mov	r4, r0
 8001c10:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	2214      	movs	r2, #20
 8001c14:	2100      	movs	r1, #0
 8001c16:	a807      	add	r0, sp, #28
 8001c18:	f007 f8b5 	bl	8008d86 <memset>
  if(huart->Instance==UART4)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <HAL_UART_MspInit+0x160>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d138      	bne.n	8001c96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c24:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	4853      	ldr	r0, [pc, #332]	; (8001d74 <HAL_UART_MspInit+0x168>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c28:	2400      	movs	r4, #0
 8001c2a:	9400      	str	r4, [sp, #0]
 8001c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
 8001c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c36:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	9401      	str	r4, [sp, #4]
 8001c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c42:	f042 0204 	orr.w	r2, r2, #4
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c56:	2603      	movs	r6, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c5a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c62:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c66:	f001 f8ed 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c70:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	483f      	ldr	r0, [pc, #252]	; (8001d74 <HAL_UART_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c76:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f001 f8e1 	bl	8002e44 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c82:	2034      	movs	r0, #52	; 0x34
 8001c84:	4622      	mov	r2, r4
 8001c86:	4621      	mov	r1, r4
 8001c88:	f000 fe9a 	bl	80029c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c8c:	2034      	movs	r0, #52	; 0x34
 8001c8e:	f000 fec9 	bl	8002a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c92:	b00d      	add	sp, #52	; 0x34
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_UART_MspInit+0x16c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d12d      	bne.n	8001cf8 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_UART_MspInit+0x164>)
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	4837      	ldr	r0, [pc, #220]	; (8001d7c <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	9102      	str	r1, [sp, #8]
 8001ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	9103      	str	r1, [sp, #12]
 8001cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	9303      	str	r3, [sp, #12]
 8001cc8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2602      	movs	r6, #2
 8001ccc:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2503      	movs	r5, #3
 8001cd0:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f001 f8b2 	bl	8002e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001ce0:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001cec:	4823      	ldr	r0, [pc, #140]	; (8001d7c <HAL_UART_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f001 f8a7 	bl	8002e44 <HAL_GPIO_Init>
}
 8001cf6:	e7cc      	b.n	8001c92 <HAL_UART_MspInit+0x86>
  else if(huart->Instance==USART3)
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_UART_MspInit+0x174>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d1c9      	bne.n	8001c92 <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x164>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	481c      	ldr	r0, [pc, #112]	; (8001d74 <HAL_UART_MspInit+0x168>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d02:	2400      	movs	r4, #0
 8001d04:	9404      	str	r4, [sp, #16]
 8001d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d10:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001d14:	9204      	str	r2, [sp, #16]
 8001d16:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d18:	9405      	str	r4, [sp, #20]
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
 8001d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d24:	f002 0204 	and.w	r2, r2, #4
 8001d28:	9205      	str	r2, [sp, #20]
 8001d2a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	9406      	str	r4, [sp, #24]
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d30:	f042 0202 	orr.w	r2, r2, #2
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	9306      	str	r3, [sp, #24]
 8001d3e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2702      	movs	r7, #2
 8001d42:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d44:	2603      	movs	r6, #3
 8001d46:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d48:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d4e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f001 f877 	bl	8002e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <HAL_UART_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d64:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	a907      	add	r1, sp, #28
 8001d68:	e7c3      	b.n	8001cf2 <HAL_UART_MspInit+0xe6>
 8001d6a:	bf00      	nop
 8001d6c:	40004c00 	.word	0x40004c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40004800 	.word	0x40004800
 8001d84:	40020400 	.word	0x40020400

08001d88 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler>

08001d8a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler>

08001d8c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler>

08001d8e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler>

08001d90 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler>

08001d92 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 b8a4 	b.w	8001ee4 <HAL_IncTick>

08001d9c <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <CAN1_RX0_IRQHandler+0x8>)
 8001d9e:	f000 bcff 	b.w	80027a0 <HAL_CAN_IRQHandler>
 8001da2:	bf00      	nop
 8001da4:	20001588 	.word	0x20001588

08001da8 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <UART4_IRQHandler+0x8>)
 8001daa:	f001 be0f 	b.w	80039cc <HAL_UART_IRQHandler>
 8001dae:	bf00      	nop
 8001db0:	200016a8 	.word	0x200016a8

08001db4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <DMA2_Stream0_IRQHandler+0x8>)
 8001db6:	f000 bf87 	b.w	8002cc8 <HAL_DMA_IRQHandler>
 8001dba:	bf00      	nop
 8001dbc:	200015b8 	.word	0x200015b8

08001dc0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <_sbrk+0x30>)
 8001dc2:	6811      	ldr	r1, [r2, #0]
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001dc8:	b909      	cbnz	r1, 8001dce <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <_sbrk+0x34>)
 8001dcc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	6810      	ldr	r0, [r2, #0]
 8001dd0:	4909      	ldr	r1, [pc, #36]	; (8001df8 <_sbrk+0x38>)
 8001dd2:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <_sbrk+0x3c>)
 8001dd4:	4403      	add	r3, r0
 8001dd6:	1b09      	subs	r1, r1, r4
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d906      	bls.n	8001dea <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001ddc:	f007 f836 	bl	8008e4c <__errno>
 8001de0:	230c      	movs	r3, #12
 8001de2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001de8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001dea:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001dec:	e7fc      	b.n	8001de8 <_sbrk+0x28>
 8001dee:	bf00      	nop
 8001df0:	20001704 	.word	0x20001704
 8001df4:	20001908 	.word	0x20001908
 8001df8:	20020000 	.word	0x20020000
 8001dfc:	00000800 	.word	0x00000800

08001e00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <SystemInit+0x10>)
 8001e02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e18:	f7ff fff2 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f007 f809 	bl	8008e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff fbbd 	bl	80015c4 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000dd8 	.word	0x20000dd8
  ldr r2, =_sidata
 8001e58:	0803e45c 	.word	0x0803e45c
  ldr r2, =_sbss
 8001e5c:	20000dd8 	.word	0x20000dd8
  ldr r4, =_ebss
 8001e60:	20001908 	.word	0x20001908

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_InitTick+0x3c>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_InitTick+0x40>)
{
 8001e78:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7a:	6810      	ldr	r0, [r2, #0]
 8001e7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e80:	f000 fdde 	bl	8002a40 <HAL_SYSTICK_Config>
 8001e84:	4604      	mov	r4, r0
 8001e86:	b958      	cbnz	r0, 8001ea0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e88:	2d0f      	cmp	r5, #15
 8001e8a:	d809      	bhi.n	8001ea0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 fd94 	bl	80029c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_InitTick+0x44>)
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	e7fc      	b.n	8001e9e <HAL_InitTick+0x36>
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_Init>:
{
 8001eb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_Init+0x30>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 fd65 	bl	800299c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ffc8 	bl	8001e68 <HAL_InitTick>
  HAL_MspInit();
 8001ed8:	f7ff fdd2 	bl	8001a80 <HAL_MspInit>
}
 8001edc:	2000      	movs	r0, #0
 8001ede:	bd08      	pop	{r3, pc}
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ee4:	4a03      	ldr	r2, [pc, #12]	; (8001ef4 <HAL_IncTick+0x10>)
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_IncTick+0x14>)
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	440b      	add	r3, r1
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20001708 	.word	0x20001708
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001efc:	4b01      	ldr	r3, [pc, #4]	; (8001f04 <HAL_GetTick+0x8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20001708 	.word	0x20001708

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff fff6 	bl	8001efc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f10:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001f12:	bf1c      	itt	ne
 8001f14:	4b05      	ldrne	r3, [pc, #20]	; (8001f2c <HAL_Delay+0x24>)
 8001f16:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	bf18      	it	ne
 8001f1c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1e:	f7ff ffed 	bl	8001efc <HAL_GetTick>
 8001f22:	1b43      	subs	r3, r0, r5
 8001f24:	42a3      	cmp	r3, r4
 8001f26:	d3fa      	bcc.n	8001f1e <HAL_Delay+0x16>
  {
  }
}
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001f30:	4800      	ldr	r0, [pc, #0]	; (8001f34 <HAL_GetHalVersion+0x4>)
 8001f32:	4770      	bx	lr
 8001f34:	01080200 	.word	0x01080200

08001f38 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <HAL_GetREVID+0x8>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
}
 8001f3c:	0c00      	lsrs	r0, r0, #16
 8001f3e:	4770      	bx	lr
 8001f40:	e0042000 	.word	0xe0042000

08001f44 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_GetDEVID+0xc>)
 8001f46:	6818      	ldr	r0, [r3, #0]
}
 8001f48:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e0042000 	.word	0xe0042000

08001f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f56:	4604      	mov	r4, r0
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	f000 809b 	beq.w	8002094 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f5e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001f60:	b925      	cbnz	r5, 8001f6c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f62:	f7ff fdab 	bl	8001abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	6465      	str	r5, [r4, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f68:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f6e:	06db      	lsls	r3, r3, #27
 8001f70:	f100 808e 	bmi.w	8002090 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f84:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_ADC_Init+0x144>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f8c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	6861      	ldr	r1, [r4, #4]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f98:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fa8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001faa:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fac:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fae:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fba:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fbc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fca:	4934      	ldr	r1, [pc, #208]	; (800209c <HAL_ADC_Init+0x148>)
 8001fcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fce:	428a      	cmp	r2, r1
 8001fd0:	d052      	beq.n	8002078 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001fd8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fe2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fee:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	f022 0202 	bic.w	r2, r2, #2
 8001ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	7e21      	ldrb	r1, [r4, #24]
 8001ffc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002000:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002002:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002006:	2a00      	cmp	r2, #0
 8002008:	d03e      	beq.n	8002088 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800200a:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800200c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800200e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800201a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	3901      	subs	r1, #1
 8002020:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002024:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002028:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800202a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	3901      	subs	r1, #1
 8002034:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002048:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800204c:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800204e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002050:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002058:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800205a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800205c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002060:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002062:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002070:	2300      	movs	r3, #0
 8002072:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002076:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800207e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002086:	e7b2      	b.n	8001fee <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	e7c9      	b.n	8002024 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8002090:	2001      	movs	r0, #1
 8002092:	e7ed      	b.n	8002070 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
 8002096:	e7ee      	b.n	8002076 <HAL_ADC_Init+0x122>
 8002098:	40012300 	.word	0x40012300
 800209c:	0f000001 	.word	0x0f000001

080020a0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a0:	6803      	ldr	r3, [r0, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	0552      	lsls	r2, r2, #21
{
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	4604      	mov	r4, r0
 80020aa:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020ac:	d50b      	bpl.n	80020c6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020ae:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020b0:	05de      	lsls	r6, r3, #23
 80020b2:	d508      	bpl.n	80020c6 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80020bc:	2300      	movs	r3, #0
 80020be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
}
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80020c6:	f7ff ff19 	bl	8001efc <HAL_GetTick>
 80020ca:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	0791      	lsls	r1, r2, #30
 80020d2:	d50c      	bpl.n	80020ee <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020d4:	f06f 0212 	mvn.w	r2, #18
 80020d8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e0:	6422      	str	r2, [r4, #64]	; 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020e8:	d017      	beq.n	800211a <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 80020ea:	2000      	movs	r0, #0
 80020ec:	e7ea      	b.n	80020c4 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	1c68      	adds	r0, r5, #1
 80020f0:	d0ed      	beq.n	80020ce <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020f2:	b965      	cbnz	r5, 800210e <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f013 0302 	ands.w	r3, r3, #2
 80020fc:	d1e6      	bne.n	80020cc <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8002100:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002104:	f042 0204 	orr.w	r2, r2, #4
 8002108:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 800210a:	2003      	movs	r0, #3
 800210c:	e7da      	b.n	80020c4 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800210e:	f7ff fef5 	bl	8001efc <HAL_GetTick>
 8002112:	1b80      	subs	r0, r0, r6
 8002114:	42a8      	cmp	r0, r5
 8002116:	d8ed      	bhi.n	80020f4 <HAL_ADC_PollForConversion+0x54>
 8002118:	e7d8      	b.n	80020cc <HAL_ADC_PollForConversion+0x2c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800211a:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211c:	2800      	cmp	r0, #0
 800211e:	d1e4      	bne.n	80020ea <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002122:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002126:	d002      	beq.n	800212e <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002128:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800212a:	055a      	lsls	r2, r3, #21
 800212c:	d4dd      	bmi.n	80020ea <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800212e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002134:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002138:	04db      	lsls	r3, r3, #19
 800213a:	d4d6      	bmi.n	80020ea <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6423      	str	r3, [r4, #64]	; 0x40
 8002144:	e7be      	b.n	80020c4 <HAL_ADC_PollForConversion+0x24>
	...

08002148 <HAL_ADC_Start_DMA>:
{
 8002148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800214a:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800214c:	2200      	movs	r2, #0
 800214e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002150:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002154:	2a01      	cmp	r2, #1
{
 8002156:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002158:	f000 8092 	beq.w	8002280 <HAL_ADC_Start_DMA+0x138>
 800215c:	2201      	movs	r2, #1
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800215e:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8002160:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002164:	68b2      	ldr	r2, [r6, #8]
 8002166:	07d4      	lsls	r4, r2, #31
 8002168:	d554      	bpl.n	8002214 <HAL_ADC_Start_DMA+0xcc>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800216a:	68b2      	ldr	r2, [r6, #8]
 800216c:	05d0      	lsls	r0, r2, #23
 800216e:	d464      	bmi.n	800223a <HAL_ADC_Start_DMA+0xf2>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002170:	68b4      	ldr	r4, [r6, #8]
 8002172:	f014 0401 	ands.w	r4, r4, #1
 8002176:	d079      	beq.n	800226c <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 8002178:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800217a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800217e:	f020 0001 	bic.w	r0, r0, #1
 8002182:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002186:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002188:	6872      	ldr	r2, [r6, #4]
 800218a:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218c:	bf41      	itttt	mi
 800218e:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8002190:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002194:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002198:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a2:	bf1c      	itt	ne
 80021a4:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80021a6:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80021aa:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80021ac:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ae:	4a35      	ldr	r2, [pc, #212]	; (8002284 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);
 80021b0:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b4:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b6:	4a34      	ldr	r2, [pc, #208]	; (8002288 <HAL_ADC_Start_DMA+0x140>)
 80021b8:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ba:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_ADC_Start_DMA+0x144>)
 80021bc:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021c2:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c4:	6872      	ldr	r2, [r6, #4]
 80021c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ca:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021cc:	68b2      	ldr	r2, [r6, #8]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d2:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021d4:	460a      	mov	r2, r1
 80021d6:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80021da:	f000 fce9 	bl	8002bb0 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021de:	492c      	ldr	r1, [pc, #176]	; (8002290 <HAL_ADC_Start_DMA+0x148>)
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	684a      	ldr	r2, [r1, #4]
 80021e4:	482b      	ldr	r0, [pc, #172]	; (8002294 <HAL_ADC_Start_DMA+0x14c>)
 80021e6:	f012 021f 	ands.w	r2, r2, #31
 80021ea:	d132      	bne.n	8002252 <HAL_ADC_Start_DMA+0x10a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021ec:	4283      	cmp	r3, r0
 80021ee:	d007      	beq.n	8002200 <HAL_ADC_Start_DMA+0xb8>
 80021f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80021f4:	4283      	cmp	r3, r0
 80021f6:	d125      	bne.n	8002244 <HAL_ADC_Start_DMA+0xfc>
 80021f8:	6849      	ldr	r1, [r1, #4]
 80021fa:	f011 0f1f 	tst.w	r1, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021fe:	d132      	bne.n	8002266 <HAL_ADC_Start_DMA+0x11e>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002200:	6898      	ldr	r0, [r3, #8]
 8002202:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002206:	d103      	bne.n	8002210 <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800220e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002210:	2200      	movs	r2, #0
 8002212:	e028      	b.n	8002266 <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8002214:	68b2      	ldr	r2, [r6, #8]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_ADC_Start_DMA+0x150>)
 800221e:	6810      	ldr	r0, [r2, #0]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_ADC_Start_DMA+0x154>)
 8002222:	fbb0 f0f2 	udiv	r0, r0, r2
 8002226:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800222a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800222c:	9a01      	ldr	r2, [sp, #4]
 800222e:	2a00      	cmp	r2, #0
 8002230:	d09b      	beq.n	800216a <HAL_ADC_Start_DMA+0x22>
      counter--;
 8002232:	9a01      	ldr	r2, [sp, #4]
 8002234:	3a01      	subs	r2, #1
 8002236:	9201      	str	r2, [sp, #4]
 8002238:	e7f8      	b.n	800222c <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800223a:	68b2      	ldr	r2, [r6, #8]
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	60b2      	str	r2, [r6, #8]
 8002242:	e795      	b.n	8002170 <HAL_ADC_Start_DMA+0x28>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002244:	4816      	ldr	r0, [pc, #88]	; (80022a0 <HAL_ADC_Start_DMA+0x158>)
 8002246:	4283      	cmp	r3, r0
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_Start_DMA+0x11e>
 800224a:	6849      	ldr	r1, [r1, #4]
 800224c:	f011 0f10 	tst.w	r1, #16
 8002250:	e7d5      	b.n	80021fe <HAL_ADC_Start_DMA+0xb6>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002252:	4283      	cmp	r3, r0
 8002254:	d1dc      	bne.n	8002210 <HAL_ADC_Start_DMA+0xc8>
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 800225c:	d10e      	bne.n	800227c <HAL_ADC_Start_DMA+0x134>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002264:	6099      	str	r1, [r3, #8]
}
 8002266:	4610      	mov	r0, r2
 8002268:	b002      	add	sp, #8
 800226a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002274:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800227c:	4622      	mov	r2, r4
 800227e:	e7f2      	b.n	8002266 <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 8002280:	2202      	movs	r2, #2
 8002282:	e7f0      	b.n	8002266 <HAL_ADC_Start_DMA+0x11e>
 8002284:	080022cb 	.word	0x080022cb
 8002288:	080022a9 	.word	0x080022a9
 800228c:	080022b5 	.word	0x080022b5
 8002290:	40012300 	.word	0x40012300
 8002294:	40012000 	.word	0x40012000
 8002298:	20000000 	.word	0x20000000
 800229c:	000f4240 	.word	0x000f4240
 80022a0:	40012200 	.word	0x40012200

080022a4 <HAL_ADC_ConvCpltCallback>:
 80022a4:	4770      	bx	lr

080022a6 <HAL_ADC_ConvHalfCpltCallback>:
 80022a6:	4770      	bx	lr

080022a8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80022ac:	f7ff fffb 	bl	80022a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b0:	bd08      	pop	{r3, pc}

080022b2 <HAL_ADC_ErrorCallback>:
 80022b2:	4770      	bx	lr

080022b4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80022b6:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80022b8:	2340      	movs	r3, #64	; 0x40
 80022ba:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022c4:	f7ff fff5 	bl	80022b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c8:	bd08      	pop	{r3, pc}

080022ca <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80022d2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022d6:	d123      	bne.n	8002320 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	6891      	ldr	r1, [r2, #8]
 80022e2:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80022e6:	d117      	bne.n	8002318 <ADC_DMAConvCplt+0x4e>
 80022e8:	7e19      	ldrb	r1, [r3, #24]
 80022ea:	b9a9      	cbnz	r1, 8002318 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ee:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80022f2:	d002      	beq.n	80022fa <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022f4:	6891      	ldr	r1, [r2, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022f6:	0548      	lsls	r0, r1, #21
 80022f8:	d40e      	bmi.n	8002318 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022fa:	6851      	ldr	r1, [r2, #4]
 80022fc:	f021 0120 	bic.w	r1, r1, #32
 8002300:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800230a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230c:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230e:	bf5e      	ittt	pl
 8002310:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8002312:	f042 0201 	orrpl.w	r2, r2, #1
 8002316:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ffc3 	bl	80022a4 <HAL_ADC_ConvCpltCallback>
}
 800231e:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002320:	06d2      	lsls	r2, r2, #27
 8002322:	d503      	bpl.n	800232c <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ffc4 	bl	80022b2 <HAL_ADC_ErrorCallback>
 800232a:	e7f8      	b.n	800231e <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800232e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	4718      	bx	r3
	...

08002338 <HAL_ADC_ConfigChannel>:
{
 8002338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800233e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d067      	beq.n	8002416 <HAL_ADC_ConfigChannel+0xde>
 8002346:	2301      	movs	r3, #1
 8002348:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800234c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800234e:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002350:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002352:	2d09      	cmp	r5, #9
 8002354:	b2ac      	uxth	r4, r5
 8002356:	d934      	bls.n	80023c2 <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002358:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800235c:	68df      	ldr	r7, [r3, #12]
 800235e:	3a1e      	subs	r2, #30
 8002360:	f04f 0c07 	mov.w	ip, #7
 8002364:	fa0c fc02 	lsl.w	ip, ip, r2
 8002368:	ea27 070c 	bic.w	r7, r7, ip
 800236c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236e:	68df      	ldr	r7, [r3, #12]
 8002370:	fa06 f202 	lsl.w	r2, r6, r2
 8002374:	433a      	orrs	r2, r7
 8002376:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002378:	6849      	ldr	r1, [r1, #4]
 800237a:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8002380:	d82e      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002384:	3a05      	subs	r2, #5
 8002386:	261f      	movs	r6, #31
 8002388:	4096      	lsls	r6, r2
 800238a:	ea21 0106 	bic.w	r1, r1, r6
 800238e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002392:	fa04 f202 	lsl.w	r2, r4, r2
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800239a:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <HAL_ADC_ConfigChannel+0x120>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7e>
 80023a0:	2d12      	cmp	r5, #18
 80023a2:	d13a      	bne.n	800241a <HAL_ADC_ConfigChannel+0xe2>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_ADC_ConfigChannel+0x124>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80023ac:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023b4:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80023b6:	2300      	movs	r3, #0
 80023b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80023bc:	4618      	mov	r0, r3
}
 80023be:	b003      	add	sp, #12
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80023c8:	2707      	movs	r7, #7
 80023ca:	fa07 f70c 	lsl.w	r7, r7, ip
 80023ce:	ea22 0207 	bic.w	r2, r2, r7
 80023d2:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80023da:	4316      	orrs	r6, r2
 80023dc:	611e      	str	r6, [r3, #16]
 80023de:	e7cb      	b.n	8002378 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80023e0:	290c      	cmp	r1, #12
 80023e2:	f04f 011f 	mov.w	r1, #31
 80023e6:	d80b      	bhi.n	8002400 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023e8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80023ea:	3a23      	subs	r2, #35	; 0x23
 80023ec:	4091      	lsls	r1, r2
 80023ee:	ea26 0101 	bic.w	r1, r6, r1
 80023f2:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f6:	fa04 f202 	lsl.w	r2, r4, r2
 80023fa:	430a      	orrs	r2, r1
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
 80023fe:	e7cc      	b.n	800239a <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002400:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002402:	3a41      	subs	r2, #65	; 0x41
 8002404:	4091      	lsls	r1, r2
 8002406:	ea26 0101 	bic.w	r1, r6, r1
 800240a:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800240c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240e:	4094      	lsls	r4, r2
 8002410:	430c      	orrs	r4, r1
 8002412:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002414:	e7c1      	b.n	800239a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8002416:	2002      	movs	r0, #2
 8002418:	e7d1      	b.n	80023be <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_ADC_ConfigChannel+0x128>)
 800241c:	429d      	cmp	r5, r3
 800241e:	d001      	beq.n	8002424 <HAL_ADC_ConfigChannel+0xec>
 8002420:	2d11      	cmp	r5, #17
 8002422:	d1c8      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_ADC_ConfigChannel+0x124>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800242c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002434:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_ADC_ConfigChannel+0x128>)
 8002438:	429d      	cmp	r5, r3
 800243a:	d1bc      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_ADC_ConfigChannel+0x12c>)
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_ADC_ConfigChannel+0x130>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fbb3 f3f2 	udiv	r3, r3, r2
 8002446:	220a      	movs	r2, #10
 8002448:	4353      	muls	r3, r2
        counter--;
 800244a:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800244c:	9b01      	ldr	r3, [sp, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0b1      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8002452:	9b01      	ldr	r3, [sp, #4]
 8002454:	3b01      	subs	r3, #1
 8002456:	e7f8      	b.n	800244a <HAL_ADC_ConfigChannel+0x112>
 8002458:	40012000 	.word	0x40012000
 800245c:	40012300 	.word	0x40012300
 8002460:	10000012 	.word	0x10000012
 8002464:	20000000 	.word	0x20000000
 8002468:	000f4240 	.word	0x000f4240

0800246c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800246c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800246e:	4604      	mov	r4, r0
 8002470:	2800      	cmp	r0, #0
 8002472:	d06e      	beq.n	8002552 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002474:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002478:	b90b      	cbnz	r3, 800247e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800247a:	f7ff fb71 	bl	8001b60 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800247e:	6822      	ldr	r2, [r4, #0]
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002488:	f7ff fd38 	bl	8001efc <HAL_GetTick>
 800248c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	07d1      	lsls	r1, r2, #31
 8002494:	d551      	bpl.n	800253a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f022 0202 	bic.w	r2, r2, #2
 800249c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249e:	f7ff fd2d 	bl	8001efc <HAL_GetTick>
 80024a2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	0792      	lsls	r2, r2, #30
 80024aa:	d454      	bmi.n	8002556 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024ac:	7e22      	ldrb	r2, [r4, #24]
 80024ae:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	bf0c      	ite	eq
 80024b4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024be:	7e62      	ldrb	r2, [r4, #25]
 80024c0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	bf0c      	ite	eq
 80024c6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ca:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024d0:	7ea2      	ldrb	r2, [r4, #26]
 80024d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	bf0c      	ite	eq
 80024d8:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024dc:	f022 0220 	bicne.w	r2, r2, #32
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024e2:	7ee2      	ldrb	r2, [r4, #27]
 80024e4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	bf0c      	ite	eq
 80024ea:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ee:	f042 0210 	orrne.w	r2, r2, #16
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024f4:	7f22      	ldrb	r2, [r4, #28]
 80024f6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	bf0c      	ite	eq
 80024fc:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002500:	f022 0208 	bicne.w	r2, r2, #8
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002506:	7f62      	ldrb	r2, [r4, #29]
 8002508:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	bf0c      	ite	eq
 800250e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002512:	f022 0204 	bicne.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002518:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800251c:	430a      	orrs	r2, r1
 800251e:	6921      	ldr	r1, [r4, #16]
 8002520:	430a      	orrs	r2, r1
 8002522:	6961      	ldr	r1, [r4, #20]
 8002524:	430a      	orrs	r2, r1
 8002526:	6861      	ldr	r1, [r4, #4]
 8002528:	3901      	subs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800252e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002530:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002534:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002538:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800253a:	f7ff fcdf 	bl	8001efc <HAL_GetTick>
 800253e:	1b40      	subs	r0, r0, r5
 8002540:	280a      	cmp	r0, #10
 8002542:	d9a4      	bls.n	800248e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800254c:	2305      	movs	r3, #5
 800254e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
 8002554:	e7f0      	b.n	8002538 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002556:	f7ff fcd1 	bl	8001efc <HAL_GetTick>
 800255a:	1b40      	subs	r0, r0, r5
 800255c:	280a      	cmp	r0, #10
 800255e:	d9a1      	bls.n	80024a4 <HAL_CAN_Init+0x38>
 8002560:	e7f0      	b.n	8002544 <HAL_CAN_Init+0xd8>
	...

08002564 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002564:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002566:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800256a:	3b01      	subs	r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d877      	bhi.n	8002660 <HAL_CAN_ConfigFilter+0xfc>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002570:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_CAN_ConfigFilter+0x108>)
 8002572:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800257e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002582:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002586:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800258a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800258e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002590:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002594:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002598:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800259a:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800259e:	f002 041f 	and.w	r4, r2, #31
 80025a2:	2001      	movs	r0, #1
 80025a4:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025a6:	ea25 0500 	bic.w	r5, r5, r0
 80025aa:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025ae:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025b0:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	d135      	bne.n	8002622 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025b6:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80025ba:	4025      	ands	r5, r4
 80025bc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025c0:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025c2:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80025c8:	00d3      	lsls	r3, r2, #3
 80025ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ce:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025d2:	880a      	ldrh	r2, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025d4:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d8:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025da:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025de:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025e2:	698a      	ldr	r2, [r1, #24]
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_CAN_ConfigFilter+0x108>)
 80025e6:	bb8a      	cbnz	r2, 800264c <HAL_CAN_ConfigFilter+0xe8>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025ec:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025f2:	690a      	ldr	r2, [r1, #16]
 80025f4:	bb72      	cbnz	r2, 8002654 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025fa:	4014      	ands	r4, r2
 80025fc:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002600:	6a0b      	ldr	r3, [r1, #32]
 8002602:	2b01      	cmp	r3, #1
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_CAN_ConfigFilter+0x108>)
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002606:	bf02      	ittt	eq
 8002608:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800260c:	4302      	orreq	r2, r0
 800260e:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002612:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800261e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002620:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002622:	2d01      	cmp	r5, #1
 8002624:	d1dd      	bne.n	80025e2 <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002626:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800262a:	4305      	orrs	r5, r0
 800262c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002630:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002632:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002634:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002638:	00d3      	lsls	r3, r2, #3
 800263a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800263e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002642:	898a      	ldrh	r2, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002644:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002648:	688d      	ldr	r5, [r1, #8]
 800264a:	e7c6      	b.n	80025da <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800264c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002650:	4302      	orrs	r2, r0
 8002652:	e7cc      	b.n	80025ee <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002654:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002658:	4302      	orrs	r2, r0
 800265a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800265e:	e7cf      	b.n	8002600 <HAL_CAN_ConfigFilter+0x9c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002660:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002666:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e7d9      	b.n	8002620 <HAL_CAN_ConfigFilter+0xbc>
 800266c:	40006400 	.word	0x40006400

08002670 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002670:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002672:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002676:	2b01      	cmp	r3, #1
{
 8002678:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800267a:	b2dd      	uxtb	r5, r3
 800267c:	d120      	bne.n	80026c0 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800267e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002680:	2302      	movs	r3, #2
 8002682:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800268e:	f7ff fc35 	bl	8001efc <HAL_GetTick>
 8002692:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f013 0301 	ands.w	r3, r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800269e:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026a0:	461d      	mov	r5, r3
 80026a2:	e00b      	b.n	80026bc <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026a4:	f7ff fc2a 	bl	8001efc <HAL_GetTick>
 80026a8:	1b80      	subs	r0, r0, r6
 80026aa:	280a      	cmp	r0, #10
 80026ac:	d9f2      	bls.n	8002694 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80026b6:	2305      	movs	r3, #5
 80026b8:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80026bc:	4628      	mov	r0, r5
 80026be:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026c6:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80026c8:	2501      	movs	r5, #1
 80026ca:	e7f7      	b.n	80026bc <HAL_CAN_Start+0x4c>

080026cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ce:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026d2:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026d4:	3d01      	subs	r5, #1
 80026d6:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026d8:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80026da:	d83f      	bhi.n	800275c <HAL_CAN_AddTxMessage+0x90>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026dc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80026e0:	f04f 0501 	mov.w	r5, #1
 80026e4:	d034      	beq.n	8002750 <HAL_CAN_AddTxMessage+0x84>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026e6:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026ea:	40a5      	lsls	r5, r4
 80026ec:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026ee:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80026f2:	f104 0318 	add.w	r3, r4, #24
 80026f6:	bb20      	cbnz	r0, 8002742 <HAL_CAN_AddTxMessage+0x76>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026f8:	6808      	ldr	r0, [r1, #0]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	ea47 5740 	orr.w	r7, r7, r0, lsl #21
 8002700:	50f7      	str	r7, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002702:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8002706:	690d      	ldr	r5, [r1, #16]
 8002708:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800270c:	7d09      	ldrb	r1, [r1, #20]
 800270e:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002710:	bf08      	it	eq
 8002712:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8002716:	ea4f 1004 	mov.w	r0, r4, lsl #4
 800271a:	bf04      	itt	eq
 800271c:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8002720:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002724:	4406      	add	r6, r0
 8002726:	6851      	ldr	r1, [r2, #4]
 8002728:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002732:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 800273e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002742:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8002744:	4338      	orrs	r0, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002746:	011b      	lsls	r3, r3, #4
                                                           pHeader->IDE |
 8002748:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800274c:	50f0      	str	r0, [r6, r3]
 800274e:	e7d8      	b.n	8002702 <HAL_CAN_AddTxMessage+0x36>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002756:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	e7f1      	b.n	8002740 <HAL_CAN_AddTxMessage+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800275e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002762:	e7f8      	b.n	8002756 <HAL_CAN_AddTxMessage+0x8a>

08002764 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002764:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002768:	3b01      	subs	r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d805      	bhi.n	800277a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800276e:	6802      	ldr	r2, [r0, #0]
 8002770:	6953      	ldr	r3, [r2, #20]
 8002772:	4319      	orrs	r1, r3
 8002774:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8002776:	2000      	movs	r0, #0
 8002778:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800277a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002782:	2001      	movs	r0, #1
  }
}
 8002784:	4770      	bx	lr

08002786 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002788:	4770      	bx	lr

0800278a <HAL_CAN_TxMailbox2CompleteCallback>:
 800278a:	4770      	bx	lr

0800278c <HAL_CAN_TxMailbox0AbortCallback>:
 800278c:	4770      	bx	lr

0800278e <HAL_CAN_TxMailbox1AbortCallback>:
 800278e:	4770      	bx	lr

08002790 <HAL_CAN_TxMailbox2AbortCallback>:
 8002790:	4770      	bx	lr

08002792 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002792:	4770      	bx	lr

08002794 <HAL_CAN_RxFifo0FullCallback>:
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002796:	4770      	bx	lr

08002798 <HAL_CAN_RxFifo1FullCallback>:
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_SleepCallback>:
 800279a:	4770      	bx	lr

0800279c <HAL_CAN_WakeUpFromRxMsgCallback>:
 800279c:	4770      	bx	lr

0800279e <HAL_CAN_ErrorCallback>:
 800279e:	4770      	bx	lr

080027a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027ac:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027ae:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027b2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027b6:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027ba:	f016 0401 	ands.w	r4, r6, #1
{
 80027be:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027c0:	d022      	beq.n	8002808 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027c2:	f017 0401 	ands.w	r4, r7, #1
 80027c6:	d007      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027c8:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027ca:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027cc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027ce:	f140 80a5 	bpl.w	800291c <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027d2:	f7ff ffd8 	bl	8002786 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027d6:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027d8:	05fb      	lsls	r3, r7, #23
 80027da:	d509      	bpl.n	80027f0 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027e2:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027e4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027e6:	f140 80a7 	bpl.w	8002938 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027ea:	4628      	mov	r0, r5
 80027ec:	f7ff ffcc 	bl	8002788 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027f0:	03fb      	lsls	r3, r7, #15
 80027f2:	d509      	bpl.n	8002808 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027fa:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027fc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027fe:	f140 80a9 	bpl.w	8002954 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002802:	4628      	mov	r0, r5
 8002804:	f7ff ffc1 	bl	800278a <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002808:	0733      	lsls	r3, r6, #28
 800280a:	d507      	bpl.n	800281c <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800280c:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002810:	bf1f      	itttt	ne
 8002812:	682b      	ldrne	r3, [r5, #0]
 8002814:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002816:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800281a:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800281c:	0777      	lsls	r7, r6, #29
 800281e:	d508      	bpl.n	8002832 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002820:	f01b 0f08 	tst.w	fp, #8
 8002824:	d005      	beq.n	8002832 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	2208      	movs	r2, #8
 800282a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800282c:	4628      	mov	r0, r5
 800282e:	f7ff ffb1 	bl	8002794 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002832:	07b0      	lsls	r0, r6, #30
 8002834:	d506      	bpl.n	8002844 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002836:	682b      	ldr	r3, [r5, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	0799      	lsls	r1, r3, #30
 800283c:	d002      	beq.n	8002844 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800283e:	4628      	mov	r0, r5
 8002840:	f7ff ffa7 	bl	8002792 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002844:	0672      	lsls	r2, r6, #25
 8002846:	d507      	bpl.n	8002858 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002848:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800284c:	bf1f      	itttt	ne
 800284e:	682b      	ldrne	r3, [r5, #0]
 8002850:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002852:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002856:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002858:	06b3      	lsls	r3, r6, #26
 800285a:	d508      	bpl.n	800286e <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800285c:	f01a 0f08 	tst.w	sl, #8
 8002860:	d005      	beq.n	800286e <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002862:	682b      	ldr	r3, [r5, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002868:	4628      	mov	r0, r5
 800286a:	f7ff ff95 	bl	8002798 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800286e:	06f7      	lsls	r7, r6, #27
 8002870:	d506      	bpl.n	8002880 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	0798      	lsls	r0, r3, #30
 8002878:	d002      	beq.n	8002880 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800287a:	4628      	mov	r0, r5
 800287c:	f7ff ff8b 	bl	8002796 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002880:	03b1      	lsls	r1, r6, #14
 8002882:	d508      	bpl.n	8002896 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002884:	f019 0f10 	tst.w	r9, #16
 8002888:	d005      	beq.n	8002896 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800288a:	682b      	ldr	r3, [r5, #0]
 800288c:	2210      	movs	r2, #16
 800288e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002890:	4628      	mov	r0, r5
 8002892:	f7ff ff82 	bl	800279a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002896:	03f2      	lsls	r2, r6, #15
 8002898:	d508      	bpl.n	80028ac <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800289a:	f019 0f08 	tst.w	r9, #8
 800289e:	d005      	beq.n	80028ac <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	2208      	movs	r2, #8
 80028a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028a6:	4628      	mov	r0, r5
 80028a8:	f7ff ff78 	bl	800279c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028ac:	0433      	lsls	r3, r6, #16
 80028ae:	d52c      	bpl.n	800290a <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028b0:	f019 0f04 	tst.w	r9, #4
 80028b4:	682a      	ldr	r2, [r5, #0]
 80028b6:	d026      	beq.n	8002906 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028b8:	05f7      	lsls	r7, r6, #23
 80028ba:	d504      	bpl.n	80028c6 <HAL_CAN_IRQHandler+0x126>
 80028bc:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028c0:	bf18      	it	ne
 80028c2:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028c6:	05b0      	lsls	r0, r6, #22
 80028c8:	d504      	bpl.n	80028d4 <HAL_CAN_IRQHandler+0x134>
 80028ca:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028ce:	bf18      	it	ne
 80028d0:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028d4:	0571      	lsls	r1, r6, #21
 80028d6:	d504      	bpl.n	80028e2 <HAL_CAN_IRQHandler+0x142>
 80028d8:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028dc:	bf18      	it	ne
 80028de:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028e2:	0533      	lsls	r3, r6, #20
 80028e4:	d50f      	bpl.n	8002906 <HAL_CAN_IRQHandler+0x166>
 80028e6:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80028ea:	d00c      	beq.n	8002906 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d04f      	beq.n	8002990 <HAL_CAN_IRQHandler+0x1f0>
 80028f0:	d83e      	bhi.n	8002970 <HAL_CAN_IRQHandler+0x1d0>
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d046      	beq.n	8002984 <HAL_CAN_IRQHandler+0x1e4>
 80028f6:	2b30      	cmp	r3, #48	; 0x30
 80028f8:	d047      	beq.n	800298a <HAL_CAN_IRQHandler+0x1ea>
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d03f      	beq.n	800297e <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028fe:	6993      	ldr	r3, [r2, #24]
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002906:	2304      	movs	r3, #4
 8002908:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800290a:	b12c      	cbz	r4, 8002918 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800290c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800290e:	4323      	orrs	r3, r4
 8002910:	626b      	str	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002912:	4628      	mov	r0, r5
 8002914:	f7ff ff43 	bl	800279e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800291c:	077a      	lsls	r2, r7, #29
 800291e:	d405      	bmi.n	800292c <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002920:	f017 0408 	ands.w	r4, r7, #8
 8002924:	d105      	bne.n	8002932 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002926:	f7ff ff31 	bl	800278c <HAL_CAN_TxMailbox0AbortCallback>
 800292a:	e755      	b.n	80027d8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800292c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002930:	e752      	b.n	80027d8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002932:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002936:	e74f      	b.n	80027d8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002938:	0579      	lsls	r1, r7, #21
 800293a:	d502      	bpl.n	8002942 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800293c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8002940:	e756      	b.n	80027f0 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002942:	053a      	lsls	r2, r7, #20
 8002944:	d502      	bpl.n	800294c <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002946:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800294a:	e751      	b.n	80027f0 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800294c:	4628      	mov	r0, r5
 800294e:	f7ff ff1e 	bl	800278e <HAL_CAN_TxMailbox1AbortCallback>
 8002952:	e74d      	b.n	80027f0 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002954:	0379      	lsls	r1, r7, #13
 8002956:	d502      	bpl.n	800295e <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002958:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800295c:	e754      	b.n	8002808 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800295e:	033a      	lsls	r2, r7, #12
 8002960:	d502      	bpl.n	8002968 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002962:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002966:	e74f      	b.n	8002808 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002968:	4628      	mov	r0, r5
 800296a:	f7ff ff11 	bl	8002790 <HAL_CAN_TxMailbox2AbortCallback>
 800296e:	e74b      	b.n	8002808 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d010      	beq.n	8002996 <HAL_CAN_IRQHandler+0x1f6>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d1c2      	bne.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002978:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 800297c:	e7bf      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 800297e:	f044 0408 	orr.w	r4, r4, #8
            break;
 8002982:	e7bc      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002984:	f044 0410 	orr.w	r4, r4, #16
            break;
 8002988:	e7b9      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800298a:	f044 0420 	orr.w	r4, r4, #32
            break;
 800298e:	e7b6      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002990:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8002994:	e7b3      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002996:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800299a:	e7b0      	b.n	80028fe <HAL_CAN_IRQHandler+0x15e>

0800299c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800299e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b530      	push	{r4, r5, lr}
 80029c4:	68dc      	ldr	r4, [r3, #12]
 80029c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	bf28      	it	cs
 80029d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029dc:	bf8c      	ite	hi
 80029de:	3c03      	subhi	r4, #3
 80029e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e2:	fa05 f303 	lsl.w	r3, r5, r3
 80029e6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ea:	40a5      	lsls	r5, r4
 80029ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80029f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	bfac      	ite	ge
 80029fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	4a08      	ldrlt	r2, [pc, #32]	; (8002a20 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	bfb8      	it	lt
 8002a06:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	bfaa      	itet	ge
 8002a0e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a18:	bd30      	pop	{r4, r5, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00
 8002a20:	e000ed14 	.word	0xe000ed14

08002a24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a24:	2800      	cmp	r0, #0
 8002a26:	db07      	blt.n	8002a38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_NVIC_EnableIRQ+0x18>)
 8002a2a:	0941      	lsrs	r1, r0, #5
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f000 001f 	and.w	r0, r0, #31
 8002a32:	4083      	lsls	r3, r0
 8002a34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	3801      	subs	r0, #1
 8002a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a46:	d20b      	bcs.n	8002a60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	21f0      	movs	r1, #240	; 0xf0
 8002a52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a68:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	b150      	cbz	r0, 8002a84 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a6e:	7943      	ldrb	r3, [r0, #5]
 8002a70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a74:	b913      	cbnz	r3, 8002a7c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a76:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a78:	f7ff f8b0 	bl	8001bdc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002a80:	2000      	movs	r0, #0
}
 8002a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
 8002a86:	e7fc      	b.n	8002a82 <HAL_CRC_Init+0x1a>

08002a88 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a88:	6803      	ldr	r3, [r0, #0]
{
 8002a8a:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a90:	4c07      	ldr	r4, [pc, #28]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002a9a:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a9c:	bf88      	it	hi
 8002a9e:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa0:	2118      	movs	r1, #24
 8002aa2:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aa6:	5c61      	ldrb	r1, [r4, r1]
 8002aa8:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aaa:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd10      	pop	{r4, pc}
 8002ab0:	0800b966 	.word	0x0800b966

08002ab4 <HAL_DMA_Init>:
{
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff fa20 	bl	8001efc <HAL_GetTick>
 8002abc:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002abe:	2c00      	cmp	r4, #0
 8002ac0:	d071      	beq.n	8002ba6 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002ac8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002aca:	2300      	movs	r3, #0
 8002acc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	07d8      	lsls	r0, r3, #31
 8002ade:	d42e      	bmi.n	8002b3e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002ae0:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae2:	4832      	ldr	r0, [pc, #200]	; (8002bac <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae4:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae6:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002aec:	432b      	orrs	r3, r5
 8002aee:	68e5      	ldr	r5, [r4, #12]
 8002af0:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af2:	6925      	ldr	r5, [r4, #16]
 8002af4:	432b      	orrs	r3, r5
 8002af6:	6965      	ldr	r5, [r4, #20]
 8002af8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	69e5      	ldr	r5, [r4, #28]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b00:	6a25      	ldr	r5, [r4, #32]
 8002b02:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b04:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002b08:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b0a:	bf02      	ittt	eq
 8002b0c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002b10:	4335      	orreq	r5, r6
 8002b12:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002b14:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8002b16:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b18:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002b1e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	d132      	bne.n	8002b8a <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 8002b24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b26:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002b28:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b2a:	b375      	cbz	r5, 8002b8a <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2c:	b991      	cbnz	r1, 8002b54 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d020      	beq.n	8002b74 <HAL_DMA_Init+0xc0>
 8002b32:	f030 0102 	bics.w	r1, r0, #2
 8002b36:	d128      	bne.n	8002b8a <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b38:	01e9      	lsls	r1, r5, #7
 8002b3a:	d526      	bpl.n	8002b8a <HAL_DMA_Init+0xd6>
 8002b3c:	e01d      	b.n	8002b7a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3e:	f7ff f9dd 	bl	8001efc <HAL_GetTick>
 8002b42:	1b40      	subs	r0, r0, r5
 8002b44:	2805      	cmp	r0, #5
 8002b46:	d9c7      	bls.n	8002ad8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b54:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002b58:	d113      	bne.n	8002b82 <HAL_DMA_Init+0xce>
    switch (tmp)
 8002b5a:	2803      	cmp	r0, #3
 8002b5c:	d815      	bhi.n	8002b8a <HAL_DMA_Init+0xd6>
 8002b5e:	a101      	add	r1, pc, #4	; (adr r1, 8002b64 <HAL_DMA_Init+0xb0>)
 8002b60:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8002b64:	08002b7b 	.word	0x08002b7b
 8002b68:	08002b39 	.word	0x08002b39
 8002b6c:	08002b7b 	.word	0x08002b7b
 8002b70:	08002b75 	.word	0x08002b75
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b74:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002b78:	d107      	bne.n	8002b8a <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	2001      	movs	r0, #1
 8002b80:	e7e5      	b.n	8002b4e <HAL_DMA_Init+0x9a>
    switch (tmp)
 8002b82:	2802      	cmp	r0, #2
 8002b84:	d9f9      	bls.n	8002b7a <HAL_DMA_Init+0xc6>
 8002b86:	2803      	cmp	r0, #3
 8002b88:	d0d6      	beq.n	8002b38 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8002b8a:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff7b 	bl	8002a88 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b94:	233f      	movs	r3, #63	; 0x3f
 8002b96:	4093      	lsls	r3, r2
 8002b98:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002ba4:	e7d5      	b.n	8002b52 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e7d3      	b.n	8002b52 <HAL_DMA_Init+0x9e>
 8002baa:	bf00      	nop
 8002bac:	f010803f 	.word	0xf010803f

08002bb0 <HAL_DMA_Start_IT>:
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002bb2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002bb8:	2c01      	cmp	r4, #1
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_Start_IT+0x70>
 8002bbc:	2401      	movs	r4, #1
 8002bbe:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002bc6:	2c01      	cmp	r4, #1
 8002bc8:	f04f 0500 	mov.w	r5, #0
 8002bcc:	f04f 0402 	mov.w	r4, #2
 8002bd0:	d124      	bne.n	8002c1c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bd6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bda:	6825      	ldr	r5, [r4, #0]
 8002bdc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002be0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002be2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be4:	6883      	ldr	r3, [r0, #8]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002be8:	bf0e      	itee	eq
 8002bea:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002bec:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bee:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002bf2:	bf08      	it	eq
 8002bf4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf6:	233f      	movs	r3, #63	; 0x3f
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	f043 0316 	orr.w	r3, r3, #22
 8002c02:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c06:	b11b      	cbz	r3, 8002c10 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002c1c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002c20:	2002      	movs	r0, #2
 8002c22:	e7fa      	b.n	8002c1a <HAL_DMA_Start_IT+0x6a>

08002c24 <HAL_DMA_Abort>:
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002c2a:	f7ff f967 	bl	8001efc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002c32:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002c34:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c36:	d006      	beq.n	8002c46 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f022 0216 	bic.w	r2, r2, #22
 8002c4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c56:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c5a:	b90a      	cbnz	r2, 8002c60 <HAL_DMA_Abort+0x3c>
 8002c5c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002c5e:	b11a      	cbz	r2, 8002c68 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f022 0208 	bic.w	r2, r2, #8
 8002c66:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f013 0301 	ands.w	r3, r3, #1
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	408a      	lsls	r2, r1
 8002c80:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002c82:	2201      	movs	r2, #1
 8002c84:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8002c88:	4618      	mov	r0, r3
 8002c8a:	e7d8      	b.n	8002c3e <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8c:	f7ff f936 	bl	8001efc <HAL_GetTick>
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	2805      	cmp	r0, #5
 8002c94:	d9ec      	bls.n	8002c70 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c96:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c9c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002ca0:	e7cd      	b.n	8002c3e <HAL_DMA_Abort+0x1a>

08002ca2 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002cba:	6813      	ldr	r3, [r2, #0]
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002cc2:	2000      	movs	r0, #0
}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_DMA_IRQHandler>:
{
 8002cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cd2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002cd6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	2208      	movs	r2, #8
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	4232      	tst	r2, r6
{
 8002cde:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	d00c      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce2:	6801      	ldr	r1, [r0, #0]
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	0740      	lsls	r0, r0, #29
 8002ce8:	d508      	bpl.n	8002cfc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cea:	6808      	ldr	r0, [r1, #0]
 8002cec:	f020 0004 	bic.w	r0, r0, #4
 8002cf0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	4232      	tst	r2, r6
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d04:	6821      	ldr	r1, [r4, #0]
 8002d06:	6949      	ldr	r1, [r1, #20]
 8002d08:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0a:	bf41      	itttt	mi
 8002d0c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002d10:	f042 0202 	orrmi.w	r2, r2, #2
 8002d14:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	2204      	movs	r2, #4
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	4232      	tst	r2, r6
 8002d1c:	d008      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d1e:	6821      	ldr	r1, [r4, #0]
 8002d20:	6809      	ldr	r1, [r1, #0]
 8002d22:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d24:	bf41      	itttt	mi
 8002d26:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002d2a:	f042 0204 	orrmi.w	r2, r2, #4
 8002d2e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	2210      	movs	r2, #16
 8002d32:	409a      	lsls	r2, r3
 8002d34:	4232      	tst	r2, r6
 8002d36:	d010      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	0709      	lsls	r1, r1, #28
 8002d3e:	d50c      	bpl.n	8002d5a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d40:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	0350      	lsls	r0, r2, #13
 8002d46:	d537      	bpl.n	8002db8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0319      	lsls	r1, r3, #12
 8002d4c:	d401      	bmi.n	8002d52 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002d54:	b10b      	cbz	r3, 8002d5a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002d56:	4620      	mov	r0, r4
 8002d58:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	408a      	lsls	r2, r1
 8002d60:	4232      	tst	r2, r6
 8002d62:	d03a      	beq.n	8002dda <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	06c6      	lsls	r6, r0, #27
 8002d6a:	d536      	bpl.n	8002dda <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d6c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d6e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002d72:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d74:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d76:	d127      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d78:	f022 0216 	bic.w	r2, r2, #22
 8002d7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d88:	b90a      	cbnz	r2, 8002d8e <HAL_DMA_IRQHandler+0xc6>
 8002d8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d8c:	b11a      	cbz	r2, 8002d96 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f022 0208 	bic.w	r2, r2, #8
 8002d94:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d96:	233f      	movs	r3, #63	; 0x3f
 8002d98:	408b      	lsls	r3, r1
 8002d9a:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002da2:	2300      	movs	r3, #0
 8002da4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002da8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002dae:	4620      	mov	r0, r4
}
 8002db0:	b003      	add	sp, #12
 8002db2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002db6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbc:	bf5e      	ittt	pl
 8002dbe:	681a      	ldrpl	r2, [r3, #0]
 8002dc0:	f022 0208 	bicpl.w	r2, r2, #8
 8002dc4:	601a      	strpl	r2, [r3, #0]
 8002dc6:	e7c2      	b.n	8002d4e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc8:	0350      	lsls	r0, r2, #13
 8002dca:	d527      	bpl.n	8002e1c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0319      	lsls	r1, r3, #12
 8002dd0:	d431      	bmi.n	8002e36 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002dd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002dd4:	b10b      	cbz	r3, 8002dda <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ddc:	b36b      	cbz	r3, 8002e3a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002de0:	07da      	lsls	r2, r3, #31
 8002de2:	d519      	bpl.n	8002e18 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002de4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002de6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002dea:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dee:	2305      	movs	r3, #5
 8002df0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002dfc:	9b01      	ldr	r3, [sp, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	42bb      	cmp	r3, r7
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	d802      	bhi.n	8002e0c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	07db      	lsls	r3, r3, #31
 8002e0a:	d4f7      	bmi.n	8002dfc <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002e12:	2300      	movs	r3, #0
 8002e14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002e18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e1a:	e7c6      	b.n	8002daa <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002e22:	d108      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	f021 0110 	bic.w	r1, r1, #16
 8002e2a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002e32:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e38:	e7cc      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x10c>
}
 8002e3a:	b003      	add	sp, #12
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e48:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8002fe8 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4c:	4a64      	ldr	r2, [pc, #400]	; (8002fe0 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e50:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002e52:	2401      	movs	r4, #1
 8002e54:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002e5a:	43ac      	bics	r4, r5
 8002e5c:	f040 80ad 	bne.w	8002fba <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e60:	684d      	ldr	r5, [r1, #4]
 8002e62:	f005 0403 	and.w	r4, r5, #3
 8002e66:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6e:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e74:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e78:	d834      	bhi.n	8002ee4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002e7a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e80:	68cf      	ldr	r7, [r1, #12]
 8002e82:	fa07 f708 	lsl.w	r7, r7, r8
 8002e86:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002e8a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e8c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e8e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e92:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002e96:	409f      	lsls	r7, r3
 8002e98:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002e9c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002e9e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea4:	688f      	ldr	r7, [r1, #8]
 8002ea6:	fa07 f708 	lsl.w	r7, r7, r8
 8002eaa:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eae:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002eb0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	d119      	bne.n	8002ee8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002eb8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002ec0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ec8:	f04f 0e0f 	mov.w	lr, #15
 8002ecc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002ed0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	690f      	ldr	r7, [r1, #16]
 8002ed6:	fa07 f70b 	lsl.w	r7, r7, fp
 8002eda:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	f8ca 7020 	str.w	r7, [sl, #32]
 8002ee2:	e001      	b.n	8002ee8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee4:	2c03      	cmp	r4, #3
 8002ee6:	d1da      	bne.n	8002e9e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002ee8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eea:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef0:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ef6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef8:	d05f      	beq.n	8002fba <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	f04f 0a00 	mov.w	sl, #0
 8002efe:	f8cd a004 	str.w	sl, [sp, #4]
 8002f02:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f06:	4c37      	ldr	r4, [pc, #220]	; (8002fe4 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f08:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002f0c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002f10:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002f14:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002f18:	9601      	str	r6, [sp, #4]
 8002f1a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1c:	f023 0603 	bic.w	r6, r3, #3
 8002f20:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f24:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f28:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f30:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002f34:	270f      	movs	r7, #15
 8002f36:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f3c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f40:	d042      	beq.n	8002fc8 <HAL_GPIO_Init+0x184>
 8002f42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f46:	42a0      	cmp	r0, r4
 8002f48:	d040      	beq.n	8002fcc <HAL_GPIO_Init+0x188>
 8002f4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f4e:	42a0      	cmp	r0, r4
 8002f50:	d03e      	beq.n	8002fd0 <HAL_GPIO_Init+0x18c>
 8002f52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f56:	42a0      	cmp	r0, r4
 8002f58:	d03c      	beq.n	8002fd4 <HAL_GPIO_Init+0x190>
 8002f5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f5e:	42a0      	cmp	r0, r4
 8002f60:	d03a      	beq.n	8002fd8 <HAL_GPIO_Init+0x194>
 8002f62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f66:	42a0      	cmp	r0, r4
 8002f68:	d038      	beq.n	8002fdc <HAL_GPIO_Init+0x198>
 8002f6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f6e:	42a0      	cmp	r0, r4
 8002f70:	bf0c      	ite	eq
 8002f72:	2406      	moveq	r4, #6
 8002f74:	2407      	movne	r4, #7
 8002f76:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f7a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002f7e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f84:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002f86:	bf54      	ite	pl
 8002f88:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f8a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002f8e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002f90:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f92:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002f94:	bf54      	ite	pl
 8002f96:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f98:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002f9c:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002f9e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa0:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	bf54      	ite	pl
 8002fa4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002fa6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002faa:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fac:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fae:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	bf54      	ite	pl
 8002fb2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002fb4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002fb8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	3301      	adds	r3, #1
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	f47f af47 	bne.w	8002e50 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002fc2:	b003      	add	sp, #12
 8002fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fc8:	4654      	mov	r4, sl
 8002fca:	e7d4      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fcc:	2401      	movs	r4, #1
 8002fce:	e7d2      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fd0:	2402      	movs	r4, #2
 8002fd2:	e7d0      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fd4:	2403      	movs	r4, #3
 8002fd6:	e7ce      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fd8:	2404      	movs	r4, #4
 8002fda:	e7cc      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fdc:	2405      	movs	r4, #5
 8002fde:	e7ca      	b.n	8002f76 <HAL_GPIO_Init+0x132>
 8002fe0:	40013c00 	.word	0x40013c00
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fec:	6903      	ldr	r3, [r0, #16]
 8002fee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ff0:	bf14      	ite	ne
 8002ff2:	2001      	movne	r0, #1
 8002ff4:	2000      	moveq	r0, #0
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff8:	b10a      	cbz	r2, 8002ffe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffa:	6181      	str	r1, [r0, #24]
  }
}
 8002ffc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffe:	0409      	lsls	r1, r1, #16
 8003000:	e7fb      	b.n	8002ffa <HAL_GPIO_WritePin+0x2>
	...

08003004 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003004:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800300c:	4d18      	ldr	r5, [pc, #96]	; (8003070 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_PWREx_EnableOverDrive+0x70>)
 8003022:	2201      	movs	r2, #1
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8003026:	f7fe ff69 	bl	8001efc <HAL_GetTick>
 800302a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800302c:	686b      	ldr	r3, [r5, #4]
 800302e:	03da      	lsls	r2, r3, #15
 8003030:	d50b      	bpl.n	800304a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003034:	4d0e      	ldr	r5, [pc, #56]	; (8003070 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003036:	2201      	movs	r2, #1
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800303a:	f7fe ff5f 	bl	8001efc <HAL_GetTick>
 800303e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003040:	686b      	ldr	r3, [r5, #4]
 8003042:	039b      	lsls	r3, r3, #14
 8003044:	d50a      	bpl.n	800305c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003046:	2000      	movs	r0, #0
 8003048:	e006      	b.n	8003058 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800304a:	f7fe ff57 	bl	8001efc <HAL_GetTick>
 800304e:	1b00      	subs	r0, r0, r4
 8003050:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003054:	d9ea      	bls.n	800302c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
}
 8003058:	b003      	add	sp, #12
 800305a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800305c:	f7fe ff4e 	bl	8001efc <HAL_GetTick>
 8003060:	1b00      	subs	r0, r0, r4
 8003062:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003066:	d9eb      	bls.n	8003040 <HAL_PWREx_EnableOverDrive+0x3c>
 8003068:	e7f5      	b.n	8003056 <HAL_PWREx_EnableOverDrive+0x52>
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	420e0000 	.word	0x420e0000

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307e:	4604      	mov	r4, r0
 8003080:	b910      	cbnz	r0, 8003088 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_ClockConfig+0x120>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f002 020f 	and.w	r2, r2, #15
 8003090:	428a      	cmp	r2, r1
 8003092:	d328      	bcc.n	80030e6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	6821      	ldr	r1, [r4, #0]
 8003096:	078f      	lsls	r7, r1, #30
 8003098:	d42d      	bmi.n	80030f6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	07c8      	lsls	r0, r1, #31
 800309c:	d440      	bmi.n	8003120 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <HAL_RCC_ClockConfig+0x120>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f002 020f 	and.w	r2, r2, #15
 80030a6:	42aa      	cmp	r2, r5
 80030a8:	d865      	bhi.n	8003176 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	0751      	lsls	r1, r2, #29
 80030ae:	d46b      	bmi.n	8003188 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	0713      	lsls	r3, r2, #28
 80030b2:	d507      	bpl.n	80030c4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b4:	4a39      	ldr	r2, [pc, #228]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 80030b6:	6921      	ldr	r1, [r4, #16]
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c4:	f000 f898 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 80030ca:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	40d8      	lsrs	r0, r3
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_ClockConfig+0x12c>)
 80030d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_ClockConfig+0x130>)
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	f7fe fec3 	bl	8001e68 <HAL_InitTick>
  return HAL_OK;
 80030e2:	2000      	movs	r0, #0
 80030e4:	e7ce      	b.n	8003084 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	b2ca      	uxtb	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d1c6      	bne.n	8003082 <HAL_RCC_ClockConfig+0xa>
 80030f4:	e7ce      	b.n	8003094 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 80030f8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	bf1e      	ittt	ne
 80030fe:	689a      	ldrne	r2, [r3, #8]
 8003100:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8003104:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	bf42      	ittt	mi
 800310a:	689a      	ldrmi	r2, [r3, #8]
 800310c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003110:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68a0      	ldr	r0, [r4, #8]
 8003116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800311a:	4302      	orrs	r2, r0
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	e7bc      	b.n	800309a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 8003124:	2a01      	cmp	r2, #1
 8003126:	d11c      	bne.n	8003162 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	d0a8      	beq.n	8003082 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003130:	4e1a      	ldr	r6, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 8003132:	68b3      	ldr	r3, [r6, #8]
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	4313      	orrs	r3, r2
 800313a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800313c:	f7fe fede 	bl	8001efc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003144:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	68b3      	ldr	r3, [r6, #8]
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003152:	d0a4      	beq.n	800309e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fed2 	bl	8001efc <HAL_GetTick>
 8003158:	1bc0      	subs	r0, r0, r7
 800315a:	4540      	cmp	r0, r8
 800315c:	d9f3      	bls.n	8003146 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800315e:	2003      	movs	r0, #3
 8003160:	e790      	b.n	8003084 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	1e91      	subs	r1, r2, #2
 8003164:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003168:	d802      	bhi.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800316e:	e7de      	b.n	800312e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	f013 0f02 	tst.w	r3, #2
 8003174:	e7db      	b.n	800312e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	b2ea      	uxtb	r2, r5
 8003178:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	42ab      	cmp	r3, r5
 8003182:	f47f af7e 	bne.w	8003082 <HAL_RCC_ClockConfig+0xa>
 8003186:	e790      	b.n	80030aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 800318a:	68e0      	ldr	r0, [r4, #12]
 800318c:	688b      	ldr	r3, [r1, #8]
 800318e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003192:	4303      	orrs	r3, r0
 8003194:	608b      	str	r3, [r1, #8]
 8003196:	e78b      	b.n	80030b0 <HAL_RCC_ClockConfig+0x38>
 8003198:	40023c00 	.word	0x40023c00
 800319c:	40023800 	.word	0x40023800
 80031a0:	0800b94e 	.word	0x0800b94e
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000008 	.word	0x20000008

080031ac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031c6:	6810      	ldr	r0, [r2, #0]
}
 80031c8:	40d8      	lsrs	r0, r3
 80031ca:	4770      	bx	lr
 80031cc:	40023800 	.word	0x40023800
 80031d0:	0800b95e 	.word	0x0800b95e
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031e6:	6810      	ldr	r0, [r2, #0]
}
 80031e8:	40d8      	lsrs	r0, r3
 80031ea:	4770      	bx	lr
 80031ec:	40023800 	.word	0x40023800
 80031f0:	0800b95e 	.word	0x0800b95e
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f8:	4920      	ldr	r1, [pc, #128]	; (800327c <HAL_RCC_GetSysClockFreq+0x84>)
{
 80031fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fc:	688b      	ldr	r3, [r1, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d007      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x1e>
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d020      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x54>
 800320a:	481d      	ldr	r0, [pc, #116]	; (8003280 <HAL_RCC_GetSysClockFreq+0x88>)
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_RCC_GetSysClockFreq+0x8c>)
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf08      	it	eq
 8003212:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003214:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003216:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003218:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003220:	bf14      	ite	ne
 8003222:	4818      	ldrne	r0, [pc, #96]	; (8003284 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003224:	4816      	ldreq	r0, [pc, #88]	; (8003280 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800322a:	bf18      	it	ne
 800322c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003232:	fba1 0100 	umull	r0, r1, r1, r0
 8003236:	f7fd fcd7 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_GetSysClockFreq+0x84>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8003246:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800324a:	e7e3      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003250:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003252:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	bf14      	ite	ne
 8003258:	480a      	ldrne	r0, [pc, #40]	; (8003284 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4809      	ldreq	r0, [pc, #36]	; (8003280 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003260:	bf18      	it	ne
 8003262:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003268:	fba1 0100 	umull	r0, r1, r1, r0
 800326c:	f7fd fcbc 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_RCC_GetSysClockFreq+0x84>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003278:	e7e5      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x4e>
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200

08003288 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	4604      	mov	r4, r0
 800328e:	2800      	cmp	r0, #0
 8003290:	d031      	beq.n	80032f6 <HAL_RCC_OscConfig+0x6e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	07df      	lsls	r7, r3, #31
 8003296:	d410      	bmi.n	80032ba <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	079e      	lsls	r6, r3, #30
 800329c:	d467      	bmi.n	800336e <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	071a      	lsls	r2, r3, #28
 80032a2:	f100 80b2 	bmi.w	800340a <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	075b      	lsls	r3, r3, #29
 80032aa:	f100 80d2 	bmi.w	8003452 <HAL_RCC_OscConfig+0x1ca>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	69a0      	ldr	r0, [r4, #24]
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f040 8139 	bne.w	8003528 <HAL_RCC_OscConfig+0x2a0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2000      	movs	r0, #0
 80032b8:	e034      	b.n	8003324 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ba:	4b98      	ldr	r3, [pc, #608]	; (800351c <HAL_RCC_OscConfig+0x294>)
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	f002 020c 	and.w	r2, r2, #12
 80032c2:	2a04      	cmp	r2, #4
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032cc:	2a08      	cmp	r2, #8
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	025d      	lsls	r5, r3, #9
 80032d4:	d408      	bmi.n	80032e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b91      	ldr	r3, [pc, #580]	; (800351c <HAL_RCC_OscConfig+0x294>)
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032de:	2a0c      	cmp	r2, #12
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	0250      	lsls	r0, r2, #9
 80032e6:	d508      	bpl.n	80032fa <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x294>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0399      	lsls	r1, r3, #14
 80032ee:	d5d3      	bpl.n	8003298 <HAL_RCC_OscConfig+0x10>
 80032f0:	6863      	ldr	r3, [r4, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1d0      	bne.n	8003298 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80032f6:	2001      	movs	r0, #1
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	6862      	ldr	r2, [r4, #4]
 80032fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003300:	d113      	bne.n	800332a <HAL_RCC_OscConfig+0xa2>
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003308:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800330a:	f7fe fdf7 	bl	8001efc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4e83      	ldr	r6, [pc, #524]	; (800351c <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003310:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	6833      	ldr	r3, [r6, #0]
 8003314:	039a      	lsls	r2, r3, #14
 8003316:	d4bf      	bmi.n	8003298 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fdf0 	bl	8001efc <HAL_GetTick>
 800331c:	1b40      	subs	r0, r0, r5
 800331e:	2864      	cmp	r0, #100	; 0x64
 8003320:	d9f7      	bls.n	8003312 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8003322:	2003      	movs	r0, #3
}
 8003324:	b002      	add	sp, #8
 8003326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332a:	4d7c      	ldr	r5, [pc, #496]	; (800351c <HAL_RCC_OscConfig+0x294>)
 800332c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0xbc>
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	602b      	str	r3, [r5, #0]
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003342:	e7e2      	b.n	800330a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003350:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003352:	2a00      	cmp	r2, #0
 8003354:	d1d9      	bne.n	800330a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003356:	f7fe fdd1 	bl	8001efc <HAL_GetTick>
 800335a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	039b      	lsls	r3, r3, #14
 8003360:	d59a      	bpl.n	8003298 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003362:	f7fe fdcb 	bl	8001efc <HAL_GetTick>
 8003366:	1b80      	subs	r0, r0, r6
 8003368:	2864      	cmp	r0, #100	; 0x64
 800336a:	d9f7      	bls.n	800335c <HAL_RCC_OscConfig+0xd4>
 800336c:	e7d9      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800336e:	4b6b      	ldr	r3, [pc, #428]	; (800351c <HAL_RCC_OscConfig+0x294>)
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	f012 0f0c 	tst.w	r2, #12
 8003376:	d010      	beq.n	800339a <HAL_RCC_OscConfig+0x112>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800337e:	2a08      	cmp	r2, #8
 8003380:	d102      	bne.n	8003388 <HAL_RCC_OscConfig+0x100>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	025f      	lsls	r7, r3, #9
 8003386:	d508      	bpl.n	800339a <HAL_RCC_OscConfig+0x112>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003388:	4a64      	ldr	r2, [pc, #400]	; (800351c <HAL_RCC_OscConfig+0x294>)
 800338a:	6893      	ldr	r3, [r2, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003394:	6853      	ldr	r3, [r2, #4]
 8003396:	025e      	lsls	r6, r3, #9
 8003398:	d40e      	bmi.n	80033b8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	4a60      	ldr	r2, [pc, #384]	; (800351c <HAL_RCC_OscConfig+0x294>)
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	079d      	lsls	r5, r3, #30
 80033a0:	d502      	bpl.n	80033a8 <HAL_RCC_OscConfig+0x120>
 80033a2:	68e3      	ldr	r3, [r4, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d1a6      	bne.n	80032f6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	6921      	ldr	r1, [r4, #16]
 80033ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033b4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e772      	b.n	800329e <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b8:	68e2      	ldr	r2, [r4, #12]
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80033bc:	b1b2      	cbz	r2, 80033ec <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_ENABLE();
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033c2:	f7fe fd9b 	bl	8001efc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	4d55      	ldr	r5, [pc, #340]	; (800351c <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80033c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	0798      	lsls	r0, r3, #30
 80033ce:	d507      	bpl.n	80033e0 <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	6922      	ldr	r2, [r4, #16]
 80033d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033dc:	602b      	str	r3, [r5, #0]
 80033de:	e75e      	b.n	800329e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd8c 	bl	8001efc <HAL_GetTick>
 80033e4:	1b80      	subs	r0, r0, r6
 80033e6:	2802      	cmp	r0, #2
 80033e8:	d9ef      	bls.n	80033ca <HAL_RCC_OscConfig+0x142>
 80033ea:	e79a      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80033ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ee:	f7fe fd85 	bl	8001efc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4e4a      	ldr	r6, [pc, #296]	; (800351c <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80033f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	6833      	ldr	r3, [r6, #0]
 80033f8:	0799      	lsls	r1, r3, #30
 80033fa:	f57f af50 	bpl.w	800329e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe fd7d 	bl	8001efc <HAL_GetTick>
 8003402:	1b40      	subs	r0, r0, r5
 8003404:	2802      	cmp	r0, #2
 8003406:	d9f6      	bls.n	80033f6 <HAL_RCC_OscConfig+0x16e>
 8003408:	e78b      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340a:	6962      	ldr	r2, [r4, #20]
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800340e:	b182      	cbz	r2, 8003432 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8003410:	2201      	movs	r2, #1
 8003412:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003416:	f7fe fd71 	bl	8001efc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	4e40      	ldr	r6, [pc, #256]	; (800351c <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 800341c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003420:	079f      	lsls	r7, r3, #30
 8003422:	f53f af40 	bmi.w	80032a6 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003426:	f7fe fd69 	bl	8001efc <HAL_GetTick>
 800342a:	1b40      	subs	r0, r0, r5
 800342c:	2802      	cmp	r0, #2
 800342e:	d9f6      	bls.n	800341e <HAL_RCC_OscConfig+0x196>
 8003430:	e777      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8003432:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003436:	f7fe fd61 	bl	8001efc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343a:	4e38      	ldr	r6, [pc, #224]	; (800351c <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 800343c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003440:	0798      	lsls	r0, r3, #30
 8003442:	f57f af30 	bpl.w	80032a6 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fd59 	bl	8001efc <HAL_GetTick>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	2802      	cmp	r0, #2
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x1b6>
 8003450:	e767      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x294>)
 8003454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003456:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800345a:	d128      	bne.n	80034ae <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	9201      	str	r2, [sp, #4]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003470:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	4d2c      	ldr	r5, [pc, #176]	; (8003524 <HAL_RCC_OscConfig+0x29c>)
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	05d9      	lsls	r1, r3, #23
 8003478:	d51b      	bpl.n	80034b2 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347a:	68a3      	ldr	r3, [r4, #8]
 800347c:	4d27      	ldr	r5, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x294>)
 800347e:	2b01      	cmp	r3, #1
 8003480:	d127      	bne.n	80034d2 <HAL_RCC_OscConfig+0x24a>
 8003482:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800348a:	f7fe fd37 	bl	8001efc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4e23      	ldr	r6, [pc, #140]	; (800351c <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8003490:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003498:	079b      	lsls	r3, r3, #30
 800349a:	d539      	bpl.n	8003510 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 800349c:	2f00      	cmp	r7, #0
 800349e:	f43f af06 	beq.w	80032ae <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_RCC_OscConfig+0x294>)
 80034a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
 80034ac:	e6ff      	b.n	80032ae <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2700      	movs	r7, #0
 80034b0:	e7df      	b.n	8003472 <HAL_RCC_OscConfig+0x1ea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80034ba:	f7fe fd1f 	bl	8001efc <HAL_GetTick>
 80034be:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	05da      	lsls	r2, r3, #23
 80034c4:	d4d9      	bmi.n	800347a <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fd19 	bl	8001efc <HAL_GetTick>
 80034ca:	1b80      	subs	r0, r0, r6
 80034cc:	2802      	cmp	r0, #2
 80034ce:	d9f7      	bls.n	80034c0 <HAL_RCC_OscConfig+0x238>
 80034d0:	e727      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d104      	bne.n	80034e0 <HAL_RCC_OscConfig+0x258>
 80034d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	672b      	str	r3, [r5, #112]	; 0x70
 80034de:	e7d0      	b.n	8003482 <HAL_RCC_OscConfig+0x1fa>
 80034e0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	672a      	str	r2, [r5, #112]	; 0x70
 80034e8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ca      	bne.n	800348a <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 80034f4:	f7fe fd02 	bl	8001efc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80034fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003500:	0798      	lsls	r0, r3, #30
 8003502:	d5cb      	bpl.n	800349c <HAL_RCC_OscConfig+0x214>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe fcfa 	bl	8001efc <HAL_GetTick>
 8003508:	1b80      	subs	r0, r0, r6
 800350a:	4540      	cmp	r0, r8
 800350c:	d9f7      	bls.n	80034fe <HAL_RCC_OscConfig+0x276>
 800350e:	e708      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe fcf4 	bl	8001efc <HAL_GetTick>
 8003514:	1b40      	subs	r0, r0, r5
 8003516:	4540      	cmp	r0, r8
 8003518:	d9bd      	bls.n	8003496 <HAL_RCC_OscConfig+0x20e>
 800351a:	e702      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
 800351c:	40023800 	.word	0x40023800
 8003520:	42470000 	.word	0x42470000
 8003524:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003528:	4d3b      	ldr	r5, [pc, #236]	; (8003618 <HAL_RCC_OscConfig+0x390>)
 800352a:	68ab      	ldr	r3, [r5, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d040      	beq.n	80035b6 <HAL_RCC_OscConfig+0x32e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0x394>)
 8003536:	2200      	movs	r2, #0
 8003538:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800353a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353c:	d12e      	bne.n	800359c <HAL_RCC_OscConfig+0x314>
        tickstart = HAL_GetTick();
 800353e:	f7fe fcdd 	bl	8001efc <HAL_GetTick>
 8003542:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	0199      	lsls	r1, r3, #6
 8003548:	d422      	bmi.n	8003590 <HAL_RCC_OscConfig+0x308>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800354a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800354e:	4313      	orrs	r3, r2
 8003550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003552:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003556:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003558:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800355c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800355e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003562:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003564:	0852      	lsrs	r2, r2, #1
 8003566:	3a01      	subs	r2, #1
 8003568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800356c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_OscConfig+0x394>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4d29      	ldr	r5, [pc, #164]	; (8003618 <HAL_RCC_OscConfig+0x390>)
        __HAL_RCC_PLL_ENABLE();
 8003572:	2201      	movs	r2, #1
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003576:	f7fe fcc1 	bl	8001efc <HAL_GetTick>
 800357a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	f53f ae99 	bmi.w	80032b6 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fcba 	bl	8001efc <HAL_GetTick>
 8003588:	1b00      	subs	r0, r0, r4
 800358a:	2802      	cmp	r0, #2
 800358c:	d9f6      	bls.n	800357c <HAL_RCC_OscConfig+0x2f4>
 800358e:	e6c8      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fcb4 	bl	8001efc <HAL_GetTick>
 8003594:	1b80      	subs	r0, r0, r6
 8003596:	2802      	cmp	r0, #2
 8003598:	d9d4      	bls.n	8003544 <HAL_RCC_OscConfig+0x2bc>
 800359a:	e6c2      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800359c:	f7fe fcae 	bl	8001efc <HAL_GetTick>
 80035a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	f57f ae86 	bpl.w	80032b6 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe fca7 	bl	8001efc <HAL_GetTick>
 80035ae:	1b00      	subs	r0, r0, r4
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d9f6      	bls.n	80035a2 <HAL_RCC_OscConfig+0x31a>
 80035b4:	e6b5      	b.n	8003322 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b6:	2801      	cmp	r0, #1
 80035b8:	f43f aeb4 	beq.w	8003324 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 80035bc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	4291      	cmp	r1, r2
 80035c6:	f47f ae96 	bne.w	80032f6 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	428a      	cmp	r2, r1
 80035d2:	f47f ae90 	bne.w	80032f6 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80035dc:	401a      	ands	r2, r3
 80035de:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80035e2:	f47f ae88 	bne.w	80032f6 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035e8:	0852      	lsrs	r2, r2, #1
 80035ea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80035ee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80035f4:	f47f ae7f 	bne.w	80032f6 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fe:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003602:	f47f ae78 	bne.w	80032f6 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003606:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003608:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003610:	f43f ae51 	beq.w	80032b6 <HAL_RCC_OscConfig+0x2e>
 8003614:	e66f      	b.n	80032f6 <HAL_RCC_OscConfig+0x6e>
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	42470000 	.word	0x42470000

08003620 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003620:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	f102 030c 	add.w	r3, r2, #12
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	320c      	adds	r2, #12
 8003630:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003634:	6802      	ldr	r2, [r0, #0]
 8003636:	2900      	cmp	r1, #0
 8003638:	d1f2      	bne.n	8003620 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	f102 0314 	add.w	r3, r2, #20
 800363e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	f102 0c14 	add.w	ip, r2, #20
 800364a:	e84c 3100 	strex	r1, r3, [ip]
 800364e:	2900      	cmp	r1, #0
 8003650:	d1f3      	bne.n	800363a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003652:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10b      	bne.n	8003670 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	f102 030c 	add.w	r3, r2, #12
 800365c:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	f102 0c0c 	add.w	ip, r2, #12
 8003668:	e84c 3100 	strex	r1, r3, [ip]
 800366c:	2900      	cmp	r1, #0
 800366e:	d1f3      	bne.n	8003658 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003670:	2320      	movs	r3, #32
 8003672:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003676:	2300      	movs	r3, #0
 8003678:	6303      	str	r3, [r0, #48]	; 0x30
}
 800367a:	4770      	bx	lr

0800367c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	6802      	ldr	r2, [r0, #0]
 800367e:	68c1      	ldr	r1, [r0, #12]
 8003680:	6913      	ldr	r3, [r2, #16]
 8003682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003686:	430b      	orrs	r3, r1
{
 8003688:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368a:	6113      	str	r3, [r2, #16]
{
 800368c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368e:	6883      	ldr	r3, [r0, #8]
 8003690:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003692:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003694:	4303      	orrs	r3, r0
 8003696:	6968      	ldr	r0, [r5, #20]
 8003698:	4303      	orrs	r3, r0
 800369a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 800369c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80036a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80036a6:	430b      	orrs	r3, r1
 80036a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036aa:	6953      	ldr	r3, [r2, #20]
 80036ac:	69a9      	ldr	r1, [r5, #24]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	430b      	orrs	r3, r1
 80036b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b6:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <UART_SetConfig+0xb8>)
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x48>
 80036bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d123      	bne.n	800370c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff fd88 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c8:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ca:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d0:	e9d5 4600 	ldrd	r4, r6, [r5]
 80036d4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d8:	d11b      	bne.n	8003712 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036da:	19b2      	adds	r2, r6, r6
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	415b      	adcs	r3, r3
 80036e2:	f7fd fa81 	bl	8000be8 <__aeabi_uldivmod>
 80036e6:	2264      	movs	r2, #100	; 0x64
 80036e8:	fbb0 f1f2 	udiv	r1, r0, r2
 80036ec:	fb02 0311 	mls	r3, r2, r1, r0
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f8:	f003 0207 	and.w	r2, r3, #7
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003702:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003706:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003708:	60a3      	str	r3, [r4, #8]
  }
}
 800370a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff fd54 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003710:	e7da      	b.n	80036c8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003712:	00b2      	lsls	r2, r6, #2
 8003714:	0fb3      	lsrs	r3, r6, #30
 8003716:	f7fd fa67 	bl	8000be8 <__aeabi_uldivmod>
 800371a:	2264      	movs	r2, #100	; 0x64
 800371c:	fbb0 f1f2 	udiv	r1, r0, r2
 8003720:	fb02 0311 	mls	r3, r2, r1, r0
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	; 0x32
 8003728:	fbb3 f3f2 	udiv	r3, r3, r2
 800372c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003730:	e7ea      	b.n	8003708 <UART_SetConfig+0x8c>
 8003732:	bf00      	nop
 8003734:	40011000 	.word	0x40011000

08003738 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800373a:	4605      	mov	r5, r0
 800373c:	460c      	mov	r4, r1
 800373e:	4617      	mov	r7, r2
 8003740:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	682a      	ldr	r2, [r5, #0]
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	ea34 0303 	bics.w	r3, r4, r3
 800374a:	d101      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800374c:	2000      	movs	r0, #0
 800374e:	e021      	b.n	8003794 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003750:	1c70      	adds	r0, r6, #1
 8003752:	d0f7      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fe fbd2 	bl	8001efc <HAL_GetTick>
 8003758:	1bc0      	subs	r0, r0, r7
 800375a:	4286      	cmp	r6, r0
 800375c:	d31c      	bcc.n	8003798 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800375e:	b1de      	cbz	r6, 8003798 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	0751      	lsls	r1, r2, #29
 8003766:	d5ec      	bpl.n	8003742 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8003768:	2c80      	cmp	r4, #128	; 0x80
 800376a:	d0ea      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800376c:	2c40      	cmp	r4, #64	; 0x40
 800376e:	d0e8      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	0712      	lsls	r2, r2, #28
 8003774:	d5e5      	bpl.n	8003742 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003776:	2400      	movs	r4, #0
 8003778:	9401      	str	r4, [sp, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	9201      	str	r2, [sp, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003782:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003784:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003786:	f7ff ff4b 	bl	8003620 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800378a:	2308      	movs	r3, #8
 800378c:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 800378e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003792:	2001      	movs	r0, #1
}
 8003794:	b003      	add	sp, #12
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003798:	2003      	movs	r0, #3
 800379a:	e7fb      	b.n	8003794 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

0800379c <HAL_UART_Init>:
{
 800379c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800379e:	4604      	mov	r4, r0
 80037a0:	b348      	cbz	r0, 80037f6 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80037a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037aa:	b91b      	cbnz	r3, 80037b4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80037ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80037b0:	f7fe fa2c 	bl	8001c0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80037b4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037b6:	2324      	movs	r3, #36	; 0x24
 80037b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80037bc:	68d3      	ldr	r3, [r2, #12]
 80037be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff ff59 	bl	800367c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037da:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80037e6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f2:	6360      	str	r0, [r4, #52]	; 0x34
}
 80037f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
 80037f8:	e7fc      	b.n	80037f4 <HAL_UART_Init+0x58>

080037fa <HAL_HalfDuplex_Init>:
{
 80037fa:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037fc:	4604      	mov	r4, r0
 80037fe:	b368      	cbz	r0, 800385c <HAL_HalfDuplex_Init+0x62>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003800:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003804:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003808:	b91b      	cbnz	r3, 8003812 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800380a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800380e:	f7fe f9fd 	bl	8001c0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003812:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	2324      	movs	r3, #36	; 0x24
 8003816:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800381a:	68d3      	ldr	r3, [r2, #12]
 800381c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003820:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ff2a 	bl	800367c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003838:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	f042 0208 	orr.w	r2, r2, #8
 8003840:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003848:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800384c:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003850:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003858:	6360      	str	r0, [r4, #52]	; 0x34
}
 800385a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
 800385e:	e7fc      	b.n	800385a <HAL_HalfDuplex_Init+0x60>

08003860 <HAL_UART_Transmit>:
{
 8003860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003862:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003864:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8003868:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	2a20      	cmp	r2, #32
{
 800386c:	4604      	mov	r4, r0
 800386e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	d140      	bne.n	80038f4 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8003872:	2900      	cmp	r1, #0
 8003874:	d040      	beq.n	80038f8 <HAL_UART_Transmit+0x98>
 8003876:	2f00      	cmp	r7, #0
 8003878:	d03e      	beq.n	80038f8 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	2500      	movs	r5, #0
 800387e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003880:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003884:	f7fe fb3a 	bl	8001efc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	68a1      	ldr	r1, [r4, #8]
 800388a:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800388c:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003892:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8003894:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	d103      	bne.n	80038a0 <HAL_UART_Transmit+0x40>
 8003898:	6921      	ldr	r1, [r4, #16]
 800389a:	b909      	cbnz	r1, 80038a0 <HAL_UART_Transmit+0x40>
 800389c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800389e:	460e      	mov	r6, r1
    while (huart->TxXferCount > 0U)
 80038a0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80038a2:	b289      	uxth	r1, r1
 80038a4:	b949      	cbnz	r1, 80038ba <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff45 	bl	8003738 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80038ae:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80038b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b4:	b968      	cbnz	r0, 80038d2 <HAL_UART_Transmit+0x72>
}
 80038b6:	b003      	add	sp, #12
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	4620      	mov	r0, r4
 80038be:	e9cd 2300 	strd	r2, r3, [sp]
 80038c2:	f7ff ff39 	bl	8003738 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80038c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038ca:	b120      	cbz	r0, 80038d6 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80038cc:	2320      	movs	r3, #32
 80038ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e7ef      	b.n	80038b6 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d6:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80038d8:	b94e      	cbnz	r6, 80038ee <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038da:	f835 1b02 	ldrh.w	r1, [r5], #2
 80038de:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e2:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80038e4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80038e6:	3901      	subs	r1, #1
 80038e8:	b289      	uxth	r1, r1
 80038ea:	84e1      	strh	r1, [r4, #38]	; 0x26
 80038ec:	e7d8      	b.n	80038a0 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ee:	f816 1b01 	ldrb.w	r1, [r6], #1
 80038f2:	e7f6      	b.n	80038e2 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80038f4:	2002      	movs	r0, #2
 80038f6:	e7de      	b.n	80038b6 <HAL_UART_Transmit+0x56>
      return  HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7dc      	b.n	80038b6 <HAL_UART_Transmit+0x56>

080038fc <HAL_UART_TxCpltCallback>:
 80038fc:	4770      	bx	lr

080038fe <HAL_UART_RxCpltCallback>:
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_ErrorCallback>:
 8003900:	4770      	bx	lr

08003902 <UART_DMAAbortOnError>:
{
 8003902:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003904:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800390a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800390c:	f7ff fff8 	bl	8003900 <HAL_UART_ErrorCallback>
}
 8003910:	bd08      	pop	{r3, pc}

08003912 <HAL_UARTEx_RxEventCallback>:
}
 8003912:	4770      	bx	lr

08003914 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003914:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003918:	2b22      	cmp	r3, #34	; 0x22
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800391a:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800391c:	d142      	bne.n	80039a4 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003920:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003922:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003928:	d13f      	bne.n	80039aa <UART_Receive_IT.isra.0+0x96>
 800392a:	6901      	ldr	r1, [r0, #16]
 800392c:	2900      	cmp	r1, #0
 800392e:	d13f      	bne.n	80039b0 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003930:	6852      	ldr	r2, [r2, #4]
 8003932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003936:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800393a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800393c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800393e:	3b01      	subs	r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003944:	2b00      	cmp	r3, #0
 8003946:	d12d      	bne.n	80039a4 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003948:	6802      	ldr	r2, [r0, #0]
 800394a:	68d1      	ldr	r1, [r2, #12]
 800394c:	f021 0120 	bic.w	r1, r1, #32
 8003950:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003952:	68d1      	ldr	r1, [r2, #12]
 8003954:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003958:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395a:	6951      	ldr	r1, [r2, #20]
 800395c:	f021 0101 	bic.w	r1, r1, #1
 8003960:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003962:	2220      	movs	r2, #32
 8003964:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003968:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800396c:	2a01      	cmp	r2, #1
 800396e:	6802      	ldr	r2, [r0, #0]
 8003970:	d128      	bne.n	80039c4 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f102 030c 	add.w	r3, r2, #12
 8003978:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	f102 0c0c 	add.w	ip, r2, #12
 8003984:	e84c 3100 	strex	r1, r3, [ip]
 8003988:	2900      	cmp	r1, #0
 800398a:	d1f3      	bne.n	8003974 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	06db      	lsls	r3, r3, #27
 8003990:	d505      	bpl.n	800399e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003992:	9101      	str	r1, [sp, #4]
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	6853      	ldr	r3, [r2, #4]
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800399e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80039a0:	f7ff ffb7 	bl	8003912 <HAL_UARTEx_RxEventCallback>
}
 80039a4:	b003      	add	sp, #12
 80039a6:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039aa:	b939      	cbnz	r1, 80039bc <UART_Receive_IT.isra.0+0xa8>
 80039ac:	6901      	ldr	r1, [r0, #16]
 80039ae:	b929      	cbnz	r1, 80039bc <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b0:	6852      	ldr	r2, [r2, #4]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80039b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80039b8:	3301      	adds	r3, #1
 80039ba:	e7be      	b.n	800393a <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039bc:	6852      	ldr	r2, [r2, #4]
 80039be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039c2:	e7f7      	b.n	80039b4 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80039c4:	f7ff ff9b 	bl	80038fe <HAL_UART_RxCpltCallback>
 80039c8:	e7ec      	b.n	80039a4 <UART_Receive_IT.isra.0+0x90>
	...

080039cc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039cc:	6803      	ldr	r3, [r0, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
{
 80039d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (errorflags == RESET)
 80039d2:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d4:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d6:	695d      	ldr	r5, [r3, #20]
{
 80039d8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80039da:	d108      	bne.n	80039ee <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039dc:	0696      	lsls	r6, r2, #26
 80039de:	d568      	bpl.n	8003ab2 <HAL_UART_IRQHandler+0xe6>
 80039e0:	068d      	lsls	r5, r1, #26
 80039e2:	d566      	bpl.n	8003ab2 <HAL_UART_IRQHandler+0xe6>
}
 80039e4:	b002      	add	sp, #8
 80039e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80039ea:	f7ff bf93 	b.w	8003914 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ee:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039f2:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80039f6:	4305      	orrs	r5, r0
 80039f8:	d05b      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fa:	07d6      	lsls	r6, r2, #31
 80039fc:	d505      	bpl.n	8003a0a <HAL_UART_IRQHandler+0x3e>
 80039fe:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a00:	bf42      	ittt	mi
 8003a02:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8003a04:	f043 0301 	orrmi.w	r3, r3, #1
 8003a08:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0a:	0753      	lsls	r3, r2, #29
 8003a0c:	d504      	bpl.n	8003a18 <HAL_UART_IRQHandler+0x4c>
 8003a0e:	b118      	cbz	r0, 8003a18 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a18:	0796      	lsls	r6, r2, #30
 8003a1a:	d504      	bpl.n	8003a26 <HAL_UART_IRQHandler+0x5a>
 8003a1c:	b118      	cbz	r0, 8003a26 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a26:	0715      	lsls	r5, r2, #28
 8003a28:	d507      	bpl.n	8003a3a <HAL_UART_IRQHandler+0x6e>
 8003a2a:	f001 0320 	and.w	r3, r1, #32
 8003a2e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a30:	bf1e      	ittt	ne
 8003a32:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8003a34:	f043 0308 	orrne.w	r3, r3, #8
 8003a38:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d032      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a40:	0692      	lsls	r2, r2, #26
 8003a42:	d504      	bpl.n	8003a4e <HAL_UART_IRQHandler+0x82>
 8003a44:	068b      	lsls	r3, r1, #26
 8003a46:	d502      	bpl.n	8003a4e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7ff ff63 	bl	8003914 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4e:	6826      	ldr	r6, [r4, #0]
 8003a50:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a52:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a58:	f002 0208 	and.w	r2, r2, #8
 8003a5c:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8003a60:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a62:	d022      	beq.n	8003aaa <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8003a64:	f7ff fddc 	bl	8003620 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	6973      	ldr	r3, [r6, #20]
 8003a6a:	065e      	lsls	r6, r3, #25
 8003a6c:	d518      	bpl.n	8003aa0 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	f102 0314 	add.w	r3, r2, #20
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	3214      	adds	r2, #20
 8003a7e:	e842 3100 	strex	r1, r3, [r2]
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d1f3      	bne.n	8003a6e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8003a86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a88:	b150      	cbz	r0, 8003aa0 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a8a:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <HAL_UART_IRQHandler+0x290>)
 8003a8c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8e:	f7ff f908 	bl	8002ca2 <HAL_DMA_Abort_IT>
 8003a92:	b140      	cbz	r0, 8003aa6 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a96:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8003a98:	b002      	add	sp, #8
 8003a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7ff ff2d 	bl	8003900 <HAL_UART_ErrorCallback>
}
 8003aa6:	b002      	add	sp, #8
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003aaa:	f7ff ff29 	bl	8003900 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	6465      	str	r5, [r4, #68]	; 0x44
 8003ab0:	e7f9      	b.n	8003aa6 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003ab4:	2801      	cmp	r0, #1
 8003ab6:	f040 8095 	bne.w	8003be4 <HAL_UART_IRQHandler+0x218>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aba:	06d5      	lsls	r5, r2, #27
 8003abc:	f140 8092 	bpl.w	8003be4 <HAL_UART_IRQHandler+0x218>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ac0:	06c8      	lsls	r0, r1, #27
 8003ac2:	f140 808f 	bpl.w	8003be4 <HAL_UART_IRQHandler+0x218>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	9201      	str	r2, [sp, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	9201      	str	r2, [sp, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	9201      	str	r2, [sp, #4]
 8003ad2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	0652      	lsls	r2, r2, #25
 8003ad8:	d54e      	bpl.n	8003b78 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ada:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003adc:	680a      	ldr	r2, [r1, #0]
 8003ade:	6852      	ldr	r2, [r2, #4]
 8003ae0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d0df      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003ae8:	4290      	cmp	r0, r2
 8003aea:	d9dc      	bls.n	8003aa6 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8003aec:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aee:	69ca      	ldr	r2, [r1, #28]
 8003af0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003af4:	d036      	beq.n	8003b64 <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	f103 020c 	add.w	r2, r3, #12
 8003afa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f103 000c 	add.w	r0, r3, #12
 8003b06:	e840 2100 	strex	r1, r2, [r0]
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d1f3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x12a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	f103 0214 	add.w	r2, r3, #20
 8003b12:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	f103 0014 	add.w	r0, r3, #20
 8003b1e:	e840 2100 	strex	r1, r2, [r0]
 8003b22:	2900      	cmp	r1, #0
 8003b24:	d1f3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	f103 0214 	add.w	r2, r3, #20
 8003b2a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	f103 0014 	add.w	r0, r3, #20
 8003b36:	e840 2100 	strex	r1, r2, [r0]
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	d1f3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x15a>
          huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	f103 020c 	add.w	r2, r3, #12
 8003b4a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	f103 000c 	add.w	r0, r3, #12
 8003b56:	e840 2100 	strex	r1, r2, [r0]
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	d1f3      	bne.n	8003b46 <HAL_UART_IRQHandler+0x17a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b60:	f7ff f860 	bl	8002c24 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b64:	2302      	movs	r3, #2
 8003b66:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b68:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003b6a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003b6c:	1ac9      	subs	r1, r1, r3
 8003b6e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff fece 	bl	8003912 <HAL_UARTEx_RxEventCallback>
 8003b76:	e796      	b.n	8003aa6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003b7a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b7c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8003b7e:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d08f      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b86:	1a89      	subs	r1, r1, r2
 8003b88:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d08b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	f103 020c 	add.w	r2, r3, #12
 8003b92:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	f103 050c 	add.w	r5, r3, #12
 8003b9e:	e845 2000 	strex	r0, r2, [r5]
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d1f3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x1c2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	f103 0214 	add.w	r2, r3, #20
 8003baa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f103 0514 	add.w	r5, r3, #20
 8003bb6:	e845 2000 	strex	r0, r2, [r5]
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d1f3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x1da>
        huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	f103 020c 	add.w	r2, r3, #12
 8003bca:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f103 050c 	add.w	r5, r3, #12
 8003bd6:	e845 2000 	strex	r0, r2, [r5]
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d1f3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x1fa>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bde:	2302      	movs	r3, #2
 8003be0:	6363      	str	r3, [r4, #52]	; 0x34
 8003be2:	e7c5      	b.n	8003b70 <HAL_UART_IRQHandler+0x1a4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be4:	0616      	lsls	r6, r2, #24
 8003be6:	d528      	bpl.n	8003c3a <HAL_UART_IRQHandler+0x26e>
 8003be8:	060d      	lsls	r5, r1, #24
 8003bea:	d526      	bpl.n	8003c3a <HAL_UART_IRQHandler+0x26e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003bf0:	2a21      	cmp	r2, #33	; 0x21
 8003bf2:	f47f af58 	bne.w	8003aa6 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf6:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bf8:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003bfe:	d117      	bne.n	8003c30 <HAL_UART_IRQHandler+0x264>
 8003c00:	6921      	ldr	r1, [r4, #16]
 8003c02:	b9a9      	cbnz	r1, 8003c30 <HAL_UART_IRQHandler+0x264>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c04:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003c08:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c0c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c0e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003c10:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003c12:	3a01      	subs	r2, #1
 8003c14:	b292      	uxth	r2, r2
 8003c16:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	f47f af44 	bne.w	8003aa6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	e73a      	b.n	8003aa6 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c30:	1c51      	adds	r1, r2, #1
 8003c32:	6221      	str	r1, [r4, #32]
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	e7ea      	b.n	8003c10 <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c3a:	0650      	lsls	r0, r2, #25
 8003c3c:	f57f af33 	bpl.w	8003aa6 <HAL_UART_IRQHandler+0xda>
 8003c40:	064a      	lsls	r2, r1, #25
 8003c42:	f57f af30 	bpl.w	8003aa6 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7ff fe51 	bl	80038fc <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003c5a:	e724      	b.n	8003aa6 <HAL_UART_IRQHandler+0xda>
 8003c5c:	08003903 	.word	0x08003903

08003c60 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8003c60:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <_put_c_driver+0x24>)
{
 8003c64:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b13b      	cbz	r3, 8003c7c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003c6c:	4806      	ldr	r0, [pc, #24]	; (8003c88 <_put_c_driver+0x28>)
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	2201      	movs	r2, #1
 8003c74:	f10d 0107 	add.w	r1, sp, #7
 8003c78:	f7ff fdf2 	bl	8003860 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8003c7c:	b003      	add	sp, #12
 8003c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	20001618 	.word	0x20001618

08003c8c <_write>:
{
 8003c8c:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003c8e:	1e14      	subs	r4, r2, #0
 8003c90:	da0a      	bge.n	8003ca8 <_write+0x1c>
 8003c92:	3801      	subs	r0, #1
 8003c94:	2801      	cmp	r0, #1
 8003c96:	d907      	bls.n	8003ca8 <_write+0x1c>
    errno = EBADF;
 8003c98:	f005 f8d8 	bl	8008e4c <__errno>
 8003c9c:	2309      	movs	r3, #9
 8003c9e:	6003      	str	r3, [r0, #0]
    return -1;
 8003ca0:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <_write+0x38>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f9      	beq.n	8003ca4 <_write+0x18>
 8003cb0:	b2a2      	uxth	r2, r4
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <_write+0x3c>)
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	f7ff fdd2 	bl	8003860 <HAL_UART_Transmit>
  return (status ? count : 0);
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	bf18      	it	ne
 8003cc0:	2400      	movne	r4, #0
 8003cc2:	e7ef      	b.n	8003ca4 <_write+0x18>
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	20001618 	.word	0x20001618

08003ccc <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003ccc:	b40f      	push	{r0, r1, r2, r3}
 8003cce:	b507      	push	{r0, r1, r2, lr}
 8003cd0:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003cd2:	2100      	movs	r1, #0
{
 8003cd4:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003cd8:	4804      	ldr	r0, [pc, #16]	; (8003cec <lc_print+0x20>)
  va_start(ap, fmt);
 8003cda:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003cdc:	f000 fa10 	bl	8004100 <vlc_print>
  va_end(ap);
}
 8003ce0:	b003      	add	sp, #12
 8003ce2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce6:	b004      	add	sp, #16
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	08003c61 	.word	0x08003c61

08003cf0 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003cf0:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8003cf2:	4d11      	ldr	r5, [pc, #68]	; (8003d38 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003cf4:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8003cf6:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003cf8:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003cfc:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003d00:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003d04:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003d06:	f004 f9cf 	bl	80080a8 <malloc>

  /* remember size */
  if (ptr) {
 8003d0a:	b1a0      	cbz	r0, 8003d36 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003d0c:	1903      	adds	r3, r0, r4
 8003d0e:	4a0b      	ldr	r2, [pc, #44]	; (8003d3c <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003d10:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003d12:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	07db      	lsls	r3, r3, #31
 8003d18:	d50c      	bpl.n	8003d34 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003d1a:	68eb      	ldr	r3, [r5, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003d20:	686b      	ldr	r3, [r5, #4]
 8003d22:	4423      	add	r3, r4
 8003d24:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003d26:	69ab      	ldr	r3, [r5, #24]
 8003d28:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003d2a:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003d2c:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8003d2e:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8003d30:	bf88      	it	hi
 8003d32:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003d34:	3004      	adds	r0, #4
}
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	20001718 	.word	0x20001718
 8003d3c:	efdcba98 	.word	0xefdcba98

08003d40 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	4604      	mov	r4, r0
 8003d46:	468a      	mov	sl, r1
  if (!t)
 8003d48:	4617      	mov	r7, r2
 8003d4a:	b382      	cbz	r2, 8003dae <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003d4c:	f7ff fa2e 	bl	80031ac <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003d50:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003d52:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003d54:	9001      	str	r0, [sp, #4]
 8003d56:	4651      	mov	r1, sl
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7fc ff45 	bl	8000be8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003d5e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003d62:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003d64:	fba4 0106 	umull	r0, r1, r4, r6
 8003d68:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003d6a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003db4 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	fb06 110a 	mla	r1, r6, sl, r1
 8003d74:	f7fc ff38 	bl	8000be8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003d78:	fbab 3106 	umull	r3, r1, fp, r6
 8003d7c:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003d7e:	fba4 0109 	umull	r0, r1, r4, r9
 8003d82:	9a01      	ldr	r2, [sp, #4]
 8003d84:	fb09 110a 	mla	r1, r9, sl, r1
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f7fc ff2d 	bl	8000be8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8003d8e:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003d90:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003d92:	fbab 8909 	umull	r8, r9, fp, r9
 8003d96:	eba0 0008 	sub.w	r0, r0, r8
 8003d9a:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8003d9e:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003da2:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003da4:	60f8      	str	r0, [r7, #12]
  return 0;
 8003da6:	2000      	movs	r0, #0
}
 8003da8:	b003      	add	sp, #12
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	e7f9      	b.n	8003da8 <dwtCyclesToTime+0x68>
 8003db4:	000f4240 	.word	0x000f4240

08003db8 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <getFlashCacheConf+0x38>)
{
 8003dba:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003dc0:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003dc2:	9b01      	ldr	r3, [sp, #4]
 8003dc4:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003dc6:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003dc8:	f000 000f 	and.w	r0, r0, #15
    mconf |= MCONF_ART_DCACHE;
 8003dcc:	bf4c      	ite	mi
 8003dce:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003dd2:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003dd6:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003dd8:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8003dda:	bf48      	it	mi
 8003ddc:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003de0:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003de2:	bf48      	it	mi
 8003de4:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003de8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003dec:	b002      	add	sp, #8
 8003dee:	4770      	bx	lr
 8003df0:	40023c00 	.word	0x40023c00

08003df4 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003df8:	f7ff f9d8 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 8003dfc:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8003dfe:	f7ff f9d5 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 8003e02:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003e04:	f7ff ffd8 	bl	8003db8 <getFlashCacheConf>
 8003e08:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003e0a:	f7fe f89b 	bl	8001f44 <HAL_GetDEVID>
 8003e0e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003e10:	f7fe f892 	bl	8001f38 <HAL_GetREVID>
 8003e14:	6120      	str	r0, [r4, #16]
}
 8003e16:	bd10      	pop	{r4, pc}

08003e18 <systemSettingLog>:

void systemSettingLog(void)
{
 8003e18:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003e1a:	2203      	movs	r2, #3
{
 8003e1c:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003e1e:	2301      	movs	r3, #1
 8003e20:	210b      	movs	r1, #11
 8003e22:	4826      	ldr	r0, [pc, #152]	; (8003ebc <systemSettingLog+0xa4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003e24:	4c26      	ldr	r4, [pc, #152]	; (8003ec0 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003e26:	f7ff ff51 	bl	8003ccc <lc_print>
  if (!conf)
 8003e2a:	a803      	add	r0, sp, #12
 8003e2c:	f7ff ffe2 	bl	8003df4 <getSysConf.part.0>
  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003e30:	4824      	ldr	r0, [pc, #144]	; (8003ec4 <systemSettingLog+0xac>)
 8003e32:	f7ff ff4b 	bl	8003ccc <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003e36:	9906      	ldr	r1, [sp, #24]
 8003e38:	4823      	ldr	r0, [pc, #140]	; (8003ec8 <systemSettingLog+0xb0>)
 8003e3a:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	bf96      	itet	ls
 8003e44:	4a21      	ldrls	r2, [pc, #132]	; (8003ecc <systemSettingLog+0xb4>)
 8003e46:	4a22      	ldrhi	r2, [pc, #136]	; (8003ed0 <systemSettingLog+0xb8>)
 8003e48:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8003e4c:	9b07      	ldr	r3, [sp, #28]
 8003e4e:	f7ff ff3d 	bl	8003ccc <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <systemSettingLog+0xbc>)
 8003e54:	2104      	movs	r1, #4
 8003e56:	1d5a      	adds	r2, r3, #5
 8003e58:	f103 000a 	add.w	r0, r3, #10
 8003e5c:	f7ff ff36 	bl	8003ccc <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003e60:	f7fe f866 	bl	8001f30 <HAL_GetHalVersion>
 8003e64:	4601      	mov	r1, r0
 8003e66:	481c      	ldr	r0, [pc, #112]	; (8003ed8 <systemSettingLog+0xc0>)
 8003e68:	f7ff ff30 	bl	8003ccc <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003e6c:	9903      	ldr	r1, [sp, #12]
 8003e6e:	481b      	ldr	r0, [pc, #108]	; (8003edc <systemSettingLog+0xc4>)
 8003e70:	fb91 f1f4 	sdiv	r1, r1, r4
 8003e74:	f7ff ff2a 	bl	8003ccc <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003e78:	9904      	ldr	r1, [sp, #16]
 8003e7a:	4819      	ldr	r0, [pc, #100]	; (8003ee0 <systemSettingLog+0xc8>)
 8003e7c:	fb91 f1f4 	sdiv	r1, r1, r4
 8003e80:	f7ff ff24 	bl	8003ccc <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <systemSettingLog+0xcc>)
    return "False";
 8003e86:	4818      	ldr	r0, [pc, #96]	; (8003ee8 <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 8003e88:	6819      	ldr	r1, [r3, #0]
    return "False";
 8003e8a:	1d44      	adds	r4, r0, #5
 8003e8c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003e90:	bf14      	ite	ne
 8003e92:	4602      	movne	r2, r0
 8003e94:	4622      	moveq	r2, r4
 8003e96:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003e9a:	bf14      	ite	ne
 8003e9c:	4603      	movne	r3, r0
 8003e9e:	4623      	moveq	r3, r4
 8003ea0:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003ea4:	bf18      	it	ne
 8003ea6:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003ea8:	f001 050f 	and.w	r5, r1, #15
 8003eac:	e9cd 4500 	strd	r4, r5, [sp]
 8003eb0:	30ec      	adds	r0, #236	; 0xec
 8003eb2:	f7ff ff0b 	bl	8003ccc <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003eb6:	b009      	add	sp, #36	; 0x24
 8003eb8:	bd30      	pop	{r4, r5, pc}
 8003eba:	bf00      	nop
 8003ebc:	0800b459 	.word	0x0800b459
 8003ec0:	000f4240 	.word	0x000f4240
 8003ec4:	0800b476 	.word	0x0800b476
 8003ec8:	0800b496 	.word	0x0800b496
 8003ecc:	0800b970 	.word	0x0800b970
 8003ed0:	0800b446 	.word	0x0800b446
 8003ed4:	0800b4c7 	.word	0x0800b4c7
 8003ed8:	0800b4ef 	.word	0x0800b4ef
 8003edc:	0800b508 	.word	0x0800b508
 8003ee0:	0800b521 	.word	0x0800b521
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	0800b44e 	.word	0x0800b44e

08003eec <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8003eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8003eee:	4c20      	ldr	r4, [pc, #128]	; (8003f70 <aiValidationInit+0x84>)
#else /* USE_SYSTICK_ONLY */
  struct dwtTime t;
  uint32_t st;

  port_dwt_init();
  port_dwt_reset();
 8003ef0:	4e20      	ldr	r6, [pc, #128]	; (8003f74 <aiValidationInit+0x88>)
 8003ef2:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 8003ef6:	f7ff fee9 	bl	8003ccc <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8003efa:	2300      	movs	r3, #0
 8003efc:	f104 0191 	add.w	r1, r4, #145	; 0x91
 8003f00:	2207      	movs	r2, #7
 8003f02:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8003f06:	f7ff fee1 	bl	8003ccc <lc_print>
 8003f0a:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 8003f0c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003f10:	f7ff fedc 	bl	8003ccc <lc_print>

  systemSettingLog();
 8003f14:	f7ff ff80 	bl	8003e18 <systemSettingLog>

  crcIpInit();
 8003f18:	f000 f830 	bl	8003f7c <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8003f1c:	f000 f840 	bl	8003fa0 <port_dwt_init_imp>
  port_dwt_reset();
 8003f20:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 8003f22:	2064      	movs	r0, #100	; 0x64
 8003f24:	f7fd fff0 	bl	8001f08 <HAL_Delay>
  st = port_dwt_get_cycles();
 8003f28:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8003f2a:	466a      	mov	r2, sp
 8003f2c:	2664      	movs	r6, #100	; 0x64
 8003f2e:	4629      	mov	r1, r5
 8003f30:	fbb0 f0f6 	udiv	r0, r0, r6
 8003f34:	f7ff ff04 	bl	8003d40 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (delay(1)=%d.%03d ms)\r\n",
           t.s * 100 + t.ms, t.us);
#else /* USE_CORE_CLOCK_ONLY == 1 */
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8003f38:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8003f3c:	9a03      	ldr	r2, [sp, #12]
 8003f3e:	fb06 3101 	mla	r1, r6, r1, r3
 8003f42:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8003f46:	f7ff fec1 	bl	8003ccc <lc_print>
           t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 8003f4a:	466a      	mov	r2, sp
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f52:	f7ff fef5 	bl	8003d40 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003f56:	9a01      	ldr	r2, [sp, #4]
 8003f58:	9b02      	ldr	r3, [sp, #8]
 8003f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f5e:	fb01 3302 	mla	r3, r1, r2, r3
 8003f62:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <aiValidationInit+0x8c>)
 8003f64:	6013      	str	r3, [r2, #0]
#endif /* !USE_CORE_CLOCK_ONLY != 1 */
  port_dwt_init();
 8003f66:	f000 f81b 	bl	8003fa0 <port_dwt_init_imp>
  cyclesCounterInit();

  return 0;
}
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	0800b5ed 	.word	0x0800b5ed
 8003f74:	e0001000 	.word	0xe0001000
 8003f78:	2000170c 	.word	0x2000170c

08003f7c <port_hal_crc_ip_init_imp>:

#if !defined(NO_PORT_CRC_IP_INIT_IMP)
#if defined(HAS_CRC_IP) && HAS_CRC_IP == 1

void port_hal_crc_ip_init_imp(void)
{
 8003f7c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <port_hal_crc_ip_init_imp+0x20>)
 8003f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003f96:	b002      	add	sp, #8
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <port_dwt_init_imp+0x20>)
 8003fa2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003faa:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <port_dwt_init_imp+0x24>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000ed00 	.word	0xe000ed00
 8003fc4:	e0001000 	.word	0xe0001000

08003fc8 <MX_X_CUBE_AI_Init>:
ai_handle data_activations0[] = {pool0};

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003fc8:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003fca:	f7fd fd3d 	bl	8001a48 <MX_USART2_UART_Init>
    aiValidationInit();
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 8003fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8003fd2:	f7ff bf8b 	b.w	8003eec <aiValidationInit>

08003fd6 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fda:	6896      	ldr	r6, [r2, #8]
{
 8003fdc:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8003fde:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fe0:	f016 0304 	ands.w	r3, r6, #4
{
 8003fe4:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8003fe6:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fea:	d028      	beq.n	800403e <_write_number+0x68>
    if ((int64_t)number < 0) {
 8003fec:	42a9      	cmp	r1, r5
 8003fee:	da07      	bge.n	8004000 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003ff0:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003ff2:	4240      	negs	r0, r0
      specifier->width -= 1;
 8003ff4:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003ff8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003ffc:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8003ffe:	252d      	movs	r5, #45	; 0x2d
 8004000:	f016 0f08 	tst.w	r6, #8
 8004004:	bf14      	ite	ne
 8004006:	f04f 0841 	movne.w	r8, #65	; 0x41
 800400a:	f04f 0861 	moveq.w	r8, #97	; 0x61
 800400e:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004012:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004014:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004018:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800401c:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004020:	f1ba 0f00 	cmp.w	sl, #0
 8004024:	d033      	beq.n	800408e <_write_number+0xb8>
      chr = number & 0x0F;
 8004026:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 800402a:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800402c:	2b09      	cmp	r3, #9
      t = number >> 4;
 800402e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004032:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004036:	d906      	bls.n	8004046 <_write_number+0x70>
 8004038:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 800403a:	b2db      	uxtb	r3, r3
 800403c:	e004      	b.n	8004048 <_write_number+0x72>
  char sign_neg = 0;
 800403e:	461d      	mov	r5, r3
 8004040:	e7de      	b.n	8004000 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004042:	4617      	mov	r7, r2
 8004044:	e7ea      	b.n	800401c <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004046:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004048:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800404c:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004050:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004054:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004058:	d1f3      	bne.n	8004042 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 800405a:	f006 0101 	and.w	r1, r6, #1
 800405e:	b155      	cbz	r5, 8004076 <_write_number+0xa0>
 8004060:	b949      	cbnz	r1, 8004076 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8004062:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004066:	eb0d 0203 	add.w	r2, sp, r3
 800406a:	232d      	movs	r3, #45	; 0x2d
 800406c:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8004070:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004074:	1eba      	subs	r2, r7, #2
 8004076:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	bf14      	ite	ne
 800407c:	2130      	movne	r1, #48	; 0x30
 800407e:	2120      	moveq	r1, #32
 8004080:	f006 0602 	and.w	r6, r6, #2
 8004084:	455b      	cmp	r3, fp
 8004086:	dd13      	ble.n	80040b0 <_write_number+0xda>
 8004088:	b166      	cbz	r6, 80040a4 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 800408a:	b9a5      	cbnz	r5, 80040b6 <_write_number+0xe0>
 800408c:	e01c      	b.n	80040c8 <_write_number+0xf2>
      t = number / 10;
 800408e:	220a      	movs	r2, #10
 8004090:	2300      	movs	r3, #0
 8004092:	f7fc fda9 	bl	8000be8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004096:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800409a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800409e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80040a2:	e7ca      	b.n	800403a <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80040a4:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80040a8:	f10b 0b01 	add.w	fp, fp, #1
 80040ac:	3a01      	subs	r2, #1
 80040ae:	e7e9      	b.n	8004084 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040b0:	b155      	cbz	r5, 80040c8 <_write_number+0xf2>
 80040b2:	455b      	cmp	r3, fp
 80040b4:	d108      	bne.n	80040c8 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80040b6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80040ba:	446b      	add	r3, sp
 80040bc:	212d      	movs	r1, #45	; 0x2d
 80040be:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 80040c2:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80040c6:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80040c8:	eb0d 0602 	add.w	r6, sp, r2
 80040cc:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040d4:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80040d6:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80040d8:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80040da:	45ab      	cmp	fp, r5
 80040dc:	d1f7      	bne.n	80040ce <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	079b      	lsls	r3, r3, #30
 80040e2:	d408      	bmi.n	80040f6 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 80040e4:	4628      	mov	r0, r5
 80040e6:	b011      	add	sp, #68	; 0x44
 80040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 80040ec:	68e3      	ldr	r3, [r4, #12]
 80040ee:	6920      	ldr	r0, [r4, #16]
 80040f0:	2120      	movs	r1, #32
 80040f2:	4798      	blx	r3
 80040f4:	3501      	adds	r5, #1
    while (count < specifier->width) {
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dcf7      	bgt.n	80040ec <_write_number+0x116>
 80040fc:	e7f2      	b.n	80040e4 <_write_number+0x10e>
	...

08004100 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	4682      	mov	sl, r0
 8004106:	b09d      	sub	sp, #116	; 0x74
 8004108:	4688      	mov	r8, r1
 800410a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800410c:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8004110:	4613      	mov	r3, r2
 8004112:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004116:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004118:	b919      	cbnz	r1, 8004122 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 800411a:	4658      	mov	r0, fp
 800411c:	b01d      	add	sp, #116	; 0x74
 800411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004122:	290a      	cmp	r1, #10
 8004124:	d104      	bne.n	8004130 <vlc_print+0x30>
      putc_fct(user, c);
 8004126:	4640      	mov	r0, r8
 8004128:	47d0      	blx	sl
      count++;
 800412a:	f10b 0b01 	add.w	fp, fp, #1
 800412e:	e0fb      	b.n	8004328 <vlc_print+0x228>
    else if (c == '%')
 8004130:	2925      	cmp	r1, #37	; 0x25
 8004132:	d1f8      	bne.n	8004126 <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004134:	2300      	movs	r3, #0
 8004136:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800413a:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 800413e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004142:	461f      	mov	r7, r3
 8004144:	4618      	mov	r0, r3
 8004146:	461a      	mov	r2, r3
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	461e      	mov	r6, r3
      bool long_type = false;
 800414c:	469c      	mov	ip, r3
      bool has_precision = false;
 800414e:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8004150:	9904      	ldr	r1, [sp, #16]
 8004152:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004156:	9104      	str	r1, [sp, #16]
        if (!c)
 8004158:	b32d      	cbz	r5, 80041a6 <vlc_print+0xa6>
        else if (c == '0')
 800415a:	2d39      	cmp	r5, #57	; 0x39
 800415c:	d814      	bhi.n	8004188 <vlc_print+0x88>
 800415e:	2d2c      	cmp	r5, #44	; 0x2c
 8004160:	d91e      	bls.n	80041a0 <vlc_print+0xa0>
 8004162:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 8004166:	290c      	cmp	r1, #12
 8004168:	d811      	bhi.n	800418e <vlc_print+0x8e>
 800416a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800416e:	0044      	.short	0x0044
 8004170:	001001ff 	.word	0x001001ff
 8004174:	00470030 	.word	0x00470030
 8004178:	00470047 	.word	0x00470047
 800417c:	00470047 	.word	0x00470047
 8004180:	00470047 	.word	0x00470047
 8004184:	00470047 	.word	0x00470047
 8004188:	2d6c      	cmp	r5, #108	; 0x6c
 800418a:	f000 8202 	beq.w	8004592 <vlc_print+0x492>
          switch(c)
 800418e:	2d78      	cmp	r5, #120	; 0x78
 8004190:	d809      	bhi.n	80041a6 <vlc_print+0xa6>
 8004192:	2d62      	cmp	r5, #98	; 0x62
 8004194:	d83d      	bhi.n	8004212 <vlc_print+0x112>
 8004196:	2d46      	cmp	r5, #70	; 0x46
 8004198:	f000 810c 	beq.w	80043b4 <vlc_print+0x2b4>
 800419c:	2d58      	cmp	r5, #88	; 0x58
 800419e:	d06b      	beq.n	8004278 <vlc_print+0x178>
 80041a0:	2d25      	cmp	r5, #37	; 0x25
 80041a2:	f000 8088 	beq.w	80042b6 <vlc_print+0x1b6>
 80041a6:	b103      	cbz	r3, 80041aa <vlc_print+0xaa>
 80041a8:	9709      	str	r7, [sp, #36]	; 0x24
 80041aa:	b100      	cbz	r0, 80041ae <vlc_print+0xae>
 80041ac:	9208      	str	r2, [sp, #32]
 80041ae:	9b00      	ldr	r3, [sp, #0]
 80041b0:	b103      	cbz	r3, 80041b4 <vlc_print+0xb4>
 80041b2:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 80041b4:	213c      	movs	r1, #60	; 0x3c
 80041b6:	4640      	mov	r0, r8
 80041b8:	47d0      	blx	sl
        putc_fct(user, '!');
 80041ba:	2121      	movs	r1, #33	; 0x21
 80041bc:	4640      	mov	r0, r8
 80041be:	47d0      	blx	sl
        putc_fct(user, '>');
 80041c0:	213e      	movs	r1, #62	; 0x3e
 80041c2:	4640      	mov	r0, r8
 80041c4:	47d0      	blx	sl
        va_arg(vl, signed long);
 80041c6:	3404      	adds	r4, #4
        count += 3;
 80041c8:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 80041cc:	e0ac      	b.n	8004328 <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 80041ce:	ea56 0502 	orrs.w	r5, r6, r2
 80041d2:	d105      	bne.n	80041e0 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80041d4:	f047 0701 	orr.w	r7, r7, #1
 80041d8:	462a      	mov	r2, r5
 80041da:	462e      	mov	r6, r5
 80041dc:	2301      	movs	r3, #1
 80041de:	e7b7      	b.n	8004150 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041e0:	210a      	movs	r1, #10
          } else if (has_precision) {
 80041e2:	f1be 0f00 	cmp.w	lr, #0
 80041e6:	d002      	beq.n	80041ee <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041e8:	434a      	muls	r2, r1
 80041ea:	4670      	mov	r0, lr
 80041ec:	e7b0      	b.n	8004150 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 80041ee:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 80041f0:	2101      	movs	r1, #1
 80041f2:	9100      	str	r1, [sp, #0]
 80041f4:	e7ac      	b.n	8004150 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 80041f6:	f047 0702 	orr.w	r7, r7, #2
 80041fa:	e7ef      	b.n	80041dc <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041fc:	3d30      	subs	r5, #48	; 0x30
 80041fe:	210a      	movs	r1, #10
          if (has_precision) {
 8004200:	f1be 0f00 	cmp.w	lr, #0
 8004204:	d002      	beq.n	800420c <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004206:	fb01 5202 	mla	r2, r1, r2, r5
 800420a:	e7ee      	b.n	80041ea <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 800420c:	fb01 5606 	mla	r6, r1, r6, r5
 8004210:	e7ee      	b.n	80041f0 <vlc_print+0xf0>
          switch(c)
 8004212:	3d63      	subs	r5, #99	; 0x63
 8004214:	2d15      	cmp	r5, #21
 8004216:	d8c6      	bhi.n	80041a6 <vlc_print+0xa6>
 8004218:	f20f 0e04 	addw	lr, pc, #4
 800421c:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8004220:	080042c9 	.word	0x080042c9
 8004224:	0800437d 	.word	0x0800437d
 8004228:	080041a7 	.word	0x080041a7
 800422c:	080043b5 	.word	0x080043b5
 8004230:	080041a7 	.word	0x080041a7
 8004234:	080041a7 	.word	0x080041a7
 8004238:	0800437d 	.word	0x0800437d
 800423c:	080041a7 	.word	0x080041a7
 8004240:	080041a7 	.word	0x080041a7
 8004244:	080041a7 	.word	0x080041a7
 8004248:	080041a7 	.word	0x080041a7
 800424c:	080041a7 	.word	0x080041a7
 8004250:	080041a7 	.word	0x080041a7
 8004254:	08004367 	.word	0x08004367
 8004258:	080041a7 	.word	0x080041a7
 800425c:	080041a7 	.word	0x080041a7
 8004260:	080042dd 	.word	0x080042dd
 8004264:	080041a7 	.word	0x080041a7
 8004268:	08004573 	.word	0x08004573
 800426c:	080041a7 	.word	0x080041a7
 8004270:	080041a7 	.word	0x080041a7
 8004274:	08004291 	.word	0x08004291
 8004278:	b103      	cbz	r3, 800427c <vlc_print+0x17c>
 800427a:	9709      	str	r7, [sp, #36]	; 0x24
 800427c:	b100      	cbz	r0, 8004280 <vlc_print+0x180>
 800427e:	9208      	str	r2, [sp, #32]
 8004280:	9b00      	ldr	r3, [sp, #0]
 8004282:	b103      	cbz	r3, 8004286 <vlc_print+0x186>
 8004284:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004288:	f043 0308 	orr.w	r3, r3, #8
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	e006      	b.n	800429e <vlc_print+0x19e>
 8004290:	b103      	cbz	r3, 8004294 <vlc_print+0x194>
 8004292:	9709      	str	r7, [sp, #36]	; 0x24
 8004294:	b100      	cbz	r0, 8004298 <vlc_print+0x198>
 8004296:	9208      	str	r2, [sp, #32]
 8004298:	9b00      	ldr	r3, [sp, #0]
 800429a:	b103      	cbz	r3, 800429e <vlc_print+0x19e>
 800429c:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 800429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80042a0:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 80042a4:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 80042a8:	aa07      	add	r2, sp, #28
 80042aa:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 80042ac:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80042ae:	f7ff fe92 	bl	8003fd6 <_write_number>
 80042b2:	4483      	add	fp, r0
            break;
 80042b4:	e038      	b.n	8004328 <vlc_print+0x228>
 80042b6:	b103      	cbz	r3, 80042ba <vlc_print+0x1ba>
 80042b8:	9709      	str	r7, [sp, #36]	; 0x24
 80042ba:	b100      	cbz	r0, 80042be <vlc_print+0x1be>
 80042bc:	9208      	str	r2, [sp, #32]
 80042be:	9b00      	ldr	r3, [sp, #0]
 80042c0:	b103      	cbz	r3, 80042c4 <vlc_print+0x1c4>
 80042c2:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 80042c4:	2125      	movs	r1, #37	; 0x25
 80042c6:	e72e      	b.n	8004126 <vlc_print+0x26>
 80042c8:	b103      	cbz	r3, 80042cc <vlc_print+0x1cc>
 80042ca:	9709      	str	r7, [sp, #36]	; 0x24
 80042cc:	b100      	cbz	r0, 80042d0 <vlc_print+0x1d0>
 80042ce:	9208      	str	r2, [sp, #32]
 80042d0:	9b00      	ldr	r3, [sp, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <vlc_print+0x1d6>
 80042d4:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 80042d6:	f814 1b04 	ldrb.w	r1, [r4], #4
 80042da:	e724      	b.n	8004126 <vlc_print+0x26>
 80042dc:	b103      	cbz	r3, 80042e0 <vlc_print+0x1e0>
 80042de:	9709      	str	r7, [sp, #36]	; 0x24
 80042e0:	b100      	cbz	r0, 80042e4 <vlc_print+0x1e4>
 80042e2:	9208      	str	r2, [sp, #32]
 80042e4:	9b00      	ldr	r3, [sp, #0]
 80042e6:	b103      	cbz	r3, 80042ea <vlc_print+0x1ea>
 80042e8:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 80042ea:	4bab      	ldr	r3, [pc, #684]	; (8004598 <vlc_print+0x498>)
            str = va_arg(vl, char*);
 80042ec:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 80042f0:	f1b9 0f00 	cmp.w	r9, #0
 80042f4:	bf08      	it	eq
 80042f6:	4699      	moveq	r9, r3
  int len = strlen(str);
 80042f8:	4648      	mov	r0, r9
 80042fa:	f7fb ffd9 	bl	80002b0 <strlen>
  if (specifier->precision) {
 80042fe:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004300:	4606      	mov	r6, r0
  if (specifier->precision) {
 8004302:	b113      	cbz	r3, 800430a <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8004304:	4298      	cmp	r0, r3
 8004306:	bfa8      	it	ge
 8004308:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800430a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800430c:	f017 0702 	ands.w	r7, r7, #2
 8004310:	d015      	beq.n	800433e <vlc_print+0x23e>
  int count = 0;
 8004312:	2500      	movs	r5, #0
 8004314:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8004316:	eba2 0309 	sub.w	r3, r2, r9
 800431a:	429e      	cmp	r6, r3
 800431c:	dc11      	bgt.n	8004342 <vlc_print+0x242>
 800431e:	2e00      	cmp	r6, #0
 8004320:	bfa8      	it	ge
 8004322:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8004324:	b9ef      	cbnz	r7, 8004362 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8004326:	44ab      	add	fp, r5
            break;
 8004328:	9a04      	ldr	r2, [sp, #16]
 800432a:	e6f1      	b.n	8004110 <vlc_print+0x10>
      _WRITE_C(' ');
 800432c:	2120      	movs	r1, #32
 800432e:	4640      	mov	r0, r8
 8004330:	47d0      	blx	sl
 8004332:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004334:	9a07      	ldr	r2, [sp, #28]
 8004336:	19ab      	adds	r3, r5, r6
 8004338:	429a      	cmp	r2, r3
 800433a:	dcf7      	bgt.n	800432c <vlc_print+0x22c>
 800433c:	e7ea      	b.n	8004314 <vlc_print+0x214>
  int count = 0;
 800433e:	463d      	mov	r5, r7
 8004340:	e7f8      	b.n	8004334 <vlc_print+0x234>
    _WRITE_C(*str++);
 8004342:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	4640      	mov	r0, r8
 800434a:	47d0      	blx	sl
 800434c:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 800434e:	e7e2      	b.n	8004316 <vlc_print+0x216>
      _WRITE_C(' ');
 8004350:	2120      	movs	r1, #32
 8004352:	4640      	mov	r0, r8
 8004354:	47d0      	blx	sl
 8004356:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004358:	9a07      	ldr	r2, [sp, #28]
 800435a:	1973      	adds	r3, r6, r5
 800435c:	429a      	cmp	r2, r3
 800435e:	dcf7      	bgt.n	8004350 <vlc_print+0x250>
 8004360:	e7e1      	b.n	8004326 <vlc_print+0x226>
 8004362:	1b76      	subs	r6, r6, r5
 8004364:	e7f8      	b.n	8004358 <vlc_print+0x258>
 8004366:	b103      	cbz	r3, 800436a <vlc_print+0x26a>
 8004368:	9709      	str	r7, [sp, #36]	; 0x24
 800436a:	b100      	cbz	r0, 800436e <vlc_print+0x26e>
 800436c:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8004376:	2308      	movs	r3, #8
 8004378:	9307      	str	r3, [sp, #28]
 800437a:	e784      	b.n	8004286 <vlc_print+0x186>
 800437c:	b103      	cbz	r3, 8004380 <vlc_print+0x280>
 800437e:	9709      	str	r7, [sp, #36]	; 0x24
 8004380:	b100      	cbz	r0, 8004384 <vlc_print+0x284>
 8004382:	9208      	str	r2, [sp, #32]
 8004384:	9b00      	ldr	r3, [sp, #0]
 8004386:	b103      	cbz	r3, 800438a <vlc_print+0x28a>
 8004388:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 800438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8004392:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8004394:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 8004396:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8004398:	aa07      	add	r2, sp, #28
 800439a:	f7ff fe1c 	bl	8003fd6 <_write_number>
            break;
 800439e:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 80043a0:	4483      	add	fp, r0
            break;
 80043a2:	e7c1      	b.n	8004328 <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 80043a4:	3407      	adds	r4, #7
 80043a6:	f024 0407 	bic.w	r4, r4, #7
 80043aa:	4625      	mov	r5, r4
 80043ac:	6861      	ldr	r1, [r4, #4]
 80043ae:	f855 0b08 	ldr.w	r0, [r5], #8
 80043b2:	e7f1      	b.n	8004398 <vlc_print+0x298>
 80043b4:	b103      	cbz	r3, 80043b8 <vlc_print+0x2b8>
 80043b6:	9709      	str	r7, [sp, #36]	; 0x24
 80043b8:	b100      	cbz	r0, 80043bc <vlc_print+0x2bc>
 80043ba:	9208      	str	r2, [sp, #32]
 80043bc:	9b00      	ldr	r3, [sp, #0]
 80043be:	b103      	cbz	r3, 80043c2 <vlc_print+0x2c2>
 80043c0:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 80043c2:	3407      	adds	r4, #7
 80043c4:	f024 0407 	bic.w	r4, r4, #7
 80043c8:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 80043cc:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 80043ce:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 80043d2:	b90b      	cbnz	r3, 80043d8 <vlc_print+0x2d8>
              specifier.precision = 6;
 80043d4:	2306      	movs	r3, #6
 80043d6:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 80043d8:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 80043da:	4f70      	ldr	r7, [pc, #448]	; (800459c <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 80043dc:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 80043e0:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 80043e2:	45a9      	cmp	r9, r5
    mul *= 10;
 80043e4:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 80043e8:	f2c0 80ac 	blt.w	8004544 <vlc_print+0x444>
  if (is_signed)
 80043ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043f0:	2300      	movs	r3, #0
 80043f2:	f7fc fb93 	bl	8000b1c <__aeabi_dcmplt>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f000 80ae 	beq.w	8004558 <vlc_print+0x458>
    number = -number;
 80043fc:	9b00      	ldr	r3, [sp, #0]
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	9b01      	ldr	r3, [sp, #4]
 8004402:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004406:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004408:	4632      	mov	r2, r6
 800440a:	463b      	mov	r3, r7
 800440c:	4964      	ldr	r1, [pc, #400]	; (80045a0 <vlc_print+0x4a0>)
 800440e:	2000      	movs	r0, #0
 8004410:	f7fc fa3c 	bl	800088c <__aeabi_ddiv>
 8004414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004418:	f7fb ff58 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 800441c:	4632      	mov	r2, r6
 800441e:	463b      	mov	r3, r7
 8004420:	f7fc f90a 	bl	8000638 <__aeabi_dmul>
 8004424:	f7fc fbf8 	bl	8000c18 <__aeabi_d2ulz>
  uint32_t count = 0;
 8004428:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 800442a:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 800442c:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 800442e:	4691      	mov	r9, r2
 8004430:	2300      	movs	r3, #0
 8004432:	220a      	movs	r2, #10
 8004434:	4648      	mov	r0, r9
 8004436:	9105      	str	r1, [sp, #20]
 8004438:	f7fc fbd6 	bl	8000be8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 800443c:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8004440:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004444:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004446:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 800444a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800444e:	446b      	add	r3, sp
 8004450:	f107 3cff 	add.w	ip, r7, #4294967295
 8004454:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004458:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 800445a:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 800445c:	bf01      	itttt	eq
 800445e:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8004462:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004466:	232e      	moveq	r3, #46	; 0x2e
 8004468:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 800446c:	bf18      	it	ne
 800446e:	461e      	movne	r6, r3
  } while (val);
 8004470:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8004472:	bf06      	itte	eq
 8004474:	3f02      	subeq	r7, #2
      count++;
 8004476:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 8004478:	4667      	movne	r7, ip
  } while (val);
 800447a:	f1b9 0f0a 	cmp.w	r9, #10
 800447e:	f173 0900 	sbcs.w	r9, r3, #0
 8004482:	d2d4      	bcs.n	800442e <vlc_print+0x32e>
    buf[idx--] = '0';
 8004484:	42ae      	cmp	r6, r5
 8004486:	f1c5 0001 	rsb	r0, r5, #1
 800448a:	4430      	add	r0, r6
 800448c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004490:	bf88      	it	hi
 8004492:	2001      	movhi	r0, #1
 8004494:	eba5 0906 	sub.w	r9, r5, r6
 8004498:	eb0d 0301 	add.w	r3, sp, r1
 800449c:	bf88      	it	hi
 800449e:	f04f 0900 	movhi.w	r9, #0
 80044a2:	4438      	add	r0, r7
 80044a4:	4418      	add	r0, r3
 80044a6:	464a      	mov	r2, r9
 80044a8:	f004 fc6d 	bl	8008d86 <memset>
 80044ac:	1b73      	subs	r3, r6, r5
 80044ae:	42ae      	cmp	r6, r5
 80044b0:	bf88      	it	hi
 80044b2:	2300      	movhi	r3, #0
 80044b4:	444e      	add	r6, r9
  if (count == specifier->precision) {
 80044b6:	42b5      	cmp	r5, r6
 80044b8:	441f      	add	r7, r3
 80044ba:	f105 0501 	add.w	r5, r5, #1
 80044be:	d107      	bne.n	80044d0 <vlc_print+0x3d0>
    buf[idx--] = '.';
 80044c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044c4:	446b      	add	r3, sp
 80044c6:	222e      	movs	r2, #46	; 0x2e
 80044c8:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80044cc:	462e      	mov	r6, r5
    buf[idx--] = '.';
 80044ce:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 80044d0:	42b5      	cmp	r5, r6
 80044d2:	d107      	bne.n	80044e4 <vlc_print+0x3e4>
    buf[idx--] = '0';
 80044d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044d8:	446b      	add	r3, sp
 80044da:	2230      	movs	r2, #48	; 0x30
 80044dc:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80044e0:	3601      	adds	r6, #1
    buf[idx--] = '0';
 80044e2:	3f01      	subs	r7, #1
  if (is_signed) {
 80044e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2300      	movs	r3, #0
 80044ec:	f7fc fb16 	bl	8000b1c <__aeabi_dcmplt>
 80044f0:	b138      	cbz	r0, 8004502 <vlc_print+0x402>
    buf[idx--] = '-';
 80044f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044f6:	446b      	add	r3, sp
 80044f8:	222d      	movs	r2, #45	; 0x2d
 80044fa:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80044fe:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8004500:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8004502:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8004504:	42ae      	cmp	r6, r5
 8004506:	f1c5 0001 	rsb	r0, r5, #1
 800450a:	4430      	add	r0, r6
 800450c:	bf88      	it	hi
 800450e:	2001      	movhi	r0, #1
 8004510:	eba5 0906 	sub.w	r9, r5, r6
 8004514:	ab0c      	add	r3, sp, #48	; 0x30
 8004516:	bf88      	it	hi
 8004518:	f04f 0900 	movhi.w	r9, #0
 800451c:	4438      	add	r0, r7
 800451e:	464a      	mov	r2, r9
 8004520:	4418      	add	r0, r3
 8004522:	2120      	movs	r1, #32
 8004524:	f004 fc2f 	bl	8008d86 <memset>
 8004528:	1b73      	subs	r3, r6, r5
 800452a:	42ae      	cmp	r6, r5
 800452c:	bf88      	it	hi
 800452e:	2300      	movhi	r3, #0
 8004530:	443b      	add	r3, r7
 8004532:	aa0c      	add	r2, sp, #48	; 0x30
 8004534:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 8004536:	18d7      	adds	r7, r2, r3
 8004538:	4433      	add	r3, r6
 800453a:	189d      	adds	r5, r3, r2
 800453c:	42bd      	cmp	r5, r7
 800453e:	d110      	bne.n	8004562 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8004540:	44b3      	add	fp, r6
            break;
 8004542:	e6f1      	b.n	8004328 <vlc_print+0x228>
    mul *= 10;
 8004544:	4630      	mov	r0, r6
 8004546:	4639      	mov	r1, r7
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <vlc_print+0x4a4>)
 800454a:	f7fc f875 	bl	8000638 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 800454e:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004552:	4606      	mov	r6, r0
 8004554:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 8004556:	e744      	b.n	80043e2 <vlc_print+0x2e2>
 8004558:	ed9d 7b00 	vldr	d7, [sp]
 800455c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004560:	e752      	b.n	8004408 <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004562:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004566:	4640      	mov	r0, r8
 8004568:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 800456a:	e7e7      	b.n	800453c <vlc_print+0x43c>
        if (!c)
 800456c:	f04f 0e01 	mov.w	lr, #1
 8004570:	e5ee      	b.n	8004150 <vlc_print+0x50>
 8004572:	b103      	cbz	r3, 8004576 <vlc_print+0x476>
 8004574:	9709      	str	r7, [sp, #36]	; 0x24
 8004576:	b100      	cbz	r0, 800457a <vlc_print+0x47a>
 8004578:	9208      	str	r2, [sp, #32]
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	b103      	cbz	r3, 8004580 <vlc_print+0x480>
 800457e:	9607      	str	r6, [sp, #28]
              if (long_type)
 8004580:	f1bc 0f00 	cmp.w	ip, #0
 8004584:	f47f af0e 	bne.w	80043a4 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 8004588:	4625      	mov	r5, r4
 800458a:	4661      	mov	r1, ip
 800458c:	f855 0b04 	ldr.w	r0, [r5], #4
 8004590:	e702      	b.n	8004398 <vlc_print+0x298>
        if (!c)
 8004592:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 8004596:	e5db      	b.n	8004150 <vlc_print+0x50>
 8004598:	0800bab4 	.word	0x0800bab4
 800459c:	3ff00000 	.word	0x3ff00000
 80045a0:	3fe00000 	.word	0x3fe00000
 80045a4:	40240000 	.word	0x40240000

080045a8 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80045a8:	f000 badc 	b.w	8004b64 <ai_platform_network_get_error>

080045ac <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80045ac:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80045ae:	2305      	movs	r3, #5
 80045b0:	2200      	movs	r2, #0
 80045b2:	e9cd 3200 	strd	r3, r2, [sp]
 80045b6:	4a03      	ldr	r2, [pc, #12]	; (80045c4 <ai_network_create+0x18>)
 80045b8:	2301      	movs	r3, #1
 80045ba:	f000 fced 	bl	8004f98 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80045be:	b003      	add	sp, #12
 80045c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80045c4:	200007a8 	.word	0x200007a8

080045c8 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80045c8:	b910      	cbnz	r0, 80045d0 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80045ca:	4802      	ldr	r0, [pc, #8]	; (80045d4 <ai_network_inputs_get+0xc>)
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <ai_network_inputs_get+0x10>)
 80045ce:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80045d0:	f000 bb3c 	b.w	8004c4c <ai_platform_inputs_get>
 80045d4:	200007a8 	.word	0x200007a8
 80045d8:	a1c00100 	.word	0xa1c00100

080045dc <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80045dc:	b910      	cbnz	r0, 80045e4 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80045de:	4802      	ldr	r0, [pc, #8]	; (80045e8 <ai_network_outputs_get+0xc>)
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <ai_network_outputs_get+0x10>)
 80045e2:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80045e4:	f000 bc08 	b.w	8004df8 <ai_platform_outputs_get>
 80045e8:	200007a8 	.word	0x200007a8
 80045ec:	a1c00100 	.word	0xa1c00100

080045f0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80045f8:	f000 fda4 	bl	8005144 <ai_platform_network_init>
  if (!net_ctx) return false;
 80045fc:	4604      	mov	r4, r0
 80045fe:	2800      	cmp	r0, #0
 8004600:	f000 80cf 	beq.w	80047a2 <ai_network_init+0x1b2>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004604:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8004824 <ai_network_init+0x234>
 8004608:	463a      	mov	r2, r7
 800460a:	2101      	movs	r1, #1
 800460c:	4640      	mov	r0, r8
 800460e:	f000 f9df 	bl	80049d0 <ai_platform_get_weights_map>
 8004612:	4605      	mov	r5, r0
 8004614:	2800      	cmp	r0, #0
 8004616:	f000 80c6 	beq.w	80047a6 <ai_network_init+0x1b6>
    dense_20_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <ai_network_init+0x1d0>)
 800461c:	6813      	ldr	r3, [r2, #0]
 800461e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    dense_20_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004624:	f8d8 3000 	ldr.w	r3, [r8]
    dense_20_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004628:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_21_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800462c:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <ai_network_init+0x1d4>)
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004634:	6011      	str	r1, [r2, #0]
    dense_21_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8004636:	f103 0120 	add.w	r1, r3, #32
    dense_21_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 32);
 800463a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_21_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800463e:	4a62      	ldr	r2, [pc, #392]	; (80047c8 <ai_network_init+0x1d8>)
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004646:	6011      	str	r1, [r2, #0]
    dense_21_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 64);
 8004648:	f103 0140 	add.w	r1, r3, #64	; 0x40
    dense_21_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 64);
 800464c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004650:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <ai_network_init+0x1dc>)
 8004652:	6811      	ldr	r1, [r2, #0]
 8004654:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004658:	6011      	str	r1, [r2, #0]
    lstm_20_kernel_array.data = AI_PTR(g_network_weights_map[0] + 68);
 800465a:	f103 0144 	add.w	r1, r3, #68	; 0x44
    lstm_20_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 68);
 800465e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004662:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <ai_network_init+0x1e0>)
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800466a:	6011      	str	r1, [r2, #0]
    lstm_20_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 1668);
 800466c:	f203 6184 	addw	r1, r3, #1668	; 0x684
    lstm_20_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 1668);
 8004670:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_peephole_array.format |= AI_FMT_FLAG_CONST;
 8004674:	4a57      	ldr	r2, [pc, #348]	; (80047d4 <ai_network_init+0x1e4>)
 8004676:	6811      	ldr	r1, [r2, #0]
 8004678:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800467c:	6011      	str	r1, [r2, #0]
    lstm_20_peephole_array.data = AI_PTR(g_network_weights_map[0] + 41668);
 800467e:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 8004682:	31c4      	adds	r1, #196	; 0xc4
    lstm_20_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 41668);
 8004684:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8004688:	4a53      	ldr	r2, [pc, #332]	; (80047d8 <ai_network_init+0x1e8>)
 800468a:	6811      	ldr	r1, [r2, #0]
 800468c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004690:	6011      	str	r1, [r2, #0]
    lstm_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 42268);
 8004692:	f503 4125 	add.w	r1, r3, #42240	; 0xa500
 8004696:	311c      	adds	r1, #28
    lstm_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 42268);
 8004698:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_kernel_array.format |= AI_FMT_FLAG_CONST;
 800469c:	4a4f      	ldr	r2, [pc, #316]	; (80047dc <ai_network_init+0x1ec>)
 800469e:	6811      	ldr	r1, [r2, #0]
 80046a0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046a4:	6011      	str	r1, [r2, #0]
    lstm_21_kernel_array.data = AI_PTR(g_network_weights_map[0] + 43068);
 80046a6:	f503 4128 	add.w	r1, r3, #43008	; 0xa800
 80046aa:	313c      	adds	r1, #60	; 0x3c
    lstm_21_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 43068);
 80046ac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80046b0:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <ai_network_init+0x1f0>)
 80046b2:	6811      	ldr	r1, [r2, #0]
 80046b4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046b8:	6011      	str	r1, [r2, #0]
    lstm_21_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 83068);
 80046ba:	f503 31a2 	add.w	r1, r3, #82944	; 0x14400
 80046be:	317c      	adds	r1, #124	; 0x7c
    lstm_21_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 83068);
 80046c0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80046c4:	4a47      	ldr	r2, [pc, #284]	; (80047e4 <ai_network_init+0x1f4>)
 80046c6:	6811      	ldr	r1, [r2, #0]
 80046c8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046cc:	6011      	str	r1, [r2, #0]
    lstm_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 123068);
 80046ce:	f503 31f0 	add.w	r1, r3, #122880	; 0x1e000
 80046d2:	31bc      	adds	r1, #188	; 0xbc
    lstm_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 123068);
 80046d4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_kernel_array.format |= AI_FMT_FLAG_CONST;
 80046d8:	4a43      	ldr	r2, [pc, #268]	; (80047e8 <ai_network_init+0x1f8>)
 80046da:	6811      	ldr	r1, [r2, #0]
 80046dc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046e0:	6011      	str	r1, [r2, #0]
    lstm_22_kernel_array.data = AI_PTR(g_network_weights_map[0] + 123868);
 80046e2:	f503 31f1 	add.w	r1, r3, #123392	; 0x1e200
 80046e6:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
    lstm_22_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 123868);
 80046ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80046ee:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <ai_network_init+0x1fc>)
 80046f0:	6811      	ldr	r1, [r2, #0]
 80046f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046f6:	6011      	str	r1, [r2, #0]
    lstm_22_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 163868);
 80046f8:	f503 3120 	add.w	r1, r3, #163840	; 0x28000
 80046fc:	311c      	adds	r1, #28
    lstm_22_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 163868);
 80046fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8004702:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <ai_network_init+0x200>)
 8004704:	6811      	ldr	r1, [r2, #0]
    lstm_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 203868);
 8004706:	f503 3347 	add.w	r3, r3, #203776	; 0x31c00
    lstm_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800470a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800470e:	6011      	str	r1, [r2, #0]
    lstm_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 203868);
 8004710:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    lstm_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 203868);
 8004714:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004718:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <ai_network_init+0x204>)
    dense_20_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 204668);
 800471a:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800471e:	6811      	ldr	r1, [r2, #0]
    dense_20_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 204668);
 8004720:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004724:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004728:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800472a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004828 <ai_network_init+0x238>
 800472e:	463a      	mov	r2, r7
 8004730:	2101      	movs	r1, #1
 8004732:	4640      	mov	r0, r8
 8004734:	f000 f9a0 	bl	8004a78 <ai_platform_get_activations_map>
 8004738:	4607      	mov	r7, r0
 800473a:	2800      	cmp	r0, #0
 800473c:	d039      	beq.n	80047b2 <ai_network_init+0x1c2>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 800473e:	f8d8 3000 	ldr.w	r3, [r8]
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <ai_network_init+0x208>)
    lstm_20_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8004744:	482d      	ldr	r0, [pc, #180]	; (80047fc <ai_network_init+0x20c>)
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 8004746:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 192);
 800474a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 800474e:	492c      	ldr	r1, [pc, #176]	; (8004800 <ai_network_init+0x210>)
 8004750:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    lstm_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 8004754:	e9c1 2202 	strd	r2, r2, [r1, #8]
    lstm_20_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8004758:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
    lstm_20_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 800475c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    lstm_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 8004760:	4828      	ldr	r0, [pc, #160]	; (8004804 <ai_network_init+0x214>)
    lstm_21_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 8004762:	e9c0 2202 	strd	r2, r2, [r0, #8]
    lstm_21_output0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004766:	4828      	ldr	r0, [pc, #160]	; (8004808 <ai_network_init+0x218>)
    lstm_21_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004768:	e9c0 3302 	strd	r3, r3, [r0, #8]
    lstm_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 800476c:	4827      	ldr	r0, [pc, #156]	; (800480c <ai_network_init+0x21c>)
    lstm_22_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 800476e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    lstm_22_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8004772:	4a27      	ldr	r2, [pc, #156]	; (8004810 <ai_network_init+0x220>)
    lstm_22_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 8004774:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_20_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <ai_network_init+0x224>)
    dense_20_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800477a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_20_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800477e:	4a26      	ldr	r2, [pc, #152]	; (8004818 <ai_network_init+0x228>)
 8004780:	f103 0120 	add.w	r1, r3, #32
    dense_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 8004784:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_21_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <ai_network_init+0x22c>)
    dense_21_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800478a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_21_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800478e:	4a24      	ldr	r2, [pc, #144]	; (8004820 <ai_network_init+0x230>)
 8004790:	3304      	adds	r3, #4
    dense_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8004792:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004796:	4630      	mov	r0, r6
 8004798:	f000 fdc2 	bl	8005320 <ai_platform_network_post_init>
 800479c:	4038      	ands	r0, r7
 800479e:	4005      	ands	r5, r0
 80047a0:	b2e8      	uxtb	r0, r5

  return ok;
}
 80047a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80047a6:	2212      	movs	r2, #18
 80047a8:	2130      	movs	r1, #48	; 0x30
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 fa48 	bl	8004c40 <ai_platform_network_set_error>
  return false;
 80047b0:	e7bb      	b.n	800472a <ai_network_init+0x13a>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80047b2:	2213      	movs	r2, #19
 80047b4:	2130      	movs	r1, #48	; 0x30
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 fa42 	bl	8004c40 <ai_platform_network_set_error>
  return false;
 80047bc:	e7eb      	b.n	8004796 <ai_network_init+0x1a6>
 80047be:	bf00      	nop
 80047c0:	200005ec 	.word	0x200005ec
 80047c4:	2000074c 	.word	0x2000074c
 80047c8:	200006d8 	.word	0x200006d8
 80047cc:	20000868 	.word	0x20000868
 80047d0:	20000930 	.word	0x20000930
 80047d4:	20000904 	.word	0x20000904
 80047d8:	2000083c 	.word	0x2000083c
 80047dc:	200009b4 	.word	0x200009b4
 80047e0:	20000a50 	.word	0x20000a50
 80047e4:	20000988 	.word	0x20000988
 80047e8:	20000ad4 	.word	0x20000ad4
 80047ec:	20000b70 	.word	0x20000b70
 80047f0:	20000aa8 	.word	0x20000aa8
 80047f4:	20000660 	.word	0x20000660
 80047f8:	20000810 	.word	0x20000810
 80047fc:	200008d8 	.word	0x200008d8
 8004800:	2000095c 	.word	0x2000095c
 8004804:	20000a7c 	.word	0x20000a7c
 8004808:	20000a24 	.word	0x20000a24
 800480c:	20000b9c 	.word	0x20000b9c
 8004810:	20000b44 	.word	0x20000b44
 8004814:	20000634 	.word	0x20000634
 8004818:	200006ac 	.word	0x200006ac
 800481c:	20000720 	.word	0x20000720
 8004820:	20000798 	.word	0x20000798
 8004824:	200017b8 	.word	0x200017b8
 8004828:	200017b4 	.word	0x200017b4

0800482c <ai_network_create_and_init>:
{
 800482c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004830:	4688      	mov	r8, r1
 8004832:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004834:	2100      	movs	r1, #0
{
 8004836:	4606      	mov	r6, r0
 8004838:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800483a:	f7ff feb7 	bl	80045ac <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 800483e:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004842:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8004844:	d107      	bne.n	8004856 <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 8004846:	4668      	mov	r0, sp
 8004848:	f000 f83a 	bl	80048c0 <ai_network_data_params_get>
 800484c:	b938      	cbnz	r0, 800485e <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 800484e:	6830      	ldr	r0, [r6, #0]
 8004850:	f000 f988 	bl	8004b64 <ai_platform_network_get_error>
 8004854:	4604      	mov	r4, r0
}
 8004856:	4620      	mov	r0, r4
 8004858:	b00f      	add	sp, #60	; 0x3c
 800485a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	d11a      	bne.n	800489a <ai_network_create_and_init+0x6e>
    if (weights) {
 8004864:	bb3f      	cbnz	r7, 80048b6 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8004866:	6830      	ldr	r0, [r6, #0]
 8004868:	4669      	mov	r1, sp
 800486a:	f7ff fec1 	bl	80045f0 <ai_network_init>
 800486e:	b928      	cbnz	r0, 800487c <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8004870:	6830      	ldr	r0, [r6, #0]
 8004872:	f000 f977 	bl	8004b64 <ai_platform_network_get_error>
 8004876:	fa5f f980 	uxtb.w	r9, r0
 800487a:	4604      	mov	r4, r0
    return err;
 800487c:	f369 0407 	bfi	r4, r9, #0, #8
 8004880:	e7e9      	b.n	8004856 <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004882:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004886:	4629      	mov	r1, r5
 8004888:	a803      	add	r0, sp, #12
 800488a:	f000 f88d 	bl	80049a8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800488e:	3501      	adds	r5, #1
 8004890:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004894:	42ab      	cmp	r3, r5
 8004896:	dcf4      	bgt.n	8004882 <ai_network_create_and_init+0x56>
 8004898:	e7e4      	b.n	8004864 <ai_network_create_and_init+0x38>
 800489a:	464d      	mov	r5, r9
 800489c:	e7f8      	b.n	8004890 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800489e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80048a2:	4629      	mov	r1, r5
 80048a4:	a801      	add	r0, sp, #4
 80048a6:	f000 f87f 	bl	80049a8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80048aa:	3501      	adds	r5, #1
 80048ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	dcf4      	bgt.n	800489e <ai_network_create_and_init+0x72>
 80048b4:	e7d7      	b.n	8004866 <ai_network_create_and_init+0x3a>
 80048b6:	2500      	movs	r5, #0
 80048b8:	e7f8      	b.n	80048ac <ai_network_create_and_init+0x80>

080048ba <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80048ba:	f000 bdb9 	b.w	8005430 <ai_platform_network_process>
	...

080048c0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80048c0:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80048c2:	4603      	mov	r3, r0
{
 80048c4:	b085      	sub	sp, #20
  if (!params) return false;
 80048c6:	b170      	cbz	r0, 80048e6 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80048c8:	4c08      	ldr	r4, [pc, #32]	; (80048ec <ai_network_data_params_get+0x2c>)
 80048ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048ce:	466a      	mov	r2, sp
 80048d0:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80048d4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80048d8:	ad02      	add	r5, sp, #8
 80048da:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80048de:	4629      	mov	r1, r5
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f91d 	bl	8004b20 <ai_platform_bind_network_params>
}
 80048e6:	b005      	add	sp, #20
 80048e8:	bd30      	pop	{r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	0800b8e4 	.word	0x0800b8e4

080048f0 <ai_version_get>:
 80048f0:	0212      	lsls	r2, r2, #8
 80048f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048f6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80048fa:	4770      	bx	lr

080048fc <get_tensor_byte_size>:
 80048fc:	b410      	push	{r4}
 80048fe:	6983      	ldr	r3, [r0, #24]
 8004900:	68c4      	ldr	r4, [r0, #12]
 8004902:	6941      	ldr	r1, [r0, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	4a07      	ldr	r2, [pc, #28]	; (8004928 <get_tensor_byte_size+0x2c>)
 800490a:	68c9      	ldr	r1, [r1, #12]
 800490c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004910:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004914:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004918:	fb01 f000 	mul.w	r0, r1, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	bf04      	itt	eq
 8004920:	3007      	addeq	r0, #7
 8004922:	08c0      	lsreq	r0, r0, #3
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	000400c0 	.word	0x000400c0

0800492c <ai_buffer_get_size>:
 800492c:	b378      	cbz	r0, 800498e <ai_buffer_get_size+0x62>
 800492e:	b410      	push	{r4}
 8004930:	6803      	ldr	r3, [r0, #0]
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <ai_buffer_get_size+0x64>)
 8004934:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004938:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800493c:	4293      	cmp	r3, r2
 800493e:	d01e      	beq.n	800497e <ai_buffer_get_size+0x52>
 8004940:	6984      	ldr	r4, [r0, #24]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	7d03      	ldrb	r3, [r0, #20]
 8004946:	6941      	ldr	r1, [r0, #20]
 8004948:	f1a3 0301 	sub.w	r3, r3, #1
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004956:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800495a:	da0b      	bge.n	8004974 <ai_buffer_get_size+0x48>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d102      	bne.n	8004966 <ai_buffer_get_size+0x3a>
 8004960:	2802      	cmp	r0, #2
 8004962:	d007      	beq.n	8004974 <ai_buffer_get_size+0x48>
 8004964:	2302      	movs	r3, #2
 8004966:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800496a:	3301      	adds	r3, #1
 800496c:	4298      	cmp	r0, r3
 800496e:	fb01 f202 	mul.w	r2, r1, r2
 8004972:	d1f3      	bne.n	800495c <ai_buffer_get_size+0x30>
 8004974:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	2900      	cmp	r1, #0
 8004980:	d0de      	beq.n	8004940 <ai_buffer_get_size+0x14>
 8004982:	6984      	ldr	r4, [r0, #24]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	331f      	adds	r3, #31
 8004988:	f023 021f 	bic.w	r2, r3, #31
 800498c:	e7da      	b.n	8004944 <ai_buffer_get_size+0x18>
 800498e:	4770      	bx	lr
 8004990:	000400c0 	.word	0x000400c0

08004994 <ai_buffer_array_sane>:
 8004994:	b138      	cbz	r0, 80049a6 <ai_buffer_array_sane+0x12>
 8004996:	6843      	ldr	r3, [r0, #4]
 8004998:	b123      	cbz	r3, 80049a4 <ai_buffer_array_sane+0x10>
 800499a:	8840      	ldrh	r0, [r0, #2]
 800499c:	3800      	subs	r0, #0
 800499e:	bf18      	it	ne
 80049a0:	2001      	movne	r0, #1
 80049a2:	4770      	bx	lr
 80049a4:	4618      	mov	r0, r3
 80049a6:	4770      	bx	lr

080049a8 <ai_buffer_array_item_set_address>:
 80049a8:	b150      	cbz	r0, 80049c0 <ai_buffer_array_item_set_address+0x18>
 80049aa:	6843      	ldr	r3, [r0, #4]
 80049ac:	b14b      	cbz	r3, 80049c2 <ai_buffer_array_item_set_address+0x1a>
 80049ae:	8840      	ldrh	r0, [r0, #2]
 80049b0:	b900      	cbnz	r0, 80049b4 <ai_buffer_array_item_set_address+0xc>
 80049b2:	4770      	bx	lr
 80049b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80049b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80049bc:	2001      	movs	r0, #1
 80049be:	604a      	str	r2, [r1, #4]
 80049c0:	4770      	bx	lr
 80049c2:	4618      	mov	r0, r3
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop

080049c8 <_ai_platform_acquire_crc>:
 80049c8:	2001      	movs	r0, #1
 80049ca:	4770      	bx	lr

080049cc <_ai_platform_release_crc>:
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop

080049d0 <ai_platform_get_weights_map>:
 80049d0:	2a00      	cmp	r2, #0
 80049d2:	d037      	beq.n	8004a44 <ai_platform_get_weights_map+0x74>
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	b1a0      	cbz	r0, 8004a04 <ai_platform_get_weights_map+0x34>
 80049da:	460f      	mov	r7, r1
 80049dc:	b191      	cbz	r1, 8004a04 <ai_platform_get_weights_map+0x34>
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <ai_platform_get_weights_map+0xa4>)
 80049e0:	6810      	ldr	r0, [r2, #0]
 80049e2:	4298      	cmp	r0, r3
 80049e4:	4615      	mov	r5, r2
 80049e6:	d00f      	beq.n	8004a08 <ai_platform_get_weights_map+0x38>
 80049e8:	6855      	ldr	r5, [r2, #4]
 80049ea:	b15d      	cbz	r5, 8004a04 <ai_platform_get_weights_map+0x34>
 80049ec:	682e      	ldr	r6, [r5, #0]
 80049ee:	429e      	cmp	r6, r3
 80049f0:	d02a      	beq.n	8004a48 <ai_platform_get_weights_map+0x78>
 80049f2:	f1a1 0001 	sub.w	r0, r1, #1
 80049f6:	6025      	str	r5, [r4, #0]
 80049f8:	fab0 f080 	clz	r0, r0
 80049fc:	0940      	lsrs	r0, r0, #5
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a00:	42a7      	cmp	r7, r4
 8004a02:	d034      	beq.n	8004a6e <ai_platform_get_weights_map+0x9e>
 8004a04:	2000      	movs	r0, #0
 8004a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a08:	1d10      	adds	r0, r2, #4
 8004a0a:	f7ff ffc3 	bl	8004994 <ai_buffer_array_sane>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0f8      	beq.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a12:	88eb      	ldrh	r3, [r5, #6]
 8004a14:	429f      	cmp	r7, r3
 8004a16:	d1f5      	bne.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a18:	f04f 0e00 	mov.w	lr, #0
 8004a1c:	1f23      	subs	r3, r4, #4
 8004a1e:	4670      	mov	r0, lr
 8004a20:	68aa      	ldr	r2, [r5, #8]
 8004a22:	eb02 0c0e 	add.w	ip, r2, lr
 8004a26:	f10e 0e1c 	add.w	lr, lr, #28
 8004a2a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004a2e:	b124      	cbz	r4, 8004a3a <ai_platform_get_weights_map+0x6a>
 8004a30:	3001      	adds	r0, #1
 8004a32:	4287      	cmp	r7, r0
 8004a34:	f843 4f04 	str.w	r4, [r3, #4]!
 8004a38:	d1f2      	bne.n	8004a20 <ai_platform_get_weights_map+0x50>
 8004a3a:	1a38      	subs	r0, r7, r0
 8004a3c:	fab0 f080 	clz	r0, r0
 8004a40:	0940      	lsrs	r0, r0, #5
 8004a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
 8004a48:	1f23      	subs	r3, r4, #4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	e000      	b.n	8004a52 <ai_platform_get_weights_map+0x82>
 8004a50:	4614      	mov	r4, r2
 8004a52:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004a56:	42b2      	cmp	r2, r6
 8004a58:	d0d2      	beq.n	8004a00 <ai_platform_get_weights_map+0x30>
 8004a5a:	f843 2f04 	str.w	r2, [r3, #4]!
 8004a5e:	1c62      	adds	r2, r4, #1
 8004a60:	4297      	cmp	r7, r2
 8004a62:	d1f5      	bne.n	8004a50 <ai_platform_get_weights_map+0x80>
 8004a64:	3402      	adds	r4, #2
 8004a66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004a6a:	42b3      	cmp	r3, r6
 8004a6c:	d1ca      	bne.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	a1facade 	.word	0xa1facade

08004a78 <ai_platform_get_activations_map>:
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d038      	beq.n	8004aee <ai_platform_get_activations_map+0x76>
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b1a0      	cbz	r0, 8004aac <ai_platform_get_activations_map+0x34>
 8004a82:	460f      	mov	r7, r1
 8004a84:	b191      	cbz	r1, 8004aac <ai_platform_get_activations_map+0x34>
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <ai_platform_get_activations_map+0xa4>)
 8004a88:	6810      	ldr	r0, [r2, #0]
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	d00f      	beq.n	8004ab0 <ai_platform_get_activations_map+0x38>
 8004a90:	6a15      	ldr	r5, [r2, #32]
 8004a92:	b15d      	cbz	r5, 8004aac <ai_platform_get_activations_map+0x34>
 8004a94:	682e      	ldr	r6, [r5, #0]
 8004a96:	429e      	cmp	r6, r3
 8004a98:	d02b      	beq.n	8004af2 <ai_platform_get_activations_map+0x7a>
 8004a9a:	f1a1 0001 	sub.w	r0, r1, #1
 8004a9e:	6025      	str	r5, [r4, #0]
 8004aa0:	fab0 f080 	clz	r0, r0
 8004aa4:	0940      	lsrs	r0, r0, #5
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	42a7      	cmp	r7, r4
 8004aaa:	d035      	beq.n	8004b18 <ai_platform_get_activations_map+0xa0>
 8004aac:	2000      	movs	r0, #0
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	f102 000c 	add.w	r0, r2, #12
 8004ab4:	f7ff ff6e 	bl	8004994 <ai_buffer_array_sane>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d0f7      	beq.n	8004aac <ai_platform_get_activations_map+0x34>
 8004abc:	89eb      	ldrh	r3, [r5, #14]
 8004abe:	429f      	cmp	r7, r3
 8004ac0:	d1f4      	bne.n	8004aac <ai_platform_get_activations_map+0x34>
 8004ac2:	f04f 0e00 	mov.w	lr, #0
 8004ac6:	1f23      	subs	r3, r4, #4
 8004ac8:	4670      	mov	r0, lr
 8004aca:	692a      	ldr	r2, [r5, #16]
 8004acc:	eb02 0c0e 	add.w	ip, r2, lr
 8004ad0:	f10e 0e1c 	add.w	lr, lr, #28
 8004ad4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004ad8:	b124      	cbz	r4, 8004ae4 <ai_platform_get_activations_map+0x6c>
 8004ada:	3001      	adds	r0, #1
 8004adc:	4287      	cmp	r7, r0
 8004ade:	f843 4f04 	str.w	r4, [r3, #4]!
 8004ae2:	d1f2      	bne.n	8004aca <ai_platform_get_activations_map+0x52>
 8004ae4:	1a38      	subs	r0, r7, r0
 8004ae6:	fab0 f080 	clz	r0, r0
 8004aea:	0940      	lsrs	r0, r0, #5
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aee:	2000      	movs	r0, #0
 8004af0:	4770      	bx	lr
 8004af2:	1f23      	subs	r3, r4, #4
 8004af4:	4628      	mov	r0, r5
 8004af6:	2400      	movs	r4, #0
 8004af8:	e000      	b.n	8004afc <ai_platform_get_activations_map+0x84>
 8004afa:	4614      	mov	r4, r2
 8004afc:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004b00:	42b2      	cmp	r2, r6
 8004b02:	d0d1      	beq.n	8004aa8 <ai_platform_get_activations_map+0x30>
 8004b04:	f843 2f04 	str.w	r2, [r3, #4]!
 8004b08:	1c62      	adds	r2, r4, #1
 8004b0a:	4297      	cmp	r7, r2
 8004b0c:	d1f5      	bne.n	8004afa <ai_platform_get_activations_map+0x82>
 8004b0e:	3402      	adds	r4, #2
 8004b10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004b14:	42b3      	cmp	r3, r6
 8004b16:	d1c9      	bne.n	8004aac <ai_platform_get_activations_map+0x34>
 8004b18:	2001      	movs	r0, #1
 8004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1c:	a1facade 	.word	0xa1facade

08004b20 <ai_platform_bind_network_params>:
 8004b20:	b1a0      	cbz	r0, 8004b4c <ai_platform_bind_network_params+0x2c>
 8004b22:	b1b1      	cbz	r1, 8004b52 <ai_platform_bind_network_params+0x32>
 8004b24:	b1c2      	cbz	r2, 8004b58 <ai_platform_bind_network_params+0x38>
 8004b26:	b410      	push	{r4}
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4c0d      	ldr	r4, [pc, #52]	; (8004b60 <ai_platform_bind_network_params+0x40>)
 8004b2c:	f843 4b04 	str.w	r4, [r3], #4
 8004b30:	f100 0c0c 	add.w	ip, r0, #12
 8004b34:	c903      	ldmia	r1, {r0, r1}
 8004b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004b42:	2301      	movs	r3, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	4770      	bx	lr
 8004b52:	460b      	mov	r3, r1
 8004b54:	4618      	mov	r0, r3
 8004b56:	4770      	bx	lr
 8004b58:	4613      	mov	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	a1facade 	.word	0xa1facade

08004b64 <ai_platform_network_get_error>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	b1f0      	cbz	r0, 8004ba6 <ai_platform_network_get_error+0x42>
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <ai_platform_network_get_error+0xc4>)
 8004b6a:	6802      	ldr	r2, [r0, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	4604      	mov	r4, r0
 8004b70:	d119      	bne.n	8004ba6 <ai_platform_network_get_error+0x42>
 8004b72:	f7ff ff29 	bl	80049c8 <_ai_platform_acquire_crc>
 8004b76:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <ai_platform_network_get_error+0xc8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b82:	d03c      	beq.n	8004bfe <ai_platform_network_get_error+0x9a>
 8004b84:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <ai_platform_network_get_error+0xcc>)
 8004b86:	2301      	movs	r3, #1
 8004b88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1fb      	bne.n	8004b8c <ai_platform_network_get_error+0x28>
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <ai_platform_network_get_error+0xd0>)
 8004b96:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <ai_platform_network_get_error+0xd4>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d038      	beq.n	8004c16 <ai_platform_network_get_error+0xb2>
 8004ba4:	e7fe      	b.n	8004ba4 <ai_platform_network_get_error+0x40>
 8004ba6:	f7ff ff0f 	bl	80049c8 <_ai_platform_acquire_crc>
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <ai_platform_network_get_error+0xc8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb6:	d010      	beq.n	8004bda <ai_platform_network_get_error+0x76>
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <ai_platform_network_get_error+0xcc>)
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004bc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1fb      	bne.n	8004bc0 <ai_platform_network_get_error+0x5c>
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <ai_platform_network_get_error+0xd0>)
 8004bca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004bce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <ai_platform_network_get_error+0xd4>)
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d00d      	beq.n	8004bf4 <ai_platform_network_get_error+0x90>
 8004bd8:	e7fe      	b.n	8004bd8 <ai_platform_network_get_error+0x74>
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <ai_platform_network_get_error+0xd8>)
 8004bdc:	2301      	movs	r3, #1
 8004bde:	6093      	str	r3, [r2, #8]
 8004be0:	6893      	ldr	r3, [r2, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1fc      	bne.n	8004be0 <ai_platform_network_get_error+0x7c>
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <ai_platform_network_get_error+0xd0>)
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <ai_platform_network_get_error+0xd4>)
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d000      	beq.n	8004bf4 <ai_platform_network_get_error+0x90>
 8004bf2:	e7fe      	b.n	8004bf2 <ai_platform_network_get_error+0x8e>
 8004bf4:	f7ff feea 	bl	80049cc <_ai_platform_release_crc>
 8004bf8:	f241 0010 	movw	r0, #4112	; 0x1010
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <ai_platform_network_get_error+0xd8>)
 8004c00:	2301      	movs	r3, #1
 8004c02:	6093      	str	r3, [r2, #8]
 8004c04:	6893      	ldr	r3, [r2, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1fc      	bne.n	8004c04 <ai_platform_network_get_error+0xa0>
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <ai_platform_network_get_error+0xd0>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <ai_platform_network_get_error+0xd4>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d107      	bne.n	8004c26 <ai_platform_network_get_error+0xc2>
 8004c16:	f7ff fed9 	bl	80049cc <_ai_platform_release_crc>
 8004c1a:	f104 0010 	add.w	r0, r4, #16
 8004c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c22:	f000 be8b 	b.w	800593c <core_get_error>
 8004c26:	e7fe      	b.n	8004c26 <ai_platform_network_get_error+0xc2>
 8004c28:	a1c00100 	.word	0xa1c00100
 8004c2c:	e0042000 	.word	0xe0042000
 8004c30:	58024000 	.word	0x58024000
 8004c34:	f407a5c2 	.word	0xf407a5c2
 8004c38:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c3c:	40023000 	.word	0x40023000

08004c40 <ai_platform_network_set_error>:
 8004c40:	b110      	cbz	r0, 8004c48 <ai_platform_network_set_error+0x8>
 8004c42:	3010      	adds	r0, #16
 8004c44:	f000 be80 	b.w	8005948 <core_set_error>
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <ai_platform_inputs_get>:
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	b085      	sub	sp, #20
 8004c52:	9102      	str	r1, [sp, #8]
 8004c54:	b1f0      	cbz	r0, 8004c94 <ai_platform_inputs_get+0x48>
 8004c56:	4b62      	ldr	r3, [pc, #392]	; (8004de0 <ai_platform_inputs_get+0x194>)
 8004c58:	6802      	ldr	r2, [r0, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	d119      	bne.n	8004c94 <ai_platform_inputs_get+0x48>
 8004c60:	f7ff feb2 	bl	80049c8 <_ai_platform_acquire_crc>
 8004c64:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <ai_platform_inputs_get+0x198>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d03d      	beq.n	8004cee <ai_platform_inputs_get+0xa2>
 8004c72:	4a5d      	ldr	r2, [pc, #372]	; (8004de8 <ai_platform_inputs_get+0x19c>)
 8004c74:	2301      	movs	r3, #1
 8004c76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1fb      	bne.n	8004c7a <ai_platform_inputs_get+0x2e>
 8004c82:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <ai_platform_inputs_get+0x1a0>)
 8004c84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c8c:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <ai_platform_inputs_get+0x1a4>)
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d039      	beq.n	8004d06 <ai_platform_inputs_get+0xba>
 8004c92:	e7fe      	b.n	8004c92 <ai_platform_inputs_get+0x46>
 8004c94:	f7ff fe98 	bl	80049c8 <_ai_platform_acquire_crc>
 8004c98:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <ai_platform_inputs_get+0x198>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d010      	beq.n	8004cc8 <ai_platform_inputs_get+0x7c>
 8004ca6:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <ai_platform_inputs_get+0x19c>)
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1fb      	bne.n	8004cae <ai_platform_inputs_get+0x62>
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <ai_platform_inputs_get+0x1a0>)
 8004cb8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004cbc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <ai_platform_inputs_get+0x1a4>)
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <ai_platform_inputs_get+0x96>
 8004cc6:	e7fe      	b.n	8004cc6 <ai_platform_inputs_get+0x7a>
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <ai_platform_inputs_get+0x1a8>)
 8004cca:	2301      	movs	r3, #1
 8004ccc:	6093      	str	r3, [r2, #8]
 8004cce:	6893      	ldr	r3, [r2, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1fc      	bne.n	8004cce <ai_platform_inputs_get+0x82>
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <ai_platform_inputs_get+0x1a0>)
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <ai_platform_inputs_get+0x1a4>)
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d000      	beq.n	8004ce2 <ai_platform_inputs_get+0x96>
 8004ce0:	e7fe      	b.n	8004ce0 <ai_platform_inputs_get+0x94>
 8004ce2:	f7ff fe73 	bl	80049cc <_ai_platform_release_crc>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	b005      	add	sp, #20
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <ai_platform_inputs_get+0x1a8>)
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	6093      	str	r3, [r2, #8]
 8004cf4:	6893      	ldr	r3, [r2, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1fc      	bne.n	8004cf4 <ai_platform_inputs_get+0xa8>
 8004cfa:	4b3c      	ldr	r3, [pc, #240]	; (8004dec <ai_platform_inputs_get+0x1a0>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <ai_platform_inputs_get+0x1a4>)
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d155      	bne.n	8004db2 <ai_platform_inputs_get+0x166>
 8004d06:	f7ff fe61 	bl	80049cc <_ai_platform_release_crc>
 8004d0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d051      	beq.n	8004db4 <ai_platform_inputs_get+0x168>
 8004d10:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004d14:	f1ba 0f00 	cmp.w	sl, #0
 8004d18:	d04c      	beq.n	8004db4 <ai_platform_inputs_get+0x168>
 8004d1a:	f04f 0b00 	mov.w	fp, #0
 8004d1e:	465d      	mov	r5, fp
 8004d20:	9703      	str	r7, [sp, #12]
 8004d22:	e016      	b.n	8004d52 <ai_platform_inputs_get+0x106>
 8004d24:	9901      	ldr	r1, [sp, #4]
 8004d26:	2301      	movs	r3, #1
 8004d28:	507b      	str	r3, [r7, r1]
 8004d2a:	69b1      	ldr	r1, [r6, #24]
 8004d2c:	6849      	ldr	r1, [r1, #4]
 8004d2e:	6121      	str	r1, [r4, #16]
 8004d30:	f04f 0301 	mov.w	r3, #1
 8004d34:	7523      	strb	r3, [r4, #20]
 8004d36:	e9c4 c200 	strd	ip, r2, [r4]
 8004d3a:	6962      	ldr	r2, [r4, #20]
 8004d3c:	60a0      	str	r0, [r4, #8]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f369 221f 	bfi	r2, r9, #8, #24
 8004d44:	f8c4 8018 	str.w	r8, [r4, #24]
 8004d48:	60e3      	str	r3, [r4, #12]
 8004d4a:	3501      	adds	r5, #1
 8004d4c:	f10b 0b1c 	add.w	fp, fp, #28
 8004d50:	6162      	str	r2, [r4, #20]
 8004d52:	f8ba 3000 	ldrh.w	r3, [sl]
 8004d56:	42ab      	cmp	r3, r5
 8004d58:	b2aa      	uxth	r2, r5
 8004d5a:	d93a      	bls.n	8004dd2 <ai_platform_inputs_get+0x186>
 8004d5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004d60:	00e9      	lsls	r1, r5, #3
 8004d62:	9101      	str	r1, [sp, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d034      	beq.n	8004dd2 <ai_platform_inputs_get+0x186>
 8004d68:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004d6c:	2e00      	cmp	r6, #0
 8004d6e:	d030      	beq.n	8004dd2 <ai_platform_inputs_get+0x186>
 8004d70:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d74:	69b2      	ldr	r2, [r6, #24]
 8004d76:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004d7a:	6810      	ldr	r0, [r2, #0]
 8004d7c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004d80:	68b3      	ldr	r3, [r6, #8]
 8004d82:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004d86:	f003 f8e9 	bl	8007f5c <ai_array_to_buffer_fmt>
 8004d8a:	69b1      	ldr	r1, [r6, #24]
 8004d8c:	4684      	mov	ip, r0
 8004d8e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004d92:	688a      	ldr	r2, [r1, #8]
 8004d94:	445c      	add	r4, fp
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d0c8      	beq.n	8004d2c <ai_platform_inputs_get+0xe0>
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004da0:	6831      	ldr	r1, [r6, #0]
 8004da2:	6041      	str	r1, [r0, #4]
 8004da4:	b111      	cbz	r1, 8004dac <ai_platform_inputs_get+0x160>
 8004da6:	8849      	ldrh	r1, [r1, #2]
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d1bb      	bne.n	8004d24 <ai_platform_inputs_get+0xd8>
 8004dac:	69b1      	ldr	r1, [r6, #24]
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7bc      	b.n	8004d2c <ai_platform_inputs_get+0xe0>
 8004db2:	e7fe      	b.n	8004db2 <ai_platform_inputs_get+0x166>
 8004db4:	2218      	movs	r2, #24
 8004db6:	2111      	movs	r1, #17
 8004db8:	f107 0010 	add.w	r0, r7, #16
 8004dbc:	f000 fdc4 	bl	8005948 <core_set_error>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	9b02      	ldr	r3, [sp, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d08e      	beq.n	8004ce8 <ai_platform_inputs_get+0x9c>
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	b005      	add	sp, #20
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	9f03      	ldr	r7, [sp, #12]
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d0ed      	beq.n	8004db4 <ai_platform_inputs_get+0x168>
 8004dd8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004ddc:	6858      	ldr	r0, [r3, #4]
 8004dde:	e7f1      	b.n	8004dc4 <ai_platform_inputs_get+0x178>
 8004de0:	a1c00100 	.word	0xa1c00100
 8004de4:	e0042000 	.word	0xe0042000
 8004de8:	58024000 	.word	0x58024000
 8004dec:	f407a5c2 	.word	0xf407a5c2
 8004df0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004df4:	40023000 	.word	0x40023000

08004df8 <ai_platform_outputs_get>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	9102      	str	r1, [sp, #8]
 8004e00:	b1f0      	cbz	r0, 8004e40 <ai_platform_outputs_get+0x48>
 8004e02:	4b5f      	ldr	r3, [pc, #380]	; (8004f80 <ai_platform_outputs_get+0x188>)
 8004e04:	6802      	ldr	r2, [r0, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	4607      	mov	r7, r0
 8004e0a:	d119      	bne.n	8004e40 <ai_platform_outputs_get+0x48>
 8004e0c:	f7ff fddc 	bl	80049c8 <_ai_platform_acquire_crc>
 8004e10:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <ai_platform_outputs_get+0x18c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d03d      	beq.n	8004e9a <ai_platform_outputs_get+0xa2>
 8004e1e:	4a5a      	ldr	r2, [pc, #360]	; (8004f88 <ai_platform_outputs_get+0x190>)
 8004e20:	2301      	movs	r3, #1
 8004e22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1fb      	bne.n	8004e26 <ai_platform_outputs_get+0x2e>
 8004e2e:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <ai_platform_outputs_get+0x194>)
 8004e30:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e38:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <ai_platform_outputs_get+0x198>)
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d039      	beq.n	8004eb2 <ai_platform_outputs_get+0xba>
 8004e3e:	e7fe      	b.n	8004e3e <ai_platform_outputs_get+0x46>
 8004e40:	f7ff fdc2 	bl	80049c8 <_ai_platform_acquire_crc>
 8004e44:	4b4f      	ldr	r3, [pc, #316]	; (8004f84 <ai_platform_outputs_get+0x18c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d010      	beq.n	8004e74 <ai_platform_outputs_get+0x7c>
 8004e52:	4a4d      	ldr	r2, [pc, #308]	; (8004f88 <ai_platform_outputs_get+0x190>)
 8004e54:	2301      	movs	r3, #1
 8004e56:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e5a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1fb      	bne.n	8004e5a <ai_platform_outputs_get+0x62>
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <ai_platform_outputs_get+0x194>)
 8004e64:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e68:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e6c:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <ai_platform_outputs_get+0x198>)
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d00d      	beq.n	8004e8e <ai_platform_outputs_get+0x96>
 8004e72:	e7fe      	b.n	8004e72 <ai_platform_outputs_get+0x7a>
 8004e74:	4a47      	ldr	r2, [pc, #284]	; (8004f94 <ai_platform_outputs_get+0x19c>)
 8004e76:	2301      	movs	r3, #1
 8004e78:	6093      	str	r3, [r2, #8]
 8004e7a:	6893      	ldr	r3, [r2, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1fc      	bne.n	8004e7a <ai_platform_outputs_get+0x82>
 8004e80:	4b42      	ldr	r3, [pc, #264]	; (8004f8c <ai_platform_outputs_get+0x194>)
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <ai_platform_outputs_get+0x198>)
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d000      	beq.n	8004e8e <ai_platform_outputs_get+0x96>
 8004e8c:	e7fe      	b.n	8004e8c <ai_platform_outputs_get+0x94>
 8004e8e:	f7ff fd9d 	bl	80049cc <_ai_platform_release_crc>
 8004e92:	2000      	movs	r0, #0
 8004e94:	b005      	add	sp, #20
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	4a3e      	ldr	r2, [pc, #248]	; (8004f94 <ai_platform_outputs_get+0x19c>)
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	6093      	str	r3, [r2, #8]
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1fc      	bne.n	8004ea0 <ai_platform_outputs_get+0xa8>
 8004ea6:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <ai_platform_outputs_get+0x194>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <ai_platform_outputs_get+0x198>)
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d150      	bne.n	8004f54 <ai_platform_outputs_get+0x15c>
 8004eb2:	f7ff fd8b 	bl	80049cc <_ai_platform_release_crc>
 8004eb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d958      	bls.n	8004f6e <ai_platform_outputs_get+0x176>
 8004ebc:	f04f 0b00 	mov.w	fp, #0
 8004ec0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004ec4:	9703      	str	r7, [sp, #12]
 8004ec6:	465d      	mov	r5, fp
 8004ec8:	e016      	b.n	8004ef8 <ai_platform_outputs_get+0x100>
 8004eca:	9901      	ldr	r1, [sp, #4]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	507b      	str	r3, [r7, r1]
 8004ed0:	69b1      	ldr	r1, [r6, #24]
 8004ed2:	6849      	ldr	r1, [r1, #4]
 8004ed4:	6121      	str	r1, [r4, #16]
 8004ed6:	f04f 0301 	mov.w	r3, #1
 8004eda:	7523      	strb	r3, [r4, #20]
 8004edc:	e9c4 c200 	strd	ip, r2, [r4]
 8004ee0:	6962      	ldr	r2, [r4, #20]
 8004ee2:	60a0      	str	r0, [r4, #8]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f369 221f 	bfi	r2, r9, #8, #24
 8004eea:	f8c4 8018 	str.w	r8, [r4, #24]
 8004eee:	60e3      	str	r3, [r4, #12]
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	f10b 0b1c 	add.w	fp, fp, #28
 8004ef6:	6162      	str	r2, [r4, #20]
 8004ef8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	b2aa      	uxth	r2, r5
 8004f00:	d929      	bls.n	8004f56 <ai_platform_outputs_get+0x15e>
 8004f02:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004f06:	00e9      	lsls	r1, r5, #3
 8004f08:	9101      	str	r1, [sp, #4]
 8004f0a:	b323      	cbz	r3, 8004f56 <ai_platform_outputs_get+0x15e>
 8004f0c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004f10:	b30e      	cbz	r6, 8004f56 <ai_platform_outputs_get+0x15e>
 8004f12:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004f16:	69b2      	ldr	r2, [r6, #24]
 8004f18:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004f1c:	6810      	ldr	r0, [r2, #0]
 8004f1e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004f22:	68b3      	ldr	r3, [r6, #8]
 8004f24:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004f28:	f003 f818 	bl	8007f5c <ai_array_to_buffer_fmt>
 8004f2c:	69b1      	ldr	r1, [r6, #24]
 8004f2e:	4684      	mov	ip, r0
 8004f30:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	445c      	add	r4, fp
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d0ca      	beq.n	8004ed2 <ai_platform_outputs_get+0xda>
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004f42:	6831      	ldr	r1, [r6, #0]
 8004f44:	6041      	str	r1, [r0, #4]
 8004f46:	b111      	cbz	r1, 8004f4e <ai_platform_outputs_get+0x156>
 8004f48:	8849      	ldrh	r1, [r1, #2]
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d1bd      	bne.n	8004eca <ai_platform_outputs_get+0xd2>
 8004f4e:	69b1      	ldr	r1, [r6, #24]
 8004f50:	2000      	movs	r0, #0
 8004f52:	e7be      	b.n	8004ed2 <ai_platform_outputs_get+0xda>
 8004f54:	e7fe      	b.n	8004f54 <ai_platform_outputs_get+0x15c>
 8004f56:	9f03      	ldr	r7, [sp, #12]
 8004f58:	b14a      	cbz	r2, 8004f6e <ai_platform_outputs_get+0x176>
 8004f5a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004f5e:	6858      	ldr	r0, [r3, #4]
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d096      	beq.n	8004e94 <ai_platform_outputs_get+0x9c>
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	b005      	add	sp, #20
 8004f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6e:	2218      	movs	r2, #24
 8004f70:	2111      	movs	r1, #17
 8004f72:	f107 0010 	add.w	r0, r7, #16
 8004f76:	f000 fce7 	bl	8005948 <core_set_error>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	e7ef      	b.n	8004f60 <ai_platform_outputs_get+0x168>
 8004f80:	a1c00100 	.word	0xa1c00100
 8004f84:	e0042000 	.word	0xe0042000
 8004f88:	58024000 	.word	0x58024000
 8004f8c:	f407a5c2 	.word	0xf407a5c2
 8004f90:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f94:	40023000 	.word	0x40023000

08004f98 <ai_platform_network_create>:
 8004f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004fa4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004fa8:	4615      	mov	r5, r2
 8004faa:	461f      	mov	r7, r3
 8004fac:	f7ff fd0c 	bl	80049c8 <_ai_platform_acquire_crc>
 8004fb0:	b188      	cbz	r0, 8004fd6 <ai_platform_network_create+0x3e>
 8004fb2:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <ai_platform_network_create+0x190>)
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004fba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	d00e      	beq.n	8004fe0 <ai_platform_network_create+0x48>
 8004fc2:	4a5a      	ldr	r2, [pc, #360]	; (800512c <ai_platform_network_create+0x194>)
 8004fc4:	2118      	movs	r1, #24
 8004fc6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004fca:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004fce:	2918      	cmp	r1, #24
 8004fd0:	d018      	beq.n	8005004 <ai_platform_network_create+0x6c>
 8004fd2:	f7ff fcfb 	bl	80049cc <_ai_platform_release_crc>
 8004fd6:	f244 1033 	movw	r0, #16691	; 0x4133
 8004fda:	b003      	add	sp, #12
 8004fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fe0:	4a53      	ldr	r2, [pc, #332]	; (8005130 <ai_platform_network_create+0x198>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	6091      	str	r1, [r2, #8]
 8004fe6:	2114      	movs	r1, #20
 8004fe8:	e001      	b.n	8004fee <ai_platform_network_create+0x56>
 8004fea:	3901      	subs	r1, #1
 8004fec:	d002      	beq.n	8004ff4 <ai_platform_network_create+0x5c>
 8004fee:	6894      	ldr	r4, [r2, #8]
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d1fa      	bne.n	8004fea <ai_platform_network_create+0x52>
 8004ff4:	4a4e      	ldr	r2, [pc, #312]	; (8005130 <ai_platform_network_create+0x198>)
 8004ff6:	6891      	ldr	r1, [r2, #8]
 8004ff8:	b911      	cbnz	r1, 8005000 <ai_platform_network_create+0x68>
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	d008      	beq.n	8005012 <ai_platform_network_create+0x7a>
 8005000:	4618      	mov	r0, r3
 8005002:	e7e6      	b.n	8004fd2 <ai_platform_network_create+0x3a>
 8005004:	2101      	movs	r1, #1
 8005006:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800500a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800500e:	2900      	cmp	r1, #0
 8005010:	d1fb      	bne.n	800500a <ai_platform_network_create+0x72>
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fcda 	bl	80049cc <_ai_platform_release_crc>
 8005018:	f7ff fcd6 	bl	80049c8 <_ai_platform_acquire_crc>
 800501c:	4b42      	ldr	r3, [pc, #264]	; (8005128 <ai_platform_network_create+0x190>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005028:	d010      	beq.n	800504c <ai_platform_network_create+0xb4>
 800502a:	4b40      	ldr	r3, [pc, #256]	; (800512c <ai_platform_network_create+0x194>)
 800502c:	2201      	movs	r2, #1
 800502e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005032:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005036:	2900      	cmp	r1, #0
 8005038:	d1fb      	bne.n	8005032 <ai_platform_network_create+0x9a>
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <ai_platform_network_create+0x19c>)
 800503c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005040:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005044:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <ai_platform_network_create+0x1a0>)
 8005046:	429a      	cmp	r2, r3
 8005048:	d00c      	beq.n	8005064 <ai_platform_network_create+0xcc>
 800504a:	e7fe      	b.n	800504a <ai_platform_network_create+0xb2>
 800504c:	4a38      	ldr	r2, [pc, #224]	; (8005130 <ai_platform_network_create+0x198>)
 800504e:	2301      	movs	r3, #1
 8005050:	6093      	str	r3, [r2, #8]
 8005052:	6893      	ldr	r3, [r2, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1fc      	bne.n	8005052 <ai_platform_network_create+0xba>
 8005058:	4b36      	ldr	r3, [pc, #216]	; (8005134 <ai_platform_network_create+0x19c>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <ai_platform_network_create+0x1a0>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d122      	bne.n	80050aa <ai_platform_network_create+0x112>
 8005064:	f7ff fcb2 	bl	80049cc <_ai_platform_release_crc>
 8005068:	b38e      	cbz	r6, 80050ce <ai_platform_network_create+0x136>
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <ai_platform_network_create+0x1a4>)
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	6035      	str	r5, [r6, #0]
 8005070:	f000 fc62 	bl	8005938 <core_init>
 8005074:	b1d0      	cbz	r0, 80050ac <ai_platform_network_create+0x114>
 8005076:	f7ff fca7 	bl	80049c8 <_ai_platform_acquire_crc>
 800507a:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <ai_platform_network_create+0x190>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005086:	d025      	beq.n	80050d4 <ai_platform_network_create+0x13c>
 8005088:	4a28      	ldr	r2, [pc, #160]	; (800512c <ai_platform_network_create+0x194>)
 800508a:	2301      	movs	r3, #1
 800508c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005090:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1fb      	bne.n	8005090 <ai_platform_network_create+0xf8>
 8005098:	4b26      	ldr	r3, [pc, #152]	; (8005134 <ai_platform_network_create+0x19c>)
 800509a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800509e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80050a2:	4b25      	ldr	r3, [pc, #148]	; (8005138 <ai_platform_network_create+0x1a0>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d022      	beq.n	80050ee <ai_platform_network_create+0x156>
 80050a8:	e7fe      	b.n	80050a8 <ai_platform_network_create+0x110>
 80050aa:	e7fe      	b.n	80050aa <ai_platform_network_create+0x112>
 80050ac:	2430      	movs	r4, #48	; 0x30
 80050ae:	2300      	movs	r3, #0
 80050b0:	6033      	str	r3, [r6, #0]
 80050b2:	2610      	movs	r6, #16
 80050b4:	464a      	mov	r2, r9
 80050b6:	4641      	mov	r1, r8
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff fc19 	bl	80048f0 <ai_version_get>
 80050be:	4603      	mov	r3, r0
 80050c0:	2000      	movs	r0, #0
 80050c2:	f364 0007 	bfi	r0, r4, #0, #8
 80050c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80050c8:	f366 201f 	bfi	r0, r6, #8, #24
 80050cc:	e785      	b.n	8004fda <ai_platform_network_create+0x42>
 80050ce:	f241 0010 	movw	r0, #4112	; 0x1010
 80050d2:	e782      	b.n	8004fda <ai_platform_network_create+0x42>
 80050d4:	4a16      	ldr	r2, [pc, #88]	; (8005130 <ai_platform_network_create+0x198>)
 80050d6:	2301      	movs	r3, #1
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	6893      	ldr	r3, [r2, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1fc      	bne.n	80050da <ai_platform_network_create+0x142>
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <ai_platform_network_create+0x19c>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <ai_platform_network_create+0x1a0>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d000      	beq.n	80050ee <ai_platform_network_create+0x156>
 80050ec:	e7fe      	b.n	80050ec <ai_platform_network_create+0x154>
 80050ee:	f7ff fc6d 	bl	80049cc <_ai_platform_release_crc>
 80050f2:	2200      	movs	r2, #0
 80050f4:	4641      	mov	r1, r8
 80050f6:	4638      	mov	r0, r7
 80050f8:	f7ff fbfa 	bl	80048f0 <ai_version_get>
 80050fc:	2200      	movs	r2, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	2105      	movs	r1, #5
 8005102:	2001      	movs	r0, #1
 8005104:	f7ff fbf4 	bl	80048f0 <ai_version_get>
 8005108:	4284      	cmp	r4, r0
 800510a:	d001      	beq.n	8005110 <ai_platform_network_create+0x178>
 800510c:	2401      	movs	r4, #1
 800510e:	e7ce      	b.n	80050ae <ai_platform_network_create+0x116>
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <ai_platform_network_create+0x1a8>)
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	a801      	add	r0, sp, #4
 8005116:	f000 fc23 	bl	8005960 <ai_check_custom_types>
 800511a:	b110      	cbz	r0, 8005122 <ai_platform_network_create+0x18a>
 800511c:	2600      	movs	r6, #0
 800511e:	4634      	mov	r4, r6
 8005120:	e7c8      	b.n	80050b4 <ai_platform_network_create+0x11c>
 8005122:	2402      	movs	r4, #2
 8005124:	e7c3      	b.n	80050ae <ai_platform_network_create+0x116>
 8005126:	bf00      	nop
 8005128:	e0042000 	.word	0xe0042000
 800512c:	58024000 	.word	0x58024000
 8005130:	40023000 	.word	0x40023000
 8005134:	f407a5c2 	.word	0xf407a5c2
 8005138:	b5e8b5cd 	.word	0xb5e8b5cd
 800513c:	a1c00100 	.word	0xa1c00100
 8005140:	84048403 	.word	0x84048403

08005144 <ai_platform_network_init>:
 8005144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005148:	b1f8      	cbz	r0, 800518a <ai_platform_network_init+0x46>
 800514a:	4b6e      	ldr	r3, [pc, #440]	; (8005304 <ai_platform_network_init+0x1c0>)
 800514c:	6802      	ldr	r2, [r0, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	4604      	mov	r4, r0
 8005152:	d11a      	bne.n	800518a <ai_platform_network_init+0x46>
 8005154:	460e      	mov	r6, r1
 8005156:	f7ff fc37 	bl	80049c8 <_ai_platform_acquire_crc>
 800515a:	4b6b      	ldr	r3, [pc, #428]	; (8005308 <ai_platform_network_init+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d03d      	beq.n	80051e4 <ai_platform_network_init+0xa0>
 8005168:	4a68      	ldr	r2, [pc, #416]	; (800530c <ai_platform_network_init+0x1c8>)
 800516a:	2301      	movs	r3, #1
 800516c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005170:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1fb      	bne.n	8005170 <ai_platform_network_init+0x2c>
 8005178:	4b65      	ldr	r3, [pc, #404]	; (8005310 <ai_platform_network_init+0x1cc>)
 800517a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800517e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005182:	4b64      	ldr	r3, [pc, #400]	; (8005314 <ai_platform_network_init+0x1d0>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d039      	beq.n	80051fc <ai_platform_network_init+0xb8>
 8005188:	e7fe      	b.n	8005188 <ai_platform_network_init+0x44>
 800518a:	f7ff fc1d 	bl	80049c8 <_ai_platform_acquire_crc>
 800518e:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <ai_platform_network_init+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519a:	d010      	beq.n	80051be <ai_platform_network_init+0x7a>
 800519c:	4a5b      	ldr	r2, [pc, #364]	; (800530c <ai_platform_network_init+0x1c8>)
 800519e:	2301      	movs	r3, #1
 80051a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80051a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1fb      	bne.n	80051a4 <ai_platform_network_init+0x60>
 80051ac:	4b58      	ldr	r3, [pc, #352]	; (8005310 <ai_platform_network_init+0x1cc>)
 80051ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80051b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80051b6:	4b57      	ldr	r3, [pc, #348]	; (8005314 <ai_platform_network_init+0x1d0>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d00d      	beq.n	80051d8 <ai_platform_network_init+0x94>
 80051bc:	e7fe      	b.n	80051bc <ai_platform_network_init+0x78>
 80051be:	4a56      	ldr	r2, [pc, #344]	; (8005318 <ai_platform_network_init+0x1d4>)
 80051c0:	2301      	movs	r3, #1
 80051c2:	6093      	str	r3, [r2, #8]
 80051c4:	6893      	ldr	r3, [r2, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1fc      	bne.n	80051c4 <ai_platform_network_init+0x80>
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <ai_platform_network_init+0x1cc>)
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	4b50      	ldr	r3, [pc, #320]	; (8005314 <ai_platform_network_init+0x1d0>)
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d000      	beq.n	80051d8 <ai_platform_network_init+0x94>
 80051d6:	e7fe      	b.n	80051d6 <ai_platform_network_init+0x92>
 80051d8:	f7ff fbf8 	bl	80049cc <_ai_platform_release_crc>
 80051dc:	2600      	movs	r6, #0
 80051de:	4630      	mov	r0, r6
 80051e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e4:	4a4c      	ldr	r2, [pc, #304]	; (8005318 <ai_platform_network_init+0x1d4>)
 80051e6:	2301      	movs	r3, #1
 80051e8:	6093      	str	r3, [r2, #8]
 80051ea:	6893      	ldr	r3, [r2, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1fc      	bne.n	80051ea <ai_platform_network_init+0xa6>
 80051f0:	4b47      	ldr	r3, [pc, #284]	; (8005310 <ai_platform_network_init+0x1cc>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	4b47      	ldr	r3, [pc, #284]	; (8005314 <ai_platform_network_init+0x1d0>)
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d11c      	bne.n	8005236 <ai_platform_network_init+0xf2>
 80051fc:	f7ff fbe6 	bl	80049cc <_ai_platform_release_crc>
 8005200:	2e00      	cmp	r6, #0
 8005202:	d06f      	beq.n	80052e4 <ai_platform_network_init+0x1a0>
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <ai_platform_network_init+0x1d8>)
 8005206:	6832      	ldr	r2, [r6, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d115      	bne.n	8005238 <ai_platform_network_init+0xf4>
 800520c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8005210:	6933      	ldr	r3, [r6, #16]
 8005212:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8005216:	89f7      	ldrh	r7, [r6, #14]
 8005218:	62a3      	str	r3, [r4, #40]	; 0x28
 800521a:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800521e:	2303      	movs	r3, #3
 8005220:	84e7      	strh	r7, [r4, #38]	; 0x26
 8005222:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8005226:	60e3      	str	r3, [r4, #12]
 8005228:	4620      	mov	r0, r4
 800522a:	4626      	mov	r6, r4
 800522c:	f000 fbc2 	bl	80059b4 <ai_layers_init_all>
 8005230:	4630      	mov	r0, r6
 8005232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005236:	e7fe      	b.n	8005236 <ai_platform_network_init+0xf2>
 8005238:	2101      	movs	r1, #1
 800523a:	4630      	mov	r0, r6
 800523c:	4635      	mov	r5, r6
 800523e:	6876      	ldr	r6, [r6, #4]
 8005240:	f7ff fb74 	bl	800492c <ai_buffer_get_size>
 8005244:	f105 081c 	add.w	r8, r5, #28
 8005248:	4681      	mov	r9, r0
 800524a:	2101      	movs	r1, #1
 800524c:	4640      	mov	r0, r8
 800524e:	6a2f      	ldr	r7, [r5, #32]
 8005250:	f7ff fb6c 	bl	800492c <ai_buffer_get_size>
 8005254:	f1b9 0f00 	cmp.w	r9, #0
 8005258:	d025      	beq.n	80052a6 <ai_platform_network_init+0x162>
 800525a:	2201      	movs	r2, #1
 800525c:	4696      	mov	lr, r2
 800525e:	bb30      	cbnz	r0, 80052ae <ai_platform_network_init+0x16a>
 8005260:	4680      	mov	r8, r0
 8005262:	4607      	mov	r7, r0
 8005264:	b376      	cbz	r6, 80052c4 <ai_platform_network_init+0x180>
 8005266:	8be3      	ldrh	r3, [r4, #30]
 8005268:	4573      	cmp	r3, lr
 800526a:	d323      	bcc.n	80052b4 <ai_platform_network_init+0x170>
 800526c:	b142      	cbz	r2, 8005280 <ai_platform_network_init+0x13c>
 800526e:	46ac      	mov	ip, r5
 8005270:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005274:	6a25      	ldr	r5, [r4, #32]
 8005276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005278:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800527c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005280:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005282:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005286:	2600      	movs	r6, #0
 8005288:	42bb      	cmp	r3, r7
 800528a:	83a6      	strh	r6, [r4, #28]
 800528c:	d323      	bcc.n	80052d6 <ai_platform_network_init+0x192>
 800528e:	b37f      	cbz	r7, 80052f0 <ai_platform_network_init+0x1ac>
 8005290:	46c4      	mov	ip, r8
 8005292:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005296:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800529e:	46b6      	mov	lr, r6
 80052a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80052a4:	e7bb      	b.n	800521e <ai_platform_network_init+0xda>
 80052a6:	464a      	mov	r2, r9
 80052a8:	46ce      	mov	lr, r9
 80052aa:	464d      	mov	r5, r9
 80052ac:	e7d7      	b.n	800525e <ai_platform_network_init+0x11a>
 80052ae:	b30f      	cbz	r7, 80052f4 <ai_platform_network_init+0x1b0>
 80052b0:	2701      	movs	r7, #1
 80052b2:	e7d7      	b.n	8005264 <ai_platform_network_init+0x120>
 80052b4:	2212      	movs	r2, #18
 80052b6:	2116      	movs	r1, #22
 80052b8:	f104 0010 	add.w	r0, r4, #16
 80052bc:	f000 fb44 	bl	8005948 <core_set_error>
 80052c0:	2600      	movs	r6, #0
 80052c2:	e78c      	b.n	80051de <ai_platform_network_init+0x9a>
 80052c4:	f1b9 0f00 	cmp.w	r9, #0
 80052c8:	d0cd      	beq.n	8005266 <ai_platform_network_init+0x122>
 80052ca:	2110      	movs	r1, #16
 80052cc:	2212      	movs	r2, #18
 80052ce:	1860      	adds	r0, r4, r1
 80052d0:	f000 fb3a 	bl	8005948 <core_set_error>
 80052d4:	e783      	b.n	80051de <ai_platform_network_init+0x9a>
 80052d6:	2213      	movs	r2, #19
 80052d8:	2116      	movs	r1, #22
 80052da:	f104 0010 	add.w	r0, r4, #16
 80052de:	f000 fb33 	bl	8005948 <core_set_error>
 80052e2:	e77c      	b.n	80051de <ai_platform_network_init+0x9a>
 80052e4:	2110      	movs	r1, #16
 80052e6:	2211      	movs	r2, #17
 80052e8:	1860      	adds	r0, r4, r1
 80052ea:	f000 fb2d 	bl	8005948 <core_set_error>
 80052ee:	e776      	b.n	80051de <ai_platform_network_init+0x9a>
 80052f0:	46be      	mov	lr, r7
 80052f2:	e794      	b.n	800521e <ai_platform_network_init+0xda>
 80052f4:	2110      	movs	r1, #16
 80052f6:	2213      	movs	r2, #19
 80052f8:	1860      	adds	r0, r4, r1
 80052fa:	f000 fb25 	bl	8005948 <core_set_error>
 80052fe:	463e      	mov	r6, r7
 8005300:	e76d      	b.n	80051de <ai_platform_network_init+0x9a>
 8005302:	bf00      	nop
 8005304:	a1c00100 	.word	0xa1c00100
 8005308:	e0042000 	.word	0xe0042000
 800530c:	58024000 	.word	0x58024000
 8005310:	f407a5c2 	.word	0xf407a5c2
 8005314:	b5e8b5cd 	.word	0xb5e8b5cd
 8005318:	40023000 	.word	0x40023000
 800531c:	a1facade 	.word	0xa1facade

08005320 <ai_platform_network_post_init>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	b1f0      	cbz	r0, 8005362 <ai_platform_network_post_init+0x42>
 8005324:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <ai_platform_network_post_init+0xf8>)
 8005326:	6802      	ldr	r2, [r0, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	4604      	mov	r4, r0
 800532c:	d119      	bne.n	8005362 <ai_platform_network_post_init+0x42>
 800532e:	f7ff fb4b 	bl	80049c8 <_ai_platform_acquire_crc>
 8005332:	4b3a      	ldr	r3, [pc, #232]	; (800541c <ai_platform_network_post_init+0xfc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d03b      	beq.n	80053b8 <ai_platform_network_post_init+0x98>
 8005340:	4a37      	ldr	r2, [pc, #220]	; (8005420 <ai_platform_network_post_init+0x100>)
 8005342:	2301      	movs	r3, #1
 8005344:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005348:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1fb      	bne.n	8005348 <ai_platform_network_post_init+0x28>
 8005350:	4b34      	ldr	r3, [pc, #208]	; (8005424 <ai_platform_network_post_init+0x104>)
 8005352:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005356:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <ai_platform_network_post_init+0x108>)
 800535c:	429a      	cmp	r2, r3
 800535e:	d037      	beq.n	80053d0 <ai_platform_network_post_init+0xb0>
 8005360:	e7fe      	b.n	8005360 <ai_platform_network_post_init+0x40>
 8005362:	f7ff fb31 	bl	80049c8 <_ai_platform_acquire_crc>
 8005366:	4b2d      	ldr	r3, [pc, #180]	; (800541c <ai_platform_network_post_init+0xfc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d010      	beq.n	8005396 <ai_platform_network_post_init+0x76>
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <ai_platform_network_post_init+0x100>)
 8005376:	2301      	movs	r3, #1
 8005378:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800537c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1fb      	bne.n	800537c <ai_platform_network_post_init+0x5c>
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <ai_platform_network_post_init+0x104>)
 8005386:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800538a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800538e:	4b26      	ldr	r3, [pc, #152]	; (8005428 <ai_platform_network_post_init+0x108>)
 8005390:	429a      	cmp	r2, r3
 8005392:	d00d      	beq.n	80053b0 <ai_platform_network_post_init+0x90>
 8005394:	e7fe      	b.n	8005394 <ai_platform_network_post_init+0x74>
 8005396:	4a25      	ldr	r2, [pc, #148]	; (800542c <ai_platform_network_post_init+0x10c>)
 8005398:	2301      	movs	r3, #1
 800539a:	6093      	str	r3, [r2, #8]
 800539c:	6893      	ldr	r3, [r2, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1fc      	bne.n	800539c <ai_platform_network_post_init+0x7c>
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <ai_platform_network_post_init+0x104>)
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <ai_platform_network_post_init+0x108>)
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d000      	beq.n	80053b0 <ai_platform_network_post_init+0x90>
 80053ae:	e7fe      	b.n	80053ae <ai_platform_network_post_init+0x8e>
 80053b0:	f7ff fb0c 	bl	80049cc <_ai_platform_release_crc>
 80053b4:	2000      	movs	r0, #0
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <ai_platform_network_post_init+0x10c>)
 80053ba:	2301      	movs	r3, #1
 80053bc:	6093      	str	r3, [r2, #8]
 80053be:	6893      	ldr	r3, [r2, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1fc      	bne.n	80053be <ai_platform_network_post_init+0x9e>
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <ai_platform_network_post_init+0x104>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <ai_platform_network_post_init+0x108>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d11a      	bne.n	8005406 <ai_platform_network_post_init+0xe6>
 80053d0:	f7ff fafc 	bl	80049cc <_ai_platform_release_crc>
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	f013 0502 	ands.w	r5, r3, #2
 80053da:	d015      	beq.n	8005408 <ai_platform_network_post_init+0xe8>
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 faf7 	bl	80059d0 <ai_layers_post_init_all>
 80053e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053e4:	b16b      	cbz	r3, 8005402 <ai_platform_network_post_init+0xe2>
 80053e6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80053e8:	e007      	b.n	80053fa <ai_platform_network_post_init+0xda>
 80053ea:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80053ee:	4798      	blx	r3
 80053f0:	692b      	ldr	r3, [r5, #16]
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	d005      	beq.n	8005402 <ai_platform_network_post_init+0xe2>
 80053f6:	b123      	cbz	r3, 8005402 <ai_platform_network_post_init+0xe2>
 80053f8:	461d      	mov	r5, r3
 80053fa:	4629      	mov	r1, r5
 80053fc:	2000      	movs	r0, #0
 80053fe:	2d00      	cmp	r5, #0
 8005400:	d1f3      	bne.n	80053ea <ai_platform_network_post_init+0xca>
 8005402:	2001      	movs	r0, #1
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	e7fe      	b.n	8005406 <ai_platform_network_post_init+0xe6>
 8005408:	2210      	movs	r2, #16
 800540a:	2111      	movs	r1, #17
 800540c:	18a0      	adds	r0, r4, r2
 800540e:	f000 fa9b 	bl	8005948 <core_set_error>
 8005412:	4628      	mov	r0, r5
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	a1c00100 	.word	0xa1c00100
 800541c:	e0042000 	.word	0xe0042000
 8005420:	58024000 	.word	0x58024000
 8005424:	f407a5c2 	.word	0xf407a5c2
 8005428:	b5e8b5cd 	.word	0xb5e8b5cd
 800542c:	40023000 	.word	0x40023000

08005430 <ai_platform_network_process>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	460e      	mov	r6, r1
 8005436:	b085      	sub	sp, #20
 8005438:	4693      	mov	fp, r2
 800543a:	4605      	mov	r5, r0
 800543c:	b120      	cbz	r0, 8005448 <ai_platform_network_process+0x18>
 800543e:	4bb8      	ldr	r3, [pc, #736]	; (8005720 <ai_platform_network_process+0x2f0>)
 8005440:	6802      	ldr	r2, [r0, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf18      	it	ne
 8005446:	2500      	movne	r5, #0
 8005448:	f7ff fabe 	bl	80049c8 <_ai_platform_acquire_crc>
 800544c:	4bb5      	ldr	r3, [pc, #724]	; (8005724 <ai_platform_network_process+0x2f4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d010      	beq.n	800547c <ai_platform_network_process+0x4c>
 800545a:	4ab3      	ldr	r2, [pc, #716]	; (8005728 <ai_platform_network_process+0x2f8>)
 800545c:	2301      	movs	r3, #1
 800545e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005462:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1fb      	bne.n	8005462 <ai_platform_network_process+0x32>
 800546a:	4bb0      	ldr	r3, [pc, #704]	; (800572c <ai_platform_network_process+0x2fc>)
 800546c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005470:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005474:	4bae      	ldr	r3, [pc, #696]	; (8005730 <ai_platform_network_process+0x300>)
 8005476:	429a      	cmp	r2, r3
 8005478:	d00d      	beq.n	8005496 <ai_platform_network_process+0x66>
 800547a:	e7fe      	b.n	800547a <ai_platform_network_process+0x4a>
 800547c:	4aad      	ldr	r2, [pc, #692]	; (8005734 <ai_platform_network_process+0x304>)
 800547e:	2301      	movs	r3, #1
 8005480:	6093      	str	r3, [r2, #8]
 8005482:	6893      	ldr	r3, [r2, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1fc      	bne.n	8005482 <ai_platform_network_process+0x52>
 8005488:	4ba8      	ldr	r3, [pc, #672]	; (800572c <ai_platform_network_process+0x2fc>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4ba8      	ldr	r3, [pc, #672]	; (8005730 <ai_platform_network_process+0x300>)
 8005490:	429a      	cmp	r2, r3
 8005492:	f040 812c 	bne.w	80056ee <ai_platform_network_process+0x2be>
 8005496:	f7ff fa99 	bl	80049cc <_ai_platform_release_crc>
 800549a:	2d00      	cmp	r5, #0
 800549c:	f000 8154 	beq.w	8005748 <ai_platform_network_process+0x318>
 80054a0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8124 	beq.w	80056f0 <ai_platform_network_process+0x2c0>
 80054a8:	68eb      	ldr	r3, [r5, #12]
 80054aa:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2700      	movs	r7, #0
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	616f      	str	r7, [r5, #20]
 80054b8:	f040 813e 	bne.w	8005738 <ai_platform_network_process+0x308>
 80054bc:	2e00      	cmp	r6, #0
 80054be:	f000 811d 	beq.w	80056fc <ai_platform_network_process+0x2cc>
 80054c2:	f1ba 0f00 	cmp.w	sl, #0
 80054c6:	f000 8119 	beq.w	80056fc <ai_platform_network_process+0x2cc>
 80054ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8114 	beq.w	80056fc <ai_platform_network_process+0x2cc>
 80054d4:	69b3      	ldr	r3, [r6, #24]
 80054d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80054e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d072      	beq.n	80055ce <ai_platform_network_process+0x19e>
 80054e8:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d06e      	beq.n	80055ce <ai_platform_network_process+0x19e>
 80054f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80054f4:	f8d3 9000 	ldr.w	r9, [r3]
 80054f8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80054fc:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005500:	f000 81de 	beq.w	80058c0 <ai_platform_network_process+0x490>
 8005504:	69a3      	ldr	r3, [r4, #24]
 8005506:	2101      	movs	r1, #1
 8005508:	4630      	mov	r0, r6
 800550a:	685d      	ldr	r5, [r3, #4]
 800550c:	f7ff fa0e 	bl	800492c <ai_buffer_get_size>
 8005510:	4285      	cmp	r5, r0
 8005512:	f0c0 811b 	bcc.w	800574c <ai_platform_network_process+0x31c>
 8005516:	68e0      	ldr	r0, [r4, #12]
 8005518:	69b1      	ldr	r1, [r6, #24]
 800551a:	68c2      	ldr	r2, [r0, #12]
 800551c:	68cb      	ldr	r3, [r1, #12]
 800551e:	429a      	cmp	r2, r3
 8005520:	f040 8114 	bne.w	800574c <ai_platform_network_process+0x31c>
 8005524:	6882      	ldr	r2, [r0, #8]
 8005526:	688b      	ldr	r3, [r1, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	f040 810f 	bne.w	800574c <ai_platform_network_process+0x31c>
 800552e:	6842      	ldr	r2, [r0, #4]
 8005530:	684b      	ldr	r3, [r1, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	f040 810a 	bne.w	800574c <ai_platform_network_process+0x31c>
 8005538:	69a3      	ldr	r3, [r4, #24]
 800553a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800553e:	f002 fda1 	bl	8008084 <ai_array_get_data_byte_size>
 8005542:	4605      	mov	r5, r0
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff f9d9 	bl	80048fc <get_tensor_byte_size>
 800554a:	4285      	cmp	r5, r0
 800554c:	f0c0 80fe 	bcc.w	800574c <ai_platform_network_process+0x31c>
 8005550:	69a3      	ldr	r3, [r4, #24]
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	f002 fd02 	bl	8007f5c <ai_array_to_buffer_fmt>
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	4058      	eors	r0, r3
 800555c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005560:	f040 81b9 	bne.w	80058d6 <ai_platform_network_process+0x4a6>
 8005564:	6873      	ldr	r3, [r6, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 81ac 	beq.w	80058c4 <ai_platform_network_process+0x494>
 800556c:	69b3      	ldr	r3, [r6, #24]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 819c 	beq.w	80058ae <ai_platform_network_process+0x47e>
 8005576:	9a01      	ldr	r2, [sp, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	bf38      	it	cc
 800557c:	461a      	movcc	r2, r3
 800557e:	4620      	mov	r0, r4
 8005580:	9201      	str	r2, [sp, #4]
 8005582:	f7ff f9bb 	bl	80048fc <get_tensor_byte_size>
 8005586:	f8c8 0008 	str.w	r0, [r8, #8]
 800558a:	69b3      	ldr	r3, [r6, #24]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	f8c8 300c 	str.w	r3, [r8, #12]
 8005596:	6871      	ldr	r1, [r6, #4]
 8005598:	f8c8 1004 	str.w	r1, [r8, #4]
 800559c:	440b      	add	r3, r1
 800559e:	f849 300b 	str.w	r3, [r9, fp]
 80055a2:	69a0      	ldr	r0, [r4, #24]
 80055a4:	6803      	ldr	r3, [r0, #0]
 80055a6:	009a      	lsls	r2, r3, #2
 80055a8:	f107 0701 	add.w	r7, r7, #1
 80055ac:	f106 061c 	add.w	r6, r6, #28
 80055b0:	f100 80af 	bmi.w	8005712 <ai_platform_network_process+0x2e2>
 80055b4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	4419      	add	r1, r3
 80055bc:	6081      	str	r1, [r0, #8]
 80055be:	69a3      	ldr	r3, [r4, #24]
 80055c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	d888      	bhi.n	80054e0 <ai_platform_network_process+0xb0>
 80055ce:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80055d2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80055d4:	f1bb 0f00 	cmp.w	fp, #0
 80055d8:	f000 8186 	beq.w	80058e8 <ai_platform_network_process+0x4b8>
 80055dc:	2a01      	cmp	r2, #1
 80055de:	f240 815e 	bls.w	800589e <ai_platform_network_process+0x46e>
 80055e2:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80055e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8157 	beq.w	800589e <ai_platform_network_process+0x46e>
 80055f0:	465e      	mov	r6, fp
 80055f2:	2700      	movs	r7, #0
 80055f4:	462c      	mov	r4, r5
 80055f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80b4 	beq.w	8005768 <ai_platform_network_process+0x338>
 8005600:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8005604:	2d00      	cmp	r5, #0
 8005606:	f000 80af 	beq.w	8005768 <ai_platform_network_process+0x338>
 800560a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800560e:	f8d3 8000 	ldr.w	r8, [r3]
 8005612:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8005616:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800561a:	f000 8171 	beq.w	8005900 <ai_platform_network_process+0x4d0>
 800561e:	69ab      	ldr	r3, [r5, #24]
 8005620:	2101      	movs	r1, #1
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	9302      	str	r3, [sp, #8]
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff f980 	bl	800492c <ai_buffer_get_size>
 800562c:	9b02      	ldr	r3, [sp, #8]
 800562e:	4283      	cmp	r3, r0
 8005630:	f0c0 8134 	bcc.w	800589c <ai_platform_network_process+0x46c>
 8005634:	68e8      	ldr	r0, [r5, #12]
 8005636:	69b1      	ldr	r1, [r6, #24]
 8005638:	68c2      	ldr	r2, [r0, #12]
 800563a:	68cb      	ldr	r3, [r1, #12]
 800563c:	429a      	cmp	r2, r3
 800563e:	f040 812d 	bne.w	800589c <ai_platform_network_process+0x46c>
 8005642:	6882      	ldr	r2, [r0, #8]
 8005644:	688b      	ldr	r3, [r1, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	f040 8128 	bne.w	800589c <ai_platform_network_process+0x46c>
 800564c:	6842      	ldr	r2, [r0, #4]
 800564e:	684b      	ldr	r3, [r1, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	f040 8123 	bne.w	800589c <ai_platform_network_process+0x46c>
 8005656:	69ab      	ldr	r3, [r5, #24]
 8005658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800565c:	f002 fd12 	bl	8008084 <ai_array_get_data_byte_size>
 8005660:	9002      	str	r0, [sp, #8]
 8005662:	4628      	mov	r0, r5
 8005664:	f7ff f94a 	bl	80048fc <get_tensor_byte_size>
 8005668:	9b02      	ldr	r3, [sp, #8]
 800566a:	4283      	cmp	r3, r0
 800566c:	f0c0 8116 	bcc.w	800589c <ai_platform_network_process+0x46c>
 8005670:	69ab      	ldr	r3, [r5, #24]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	f002 fc72 	bl	8007f5c <ai_array_to_buffer_fmt>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	4058      	eors	r0, r3
 800567c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005680:	f040 8136 	bne.w	80058f0 <ai_platform_network_process+0x4c0>
 8005684:	6873      	ldr	r3, [r6, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 814d 	beq.w	8005926 <ai_platform_network_process+0x4f6>
 800568c:	69b3      	ldr	r3, [r6, #24]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 813f 	beq.w	8005914 <ai_platform_network_process+0x4e4>
 8005696:	9a01      	ldr	r2, [sp, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	bf38      	it	cc
 800569c:	461a      	movcc	r2, r3
 800569e:	4628      	mov	r0, r5
 80056a0:	9201      	str	r2, [sp, #4]
 80056a2:	f7ff f92b 	bl	80048fc <get_tensor_byte_size>
 80056a6:	f8ca 0008 	str.w	r0, [sl, #8]
 80056aa:	69b3      	ldr	r3, [r6, #24]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	fb00 f303 	mul.w	r3, r0, r3
 80056b2:	f8ca 300c 	str.w	r3, [sl, #12]
 80056b6:	6871      	ldr	r1, [r6, #4]
 80056b8:	f8ca 1004 	str.w	r1, [sl, #4]
 80056bc:	440b      	add	r3, r1
 80056be:	f848 300b 	str.w	r3, [r8, fp]
 80056c2:	69a8      	ldr	r0, [r5, #24]
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f107 0701 	add.w	r7, r7, #1
 80056cc:	f106 061c 	add.w	r6, r6, #28
 80056d0:	d445      	bmi.n	800575e <ai_platform_network_process+0x32e>
 80056d2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	4419      	add	r1, r3
 80056da:	6081      	str	r1, [r0, #8]
 80056dc:	69ab      	ldr	r3, [r5, #24]
 80056de:	f8da 2004 	ldr.w	r2, [sl, #4]
 80056e2:	60da      	str	r2, [r3, #12]
 80056e4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80056e8:	429f      	cmp	r7, r3
 80056ea:	d384      	bcc.n	80055f6 <ai_platform_network_process+0x1c6>
 80056ec:	e03c      	b.n	8005768 <ai_platform_network_process+0x338>
 80056ee:	e7fe      	b.n	80056ee <ai_platform_network_process+0x2be>
 80056f0:	68ea      	ldr	r2, [r5, #12]
 80056f2:	616b      	str	r3, [r5, #20]
 80056f4:	f002 0203 	and.w	r2, r2, #3
 80056f8:	2a03      	cmp	r2, #3
 80056fa:	d11d      	bne.n	8005738 <ai_platform_network_process+0x308>
 80056fc:	2217      	movs	r2, #23
 80056fe:	2112      	movs	r1, #18
 8005700:	f105 0010 	add.w	r0, r5, #16
 8005704:	f000 f920 	bl	8005948 <core_set_error>
 8005708:	2400      	movs	r4, #0
 800570a:	4620      	mov	r0, r4
 800570c:	b005      	add	sp, #20
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	f8ba 3000 	ldrh.w	r3, [sl]
 8005716:	429f      	cmp	r7, r3
 8005718:	f4ff aee2 	bcc.w	80054e0 <ai_platform_network_process+0xb0>
 800571c:	e757      	b.n	80055ce <ai_platform_network_process+0x19e>
 800571e:	bf00      	nop
 8005720:	a1c00100 	.word	0xa1c00100
 8005724:	e0042000 	.word	0xe0042000
 8005728:	58024000 	.word	0x58024000
 800572c:	f407a5c2 	.word	0xf407a5c2
 8005730:	b5e8b5cd 	.word	0xb5e8b5cd
 8005734:	40023000 	.word	0x40023000
 8005738:	2230      	movs	r2, #48	; 0x30
 800573a:	2111      	movs	r1, #17
 800573c:	f105 0010 	add.w	r0, r5, #16
 8005740:	f000 f902 	bl	8005948 <core_set_error>
 8005744:	2400      	movs	r4, #0
 8005746:	e7e0      	b.n	800570a <ai_platform_network_process+0x2da>
 8005748:	462c      	mov	r4, r5
 800574a:	e7de      	b.n	800570a <ai_platform_network_process+0x2da>
 800574c:	9d02      	ldr	r5, [sp, #8]
 800574e:	2218      	movs	r2, #24
 8005750:	2112      	movs	r1, #18
 8005752:	f105 0010 	add.w	r0, r5, #16
 8005756:	f000 f8f7 	bl	8005948 <core_set_error>
 800575a:	2400      	movs	r4, #0
 800575c:	e7d5      	b.n	800570a <ai_platform_network_process+0x2da>
 800575e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005762:	429f      	cmp	r7, r3
 8005764:	f4ff af47 	bcc.w	80055f6 <ai_platform_network_process+0x1c6>
 8005768:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800576c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800576e:	82a3      	strh	r3, [r4, #20]
 8005770:	4625      	mov	r5, r4
 8005772:	2a00      	cmp	r2, #0
 8005774:	f040 808c 	bne.w	8005890 <ai_platform_network_process+0x460>
 8005778:	4616      	mov	r6, r2
 800577a:	4617      	mov	r7, r2
 800577c:	8aec      	ldrh	r4, [r5, #22]
 800577e:	429c      	cmp	r4, r3
 8005780:	bf38      	it	cc
 8005782:	46ab      	movcc	fp, r5
 8005784:	d2c1      	bcs.n	800570a <ai_platform_network_process+0x2da>
 8005786:	2e00      	cmp	r6, #0
 8005788:	d030      	beq.n	80057ec <ai_platform_network_process+0x3bc>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	e014      	b.n	80057ba <ai_platform_network_process+0x38a>
 8005790:	6882      	ldr	r2, [r0, #8]
 8005792:	68c5      	ldr	r5, [r0, #12]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	1b52      	subs	r2, r2, r5
 8005798:	4413      	add	r3, r2
 800579a:	6083      	str	r3, [r0, #8]
 800579c:	698b      	ldr	r3, [r1, #24]
 800579e:	6862      	ldr	r2, [r4, #4]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80057a6:	f859 200a 	ldr.w	r2, [r9, sl]
 80057aa:	440b      	add	r3, r1
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bf24      	itt	cs
 80057b0:	68e3      	ldrcs	r3, [r4, #12]
 80057b2:	1ad3      	subcs	r3, r2, r3
 80057b4:	6063      	str	r3, [r4, #4]
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	8833      	ldrh	r3, [r6, #0]
 80057bc:	4543      	cmp	r3, r8
 80057be:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80057c2:	d913      	bls.n	80057ec <ai_platform_network_process+0x3bc>
 80057c4:	6873      	ldr	r3, [r6, #4]
 80057c6:	b18b      	cbz	r3, 80057ec <ai_platform_network_process+0x3bc>
 80057c8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80057cc:	b171      	cbz	r1, 80057ec <ai_platform_network_process+0x3bc>
 80057ce:	6988      	ldr	r0, [r1, #24]
 80057d0:	68b2      	ldr	r2, [r6, #8]
 80057d2:	6803      	ldr	r3, [r0, #0]
 80057d4:	f8d2 9000 	ldr.w	r9, [r2]
 80057d8:	009d      	lsls	r5, r3, #2
 80057da:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80057de:	d5d7      	bpl.n	8005790 <ai_platform_network_process+0x360>
 80057e0:	6881      	ldr	r1, [r0, #8]
 80057e2:	68a2      	ldr	r2, [r4, #8]
 80057e4:	6860      	ldr	r0, [r4, #4]
 80057e6:	f002 fb33 	bl	8007e50 <st_int8_copy>
 80057ea:	e7da      	b.n	80057a2 <ai_platform_network_process+0x372>
 80057ec:	4658      	mov	r0, fp
 80057ee:	f000 f903 	bl	80059f8 <ai_layers_forward_all>
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	d03d      	beq.n	8005872 <ai_platform_network_process+0x442>
 80057f6:	2400      	movs	r4, #0
 80057f8:	e016      	b.n	8005828 <ai_platform_network_process+0x3f8>
 80057fa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80057fe:	f859 100a 	ldr.w	r1, [r9, sl]
 8005802:	4413      	add	r3, r2
 8005804:	428b      	cmp	r3, r1
 8005806:	bf24      	itt	cs
 8005808:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800580c:	1acb      	subcs	r3, r1, r3
 800580e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005812:	6981      	ldr	r1, [r0, #24]
 8005814:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005818:	1b52      	subs	r2, r2, r5
 800581a:	4413      	add	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
 800581e:	6983      	ldr	r3, [r0, #24]
 8005820:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	3401      	adds	r4, #1
 8005828:	883b      	ldrh	r3, [r7, #0]
 800582a:	42a3      	cmp	r3, r4
 800582c:	d921      	bls.n	8005872 <ai_platform_network_process+0x442>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	b1fb      	cbz	r3, 8005872 <ai_platform_network_process+0x442>
 8005832:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005836:	b1e0      	cbz	r0, 8005872 <ai_platform_network_process+0x442>
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	6983      	ldr	r3, [r0, #24]
 800583c:	f8d2 9000 	ldr.w	r9, [r2]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005848:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800584c:	d5d5      	bpl.n	80057fa <ai_platform_network_process+0x3ca>
 800584e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005852:	6898      	ldr	r0, [r3, #8]
 8005854:	f002 fafc 	bl	8007e50 <st_int8_copy>
 8005858:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800585c:	f859 200a 	ldr.w	r2, [r9, sl]
 8005860:	440b      	add	r3, r1
 8005862:	4293      	cmp	r3, r2
 8005864:	bf24      	itt	cs
 8005866:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800586a:	1ad3      	subcs	r3, r2, r3
 800586c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005870:	e7d9      	b.n	8005826 <ai_platform_network_process+0x3f6>
 8005872:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005876:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800587a:	3401      	adds	r4, #1
 800587c:	b2a4      	uxth	r4, r4
 800587e:	42a3      	cmp	r3, r4
 8005880:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005884:	f63f af7f 	bhi.w	8005786 <ai_platform_network_process+0x356>
 8005888:	4620      	mov	r0, r4
 800588a:	b005      	add	sp, #20
 800588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005890:	2a01      	cmp	r2, #1
 8005892:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005894:	d03c      	beq.n	8005910 <ai_platform_network_process+0x4e0>
 8005896:	f106 070c 	add.w	r7, r6, #12
 800589a:	e76f      	b.n	800577c <ai_platform_network_process+0x34c>
 800589c:	4625      	mov	r5, r4
 800589e:	2218      	movs	r2, #24
 80058a0:	2113      	movs	r1, #19
 80058a2:	f105 0010 	add.w	r0, r5, #16
 80058a6:	f000 f84f 	bl	8005948 <core_set_error>
 80058aa:	2400      	movs	r4, #0
 80058ac:	e72d      	b.n	800570a <ai_platform_network_process+0x2da>
 80058ae:	9d02      	ldr	r5, [sp, #8]
 80058b0:	4604      	mov	r4, r0
 80058b2:	2221      	movs	r2, #33	; 0x21
 80058b4:	2112      	movs	r1, #18
 80058b6:	f105 0010 	add.w	r0, r5, #16
 80058ba:	f000 f845 	bl	8005948 <core_set_error>
 80058be:	e724      	b.n	800570a <ai_platform_network_process+0x2da>
 80058c0:	9d02      	ldr	r5, [sp, #8]
 80058c2:	e71b      	b.n	80056fc <ai_platform_network_process+0x2cc>
 80058c4:	9d02      	ldr	r5, [sp, #8]
 80058c6:	4604      	mov	r4, r0
 80058c8:	2217      	movs	r2, #23
 80058ca:	2112      	movs	r1, #18
 80058cc:	f105 0010 	add.w	r0, r5, #16
 80058d0:	f000 f83a 	bl	8005948 <core_set_error>
 80058d4:	e719      	b.n	800570a <ai_platform_network_process+0x2da>
 80058d6:	9d02      	ldr	r5, [sp, #8]
 80058d8:	2219      	movs	r2, #25
 80058da:	2112      	movs	r1, #18
 80058dc:	f105 0010 	add.w	r0, r5, #16
 80058e0:	f000 f832 	bl	8005948 <core_set_error>
 80058e4:	2400      	movs	r4, #0
 80058e6:	e710      	b.n	800570a <ai_platform_network_process+0x2da>
 80058e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80058ec:	82ab      	strh	r3, [r5, #20]
 80058ee:	e740      	b.n	8005772 <ai_platform_network_process+0x342>
 80058f0:	f104 0010 	add.w	r0, r4, #16
 80058f4:	2219      	movs	r2, #25
 80058f6:	2113      	movs	r1, #19
 80058f8:	f000 f826 	bl	8005948 <core_set_error>
 80058fc:	2400      	movs	r4, #0
 80058fe:	e704      	b.n	800570a <ai_platform_network_process+0x2da>
 8005900:	f104 0010 	add.w	r0, r4, #16
 8005904:	2217      	movs	r2, #23
 8005906:	2113      	movs	r1, #19
 8005908:	f000 f81e 	bl	8005948 <core_set_error>
 800590c:	4654      	mov	r4, sl
 800590e:	e6fc      	b.n	800570a <ai_platform_network_process+0x2da>
 8005910:	2700      	movs	r7, #0
 8005912:	e733      	b.n	800577c <ai_platform_network_process+0x34c>
 8005914:	4625      	mov	r5, r4
 8005916:	2221      	movs	r2, #33	; 0x21
 8005918:	4604      	mov	r4, r0
 800591a:	2113      	movs	r1, #19
 800591c:	f105 0010 	add.w	r0, r5, #16
 8005920:	f000 f812 	bl	8005948 <core_set_error>
 8005924:	e6f1      	b.n	800570a <ai_platform_network_process+0x2da>
 8005926:	4625      	mov	r5, r4
 8005928:	2217      	movs	r2, #23
 800592a:	4604      	mov	r4, r0
 800592c:	2113      	movs	r1, #19
 800592e:	f105 0010 	add.w	r0, r5, #16
 8005932:	f000 f809 	bl	8005948 <core_set_error>
 8005936:	e6e8      	b.n	800570a <ai_platform_network_process+0x2da>

08005938 <core_init>:
 8005938:	2001      	movs	r0, #1
 800593a:	4770      	bx	lr

0800593c <core_get_error>:
 800593c:	4603      	mov	r3, r0
 800593e:	2200      	movs	r2, #0
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop

08005948 <core_set_error>:
 8005948:	4603      	mov	r3, r0
 800594a:	7800      	ldrb	r0, [r0, #0]
 800594c:	b108      	cbz	r0, 8005952 <core_set_error+0xa>
 800594e:	2000      	movs	r0, #0
 8005950:	4770      	bx	lr
 8005952:	7019      	strb	r1, [r3, #0]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	f362 211f 	bfi	r1, r2, #8, #24
 800595a:	2001      	movs	r0, #1
 800595c:	6019      	str	r1, [r3, #0]
 800595e:	4770      	bx	lr

08005960 <ai_check_custom_types>:
 8005960:	b082      	sub	sp, #8
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <ai_check_custom_types+0x50>)
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	b118      	cbz	r0, 8005970 <ai_check_custom_types+0x10>
 8005968:	7803      	ldrb	r3, [r0, #0]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d002      	beq.n	8005974 <ai_check_custom_types+0x14>
 800596e:	2000      	movs	r0, #0
 8005970:	b002      	add	sp, #8
 8005972:	4770      	bx	lr
 8005974:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <ai_check_custom_types+0x26>
 800597c:	2001      	movs	r0, #1
 800597e:	f080 0001 	eor.w	r0, r0, #1
 8005982:	b002      	add	sp, #8
 8005984:	4770      	bx	lr
 8005986:	7842      	ldrb	r2, [r0, #1]
 8005988:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800598c:	429a      	cmp	r2, r3
 800598e:	f100 0001 	add.w	r0, r0, #1
 8005992:	d1f3      	bne.n	800597c <ai_check_custom_types+0x1c>
 8005994:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005998:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800599c:	429a      	cmp	r2, r3
 800599e:	d1ed      	bne.n	800597c <ai_check_custom_types+0x1c>
 80059a0:	7842      	ldrb	r2, [r0, #1]
 80059a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d1e8      	bne.n	800597c <ai_check_custom_types+0x1c>
 80059aa:	2000      	movs	r0, #0
 80059ac:	e7e7      	b.n	800597e <ai_check_custom_types+0x1e>
 80059ae:	bf00      	nop
 80059b0:	84048403 	.word	0x84048403

080059b4 <ai_layers_init_all>:
 80059b4:	4601      	mov	r1, r0
 80059b6:	2000      	movs	r0, #0
 80059b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80059ba:	b143      	cbz	r3, 80059ce <ai_layers_init_all+0x1a>
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	60d9      	str	r1, [r3, #12]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f100 0001 	add.w	r0, r0, #1
 80059c6:	d002      	beq.n	80059ce <ai_layers_init_all+0x1a>
 80059c8:	b10a      	cbz	r2, 80059ce <ai_layers_init_all+0x1a>
 80059ca:	4613      	mov	r3, r2
 80059cc:	e7f5      	b.n	80059ba <ai_layers_init_all+0x6>
 80059ce:	4770      	bx	lr

080059d0 <ai_layers_post_init_all>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80059d4:	2500      	movs	r5, #0
 80059d6:	b16c      	cbz	r4, 80059f4 <ai_layers_post_init_all+0x24>
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	07db      	lsls	r3, r3, #31
 80059dc:	d504      	bpl.n	80059e8 <ai_layers_post_init_all+0x18>
 80059de:	6a23      	ldr	r3, [r4, #32]
 80059e0:	4620      	mov	r0, r4
 80059e2:	b10b      	cbz	r3, 80059e8 <ai_layers_post_init_all+0x18>
 80059e4:	4798      	blx	r3
 80059e6:	3501      	adds	r5, #1
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	d002      	beq.n	80059f4 <ai_layers_post_init_all+0x24>
 80059ee:	b10b      	cbz	r3, 80059f4 <ai_layers_post_init_all+0x24>
 80059f0:	461c      	mov	r4, r3
 80059f2:	e7f0      	b.n	80059d6 <ai_layers_post_init_all+0x6>
 80059f4:	4628      	mov	r0, r5
 80059f6:	bd38      	pop	{r3, r4, r5, pc}

080059f8 <ai_layers_forward_all>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8005a00:	4604      	mov	r4, r0
 8005a02:	f1b8 0f00 	cmp.w	r8, #0
 8005a06:	d02b      	beq.n	8005a60 <ai_layers_forward_all+0x68>
 8005a08:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005a0a:	6381      	str	r1, [r0, #56]	; 0x38
 8005a0c:	b321      	cbz	r1, 8005a58 <ai_layers_forward_all+0x60>
 8005a0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a10:	2001      	movs	r0, #1
 8005a12:	47c0      	blx	r8
 8005a14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005a16:	b1fe      	cbz	r6, 8005a58 <ai_layers_forward_all+0x60>
 8005a18:	2700      	movs	r7, #0
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a1e:	2002      	movs	r0, #2
 8005a20:	47c0      	blx	r8
 8005a22:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005a24:	4628      	mov	r0, r5
 8005a26:	696b      	ldr	r3, [r5, #20]
 8005a28:	4798      	blx	r3
 8005a2a:	692e      	ldr	r6, [r5, #16]
 8005a2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a30:	42b5      	cmp	r5, r6
 8005a32:	f04f 0003 	mov.w	r0, #3
 8005a36:	d007      	beq.n	8005a48 <ai_layers_forward_all+0x50>
 8005a38:	47c0      	blx	r8
 8005a3a:	3701      	adds	r7, #1
 8005a3c:	63a6      	str	r6, [r4, #56]	; 0x38
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d1eb      	bne.n	8005a1a <ai_layers_forward_all+0x22>
 8005a42:	4638      	mov	r0, r7
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	2003      	movs	r0, #3
 8005a4a:	47c0      	blx	r8
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	3701      	adds	r7, #1
 8005a50:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a52:	4638      	mov	r0, r7
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	2700      	movs	r7, #0
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a60:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005a62:	6385      	str	r5, [r0, #56]	; 0x38
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d0f7      	beq.n	8005a58 <ai_layers_forward_all+0x60>
 8005a68:	4647      	mov	r7, r8
 8005a6a:	696b      	ldr	r3, [r5, #20]
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	4798      	blx	r3
 8005a70:	462b      	mov	r3, r5
 8005a72:	692d      	ldr	r5, [r5, #16]
 8005a74:	429d      	cmp	r5, r3
 8005a76:	d004      	beq.n	8005a82 <ai_layers_forward_all+0x8a>
 8005a78:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a7a:	3701      	adds	r7, #1
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	d1f4      	bne.n	8005a6a <ai_layers_forward_all+0x72>
 8005a80:	e7df      	b.n	8005a42 <ai_layers_forward_all+0x4a>
 8005a82:	2300      	movs	r3, #0
 8005a84:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a86:	3701      	adds	r7, #1
 8005a88:	e7db      	b.n	8005a42 <ai_layers_forward_all+0x4a>
 8005a8a:	bf00      	nop

08005a8c <forward_dense>:
 8005a8c:	6983      	ldr	r3, [r0, #24]
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	f000 8181 	beq.w	8005d98 <forward_dense+0x30c>
 8005a96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	ed2d 8b02 	vpush	{d8}
 8005a9e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005aa2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005aa6:	b095      	sub	sp, #84	; 0x54
 8005aa8:	b105      	cbz	r5, 8005aac <forward_dense+0x20>
 8005aaa:	682d      	ldr	r5, [r5, #0]
 8005aac:	2a01      	cmp	r2, #1
 8005aae:	f000 828f 	beq.w	8005fd0 <forward_dense+0x544>
 8005ab2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8005ab6:	b106      	cbz	r6, 8005aba <forward_dense+0x2e>
 8005ab8:	6836      	ldr	r6, [r6, #0]
 8005aba:	2a02      	cmp	r2, #2
 8005abc:	f000 816e 	beq.w	8005d9c <forward_dense+0x310>
 8005ac0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005ac4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8274 	beq.w	8005fb4 <forward_dense+0x528>
 8005acc:	4619      	mov	r1, r3
 8005ace:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005ad2:	6809      	ldr	r1, [r1, #0]
 8005ad4:	910d      	str	r1, [sp, #52]	; 0x34
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f240 826e 	bls.w	8005fb8 <forward_dense+0x52c>
 8005adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	68e8      	ldr	r0, [r5, #12]
 8005ae6:	68f7      	ldr	r7, [r6, #12]
 8005ae8:	6840      	ldr	r0, [r0, #4]
 8005aea:	6999      	ldr	r1, [r3, #24]
 8005aec:	9013      	str	r0, [sp, #76]	; 0x4c
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	680b      	ldr	r3, [r1, #0]
 8005af2:	9012      	str	r0, [sp, #72]	; 0x48
 8005af4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8005af8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8005afc:	fb00 f404 	mul.w	r4, r0, r4
 8005b00:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8005b04:	fa4e f000 	asr.w	r0, lr, r0
 8005b08:	2a03      	cmp	r2, #3
 8005b0a:	9010      	str	r0, [sp, #64]	; 0x40
 8005b0c:	f000 825d 	beq.w	8005fca <forward_dense+0x53e>
 8005b10:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8005b14:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	f000 8246 	beq.w	8005faa <forward_dense+0x51e>
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	f000 8242 	beq.w	8005faa <forward_dense+0x51e>
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005b2c:	f000 822c 	beq.w	8005f88 <forward_dense+0x4fc>
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	f000 8229 	beq.w	8005f88 <forward_dense+0x4fc>
 8005b36:	f04f 0b00 	mov.w	fp, #0
 8005b3a:	69b2      	ldr	r2, [r6, #24]
 8005b3c:	69ab      	ldr	r3, [r5, #24]
 8005b3e:	6891      	ldr	r1, [r2, #8]
 8005b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	6952      	ldr	r2, [r2, #20]
 8005b46:	9106      	str	r1, [sp, #24]
 8005b48:	fb07 f404 	mul.w	r4, r7, r4
 8005b4c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b52:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005b56:	4281      	cmp	r1, r0
 8005b58:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8005b5c:	900e      	str	r0, [sp, #56]	; 0x38
 8005b5e:	940c      	str	r4, [sp, #48]	; 0x30
 8005b60:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005b64:	f080 8113 	bcs.w	8005d8e <forward_dense+0x302>
 8005b68:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b6a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005db8 <forward_dense+0x32c>
 8005b6e:	f021 0201 	bic.w	r2, r1, #1
 8005b72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005b76:	9204      	str	r2, [sp, #16]
 8005b78:	f001 0201 	and.w	r2, r1, #1
 8005b7c:	08c8      	lsrs	r0, r1, #3
 8005b7e:	9208      	str	r2, [sp, #32]
 8005b80:	008a      	lsls	r2, r1, #2
 8005b82:	f001 0a07 	and.w	sl, r1, #7
 8005b86:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b88:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	465c      	mov	r4, fp
 8005b90:	9007      	str	r0, [sp, #28]
 8005b92:	46cb      	mov	fp, r9
 8005b94:	9205      	str	r2, [sp, #20]
 8005b96:	9302      	str	r3, [sp, #8]
 8005b98:	46c1      	mov	r9, r8
 8005b9a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	3b20      	subs	r3, #32
 8005ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8005baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bac:	b10b      	cbz	r3, 8005bb2 <forward_dense+0x126>
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	f000 81da 	beq.w	8005f6c <forward_dense+0x4e0>
 8005bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005bba:	2904      	cmp	r1, #4
 8005bbc:	9906      	ldr	r1, [sp, #24]
 8005bbe:	f000 80fd 	beq.w	8005dbc <forward_dense+0x330>
 8005bc2:	4549      	cmp	r1, r9
 8005bc4:	f080 80d2 	bcs.w	8005d6c <forward_dense+0x2e0>
 8005bc8:	460f      	mov	r7, r1
 8005bca:	9907      	ldr	r1, [sp, #28]
 8005bcc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005bd0:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005bd4:	1c4e      	adds	r6, r1, #1
 8005bd6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005bda:	4694      	mov	ip, r2
 8005bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bde:	468e      	mov	lr, r1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80de 	beq.w	8005da2 <forward_dense+0x316>
 8005be6:	ecf3 2a01 	vldmia	r3!, {s5}
 8005bea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005db8 <forward_dense+0x32c>
 8005bee:	f1be 0f00 	cmp.w	lr, #0
 8005bf2:	f000 80de 	beq.w	8005db2 <forward_dense+0x326>
 8005bf6:	f10c 0108 	add.w	r1, ip, #8
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8005c00:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8005c04:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8005c08:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005c0c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8005c10:	ed10 5a04 	vldr	s10, [r0, #-16]
 8005c14:	ed50 5a03 	vldr	s11, [r0, #-12]
 8005c18:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005c1c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005c20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c24:	edd5 7a00 	vldr	s15, [r5]
 8005c28:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8005c2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c30:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005c34:	ed95 3a00 	vldr	s6, [r5]
 8005c38:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8005c3c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c44:	3108      	adds	r1, #8
 8005c46:	edd5 3a00 	vldr	s7, [r5]
 8005c4a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005c4e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005c52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c56:	3020      	adds	r0, #32
 8005c58:	ed95 4a00 	vldr	s8, [r5]
 8005c5c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005c60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c68:	edd5 4a00 	vldr	s9, [r5]
 8005c6c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005c70:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005c74:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c78:	ed95 5a00 	vldr	s10, [r5]
 8005c7c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005c80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c88:	edd5 5a00 	vldr	s11, [r5]
 8005c8c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005c90:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005c94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c98:	428e      	cmp	r6, r1
 8005c9a:	ed95 6a00 	vldr	s12, [r5]
 8005c9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ca6:	d1a9      	bne.n	8005bfc <forward_dense+0x170>
 8005ca8:	f1a6 0108 	sub.w	r1, r6, #8
 8005cac:	4650      	mov	r0, sl
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	d04a      	beq.n	8005d48 <forward_dense+0x2bc>
 8005cb2:	780d      	ldrb	r5, [r1, #0]
 8005cb4:	edd0 6a00 	vldr	s13, [r0]
 8005cb8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005cbc:	edd5 7a00 	vldr	s15, [r5]
 8005cc0:	2a01      	cmp	r2, #1
 8005cc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cc6:	d03f      	beq.n	8005d48 <forward_dense+0x2bc>
 8005cc8:	784d      	ldrb	r5, [r1, #1]
 8005cca:	edd0 6a01 	vldr	s13, [r0, #4]
 8005cce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005cd2:	edd5 7a00 	vldr	s15, [r5]
 8005cd6:	2a02      	cmp	r2, #2
 8005cd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cdc:	d034      	beq.n	8005d48 <forward_dense+0x2bc>
 8005cde:	788d      	ldrb	r5, [r1, #2]
 8005ce0:	edd0 6a02 	vldr	s13, [r0, #8]
 8005ce4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ce8:	edd5 7a00 	vldr	s15, [r5]
 8005cec:	2a03      	cmp	r2, #3
 8005cee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cf2:	d029      	beq.n	8005d48 <forward_dense+0x2bc>
 8005cf4:	78cd      	ldrb	r5, [r1, #3]
 8005cf6:	edd0 6a03 	vldr	s13, [r0, #12]
 8005cfa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005cfe:	edd5 7a00 	vldr	s15, [r5]
 8005d02:	2a04      	cmp	r2, #4
 8005d04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d08:	d01e      	beq.n	8005d48 <forward_dense+0x2bc>
 8005d0a:	790d      	ldrb	r5, [r1, #4]
 8005d0c:	edd0 6a04 	vldr	s13, [r0, #16]
 8005d10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005d14:	edd5 7a00 	vldr	s15, [r5]
 8005d18:	2a05      	cmp	r2, #5
 8005d1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d1e:	d013      	beq.n	8005d48 <forward_dense+0x2bc>
 8005d20:	794d      	ldrb	r5, [r1, #5]
 8005d22:	edd0 6a05 	vldr	s13, [r0, #20]
 8005d26:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005d2a:	edd5 7a00 	vldr	s15, [r5]
 8005d2e:	2a06      	cmp	r2, #6
 8005d30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d34:	d008      	beq.n	8005d48 <forward_dense+0x2bc>
 8005d36:	7989      	ldrb	r1, [r1, #6]
 8005d38:	edd0 7a06 	vldr	s15, [r0, #24]
 8005d3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005d40:	edd1 6a00 	vldr	s13, [r1]
 8005d44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d48:	44dc      	add	ip, fp
 8005d4a:	445e      	add	r6, fp
 8005d4c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005d50:	eca7 7a01 	vstmia	r7!, {s14}
 8005d54:	454f      	cmp	r7, r9
 8005d56:	f4ff af43 	bcc.w	8005be0 <forward_dense+0x154>
 8005d5a:	9a06      	ldr	r2, [sp, #24]
 8005d5c:	eba9 0302 	sub.w	r3, r9, r2
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	3304      	adds	r3, #4
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	9306      	str	r3, [sp, #24]
 8005d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d6e:	9a05      	ldr	r2, [sp, #20]
 8005d70:	4499      	add	r9, r3
 8005d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d74:	441a      	add	r2, r3
 8005d76:	9205      	str	r2, [sp, #20]
 8005d78:	9a02      	ldr	r2, [sp, #8]
 8005d7a:	441a      	add	r2, r3
 8005d7c:	9202      	str	r2, [sp, #8]
 8005d7e:	9a04      	ldr	r2, [sp, #16]
 8005d80:	441a      	add	r2, r3
 8005d82:	9204      	str	r2, [sp, #16]
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	f4ff af08 	bcc.w	8005b9e <forward_dense+0x112>
 8005d8e:	b015      	add	sp, #84	; 0x54
 8005d90:	ecbd 8b02 	vpop	{d8}
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	6853      	ldr	r3, [r2, #4]
 8005d9a:	deff      	udf	#255	; 0xff
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	deff      	udf	#255	; 0xff
 8005da2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005db8 <forward_dense+0x32c>
 8005da6:	eef0 2a48 	vmov.f32	s5, s16
 8005daa:	f1be 0f00 	cmp.w	lr, #0
 8005dae:	f47f af22 	bne.w	8005bf6 <forward_dense+0x16a>
 8005db2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005db4:	4661      	mov	r1, ip
 8005db6:	e77a      	b.n	8005cae <forward_dense+0x222>
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	4549      	cmp	r1, r9
 8005dbe:	d2d5      	bcs.n	8005d6c <forward_dense+0x2e0>
 8005dc0:	9807      	ldr	r0, [sp, #28]
 8005dc2:	9103      	str	r1, [sp, #12]
 8005dc4:	9904      	ldr	r1, [sp, #16]
 8005dc6:	f100 0c01 	add.w	ip, r0, #1
 8005dca:	3901      	subs	r1, #1
 8005dcc:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80b2 	beq.w	8005f3c <forward_dense+0x4b0>
 8005dd8:	9907      	ldr	r1, [sp, #28]
 8005dda:	ecf3 2a01 	vldmia	r3!, {s5}
 8005dde:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005db8 <forward_dense+0x32c>
 8005de2:	2900      	cmp	r1, #0
 8005de4:	f000 80b2 	beq.w	8005f4c <forward_dense+0x4c0>
 8005de8:	9902      	ldr	r1, [sp, #8]
 8005dea:	1d10      	adds	r0, r2, #4
 8005dec:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8005df0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8005df4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8005df8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8005dfc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8005e00:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8005e04:	ed11 5a04 	vldr	s10, [r1, #-16]
 8005e08:	ed51 5a03 	vldr	s11, [r1, #-12]
 8005e0c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005e10:	ed51 6a01 	vldr	s13, [r1, #-4]
 8005e14:	f006 070f 	and.w	r7, r6, #15
 8005e18:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005e1c:	edd7 7a00 	vldr	s15, [r7]
 8005e20:	0936      	lsrs	r6, r6, #4
 8005e22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005e26:	ed96 3a00 	vldr	s6, [r6]
 8005e2a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005e2e:	092e      	lsrs	r6, r5, #4
 8005e30:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005e34:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005e38:	f005 050f 	and.w	r5, r5, #15
 8005e3c:	edd6 3a00 	vldr	s7, [r6]
 8005e40:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005e44:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005e48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005e4c:	0937      	lsrs	r7, r6, #4
 8005e4e:	ed95 4a00 	vldr	s8, [r5]
 8005e52:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005e56:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e5a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005e5e:	f006 060f 	and.w	r6, r6, #15
 8005e62:	edd7 4a00 	vldr	s9, [r7]
 8005e66:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005e6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005e6e:	3004      	adds	r0, #4
 8005e70:	ed96 5a00 	vldr	s10, [r6]
 8005e74:	092e      	lsrs	r6, r5, #4
 8005e76:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005e7e:	f005 050f 	and.w	r5, r5, #15
 8005e82:	edd6 5a00 	vldr	s11, [r6]
 8005e86:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005e8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005e8e:	4584      	cmp	ip, r0
 8005e90:	ed95 6a00 	vldr	s12, [r5]
 8005e94:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e98:	f101 0120 	add.w	r1, r1, #32
 8005e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ea0:	d1a4      	bne.n	8005dec <forward_dense+0x360>
 8005ea2:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005ea6:	f1ac 0804 	sub.w	r8, ip, #4
 8005eaa:	9904      	ldr	r1, [sp, #16]
 8005eac:	458e      	cmp	lr, r1
 8005eae:	d22a      	bcs.n	8005f06 <forward_dense+0x47a>
 8005eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eb2:	eba1 070e 	sub.w	r7, r1, lr
 8005eb6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8005eba:	f10e 0008 	add.w	r0, lr, #8
 8005ebe:	f108 36ff 	add.w	r6, r8, #4294967295
 8005ec2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005ec6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eca:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005ece:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005ed2:	f001 050f 	and.w	r5, r1, #15
 8005ed6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005eda:	edd5 7a00 	vldr	s15, [r5]
 8005ede:	0909      	lsrs	r1, r1, #4
 8005ee0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005ee4:	ed91 6a00 	vldr	s12, [r1]
 8005ee8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005eec:	42b7      	cmp	r7, r6
 8005eee:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ef2:	f100 0008 	add.w	r0, r0, #8
 8005ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005efa:	d1e4      	bne.n	8005ec6 <forward_dense+0x43a>
 8005efc:	f10a 0a01 	add.w	sl, sl, #1
 8005f00:	44d0      	add	r8, sl
 8005f02:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8005f06:	9908      	ldr	r1, [sp, #32]
 8005f08:	b321      	cbz	r1, 8005f54 <forward_dense+0x4c8>
 8005f0a:	f898 1000 	ldrb.w	r1, [r8]
 8005f0e:	edde 7a00 	vldr	s15, [lr]
 8005f12:	0909      	lsrs	r1, r1, #4
 8005f14:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005f18:	edd1 6a00 	vldr	s13, [r1]
 8005f1c:	9903      	ldr	r1, [sp, #12]
 8005f1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f22:	445a      	add	r2, fp
 8005f24:	44dc      	add	ip, fp
 8005f26:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005f2a:	ece1 2a01 	vstmia	r1!, {s5}
 8005f2e:	4589      	cmp	r9, r1
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	f67f af12 	bls.w	8005d5a <forward_dense+0x2ce>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f47f af4e 	bne.w	8005dd8 <forward_dense+0x34c>
 8005f3c:	9907      	ldr	r1, [sp, #28]
 8005f3e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005db8 <forward_dense+0x32c>
 8005f42:	eef0 2a48 	vmov.f32	s5, s16
 8005f46:	2900      	cmp	r1, #0
 8005f48:	f47f af4e 	bne.w	8005de8 <forward_dense+0x35c>
 8005f4c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005f50:	4690      	mov	r8, r2
 8005f52:	e7aa      	b.n	8005eaa <forward_dense+0x41e>
 8005f54:	9903      	ldr	r1, [sp, #12]
 8005f56:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005f5a:	445a      	add	r2, fp
 8005f5c:	eca1 7a01 	vstmia	r1!, {s14}
 8005f60:	4549      	cmp	r1, r9
 8005f62:	9103      	str	r1, [sp, #12]
 8005f64:	44dc      	add	ip, fp
 8005f66:	f4ff af34 	bcc.w	8005dd2 <forward_dense+0x346>
 8005f6a:	e6f6      	b.n	8005d5a <forward_dense+0x2ce>
 8005f6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005f6e:	9d06      	ldr	r5, [sp, #24]
 8005f70:	9101      	str	r1, [sp, #4]
 8005f72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005f74:	9100      	str	r1, [sp, #0]
 8005f76:	4628      	mov	r0, r5
 8005f78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f7a:	f001 fde9 	bl	8007b50 <forward_lite_dense_if32of32wf32>
 8005f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f80:	462b      	mov	r3, r5
 8005f82:	4413      	add	r3, r2
 8005f84:	9306      	str	r3, [sp, #24]
 8005f86:	e6f1      	b.n	8005d6c <forward_dense+0x2e0>
 8005f88:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005f8c:	f1b9 0f00 	cmp.w	r9, #0
 8005f90:	d016      	beq.n	8005fc0 <forward_dense+0x534>
 8005f92:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005f96:	f002 f84d 	bl	8008034 <ai_array_get_byte_size>
 8005f9a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f001 ff54 	bl	8007e50 <st_int8_copy>
 8005fa8:	e5c7      	b.n	8005b3a <forward_dense+0xae>
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d00a      	beq.n	8005fc4 <forward_dense+0x538>
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	e5bd      	b.n	8005b30 <forward_dense+0xa4>
 8005fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb6:	e595      	b.n	8005ae4 <forward_dense+0x58>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	e591      	b.n	8005ae4 <forward_dense+0x58>
 8005fc0:	46c3      	mov	fp, r8
 8005fc2:	e5ba      	b.n	8005b3a <forward_dense+0xae>
 8005fc4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005fc8:	e5b7      	b.n	8005b3a <forward_dense+0xae>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	deff      	udf	#255	; 0xff
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	deff      	udf	#255	; 0xff
 8005fd6:	bf00      	nop

08005fd8 <nl_func_sigmoid_array_f32>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	ed2d 8b02 	vpush	{d8}
 8005fde:	698f      	ldr	r7, [r1, #24]
 8005fe0:	6980      	ldr	r0, [r0, #24]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	6886      	ldr	r6, [r0, #8]
 8005fe6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005fea:	3a01      	subs	r2, #1
 8005fec:	0093      	lsls	r3, r2, #2
 8005fee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	d815      	bhi.n	8006022 <nl_func_sigmoid_array_f32+0x4a>
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	1d14      	adds	r4, r2, #4
 8005ffa:	441e      	add	r6, r3
 8005ffc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006000:	4625      	mov	r5, r4
 8006002:	ed34 0a01 	vldmdb	r4!, {s0}
 8006006:	eeb1 0a40 	vneg.f32	s0, s0
 800600a:	f004 fed5 	bl	800adb8 <expf>
 800600e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006012:	3d08      	subs	r5, #8
 8006014:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8006018:	ed66 7a01 	vstmdb	r6!, {s15}
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	42ab      	cmp	r3, r5
 8006020:	d9ee      	bls.n	8006000 <nl_func_sigmoid_array_f32+0x28>
 8006022:	ecbd 8b02 	vpop	{d8}
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006028 <nl_func_tanh_array_f32>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	698f      	ldr	r7, [r1, #24]
 800602c:	6980      	ldr	r0, [r0, #24]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	6886      	ldr	r6, [r0, #8]
 8006032:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006036:	3a01      	subs	r2, #1
 8006038:	0093      	lsls	r3, r2, #2
 800603a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800603e:	4291      	cmp	r1, r2
 8006040:	d80d      	bhi.n	800605e <nl_func_tanh_array_f32+0x36>
 8006042:	3304      	adds	r3, #4
 8006044:	1d14      	adds	r4, r2, #4
 8006046:	441e      	add	r6, r3
 8006048:	4625      	mov	r5, r4
 800604a:	ed34 0a01 	vldmdb	r4!, {s0}
 800604e:	f004 fef1 	bl	800ae34 <tanhf>
 8006052:	ed26 0a01 	vstmdb	r6!, {s0}
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3d08      	subs	r5, #8
 800605a:	42ab      	cmp	r3, r5
 800605c:	d9f4      	bls.n	8006048 <nl_func_tanh_array_f32+0x20>
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006060 <forward_relu>:
 8006060:	6982      	ldr	r2, [r0, #24]
 8006062:	8813      	ldrh	r3, [r2, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05b      	beq.n	8006120 <forward_relu+0xc0>
 8006068:	6851      	ldr	r1, [r2, #4]
 800606a:	684a      	ldr	r2, [r1, #4]
 800606c:	b102      	cbz	r2, 8006070 <forward_relu+0x10>
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	f000 8123 	beq.w	80062bc <forward_relu+0x25c>
 8006076:	b470      	push	{r4, r5, r6}
 8006078:	6909      	ldr	r1, [r1, #16]
 800607a:	b101      	cbz	r1, 800607e <forward_relu+0x1e>
 800607c:	6809      	ldr	r1, [r1, #0]
 800607e:	69c6      	ldr	r6, [r0, #28]
 8006080:	2e00      	cmp	r6, #0
 8006082:	f000 8097 	beq.w	80061b4 <forward_relu+0x154>
 8006086:	6873      	ldr	r3, [r6, #4]
 8006088:	6988      	ldr	r0, [r1, #24]
 800608a:	6991      	ldr	r1, [r2, #24]
 800608c:	2b01      	cmp	r3, #1
 800608e:	f000 80c1 	beq.w	8006214 <forward_relu+0x1b4>
 8006092:	6893      	ldr	r3, [r2, #8]
 8006094:	6880      	ldr	r0, [r0, #8]
 8006096:	688c      	ldr	r4, [r1, #8]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	f000 80f2 	beq.w	8006282 <forward_relu+0x222>
 800609e:	68d5      	ldr	r5, [r2, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060aa:	42ab      	cmp	r3, r5
 80060ac:	fb01 f202 	mul.w	r2, r1, r2
 80060b0:	d1f9      	bne.n	80060a6 <forward_relu+0x46>
 80060b2:	68b3      	ldr	r3, [r6, #8]
 80060b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80060b8:	edd3 6a00 	vldr	s13, [r3]
 80060bc:	ed93 6a01 	vldr	s12, [r3, #4]
 80060c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80060c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80060c8:	3a01      	subs	r2, #1
 80060ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80060d6:	d425      	bmi.n	8006124 <forward_relu+0xc4>
 80060d8:	429c      	cmp	r4, r3
 80060da:	d81f      	bhi.n	800611c <forward_relu+0xbc>
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	1d01      	adds	r1, r0, #4
 80060e0:	e00d      	b.n	80060fe <forward_relu+0x9e>
 80060e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80060e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ea:	db03      	blt.n	80060f4 <forward_relu+0x94>
 80060ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80060f4:	3b08      	subs	r3, #8
 80060f6:	429c      	cmp	r4, r3
 80060f8:	ed61 7a01 	vstmdb	r1!, {s15}
 80060fc:	d80e      	bhi.n	800611c <forward_relu+0xbc>
 80060fe:	4613      	mov	r3, r2
 8006100:	ed72 7a01 	vldmdb	r2!, {s15}
 8006104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610c:	d9e9      	bls.n	80060e2 <forward_relu+0x82>
 800610e:	3b08      	subs	r3, #8
 8006110:	eef0 7a47 	vmov.f32	s15, s14
 8006114:	429c      	cmp	r4, r3
 8006116:	ed61 7a01 	vstmdb	r1!, {s15}
 800611a:	d9f0      	bls.n	80060fe <forward_relu+0x9e>
 800611c:	bc70      	pop	{r4, r5, r6}
 800611e:	4770      	bx	lr
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	deff      	udf	#255	; 0xff
 8006124:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612c:	d11f      	bne.n	800616e <forward_relu+0x10e>
 800612e:	429c      	cmp	r4, r3
 8006130:	d8f4      	bhi.n	800611c <forward_relu+0xbc>
 8006132:	1b1c      	subs	r4, r3, r4
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	2500      	movs	r5, #0
 800613c:	1b1b      	subs	r3, r3, r4
 800613e:	1d01      	adds	r1, r0, #4
 8006140:	ed72 7a01 	vldmdb	r2!, {s15}
 8006144:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	dc0a      	bgt.n	8006164 <forward_relu+0x104>
 800614e:	429a      	cmp	r2, r3
 8006150:	f841 5d04 	str.w	r5, [r1, #-4]!
 8006154:	d0e2      	beq.n	800611c <forward_relu+0xbc>
 8006156:	ed72 7a01 	vldmdb	r2!, {s15}
 800615a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800615e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006162:	ddf4      	ble.n	800614e <forward_relu+0xee>
 8006164:	429a      	cmp	r2, r3
 8006166:	ed61 7a01 	vstmdb	r1!, {s15}
 800616a:	d1e9      	bne.n	8006140 <forward_relu+0xe0>
 800616c:	e7d6      	b.n	800611c <forward_relu+0xbc>
 800616e:	429c      	cmp	r4, r3
 8006170:	d8d4      	bhi.n	800611c <forward_relu+0xbc>
 8006172:	1b1c      	subs	r4, r3, r4
 8006174:	f024 0403 	bic.w	r4, r4, #3
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	1d01      	adds	r1, r0, #4
 800617c:	1b1b      	subs	r3, r3, r4
 800617e:	ed72 7a01 	vldmdb	r2!, {s15}
 8006182:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618a:	db0e      	blt.n	80061aa <forward_relu+0x14a>
 800618c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006190:	4293      	cmp	r3, r2
 8006192:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006196:	ed61 7a01 	vstmdb	r1!, {s15}
 800619a:	d0bf      	beq.n	800611c <forward_relu+0xbc>
 800619c:	ed72 7a01 	vldmdb	r2!, {s15}
 80061a0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	daf0      	bge.n	800618c <forward_relu+0x12c>
 80061aa:	4293      	cmp	r3, r2
 80061ac:	ed61 7a01 	vstmdb	r1!, {s15}
 80061b0:	d1e5      	bne.n	800617e <forward_relu+0x11e>
 80061b2:	e7b3      	b.n	800611c <forward_relu+0xbc>
 80061b4:	6893      	ldr	r3, [r2, #8]
 80061b6:	6989      	ldr	r1, [r1, #24]
 80061b8:	6990      	ldr	r0, [r2, #24]
 80061ba:	6889      	ldr	r1, [r1, #8]
 80061bc:	6884      	ldr	r4, [r0, #8]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	d075      	beq.n	80062ae <forward_relu+0x24e>
 80061c2:	68d5      	ldr	r5, [r2, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80061ca:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80061ce:	429d      	cmp	r5, r3
 80061d0:	fb00 f202 	mul.w	r2, r0, r2
 80061d4:	d1f9      	bne.n	80061ca <forward_relu+0x16a>
 80061d6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80061da:	3b01      	subs	r3, #1
 80061dc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80061e0:	4294      	cmp	r4, r2
 80061e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80061e6:	d899      	bhi.n	800611c <forward_relu+0xbc>
 80061e8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80062c4 <forward_relu+0x264>
 80061ec:	3204      	adds	r2, #4
 80061ee:	3104      	adds	r1, #4
 80061f0:	4613      	mov	r3, r2
 80061f2:	ed72 7a01 	vldmdb	r2!, {s15}
 80061f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	f1a3 0308 	sub.w	r3, r3, #8
 8006202:	bfb8      	it	lt
 8006204:	eef0 7a47 	vmovlt.f32	s15, s14
 8006208:	429c      	cmp	r4, r3
 800620a:	ed61 7a01 	vstmdb	r1!, {s15}
 800620e:	d9ef      	bls.n	80061f0 <forward_relu+0x190>
 8006210:	bc70      	pop	{r4, r5, r6}
 8006212:	4770      	bx	lr
 8006214:	688c      	ldr	r4, [r1, #8]
 8006216:	6891      	ldr	r1, [r2, #8]
 8006218:	6880      	ldr	r0, [r0, #8]
 800621a:	0a09      	lsrs	r1, r1, #8
 800621c:	d049      	beq.n	80062b2 <forward_relu+0x252>
 800621e:	68d5      	ldr	r5, [r2, #12]
 8006220:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006224:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006228:	42aa      	cmp	r2, r5
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	d1f9      	bne.n	8006224 <forward_relu+0x1c4>
 8006230:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006234:	3a01      	subs	r2, #1
 8006236:	68b1      	ldr	r1, [r6, #8]
 8006238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800623c:	429c      	cmp	r4, r3
 800623e:	ed91 7a00 	vldr	s14, [r1]
 8006242:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006246:	f63f af69 	bhi.w	800611c <forward_relu+0xbc>
 800624a:	2500      	movs	r5, #0
 800624c:	3304      	adds	r3, #4
 800624e:	1d02      	adds	r2, r0, #4
 8006250:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625c:	f1a3 0104 	sub.w	r1, r3, #4
 8006260:	f1a3 0308 	sub.w	r3, r3, #8
 8006264:	d406      	bmi.n	8006274 <forward_relu+0x214>
 8006266:	429c      	cmp	r4, r3
 8006268:	f842 5d04 	str.w	r5, [r2, #-4]!
 800626c:	f63f af56 	bhi.w	800611c <forward_relu+0xbc>
 8006270:	460b      	mov	r3, r1
 8006272:	e7ed      	b.n	8006250 <forward_relu+0x1f0>
 8006274:	429c      	cmp	r4, r3
 8006276:	ed62 7a01 	vstmdb	r2!, {s15}
 800627a:	f63f af4f 	bhi.w	800611c <forward_relu+0xbc>
 800627e:	460b      	mov	r3, r1
 8006280:	e7e6      	b.n	8006250 <forward_relu+0x1f0>
 8006282:	68b3      	ldr	r3, [r6, #8]
 8006284:	ed93 7a02 	vldr	s14, [r3, #8]
 8006288:	edd3 6a00 	vldr	s13, [r3]
 800628c:	ed93 6a01 	vldr	s12, [r3, #4]
 8006290:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006298:	d401      	bmi.n	800629e <forward_relu+0x23e>
 800629a:	4623      	mov	r3, r4
 800629c:	e71e      	b.n	80060dc <forward_relu+0x7c>
 800629e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80062a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a6:	4623      	mov	r3, r4
 80062a8:	f47f af63 	bne.w	8006172 <forward_relu+0x112>
 80062ac:	e741      	b.n	8006132 <forward_relu+0xd2>
 80062ae:	4622      	mov	r2, r4
 80062b0:	e79a      	b.n	80061e8 <forward_relu+0x188>
 80062b2:	68b2      	ldr	r2, [r6, #8]
 80062b4:	4623      	mov	r3, r4
 80062b6:	ed92 7a00 	vldr	s14, [r2]
 80062ba:	e7c6      	b.n	800624a <forward_relu+0x1ea>
 80062bc:	2300      	movs	r3, #0
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	deff      	udf	#255	; 0xff
 80062c2:	bf00      	nop
 80062c4:	00000000 	.word	0x00000000

080062c8 <array_f32_identity>:
 80062c8:	6980      	ldr	r0, [r0, #24]
 80062ca:	698b      	ldr	r3, [r1, #24]
 80062cc:	4298      	cmp	r0, r3
 80062ce:	d004      	beq.n	80062da <array_f32_identity+0x12>
 80062d0:	68c1      	ldr	r1, [r0, #12]
 80062d2:	68d8      	ldr	r0, [r3, #12]
 80062d4:	0092      	lsls	r2, r2, #2
 80062d6:	f001 bdbb 	b.w	8007e50 <st_int8_copy>
 80062da:	4770      	bx	lr

080062dc <forward_lstm>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	ed2d 8b06 	vpush	{d8-d10}
 80062e4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80062e8:	6983      	ldr	r3, [r0, #24]
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	881a      	ldrh	r2, [r3, #0]
 80062ee:	60b8      	str	r0, [r7, #8]
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	f001 842a 	beq.w	8007b4a <forward_lstm+0x186e>
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062fc:	2a01      	cmp	r2, #1
 80062fe:	f001 8424 	beq.w	8007b4a <forward_lstm+0x186e>
 8006302:	2a02      	cmp	r2, #2
 8006304:	f001 8421 	beq.w	8007b4a <forward_lstm+0x186e>
 8006308:	69d8      	ldr	r0, [r3, #28]
 800630a:	2800      	cmp	r0, #0
 800630c:	f001 8414 	beq.w	8007b38 <forward_lstm+0x185c>
 8006310:	8b1b      	ldrh	r3, [r3, #24]
 8006312:	6801      	ldr	r1, [r0, #0]
 8006314:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8006318:	2b01      	cmp	r3, #1
 800631a:	6883      	ldr	r3, [r0, #8]
 800631c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006320:	bf88      	it	hi
 8006322:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006326:	68c3      	ldr	r3, [r0, #12]
 8006328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800632c:	bf98      	it	ls
 800632e:	f04f 0b00 	movls.w	fp, #0
 8006332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633a:	b10b      	cbz	r3, 8006340 <forward_lstm+0x64>
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006344:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006346:	899b      	ldrh	r3, [r3, #12]
 8006348:	68cd      	ldr	r5, [r1, #12]
 800634a:	0099      	lsls	r1, r3, #2
 800634c:	3107      	adds	r1, #7
 800634e:	08c9      	lsrs	r1, r1, #3
 8006350:	466c      	mov	r4, sp
 8006352:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 8006356:	46a5      	mov	sp, r4
 8006358:	1ddc      	adds	r4, r3, #7
 800635a:	466e      	mov	r6, sp
 800635c:	08e4      	lsrs	r4, r4, #3
 800635e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8006362:	46a5      	mov	sp, r4
 8006364:	68bc      	ldr	r4, [r7, #8]
 8006366:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800636a:	466c      	mov	r4, sp
 800636c:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8006370:	46e5      	mov	sp, ip
 8006372:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 8006376:	f8c7 d010 	str.w	sp, [r7, #16]
 800637a:	468d      	mov	sp, r1
 800637c:	68e9      	ldr	r1, [r5, #12]
 800637e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006380:	6869      	ldr	r1, [r5, #4]
 8006382:	6779      	str	r1, [r7, #116]	; 0x74
 8006384:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8006388:	ee09 1a10 	vmov	s18, r1
 800638c:	46ee      	mov	lr, sp
 800638e:	2800      	cmp	r0, #0
 8006390:	f001 83c9 	beq.w	8007b26 <forward_lstm+0x184a>
 8006394:	6945      	ldr	r5, [r0, #20]
 8006396:	6901      	ldr	r1, [r0, #16]
 8006398:	ee09 5a90 	vmov	s19, r5
 800639c:	6985      	ldr	r5, [r0, #24]
 800639e:	ee0a 1a90 	vmov	s21, r1
 80063a2:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 80063a6:	ee0a 5a10 	vmov	s20, r5
 80063aa:	b119      	cbz	r1, 80063b4 <forward_lstm+0xd8>
 80063ac:	6989      	ldr	r1, [r1, #24]
 80063ae:	6889      	ldr	r1, [r1, #8]
 80063b0:	ee0a 1a90 	vmov	s21, r1
 80063b4:	ee19 1a90 	vmov	r1, s19
 80063b8:	b119      	cbz	r1, 80063c2 <forward_lstm+0xe6>
 80063ba:	6989      	ldr	r1, [r1, #24]
 80063bc:	6889      	ldr	r1, [r1, #8]
 80063be:	ee09 1a90 	vmov	s19, r1
 80063c2:	ee1a 1a10 	vmov	r1, s20
 80063c6:	b119      	cbz	r1, 80063d0 <forward_lstm+0xf4>
 80063c8:	6989      	ldr	r1, [r1, #24]
 80063ca:	6889      	ldr	r1, [r1, #8]
 80063cc:	ee0a 1a10 	vmov	s20, r1
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	d003      	beq.n	80063de <forward_lstm+0x102>
 80063d6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80063da:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80063de:	b108      	cbz	r0, 80063e4 <forward_lstm+0x108>
 80063e0:	6981      	ldr	r1, [r0, #24]
 80063e2:	6888      	ldr	r0, [r1, #8]
 80063e4:	2a03      	cmp	r2, #3
 80063e6:	f001 83b0 	beq.w	8007b4a <forward_lstm+0x186e>
 80063ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80063ee:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 80063f2:	f1ba 0f00 	cmp.w	sl, #0
 80063f6:	d001      	beq.n	80063fc <forward_lstm+0x120>
 80063f8:	f8da a000 	ldr.w	sl, [sl]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8006402:	4423      	add	r3, r4
 8006404:	4621      	mov	r1, r4
 8006406:	f1ae 0404 	sub.w	r4, lr, #4
 800640a:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 800640e:	60fc      	str	r4, [r7, #12]
 8006410:	3e04      	subs	r6, #4
 8006412:	f1ce 0e04 	rsb	lr, lr, #4
 8006416:	1f15      	subs	r5, r2, #4
 8006418:	4699      	mov	r9, r3
 800641a:	e016      	b.n	800644a <forward_lstm+0x16e>
 800641c:	4423      	add	r3, r4
 800641e:	f853 200e 	ldr.w	r2, [r3, lr]
 8006422:	b1c2      	cbz	r2, 8006456 <forward_lstm+0x17a>
 8006424:	68d3      	ldr	r3, [r2, #12]
 8006426:	f846 2f04 	str.w	r2, [r6, #4]!
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	6992      	ldr	r2, [r2, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	6893      	ldr	r3, [r2, #8]
 8006432:	f845 3f04 	str.w	r3, [r5, #4]!
 8006436:	bf8c      	ite	hi
 8006438:	2301      	movhi	r3, #1
 800643a:	2300      	movls	r3, #0
 800643c:	f801 3b01 	strb.w	r3, [r1], #1
 8006440:	bf8c      	ite	hi
 8006442:	4643      	movhi	r3, r8
 8006444:	2300      	movls	r3, #0
 8006446:	f844 3f04 	str.w	r3, [r4, #4]!
 800644a:	4549      	cmp	r1, r9
 800644c:	d003      	beq.n	8006456 <forward_lstm+0x17a>
 800644e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e2      	bne.n	800641c <forward_lstm+0x140>
 8006456:	f8da 3018 	ldr.w	r3, [sl, #24]
 800645a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800645e:	689d      	ldr	r5, [r3, #8]
 8006460:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8006464:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006468:	6989      	ldr	r1, [r1, #24]
 800646a:	69a4      	ldr	r4, [r4, #24]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	667b      	str	r3, [r7, #100]	; 0x64
 8006470:	688b      	ldr	r3, [r1, #8]
 8006472:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006476:	64bb      	str	r3, [r7, #72]	; 0x48
 8006478:	68a3      	ldr	r3, [r4, #8]
 800647a:	663b      	str	r3, [r7, #96]	; 0x60
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6992      	ldr	r2, [r2, #24]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	6892      	ldr	r2, [r2, #8]
 8006484:	66ba      	str	r2, [r7, #104]	; 0x68
 8006486:	ee19 1a10 	vmov	r1, s18
 800648a:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 800648e:	186a      	adds	r2, r5, r1
 8006490:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8006494:	4421      	add	r1, r4
 8006496:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 800649a:	673d      	str	r5, [r7, #112]	; 0x70
 800649c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80064a0:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80064a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064a8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	f041 8264 	bne.w	800797a <forward_lstm+0x169e>
 80064b2:	4629      	mov	r1, r5
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f001 826e 	beq.w	8007996 <forward_lstm+0x16ba>
 80064ba:	ee19 2a10 	vmov	r2, s18
 80064be:	f001 fcc7 	bl	8007e50 <st_int8_copy>
 80064c2:	ee19 2a10 	vmov	r2, s18
 80064c6:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80064ca:	4648      	mov	r0, r9
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	f001 826f 	beq.w	80079b2 <forward_lstm+0x16d6>
 80064d4:	f001 fcbc 	bl	8007e50 <st_int8_copy>
 80064d8:	ee19 2a10 	vmov	r2, s18
 80064dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80064e0:	2000      	movs	r0, #0
 80064e2:	f001 fc59 	bl	8007d98 <st_int8_fill>
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4bab      	ldr	r3, [pc, #684]	; (8006798 <forward_lstm+0x4bc>)
 80064ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80064ec:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 80064f0:	2900      	cmp	r1, #0
 80064f2:	bf08      	it	eq
 80064f4:	4619      	moveq	r1, r3
 80064f6:	6479      	str	r1, [r7, #68]	; 0x44
 80064f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80064fa:	2900      	cmp	r1, #0
 80064fc:	bf08      	it	eq
 80064fe:	4619      	moveq	r1, r3
 8006500:	67f9      	str	r1, [r7, #124]	; 0x7c
 8006502:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006504:	2900      	cmp	r1, #0
 8006506:	bf08      	it	eq
 8006508:	4619      	moveq	r1, r3
 800650a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800650e:	6439      	str	r1, [r7, #64]	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	f001 8301 	beq.w	8007b18 <forward_lstm+0x183c>
 8006516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006518:	3b01      	subs	r3, #1
 800651a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006524:	4613      	mov	r3, r2
 8006526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800652a:	b1b3      	cbz	r3, 800655a <forward_lstm+0x27e>
 800652c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006530:	899d      	ldrh	r5, [r3, #12]
 8006532:	b195      	cbz	r5, 800655a <forward_lstm+0x27e>
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800653e:	1e5e      	subs	r6, r3, #1
 8006540:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8006544:	6811      	ldr	r1, [r2, #0]
 8006546:	fb03 f406 	mul.w	r4, r3, r6
 800654a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800654e:	f842 1b04 	str.w	r1, [r2], #4
 8006552:	425b      	negs	r3, r3
 8006554:	4295      	cmp	r5, r2
 8006556:	6003      	str	r3, [r0, #0]
 8006558:	d1f2      	bne.n	8006540 <forward_lstm+0x264>
 800655a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800655c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800655e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006562:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 80067a0 <forward_lstm+0x4c4>
 8006566:	b2a9      	uxth	r1, r5
 8006568:	fa1f f288 	uxth.w	r2, r8
 800656c:	f1a1 0310 	sub.w	r3, r1, #16
 8006570:	0096      	lsls	r6, r2, #2
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006578:	3301      	adds	r3, #1
 800657a:	fb06 f101 	mul.w	r1, r6, r1
 800657e:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8006582:	019b      	lsls	r3, r3, #6
 8006584:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8006586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800658a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800658e:	f1a2 0310 	sub.w	r3, r2, #16
 8006592:	fb02 f202 	mul.w	r2, r2, r2
 8006596:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 800659a:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 800659e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80065a0:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 80065aa:	1c5c      	adds	r4, r3, #1
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	01a3      	lsls	r3, r4, #6
 80065b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b8:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 80065bc:	440b      	add	r3, r1
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c2:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80065c6:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 80065ca:	440b      	add	r3, r1
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80065dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
 80065e0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80065e4:	4633      	mov	r3, r6
 80065e6:	1996      	adds	r6, r2, r6
 80065e8:	62fe      	str	r6, [r7, #44]	; 0x2c
 80065ea:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80065ec:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80065f0:	441e      	add	r6, r3
 80065f2:	62be      	str	r6, [r7, #40]	; 0x28
 80065f4:	18e6      	adds	r6, r4, r3
 80065f6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80065f8:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 80065fc:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8006600:	ea04 0600 	and.w	r6, r4, r0
 8006604:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8006608:	ea08 0600 	and.w	r6, r8, r0
 800660c:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8006610:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006614:	0089      	lsls	r1, r1, #2
 8006616:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800661a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800661c:	00ad      	lsls	r5, r5, #2
 800661e:	fb05 f101 	mul.w	r1, r5, r1
 8006622:	61b9      	str	r1, [r7, #24]
 8006624:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006628:	fb05 f501 	mul.w	r5, r5, r1
 800662c:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8006630:	4661      	mov	r1, ip
 8006632:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8006636:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800663a:	61fd      	str	r5, [r7, #28]
 800663c:	4419      	add	r1, r3
 800663e:	6279      	str	r1, [r7, #36]	; 0x24
 8006640:	18d1      	adds	r1, r2, r3
 8006642:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006646:	f008 060f 	and.w	r6, r8, #15
 800664a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006656:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800665a:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800665e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006662:	4413      	add	r3, r2
 8006664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006668:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666c:	4b4b      	ldr	r3, [pc, #300]	; (800679c <forward_lstm+0x4c0>)
 800666e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006672:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8006676:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 800667a:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 800667e:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8006682:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8006686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006688:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006694:	4403      	add	r3, r0
 8006696:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800669a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800669e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066a2:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80066a6:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 80066aa:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 80066ae:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 80066b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80066b6:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80066b8:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 80066bc:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80066c0:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 80066c4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80066c8:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 80066cc:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80066d0:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 80066d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066d8:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 80066dc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80066e0:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 80066e4:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80066e8:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 80066ec:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	f001 81a2 	beq.w	8007a3a <forward_lstm+0x175e>
 80066f6:	6a38      	ldr	r0, [r7, #32]
 80066f8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80066fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006700:	46a9      	mov	r9, r5
 8006702:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8006704:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8006708:	3080      	adds	r0, #128	; 0x80
 800670a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800670c:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8006710:	4410      	add	r0, r2
 8006712:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8006714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006716:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800671a:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 800671e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006722:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8006726:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 800672a:	1955      	adds	r5, r2, r5
 800672c:	469e      	mov	lr, r3
 800672e:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8006732:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8006736:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 800673a:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006742:	442a      	add	r2, r5
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800674a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800675a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006764:	f002 020f 	and.w	r2, r2, #15
 8006768:	46a0      	mov	r8, r4
 800676a:	468c      	mov	ip, r1
 800676c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8006770:	469a      	mov	sl, r3
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006776:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80067a0 <forward_lstm+0x4c4>
 800677a:	ecac 8a01 	vstmia	ip!, {s16}
 800677e:	2b00      	cmp	r3, #0
 8006780:	f001 8154 	beq.w	8007a2c <forward_lstm+0x1750>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800678c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006790:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8006794:	e006      	b.n	80067a4 <forward_lstm+0x4c8>
 8006796:	bf00      	nop
 8006798:	080062c9 	.word	0x080062c9
 800679c:	01821040 	.word	0x01821040
 80067a0:	00000000 	.word	0x00000000
 80067a4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80067a8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80067ac:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80067b0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80067b4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80067b8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80067bc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80067c0:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80067c4:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 80067c8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80067cc:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80067d0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80067d4:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 80067d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80067dc:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80067e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80067e4:	3910      	subs	r1, #16
 80067e6:	290f      	cmp	r1, #15
 80067e8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 80067ec:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80067f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80067f4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80067f8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80067fc:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8006800:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006804:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006808:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800680c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8006810:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006814:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006818:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800681c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006820:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006824:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8006828:	eee3 7a23 	vfma.f32	s15, s6, s7
 800682c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006830:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8006834:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006838:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800683c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8006840:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006844:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006848:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800684c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006850:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006854:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8006858:	eee1 7a21 	vfma.f32	s15, s2, s3
 800685c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006860:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006864:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006868:	eee5 7a25 	vfma.f32	s15, s10, s11
 800686c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006874:	d896      	bhi.n	80067a4 <forward_lstm+0x4c8>
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687a:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 800687e:	4453      	add	r3, sl
 8006880:	2d00      	cmp	r5, #0
 8006882:	d076      	beq.n	8006972 <forward_lstm+0x696>
 8006884:	edd4 6a00 	vldr	s13, [r4]
 8006888:	edd3 7a00 	vldr	s15, [r3]
 800688c:	2d01      	cmp	r5, #1
 800688e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006892:	d06e      	beq.n	8006972 <forward_lstm+0x696>
 8006894:	edd3 6a01 	vldr	s13, [r3, #4]
 8006898:	edd4 7a01 	vldr	s15, [r4, #4]
 800689c:	2d02      	cmp	r5, #2
 800689e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068a2:	d066      	beq.n	8006972 <forward_lstm+0x696>
 80068a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80068a8:	edd4 7a02 	vldr	s15, [r4, #8]
 80068ac:	2d03      	cmp	r5, #3
 80068ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068b2:	d05e      	beq.n	8006972 <forward_lstm+0x696>
 80068b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80068b8:	edd4 7a03 	vldr	s15, [r4, #12]
 80068bc:	2d04      	cmp	r5, #4
 80068be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068c2:	d056      	beq.n	8006972 <forward_lstm+0x696>
 80068c4:	edd3 6a04 	vldr	s13, [r3, #16]
 80068c8:	edd4 7a04 	vldr	s15, [r4, #16]
 80068cc:	2d05      	cmp	r5, #5
 80068ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068d2:	d04e      	beq.n	8006972 <forward_lstm+0x696>
 80068d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80068d8:	edd4 7a05 	vldr	s15, [r4, #20]
 80068dc:	2d06      	cmp	r5, #6
 80068de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068e2:	d046      	beq.n	8006972 <forward_lstm+0x696>
 80068e4:	edd3 6a06 	vldr	s13, [r3, #24]
 80068e8:	edd4 7a06 	vldr	s15, [r4, #24]
 80068ec:	2d07      	cmp	r5, #7
 80068ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068f2:	d03e      	beq.n	8006972 <forward_lstm+0x696>
 80068f4:	edd3 6a07 	vldr	s13, [r3, #28]
 80068f8:	edd4 7a07 	vldr	s15, [r4, #28]
 80068fc:	2d08      	cmp	r5, #8
 80068fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006902:	d036      	beq.n	8006972 <forward_lstm+0x696>
 8006904:	edd3 6a08 	vldr	s13, [r3, #32]
 8006908:	edd4 7a08 	vldr	s15, [r4, #32]
 800690c:	2d09      	cmp	r5, #9
 800690e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006912:	d02e      	beq.n	8006972 <forward_lstm+0x696>
 8006914:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8006918:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800691c:	2d0a      	cmp	r5, #10
 800691e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006922:	d026      	beq.n	8006972 <forward_lstm+0x696>
 8006924:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006928:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800692c:	2d0b      	cmp	r5, #11
 800692e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006932:	d01e      	beq.n	8006972 <forward_lstm+0x696>
 8006934:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006938:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800693c:	2d0c      	cmp	r5, #12
 800693e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006942:	d016      	beq.n	8006972 <forward_lstm+0x696>
 8006944:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8006948:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800694c:	f1b5 020d 	subs.w	r2, r5, #13
 8006950:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006954:	d00d      	beq.n	8006972 <forward_lstm+0x696>
 8006956:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800695a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800695e:	2a01      	cmp	r2, #1
 8006960:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006964:	d005      	beq.n	8006972 <forward_lstm+0x696>
 8006966:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800696a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800696e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006976:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 80067a0 <forward_lstm+0x4c4>
 800697a:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f001 804c 	beq.w	8007a1c <forward_lstm+0x1740>
 8006984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006988:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800698c:	3340      	adds	r3, #64	; 0x40
 800698e:	3240      	adds	r2, #64	; 0x40
 8006990:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8006994:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8006998:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800699c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80069a0:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80069a4:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80069a8:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80069ac:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80069b0:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80069b4:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80069b8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80069bc:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80069c0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80069c4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80069c8:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 80069cc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80069d0:	3340      	adds	r3, #64	; 0x40
 80069d2:	3240      	adds	r2, #64	; 0x40
 80069d4:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 80069d8:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 80069dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80069e0:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 80069e4:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80069e8:	eee4 7a06 	vfma.f32	s15, s8, s12
 80069ec:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80069f0:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 80069f4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80069f8:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80069fc:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006a00:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006a04:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8006a08:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006a0c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006a10:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8006a14:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006a18:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006a1c:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8006a20:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8006a24:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006a28:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8006a2c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006a30:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006a34:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8006a38:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006a3c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006a40:	4298      	cmp	r0, r3
 8006a42:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006a46:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006a4a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006a4e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006a52:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006a56:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006a5a:	d199      	bne.n	8006990 <forward_lstm+0x6b4>
 8006a5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006a64:	189a      	adds	r2, r3, r2
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d078      	beq.n	8006b5c <forward_lstm+0x880>
 8006a6a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006a6e:	4633      	mov	r3, r6
 8006a70:	ed91 6a00 	vldr	s12, [r1]
 8006a74:	edd2 7a00 	vldr	s15, [r2]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a7e:	d06d      	beq.n	8006b5c <forward_lstm+0x880>
 8006a80:	ed91 6a01 	vldr	s12, [r1, #4]
 8006a84:	edd2 7a01 	vldr	s15, [r2, #4]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a8e:	d065      	beq.n	8006b5c <forward_lstm+0x880>
 8006a90:	ed91 6a02 	vldr	s12, [r1, #8]
 8006a94:	edd2 7a02 	vldr	s15, [r2, #8]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a9e:	d05d      	beq.n	8006b5c <forward_lstm+0x880>
 8006aa0:	ed91 6a03 	vldr	s12, [r1, #12]
 8006aa4:	edd2 7a03 	vldr	s15, [r2, #12]
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006aae:	d055      	beq.n	8006b5c <forward_lstm+0x880>
 8006ab0:	ed91 6a04 	vldr	s12, [r1, #16]
 8006ab4:	edd2 7a04 	vldr	s15, [r2, #16]
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006abe:	d04d      	beq.n	8006b5c <forward_lstm+0x880>
 8006ac0:	ed91 6a05 	vldr	s12, [r1, #20]
 8006ac4:	edd2 7a05 	vldr	s15, [r2, #20]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ace:	d045      	beq.n	8006b5c <forward_lstm+0x880>
 8006ad0:	ed91 6a06 	vldr	s12, [r1, #24]
 8006ad4:	edd2 7a06 	vldr	s15, [r2, #24]
 8006ad8:	2b07      	cmp	r3, #7
 8006ada:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ade:	d03d      	beq.n	8006b5c <forward_lstm+0x880>
 8006ae0:	ed91 6a07 	vldr	s12, [r1, #28]
 8006ae4:	edd2 7a07 	vldr	s15, [r2, #28]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006aee:	d035      	beq.n	8006b5c <forward_lstm+0x880>
 8006af0:	ed91 6a08 	vldr	s12, [r1, #32]
 8006af4:	edd2 7a08 	vldr	s15, [r2, #32]
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006afe:	d02d      	beq.n	8006b5c <forward_lstm+0x880>
 8006b00:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8006b04:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006b08:	2b0a      	cmp	r3, #10
 8006b0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b0e:	d025      	beq.n	8006b5c <forward_lstm+0x880>
 8006b10:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8006b14:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006b18:	2b0b      	cmp	r3, #11
 8006b1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b1e:	d01d      	beq.n	8006b5c <forward_lstm+0x880>
 8006b20:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8006b24:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006b28:	2b0c      	cmp	r3, #12
 8006b2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b2e:	d015      	beq.n	8006b5c <forward_lstm+0x880>
 8006b30:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8006b34:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006b38:	3b0d      	subs	r3, #13
 8006b3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b3e:	d00d      	beq.n	8006b5c <forward_lstm+0x880>
 8006b40:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8006b44:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b4e:	d005      	beq.n	8006b5c <forward_lstm+0x880>
 8006b50:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8006b54:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006b58:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b60:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8006b64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006b68:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8006b6c:	ecb3 6a01 	vldmia	r3!, {s12}
 8006b70:	edd9 6a00 	vldr	s13, [r9]
 8006b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7c:	ecf3 7a01 	vldmia	r3!, {s15}
 8006b80:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b90:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8006b94:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8006e84 <forward_lstm+0xba8>
 8006b98:	ed88 8a00 	vstr	s16, [r8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8739 	beq.w	8007a14 <forward_lstm+0x1738>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006baa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006bae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bb2:	3340      	adds	r3, #64	; 0x40
 8006bb4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006bb8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006bbc:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006bc0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006bc4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006bc8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8006bcc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006bd0:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006bd4:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006bd8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006bdc:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006be0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006be4:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006be8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006bec:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8006bf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006bf4:	3910      	subs	r1, #16
 8006bf6:	290f      	cmp	r1, #15
 8006bf8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8006bfc:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8006c00:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006c04:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006c08:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006c0c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8006c10:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006c14:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006c18:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8006c1c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8006c20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c24:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006c28:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8006c2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c30:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006c34:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8006c38:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c3c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006c40:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8006c44:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c48:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8006c4c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8006c50:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c54:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006c58:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8006c5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c60:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006c64:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8006c68:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006c6c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006c70:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c74:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c84:	d896      	bhi.n	8006bb4 <forward_lstm+0x8d8>
 8006c86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c8a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006c8e:	4413      	add	r3, r2
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d076      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006c94:	edd4 6a00 	vldr	s13, [r4]
 8006c98:	edd3 7a00 	vldr	s15, [r3]
 8006c9c:	2d01      	cmp	r5, #1
 8006c9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ca2:	d06e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006ca4:	edd4 6a01 	vldr	s13, [r4, #4]
 8006ca8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cac:	2d02      	cmp	r5, #2
 8006cae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006cb2:	d066      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006cb4:	edd4 6a02 	vldr	s13, [r4, #8]
 8006cb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8006cbc:	2d03      	cmp	r5, #3
 8006cbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006cc2:	d05e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006cc4:	edd4 6a03 	vldr	s13, [r4, #12]
 8006cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ccc:	2d04      	cmp	r5, #4
 8006cce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006cd2:	d056      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006cd4:	edd4 6a04 	vldr	s13, [r4, #16]
 8006cd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cdc:	2d05      	cmp	r5, #5
 8006cde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ce2:	d04e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006ce4:	edd4 6a05 	vldr	s13, [r4, #20]
 8006ce8:	edd3 7a05 	vldr	s15, [r3, #20]
 8006cec:	2d06      	cmp	r5, #6
 8006cee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006cf2:	d046      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006cf4:	edd4 6a06 	vldr	s13, [r4, #24]
 8006cf8:	edd3 7a06 	vldr	s15, [r3, #24]
 8006cfc:	2d07      	cmp	r5, #7
 8006cfe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d02:	d03e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d04:	edd4 6a07 	vldr	s13, [r4, #28]
 8006d08:	edd3 7a07 	vldr	s15, [r3, #28]
 8006d0c:	2d08      	cmp	r5, #8
 8006d0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d12:	d036      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d14:	edd4 6a08 	vldr	s13, [r4, #32]
 8006d18:	edd3 7a08 	vldr	s15, [r3, #32]
 8006d1c:	2d09      	cmp	r5, #9
 8006d1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d22:	d02e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d24:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8006d28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006d2c:	2d0a      	cmp	r5, #10
 8006d2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d32:	d026      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d34:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8006d38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006d3c:	2d0b      	cmp	r5, #11
 8006d3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d42:	d01e      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d44:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8006d48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006d4c:	2d0c      	cmp	r5, #12
 8006d4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d52:	d016      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d54:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8006d58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d5c:	f1b5 020d 	subs.w	r2, r5, #13
 8006d60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d64:	d00d      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d66:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8006d6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d6e:	2a01      	cmp	r2, #1
 8006d70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d74:	d005      	beq.n	8006d82 <forward_lstm+0xaa6>
 8006d76:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8006d7a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8006d7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d86:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8006e84 <forward_lstm+0xba8>
 8006d8a:	ed88 7a00 	vstr	s14, [r8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8638 	beq.w	8007a04 <forward_lstm+0x1728>
 8006d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006d9c:	3340      	adds	r3, #64	; 0x40
 8006d9e:	3240      	adds	r2, #64	; 0x40
 8006da0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8006da4:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8006da8:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8006dac:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006db0:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8006db4:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8006db8:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8006dbc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006dc0:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8006dc4:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8006dc8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006dcc:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8006dd0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006dd4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006dd8:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8006ddc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006de0:	3340      	adds	r3, #64	; 0x40
 8006de2:	3240      	adds	r2, #64	; 0x40
 8006de4:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8006de8:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8006dec:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006df0:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8006df4:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8006df8:	eee4 7a06 	vfma.f32	s15, s8, s12
 8006dfc:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006e00:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8006e04:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e08:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8006e0c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006e10:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006e14:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8006e18:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006e1c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006e20:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8006e24:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006e28:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006e2c:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8006e30:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8006e34:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e38:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8006e3c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006e40:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006e44:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8006e48:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006e4c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006e50:	4283      	cmp	r3, r0
 8006e52:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006e56:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006e5a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006e5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e62:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006e66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006e6a:	d199      	bne.n	8006da0 <forward_lstm+0xac4>
 8006e6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e70:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006e74:	189a      	adds	r2, r3, r2
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	d07c      	beq.n	8006f74 <forward_lstm+0xc98>
 8006e7a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006e7e:	4633      	mov	r3, r6
 8006e80:	e002      	b.n	8006e88 <forward_lstm+0xbac>
 8006e82:	bf00      	nop
 8006e84:	00000000 	.word	0x00000000
 8006e88:	ed91 6a00 	vldr	s12, [r1]
 8006e8c:	edd2 7a00 	vldr	s15, [r2]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006e96:	d06d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006e98:	ed91 6a01 	vldr	s12, [r1, #4]
 8006e9c:	edd2 7a01 	vldr	s15, [r2, #4]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ea6:	d065      	beq.n	8006f74 <forward_lstm+0xc98>
 8006ea8:	ed91 6a02 	vldr	s12, [r1, #8]
 8006eac:	edd2 7a02 	vldr	s15, [r2, #8]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006eb6:	d05d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006eb8:	ed91 6a03 	vldr	s12, [r1, #12]
 8006ebc:	edd2 7a03 	vldr	s15, [r2, #12]
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ec6:	d055      	beq.n	8006f74 <forward_lstm+0xc98>
 8006ec8:	ed91 6a04 	vldr	s12, [r1, #16]
 8006ecc:	edd2 7a04 	vldr	s15, [r2, #16]
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ed6:	d04d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006ed8:	ed91 6a05 	vldr	s12, [r1, #20]
 8006edc:	edd2 7a05 	vldr	s15, [r2, #20]
 8006ee0:	2b06      	cmp	r3, #6
 8006ee2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ee6:	d045      	beq.n	8006f74 <forward_lstm+0xc98>
 8006ee8:	ed91 6a06 	vldr	s12, [r1, #24]
 8006eec:	edd2 7a06 	vldr	s15, [r2, #24]
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ef6:	d03d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006ef8:	ed91 6a07 	vldr	s12, [r1, #28]
 8006efc:	edd2 7a07 	vldr	s15, [r2, #28]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f06:	d035      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f08:	ed91 6a08 	vldr	s12, [r1, #32]
 8006f0c:	edd2 7a08 	vldr	s15, [r2, #32]
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f16:	d02d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f18:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8006f1c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006f20:	2b0a      	cmp	r3, #10
 8006f22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f26:	d025      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f28:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8006f2c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006f30:	2b0b      	cmp	r3, #11
 8006f32:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f36:	d01d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f38:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8006f3c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f46:	d015      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f48:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8006f4c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006f50:	3b0d      	subs	r3, #13
 8006f52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f56:	d00d      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f58:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8006f5c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f66:	d005      	beq.n	8006f74 <forward_lstm+0xc98>
 8006f68:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8006f6c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006f70:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f78:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006f7c:	f109 0904 	add.w	r9, r9, #4
 8006f80:	ed88 7a00 	vstr	s14, [r8]
 8006f84:	edd3 7a00 	vldr	s15, [r3]
 8006f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f8c:	ecb3 6a01 	vldmia	r3!, {s12}
 8006f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f98:	ecf3 6a01 	vldmia	r3!, {s13}
 8006f9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006fac:	eca8 7a01 	vstmia	r8!, {s14}
 8006fb0:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8006e84 <forward_lstm+0xba8>
 8006fb4:	ed8e 8a00 	vstr	s16, [lr]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 851f 	beq.w	80079fc <forward_lstm+0x1720>
 8006fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006fc6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	3340      	adds	r3, #64	; 0x40
 8006fd0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006fd4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006fd8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006fdc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006fe0:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006fe4:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8006fe8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006fec:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006ff0:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006ff4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006ff8:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006ffc:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007000:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007004:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007008:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800700c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007010:	3910      	subs	r1, #16
 8007012:	290f      	cmp	r1, #15
 8007014:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007018:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800701c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007020:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007024:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007028:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800702c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007030:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007034:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007038:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800703c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007040:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007044:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007048:	eee6 7a26 	vfma.f32	s15, s12, s13
 800704c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007050:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007054:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007058:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800705c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007060:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007064:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007068:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800706c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007070:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007074:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007078:	eee6 7a26 	vfma.f32	s15, s12, s13
 800707c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007080:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007084:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007088:	eee2 7a22 	vfma.f32	s15, s4, s5
 800708c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007090:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007094:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007098:	eee6 7a26 	vfma.f32	s15, s12, s13
 800709c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070a0:	d896      	bhi.n	8006fd0 <forward_lstm+0xcf4>
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80070aa:	4413      	add	r3, r2
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	d076      	beq.n	800719e <forward_lstm+0xec2>
 80070b0:	edd4 6a00 	vldr	s13, [r4]
 80070b4:	edd3 7a00 	vldr	s15, [r3]
 80070b8:	2d01      	cmp	r5, #1
 80070ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070be:	d06e      	beq.n	800719e <forward_lstm+0xec2>
 80070c0:	edd4 6a01 	vldr	s13, [r4, #4]
 80070c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80070c8:	2d02      	cmp	r5, #2
 80070ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070ce:	d066      	beq.n	800719e <forward_lstm+0xec2>
 80070d0:	edd4 6a02 	vldr	s13, [r4, #8]
 80070d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80070d8:	2d03      	cmp	r5, #3
 80070da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070de:	d05e      	beq.n	800719e <forward_lstm+0xec2>
 80070e0:	edd4 6a03 	vldr	s13, [r4, #12]
 80070e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80070e8:	2d04      	cmp	r5, #4
 80070ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070ee:	d056      	beq.n	800719e <forward_lstm+0xec2>
 80070f0:	edd4 6a04 	vldr	s13, [r4, #16]
 80070f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80070f8:	2d05      	cmp	r5, #5
 80070fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070fe:	d04e      	beq.n	800719e <forward_lstm+0xec2>
 8007100:	edd4 6a05 	vldr	s13, [r4, #20]
 8007104:	edd3 7a05 	vldr	s15, [r3, #20]
 8007108:	2d06      	cmp	r5, #6
 800710a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800710e:	d046      	beq.n	800719e <forward_lstm+0xec2>
 8007110:	edd4 6a06 	vldr	s13, [r4, #24]
 8007114:	edd3 7a06 	vldr	s15, [r3, #24]
 8007118:	2d07      	cmp	r5, #7
 800711a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800711e:	d03e      	beq.n	800719e <forward_lstm+0xec2>
 8007120:	edd4 6a07 	vldr	s13, [r4, #28]
 8007124:	edd3 7a07 	vldr	s15, [r3, #28]
 8007128:	2d08      	cmp	r5, #8
 800712a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800712e:	d036      	beq.n	800719e <forward_lstm+0xec2>
 8007130:	edd4 6a08 	vldr	s13, [r4, #32]
 8007134:	edd3 7a08 	vldr	s15, [r3, #32]
 8007138:	2d09      	cmp	r5, #9
 800713a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800713e:	d02e      	beq.n	800719e <forward_lstm+0xec2>
 8007140:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8007144:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007148:	2d0a      	cmp	r5, #10
 800714a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800714e:	d026      	beq.n	800719e <forward_lstm+0xec2>
 8007150:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8007154:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007158:	2d0b      	cmp	r5, #11
 800715a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800715e:	d01e      	beq.n	800719e <forward_lstm+0xec2>
 8007160:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8007164:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007168:	2d0c      	cmp	r5, #12
 800716a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800716e:	d016      	beq.n	800719e <forward_lstm+0xec2>
 8007170:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007174:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007178:	f1b5 020d 	subs.w	r2, r5, #13
 800717c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007180:	d00d      	beq.n	800719e <forward_lstm+0xec2>
 8007182:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8007186:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800718a:	2a01      	cmp	r2, #1
 800718c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007190:	d005      	beq.n	800719e <forward_lstm+0xec2>
 8007192:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8007196:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800719a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800719e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071a2:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8006e84 <forward_lstm+0xba8>
 80071a6:	ed8e 7a00 	vstr	s14, [lr]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8420 	beq.w	80079f0 <forward_lstm+0x1714>
 80071b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b4:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 80071b8:	3340      	adds	r3, #64	; 0x40
 80071ba:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80071be:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80071c2:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80071c6:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80071ca:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80071ce:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80071d2:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80071d6:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80071da:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80071de:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80071e2:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80071e6:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80071ea:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80071ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80071f2:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 80071f6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80071fa:	3340      	adds	r3, #64	; 0x40
 80071fc:	3240      	adds	r2, #64	; 0x40
 80071fe:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007202:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007206:	eee5 7a25 	vfma.f32	s15, s10, s11
 800720a:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 800720e:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007212:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007216:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800721a:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 800721e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007222:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007226:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800722a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800722e:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007232:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007236:	eee2 7a83 	vfma.f32	s15, s5, s6
 800723a:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800723e:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007242:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007246:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800724a:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800724e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007252:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8007256:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800725a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800725e:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007262:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007266:	eee0 7a81 	vfma.f32	s15, s1, s2
 800726a:	4283      	cmp	r3, r0
 800726c:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007270:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007274:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007278:	eee4 7a85 	vfma.f32	s15, s9, s10
 800727c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007280:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007284:	d199      	bne.n	80071ba <forward_lstm+0xede>
 8007286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728a:	eb0b 0203 	add.w	r2, fp, r3
 800728e:	2e00      	cmp	r6, #0
 8007290:	d078      	beq.n	8007384 <forward_lstm+0x10a8>
 8007292:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007296:	4633      	mov	r3, r6
 8007298:	ed91 6a00 	vldr	s12, [r1]
 800729c:	edd2 7a00 	vldr	s15, [r2]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072a6:	d06d      	beq.n	8007384 <forward_lstm+0x10a8>
 80072a8:	ed91 6a01 	vldr	s12, [r1, #4]
 80072ac:	edd2 7a01 	vldr	s15, [r2, #4]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072b6:	d065      	beq.n	8007384 <forward_lstm+0x10a8>
 80072b8:	ed91 6a02 	vldr	s12, [r1, #8]
 80072bc:	edd2 7a02 	vldr	s15, [r2, #8]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072c6:	d05d      	beq.n	8007384 <forward_lstm+0x10a8>
 80072c8:	ed91 6a03 	vldr	s12, [r1, #12]
 80072cc:	edd2 7a03 	vldr	s15, [r2, #12]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072d6:	d055      	beq.n	8007384 <forward_lstm+0x10a8>
 80072d8:	ed91 6a04 	vldr	s12, [r1, #16]
 80072dc:	edd2 7a04 	vldr	s15, [r2, #16]
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072e6:	d04d      	beq.n	8007384 <forward_lstm+0x10a8>
 80072e8:	ed91 6a05 	vldr	s12, [r1, #20]
 80072ec:	edd2 7a05 	vldr	s15, [r2, #20]
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072f6:	d045      	beq.n	8007384 <forward_lstm+0x10a8>
 80072f8:	ed91 6a06 	vldr	s12, [r1, #24]
 80072fc:	edd2 7a06 	vldr	s15, [r2, #24]
 8007300:	2b07      	cmp	r3, #7
 8007302:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007306:	d03d      	beq.n	8007384 <forward_lstm+0x10a8>
 8007308:	ed91 6a07 	vldr	s12, [r1, #28]
 800730c:	edd2 7a07 	vldr	s15, [r2, #28]
 8007310:	2b08      	cmp	r3, #8
 8007312:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007316:	d035      	beq.n	8007384 <forward_lstm+0x10a8>
 8007318:	ed91 6a08 	vldr	s12, [r1, #32]
 800731c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007320:	2b09      	cmp	r3, #9
 8007322:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007326:	d02d      	beq.n	8007384 <forward_lstm+0x10a8>
 8007328:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800732c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007330:	2b0a      	cmp	r3, #10
 8007332:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007336:	d025      	beq.n	8007384 <forward_lstm+0x10a8>
 8007338:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800733c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007340:	2b0b      	cmp	r3, #11
 8007342:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007346:	d01d      	beq.n	8007384 <forward_lstm+0x10a8>
 8007348:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800734c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007350:	2b0c      	cmp	r3, #12
 8007352:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007356:	d015      	beq.n	8007384 <forward_lstm+0x10a8>
 8007358:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800735c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007360:	3b0d      	subs	r3, #13
 8007362:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007366:	d00d      	beq.n	8007384 <forward_lstm+0x10a8>
 8007368:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800736c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007370:	2b01      	cmp	r3, #1
 8007372:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007376:	d005      	beq.n	8007384 <forward_lstm+0x10a8>
 8007378:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800737c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007380:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007384:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007388:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800738c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007390:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007394:	449a      	add	sl, r3
 8007396:	ed8e 7a00 	vstr	s14, [lr]
 800739a:	ecf2 7a01 	vldmia	r2!, {s15}
 800739e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073a6:	4411      	add	r1, r2
 80073a8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80073ac:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80073b0:	4419      	add	r1, r3
 80073b2:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80073b6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80073ba:	4411      	add	r1, r2
 80073bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c0:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80073c4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80073c8:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80073cc:	4419      	add	r1, r3
 80073ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073d2:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	bf88      	it	hi
 80073dc:	eeb0 7a68 	vmovhi.f32	s14, s17
 80073e0:	4563      	cmp	r3, ip
 80073e2:	ecae 7a01 	vstmia	lr!, {s14}
 80073e6:	4493      	add	fp, r2
 80073e8:	f47f a9c3 	bne.w	8006772 <forward_lstm+0x496>
 80073ec:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 80073f0:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 80073f4:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80073f8:	4642      	mov	r2, r8
 80073fa:	4608      	mov	r0, r1
 80073fc:	ee19 3a90 	vmov	r3, s19
 8007400:	46a3      	mov	fp, r4
 8007402:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8007404:	47a0      	blx	r4
 8007406:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800740a:	4642      	mov	r2, r8
 800740c:	4608      	mov	r0, r1
 800740e:	ee19 3a90 	vmov	r3, s19
 8007412:	47a0      	blx	r4
 8007414:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8007418:	4642      	mov	r2, r8
 800741a:	4608      	mov	r0, r1
 800741c:	ee1a 3a90 	vmov	r3, s21
 8007420:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007422:	47a0      	blx	r4
 8007424:	1e6a      	subs	r2, r5, #1
 8007426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800742a:	1eaa      	subs	r2, r5, #2
 800742c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8007430:	1eea      	subs	r2, r5, #3
 8007432:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007436:	1f2a      	subs	r2, r5, #4
 8007438:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800743c:	1f6a      	subs	r2, r5, #5
 800743e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007442:	1faa      	subs	r2, r5, #6
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800744a:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 800744e:	1fea      	subs	r2, r5, #7
 8007450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007454:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8007458:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 800745c:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8007460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007462:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 8007466:	f1a5 0208 	sub.w	r2, r5, #8
 800746a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800746e:	465c      	mov	r4, fp
 8007470:	461e      	mov	r6, r3
 8007472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007476:	ecf8 7a01 	vldmia	r8!, {s15}
 800747a:	ecb3 6a01 	vldmia	r3!, {s12}
 800747e:	ed9a 7a00 	vldr	s14, [sl]
 8007482:	ecfe 6a01 	vldmia	lr!, {s13}
 8007486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800748a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007496:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80077b4 <forward_lstm+0x14d8>
 800749a:	ecea 7a01 	vstmia	sl!, {s15}
 800749e:	eca1 8a01 	vstmia	r1!, {s16}
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 82a2 	beq.w	80079ec <forward_lstm+0x1710>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ac:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 80074b0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80074b4:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80074b8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80074bc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80074c0:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80074c4:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80074c8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80074cc:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80074d0:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80074d4:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80074d8:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 80074dc:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80074e0:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80074e4:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80074e8:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 80074ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80074f0:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80074f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074f8:	f1ab 0b10 	sub.w	fp, fp, #16
 80074fc:	f1bb 0f0f 	cmp.w	fp, #15
 8007500:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007504:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007508:	eee5 7a86 	vfma.f32	s15, s11, s12
 800750c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007510:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007514:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007518:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800751c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007520:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007524:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007528:	eee5 7a25 	vfma.f32	s15, s10, s11
 800752c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007530:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007534:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007538:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800753c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007540:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007544:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007548:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800754c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007550:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007554:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007558:	eee5 7a25 	vfma.f32	s15, s10, s11
 800755c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007560:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007564:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007568:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800756c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007570:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007574:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007578:	eee3 7a23 	vfma.f32	s15, s6, s7
 800757c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007580:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007584:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800758c:	d894      	bhi.n	80074b8 <forward_lstm+0x11dc>
 800758e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007592:	18c3      	adds	r3, r0, r3
 8007594:	2d00      	cmp	r5, #0
 8007596:	f000 8085 	beq.w	80076a4 <forward_lstm+0x13c8>
 800759a:	edd4 6a00 	vldr	s13, [r4]
 800759e:	edd3 7a00 	vldr	s15, [r3]
 80075a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80075a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d07a      	beq.n	80076a4 <forward_lstm+0x13c8>
 80075ae:	edd4 6a01 	vldr	s13, [r4, #4]
 80075b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80075b6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80075ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075be:	2a00      	cmp	r2, #0
 80075c0:	d070      	beq.n	80076a4 <forward_lstm+0x13c8>
 80075c2:	edd4 6a02 	vldr	s13, [r4, #8]
 80075c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80075ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d066      	beq.n	80076a4 <forward_lstm+0x13c8>
 80075d6:	edd4 6a03 	vldr	s13, [r4, #12]
 80075da:	edd3 7a03 	vldr	s15, [r3, #12]
 80075de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d05c      	beq.n	80076a4 <forward_lstm+0x13c8>
 80075ea:	edd4 6a04 	vldr	s13, [r4, #16]
 80075ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80075f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d052      	beq.n	80076a4 <forward_lstm+0x13c8>
 80075fe:	edd4 6a05 	vldr	s13, [r4, #20]
 8007602:	edd3 7a05 	vldr	s15, [r3, #20]
 8007606:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800760a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800760e:	2a00      	cmp	r2, #0
 8007610:	d048      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007612:	edd4 6a06 	vldr	s13, [r4, #24]
 8007616:	edd3 7a06 	vldr	s15, [r3, #24]
 800761a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800761e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007622:	b3fa      	cbz	r2, 80076a4 <forward_lstm+0x13c8>
 8007624:	edd4 6a07 	vldr	s13, [r4, #28]
 8007628:	edd3 7a07 	vldr	s15, [r3, #28]
 800762c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007630:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007634:	b3b2      	cbz	r2, 80076a4 <forward_lstm+0x13c8>
 8007636:	edd4 6a08 	vldr	s13, [r4, #32]
 800763a:	edd3 7a08 	vldr	s15, [r3, #32]
 800763e:	2d09      	cmp	r5, #9
 8007640:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007644:	d02e      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007646:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800764a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800764e:	2d0a      	cmp	r5, #10
 8007650:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007654:	d026      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007656:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800765a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800765e:	2d0b      	cmp	r5, #11
 8007660:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007664:	d01e      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007666:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800766a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800766e:	2d0c      	cmp	r5, #12
 8007670:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007674:	d016      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007676:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800767a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800767e:	f1b5 020d 	subs.w	r2, r5, #13
 8007682:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007686:	d00d      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007688:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800768c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007690:	2a01      	cmp	r2, #1
 8007692:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007696:	d005      	beq.n	80076a4 <forward_lstm+0x13c8>
 8007698:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800769c:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80076a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076a8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80077b4 <forward_lstm+0x14d8>
 80076ac:	ed01 7a01 	vstr	s14, [r1, #-4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8195 	beq.w	80079e0 <forward_lstm+0x1704>
 80076b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ba:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 80076be:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80076c2:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 80076c6:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 80076ca:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80076ce:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 80076d2:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 80076d6:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 80076da:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 80076de:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 80076e2:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 80076e6:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 80076ea:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 80076ee:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 80076f2:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 80076f6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80076fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80076fe:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8007702:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007706:	f1ab 0b10 	sub.w	fp, fp, #16
 800770a:	f1bb 0f0f 	cmp.w	fp, #15
 800770e:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8007712:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8007716:	eee5 7a25 	vfma.f32	s15, s10, s11
 800771a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800771e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007722:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8007726:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 800772a:	eee4 7a06 	vfma.f32	s15, s8, s12
 800772e:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8007732:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8007736:	eee4 7a85 	vfma.f32	s15, s9, s10
 800773a:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 800773e:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8007742:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007746:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 800774a:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 800774e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007752:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8007756:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800775a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800775e:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8007762:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8007766:	eee4 7a85 	vfma.f32	s15, s9, s10
 800776a:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800776e:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8007772:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007776:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800777a:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800777e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007782:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007786:	eee2 7a83 	vfma.f32	s15, s5, s6
 800778a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800778e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007792:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007796:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800779a:	d894      	bhi.n	80076c6 <forward_lstm+0x13ea>
 800779c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077a0:	eb0c 0203 	add.w	r2, ip, r3
 80077a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d07b      	beq.n	80078a4 <forward_lstm+0x15c8>
 80077ac:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 80077b0:	e002      	b.n	80077b8 <forward_lstm+0x14dc>
 80077b2:	bf00      	nop
 80077b4:	00000000 	.word	0x00000000
 80077b8:	ed9b 6a00 	vldr	s12, [fp]
 80077bc:	edd2 7a00 	vldr	s15, [r2]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077c6:	d06d      	beq.n	80078a4 <forward_lstm+0x15c8>
 80077c8:	ed9b 6a01 	vldr	s12, [fp, #4]
 80077cc:	edd2 7a01 	vldr	s15, [r2, #4]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077d6:	d065      	beq.n	80078a4 <forward_lstm+0x15c8>
 80077d8:	ed9b 6a02 	vldr	s12, [fp, #8]
 80077dc:	edd2 7a02 	vldr	s15, [r2, #8]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077e6:	d05d      	beq.n	80078a4 <forward_lstm+0x15c8>
 80077e8:	ed9b 6a03 	vldr	s12, [fp, #12]
 80077ec:	edd2 7a03 	vldr	s15, [r2, #12]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077f6:	d055      	beq.n	80078a4 <forward_lstm+0x15c8>
 80077f8:	ed9b 6a04 	vldr	s12, [fp, #16]
 80077fc:	edd2 7a04 	vldr	s15, [r2, #16]
 8007800:	2b05      	cmp	r3, #5
 8007802:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007806:	d04d      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007808:	ed9b 6a05 	vldr	s12, [fp, #20]
 800780c:	edd2 7a05 	vldr	s15, [r2, #20]
 8007810:	2b06      	cmp	r3, #6
 8007812:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007816:	d045      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007818:	ed9b 6a06 	vldr	s12, [fp, #24]
 800781c:	edd2 7a06 	vldr	s15, [r2, #24]
 8007820:	2b07      	cmp	r3, #7
 8007822:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007826:	d03d      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007828:	ed9b 6a07 	vldr	s12, [fp, #28]
 800782c:	edd2 7a07 	vldr	s15, [r2, #28]
 8007830:	2b08      	cmp	r3, #8
 8007832:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007836:	d035      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007838:	ed9b 6a08 	vldr	s12, [fp, #32]
 800783c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007840:	2b09      	cmp	r3, #9
 8007842:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007846:	d02d      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007848:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 800784c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007850:	2b0a      	cmp	r3, #10
 8007852:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007856:	d025      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007858:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 800785c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007860:	2b0b      	cmp	r3, #11
 8007862:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007866:	d01d      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007868:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 800786c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007870:	2b0c      	cmp	r3, #12
 8007872:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007876:	d015      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007878:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 800787c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007880:	3b0d      	subs	r3, #13
 8007882:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007886:	d00d      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007888:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 800788c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007890:	2b01      	cmp	r3, #1
 8007892:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007896:	d005      	beq.n	80078a4 <forward_lstm+0x15c8>
 8007898:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 800789c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80078a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80078a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80078ac:	4418      	add	r0, r3
 80078ae:	ed01 7a01 	vstr	s14, [r1, #-4]
 80078b2:	ecb6 6a01 	vldmia	r6!, {s12}
 80078b6:	ecf9 7a01 	vldmia	r9!, {s15}
 80078ba:	ed5a 6a01 	vldr	s13, [sl, #-4]
 80078be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078c6:	449c      	add	ip, r3
 80078c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d0:	459e      	cmp	lr, r3
 80078d2:	ed01 7a01 	vstr	s14, [r1, #-4]
 80078d6:	f47f adcc 	bne.w	8007472 <forward_lstm+0x1196>
 80078da:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80078de:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80078e0:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 80078e4:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 80078e8:	4608      	mov	r0, r1
 80078ea:	ee19 3a90 	vmov	r3, s19
 80078ee:	462a      	mov	r2, r5
 80078f0:	47a0      	blx	r4
 80078f2:	ee1a 3a10 	vmov	r3, s20
 80078f6:	462a      	mov	r2, r5
 80078f8:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80078fc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80078fe:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8007902:	47a0      	blx	r4
 8007904:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790c:	6979      	ldr	r1, [r7, #20]
 800790e:	ecf3 7a01 	vldmia	r3!, {s15}
 8007912:	ed92 7a00 	vldr	s14, [r2]
 8007916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800791a:	428b      	cmp	r3, r1
 800791c:	ece2 7a01 	vstmia	r2!, {s15}
 8007920:	d1f5      	bne.n	800790e <forward_lstm+0x1632>
 8007922:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007926:	899b      	ldrh	r3, [r3, #12]
 8007928:	b163      	cbz	r3, 8007944 <forward_lstm+0x1668>
 800792a:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 800792e:	2400      	movs	r4, #0
 8007930:	46a8      	mov	r8, r5
 8007932:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8007936:	3401      	adds	r4, #1
 8007938:	2d00      	cmp	r5, #0
 800793a:	d13e      	bne.n	80079ba <forward_lstm+0x16de>
 800793c:	42a3      	cmp	r3, r4
 800793e:	f108 0804 	add.w	r8, r8, #4
 8007942:	dcf6      	bgt.n	8007932 <forward_lstm+0x1656>
 8007944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007946:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800794a:	428a      	cmp	r2, r1
 800794c:	f340 809d 	ble.w	8007a8a <forward_lstm+0x17ae>
 8007950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007954:	69b9      	ldr	r1, [r7, #24]
 8007956:	440a      	add	r2, r1
 8007958:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800795c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007960:	2a00      	cmp	r2, #0
 8007962:	f2c0 8092 	blt.w	8007a8a <forward_lstm+0x17ae>
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800796e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007976:	f7fe be6b 	b.w	8006650 <forward_lstm+0x374>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4629      	mov	r1, r5
 800797e:	69d8      	ldr	r0, [r3, #28]
 8007980:	f000 fa66 	bl	8007e50 <st_int8_copy>
 8007984:	ee19 2a10 	vmov	r2, s18
 8007988:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800798c:	2000      	movs	r0, #0
 800798e:	f000 fa03 	bl	8007d98 <st_int8_fill>
 8007992:	f7fe bda8 	b.w	80064e6 <forward_lstm+0x20a>
 8007996:	ee19 2a10 	vmov	r2, s18
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f9fc 	bl	8007d98 <st_int8_fill>
 80079a0:	ee19 2a10 	vmov	r2, s18
 80079a4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80079a8:	4648      	mov	r0, r9
 80079aa:	f1b9 0f00 	cmp.w	r9, #0
 80079ae:	f47e ad91 	bne.w	80064d4 <forward_lstm+0x1f8>
 80079b2:	f000 f9f1 	bl	8007d98 <st_int8_fill>
 80079b6:	f7fe bd8f 	b.w	80064d8 <forward_lstm+0x1fc>
 80079ba:	f8d8 a000 	ldr.w	sl, [r8]
 80079be:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80079c2:	ee19 2a10 	vmov	r2, s18
 80079c6:	4651      	mov	r1, sl
 80079c8:	f000 fa42 	bl	8007e50 <st_int8_copy>
 80079cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d0:	899b      	ldrh	r3, [r3, #12]
 80079d2:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	f848 5b04 	str.w	r5, [r8], #4
 80079dc:	dca9      	bgt.n	8007932 <forward_lstm+0x1656>
 80079de:	e7b1      	b.n	8007944 <forward_lstm+0x1668>
 80079e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079e4:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 80079e8:	4662      	mov	r2, ip
 80079ea:	e6e5      	b.n	80077b8 <forward_lstm+0x14dc>
 80079ec:	4603      	mov	r3, r0
 80079ee:	e5d1      	b.n	8007594 <forward_lstm+0x12b8>
 80079f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079f4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80079f8:	465a      	mov	r2, fp
 80079fa:	e44d      	b.n	8007298 <forward_lstm+0xfbc>
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f7ff bb54 	b.w	80070ac <forward_lstm+0xdd0>
 8007a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a08:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8007a0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007a10:	f7ff ba3a 	b.w	8006e88 <forward_lstm+0xbac>
 8007a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a18:	f7ff b93a 	b.w	8006c90 <forward_lstm+0x9b4>
 8007a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a20:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8007a24:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007a28:	f7ff b822 	b.w	8006a70 <forward_lstm+0x794>
 8007a2c:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8007a30:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8007a34:	4653      	mov	r3, sl
 8007a36:	f7fe bf23 	b.w	8006880 <forward_lstm+0x5a4>
 8007a3a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8007a3e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8007a40:	ee19 3a90 	vmov	r3, s19
 8007a44:	4608      	mov	r0, r1
 8007a46:	4690      	mov	r8, r2
 8007a48:	47a0      	blx	r4
 8007a4a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8007a4e:	ee19 3a90 	vmov	r3, s19
 8007a52:	4642      	mov	r2, r8
 8007a54:	4608      	mov	r0, r1
 8007a56:	47a0      	blx	r4
 8007a58:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8007a5c:	ee1a 3a90 	vmov	r3, s21
 8007a60:	4642      	mov	r2, r8
 8007a62:	4608      	mov	r0, r1
 8007a64:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8007a66:	47a8      	blx	r5
 8007a68:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8007a6c:	ee19 3a90 	vmov	r3, s19
 8007a70:	4642      	mov	r2, r8
 8007a72:	4608      	mov	r0, r1
 8007a74:	47a0      	blx	r4
 8007a76:	ee1a 3a10 	vmov	r3, s20
 8007a7a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8007a82:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8007a86:	47a0      	blx	r4
 8007a88:	e74b      	b.n	8007922 <forward_lstm+0x1646>
 8007a8a:	b353      	cbz	r3, 8007ae2 <forward_lstm+0x1806>
 8007a8c:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8007a90:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 8007a94:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8007a98:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8007a9c:	ee19 ba10 	vmov	fp, s18
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	e00b      	b.n	8007abc <forward_lstm+0x17e0>
 8007aa4:	6821      	ldr	r1, [r4, #0]
 8007aa6:	465a      	mov	r2, fp
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	f000 f9d1 	bl	8007e50 <st_int8_copy>
 8007aae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	42b3      	cmp	r3, r6
 8007ab6:	f104 0404 	add.w	r4, r4, #4
 8007aba:	dd12      	ble.n	8007ae2 <forward_lstm+0x1806>
 8007abc:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	d1f6      	bne.n	8007ab2 <forward_lstm+0x17d6>
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	42b3      	cmp	r3, r6
 8007ac8:	d1ec      	bne.n	8007aa4 <forward_lstm+0x17c8>
 8007aca:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0e8      	beq.n	8007aa4 <forward_lstm+0x17c8>
 8007ad2:	6821      	ldr	r1, [r4, #0]
 8007ad4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007ad6:	465a      	mov	r2, fp
 8007ad8:	f000 f9ba 	bl	8007e50 <st_int8_copy>
 8007adc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007ae0:	e7e7      	b.n	8007ab2 <forward_lstm+0x17d6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	b18b      	cbz	r3, 8007b0a <forward_lstm+0x182e>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	69dc      	ldr	r4, [r3, #28]
 8007aea:	b174      	cbz	r4, 8007b0a <forward_lstm+0x182e>
 8007aec:	ee19 5a10 	vmov	r5, s18
 8007af0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007af2:	ee19 2a10 	vmov	r2, s18
 8007af6:	4621      	mov	r1, r4
 8007af8:	f000 f9aa 	bl	8007e50 <st_int8_copy>
 8007afc:	ee19 2a10 	vmov	r2, s18
 8007b00:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007b04:	1961      	adds	r1, r4, r5
 8007b06:	f000 f9a3 	bl	8007e50 <st_int8_copy>
 8007b0a:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	ecbd 8b06 	vpop	{d8-d10}
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b20:	4613      	mov	r3, r2
 8007b22:	f7fe bd00 	b.w	8006526 <forward_lstm+0x24a>
 8007b26:	ee0a 0a10 	vmov	s20, r0
 8007b2a:	ee09 0a90 	vmov	s19, r0
 8007b2e:	ee0a 0a90 	vmov	s21, r0
 8007b32:	4681      	mov	r9, r0
 8007b34:	f7fe bc56 	b.w	80063e4 <forward_lstm+0x108>
 8007b38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8007b3c:	4683      	mov	fp, r0
 8007b3e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8007b42:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8007b46:	f7fe bbf4 	b.w	8006332 <forward_lstm+0x56>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	deff      	udf	#255	; 0xff

08007b50 <forward_lite_dense_if32of32wf32>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007b58:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8007b5c:	4287      	cmp	r7, r0
 8007b5e:	f240 8106 	bls.w	8007d6e <forward_lite_dense_if32of32wf32+0x21e>
 8007b62:	f1a6 0810 	sub.w	r8, r6, #16
 8007b66:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007b6a:	f108 0801 	add.w	r8, r8, #1
 8007b6e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007b72:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007b76:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	f006 0a0f 	and.w	sl, r6, #15
 8007b80:	2e0f      	cmp	r6, #15
 8007b82:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007d94 <forward_lite_dense_if32of32wf32+0x244>
 8007b86:	f240 8101 	bls.w	8007d8c <forward_lite_dense_if32of32wf32+0x23c>
 8007b8a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8007b8e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007b92:	46b6      	mov	lr, r6
 8007b94:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007b98:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8007b9c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8007ba0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007ba4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8007ba8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8007bac:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8007bb0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8007bb4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8007bb8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8007bbc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8007bc0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8007bc4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8007bc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007bcc:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8007bd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007bd4:	f1ae 0e10 	sub.w	lr, lr, #16
 8007bd8:	f1be 0f0f 	cmp.w	lr, #15
 8007bdc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8007be0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8007be4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007be8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8007bec:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8007bf0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8007bf4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8007bf8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007bfc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8007c00:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8007c04:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c08:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8007c0c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8007c10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c14:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8007c18:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8007c1c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c20:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8007c24:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007c28:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c2c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8007c30:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8007c34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c38:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8007c3c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8007c40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c44:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8007c48:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8007c4c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007c50:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007c54:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c68:	d894      	bhi.n	8007b94 <forward_lite_dense_if32of32wf32+0x44>
 8007c6a:	eb02 0e0b 	add.w	lr, r2, fp
 8007c6e:	4654      	mov	r4, sl
 8007c70:	46c4      	mov	ip, r8
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d075      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007c76:	eddc 6a00 	vldr	s13, [ip]
 8007c7a:	edde 7a00 	vldr	s15, [lr]
 8007c7e:	2c01      	cmp	r4, #1
 8007c80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c84:	d06d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007c86:	eddc 6a01 	vldr	s13, [ip, #4]
 8007c8a:	edde 7a01 	vldr	s15, [lr, #4]
 8007c8e:	2c02      	cmp	r4, #2
 8007c90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c94:	d065      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007c96:	eddc 6a02 	vldr	s13, [ip, #8]
 8007c9a:	edde 7a02 	vldr	s15, [lr, #8]
 8007c9e:	2c03      	cmp	r4, #3
 8007ca0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ca4:	d05d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007ca6:	eddc 6a03 	vldr	s13, [ip, #12]
 8007caa:	edde 7a03 	vldr	s15, [lr, #12]
 8007cae:	2c04      	cmp	r4, #4
 8007cb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cb4:	d055      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007cb6:	eddc 6a04 	vldr	s13, [ip, #16]
 8007cba:	edde 7a04 	vldr	s15, [lr, #16]
 8007cbe:	2c05      	cmp	r4, #5
 8007cc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cc4:	d04d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007cc6:	eddc 6a05 	vldr	s13, [ip, #20]
 8007cca:	edde 7a05 	vldr	s15, [lr, #20]
 8007cce:	2c06      	cmp	r4, #6
 8007cd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cd4:	d045      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007cd6:	eddc 6a06 	vldr	s13, [ip, #24]
 8007cda:	edde 7a06 	vldr	s15, [lr, #24]
 8007cde:	2c07      	cmp	r4, #7
 8007ce0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ce4:	d03d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007ce6:	eddc 6a07 	vldr	s13, [ip, #28]
 8007cea:	edde 7a07 	vldr	s15, [lr, #28]
 8007cee:	2c08      	cmp	r4, #8
 8007cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cf4:	d035      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007cf6:	eddc 6a08 	vldr	s13, [ip, #32]
 8007cfa:	edde 7a08 	vldr	s15, [lr, #32]
 8007cfe:	2c09      	cmp	r4, #9
 8007d00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d04:	d02d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d06:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8007d0a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8007d0e:	2c0a      	cmp	r4, #10
 8007d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d14:	d025      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d16:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8007d1a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8007d1e:	2c0b      	cmp	r4, #11
 8007d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d24:	d01d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d26:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8007d2a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8007d2e:	2c0c      	cmp	r4, #12
 8007d30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d34:	d015      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d36:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8007d3a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8007d3e:	3c0d      	subs	r4, #13
 8007d40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d44:	d00d      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d46:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8007d4a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8007d4e:	2c01      	cmp	r4, #1
 8007d50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d54:	d005      	beq.n	8007d62 <forward_lite_dense_if32of32wf32+0x212>
 8007d56:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8007d5a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8007d5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d62:	444a      	add	r2, r9
 8007d64:	eca5 7a01 	vstmia	r5!, {s14}
 8007d68:	42af      	cmp	r7, r5
 8007d6a:	f63f af09 	bhi.w	8007b80 <forward_lite_dense_if32of32wf32+0x30>
 8007d6e:	b15b      	cbz	r3, 8007d88 <forward_lite_dense_if32of32wf32+0x238>
 8007d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d72:	b14a      	cbz	r2, 8007d88 <forward_lite_dense_if32of32wf32+0x238>
 8007d74:	edd0 7a00 	vldr	s15, [r0]
 8007d78:	ecb3 7a01 	vldmia	r3!, {s14}
 8007d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d80:	ece0 7a01 	vstmia	r0!, {s15}
 8007d84:	4287      	cmp	r7, r0
 8007d86:	d1f5      	bne.n	8007d74 <forward_lite_dense_if32of32wf32+0x224>
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	4634      	mov	r4, r6
 8007d8e:	4696      	mov	lr, r2
 8007d90:	468c      	mov	ip, r1
 8007d92:	e76e      	b.n	8007c72 <forward_lite_dense_if32of32wf32+0x122>
 8007d94:	00000000 	.word	0x00000000

08007d98 <st_int8_fill>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	b2c3      	uxtb	r3, r0
 8007d9c:	0204      	lsls	r4, r0, #8
 8007d9e:	b2a4      	uxth	r4, r4
 8007da0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007da4:	4323      	orrs	r3, r4
 8007da6:	0404      	lsls	r4, r0, #16
 8007da8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8007dac:	431c      	orrs	r4, r3
 8007dae:	078b      	lsls	r3, r1, #30
 8007db0:	468c      	mov	ip, r1
 8007db2:	d007      	beq.n	8007dc4 <st_int8_fill+0x2c>
 8007db4:	b3a2      	cbz	r2, 8007e20 <st_int8_fill+0x88>
 8007db6:	f80c 0b01 	strb.w	r0, [ip], #1
 8007dba:	f01c 0f03 	tst.w	ip, #3
 8007dbe:	f102 32ff 	add.w	r2, r2, #4294967295
 8007dc2:	d1f7      	bne.n	8007db4 <st_int8_fill+0x1c>
 8007dc4:	0911      	lsrs	r1, r2, #4
 8007dc6:	d03e      	beq.n	8007e46 <st_int8_fill+0xae>
 8007dc8:	1e4b      	subs	r3, r1, #1
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d929      	bls.n	8007e22 <st_int8_fill+0x8a>
 8007dce:	f01c 0f07 	tst.w	ip, #7
 8007dd2:	d126      	bne.n	8007e22 <st_int8_fill+0x8a>
 8007dd4:	f10c 0310 	add.w	r3, ip, #16
 8007dd8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8007ddc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8007de0:	e943 4404 	strd	r4, r4, [r3, #-16]
 8007de4:	e943 4402 	strd	r4, r4, [r3, #-8]
 8007de8:	3310      	adds	r3, #16
 8007dea:	428b      	cmp	r3, r1
 8007dec:	d1f8      	bne.n	8007de0 <st_int8_fill+0x48>
 8007dee:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8007df2:	44f4      	add	ip, lr
 8007df4:	f002 0203 	and.w	r2, r2, #3
 8007df8:	b15b      	cbz	r3, 8007e12 <st_int8_fill+0x7a>
 8007dfa:	1e59      	subs	r1, r3, #1
 8007dfc:	f8cc 4000 	str.w	r4, [ip]
 8007e00:	d005      	beq.n	8007e0e <st_int8_fill+0x76>
 8007e02:	2901      	cmp	r1, #1
 8007e04:	f8cc 4004 	str.w	r4, [ip, #4]
 8007e08:	bf18      	it	ne
 8007e0a:	f8cc 4008 	strne.w	r4, [ip, #8]
 8007e0e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8007e12:	b12a      	cbz	r2, 8007e20 <st_int8_fill+0x88>
 8007e14:	4601      	mov	r1, r0
 8007e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1a:	4660      	mov	r0, ip
 8007e1c:	f000 bfb3 	b.w	8008d86 <memset>
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8007e26:	4663      	mov	r3, ip
 8007e28:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8007e2c:	601c      	str	r4, [r3, #0]
 8007e2e:	605c      	str	r4, [r3, #4]
 8007e30:	609c      	str	r4, [r3, #8]
 8007e32:	60dc      	str	r4, [r3, #12]
 8007e34:	3310      	adds	r3, #16
 8007e36:	4299      	cmp	r1, r3
 8007e38:	d1f8      	bne.n	8007e2c <st_int8_fill+0x94>
 8007e3a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8007e3e:	44f4      	add	ip, lr
 8007e40:	f002 0203 	and.w	r2, r2, #3
 8007e44:	e7d8      	b.n	8007df8 <st_int8_fill+0x60>
 8007e46:	0893      	lsrs	r3, r2, #2
 8007e48:	f002 0203 	and.w	r2, r2, #3
 8007e4c:	e7d4      	b.n	8007df8 <st_int8_fill+0x60>
 8007e4e:	bf00      	nop

08007e50 <st_int8_copy>:
 8007e50:	4288      	cmp	r0, r1
 8007e52:	d057      	beq.n	8007f04 <st_int8_copy+0xb4>
 8007e54:	2a00      	cmp	r2, #0
 8007e56:	d055      	beq.n	8007f04 <st_int8_copy+0xb4>
 8007e58:	4288      	cmp	r0, r1
 8007e5a:	d354      	bcc.n	8007f06 <st_int8_copy+0xb6>
 8007e5c:	078b      	lsls	r3, r1, #30
 8007e5e:	d102      	bne.n	8007e66 <st_int8_copy+0x16>
 8007e60:	e009      	b.n	8007e76 <st_int8_copy+0x26>
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d05c      	beq.n	8007f20 <st_int8_copy+0xd0>
 8007e66:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8007e6a:	f801 3b01 	strb.w	r3, [r1], #1
 8007e6e:	078b      	lsls	r3, r1, #30
 8007e70:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e74:	d1f5      	bne.n	8007e62 <st_int8_copy+0x12>
 8007e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8007e7e:	d069      	beq.n	8007f54 <st_int8_copy+0x104>
 8007e80:	ea41 0300 	orr.w	r3, r1, r0
 8007e84:	075b      	lsls	r3, r3, #29
 8007e86:	d14c      	bne.n	8007f22 <st_int8_copy+0xd2>
 8007e88:	f10e 33ff 	add.w	r3, lr, #4294967295
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d948      	bls.n	8007f22 <st_int8_copy+0xd2>
 8007e90:	f100 0310 	add.w	r3, r0, #16
 8007e94:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007e98:	f101 0c10 	add.w	ip, r1, #16
 8007e9c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8007ea0:	ed13 6b04 	vldr	d6, [r3, #-16]
 8007ea4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	4573      	cmp	r3, lr
 8007eac:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8007eb0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8007eb4:	f10c 0c10 	add.w	ip, ip, #16
 8007eb8:	d1f2      	bne.n	8007ea0 <st_int8_copy+0x50>
 8007eba:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8007ebe:	4421      	add	r1, r4
 8007ec0:	4420      	add	r0, r4
 8007ec2:	f002 0203 	and.w	r2, r2, #3
 8007ec6:	b16b      	cbz	r3, 8007ee4 <st_int8_copy+0x94>
 8007ec8:	6804      	ldr	r4, [r0, #0]
 8007eca:	600c      	str	r4, [r1, #0]
 8007ecc:	1e5c      	subs	r4, r3, #1
 8007ece:	d005      	beq.n	8007edc <st_int8_copy+0x8c>
 8007ed0:	6845      	ldr	r5, [r0, #4]
 8007ed2:	604d      	str	r5, [r1, #4]
 8007ed4:	2c01      	cmp	r4, #1
 8007ed6:	bf1c      	itt	ne
 8007ed8:	6884      	ldrne	r4, [r0, #8]
 8007eda:	608c      	strne	r4, [r1, #8]
 8007edc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ee0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007ee4:	b162      	cbz	r2, 8007f00 <st_int8_copy+0xb0>
 8007ee6:	f990 3000 	ldrsb.w	r3, [r0]
 8007eea:	700b      	strb	r3, [r1, #0]
 8007eec:	3a01      	subs	r2, #1
 8007eee:	d007      	beq.n	8007f00 <st_int8_copy+0xb0>
 8007ef0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007ef4:	704b      	strb	r3, [r1, #1]
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	bf1c      	itt	ne
 8007efa:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8007efe:	708b      	strbne	r3, [r1, #2]
 8007f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f04:	4770      	bx	lr
 8007f06:	1883      	adds	r3, r0, r2
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	d9a7      	bls.n	8007e5c <st_int8_copy+0xc>
 8007f0c:	4283      	cmp	r3, r0
 8007f0e:	440a      	add	r2, r1
 8007f10:	d9f8      	bls.n	8007f04 <st_int8_copy+0xb4>
 8007f12:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8007f16:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	d1f9      	bne.n	8007f12 <st_int8_copy+0xc2>
 8007f1e:	4770      	bx	lr
 8007f20:	4770      	bx	lr
 8007f22:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007f26:	460b      	mov	r3, r1
 8007f28:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007f2c:	4684      	mov	ip, r0
 8007f2e:	f8dc 7000 	ldr.w	r7, [ip]
 8007f32:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007f36:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007f3a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007f3e:	f8c3 800c 	str.w	r8, [r3, #12]
 8007f42:	601f      	str	r7, [r3, #0]
 8007f44:	605e      	str	r6, [r3, #4]
 8007f46:	609d      	str	r5, [r3, #8]
 8007f48:	3310      	adds	r3, #16
 8007f4a:	459e      	cmp	lr, r3
 8007f4c:	f10c 0c10 	add.w	ip, ip, #16
 8007f50:	d1ed      	bne.n	8007f2e <st_int8_copy+0xde>
 8007f52:	e7b2      	b.n	8007eba <st_int8_copy+0x6a>
 8007f54:	0893      	lsrs	r3, r2, #2
 8007f56:	f002 0203 	and.w	r2, r2, #3
 8007f5a:	e7b4      	b.n	8007ec6 <st_int8_copy+0x76>

08007f5c <ai_array_to_buffer_fmt>:
 8007f5c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d050      	beq.n	8008006 <ai_array_to_buffer_fmt+0xaa>
 8007f64:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <ai_array_to_buffer_fmt+0xb4>)
 8007f66:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d00b      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007f6e:	dc1c      	bgt.n	8007faa <ai_array_to_buffer_fmt+0x4e>
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <ai_array_to_buffer_fmt+0xb8>)
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d007      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007f76:	dd0b      	ble.n	8007f90 <ai_array_to_buffer_fmt+0x34>
 8007f78:	4b27      	ldr	r3, [pc, #156]	; (8008018 <ai_array_to_buffer_fmt+0xbc>)
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d003      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007f7e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d131      	bne.n	8007fea <ai_array_to_buffer_fmt+0x8e>
 8007f86:	4613      	mov	r3, r2
 8007f88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007f8c:	4318      	orrs	r0, r3
 8007f8e:	4770      	bx	lr
 8007f90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d0f6      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007f98:	dd2c      	ble.n	8007ff4 <ai_array_to_buffer_fmt+0x98>
 8007f9a:	4b20      	ldr	r3, [pc, #128]	; (800801c <ai_array_to_buffer_fmt+0xc0>)
 8007f9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	bf18      	it	ne
 8007fa4:	2340      	movne	r3, #64	; 0x40
 8007fa6:	4318      	orrs	r0, r3
 8007fa8:	4770      	bx	lr
 8007faa:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <ai_array_to_buffer_fmt+0xc4>)
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d0ea      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007fb0:	dd0e      	ble.n	8007fd0 <ai_array_to_buffer_fmt+0x74>
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <ai_array_to_buffer_fmt+0xc8>)
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d0e6      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007fb8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d0e2      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <ai_array_to_buffer_fmt+0xcc>)
 8007fc2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	bf18      	it	ne
 8007fca:	2340      	movne	r3, #64	; 0x40
 8007fcc:	4318      	orrs	r0, r3
 8007fce:	4770      	bx	lr
 8007fd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d0d6      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007fd8:	3307      	adds	r3, #7
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d0d3      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007fde:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	bf18      	it	ne
 8007fe6:	2340      	movne	r3, #64	; 0x40
 8007fe8:	e7ce      	b.n	8007f88 <ai_array_to_buffer_fmt+0x2c>
 8007fea:	4b10      	ldr	r3, [pc, #64]	; (800802c <ai_array_to_buffer_fmt+0xd0>)
 8007fec:	429a      	cmp	r2, r3
 8007fee:	bf18      	it	ne
 8007ff0:	2340      	movne	r3, #64	; 0x40
 8007ff2:	e7c9      	b.n	8007f88 <ai_array_to_buffer_fmt+0x2c>
 8007ff4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d0c4      	beq.n	8007f86 <ai_array_to_buffer_fmt+0x2a>
 8007ffc:	3380      	adds	r3, #128	; 0x80
 8007ffe:	429a      	cmp	r2, r3
 8008000:	bf18      	it	ne
 8008002:	2340      	movne	r3, #64	; 0x40
 8008004:	e7c0      	b.n	8007f88 <ai_array_to_buffer_fmt+0x2c>
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <ai_array_to_buffer_fmt+0xd4>)
 8008008:	4003      	ands	r3, r0
 800800a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800800e:	e7bb      	b.n	8007f88 <ai_array_to_buffer_fmt+0x2c>
 8008010:	00840040 	.word	0x00840040
 8008014:	00040840 	.word	0x00040840
 8008018:	00041040 	.word	0x00041040
 800801c:	00040447 	.word	0x00040447
 8008020:	00840840 	.word	0x00840840
 8008024:	00841040 	.word	0x00841040
 8008028:	0084084f 	.word	0x0084084f
 800802c:	0004084f 	.word	0x0004084f
 8008030:	00803fff 	.word	0x00803fff

08008034 <ai_array_get_byte_size>:
 8008034:	b319      	cbz	r1, 800807e <ai_array_get_byte_size+0x4a>
 8008036:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800803a:	fb03 f101 	mul.w	r1, r3, r1
 800803e:	3107      	adds	r1, #7
 8008040:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008044:	f021 0307 	bic.w	r3, r1, #7
 8008048:	2a04      	cmp	r2, #4
 800804a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800804e:	fa23 f101 	lsr.w	r1, r3, r1
 8008052:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008056:	d00b      	beq.n	8008070 <ai_array_get_byte_size+0x3c>
 8008058:	2a08      	cmp	r2, #8
 800805a:	d002      	beq.n	8008062 <ai_array_get_byte_size+0x2e>
 800805c:	3107      	adds	r1, #7
 800805e:	08c8      	lsrs	r0, r1, #3
 8008060:	4770      	bx	lr
 8008062:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008066:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800806a:	3107      	adds	r1, #7
 800806c:	08c8      	lsrs	r0, r1, #3
 800806e:	4770      	bx	lr
 8008070:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008074:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008078:	3107      	adds	r1, #7
 800807a:	08c8      	lsrs	r0, r1, #3
 800807c:	4770      	bx	lr
 800807e:	4608      	mov	r0, r1
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop

08008084 <ai_array_get_data_byte_size>:
 8008084:	b169      	cbz	r1, 80080a2 <ai_array_get_data_byte_size+0x1e>
 8008086:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800808a:	fb02 f101 	mul.w	r1, r2, r1
 800808e:	1dcb      	adds	r3, r1, #7
 8008090:	f023 0307 	bic.w	r3, r3, #7
 8008094:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008098:	fa23 f000 	lsr.w	r0, r3, r0
 800809c:	3007      	adds	r0, #7
 800809e:	08c0      	lsrs	r0, r0, #3
 80080a0:	4770      	bx	lr
 80080a2:	4608      	mov	r0, r1
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop

080080a8 <malloc>:
 80080a8:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <malloc+0xc>)
 80080aa:	4601      	mov	r1, r0
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	f000 b823 	b.w	80080f8 <_malloc_r>
 80080b2:	bf00      	nop
 80080b4:	20000c5c 	.word	0x20000c5c

080080b8 <sbrk_aligned>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4e0e      	ldr	r6, [pc, #56]	; (80080f4 <sbrk_aligned+0x3c>)
 80080bc:	460c      	mov	r4, r1
 80080be:	6831      	ldr	r1, [r6, #0]
 80080c0:	4605      	mov	r5, r0
 80080c2:	b911      	cbnz	r1, 80080ca <sbrk_aligned+0x12>
 80080c4:	f000 fea0 	bl	8008e08 <_sbrk_r>
 80080c8:	6030      	str	r0, [r6, #0]
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fe9b 	bl	8008e08 <_sbrk_r>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	d00a      	beq.n	80080ec <sbrk_aligned+0x34>
 80080d6:	1cc4      	adds	r4, r0, #3
 80080d8:	f024 0403 	bic.w	r4, r4, #3
 80080dc:	42a0      	cmp	r0, r4
 80080de:	d007      	beq.n	80080f0 <sbrk_aligned+0x38>
 80080e0:	1a21      	subs	r1, r4, r0
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 fe90 	bl	8008e08 <_sbrk_r>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d101      	bne.n	80080f0 <sbrk_aligned+0x38>
 80080ec:	f04f 34ff 	mov.w	r4, #4294967295
 80080f0:	4620      	mov	r0, r4
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	200017c0 	.word	0x200017c0

080080f8 <_malloc_r>:
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	1ccd      	adds	r5, r1, #3
 80080fe:	f025 0503 	bic.w	r5, r5, #3
 8008102:	3508      	adds	r5, #8
 8008104:	2d0c      	cmp	r5, #12
 8008106:	bf38      	it	cc
 8008108:	250c      	movcc	r5, #12
 800810a:	2d00      	cmp	r5, #0
 800810c:	4607      	mov	r7, r0
 800810e:	db01      	blt.n	8008114 <_malloc_r+0x1c>
 8008110:	42a9      	cmp	r1, r5
 8008112:	d905      	bls.n	8008120 <_malloc_r+0x28>
 8008114:	230c      	movs	r3, #12
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	2600      	movs	r6, #0
 800811a:	4630      	mov	r0, r6
 800811c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008120:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081f4 <_malloc_r+0xfc>
 8008124:	f000 f868 	bl	80081f8 <__malloc_lock>
 8008128:	f8d8 3000 	ldr.w	r3, [r8]
 800812c:	461c      	mov	r4, r3
 800812e:	bb5c      	cbnz	r4, 8008188 <_malloc_r+0x90>
 8008130:	4629      	mov	r1, r5
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff ffc0 	bl	80080b8 <sbrk_aligned>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	4604      	mov	r4, r0
 800813c:	d155      	bne.n	80081ea <_malloc_r+0xf2>
 800813e:	f8d8 4000 	ldr.w	r4, [r8]
 8008142:	4626      	mov	r6, r4
 8008144:	2e00      	cmp	r6, #0
 8008146:	d145      	bne.n	80081d4 <_malloc_r+0xdc>
 8008148:	2c00      	cmp	r4, #0
 800814a:	d048      	beq.n	80081de <_malloc_r+0xe6>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	4631      	mov	r1, r6
 8008150:	4638      	mov	r0, r7
 8008152:	eb04 0903 	add.w	r9, r4, r3
 8008156:	f000 fe57 	bl	8008e08 <_sbrk_r>
 800815a:	4581      	cmp	r9, r0
 800815c:	d13f      	bne.n	80081de <_malloc_r+0xe6>
 800815e:	6821      	ldr	r1, [r4, #0]
 8008160:	1a6d      	subs	r5, r5, r1
 8008162:	4629      	mov	r1, r5
 8008164:	4638      	mov	r0, r7
 8008166:	f7ff ffa7 	bl	80080b8 <sbrk_aligned>
 800816a:	3001      	adds	r0, #1
 800816c:	d037      	beq.n	80081de <_malloc_r+0xe6>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	442b      	add	r3, r5
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	f8d8 3000 	ldr.w	r3, [r8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d038      	beq.n	80081ee <_malloc_r+0xf6>
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	42a2      	cmp	r2, r4
 8008180:	d12b      	bne.n	80081da <_malloc_r+0xe2>
 8008182:	2200      	movs	r2, #0
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	e00f      	b.n	80081a8 <_malloc_r+0xb0>
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	1b52      	subs	r2, r2, r5
 800818c:	d41f      	bmi.n	80081ce <_malloc_r+0xd6>
 800818e:	2a0b      	cmp	r2, #11
 8008190:	d917      	bls.n	80081c2 <_malloc_r+0xca>
 8008192:	1961      	adds	r1, r4, r5
 8008194:	42a3      	cmp	r3, r4
 8008196:	6025      	str	r5, [r4, #0]
 8008198:	bf18      	it	ne
 800819a:	6059      	strne	r1, [r3, #4]
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	bf08      	it	eq
 80081a0:	f8c8 1000 	streq.w	r1, [r8]
 80081a4:	5162      	str	r2, [r4, r5]
 80081a6:	604b      	str	r3, [r1, #4]
 80081a8:	4638      	mov	r0, r7
 80081aa:	f104 060b 	add.w	r6, r4, #11
 80081ae:	f000 f829 	bl	8008204 <__malloc_unlock>
 80081b2:	f026 0607 	bic.w	r6, r6, #7
 80081b6:	1d23      	adds	r3, r4, #4
 80081b8:	1af2      	subs	r2, r6, r3
 80081ba:	d0ae      	beq.n	800811a <_malloc_r+0x22>
 80081bc:	1b9b      	subs	r3, r3, r6
 80081be:	50a3      	str	r3, [r4, r2]
 80081c0:	e7ab      	b.n	800811a <_malloc_r+0x22>
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	6862      	ldr	r2, [r4, #4]
 80081c6:	d1dd      	bne.n	8008184 <_malloc_r+0x8c>
 80081c8:	f8c8 2000 	str.w	r2, [r8]
 80081cc:	e7ec      	b.n	80081a8 <_malloc_r+0xb0>
 80081ce:	4623      	mov	r3, r4
 80081d0:	6864      	ldr	r4, [r4, #4]
 80081d2:	e7ac      	b.n	800812e <_malloc_r+0x36>
 80081d4:	4634      	mov	r4, r6
 80081d6:	6876      	ldr	r6, [r6, #4]
 80081d8:	e7b4      	b.n	8008144 <_malloc_r+0x4c>
 80081da:	4613      	mov	r3, r2
 80081dc:	e7cc      	b.n	8008178 <_malloc_r+0x80>
 80081de:	230c      	movs	r3, #12
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4638      	mov	r0, r7
 80081e4:	f000 f80e 	bl	8008204 <__malloc_unlock>
 80081e8:	e797      	b.n	800811a <_malloc_r+0x22>
 80081ea:	6025      	str	r5, [r4, #0]
 80081ec:	e7dc      	b.n	80081a8 <_malloc_r+0xb0>
 80081ee:	605b      	str	r3, [r3, #4]
 80081f0:	deff      	udf	#255	; 0xff
 80081f2:	bf00      	nop
 80081f4:	200017bc 	.word	0x200017bc

080081f8 <__malloc_lock>:
 80081f8:	4801      	ldr	r0, [pc, #4]	; (8008200 <__malloc_lock+0x8>)
 80081fa:	f000 be52 	b.w	8008ea2 <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	20001904 	.word	0x20001904

08008204 <__malloc_unlock>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__malloc_unlock+0x8>)
 8008206:	f000 be4d 	b.w	8008ea4 <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	20001904 	.word	0x20001904

08008210 <_realloc_r>:
 8008210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	4680      	mov	r8, r0
 8008216:	4614      	mov	r4, r2
 8008218:	460e      	mov	r6, r1
 800821a:	b921      	cbnz	r1, 8008226 <_realloc_r+0x16>
 800821c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	4611      	mov	r1, r2
 8008222:	f7ff bf69 	b.w	80080f8 <_malloc_r>
 8008226:	b92a      	cbnz	r2, 8008234 <_realloc_r+0x24>
 8008228:	f001 fcc8 	bl	8009bbc <_free_r>
 800822c:	4625      	mov	r5, r4
 800822e:	4628      	mov	r0, r5
 8008230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008234:	f002 f88a 	bl	800a34c <_malloc_usable_size_r>
 8008238:	4284      	cmp	r4, r0
 800823a:	4607      	mov	r7, r0
 800823c:	d802      	bhi.n	8008244 <_realloc_r+0x34>
 800823e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008242:	d812      	bhi.n	800826a <_realloc_r+0x5a>
 8008244:	4621      	mov	r1, r4
 8008246:	4640      	mov	r0, r8
 8008248:	f7ff ff56 	bl	80080f8 <_malloc_r>
 800824c:	4605      	mov	r5, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d0ed      	beq.n	800822e <_realloc_r+0x1e>
 8008252:	42bc      	cmp	r4, r7
 8008254:	4622      	mov	r2, r4
 8008256:	4631      	mov	r1, r6
 8008258:	bf28      	it	cs
 800825a:	463a      	movcs	r2, r7
 800825c:	f000 fe23 	bl	8008ea6 <memcpy>
 8008260:	4631      	mov	r1, r6
 8008262:	4640      	mov	r0, r8
 8008264:	f001 fcaa 	bl	8009bbc <_free_r>
 8008268:	e7e1      	b.n	800822e <_realloc_r+0x1e>
 800826a:	4635      	mov	r5, r6
 800826c:	e7df      	b.n	800822e <_realloc_r+0x1e>

0800826e <__cvt>:
 800826e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008272:	ec55 4b10 	vmov	r4, r5, d0
 8008276:	2d00      	cmp	r5, #0
 8008278:	460e      	mov	r6, r1
 800827a:	4619      	mov	r1, r3
 800827c:	462b      	mov	r3, r5
 800827e:	bfbb      	ittet	lt
 8008280:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008284:	461d      	movlt	r5, r3
 8008286:	2300      	movge	r3, #0
 8008288:	232d      	movlt	r3, #45	; 0x2d
 800828a:	700b      	strb	r3, [r1, #0]
 800828c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008292:	4691      	mov	r9, r2
 8008294:	f023 0820 	bic.w	r8, r3, #32
 8008298:	bfbc      	itt	lt
 800829a:	4622      	movlt	r2, r4
 800829c:	4614      	movlt	r4, r2
 800829e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082a2:	d005      	beq.n	80082b0 <__cvt+0x42>
 80082a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082a8:	d100      	bne.n	80082ac <__cvt+0x3e>
 80082aa:	3601      	adds	r6, #1
 80082ac:	2102      	movs	r1, #2
 80082ae:	e000      	b.n	80082b2 <__cvt+0x44>
 80082b0:	2103      	movs	r1, #3
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	ab02      	add	r3, sp, #8
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	ec45 4b10 	vmov	d0, r4, r5
 80082be:	4653      	mov	r3, sl
 80082c0:	4632      	mov	r2, r6
 80082c2:	f000 fe89 	bl	8008fd8 <_dtoa_r>
 80082c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082ca:	4607      	mov	r7, r0
 80082cc:	d102      	bne.n	80082d4 <__cvt+0x66>
 80082ce:	f019 0f01 	tst.w	r9, #1
 80082d2:	d022      	beq.n	800831a <__cvt+0xac>
 80082d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082d8:	eb07 0906 	add.w	r9, r7, r6
 80082dc:	d110      	bne.n	8008300 <__cvt+0x92>
 80082de:	783b      	ldrb	r3, [r7, #0]
 80082e0:	2b30      	cmp	r3, #48	; 0x30
 80082e2:	d10a      	bne.n	80082fa <__cvt+0x8c>
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f8 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80082f0:	b918      	cbnz	r0, 80082fa <__cvt+0x8c>
 80082f2:	f1c6 0601 	rsb	r6, r6, #1
 80082f6:	f8ca 6000 	str.w	r6, [sl]
 80082fa:	f8da 3000 	ldr.w	r3, [sl]
 80082fe:	4499      	add	r9, r3
 8008300:	2200      	movs	r2, #0
 8008302:	2300      	movs	r3, #0
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800830c:	b108      	cbz	r0, 8008312 <__cvt+0xa4>
 800830e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008312:	2230      	movs	r2, #48	; 0x30
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	454b      	cmp	r3, r9
 8008318:	d307      	bcc.n	800832a <__cvt+0xbc>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831e:	1bdb      	subs	r3, r3, r7
 8008320:	4638      	mov	r0, r7
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	b004      	add	sp, #16
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	9103      	str	r1, [sp, #12]
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	e7f0      	b.n	8008314 <__cvt+0xa6>

08008332 <__exponent>:
 8008332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008334:	4603      	mov	r3, r0
 8008336:	2900      	cmp	r1, #0
 8008338:	bfb8      	it	lt
 800833a:	4249      	neglt	r1, r1
 800833c:	f803 2b02 	strb.w	r2, [r3], #2
 8008340:	bfb4      	ite	lt
 8008342:	222d      	movlt	r2, #45	; 0x2d
 8008344:	222b      	movge	r2, #43	; 0x2b
 8008346:	2909      	cmp	r1, #9
 8008348:	7042      	strb	r2, [r0, #1]
 800834a:	dd2a      	ble.n	80083a2 <__exponent+0x70>
 800834c:	f10d 0207 	add.w	r2, sp, #7
 8008350:	4617      	mov	r7, r2
 8008352:	260a      	movs	r6, #10
 8008354:	4694      	mov	ip, r2
 8008356:	fb91 f5f6 	sdiv	r5, r1, r6
 800835a:	fb06 1415 	mls	r4, r6, r5, r1
 800835e:	3430      	adds	r4, #48	; 0x30
 8008360:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008364:	460c      	mov	r4, r1
 8008366:	2c63      	cmp	r4, #99	; 0x63
 8008368:	f102 32ff 	add.w	r2, r2, #4294967295
 800836c:	4629      	mov	r1, r5
 800836e:	dcf1      	bgt.n	8008354 <__exponent+0x22>
 8008370:	3130      	adds	r1, #48	; 0x30
 8008372:	f1ac 0402 	sub.w	r4, ip, #2
 8008376:	f802 1c01 	strb.w	r1, [r2, #-1]
 800837a:	1c41      	adds	r1, r0, #1
 800837c:	4622      	mov	r2, r4
 800837e:	42ba      	cmp	r2, r7
 8008380:	d30a      	bcc.n	8008398 <__exponent+0x66>
 8008382:	f10d 0209 	add.w	r2, sp, #9
 8008386:	eba2 020c 	sub.w	r2, r2, ip
 800838a:	42bc      	cmp	r4, r7
 800838c:	bf88      	it	hi
 800838e:	2200      	movhi	r2, #0
 8008390:	4413      	add	r3, r2
 8008392:	1a18      	subs	r0, r3, r0
 8008394:	b003      	add	sp, #12
 8008396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008398:	f812 5b01 	ldrb.w	r5, [r2], #1
 800839c:	f801 5f01 	strb.w	r5, [r1, #1]!
 80083a0:	e7ed      	b.n	800837e <__exponent+0x4c>
 80083a2:	2330      	movs	r3, #48	; 0x30
 80083a4:	3130      	adds	r1, #48	; 0x30
 80083a6:	7083      	strb	r3, [r0, #2]
 80083a8:	70c1      	strb	r1, [r0, #3]
 80083aa:	1d03      	adds	r3, r0, #4
 80083ac:	e7f1      	b.n	8008392 <__exponent+0x60>
	...

080083b0 <_printf_float>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	ed2d 8b02 	vpush	{d8}
 80083b8:	b08d      	sub	sp, #52	; 0x34
 80083ba:	460c      	mov	r4, r1
 80083bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083c0:	4616      	mov	r6, r2
 80083c2:	461f      	mov	r7, r3
 80083c4:	4605      	mov	r5, r0
 80083c6:	f000 fce7 	bl	8008d98 <_localeconv_r>
 80083ca:	f8d0 a000 	ldr.w	sl, [r0]
 80083ce:	4650      	mov	r0, sl
 80083d0:	f7f7 ff6e 	bl	80002b0 <strlen>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930a      	str	r3, [sp, #40]	; 0x28
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	9305      	str	r3, [sp, #20]
 80083dc:	f8d8 3000 	ldr.w	r3, [r8]
 80083e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083e4:	3307      	adds	r3, #7
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	f103 0208 	add.w	r2, r3, #8
 80083ee:	f8c8 2000 	str.w	r2, [r8]
 80083f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083fa:	9307      	str	r3, [sp, #28]
 80083fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008400:	ee08 0a10 	vmov	s16, r0
 8008404:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800840c:	4b9e      	ldr	r3, [pc, #632]	; (8008688 <_printf_float+0x2d8>)
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	f7f8 fbab 	bl	8000b6c <__aeabi_dcmpun>
 8008416:	bb88      	cbnz	r0, 800847c <_printf_float+0xcc>
 8008418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841c:	4b9a      	ldr	r3, [pc, #616]	; (8008688 <_printf_float+0x2d8>)
 800841e:	f04f 32ff 	mov.w	r2, #4294967295
 8008422:	f7f8 fb85 	bl	8000b30 <__aeabi_dcmple>
 8008426:	bb48      	cbnz	r0, 800847c <_printf_float+0xcc>
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb74 	bl	8000b1c <__aeabi_dcmplt>
 8008434:	b110      	cbz	r0, 800843c <_printf_float+0x8c>
 8008436:	232d      	movs	r3, #45	; 0x2d
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800843c:	4a93      	ldr	r2, [pc, #588]	; (800868c <_printf_float+0x2dc>)
 800843e:	4b94      	ldr	r3, [pc, #592]	; (8008690 <_printf_float+0x2e0>)
 8008440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008444:	bf94      	ite	ls
 8008446:	4690      	movls	r8, r2
 8008448:	4698      	movhi	r8, r3
 800844a:	2303      	movs	r3, #3
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	f023 0304 	bic.w	r3, r3, #4
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	9700      	str	r7, [sp, #0]
 800845c:	4633      	mov	r3, r6
 800845e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008460:	4621      	mov	r1, r4
 8008462:	4628      	mov	r0, r5
 8008464:	f000 f9da 	bl	800881c <_printf_common>
 8008468:	3001      	adds	r0, #1
 800846a:	f040 8090 	bne.w	800858e <_printf_float+0x1de>
 800846e:	f04f 30ff 	mov.w	r0, #4294967295
 8008472:	b00d      	add	sp, #52	; 0x34
 8008474:	ecbd 8b02 	vpop	{d8}
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 fb72 	bl	8000b6c <__aeabi_dcmpun>
 8008488:	b140      	cbz	r0, 800849c <_printf_float+0xec>
 800848a:	464b      	mov	r3, r9
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfbc      	itt	lt
 8008490:	232d      	movlt	r3, #45	; 0x2d
 8008492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008496:	4a7f      	ldr	r2, [pc, #508]	; (8008694 <_printf_float+0x2e4>)
 8008498:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <_printf_float+0x2e8>)
 800849a:	e7d1      	b.n	8008440 <_printf_float+0x90>
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084a2:	9206      	str	r2, [sp, #24]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	d13f      	bne.n	8008528 <_printf_float+0x178>
 80084a8:	2306      	movs	r3, #6
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	6861      	ldr	r1, [r4, #4]
 80084b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084b4:	2300      	movs	r3, #0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	ab0a      	add	r3, sp, #40	; 0x28
 80084ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084be:	ab09      	add	r3, sp, #36	; 0x24
 80084c0:	ec49 8b10 	vmov	d0, r8, r9
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084cc:	4628      	mov	r0, r5
 80084ce:	f7ff fece 	bl	800826e <__cvt>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d6:	2b47      	cmp	r3, #71	; 0x47
 80084d8:	4680      	mov	r8, r0
 80084da:	d108      	bne.n	80084ee <_printf_float+0x13e>
 80084dc:	1cc8      	adds	r0, r1, #3
 80084de:	db02      	blt.n	80084e6 <_printf_float+0x136>
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	dd41      	ble.n	800856a <_printf_float+0x1ba>
 80084e6:	f1ab 0302 	sub.w	r3, fp, #2
 80084ea:	fa5f fb83 	uxtb.w	fp, r3
 80084ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084f2:	d820      	bhi.n	8008536 <_printf_float+0x186>
 80084f4:	3901      	subs	r1, #1
 80084f6:	465a      	mov	r2, fp
 80084f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084fc:	9109      	str	r1, [sp, #36]	; 0x24
 80084fe:	f7ff ff18 	bl	8008332 <__exponent>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	1813      	adds	r3, r2, r0
 8008506:	2a01      	cmp	r2, #1
 8008508:	4681      	mov	r9, r0
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	dc02      	bgt.n	8008514 <_printf_float+0x164>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	07d2      	lsls	r2, r2, #31
 8008512:	d501      	bpl.n	8008518 <_printf_float+0x168>
 8008514:	3301      	adds	r3, #1
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800851c:	2b00      	cmp	r3, #0
 800851e:	d09c      	beq.n	800845a <_printf_float+0xaa>
 8008520:	232d      	movs	r3, #45	; 0x2d
 8008522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008526:	e798      	b.n	800845a <_printf_float+0xaa>
 8008528:	9a06      	ldr	r2, [sp, #24]
 800852a:	2a47      	cmp	r2, #71	; 0x47
 800852c:	d1be      	bne.n	80084ac <_printf_float+0xfc>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1bc      	bne.n	80084ac <_printf_float+0xfc>
 8008532:	2301      	movs	r3, #1
 8008534:	e7b9      	b.n	80084aa <_printf_float+0xfa>
 8008536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800853a:	d118      	bne.n	800856e <_printf_float+0x1be>
 800853c:	2900      	cmp	r1, #0
 800853e:	6863      	ldr	r3, [r4, #4]
 8008540:	dd0b      	ble.n	800855a <_printf_float+0x1aa>
 8008542:	6121      	str	r1, [r4, #16]
 8008544:	b913      	cbnz	r3, 800854c <_printf_float+0x19c>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	07d0      	lsls	r0, r2, #31
 800854a:	d502      	bpl.n	8008552 <_printf_float+0x1a2>
 800854c:	3301      	adds	r3, #1
 800854e:	440b      	add	r3, r1
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	65a1      	str	r1, [r4, #88]	; 0x58
 8008554:	f04f 0900 	mov.w	r9, #0
 8008558:	e7de      	b.n	8008518 <_printf_float+0x168>
 800855a:	b913      	cbnz	r3, 8008562 <_printf_float+0x1b2>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	07d2      	lsls	r2, r2, #31
 8008560:	d501      	bpl.n	8008566 <_printf_float+0x1b6>
 8008562:	3302      	adds	r3, #2
 8008564:	e7f4      	b.n	8008550 <_printf_float+0x1a0>
 8008566:	2301      	movs	r3, #1
 8008568:	e7f2      	b.n	8008550 <_printf_float+0x1a0>
 800856a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	4299      	cmp	r1, r3
 8008572:	db05      	blt.n	8008580 <_printf_float+0x1d0>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	6121      	str	r1, [r4, #16]
 8008578:	07d8      	lsls	r0, r3, #31
 800857a:	d5ea      	bpl.n	8008552 <_printf_float+0x1a2>
 800857c:	1c4b      	adds	r3, r1, #1
 800857e:	e7e7      	b.n	8008550 <_printf_float+0x1a0>
 8008580:	2900      	cmp	r1, #0
 8008582:	bfd4      	ite	le
 8008584:	f1c1 0202 	rsble	r2, r1, #2
 8008588:	2201      	movgt	r2, #1
 800858a:	4413      	add	r3, r2
 800858c:	e7e0      	b.n	8008550 <_printf_float+0x1a0>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	055a      	lsls	r2, r3, #21
 8008592:	d407      	bmi.n	80085a4 <_printf_float+0x1f4>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	4642      	mov	r2, r8
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	d12c      	bne.n	80085fc <_printf_float+0x24c>
 80085a2:	e764      	b.n	800846e <_printf_float+0xbe>
 80085a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085a8:	f240 80e0 	bls.w	800876c <_printf_float+0x3bc>
 80085ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085b0:	2200      	movs	r2, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	f7f8 faa8 	bl	8000b08 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d034      	beq.n	8008626 <_printf_float+0x276>
 80085bc:	4a37      	ldr	r2, [pc, #220]	; (800869c <_printf_float+0x2ec>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af51 	beq.w	800846e <_printf_float+0xbe>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	429a      	cmp	r2, r3
 80085d2:	db02      	blt.n	80085da <_printf_float+0x22a>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d8      	lsls	r0, r3, #31
 80085d8:	d510      	bpl.n	80085fc <_printf_float+0x24c>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af41 	beq.w	800846e <_printf_float+0xbe>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	f104 091a 	add.w	r9, r4, #26
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	4543      	cmp	r3, r8
 80085fa:	dc09      	bgt.n	8008610 <_printf_float+0x260>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	f100 8107 	bmi.w	8008812 <_printf_float+0x462>
 8008604:	68e0      	ldr	r0, [r4, #12]
 8008606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008608:	4298      	cmp	r0, r3
 800860a:	bfb8      	it	lt
 800860c:	4618      	movlt	r0, r3
 800860e:	e730      	b.n	8008472 <_printf_float+0xc2>
 8008610:	2301      	movs	r3, #1
 8008612:	464a      	mov	r2, r9
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	f43f af27 	beq.w	800846e <_printf_float+0xbe>
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	e7e6      	b.n	80085f4 <_printf_float+0x244>
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc39      	bgt.n	80086a0 <_printf_float+0x2f0>
 800862c:	4a1b      	ldr	r2, [pc, #108]	; (800869c <_printf_float+0x2ec>)
 800862e:	2301      	movs	r3, #1
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	f43f af19 	beq.w	800846e <_printf_float+0xbe>
 800863c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008640:	4313      	orrs	r3, r2
 8008642:	d102      	bne.n	800864a <_printf_float+0x29a>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07d9      	lsls	r1, r3, #31
 8008648:	d5d8      	bpl.n	80085fc <_printf_float+0x24c>
 800864a:	ee18 3a10 	vmov	r3, s16
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af09 	beq.w	800846e <_printf_float+0xbe>
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	f104 0a1a 	add.w	sl, r4, #26
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	425b      	negs	r3, r3
 8008668:	454b      	cmp	r3, r9
 800866a:	dc01      	bgt.n	8008670 <_printf_float+0x2c0>
 800866c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866e:	e792      	b.n	8008596 <_printf_float+0x1e6>
 8008670:	2301      	movs	r3, #1
 8008672:	4652      	mov	r2, sl
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f aef7 	beq.w	800846e <_printf_float+0xbe>
 8008680:	f109 0901 	add.w	r9, r9, #1
 8008684:	e7ee      	b.n	8008664 <_printf_float+0x2b4>
 8008686:	bf00      	nop
 8008688:	7fefffff 	.word	0x7fefffff
 800868c:	0803e0c0 	.word	0x0803e0c0
 8008690:	0803e0c4 	.word	0x0803e0c4
 8008694:	0803e0c8 	.word	0x0803e0c8
 8008698:	0803e0cc 	.word	0x0803e0cc
 800869c:	0803e0d0 	.word	0x0803e0d0
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a4:	429a      	cmp	r2, r3
 80086a6:	bfa8      	it	ge
 80086a8:	461a      	movge	r2, r3
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	4691      	mov	r9, r2
 80086ae:	dc37      	bgt.n	8008720 <_printf_float+0x370>
 80086b0:	f04f 0b00 	mov.w	fp, #0
 80086b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086b8:	f104 021a 	add.w	r2, r4, #26
 80086bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	eba3 0309 	sub.w	r3, r3, r9
 80086c4:	455b      	cmp	r3, fp
 80086c6:	dc33      	bgt.n	8008730 <_printf_float+0x380>
 80086c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db3b      	blt.n	8008748 <_printf_float+0x398>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d438      	bmi.n	8008748 <_printf_float+0x398>
 80086d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086da:	eba2 0903 	sub.w	r9, r2, r3
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	1ad2      	subs	r2, r2, r3
 80086e2:	4591      	cmp	r9, r2
 80086e4:	bfa8      	it	ge
 80086e6:	4691      	movge	r9, r2
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dc35      	bgt.n	800875a <_printf_float+0x3aa>
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f6:	f104 0a1a 	add.w	sl, r4, #26
 80086fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	eba3 0309 	sub.w	r3, r3, r9
 8008704:	4543      	cmp	r3, r8
 8008706:	f77f af79 	ble.w	80085fc <_printf_float+0x24c>
 800870a:	2301      	movs	r3, #1
 800870c:	4652      	mov	r2, sl
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f aeaa 	beq.w	800846e <_printf_float+0xbe>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	e7ec      	b.n	80086fa <_printf_float+0x34a>
 8008720:	4613      	mov	r3, r2
 8008722:	4631      	mov	r1, r6
 8008724:	4642      	mov	r2, r8
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	d1c0      	bne.n	80086b0 <_printf_float+0x300>
 800872e:	e69e      	b.n	800846e <_printf_float+0xbe>
 8008730:	2301      	movs	r3, #1
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	9205      	str	r2, [sp, #20]
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f ae97 	beq.w	800846e <_printf_float+0xbe>
 8008740:	9a05      	ldr	r2, [sp, #20]
 8008742:	f10b 0b01 	add.w	fp, fp, #1
 8008746:	e7b9      	b.n	80086bc <_printf_float+0x30c>
 8008748:	ee18 3a10 	vmov	r3, s16
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	d1be      	bne.n	80086d6 <_printf_float+0x326>
 8008758:	e689      	b.n	800846e <_printf_float+0xbe>
 800875a:	9a05      	ldr	r2, [sp, #20]
 800875c:	464b      	mov	r3, r9
 800875e:	4442      	add	r2, r8
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	d1c1      	bne.n	80086ee <_printf_float+0x33e>
 800876a:	e680      	b.n	800846e <_printf_float+0xbe>
 800876c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876e:	2a01      	cmp	r2, #1
 8008770:	dc01      	bgt.n	8008776 <_printf_float+0x3c6>
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d53a      	bpl.n	80087ec <_printf_float+0x43c>
 8008776:	2301      	movs	r3, #1
 8008778:	4642      	mov	r2, r8
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	f43f ae74 	beq.w	800846e <_printf_float+0xbe>
 8008786:	ee18 3a10 	vmov	r3, s16
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f ae6b 	beq.w	800846e <_printf_float+0xbe>
 8008798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800879c:	2200      	movs	r2, #0
 800879e:	2300      	movs	r3, #0
 80087a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80087a4:	f7f8 f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 80087a8:	b9d8      	cbnz	r0, 80087e2 <_printf_float+0x432>
 80087aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80087ae:	f108 0201 	add.w	r2, r8, #1
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	d10e      	bne.n	80087da <_printf_float+0x42a>
 80087bc:	e657      	b.n	800846e <_printf_float+0xbe>
 80087be:	2301      	movs	r3, #1
 80087c0:	4652      	mov	r2, sl
 80087c2:	4631      	mov	r1, r6
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b8      	blx	r7
 80087c8:	3001      	adds	r0, #1
 80087ca:	f43f ae50 	beq.w	800846e <_printf_float+0xbe>
 80087ce:	f108 0801 	add.w	r8, r8, #1
 80087d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d4:	3b01      	subs	r3, #1
 80087d6:	4543      	cmp	r3, r8
 80087d8:	dcf1      	bgt.n	80087be <_printf_float+0x40e>
 80087da:	464b      	mov	r3, r9
 80087dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087e0:	e6da      	b.n	8008598 <_printf_float+0x1e8>
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	f104 0a1a 	add.w	sl, r4, #26
 80087ea:	e7f2      	b.n	80087d2 <_printf_float+0x422>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4642      	mov	r2, r8
 80087f0:	e7df      	b.n	80087b2 <_printf_float+0x402>
 80087f2:	2301      	movs	r3, #1
 80087f4:	464a      	mov	r2, r9
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae36 	beq.w	800846e <_printf_float+0xbe>
 8008802:	f108 0801 	add.w	r8, r8, #1
 8008806:	68e3      	ldr	r3, [r4, #12]
 8008808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800880a:	1a5b      	subs	r3, r3, r1
 800880c:	4543      	cmp	r3, r8
 800880e:	dcf0      	bgt.n	80087f2 <_printf_float+0x442>
 8008810:	e6f8      	b.n	8008604 <_printf_float+0x254>
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	f104 0919 	add.w	r9, r4, #25
 800881a:	e7f4      	b.n	8008806 <_printf_float+0x456>

0800881c <_printf_common>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	4616      	mov	r6, r2
 8008822:	4699      	mov	r9, r3
 8008824:	688a      	ldr	r2, [r1, #8]
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800882c:	4293      	cmp	r3, r2
 800882e:	bfb8      	it	lt
 8008830:	4613      	movlt	r3, r2
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008838:	4607      	mov	r7, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b10a      	cbz	r2, 8008842 <_printf_common+0x26>
 800883e:	3301      	adds	r3, #1
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0699      	lsls	r1, r3, #26
 8008846:	bf42      	ittt	mi
 8008848:	6833      	ldrmi	r3, [r6, #0]
 800884a:	3302      	addmi	r3, #2
 800884c:	6033      	strmi	r3, [r6, #0]
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f015 0506 	ands.w	r5, r5, #6
 8008854:	d106      	bne.n	8008864 <_printf_common+0x48>
 8008856:	f104 0a19 	add.w	sl, r4, #25
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	42ab      	cmp	r3, r5
 8008862:	dc26      	bgt.n	80088b2 <_printf_common+0x96>
 8008864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008868:	1e13      	subs	r3, r2, #0
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	bf18      	it	ne
 800886e:	2301      	movne	r3, #1
 8008870:	0692      	lsls	r2, r2, #26
 8008872:	d42b      	bmi.n	80088cc <_printf_common+0xb0>
 8008874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008878:	4649      	mov	r1, r9
 800887a:	4638      	mov	r0, r7
 800887c:	47c0      	blx	r8
 800887e:	3001      	adds	r0, #1
 8008880:	d01e      	beq.n	80088c0 <_printf_common+0xa4>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	f003 0306 	and.w	r3, r3, #6
 800888a:	2b04      	cmp	r3, #4
 800888c:	bf02      	ittt	eq
 800888e:	68e5      	ldreq	r5, [r4, #12]
 8008890:	6833      	ldreq	r3, [r6, #0]
 8008892:	1aed      	subeq	r5, r5, r3
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	bf0c      	ite	eq
 8008898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800889c:	2500      	movne	r5, #0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfc4      	itt	gt
 80088a2:	1a9b      	subgt	r3, r3, r2
 80088a4:	18ed      	addgt	r5, r5, r3
 80088a6:	2600      	movs	r6, #0
 80088a8:	341a      	adds	r4, #26
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	d11a      	bne.n	80088e4 <_printf_common+0xc8>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e008      	b.n	80088c4 <_printf_common+0xa8>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4652      	mov	r2, sl
 80088b6:	4649      	mov	r1, r9
 80088b8:	4638      	mov	r0, r7
 80088ba:	47c0      	blx	r8
 80088bc:	3001      	adds	r0, #1
 80088be:	d103      	bne.n	80088c8 <_printf_common+0xac>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	3501      	adds	r5, #1
 80088ca:	e7c6      	b.n	800885a <_printf_common+0x3e>
 80088cc:	18e1      	adds	r1, r4, r3
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	2030      	movs	r0, #48	; 0x30
 80088d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d6:	4422      	add	r2, r4
 80088d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e0:	3302      	adds	r3, #2
 80088e2:	e7c7      	b.n	8008874 <_printf_common+0x58>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0e6      	beq.n	80088c0 <_printf_common+0xa4>
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7d9      	b.n	80088aa <_printf_common+0x8e>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	7e0f      	ldrb	r7, [r1, #24]
 80088fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008900:	2f78      	cmp	r7, #120	; 0x78
 8008902:	4691      	mov	r9, r2
 8008904:	4680      	mov	r8, r0
 8008906:	460c      	mov	r4, r1
 8008908:	469a      	mov	sl, r3
 800890a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800890e:	d807      	bhi.n	8008920 <_printf_i+0x28>
 8008910:	2f62      	cmp	r7, #98	; 0x62
 8008912:	d80a      	bhi.n	800892a <_printf_i+0x32>
 8008914:	2f00      	cmp	r7, #0
 8008916:	f000 80d4 	beq.w	8008ac2 <_printf_i+0x1ca>
 800891a:	2f58      	cmp	r7, #88	; 0x58
 800891c:	f000 80c0 	beq.w	8008aa0 <_printf_i+0x1a8>
 8008920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008928:	e03a      	b.n	80089a0 <_printf_i+0xa8>
 800892a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892e:	2b15      	cmp	r3, #21
 8008930:	d8f6      	bhi.n	8008920 <_printf_i+0x28>
 8008932:	a101      	add	r1, pc, #4	; (adr r1, 8008938 <_printf_i+0x40>)
 8008934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008938:	08008991 	.word	0x08008991
 800893c:	080089a5 	.word	0x080089a5
 8008940:	08008921 	.word	0x08008921
 8008944:	08008921 	.word	0x08008921
 8008948:	08008921 	.word	0x08008921
 800894c:	08008921 	.word	0x08008921
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008921 	.word	0x08008921
 8008958:	08008921 	.word	0x08008921
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008aa9 	.word	0x08008aa9
 8008968:	080089d1 	.word	0x080089d1
 800896c:	08008a63 	.word	0x08008a63
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008acb 	.word	0x08008acb
 800897c:	08008921 	.word	0x08008921
 8008980:	080089d1 	.word	0x080089d1
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a6b 	.word	0x08008a6b
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a0:	2301      	movs	r3, #1
 80089a2:	e09f      	b.n	8008ae4 <_printf_i+0x1ec>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	0607      	lsls	r7, r0, #24
 80089aa:	f103 0104 	add.w	r1, r3, #4
 80089ae:	6029      	str	r1, [r5, #0]
 80089b0:	d501      	bpl.n	80089b6 <_printf_i+0xbe>
 80089b2:	681e      	ldr	r6, [r3, #0]
 80089b4:	e003      	b.n	80089be <_printf_i+0xc6>
 80089b6:	0646      	lsls	r6, r0, #25
 80089b8:	d5fb      	bpl.n	80089b2 <_printf_i+0xba>
 80089ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089be:	2e00      	cmp	r6, #0
 80089c0:	da03      	bge.n	80089ca <_printf_i+0xd2>
 80089c2:	232d      	movs	r3, #45	; 0x2d
 80089c4:	4276      	negs	r6, r6
 80089c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ca:	485a      	ldr	r0, [pc, #360]	; (8008b34 <_printf_i+0x23c>)
 80089cc:	230a      	movs	r3, #10
 80089ce:	e012      	b.n	80089f6 <_printf_i+0xfe>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1d19      	adds	r1, r3, #4
 80089d6:	6029      	str	r1, [r5, #0]
 80089d8:	0605      	lsls	r5, r0, #24
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0xe8>
 80089dc:	681e      	ldr	r6, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0xee>
 80089e0:	0641      	lsls	r1, r0, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0xe4>
 80089e4:	881e      	ldrh	r6, [r3, #0]
 80089e6:	4853      	ldr	r0, [pc, #332]	; (8008b34 <_printf_i+0x23c>)
 80089e8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ea:	bf0c      	ite	eq
 80089ec:	2308      	moveq	r3, #8
 80089ee:	230a      	movne	r3, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f6:	6865      	ldr	r5, [r4, #4]
 80089f8:	60a5      	str	r5, [r4, #8]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	bfa2      	ittt	ge
 80089fe:	6821      	ldrge	r1, [r4, #0]
 8008a00:	f021 0104 	bicge.w	r1, r1, #4
 8008a04:	6021      	strge	r1, [r4, #0]
 8008a06:	b90e      	cbnz	r6, 8008a0c <_printf_i+0x114>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	d04b      	beq.n	8008aa4 <_printf_i+0x1ac>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a12:	fb03 6711 	mls	r7, r3, r1, r6
 8008a16:	5dc7      	ldrb	r7, [r0, r7]
 8008a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a1c:	4637      	mov	r7, r6
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	460e      	mov	r6, r1
 8008a22:	d9f4      	bls.n	8008a0e <_printf_i+0x116>
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d10b      	bne.n	8008a40 <_printf_i+0x148>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07de      	lsls	r6, r3, #31
 8008a2c:	d508      	bpl.n	8008a40 <_printf_i+0x148>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4299      	cmp	r1, r3
 8008a34:	bfde      	ittt	le
 8008a36:	2330      	movle	r3, #48	; 0x30
 8008a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	6122      	str	r2, [r4, #16]
 8008a44:	f8cd a000 	str.w	sl, [sp]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	aa03      	add	r2, sp, #12
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fee4 	bl	800881c <_printf_common>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d14a      	bne.n	8008aee <_printf_i+0x1f6>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	b004      	add	sp, #16
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f043 0320 	orr.w	r3, r3, #32
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	4833      	ldr	r0, [pc, #204]	; (8008b38 <_printf_i+0x240>)
 8008a6c:	2778      	movs	r7, #120	; 0x78
 8008a6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6829      	ldr	r1, [r5, #0]
 8008a76:	061f      	lsls	r7, r3, #24
 8008a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a7c:	d402      	bmi.n	8008a84 <_printf_i+0x18c>
 8008a7e:	065f      	lsls	r7, r3, #25
 8008a80:	bf48      	it	mi
 8008a82:	b2b6      	uxthmi	r6, r6
 8008a84:	07df      	lsls	r7, r3, #31
 8008a86:	bf48      	it	mi
 8008a88:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8c:	6029      	str	r1, [r5, #0]
 8008a8e:	bf48      	it	mi
 8008a90:	6023      	strmi	r3, [r4, #0]
 8008a92:	b91e      	cbnz	r6, 8008a9c <_printf_i+0x1a4>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	f023 0320 	bic.w	r3, r3, #32
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	e7a7      	b.n	80089f0 <_printf_i+0xf8>
 8008aa0:	4824      	ldr	r0, [pc, #144]	; (8008b34 <_printf_i+0x23c>)
 8008aa2:	e7e4      	b.n	8008a6e <_printf_i+0x176>
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	e7bd      	b.n	8008a24 <_printf_i+0x12c>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6826      	ldr	r6, [r4, #0]
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	1d18      	adds	r0, r3, #4
 8008ab0:	6028      	str	r0, [r5, #0]
 8008ab2:	0635      	lsls	r5, r6, #24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0x1c4>
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <_printf_i+0x1ca>
 8008abc:	0670      	lsls	r0, r6, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0x1c0>
 8008ac0:	8019      	strh	r1, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	e7bc      	b.n	8008a44 <_printf_i+0x14c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f7 fb9a 	bl	8000210 <memchr>
 8008adc:	b108      	cbz	r0, 8008ae2 <_printf_i+0x1ea>
 8008ade:	1b40      	subs	r0, r0, r5
 8008ae0:	6060      	str	r0, [r4, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aec:	e7aa      	b.n	8008a44 <_printf_i+0x14c>
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0ad      	beq.n	8008a58 <_printf_i+0x160>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	079b      	lsls	r3, r3, #30
 8008b00:	d413      	bmi.n	8008b2a <_printf_i+0x232>
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	4298      	cmp	r0, r3
 8008b08:	bfb8      	it	lt
 8008b0a:	4618      	movlt	r0, r3
 8008b0c:	e7a6      	b.n	8008a5c <_printf_i+0x164>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d09d      	beq.n	8008a58 <_printf_i+0x160>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	9903      	ldr	r1, [sp, #12]
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dcf2      	bgt.n	8008b0e <_printf_i+0x216>
 8008b28:	e7eb      	b.n	8008b02 <_printf_i+0x20a>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	f104 0619 	add.w	r6, r4, #25
 8008b30:	e7f5      	b.n	8008b1e <_printf_i+0x226>
 8008b32:	bf00      	nop
 8008b34:	0803e0d2 	.word	0x0803e0d2
 8008b38:	0803e0e3 	.word	0x0803e0e3

08008b3c <std>:
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	e9c0 3300 	strd	r3, r3, [r0]
 8008b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b4a:	6083      	str	r3, [r0, #8]
 8008b4c:	8181      	strh	r1, [r0, #12]
 8008b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b50:	81c2      	strh	r2, [r0, #14]
 8008b52:	6183      	str	r3, [r0, #24]
 8008b54:	4619      	mov	r1, r3
 8008b56:	2208      	movs	r2, #8
 8008b58:	305c      	adds	r0, #92	; 0x5c
 8008b5a:	f000 f914 	bl	8008d86 <memset>
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <std+0x58>)
 8008b60:	6263      	str	r3, [r4, #36]	; 0x24
 8008b62:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <std+0x5c>)
 8008b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <std+0x60>)
 8008b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <std+0x64>)
 8008b6c:	6323      	str	r3, [r4, #48]	; 0x30
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <std+0x68>)
 8008b70:	6224      	str	r4, [r4, #32]
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d006      	beq.n	8008b84 <std+0x48>
 8008b76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b7a:	4294      	cmp	r4, r2
 8008b7c:	d002      	beq.n	8008b84 <std+0x48>
 8008b7e:	33d0      	adds	r3, #208	; 0xd0
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d105      	bne.n	8008b90 <std+0x54>
 8008b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f000 b988 	b.w	8008ea0 <__retarget_lock_init_recursive>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	08008d01 	.word	0x08008d01
 8008b98:	08008d23 	.word	0x08008d23
 8008b9c:	08008d5b 	.word	0x08008d5b
 8008ba0:	08008d7f 	.word	0x08008d7f
 8008ba4:	200017c4 	.word	0x200017c4

08008ba8 <stdio_exit_handler>:
 8008ba8:	4a02      	ldr	r2, [pc, #8]	; (8008bb4 <stdio_exit_handler+0xc>)
 8008baa:	4903      	ldr	r1, [pc, #12]	; (8008bb8 <stdio_exit_handler+0x10>)
 8008bac:	4803      	ldr	r0, [pc, #12]	; (8008bbc <stdio_exit_handler+0x14>)
 8008bae:	f000 b869 	b.w	8008c84 <_fwalk_sglue>
 8008bb2:	bf00      	nop
 8008bb4:	20000c04 	.word	0x20000c04
 8008bb8:	0800a719 	.word	0x0800a719
 8008bbc:	20000c10 	.word	0x20000c10

08008bc0 <cleanup_stdio>:
 8008bc0:	6841      	ldr	r1, [r0, #4]
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <cleanup_stdio+0x34>)
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	d001      	beq.n	8008bd0 <cleanup_stdio+0x10>
 8008bcc:	f001 fda4 	bl	800a718 <_fflush_r>
 8008bd0:	68a1      	ldr	r1, [r4, #8]
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <cleanup_stdio+0x38>)
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	d002      	beq.n	8008bde <cleanup_stdio+0x1e>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f001 fd9d 	bl	800a718 <_fflush_r>
 8008bde:	68e1      	ldr	r1, [r4, #12]
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <cleanup_stdio+0x3c>)
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d004      	beq.n	8008bf0 <cleanup_stdio+0x30>
 8008be6:	4620      	mov	r0, r4
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bec:	f001 bd94 	b.w	800a718 <_fflush_r>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200017c4 	.word	0x200017c4
 8008bf8:	2000182c 	.word	0x2000182c
 8008bfc:	20001894 	.word	0x20001894

08008c00 <global_stdio_init.part.0>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <global_stdio_init.part.0+0x30>)
 8008c04:	4c0b      	ldr	r4, [pc, #44]	; (8008c34 <global_stdio_init.part.0+0x34>)
 8008c06:	4a0c      	ldr	r2, [pc, #48]	; (8008c38 <global_stdio_init.part.0+0x38>)
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2104      	movs	r1, #4
 8008c10:	f7ff ff94 	bl	8008b3c <std>
 8008c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c18:	2201      	movs	r2, #1
 8008c1a:	2109      	movs	r1, #9
 8008c1c:	f7ff ff8e 	bl	8008b3c <std>
 8008c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c24:	2202      	movs	r2, #2
 8008c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	f7ff bf86 	b.w	8008b3c <std>
 8008c30:	200018fc 	.word	0x200018fc
 8008c34:	200017c4 	.word	0x200017c4
 8008c38:	08008ba9 	.word	0x08008ba9

08008c3c <__sfp_lock_acquire>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sfp_lock_acquire+0x8>)
 8008c3e:	f000 b930 	b.w	8008ea2 <__retarget_lock_acquire_recursive>
 8008c42:	bf00      	nop
 8008c44:	20001905 	.word	0x20001905

08008c48 <__sfp_lock_release>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sfp_lock_release+0x8>)
 8008c4a:	f000 b92b 	b.w	8008ea4 <__retarget_lock_release_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20001905 	.word	0x20001905

08008c54 <__sinit>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	4604      	mov	r4, r0
 8008c58:	f7ff fff0 	bl	8008c3c <__sfp_lock_acquire>
 8008c5c:	6a23      	ldr	r3, [r4, #32]
 8008c5e:	b11b      	cbz	r3, 8008c68 <__sinit+0x14>
 8008c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c64:	f7ff bff0 	b.w	8008c48 <__sfp_lock_release>
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <__sinit+0x28>)
 8008c6a:	6223      	str	r3, [r4, #32]
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <__sinit+0x2c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1f5      	bne.n	8008c60 <__sinit+0xc>
 8008c74:	f7ff ffc4 	bl	8008c00 <global_stdio_init.part.0>
 8008c78:	e7f2      	b.n	8008c60 <__sinit+0xc>
 8008c7a:	bf00      	nop
 8008c7c:	08008bc1 	.word	0x08008bc1
 8008c80:	200018fc 	.word	0x200018fc

08008c84 <_fwalk_sglue>:
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	4607      	mov	r7, r0
 8008c8a:	4688      	mov	r8, r1
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	2600      	movs	r6, #0
 8008c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c94:	f1b9 0901 	subs.w	r9, r9, #1
 8008c98:	d505      	bpl.n	8008ca6 <_fwalk_sglue+0x22>
 8008c9a:	6824      	ldr	r4, [r4, #0]
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	d1f7      	bne.n	8008c90 <_fwalk_sglue+0xc>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	89ab      	ldrh	r3, [r5, #12]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d907      	bls.n	8008cbc <_fwalk_sglue+0x38>
 8008cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	d003      	beq.n	8008cbc <_fwalk_sglue+0x38>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	4306      	orrs	r6, r0
 8008cbc:	3568      	adds	r5, #104	; 0x68
 8008cbe:	e7e9      	b.n	8008c94 <_fwalk_sglue+0x10>

08008cc0 <siprintf>:
 8008cc0:	b40e      	push	{r1, r2, r3}
 8008cc2:	b500      	push	{lr}
 8008cc4:	b09c      	sub	sp, #112	; 0x70
 8008cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc8:	9002      	str	r0, [sp, #8]
 8008cca:	9006      	str	r0, [sp, #24]
 8008ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <siprintf+0x38>)
 8008cd2:	9107      	str	r1, [sp, #28]
 8008cd4:	9104      	str	r1, [sp, #16]
 8008cd6:	4909      	ldr	r1, [pc, #36]	; (8008cfc <siprintf+0x3c>)
 8008cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cdc:	9105      	str	r1, [sp, #20]
 8008cde:	6800      	ldr	r0, [r0, #0]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	a902      	add	r1, sp, #8
 8008ce4:	f001 fb94 	bl	800a410 <_svfiprintf_r>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	b01c      	add	sp, #112	; 0x70
 8008cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cf4:	b003      	add	sp, #12
 8008cf6:	4770      	bx	lr
 8008cf8:	20000c5c 	.word	0x20000c5c
 8008cfc:	ffff0208 	.word	0xffff0208

08008d00 <__sread>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	460c      	mov	r4, r1
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	f000 f86c 	bl	8008de4 <_read_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	bfab      	itete	ge
 8008d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d12:	89a3      	ldrhlt	r3, [r4, #12]
 8008d14:	181b      	addge	r3, r3, r0
 8008d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d1a:	bfac      	ite	ge
 8008d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d1e:	81a3      	strhlt	r3, [r4, #12]
 8008d20:	bd10      	pop	{r4, pc}

08008d22 <__swrite>:
 8008d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	461f      	mov	r7, r3
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	05db      	lsls	r3, r3, #23
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	4616      	mov	r6, r2
 8008d32:	d505      	bpl.n	8008d40 <__swrite+0x1e>
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	2302      	movs	r3, #2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f000 f840 	bl	8008dc0 <_lseek_r>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	4628      	mov	r0, r5
 8008d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	f000 b867 	b.w	8008e28 <_write_r>

08008d5a <__sseek>:
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d62:	f000 f82d 	bl	8008dc0 <_lseek_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	bf15      	itete	ne
 8008d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d76:	81a3      	strheq	r3, [r4, #12]
 8008d78:	bf18      	it	ne
 8008d7a:	81a3      	strhne	r3, [r4, #12]
 8008d7c:	bd10      	pop	{r4, pc}

08008d7e <__sclose>:
 8008d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d82:	f000 b80d 	b.w	8008da0 <_close_r>

08008d86 <memset>:
 8008d86:	4402      	add	r2, r0
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d100      	bne.n	8008d90 <memset+0xa>
 8008d8e:	4770      	bx	lr
 8008d90:	f803 1b01 	strb.w	r1, [r3], #1
 8008d94:	e7f9      	b.n	8008d8a <memset+0x4>
	...

08008d98 <_localeconv_r>:
 8008d98:	4800      	ldr	r0, [pc, #0]	; (8008d9c <_localeconv_r+0x4>)
 8008d9a:	4770      	bx	lr
 8008d9c:	20000d50 	.word	0x20000d50

08008da0 <_close_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d06      	ldr	r5, [pc, #24]	; (8008dbc <_close_r+0x1c>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f002 fac6 	bl	800b33c <_close>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_close_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_close_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20001900 	.word	0x20001900

08008dc0 <_lseek_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <_lseek_r+0x20>)
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f002 fadc 	bl	800b38c <_lseek>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_lseek_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_lseek_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20001900 	.word	0x20001900

08008de4 <_read_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_read_r+0x20>)
 8008de8:	4604      	mov	r4, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f002 fad2 	bl	800b39c <_read>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_read_r+0x1e>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_read_r+0x1e>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20001900 	.word	0x20001900

08008e08 <_sbrk_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d06      	ldr	r5, [pc, #24]	; (8008e24 <_sbrk_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	f7f8 ffd4 	bl	8001dc0 <_sbrk>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_sbrk_r+0x1a>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_sbrk_r+0x1a>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20001900 	.word	0x20001900

08008e28 <_write_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_write_r+0x20>)
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7fa ff28 	bl	8003c8c <_write>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_write_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_write_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20001900 	.word	0x20001900

08008e4c <__errno>:
 8008e4c:	4b01      	ldr	r3, [pc, #4]	; (8008e54 <__errno+0x8>)
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000c5c 	.word	0x20000c5c

08008e58 <__libc_init_array>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	4d0d      	ldr	r5, [pc, #52]	; (8008e90 <__libc_init_array+0x38>)
 8008e5c:	4c0d      	ldr	r4, [pc, #52]	; (8008e94 <__libc_init_array+0x3c>)
 8008e5e:	1b64      	subs	r4, r4, r5
 8008e60:	10a4      	asrs	r4, r4, #2
 8008e62:	2600      	movs	r6, #0
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	d109      	bne.n	8008e7c <__libc_init_array+0x24>
 8008e68:	4d0b      	ldr	r5, [pc, #44]	; (8008e98 <__libc_init_array+0x40>)
 8008e6a:	4c0c      	ldr	r4, [pc, #48]	; (8008e9c <__libc_init_array+0x44>)
 8008e6c:	f002 faa0 	bl	800b3b0 <_init>
 8008e70:	1b64      	subs	r4, r4, r5
 8008e72:	10a4      	asrs	r4, r4, #2
 8008e74:	2600      	movs	r6, #0
 8008e76:	42a6      	cmp	r6, r4
 8008e78:	d105      	bne.n	8008e86 <__libc_init_array+0x2e>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e80:	4798      	blx	r3
 8008e82:	3601      	adds	r6, #1
 8008e84:	e7ee      	b.n	8008e64 <__libc_init_array+0xc>
 8008e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8a:	4798      	blx	r3
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	e7f2      	b.n	8008e76 <__libc_init_array+0x1e>
 8008e90:	0803e454 	.word	0x0803e454
 8008e94:	0803e454 	.word	0x0803e454
 8008e98:	0803e454 	.word	0x0803e454
 8008e9c:	0803e458 	.word	0x0803e458

08008ea0 <__retarget_lock_init_recursive>:
 8008ea0:	4770      	bx	lr

08008ea2 <__retarget_lock_acquire_recursive>:
 8008ea2:	4770      	bx	lr

08008ea4 <__retarget_lock_release_recursive>:
 8008ea4:	4770      	bx	lr

08008ea6 <memcpy>:
 8008ea6:	440a      	add	r2, r1
 8008ea8:	4291      	cmp	r1, r2
 8008eaa:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eae:	d100      	bne.n	8008eb2 <memcpy+0xc>
 8008eb0:	4770      	bx	lr
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ebc:	4291      	cmp	r1, r2
 8008ebe:	d1f9      	bne.n	8008eb4 <memcpy+0xe>
 8008ec0:	bd10      	pop	{r4, pc}

08008ec2 <quorem>:
 8008ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec6:	6903      	ldr	r3, [r0, #16]
 8008ec8:	690c      	ldr	r4, [r1, #16]
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db7e      	blt.n	8008fce <quorem+0x10c>
 8008ed0:	3c01      	subs	r4, #1
 8008ed2:	f101 0814 	add.w	r8, r1, #20
 8008ed6:	f100 0514 	add.w	r5, r0, #20
 8008eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	429a      	cmp	r2, r3
 8008eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ef8:	d331      	bcc.n	8008f5e <quorem+0x9c>
 8008efa:	f04f 0e00 	mov.w	lr, #0
 8008efe:	4640      	mov	r0, r8
 8008f00:	46ac      	mov	ip, r5
 8008f02:	46f2      	mov	sl, lr
 8008f04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f08:	b293      	uxth	r3, r2
 8008f0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008f0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f12:	0c1a      	lsrs	r2, r3, #16
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	ebaa 0303 	sub.w	r3, sl, r3
 8008f1a:	f8dc a000 	ldr.w	sl, [ip]
 8008f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f22:	fb06 220e 	mla	r2, r6, lr, r2
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f2e:	b292      	uxth	r2, r2
 8008f30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f38:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f3c:	4581      	cmp	r9, r0
 8008f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f42:	f84c 3b04 	str.w	r3, [ip], #4
 8008f46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f4a:	d2db      	bcs.n	8008f04 <quorem+0x42>
 8008f4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f50:	b92b      	cbnz	r3, 8008f5e <quorem+0x9c>
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	3b04      	subs	r3, #4
 8008f56:	429d      	cmp	r5, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	d32c      	bcc.n	8008fb6 <quorem+0xf4>
 8008f5c:	613c      	str	r4, [r7, #16]
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f001 f8f4 	bl	800a14c <__mcmp>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	db22      	blt.n	8008fae <quorem+0xec>
 8008f68:	3601      	adds	r6, #1
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f72:	f8d1 c000 	ldr.w	ip, [r1]
 8008f76:	b293      	uxth	r3, r2
 8008f78:	1ac3      	subs	r3, r0, r3
 8008f7a:	0c12      	lsrs	r2, r2, #16
 8008f7c:	fa13 f38c 	uxtah	r3, r3, ip
 8008f80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f8e:	45c1      	cmp	r9, r8
 8008f90:	f841 3b04 	str.w	r3, [r1], #4
 8008f94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f98:	d2e9      	bcs.n	8008f6e <quorem+0xac>
 8008f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fa2:	b922      	cbnz	r2, 8008fae <quorem+0xec>
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	429d      	cmp	r5, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	d30a      	bcc.n	8008fc2 <quorem+0x100>
 8008fac:	613c      	str	r4, [r7, #16]
 8008fae:	4630      	mov	r0, r6
 8008fb0:	b003      	add	sp, #12
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	d1ce      	bne.n	8008f5c <quorem+0x9a>
 8008fbe:	3c01      	subs	r4, #1
 8008fc0:	e7c9      	b.n	8008f56 <quorem+0x94>
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d1f0      	bne.n	8008fac <quorem+0xea>
 8008fca:	3c01      	subs	r4, #1
 8008fcc:	e7eb      	b.n	8008fa6 <quorem+0xe4>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e7ee      	b.n	8008fb0 <quorem+0xee>
 8008fd2:	0000      	movs	r0, r0
 8008fd4:	0000      	movs	r0, r0
	...

08008fd8 <_dtoa_r>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b04 	vpush	{d8-d9}
 8008fe0:	69c5      	ldr	r5, [r0, #28]
 8008fe2:	b093      	sub	sp, #76	; 0x4c
 8008fe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fe8:	ec57 6b10 	vmov	r6, r7, d0
 8008fec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ff0:	9107      	str	r1, [sp, #28]
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff8:	b975      	cbnz	r5, 8009018 <_dtoa_r+0x40>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7fa fe78 	bl	8003cf0 <__wrap_malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	61e0      	str	r0, [r4, #28]
 8009004:	b920      	cbnz	r0, 8009010 <_dtoa_r+0x38>
 8009006:	4bae      	ldr	r3, [pc, #696]	; (80092c0 <_dtoa_r+0x2e8>)
 8009008:	21ef      	movs	r1, #239	; 0xef
 800900a:	48ae      	ldr	r0, [pc, #696]	; (80092c4 <_dtoa_r+0x2ec>)
 800900c:	f001 fbc6 	bl	800a79c <__assert_func>
 8009010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009014:	6005      	str	r5, [r0, #0]
 8009016:	60c5      	str	r5, [r0, #12]
 8009018:	69e3      	ldr	r3, [r4, #28]
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	b151      	cbz	r1, 8009034 <_dtoa_r+0x5c>
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	604a      	str	r2, [r1, #4]
 8009022:	2301      	movs	r3, #1
 8009024:	4093      	lsls	r3, r2
 8009026:	608b      	str	r3, [r1, #8]
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fe53 	bl	8009cd4 <_Bfree>
 800902e:	69e3      	ldr	r3, [r4, #28]
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	1e3b      	subs	r3, r7, #0
 8009036:	bfbb      	ittet	lt
 8009038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800903c:	9303      	strlt	r3, [sp, #12]
 800903e:	2300      	movge	r3, #0
 8009040:	2201      	movlt	r2, #1
 8009042:	bfac      	ite	ge
 8009044:	f8c8 3000 	strge.w	r3, [r8]
 8009048:	f8c8 2000 	strlt.w	r2, [r8]
 800904c:	4b9e      	ldr	r3, [pc, #632]	; (80092c8 <_dtoa_r+0x2f0>)
 800904e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009052:	ea33 0308 	bics.w	r3, r3, r8
 8009056:	d11b      	bne.n	8009090 <_dtoa_r+0xb8>
 8009058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800905a:	f242 730f 	movw	r3, #9999	; 0x270f
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009064:	4333      	orrs	r3, r6
 8009066:	f000 8593 	beq.w	8009b90 <_dtoa_r+0xbb8>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	b963      	cbnz	r3, 8009088 <_dtoa_r+0xb0>
 800906e:	4b97      	ldr	r3, [pc, #604]	; (80092cc <_dtoa_r+0x2f4>)
 8009070:	e027      	b.n	80090c2 <_dtoa_r+0xea>
 8009072:	4b97      	ldr	r3, [pc, #604]	; (80092d0 <_dtoa_r+0x2f8>)
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	9800      	ldr	r0, [sp, #0]
 800907e:	b013      	add	sp, #76	; 0x4c
 8009080:	ecbd 8b04 	vpop	{d8-d9}
 8009084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009088:	4b90      	ldr	r3, [pc, #576]	; (80092cc <_dtoa_r+0x2f4>)
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	3303      	adds	r3, #3
 800908e:	e7f3      	b.n	8009078 <_dtoa_r+0xa0>
 8009090:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009094:	2200      	movs	r2, #0
 8009096:	ec51 0b17 	vmov	r0, r1, d7
 800909a:	eeb0 8a47 	vmov.f32	s16, s14
 800909e:	eef0 8a67 	vmov.f32	s17, s15
 80090a2:	2300      	movs	r3, #0
 80090a4:	f7f7 fd30 	bl	8000b08 <__aeabi_dcmpeq>
 80090a8:	4681      	mov	r9, r0
 80090aa:	b160      	cbz	r0, 80090c6 <_dtoa_r+0xee>
 80090ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090ae:	2301      	movs	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8568 	beq.w	8009b8a <_dtoa_r+0xbb2>
 80090ba:	4b86      	ldr	r3, [pc, #536]	; (80092d4 <_dtoa_r+0x2fc>)
 80090bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	e7da      	b.n	800907c <_dtoa_r+0xa4>
 80090c6:	aa10      	add	r2, sp, #64	; 0x40
 80090c8:	a911      	add	r1, sp, #68	; 0x44
 80090ca:	4620      	mov	r0, r4
 80090cc:	eeb0 0a48 	vmov.f32	s0, s16
 80090d0:	eef0 0a68 	vmov.f32	s1, s17
 80090d4:	f001 f8e0 	bl	800a298 <__d2b>
 80090d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80090dc:	4682      	mov	sl, r0
 80090de:	2d00      	cmp	r5, #0
 80090e0:	d07f      	beq.n	80091e2 <_dtoa_r+0x20a>
 80090e2:	ee18 3a90 	vmov	r3, s17
 80090e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80090ee:	ec51 0b18 	vmov	r0, r1, d8
 80090f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80090fe:	4619      	mov	r1, r3
 8009100:	2200      	movs	r2, #0
 8009102:	4b75      	ldr	r3, [pc, #468]	; (80092d8 <_dtoa_r+0x300>)
 8009104:	f7f7 f8e0 	bl	80002c8 <__aeabi_dsub>
 8009108:	a367      	add	r3, pc, #412	; (adr r3, 80092a8 <_dtoa_r+0x2d0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa93 	bl	8000638 <__aeabi_dmul>
 8009112:	a367      	add	r3, pc, #412	; (adr r3, 80092b0 <_dtoa_r+0x2d8>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f8d8 	bl	80002cc <__adddf3>
 800911c:	4606      	mov	r6, r0
 800911e:	4628      	mov	r0, r5
 8009120:	460f      	mov	r7, r1
 8009122:	f7f7 fa1f 	bl	8000564 <__aeabi_i2d>
 8009126:	a364      	add	r3, pc, #400	; (adr r3, 80092b8 <_dtoa_r+0x2e0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 fa84 	bl	8000638 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f7f7 f8c8 	bl	80002cc <__adddf3>
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	f7f7 fd2a 	bl	8000b98 <__aeabi_d2iz>
 8009144:	2200      	movs	r2, #0
 8009146:	4683      	mov	fp, r0
 8009148:	2300      	movs	r3, #0
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 fce5 	bl	8000b1c <__aeabi_dcmplt>
 8009152:	b148      	cbz	r0, 8009168 <_dtoa_r+0x190>
 8009154:	4658      	mov	r0, fp
 8009156:	f7f7 fa05 	bl	8000564 <__aeabi_i2d>
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	f7f7 fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8009162:	b908      	cbnz	r0, 8009168 <_dtoa_r+0x190>
 8009164:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009168:	f1bb 0f16 	cmp.w	fp, #22
 800916c:	d857      	bhi.n	800921e <_dtoa_r+0x246>
 800916e:	4b5b      	ldr	r3, [pc, #364]	; (80092dc <_dtoa_r+0x304>)
 8009170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	ec51 0b18 	vmov	r0, r1, d8
 800917c:	f7f7 fcce 	bl	8000b1c <__aeabi_dcmplt>
 8009180:	2800      	cmp	r0, #0
 8009182:	d04e      	beq.n	8009222 <_dtoa_r+0x24a>
 8009184:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009188:	2300      	movs	r3, #0
 800918a:	930c      	str	r3, [sp, #48]	; 0x30
 800918c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800918e:	1b5b      	subs	r3, r3, r5
 8009190:	1e5a      	subs	r2, r3, #1
 8009192:	bf45      	ittet	mi
 8009194:	f1c3 0301 	rsbmi	r3, r3, #1
 8009198:	9305      	strmi	r3, [sp, #20]
 800919a:	2300      	movpl	r3, #0
 800919c:	2300      	movmi	r3, #0
 800919e:	9206      	str	r2, [sp, #24]
 80091a0:	bf54      	ite	pl
 80091a2:	9305      	strpl	r3, [sp, #20]
 80091a4:	9306      	strmi	r3, [sp, #24]
 80091a6:	f1bb 0f00 	cmp.w	fp, #0
 80091aa:	db3c      	blt.n	8009226 <_dtoa_r+0x24e>
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80091b2:	445b      	add	r3, fp
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	2300      	movs	r3, #0
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d868      	bhi.n	8009292 <_dtoa_r+0x2ba>
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	bfc4      	itt	gt
 80091c4:	3b04      	subgt	r3, #4
 80091c6:	9307      	strgt	r3, [sp, #28]
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	f1a3 0302 	sub.w	r3, r3, #2
 80091ce:	bfcc      	ite	gt
 80091d0:	2500      	movgt	r5, #0
 80091d2:	2501      	movle	r5, #1
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	f200 8085 	bhi.w	80092e4 <_dtoa_r+0x30c>
 80091da:	e8df f003 	tbb	[pc, r3]
 80091de:	3b2e      	.short	0x3b2e
 80091e0:	5839      	.short	0x5839
 80091e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091e6:	441d      	add	r5, r3
 80091e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	bfc1      	itttt	gt
 80091f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80091f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80091fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009200:	bfd6      	itet	le
 8009202:	f1c3 0320 	rsble	r3, r3, #32
 8009206:	ea48 0003 	orrgt.w	r0, r8, r3
 800920a:	fa06 f003 	lslle.w	r0, r6, r3
 800920e:	f7f7 f999 	bl	8000544 <__aeabi_ui2d>
 8009212:	2201      	movs	r2, #1
 8009214:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009218:	3d01      	subs	r5, #1
 800921a:	920e      	str	r2, [sp, #56]	; 0x38
 800921c:	e76f      	b.n	80090fe <_dtoa_r+0x126>
 800921e:	2301      	movs	r3, #1
 8009220:	e7b3      	b.n	800918a <_dtoa_r+0x1b2>
 8009222:	900c      	str	r0, [sp, #48]	; 0x30
 8009224:	e7b2      	b.n	800918c <_dtoa_r+0x1b4>
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	eba3 030b 	sub.w	r3, r3, fp
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	f1cb 0300 	rsb	r3, fp, #0
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	2300      	movs	r3, #0
 8009236:	930b      	str	r3, [sp, #44]	; 0x2c
 8009238:	e7bf      	b.n	80091ba <_dtoa_r+0x1e2>
 800923a:	2300      	movs	r3, #0
 800923c:	9309      	str	r3, [sp, #36]	; 0x24
 800923e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	dc52      	bgt.n	80092ea <_dtoa_r+0x312>
 8009244:	2301      	movs	r3, #1
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	461a      	mov	r2, r3
 800924c:	920a      	str	r2, [sp, #40]	; 0x28
 800924e:	e00b      	b.n	8009268 <_dtoa_r+0x290>
 8009250:	2301      	movs	r3, #1
 8009252:	e7f3      	b.n	800923c <_dtoa_r+0x264>
 8009254:	2300      	movs	r3, #0
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
 8009258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925a:	445b      	add	r3, fp
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	3301      	adds	r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	bfb8      	it	lt
 8009266:	2301      	movlt	r3, #1
 8009268:	69e0      	ldr	r0, [r4, #28]
 800926a:	2100      	movs	r1, #0
 800926c:	2204      	movs	r2, #4
 800926e:	f102 0614 	add.w	r6, r2, #20
 8009272:	429e      	cmp	r6, r3
 8009274:	d93d      	bls.n	80092f2 <_dtoa_r+0x31a>
 8009276:	6041      	str	r1, [r0, #4]
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fceb 	bl	8009c54 <_Balloc>
 800927e:	9000      	str	r0, [sp, #0]
 8009280:	2800      	cmp	r0, #0
 8009282:	d139      	bne.n	80092f8 <_dtoa_r+0x320>
 8009284:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <_dtoa_r+0x308>)
 8009286:	4602      	mov	r2, r0
 8009288:	f240 11af 	movw	r1, #431	; 0x1af
 800928c:	e6bd      	b.n	800900a <_dtoa_r+0x32>
 800928e:	2301      	movs	r3, #1
 8009290:	e7e1      	b.n	8009256 <_dtoa_r+0x27e>
 8009292:	2501      	movs	r5, #1
 8009294:	2300      	movs	r3, #0
 8009296:	9307      	str	r3, [sp, #28]
 8009298:	9509      	str	r5, [sp, #36]	; 0x24
 800929a:	f04f 33ff 	mov.w	r3, #4294967295
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	2200      	movs	r2, #0
 80092a4:	2312      	movs	r3, #18
 80092a6:	e7d1      	b.n	800924c <_dtoa_r+0x274>
 80092a8:	636f4361 	.word	0x636f4361
 80092ac:	3fd287a7 	.word	0x3fd287a7
 80092b0:	8b60c8b3 	.word	0x8b60c8b3
 80092b4:	3fc68a28 	.word	0x3fc68a28
 80092b8:	509f79fb 	.word	0x509f79fb
 80092bc:	3fd34413 	.word	0x3fd34413
 80092c0:	0803e101 	.word	0x0803e101
 80092c4:	0803e118 	.word	0x0803e118
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	0803e0fd 	.word	0x0803e0fd
 80092d0:	0803e0f4 	.word	0x0803e0f4
 80092d4:	0803e0d1 	.word	0x0803e0d1
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	0803e208 	.word	0x0803e208
 80092e0:	0803e170 	.word	0x0803e170
 80092e4:	2301      	movs	r3, #1
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	e7d7      	b.n	800929a <_dtoa_r+0x2c2>
 80092ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	e7ba      	b.n	8009268 <_dtoa_r+0x290>
 80092f2:	3101      	adds	r1, #1
 80092f4:	0052      	lsls	r2, r2, #1
 80092f6:	e7ba      	b.n	800926e <_dtoa_r+0x296>
 80092f8:	69e3      	ldr	r3, [r4, #28]
 80092fa:	9a00      	ldr	r2, [sp, #0]
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	2b0e      	cmp	r3, #14
 8009302:	f200 80a8 	bhi.w	8009456 <_dtoa_r+0x47e>
 8009306:	2d00      	cmp	r5, #0
 8009308:	f000 80a5 	beq.w	8009456 <_dtoa_r+0x47e>
 800930c:	f1bb 0f00 	cmp.w	fp, #0
 8009310:	dd38      	ble.n	8009384 <_dtoa_r+0x3ac>
 8009312:	4bc0      	ldr	r3, [pc, #768]	; (8009614 <_dtoa_r+0x63c>)
 8009314:	f00b 020f 	and.w	r2, fp, #15
 8009318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800931c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009320:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009324:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009328:	d019      	beq.n	800935e <_dtoa_r+0x386>
 800932a:	4bbb      	ldr	r3, [pc, #748]	; (8009618 <_dtoa_r+0x640>)
 800932c:	ec51 0b18 	vmov	r0, r1, d8
 8009330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009334:	f7f7 faaa 	bl	800088c <__aeabi_ddiv>
 8009338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800933c:	f008 080f 	and.w	r8, r8, #15
 8009340:	2503      	movs	r5, #3
 8009342:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009618 <_dtoa_r+0x640>
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	d10a      	bne.n	8009362 <_dtoa_r+0x38a>
 800934c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	f7f7 fa9a 	bl	800088c <__aeabi_ddiv>
 8009358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935c:	e02b      	b.n	80093b6 <_dtoa_r+0x3de>
 800935e:	2502      	movs	r5, #2
 8009360:	e7ef      	b.n	8009342 <_dtoa_r+0x36a>
 8009362:	f018 0f01 	tst.w	r8, #1
 8009366:	d008      	beq.n	800937a <_dtoa_r+0x3a2>
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009370:	f7f7 f962 	bl	8000638 <__aeabi_dmul>
 8009374:	3501      	adds	r5, #1
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800937e:	f109 0908 	add.w	r9, r9, #8
 8009382:	e7e0      	b.n	8009346 <_dtoa_r+0x36e>
 8009384:	f000 809f 	beq.w	80094c6 <_dtoa_r+0x4ee>
 8009388:	f1cb 0600 	rsb	r6, fp, #0
 800938c:	4ba1      	ldr	r3, [pc, #644]	; (8009614 <_dtoa_r+0x63c>)
 800938e:	4fa2      	ldr	r7, [pc, #648]	; (8009618 <_dtoa_r+0x640>)
 8009390:	f006 020f 	and.w	r2, r6, #15
 8009394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	ec51 0b18 	vmov	r0, r1, d8
 80093a0:	f7f7 f94a 	bl	8000638 <__aeabi_dmul>
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	1136      	asrs	r6, r6, #4
 80093aa:	2300      	movs	r3, #0
 80093ac:	2502      	movs	r5, #2
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	d17e      	bne.n	80094b0 <_dtoa_r+0x4d8>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d0      	bne.n	8009358 <_dtoa_r+0x380>
 80093b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8084 	beq.w	80094ca <_dtoa_r+0x4f2>
 80093c2:	4b96      	ldr	r3, [pc, #600]	; (800961c <_dtoa_r+0x644>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f7 fba7 	bl	8000b1c <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d07b      	beq.n	80094ca <_dtoa_r+0x4f2>
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d078      	beq.n	80094ca <_dtoa_r+0x4f2>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd39      	ble.n	8009452 <_dtoa_r+0x47a>
 80093de:	4b90      	ldr	r3, [pc, #576]	; (8009620 <_dtoa_r+0x648>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 f927 	bl	8000638 <__aeabi_dmul>
 80093ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ee:	9e01      	ldr	r6, [sp, #4]
 80093f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80093f4:	3501      	adds	r5, #1
 80093f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f7 f8b2 	bl	8000564 <__aeabi_i2d>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	4b86      	ldr	r3, [pc, #536]	; (8009624 <_dtoa_r+0x64c>)
 800940a:	2200      	movs	r2, #0
 800940c:	f7f6 ff5e 	bl	80002cc <__adddf3>
 8009410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009418:	9303      	str	r3, [sp, #12]
 800941a:	2e00      	cmp	r6, #0
 800941c:	d158      	bne.n	80094d0 <_dtoa_r+0x4f8>
 800941e:	4b82      	ldr	r3, [pc, #520]	; (8009628 <_dtoa_r+0x650>)
 8009420:	2200      	movs	r2, #0
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f6 ff4f 	bl	80002c8 <__aeabi_dsub>
 800942a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942e:	4680      	mov	r8, r0
 8009430:	4689      	mov	r9, r1
 8009432:	f7f7 fb91 	bl	8000b58 <__aeabi_dcmpgt>
 8009436:	2800      	cmp	r0, #0
 8009438:	f040 8296 	bne.w	8009968 <_dtoa_r+0x990>
 800943c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009440:	4640      	mov	r0, r8
 8009442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009446:	4649      	mov	r1, r9
 8009448:	f7f7 fb68 	bl	8000b1c <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f040 8289 	bne.w	8009964 <_dtoa_r+0x98c>
 8009452:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009458:	2b00      	cmp	r3, #0
 800945a:	f2c0 814e 	blt.w	80096fa <_dtoa_r+0x722>
 800945e:	f1bb 0f0e 	cmp.w	fp, #14
 8009462:	f300 814a 	bgt.w	80096fa <_dtoa_r+0x722>
 8009466:	4b6b      	ldr	r3, [pc, #428]	; (8009614 <_dtoa_r+0x63c>)
 8009468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800946c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	f280 80dc 	bge.w	8009630 <_dtoa_r+0x658>
 8009478:	9b04      	ldr	r3, [sp, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f300 80d8 	bgt.w	8009630 <_dtoa_r+0x658>
 8009480:	f040 826f 	bne.w	8009962 <_dtoa_r+0x98a>
 8009484:	4b68      	ldr	r3, [pc, #416]	; (8009628 <_dtoa_r+0x650>)
 8009486:	2200      	movs	r2, #0
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009494:	f7f7 fb56 	bl	8000b44 <__aeabi_dcmpge>
 8009498:	9e04      	ldr	r6, [sp, #16]
 800949a:	4637      	mov	r7, r6
 800949c:	2800      	cmp	r0, #0
 800949e:	f040 8245 	bne.w	800992c <_dtoa_r+0x954>
 80094a2:	9d00      	ldr	r5, [sp, #0]
 80094a4:	2331      	movs	r3, #49	; 0x31
 80094a6:	f805 3b01 	strb.w	r3, [r5], #1
 80094aa:	f10b 0b01 	add.w	fp, fp, #1
 80094ae:	e241      	b.n	8009934 <_dtoa_r+0x95c>
 80094b0:	07f2      	lsls	r2, r6, #31
 80094b2:	d505      	bpl.n	80094c0 <_dtoa_r+0x4e8>
 80094b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b8:	f7f7 f8be 	bl	8000638 <__aeabi_dmul>
 80094bc:	3501      	adds	r5, #1
 80094be:	2301      	movs	r3, #1
 80094c0:	1076      	asrs	r6, r6, #1
 80094c2:	3708      	adds	r7, #8
 80094c4:	e773      	b.n	80093ae <_dtoa_r+0x3d6>
 80094c6:	2502      	movs	r5, #2
 80094c8:	e775      	b.n	80093b6 <_dtoa_r+0x3de>
 80094ca:	9e04      	ldr	r6, [sp, #16]
 80094cc:	465f      	mov	r7, fp
 80094ce:	e792      	b.n	80093f6 <_dtoa_r+0x41e>
 80094d0:	9900      	ldr	r1, [sp, #0]
 80094d2:	4b50      	ldr	r3, [pc, #320]	; (8009614 <_dtoa_r+0x63c>)
 80094d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094d8:	4431      	add	r1, r6
 80094da:	9102      	str	r1, [sp, #8]
 80094dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094de:	eeb0 9a47 	vmov.f32	s18, s14
 80094e2:	eef0 9a67 	vmov.f32	s19, s15
 80094e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d044      	beq.n	800957c <_dtoa_r+0x5a4>
 80094f2:	494e      	ldr	r1, [pc, #312]	; (800962c <_dtoa_r+0x654>)
 80094f4:	2000      	movs	r0, #0
 80094f6:	f7f7 f9c9 	bl	800088c <__aeabi_ddiv>
 80094fa:	ec53 2b19 	vmov	r2, r3, d9
 80094fe:	f7f6 fee3 	bl	80002c8 <__aeabi_dsub>
 8009502:	9d00      	ldr	r5, [sp, #0]
 8009504:	ec41 0b19 	vmov	d9, r0, r1
 8009508:	4649      	mov	r1, r9
 800950a:	4640      	mov	r0, r8
 800950c:	f7f7 fb44 	bl	8000b98 <__aeabi_d2iz>
 8009510:	4606      	mov	r6, r0
 8009512:	f7f7 f827 	bl	8000564 <__aeabi_i2d>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4640      	mov	r0, r8
 800951c:	4649      	mov	r1, r9
 800951e:	f7f6 fed3 	bl	80002c8 <__aeabi_dsub>
 8009522:	3630      	adds	r6, #48	; 0x30
 8009524:	f805 6b01 	strb.w	r6, [r5], #1
 8009528:	ec53 2b19 	vmov	r2, r3, d9
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	f7f7 faf4 	bl	8000b1c <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	d164      	bne.n	8009602 <_dtoa_r+0x62a>
 8009538:	4642      	mov	r2, r8
 800953a:	464b      	mov	r3, r9
 800953c:	4937      	ldr	r1, [pc, #220]	; (800961c <_dtoa_r+0x644>)
 800953e:	2000      	movs	r0, #0
 8009540:	f7f6 fec2 	bl	80002c8 <__aeabi_dsub>
 8009544:	ec53 2b19 	vmov	r2, r3, d9
 8009548:	f7f7 fae8 	bl	8000b1c <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	f040 80b6 	bne.w	80096be <_dtoa_r+0x6e6>
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	429d      	cmp	r5, r3
 8009556:	f43f af7c 	beq.w	8009452 <_dtoa_r+0x47a>
 800955a:	4b31      	ldr	r3, [pc, #196]	; (8009620 <_dtoa_r+0x648>)
 800955c:	ec51 0b19 	vmov	r0, r1, d9
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f869 	bl	8000638 <__aeabi_dmul>
 8009566:	4b2e      	ldr	r3, [pc, #184]	; (8009620 <_dtoa_r+0x648>)
 8009568:	ec41 0b19 	vmov	d9, r0, r1
 800956c:	2200      	movs	r2, #0
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	f7f7 f861 	bl	8000638 <__aeabi_dmul>
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	e7c5      	b.n	8009508 <_dtoa_r+0x530>
 800957c:	ec51 0b17 	vmov	r0, r1, d7
 8009580:	f7f7 f85a 	bl	8000638 <__aeabi_dmul>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	9d00      	ldr	r5, [sp, #0]
 8009588:	930f      	str	r3, [sp, #60]	; 0x3c
 800958a:	ec41 0b19 	vmov	d9, r0, r1
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	f7f7 fb01 	bl	8000b98 <__aeabi_d2iz>
 8009596:	4606      	mov	r6, r0
 8009598:	f7f6 ffe4 	bl	8000564 <__aeabi_i2d>
 800959c:	3630      	adds	r6, #48	; 0x30
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f6 fe8f 	bl	80002c8 <__aeabi_dsub>
 80095aa:	f805 6b01 	strb.w	r6, [r5], #1
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	429d      	cmp	r5, r3
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	d124      	bne.n	8009606 <_dtoa_r+0x62e>
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <_dtoa_r+0x654>)
 80095be:	ec51 0b19 	vmov	r0, r1, d9
 80095c2:	f7f6 fe83 	bl	80002cc <__adddf3>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 fac3 	bl	8000b58 <__aeabi_dcmpgt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d173      	bne.n	80096be <_dtoa_r+0x6e6>
 80095d6:	ec53 2b19 	vmov	r2, r3, d9
 80095da:	4914      	ldr	r1, [pc, #80]	; (800962c <_dtoa_r+0x654>)
 80095dc:	2000      	movs	r0, #0
 80095de:	f7f6 fe73 	bl	80002c8 <__aeabi_dsub>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4640      	mov	r0, r8
 80095e8:	4649      	mov	r1, r9
 80095ea:	f7f7 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f af2f 	beq.w	8009452 <_dtoa_r+0x47a>
 80095f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095f6:	1e6b      	subs	r3, r5, #1
 80095f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80095fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095fe:	2b30      	cmp	r3, #48	; 0x30
 8009600:	d0f8      	beq.n	80095f4 <_dtoa_r+0x61c>
 8009602:	46bb      	mov	fp, r7
 8009604:	e04a      	b.n	800969c <_dtoa_r+0x6c4>
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <_dtoa_r+0x648>)
 8009608:	f7f7 f816 	bl	8000638 <__aeabi_dmul>
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	e7bd      	b.n	800958e <_dtoa_r+0x5b6>
 8009612:	bf00      	nop
 8009614:	0803e208 	.word	0x0803e208
 8009618:	0803e1e0 	.word	0x0803e1e0
 800961c:	3ff00000 	.word	0x3ff00000
 8009620:	40240000 	.word	0x40240000
 8009624:	401c0000 	.word	0x401c0000
 8009628:	40140000 	.word	0x40140000
 800962c:	3fe00000 	.word	0x3fe00000
 8009630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009634:	9d00      	ldr	r5, [sp, #0]
 8009636:	4642      	mov	r2, r8
 8009638:	464b      	mov	r3, r9
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f7 f925 	bl	800088c <__aeabi_ddiv>
 8009642:	f7f7 faa9 	bl	8000b98 <__aeabi_d2iz>
 8009646:	9001      	str	r0, [sp, #4]
 8009648:	f7f6 ff8c 	bl	8000564 <__aeabi_i2d>
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f6 fe34 	bl	80002c8 <__aeabi_dsub>
 8009660:	9e01      	ldr	r6, [sp, #4]
 8009662:	9f04      	ldr	r7, [sp, #16]
 8009664:	3630      	adds	r6, #48	; 0x30
 8009666:	f805 6b01 	strb.w	r6, [r5], #1
 800966a:	9e00      	ldr	r6, [sp, #0]
 800966c:	1bae      	subs	r6, r5, r6
 800966e:	42b7      	cmp	r7, r6
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	d134      	bne.n	80096e0 <_dtoa_r+0x708>
 8009676:	f7f6 fe29 	bl	80002cc <__adddf3>
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	f7f7 fa69 	bl	8000b58 <__aeabi_dcmpgt>
 8009686:	b9c8      	cbnz	r0, 80096bc <_dtoa_r+0x6e4>
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f7 fa3a 	bl	8000b08 <__aeabi_dcmpeq>
 8009694:	b110      	cbz	r0, 800969c <_dtoa_r+0x6c4>
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d40f      	bmi.n	80096bc <_dtoa_r+0x6e4>
 800969c:	4651      	mov	r1, sl
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 fb18 	bl	8009cd4 <_Bfree>
 80096a4:	2300      	movs	r3, #0
 80096a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a8:	702b      	strb	r3, [r5, #0]
 80096aa:	f10b 0301 	add.w	r3, fp, #1
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f43f ace2 	beq.w	800907c <_dtoa_r+0xa4>
 80096b8:	601d      	str	r5, [r3, #0]
 80096ba:	e4df      	b.n	800907c <_dtoa_r+0xa4>
 80096bc:	465f      	mov	r7, fp
 80096be:	462b      	mov	r3, r5
 80096c0:	461d      	mov	r5, r3
 80096c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096c6:	2a39      	cmp	r2, #57	; 0x39
 80096c8:	d106      	bne.n	80096d8 <_dtoa_r+0x700>
 80096ca:	9a00      	ldr	r2, [sp, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d1f7      	bne.n	80096c0 <_dtoa_r+0x6e8>
 80096d0:	9900      	ldr	r1, [sp, #0]
 80096d2:	2230      	movs	r2, #48	; 0x30
 80096d4:	3701      	adds	r7, #1
 80096d6:	700a      	strb	r2, [r1, #0]
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	3201      	adds	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e790      	b.n	8009602 <_dtoa_r+0x62a>
 80096e0:	4ba3      	ldr	r3, [pc, #652]	; (8009970 <_dtoa_r+0x998>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	f7f6 ffa8 	bl	8000638 <__aeabi_dmul>
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	f7f7 fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d09e      	beq.n	8009636 <_dtoa_r+0x65e>
 80096f8:	e7d0      	b.n	800969c <_dtoa_r+0x6c4>
 80096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fc:	2a00      	cmp	r2, #0
 80096fe:	f000 80ca 	beq.w	8009896 <_dtoa_r+0x8be>
 8009702:	9a07      	ldr	r2, [sp, #28]
 8009704:	2a01      	cmp	r2, #1
 8009706:	f300 80ad 	bgt.w	8009864 <_dtoa_r+0x88c>
 800970a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800970c:	2a00      	cmp	r2, #0
 800970e:	f000 80a5 	beq.w	800985c <_dtoa_r+0x884>
 8009712:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009716:	9e08      	ldr	r6, [sp, #32]
 8009718:	9d05      	ldr	r5, [sp, #20]
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	441a      	add	r2, r3
 800971e:	9205      	str	r2, [sp, #20]
 8009720:	9a06      	ldr	r2, [sp, #24]
 8009722:	2101      	movs	r1, #1
 8009724:	441a      	add	r2, r3
 8009726:	4620      	mov	r0, r4
 8009728:	9206      	str	r2, [sp, #24]
 800972a:	f000 fb89 	bl	8009e40 <__i2b>
 800972e:	4607      	mov	r7, r0
 8009730:	b165      	cbz	r5, 800974c <_dtoa_r+0x774>
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dd09      	ble.n	800974c <_dtoa_r+0x774>
 8009738:	42ab      	cmp	r3, r5
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	bfa8      	it	ge
 800973e:	462b      	movge	r3, r5
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	9205      	str	r2, [sp, #20]
 8009744:	9a06      	ldr	r2, [sp, #24]
 8009746:	1aed      	subs	r5, r5, r3
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	9306      	str	r3, [sp, #24]
 800974c:	9b08      	ldr	r3, [sp, #32]
 800974e:	b1f3      	cbz	r3, 800978e <_dtoa_r+0x7b6>
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a3 	beq.w	800989e <_dtoa_r+0x8c6>
 8009758:	2e00      	cmp	r6, #0
 800975a:	dd10      	ble.n	800977e <_dtoa_r+0x7a6>
 800975c:	4639      	mov	r1, r7
 800975e:	4632      	mov	r2, r6
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fc2d 	bl	8009fc0 <__pow5mult>
 8009766:	4652      	mov	r2, sl
 8009768:	4601      	mov	r1, r0
 800976a:	4607      	mov	r7, r0
 800976c:	4620      	mov	r0, r4
 800976e:	f000 fb7d 	bl	8009e6c <__multiply>
 8009772:	4651      	mov	r1, sl
 8009774:	4680      	mov	r8, r0
 8009776:	4620      	mov	r0, r4
 8009778:	f000 faac 	bl	8009cd4 <_Bfree>
 800977c:	46c2      	mov	sl, r8
 800977e:	9b08      	ldr	r3, [sp, #32]
 8009780:	1b9a      	subs	r2, r3, r6
 8009782:	d004      	beq.n	800978e <_dtoa_r+0x7b6>
 8009784:	4651      	mov	r1, sl
 8009786:	4620      	mov	r0, r4
 8009788:	f000 fc1a 	bl	8009fc0 <__pow5mult>
 800978c:	4682      	mov	sl, r0
 800978e:	2101      	movs	r1, #1
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fb55 	bl	8009e40 <__i2b>
 8009796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	4606      	mov	r6, r0
 800979c:	f340 8081 	ble.w	80098a2 <_dtoa_r+0x8ca>
 80097a0:	461a      	mov	r2, r3
 80097a2:	4601      	mov	r1, r0
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 fc0b 	bl	8009fc0 <__pow5mult>
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	4606      	mov	r6, r0
 80097b0:	dd7a      	ble.n	80098a8 <_dtoa_r+0x8d0>
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	6933      	ldr	r3, [r6, #16]
 80097b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	f000 faf1 	bl	8009da4 <__hi0bits>
 80097c2:	f1c0 0020 	rsb	r0, r0, #32
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	4418      	add	r0, r3
 80097ca:	f010 001f 	ands.w	r0, r0, #31
 80097ce:	f000 8094 	beq.w	80098fa <_dtoa_r+0x922>
 80097d2:	f1c0 0320 	rsb	r3, r0, #32
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	f340 8085 	ble.w	80098e6 <_dtoa_r+0x90e>
 80097dc:	9b05      	ldr	r3, [sp, #20]
 80097de:	f1c0 001c 	rsb	r0, r0, #28
 80097e2:	4403      	add	r3, r0
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	4403      	add	r3, r0
 80097ea:	4405      	add	r5, r0
 80097ec:	9306      	str	r3, [sp, #24]
 80097ee:	9b05      	ldr	r3, [sp, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x828>
 80097f4:	4651      	mov	r1, sl
 80097f6:	461a      	mov	r2, r3
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fc3b 	bl	800a074 <__lshift>
 80097fe:	4682      	mov	sl, r0
 8009800:	9b06      	ldr	r3, [sp, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x83a>
 8009806:	4631      	mov	r1, r6
 8009808:	461a      	mov	r2, r3
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fc32 	bl	800a074 <__lshift>
 8009810:	4606      	mov	r6, r0
 8009812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009814:	2b00      	cmp	r3, #0
 8009816:	d072      	beq.n	80098fe <_dtoa_r+0x926>
 8009818:	4631      	mov	r1, r6
 800981a:	4650      	mov	r0, sl
 800981c:	f000 fc96 	bl	800a14c <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	da6c      	bge.n	80098fe <_dtoa_r+0x926>
 8009824:	2300      	movs	r3, #0
 8009826:	4651      	mov	r1, sl
 8009828:	220a      	movs	r2, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fa74 	bl	8009d18 <__multadd>
 8009830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009836:	4682      	mov	sl, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 81b0 	beq.w	8009b9e <_dtoa_r+0xbc6>
 800983e:	2300      	movs	r3, #0
 8009840:	4639      	mov	r1, r7
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fa67 	bl	8009d18 <__multadd>
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	4607      	mov	r7, r0
 8009850:	f300 8096 	bgt.w	8009980 <_dtoa_r+0x9a8>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc59      	bgt.n	800990e <_dtoa_r+0x936>
 800985a:	e091      	b.n	8009980 <_dtoa_r+0x9a8>
 800985c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e758      	b.n	8009716 <_dtoa_r+0x73e>
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	1e5e      	subs	r6, r3, #1
 8009868:	9b08      	ldr	r3, [sp, #32]
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfbf      	itttt	lt
 800986e:	9b08      	ldrlt	r3, [sp, #32]
 8009870:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009872:	9608      	strlt	r6, [sp, #32]
 8009874:	1af3      	sublt	r3, r6, r3
 8009876:	bfb4      	ite	lt
 8009878:	18d2      	addlt	r2, r2, r3
 800987a:	1b9e      	subge	r6, r3, r6
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	bfbc      	itt	lt
 8009880:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009882:	2600      	movlt	r6, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb7      	itett	lt
 8009888:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800988c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009890:	1a9d      	sublt	r5, r3, r2
 8009892:	2300      	movlt	r3, #0
 8009894:	e741      	b.n	800971a <_dtoa_r+0x742>
 8009896:	9e08      	ldr	r6, [sp, #32]
 8009898:	9d05      	ldr	r5, [sp, #20]
 800989a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800989c:	e748      	b.n	8009730 <_dtoa_r+0x758>
 800989e:	9a08      	ldr	r2, [sp, #32]
 80098a0:	e770      	b.n	8009784 <_dtoa_r+0x7ac>
 80098a2:	9b07      	ldr	r3, [sp, #28]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	dc19      	bgt.n	80098dc <_dtoa_r+0x904>
 80098a8:	9b02      	ldr	r3, [sp, #8]
 80098aa:	b9bb      	cbnz	r3, 80098dc <_dtoa_r+0x904>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b2:	b99b      	cbnz	r3, 80098dc <_dtoa_r+0x904>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	051b      	lsls	r3, r3, #20
 80098be:	b183      	cbz	r3, 80098e2 <_dtoa_r+0x90a>
 80098c0:	9b05      	ldr	r3, [sp, #20]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	3301      	adds	r3, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	f04f 0801 	mov.w	r8, #1
 80098d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f47f af6f 	bne.w	80097b6 <_dtoa_r+0x7de>
 80098d8:	2001      	movs	r0, #1
 80098da:	e774      	b.n	80097c6 <_dtoa_r+0x7ee>
 80098dc:	f04f 0800 	mov.w	r8, #0
 80098e0:	e7f6      	b.n	80098d0 <_dtoa_r+0x8f8>
 80098e2:	4698      	mov	r8, r3
 80098e4:	e7f4      	b.n	80098d0 <_dtoa_r+0x8f8>
 80098e6:	d082      	beq.n	80097ee <_dtoa_r+0x816>
 80098e8:	9a05      	ldr	r2, [sp, #20]
 80098ea:	331c      	adds	r3, #28
 80098ec:	441a      	add	r2, r3
 80098ee:	9205      	str	r2, [sp, #20]
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	441a      	add	r2, r3
 80098f4:	441d      	add	r5, r3
 80098f6:	9206      	str	r2, [sp, #24]
 80098f8:	e779      	b.n	80097ee <_dtoa_r+0x816>
 80098fa:	4603      	mov	r3, r0
 80098fc:	e7f4      	b.n	80098e8 <_dtoa_r+0x910>
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc37      	bgt.n	8009974 <_dtoa_r+0x99c>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	2b02      	cmp	r3, #2
 8009908:	dd34      	ble.n	8009974 <_dtoa_r+0x99c>
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	b963      	cbnz	r3, 800992c <_dtoa_r+0x954>
 8009912:	4631      	mov	r1, r6
 8009914:	2205      	movs	r2, #5
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f9fe 	bl	8009d18 <__multadd>
 800991c:	4601      	mov	r1, r0
 800991e:	4606      	mov	r6, r0
 8009920:	4650      	mov	r0, sl
 8009922:	f000 fc13 	bl	800a14c <__mcmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	f73f adbb 	bgt.w	80094a2 <_dtoa_r+0x4ca>
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	9d00      	ldr	r5, [sp, #0]
 8009930:	ea6f 0b03 	mvn.w	fp, r3
 8009934:	f04f 0800 	mov.w	r8, #0
 8009938:	4631      	mov	r1, r6
 800993a:	4620      	mov	r0, r4
 800993c:	f000 f9ca 	bl	8009cd4 <_Bfree>
 8009940:	2f00      	cmp	r7, #0
 8009942:	f43f aeab 	beq.w	800969c <_dtoa_r+0x6c4>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d005      	beq.n	8009958 <_dtoa_r+0x980>
 800994c:	45b8      	cmp	r8, r7
 800994e:	d003      	beq.n	8009958 <_dtoa_r+0x980>
 8009950:	4641      	mov	r1, r8
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f9be 	bl	8009cd4 <_Bfree>
 8009958:	4639      	mov	r1, r7
 800995a:	4620      	mov	r0, r4
 800995c:	f000 f9ba 	bl	8009cd4 <_Bfree>
 8009960:	e69c      	b.n	800969c <_dtoa_r+0x6c4>
 8009962:	2600      	movs	r6, #0
 8009964:	4637      	mov	r7, r6
 8009966:	e7e1      	b.n	800992c <_dtoa_r+0x954>
 8009968:	46bb      	mov	fp, r7
 800996a:	4637      	mov	r7, r6
 800996c:	e599      	b.n	80094a2 <_dtoa_r+0x4ca>
 800996e:	bf00      	nop
 8009970:	40240000 	.word	0x40240000
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80c8 	beq.w	8009b0c <_dtoa_r+0xb34>
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	2d00      	cmp	r5, #0
 8009982:	dd05      	ble.n	8009990 <_dtoa_r+0x9b8>
 8009984:	4639      	mov	r1, r7
 8009986:	462a      	mov	r2, r5
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fb73 	bl	800a074 <__lshift>
 800998e:	4607      	mov	r7, r0
 8009990:	f1b8 0f00 	cmp.w	r8, #0
 8009994:	d05b      	beq.n	8009a4e <_dtoa_r+0xa76>
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 f95b 	bl	8009c54 <_Balloc>
 800999e:	4605      	mov	r5, r0
 80099a0:	b928      	cbnz	r0, 80099ae <_dtoa_r+0x9d6>
 80099a2:	4b83      	ldr	r3, [pc, #524]	; (8009bb0 <_dtoa_r+0xbd8>)
 80099a4:	4602      	mov	r2, r0
 80099a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80099aa:	f7ff bb2e 	b.w	800900a <_dtoa_r+0x32>
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	3202      	adds	r2, #2
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	f107 010c 	add.w	r1, r7, #12
 80099b8:	300c      	adds	r0, #12
 80099ba:	f7ff fa74 	bl	8008ea6 <memcpy>
 80099be:	2201      	movs	r2, #1
 80099c0:	4629      	mov	r1, r5
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fb56 	bl	800a074 <__lshift>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d2:	4413      	add	r3, r2
 80099d4:	9308      	str	r3, [sp, #32]
 80099d6:	9b02      	ldr	r3, [sp, #8]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	46b8      	mov	r8, r7
 80099de:	9306      	str	r3, [sp, #24]
 80099e0:	4607      	mov	r7, r0
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	4631      	mov	r1, r6
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4650      	mov	r0, sl
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	f7ff fa69 	bl	8008ec2 <quorem>
 80099f0:	4641      	mov	r1, r8
 80099f2:	9002      	str	r0, [sp, #8]
 80099f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099f8:	4650      	mov	r0, sl
 80099fa:	f000 fba7 	bl	800a14c <__mcmp>
 80099fe:	463a      	mov	r2, r7
 8009a00:	9005      	str	r0, [sp, #20]
 8009a02:	4631      	mov	r1, r6
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fbbd 	bl	800a184 <__mdiff>
 8009a0a:	68c2      	ldr	r2, [r0, #12]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	bb02      	cbnz	r2, 8009a52 <_dtoa_r+0xa7a>
 8009a10:	4601      	mov	r1, r0
 8009a12:	4650      	mov	r0, sl
 8009a14:	f000 fb9a 	bl	800a14c <__mcmp>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a20:	f000 f958 	bl	8009cd4 <_Bfree>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a28:	9d04      	ldr	r5, [sp, #16]
 8009a2a:	ea43 0102 	orr.w	r1, r3, r2
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	4319      	orrs	r1, r3
 8009a32:	d110      	bne.n	8009a56 <_dtoa_r+0xa7e>
 8009a34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a38:	d029      	beq.n	8009a8e <_dtoa_r+0xab6>
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd02      	ble.n	8009a46 <_dtoa_r+0xa6e>
 8009a40:	9b02      	ldr	r3, [sp, #8]
 8009a42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	f883 9000 	strb.w	r9, [r3]
 8009a4c:	e774      	b.n	8009938 <_dtoa_r+0x960>
 8009a4e:	4638      	mov	r0, r7
 8009a50:	e7ba      	b.n	80099c8 <_dtoa_r+0x9f0>
 8009a52:	2201      	movs	r2, #1
 8009a54:	e7e1      	b.n	8009a1a <_dtoa_r+0xa42>
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	db04      	blt.n	8009a66 <_dtoa_r+0xa8e>
 8009a5c:	9907      	ldr	r1, [sp, #28]
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	9906      	ldr	r1, [sp, #24]
 8009a62:	430b      	orrs	r3, r1
 8009a64:	d120      	bne.n	8009aa8 <_dtoa_r+0xad0>
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	dded      	ble.n	8009a46 <_dtoa_r+0xa6e>
 8009a6a:	4651      	mov	r1, sl
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fb00 	bl	800a074 <__lshift>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4682      	mov	sl, r0
 8009a78:	f000 fb68 	bl	800a14c <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	dc03      	bgt.n	8009a88 <_dtoa_r+0xab0>
 8009a80:	d1e1      	bne.n	8009a46 <_dtoa_r+0xa6e>
 8009a82:	f019 0f01 	tst.w	r9, #1
 8009a86:	d0de      	beq.n	8009a46 <_dtoa_r+0xa6e>
 8009a88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a8c:	d1d8      	bne.n	8009a40 <_dtoa_r+0xa68>
 8009a8e:	9a01      	ldr	r2, [sp, #4]
 8009a90:	2339      	movs	r3, #57	; 0x39
 8009a92:	7013      	strb	r3, [r2, #0]
 8009a94:	462b      	mov	r3, r5
 8009a96:	461d      	mov	r5, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a9e:	2a39      	cmp	r2, #57	; 0x39
 8009aa0:	d06c      	beq.n	8009b7c <_dtoa_r+0xba4>
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e747      	b.n	8009938 <_dtoa_r+0x960>
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	dd07      	ble.n	8009abc <_dtoa_r+0xae4>
 8009aac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ab0:	d0ed      	beq.n	8009a8e <_dtoa_r+0xab6>
 8009ab2:	9a01      	ldr	r2, [sp, #4]
 8009ab4:	f109 0301 	add.w	r3, r9, #1
 8009ab8:	7013      	strb	r3, [r2, #0]
 8009aba:	e73d      	b.n	8009938 <_dtoa_r+0x960>
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	9a08      	ldr	r2, [sp, #32]
 8009ac0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d043      	beq.n	8009b50 <_dtoa_r+0xb78>
 8009ac8:	4651      	mov	r1, sl
 8009aca:	2300      	movs	r3, #0
 8009acc:	220a      	movs	r2, #10
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f922 	bl	8009d18 <__multadd>
 8009ad4:	45b8      	cmp	r8, r7
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	f04f 020a 	mov.w	r2, #10
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	d107      	bne.n	8009af6 <_dtoa_r+0xb1e>
 8009ae6:	f000 f917 	bl	8009d18 <__multadd>
 8009aea:	4680      	mov	r8, r0
 8009aec:	4607      	mov	r7, r0
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	3301      	adds	r3, #1
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	e775      	b.n	80099e2 <_dtoa_r+0xa0a>
 8009af6:	f000 f90f 	bl	8009d18 <__multadd>
 8009afa:	4639      	mov	r1, r7
 8009afc:	4680      	mov	r8, r0
 8009afe:	2300      	movs	r3, #0
 8009b00:	220a      	movs	r2, #10
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 f908 	bl	8009d18 <__multadd>
 8009b08:	4607      	mov	r7, r0
 8009b0a:	e7f0      	b.n	8009aee <_dtoa_r+0xb16>
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	9d00      	ldr	r5, [sp, #0]
 8009b12:	4631      	mov	r1, r6
 8009b14:	4650      	mov	r0, sl
 8009b16:	f7ff f9d4 	bl	8008ec2 <quorem>
 8009b1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	f805 9b01 	strb.w	r9, [r5], #1
 8009b24:	1aea      	subs	r2, r5, r3
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	dd07      	ble.n	8009b3c <_dtoa_r+0xb64>
 8009b2c:	4651      	mov	r1, sl
 8009b2e:	2300      	movs	r3, #0
 8009b30:	220a      	movs	r2, #10
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f8f0 	bl	8009d18 <__multadd>
 8009b38:	4682      	mov	sl, r0
 8009b3a:	e7ea      	b.n	8009b12 <_dtoa_r+0xb3a>
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfc8      	it	gt
 8009b42:	461d      	movgt	r5, r3
 8009b44:	9b00      	ldr	r3, [sp, #0]
 8009b46:	bfd8      	it	le
 8009b48:	2501      	movle	r5, #1
 8009b4a:	441d      	add	r5, r3
 8009b4c:	f04f 0800 	mov.w	r8, #0
 8009b50:	4651      	mov	r1, sl
 8009b52:	2201      	movs	r2, #1
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fa8d 	bl	800a074 <__lshift>
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	f000 faf5 	bl	800a14c <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	dc96      	bgt.n	8009a94 <_dtoa_r+0xabc>
 8009b66:	d102      	bne.n	8009b6e <_dtoa_r+0xb96>
 8009b68:	f019 0f01 	tst.w	r9, #1
 8009b6c:	d192      	bne.n	8009a94 <_dtoa_r+0xabc>
 8009b6e:	462b      	mov	r3, r5
 8009b70:	461d      	mov	r5, r3
 8009b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b76:	2a30      	cmp	r2, #48	; 0x30
 8009b78:	d0fa      	beq.n	8009b70 <_dtoa_r+0xb98>
 8009b7a:	e6dd      	b.n	8009938 <_dtoa_r+0x960>
 8009b7c:	9a00      	ldr	r2, [sp, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d189      	bne.n	8009a96 <_dtoa_r+0xabe>
 8009b82:	f10b 0b01 	add.w	fp, fp, #1
 8009b86:	2331      	movs	r3, #49	; 0x31
 8009b88:	e796      	b.n	8009ab8 <_dtoa_r+0xae0>
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <_dtoa_r+0xbdc>)
 8009b8c:	f7ff ba99 	b.w	80090c2 <_dtoa_r+0xea>
 8009b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f aa6d 	bne.w	8009072 <_dtoa_r+0x9a>
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <_dtoa_r+0xbe0>)
 8009b9a:	f7ff ba92 	b.w	80090c2 <_dtoa_r+0xea>
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dcb5      	bgt.n	8009b10 <_dtoa_r+0xb38>
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	f73f aeb1 	bgt.w	800990e <_dtoa_r+0x936>
 8009bac:	e7b0      	b.n	8009b10 <_dtoa_r+0xb38>
 8009bae:	bf00      	nop
 8009bb0:	0803e170 	.word	0x0803e170
 8009bb4:	0803e0d0 	.word	0x0803e0d0
 8009bb8:	0803e0f4 	.word	0x0803e0f4

08009bbc <_free_r>:
 8009bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d044      	beq.n	8009c4c <_free_r+0x90>
 8009bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f1a1 0404 	sub.w	r4, r1, #4
 8009bce:	bfb8      	it	lt
 8009bd0:	18e4      	addlt	r4, r4, r3
 8009bd2:	f7fe fb11 	bl	80081f8 <__malloc_lock>
 8009bd6:	4a1e      	ldr	r2, [pc, #120]	; (8009c50 <_free_r+0x94>)
 8009bd8:	9801      	ldr	r0, [sp, #4]
 8009bda:	6813      	ldr	r3, [r2, #0]
 8009bdc:	b933      	cbnz	r3, 8009bec <_free_r+0x30>
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	6014      	str	r4, [r2, #0]
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009be8:	f7fe bb0c 	b.w	8008204 <__malloc_unlock>
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	d908      	bls.n	8009c02 <_free_r+0x46>
 8009bf0:	6825      	ldr	r5, [r4, #0]
 8009bf2:	1961      	adds	r1, r4, r5
 8009bf4:	428b      	cmp	r3, r1
 8009bf6:	bf01      	itttt	eq
 8009bf8:	6819      	ldreq	r1, [r3, #0]
 8009bfa:	685b      	ldreq	r3, [r3, #4]
 8009bfc:	1949      	addeq	r1, r1, r5
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	e7ed      	b.n	8009bde <_free_r+0x22>
 8009c02:	461a      	mov	r2, r3
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	b10b      	cbz	r3, 8009c0c <_free_r+0x50>
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	d9fa      	bls.n	8009c02 <_free_r+0x46>
 8009c0c:	6811      	ldr	r1, [r2, #0]
 8009c0e:	1855      	adds	r5, r2, r1
 8009c10:	42a5      	cmp	r5, r4
 8009c12:	d10b      	bne.n	8009c2c <_free_r+0x70>
 8009c14:	6824      	ldr	r4, [r4, #0]
 8009c16:	4421      	add	r1, r4
 8009c18:	1854      	adds	r4, r2, r1
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	6011      	str	r1, [r2, #0]
 8009c1e:	d1e0      	bne.n	8009be2 <_free_r+0x26>
 8009c20:	681c      	ldr	r4, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	6053      	str	r3, [r2, #4]
 8009c26:	440c      	add	r4, r1
 8009c28:	6014      	str	r4, [r2, #0]
 8009c2a:	e7da      	b.n	8009be2 <_free_r+0x26>
 8009c2c:	d902      	bls.n	8009c34 <_free_r+0x78>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	6003      	str	r3, [r0, #0]
 8009c32:	e7d6      	b.n	8009be2 <_free_r+0x26>
 8009c34:	6825      	ldr	r5, [r4, #0]
 8009c36:	1961      	adds	r1, r4, r5
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	bf04      	itt	eq
 8009c3c:	6819      	ldreq	r1, [r3, #0]
 8009c3e:	685b      	ldreq	r3, [r3, #4]
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	bf04      	itt	eq
 8009c44:	1949      	addeq	r1, r1, r5
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	6054      	str	r4, [r2, #4]
 8009c4a:	e7ca      	b.n	8009be2 <_free_r+0x26>
 8009c4c:	b003      	add	sp, #12
 8009c4e:	bd30      	pop	{r4, r5, pc}
 8009c50:	200017bc 	.word	0x200017bc

08009c54 <_Balloc>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	69c6      	ldr	r6, [r0, #28]
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Balloc+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7fa f846 	bl	8003cf0 <__wrap_malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	61e0      	str	r0, [r4, #28]
 8009c68:	b920      	cbnz	r0, 8009c74 <_Balloc+0x20>
 8009c6a:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <_Balloc+0x78>)
 8009c6c:	4818      	ldr	r0, [pc, #96]	; (8009cd0 <_Balloc+0x7c>)
 8009c6e:	216b      	movs	r1, #107	; 0x6b
 8009c70:	f000 fd94 	bl	800a79c <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	69e6      	ldr	r6, [r4, #28]
 8009c7e:	68f3      	ldr	r3, [r6, #12]
 8009c80:	b183      	cbz	r3, 8009ca4 <_Balloc+0x50>
 8009c82:	69e3      	ldr	r3, [r4, #28]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c8a:	b9b8      	cbnz	r0, 8009cbc <_Balloc+0x68>
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c92:	1d72      	adds	r2, r6, #5
 8009c94:	0092      	lsls	r2, r2, #2
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fd9e 	bl	800a7d8 <_calloc_r>
 8009c9c:	b160      	cbz	r0, 8009cb8 <_Balloc+0x64>
 8009c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ca2:	e00e      	b.n	8009cc2 <_Balloc+0x6e>
 8009ca4:	2221      	movs	r2, #33	; 0x21
 8009ca6:	2104      	movs	r1, #4
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fd95 	bl	800a7d8 <_calloc_r>
 8009cae:	69e3      	ldr	r3, [r4, #28]
 8009cb0:	60f0      	str	r0, [r6, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <_Balloc+0x2e>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	6802      	ldr	r2, [r0, #0]
 8009cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cc8:	e7f7      	b.n	8009cba <_Balloc+0x66>
 8009cca:	bf00      	nop
 8009ccc:	0803e101 	.word	0x0803e101
 8009cd0:	0803e181 	.word	0x0803e181

08009cd4 <_Bfree>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	69c6      	ldr	r6, [r0, #28]
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b976      	cbnz	r6, 8009cfc <_Bfree+0x28>
 8009cde:	2010      	movs	r0, #16
 8009ce0:	f7fa f806 	bl	8003cf0 <__wrap_malloc>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	61e8      	str	r0, [r5, #28]
 8009ce8:	b920      	cbnz	r0, 8009cf4 <_Bfree+0x20>
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <_Bfree+0x3c>)
 8009cec:	4809      	ldr	r0, [pc, #36]	; (8009d14 <_Bfree+0x40>)
 8009cee:	218f      	movs	r1, #143	; 0x8f
 8009cf0:	f000 fd54 	bl	800a79c <__assert_func>
 8009cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cf8:	6006      	str	r6, [r0, #0]
 8009cfa:	60c6      	str	r6, [r0, #12]
 8009cfc:	b13c      	cbz	r4, 8009d0e <_Bfree+0x3a>
 8009cfe:	69eb      	ldr	r3, [r5, #28]
 8009d00:	6862      	ldr	r2, [r4, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d08:	6021      	str	r1, [r4, #0]
 8009d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	0803e101 	.word	0x0803e101
 8009d14:	0803e181 	.word	0x0803e181

08009d18 <__multadd>:
 8009d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	690d      	ldr	r5, [r1, #16]
 8009d1e:	4607      	mov	r7, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	461e      	mov	r6, r3
 8009d24:	f101 0c14 	add.w	ip, r1, #20
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d2e:	b299      	uxth	r1, r3
 8009d30:	fb02 6101 	mla	r1, r2, r1, r6
 8009d34:	0c1e      	lsrs	r6, r3, #16
 8009d36:	0c0b      	lsrs	r3, r1, #16
 8009d38:	fb02 3306 	mla	r3, r2, r6, r3
 8009d3c:	b289      	uxth	r1, r1
 8009d3e:	3001      	adds	r0, #1
 8009d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d44:	4285      	cmp	r5, r0
 8009d46:	f84c 1b04 	str.w	r1, [ip], #4
 8009d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d4e:	dcec      	bgt.n	8009d2a <__multadd+0x12>
 8009d50:	b30e      	cbz	r6, 8009d96 <__multadd+0x7e>
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	dc19      	bgt.n	8009d8c <__multadd+0x74>
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	3101      	adds	r1, #1
 8009d5e:	f7ff ff79 	bl	8009c54 <_Balloc>
 8009d62:	4680      	mov	r8, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <__multadd+0x5a>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <__multadd+0x84>)
 8009d6a:	480d      	ldr	r0, [pc, #52]	; (8009da0 <__multadd+0x88>)
 8009d6c:	21ba      	movs	r1, #186	; 0xba
 8009d6e:	f000 fd15 	bl	800a79c <__assert_func>
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	f104 010c 	add.w	r1, r4, #12
 8009d7a:	0092      	lsls	r2, r2, #2
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f7ff f892 	bl	8008ea6 <memcpy>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff ffa5 	bl	8009cd4 <_Bfree>
 8009d8a:	4644      	mov	r4, r8
 8009d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d90:	3501      	adds	r5, #1
 8009d92:	615e      	str	r6, [r3, #20]
 8009d94:	6125      	str	r5, [r4, #16]
 8009d96:	4620      	mov	r0, r4
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	0803e170 	.word	0x0803e170
 8009da0:	0803e181 	.word	0x0803e181

08009da4 <__hi0bits>:
 8009da4:	0c03      	lsrs	r3, r0, #16
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	b9d3      	cbnz	r3, 8009de0 <__hi0bits+0x3c>
 8009daa:	0400      	lsls	r0, r0, #16
 8009dac:	2310      	movs	r3, #16
 8009dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009db2:	bf04      	itt	eq
 8009db4:	0200      	lsleq	r0, r0, #8
 8009db6:	3308      	addeq	r3, #8
 8009db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dbc:	bf04      	itt	eq
 8009dbe:	0100      	lsleq	r0, r0, #4
 8009dc0:	3304      	addeq	r3, #4
 8009dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dc6:	bf04      	itt	eq
 8009dc8:	0080      	lsleq	r0, r0, #2
 8009dca:	3302      	addeq	r3, #2
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	db05      	blt.n	8009ddc <__hi0bits+0x38>
 8009dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dd4:	f103 0301 	add.w	r3, r3, #1
 8009dd8:	bf08      	it	eq
 8009dda:	2320      	moveq	r3, #32
 8009ddc:	4618      	mov	r0, r3
 8009dde:	4770      	bx	lr
 8009de0:	2300      	movs	r3, #0
 8009de2:	e7e4      	b.n	8009dae <__hi0bits+0xa>

08009de4 <__lo0bits>:
 8009de4:	6803      	ldr	r3, [r0, #0]
 8009de6:	f013 0207 	ands.w	r2, r3, #7
 8009dea:	d00c      	beq.n	8009e06 <__lo0bits+0x22>
 8009dec:	07d9      	lsls	r1, r3, #31
 8009dee:	d422      	bmi.n	8009e36 <__lo0bits+0x52>
 8009df0:	079a      	lsls	r2, r3, #30
 8009df2:	bf49      	itett	mi
 8009df4:	085b      	lsrmi	r3, r3, #1
 8009df6:	089b      	lsrpl	r3, r3, #2
 8009df8:	6003      	strmi	r3, [r0, #0]
 8009dfa:	2201      	movmi	r2, #1
 8009dfc:	bf5c      	itt	pl
 8009dfe:	6003      	strpl	r3, [r0, #0]
 8009e00:	2202      	movpl	r2, #2
 8009e02:	4610      	mov	r0, r2
 8009e04:	4770      	bx	lr
 8009e06:	b299      	uxth	r1, r3
 8009e08:	b909      	cbnz	r1, 8009e0e <__lo0bits+0x2a>
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	2210      	movs	r2, #16
 8009e0e:	b2d9      	uxtb	r1, r3
 8009e10:	b909      	cbnz	r1, 8009e16 <__lo0bits+0x32>
 8009e12:	3208      	adds	r2, #8
 8009e14:	0a1b      	lsrs	r3, r3, #8
 8009e16:	0719      	lsls	r1, r3, #28
 8009e18:	bf04      	itt	eq
 8009e1a:	091b      	lsreq	r3, r3, #4
 8009e1c:	3204      	addeq	r2, #4
 8009e1e:	0799      	lsls	r1, r3, #30
 8009e20:	bf04      	itt	eq
 8009e22:	089b      	lsreq	r3, r3, #2
 8009e24:	3202      	addeq	r2, #2
 8009e26:	07d9      	lsls	r1, r3, #31
 8009e28:	d403      	bmi.n	8009e32 <__lo0bits+0x4e>
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	f102 0201 	add.w	r2, r2, #1
 8009e30:	d003      	beq.n	8009e3a <__lo0bits+0x56>
 8009e32:	6003      	str	r3, [r0, #0]
 8009e34:	e7e5      	b.n	8009e02 <__lo0bits+0x1e>
 8009e36:	2200      	movs	r2, #0
 8009e38:	e7e3      	b.n	8009e02 <__lo0bits+0x1e>
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	e7e1      	b.n	8009e02 <__lo0bits+0x1e>
	...

08009e40 <__i2b>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	2101      	movs	r1, #1
 8009e46:	f7ff ff05 	bl	8009c54 <_Balloc>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	b928      	cbnz	r0, 8009e5a <__i2b+0x1a>
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <__i2b+0x24>)
 8009e50:	4805      	ldr	r0, [pc, #20]	; (8009e68 <__i2b+0x28>)
 8009e52:	f240 1145 	movw	r1, #325	; 0x145
 8009e56:	f000 fca1 	bl	800a79c <__assert_func>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	6144      	str	r4, [r0, #20]
 8009e5e:	6103      	str	r3, [r0, #16]
 8009e60:	bd10      	pop	{r4, pc}
 8009e62:	bf00      	nop
 8009e64:	0803e170 	.word	0x0803e170
 8009e68:	0803e181 	.word	0x0803e181

08009e6c <__multiply>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	4691      	mov	r9, r2
 8009e72:	690a      	ldr	r2, [r1, #16]
 8009e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	bfb8      	it	lt
 8009e7c:	460b      	movlt	r3, r1
 8009e7e:	460c      	mov	r4, r1
 8009e80:	bfbc      	itt	lt
 8009e82:	464c      	movlt	r4, r9
 8009e84:	4699      	movlt	r9, r3
 8009e86:	6927      	ldr	r7, [r4, #16]
 8009e88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	6861      	ldr	r1, [r4, #4]
 8009e90:	eb07 060a 	add.w	r6, r7, sl
 8009e94:	42b3      	cmp	r3, r6
 8009e96:	b085      	sub	sp, #20
 8009e98:	bfb8      	it	lt
 8009e9a:	3101      	addlt	r1, #1
 8009e9c:	f7ff feda 	bl	8009c54 <_Balloc>
 8009ea0:	b930      	cbnz	r0, 8009eb0 <__multiply+0x44>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4b44      	ldr	r3, [pc, #272]	; (8009fb8 <__multiply+0x14c>)
 8009ea6:	4845      	ldr	r0, [pc, #276]	; (8009fbc <__multiply+0x150>)
 8009ea8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009eac:	f000 fc76 	bl	800a79c <__assert_func>
 8009eb0:	f100 0514 	add.w	r5, r0, #20
 8009eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009eb8:	462b      	mov	r3, r5
 8009eba:	2200      	movs	r2, #0
 8009ebc:	4543      	cmp	r3, r8
 8009ebe:	d321      	bcc.n	8009f04 <__multiply+0x98>
 8009ec0:	f104 0314 	add.w	r3, r4, #20
 8009ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ec8:	f109 0314 	add.w	r3, r9, #20
 8009ecc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ed0:	9202      	str	r2, [sp, #8]
 8009ed2:	1b3a      	subs	r2, r7, r4
 8009ed4:	3a15      	subs	r2, #21
 8009ed6:	f022 0203 	bic.w	r2, r2, #3
 8009eda:	3204      	adds	r2, #4
 8009edc:	f104 0115 	add.w	r1, r4, #21
 8009ee0:	428f      	cmp	r7, r1
 8009ee2:	bf38      	it	cc
 8009ee4:	2204      	movcc	r2, #4
 8009ee6:	9201      	str	r2, [sp, #4]
 8009ee8:	9a02      	ldr	r2, [sp, #8]
 8009eea:	9303      	str	r3, [sp, #12]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d80c      	bhi.n	8009f0a <__multiply+0x9e>
 8009ef0:	2e00      	cmp	r6, #0
 8009ef2:	dd03      	ble.n	8009efc <__multiply+0x90>
 8009ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d05b      	beq.n	8009fb4 <__multiply+0x148>
 8009efc:	6106      	str	r6, [r0, #16]
 8009efe:	b005      	add	sp, #20
 8009f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	f843 2b04 	str.w	r2, [r3], #4
 8009f08:	e7d8      	b.n	8009ebc <__multiply+0x50>
 8009f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f0e:	f1ba 0f00 	cmp.w	sl, #0
 8009f12:	d024      	beq.n	8009f5e <__multiply+0xf2>
 8009f14:	f104 0e14 	add.w	lr, r4, #20
 8009f18:	46a9      	mov	r9, r5
 8009f1a:	f04f 0c00 	mov.w	ip, #0
 8009f1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f22:	f8d9 1000 	ldr.w	r1, [r9]
 8009f26:	fa1f fb82 	uxth.w	fp, r2
 8009f2a:	b289      	uxth	r1, r1
 8009f2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f34:	f8d9 2000 	ldr.w	r2, [r9]
 8009f38:	4461      	add	r1, ip
 8009f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f46:	b289      	uxth	r1, r1
 8009f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f4c:	4577      	cmp	r7, lr
 8009f4e:	f849 1b04 	str.w	r1, [r9], #4
 8009f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f56:	d8e2      	bhi.n	8009f1e <__multiply+0xb2>
 8009f58:	9a01      	ldr	r2, [sp, #4]
 8009f5a:	f845 c002 	str.w	ip, [r5, r2]
 8009f5e:	9a03      	ldr	r2, [sp, #12]
 8009f60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f64:	3304      	adds	r3, #4
 8009f66:	f1b9 0f00 	cmp.w	r9, #0
 8009f6a:	d021      	beq.n	8009fb0 <__multiply+0x144>
 8009f6c:	6829      	ldr	r1, [r5, #0]
 8009f6e:	f104 0c14 	add.w	ip, r4, #20
 8009f72:	46ae      	mov	lr, r5
 8009f74:	f04f 0a00 	mov.w	sl, #0
 8009f78:	f8bc b000 	ldrh.w	fp, [ip]
 8009f7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f80:	fb09 220b 	mla	r2, r9, fp, r2
 8009f84:	4452      	add	r2, sl
 8009f86:	b289      	uxth	r1, r1
 8009f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f8c:	f84e 1b04 	str.w	r1, [lr], #4
 8009f90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f98:	f8be 1000 	ldrh.w	r1, [lr]
 8009f9c:	fb09 110a 	mla	r1, r9, sl, r1
 8009fa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009fa4:	4567      	cmp	r7, ip
 8009fa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009faa:	d8e5      	bhi.n	8009f78 <__multiply+0x10c>
 8009fac:	9a01      	ldr	r2, [sp, #4]
 8009fae:	50a9      	str	r1, [r5, r2]
 8009fb0:	3504      	adds	r5, #4
 8009fb2:	e799      	b.n	8009ee8 <__multiply+0x7c>
 8009fb4:	3e01      	subs	r6, #1
 8009fb6:	e79b      	b.n	8009ef0 <__multiply+0x84>
 8009fb8:	0803e170 	.word	0x0803e170
 8009fbc:	0803e181 	.word	0x0803e181

08009fc0 <__pow5mult>:
 8009fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	f012 0203 	ands.w	r2, r2, #3
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	d007      	beq.n	8009fe0 <__pow5mult+0x20>
 8009fd0:	4c25      	ldr	r4, [pc, #148]	; (800a068 <__pow5mult+0xa8>)
 8009fd2:	3a01      	subs	r2, #1
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fda:	f7ff fe9d 	bl	8009d18 <__multadd>
 8009fde:	4607      	mov	r7, r0
 8009fe0:	10ad      	asrs	r5, r5, #2
 8009fe2:	d03d      	beq.n	800a060 <__pow5mult+0xa0>
 8009fe4:	69f4      	ldr	r4, [r6, #28]
 8009fe6:	b97c      	cbnz	r4, 800a008 <__pow5mult+0x48>
 8009fe8:	2010      	movs	r0, #16
 8009fea:	f7f9 fe81 	bl	8003cf0 <__wrap_malloc>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	61f0      	str	r0, [r6, #28]
 8009ff2:	b928      	cbnz	r0, 800a000 <__pow5mult+0x40>
 8009ff4:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <__pow5mult+0xac>)
 8009ff6:	481e      	ldr	r0, [pc, #120]	; (800a070 <__pow5mult+0xb0>)
 8009ff8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ffc:	f000 fbce 	bl	800a79c <__assert_func>
 800a000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a004:	6004      	str	r4, [r0, #0]
 800a006:	60c4      	str	r4, [r0, #12]
 800a008:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a00c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a010:	b94c      	cbnz	r4, 800a026 <__pow5mult+0x66>
 800a012:	f240 2171 	movw	r1, #625	; 0x271
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ff12 	bl	8009e40 <__i2b>
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a022:	4604      	mov	r4, r0
 800a024:	6003      	str	r3, [r0, #0]
 800a026:	f04f 0900 	mov.w	r9, #0
 800a02a:	07eb      	lsls	r3, r5, #31
 800a02c:	d50a      	bpl.n	800a044 <__pow5mult+0x84>
 800a02e:	4639      	mov	r1, r7
 800a030:	4622      	mov	r2, r4
 800a032:	4630      	mov	r0, r6
 800a034:	f7ff ff1a 	bl	8009e6c <__multiply>
 800a038:	4639      	mov	r1, r7
 800a03a:	4680      	mov	r8, r0
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7ff fe49 	bl	8009cd4 <_Bfree>
 800a042:	4647      	mov	r7, r8
 800a044:	106d      	asrs	r5, r5, #1
 800a046:	d00b      	beq.n	800a060 <__pow5mult+0xa0>
 800a048:	6820      	ldr	r0, [r4, #0]
 800a04a:	b938      	cbnz	r0, 800a05c <__pow5mult+0x9c>
 800a04c:	4622      	mov	r2, r4
 800a04e:	4621      	mov	r1, r4
 800a050:	4630      	mov	r0, r6
 800a052:	f7ff ff0b 	bl	8009e6c <__multiply>
 800a056:	6020      	str	r0, [r4, #0]
 800a058:	f8c0 9000 	str.w	r9, [r0]
 800a05c:	4604      	mov	r4, r0
 800a05e:	e7e4      	b.n	800a02a <__pow5mult+0x6a>
 800a060:	4638      	mov	r0, r7
 800a062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a066:	bf00      	nop
 800a068:	0803e2d0 	.word	0x0803e2d0
 800a06c:	0803e101 	.word	0x0803e101
 800a070:	0803e181 	.word	0x0803e181

0800a074 <__lshift>:
 800a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	460c      	mov	r4, r1
 800a07a:	6849      	ldr	r1, [r1, #4]
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a082:	68a3      	ldr	r3, [r4, #8]
 800a084:	4607      	mov	r7, r0
 800a086:	4691      	mov	r9, r2
 800a088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a08c:	f108 0601 	add.w	r6, r8, #1
 800a090:	42b3      	cmp	r3, r6
 800a092:	db0b      	blt.n	800a0ac <__lshift+0x38>
 800a094:	4638      	mov	r0, r7
 800a096:	f7ff fddd 	bl	8009c54 <_Balloc>
 800a09a:	4605      	mov	r5, r0
 800a09c:	b948      	cbnz	r0, 800a0b2 <__lshift+0x3e>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <__lshift+0xd0>)
 800a0a2:	4829      	ldr	r0, [pc, #164]	; (800a148 <__lshift+0xd4>)
 800a0a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a0a8:	f000 fb78 	bl	800a79c <__assert_func>
 800a0ac:	3101      	adds	r1, #1
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	e7ee      	b.n	800a090 <__lshift+0x1c>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f100 0114 	add.w	r1, r0, #20
 800a0b8:	f100 0210 	add.w	r2, r0, #16
 800a0bc:	4618      	mov	r0, r3
 800a0be:	4553      	cmp	r3, sl
 800a0c0:	db33      	blt.n	800a12a <__lshift+0xb6>
 800a0c2:	6920      	ldr	r0, [r4, #16]
 800a0c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0c8:	f104 0314 	add.w	r3, r4, #20
 800a0cc:	f019 091f 	ands.w	r9, r9, #31
 800a0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0d8:	d02b      	beq.n	800a132 <__lshift+0xbe>
 800a0da:	f1c9 0e20 	rsb	lr, r9, #32
 800a0de:	468a      	mov	sl, r1
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	fa00 f009 	lsl.w	r0, r0, r9
 800a0e8:	4310      	orrs	r0, r2
 800a0ea:	f84a 0b04 	str.w	r0, [sl], #4
 800a0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f2:	459c      	cmp	ip, r3
 800a0f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0f8:	d8f3      	bhi.n	800a0e2 <__lshift+0x6e>
 800a0fa:	ebac 0304 	sub.w	r3, ip, r4
 800a0fe:	3b15      	subs	r3, #21
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	3304      	adds	r3, #4
 800a106:	f104 0015 	add.w	r0, r4, #21
 800a10a:	4584      	cmp	ip, r0
 800a10c:	bf38      	it	cc
 800a10e:	2304      	movcc	r3, #4
 800a110:	50ca      	str	r2, [r1, r3]
 800a112:	b10a      	cbz	r2, 800a118 <__lshift+0xa4>
 800a114:	f108 0602 	add.w	r6, r8, #2
 800a118:	3e01      	subs	r6, #1
 800a11a:	4638      	mov	r0, r7
 800a11c:	612e      	str	r6, [r5, #16]
 800a11e:	4621      	mov	r1, r4
 800a120:	f7ff fdd8 	bl	8009cd4 <_Bfree>
 800a124:	4628      	mov	r0, r5
 800a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a12e:	3301      	adds	r3, #1
 800a130:	e7c5      	b.n	800a0be <__lshift+0x4a>
 800a132:	3904      	subs	r1, #4
 800a134:	f853 2b04 	ldr.w	r2, [r3], #4
 800a138:	f841 2f04 	str.w	r2, [r1, #4]!
 800a13c:	459c      	cmp	ip, r3
 800a13e:	d8f9      	bhi.n	800a134 <__lshift+0xc0>
 800a140:	e7ea      	b.n	800a118 <__lshift+0xa4>
 800a142:	bf00      	nop
 800a144:	0803e170 	.word	0x0803e170
 800a148:	0803e181 	.word	0x0803e181

0800a14c <__mcmp>:
 800a14c:	b530      	push	{r4, r5, lr}
 800a14e:	6902      	ldr	r2, [r0, #16]
 800a150:	690c      	ldr	r4, [r1, #16]
 800a152:	1b12      	subs	r2, r2, r4
 800a154:	d10e      	bne.n	800a174 <__mcmp+0x28>
 800a156:	f100 0314 	add.w	r3, r0, #20
 800a15a:	3114      	adds	r1, #20
 800a15c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a160:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a164:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a168:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a16c:	42a5      	cmp	r5, r4
 800a16e:	d003      	beq.n	800a178 <__mcmp+0x2c>
 800a170:	d305      	bcc.n	800a17e <__mcmp+0x32>
 800a172:	2201      	movs	r2, #1
 800a174:	4610      	mov	r0, r2
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	4283      	cmp	r3, r0
 800a17a:	d3f3      	bcc.n	800a164 <__mcmp+0x18>
 800a17c:	e7fa      	b.n	800a174 <__mcmp+0x28>
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	e7f7      	b.n	800a174 <__mcmp+0x28>

0800a184 <__mdiff>:
 800a184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	460c      	mov	r4, r1
 800a18a:	4606      	mov	r6, r0
 800a18c:	4611      	mov	r1, r2
 800a18e:	4620      	mov	r0, r4
 800a190:	4690      	mov	r8, r2
 800a192:	f7ff ffdb 	bl	800a14c <__mcmp>
 800a196:	1e05      	subs	r5, r0, #0
 800a198:	d110      	bne.n	800a1bc <__mdiff+0x38>
 800a19a:	4629      	mov	r1, r5
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff fd59 	bl	8009c54 <_Balloc>
 800a1a2:	b930      	cbnz	r0, 800a1b2 <__mdiff+0x2e>
 800a1a4:	4b3a      	ldr	r3, [pc, #232]	; (800a290 <__mdiff+0x10c>)
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	f240 2137 	movw	r1, #567	; 0x237
 800a1ac:	4839      	ldr	r0, [pc, #228]	; (800a294 <__mdiff+0x110>)
 800a1ae:	f000 faf5 	bl	800a79c <__assert_func>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	bfa4      	itt	ge
 800a1be:	4643      	movge	r3, r8
 800a1c0:	46a0      	movge	r8, r4
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1c8:	bfa6      	itte	ge
 800a1ca:	461c      	movge	r4, r3
 800a1cc:	2500      	movge	r5, #0
 800a1ce:	2501      	movlt	r5, #1
 800a1d0:	f7ff fd40 	bl	8009c54 <_Balloc>
 800a1d4:	b920      	cbnz	r0, 800a1e0 <__mdiff+0x5c>
 800a1d6:	4b2e      	ldr	r3, [pc, #184]	; (800a290 <__mdiff+0x10c>)
 800a1d8:	4602      	mov	r2, r0
 800a1da:	f240 2145 	movw	r1, #581	; 0x245
 800a1de:	e7e5      	b.n	800a1ac <__mdiff+0x28>
 800a1e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1e4:	6926      	ldr	r6, [r4, #16]
 800a1e6:	60c5      	str	r5, [r0, #12]
 800a1e8:	f104 0914 	add.w	r9, r4, #20
 800a1ec:	f108 0514 	add.w	r5, r8, #20
 800a1f0:	f100 0e14 	add.w	lr, r0, #20
 800a1f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a1f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1fc:	f108 0210 	add.w	r2, r8, #16
 800a200:	46f2      	mov	sl, lr
 800a202:	2100      	movs	r1, #0
 800a204:	f859 3b04 	ldr.w	r3, [r9], #4
 800a208:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a20c:	fa11 f88b 	uxtah	r8, r1, fp
 800a210:	b299      	uxth	r1, r3
 800a212:	0c1b      	lsrs	r3, r3, #16
 800a214:	eba8 0801 	sub.w	r8, r8, r1
 800a218:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a21c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a220:	fa1f f888 	uxth.w	r8, r8
 800a224:	1419      	asrs	r1, r3, #16
 800a226:	454e      	cmp	r6, r9
 800a228:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a22c:	f84a 3b04 	str.w	r3, [sl], #4
 800a230:	d8e8      	bhi.n	800a204 <__mdiff+0x80>
 800a232:	1b33      	subs	r3, r6, r4
 800a234:	3b15      	subs	r3, #21
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	3304      	adds	r3, #4
 800a23c:	3415      	adds	r4, #21
 800a23e:	42a6      	cmp	r6, r4
 800a240:	bf38      	it	cc
 800a242:	2304      	movcc	r3, #4
 800a244:	441d      	add	r5, r3
 800a246:	4473      	add	r3, lr
 800a248:	469e      	mov	lr, r3
 800a24a:	462e      	mov	r6, r5
 800a24c:	4566      	cmp	r6, ip
 800a24e:	d30e      	bcc.n	800a26e <__mdiff+0xea>
 800a250:	f10c 0203 	add.w	r2, ip, #3
 800a254:	1b52      	subs	r2, r2, r5
 800a256:	f022 0203 	bic.w	r2, r2, #3
 800a25a:	3d03      	subs	r5, #3
 800a25c:	45ac      	cmp	ip, r5
 800a25e:	bf38      	it	cc
 800a260:	2200      	movcc	r2, #0
 800a262:	4413      	add	r3, r2
 800a264:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a268:	b17a      	cbz	r2, 800a28a <__mdiff+0x106>
 800a26a:	6107      	str	r7, [r0, #16]
 800a26c:	e7a4      	b.n	800a1b8 <__mdiff+0x34>
 800a26e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a272:	fa11 f288 	uxtah	r2, r1, r8
 800a276:	1414      	asrs	r4, r2, #16
 800a278:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a27c:	b292      	uxth	r2, r2
 800a27e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a282:	f84e 2b04 	str.w	r2, [lr], #4
 800a286:	1421      	asrs	r1, r4, #16
 800a288:	e7e0      	b.n	800a24c <__mdiff+0xc8>
 800a28a:	3f01      	subs	r7, #1
 800a28c:	e7ea      	b.n	800a264 <__mdiff+0xe0>
 800a28e:	bf00      	nop
 800a290:	0803e170 	.word	0x0803e170
 800a294:	0803e181 	.word	0x0803e181

0800a298 <__d2b>:
 800a298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	460f      	mov	r7, r1
 800a29e:	2101      	movs	r1, #1
 800a2a0:	ec59 8b10 	vmov	r8, r9, d0
 800a2a4:	4616      	mov	r6, r2
 800a2a6:	f7ff fcd5 	bl	8009c54 <_Balloc>
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	b930      	cbnz	r0, 800a2bc <__d2b+0x24>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	4b24      	ldr	r3, [pc, #144]	; (800a344 <__d2b+0xac>)
 800a2b2:	4825      	ldr	r0, [pc, #148]	; (800a348 <__d2b+0xb0>)
 800a2b4:	f240 310f 	movw	r1, #783	; 0x30f
 800a2b8:	f000 fa70 	bl	800a79c <__assert_func>
 800a2bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c4:	bb2d      	cbnz	r5, 800a312 <__d2b+0x7a>
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2cc:	d026      	beq.n	800a31c <__d2b+0x84>
 800a2ce:	4668      	mov	r0, sp
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	f7ff fd87 	bl	8009de4 <__lo0bits>
 800a2d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2da:	b1e8      	cbz	r0, 800a318 <__d2b+0x80>
 800a2dc:	f1c0 0320 	rsb	r3, r0, #32
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	40c2      	lsrs	r2, r0
 800a2e8:	6163      	str	r3, [r4, #20]
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	61a3      	str	r3, [r4, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bf14      	ite	ne
 800a2f4:	2202      	movne	r2, #2
 800a2f6:	2201      	moveq	r2, #1
 800a2f8:	6122      	str	r2, [r4, #16]
 800a2fa:	b1bd      	cbz	r5, 800a32c <__d2b+0x94>
 800a2fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a300:	4405      	add	r5, r0
 800a302:	603d      	str	r5, [r7, #0]
 800a304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a308:	6030      	str	r0, [r6, #0]
 800a30a:	4620      	mov	r0, r4
 800a30c:	b003      	add	sp, #12
 800a30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a316:	e7d6      	b.n	800a2c6 <__d2b+0x2e>
 800a318:	6161      	str	r1, [r4, #20]
 800a31a:	e7e7      	b.n	800a2ec <__d2b+0x54>
 800a31c:	a801      	add	r0, sp, #4
 800a31e:	f7ff fd61 	bl	8009de4 <__lo0bits>
 800a322:	9b01      	ldr	r3, [sp, #4]
 800a324:	6163      	str	r3, [r4, #20]
 800a326:	3020      	adds	r0, #32
 800a328:	2201      	movs	r2, #1
 800a32a:	e7e5      	b.n	800a2f8 <__d2b+0x60>
 800a32c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a330:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a334:	6038      	str	r0, [r7, #0]
 800a336:	6918      	ldr	r0, [r3, #16]
 800a338:	f7ff fd34 	bl	8009da4 <__hi0bits>
 800a33c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a340:	e7e2      	b.n	800a308 <__d2b+0x70>
 800a342:	bf00      	nop
 800a344:	0803e170 	.word	0x0803e170
 800a348:	0803e181 	.word	0x0803e181

0800a34c <_malloc_usable_size_r>:
 800a34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a350:	1f18      	subs	r0, r3, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfbc      	itt	lt
 800a356:	580b      	ldrlt	r3, [r1, r0]
 800a358:	18c0      	addlt	r0, r0, r3
 800a35a:	4770      	bx	lr

0800a35c <__ssputs_r>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	688e      	ldr	r6, [r1, #8]
 800a362:	461f      	mov	r7, r3
 800a364:	42be      	cmp	r6, r7
 800a366:	680b      	ldr	r3, [r1, #0]
 800a368:	4682      	mov	sl, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4690      	mov	r8, r2
 800a36e:	d82c      	bhi.n	800a3ca <__ssputs_r+0x6e>
 800a370:	898a      	ldrh	r2, [r1, #12]
 800a372:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a376:	d026      	beq.n	800a3c6 <__ssputs_r+0x6a>
 800a378:	6965      	ldr	r5, [r4, #20]
 800a37a:	6909      	ldr	r1, [r1, #16]
 800a37c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a380:	eba3 0901 	sub.w	r9, r3, r1
 800a384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a388:	1c7b      	adds	r3, r7, #1
 800a38a:	444b      	add	r3, r9
 800a38c:	106d      	asrs	r5, r5, #1
 800a38e:	429d      	cmp	r5, r3
 800a390:	bf38      	it	cc
 800a392:	461d      	movcc	r5, r3
 800a394:	0553      	lsls	r3, r2, #21
 800a396:	d527      	bpl.n	800a3e8 <__ssputs_r+0x8c>
 800a398:	4629      	mov	r1, r5
 800a39a:	f7fd fead 	bl	80080f8 <_malloc_r>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	b360      	cbz	r0, 800a3fc <__ssputs_r+0xa0>
 800a3a2:	6921      	ldr	r1, [r4, #16]
 800a3a4:	464a      	mov	r2, r9
 800a3a6:	f7fe fd7e 	bl	8008ea6 <memcpy>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	6126      	str	r6, [r4, #16]
 800a3b8:	6165      	str	r5, [r4, #20]
 800a3ba:	444e      	add	r6, r9
 800a3bc:	eba5 0509 	sub.w	r5, r5, r9
 800a3c0:	6026      	str	r6, [r4, #0]
 800a3c2:	60a5      	str	r5, [r4, #8]
 800a3c4:	463e      	mov	r6, r7
 800a3c6:	42be      	cmp	r6, r7
 800a3c8:	d900      	bls.n	800a3cc <__ssputs_r+0x70>
 800a3ca:	463e      	mov	r6, r7
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	f000 f9c9 	bl	800a768 <memmove>
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	1b9b      	subs	r3, r3, r6
 800a3da:	60a3      	str	r3, [r4, #8]
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	4433      	add	r3, r6
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	f7fd ff11 	bl	8008210 <_realloc_r>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d1e0      	bne.n	800a3b6 <__ssputs_r+0x5a>
 800a3f4:	6921      	ldr	r1, [r4, #16]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	f7ff fbe0 	bl	8009bbc <_free_r>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	f8ca 3000 	str.w	r3, [sl]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	e7e9      	b.n	800a3e4 <__ssputs_r+0x88>

0800a410 <_svfiprintf_r>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4698      	mov	r8, r3
 800a416:	898b      	ldrh	r3, [r1, #12]
 800a418:	061b      	lsls	r3, r3, #24
 800a41a:	b09d      	sub	sp, #116	; 0x74
 800a41c:	4607      	mov	r7, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	4614      	mov	r4, r2
 800a422:	d50e      	bpl.n	800a442 <_svfiprintf_r+0x32>
 800a424:	690b      	ldr	r3, [r1, #16]
 800a426:	b963      	cbnz	r3, 800a442 <_svfiprintf_r+0x32>
 800a428:	2140      	movs	r1, #64	; 0x40
 800a42a:	f7fd fe65 	bl	80080f8 <_malloc_r>
 800a42e:	6028      	str	r0, [r5, #0]
 800a430:	6128      	str	r0, [r5, #16]
 800a432:	b920      	cbnz	r0, 800a43e <_svfiprintf_r+0x2e>
 800a434:	230c      	movs	r3, #12
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	e0d0      	b.n	800a5e0 <_svfiprintf_r+0x1d0>
 800a43e:	2340      	movs	r3, #64	; 0x40
 800a440:	616b      	str	r3, [r5, #20]
 800a442:	2300      	movs	r3, #0
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
 800a446:	2320      	movs	r3, #32
 800a448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a450:	2330      	movs	r3, #48	; 0x30
 800a452:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5f8 <_svfiprintf_r+0x1e8>
 800a456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a45a:	f04f 0901 	mov.w	r9, #1
 800a45e:	4623      	mov	r3, r4
 800a460:	469a      	mov	sl, r3
 800a462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a466:	b10a      	cbz	r2, 800a46c <_svfiprintf_r+0x5c>
 800a468:	2a25      	cmp	r2, #37	; 0x25
 800a46a:	d1f9      	bne.n	800a460 <_svfiprintf_r+0x50>
 800a46c:	ebba 0b04 	subs.w	fp, sl, r4
 800a470:	d00b      	beq.n	800a48a <_svfiprintf_r+0x7a>
 800a472:	465b      	mov	r3, fp
 800a474:	4622      	mov	r2, r4
 800a476:	4629      	mov	r1, r5
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff ff6f 	bl	800a35c <__ssputs_r>
 800a47e:	3001      	adds	r0, #1
 800a480:	f000 80a9 	beq.w	800a5d6 <_svfiprintf_r+0x1c6>
 800a484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a486:	445a      	add	r2, fp
 800a488:	9209      	str	r2, [sp, #36]	; 0x24
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80a1 	beq.w	800a5d6 <_svfiprintf_r+0x1c6>
 800a494:	2300      	movs	r3, #0
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49e:	f10a 0a01 	add.w	sl, sl, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	9307      	str	r3, [sp, #28]
 800a4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ac:	4654      	mov	r4, sl
 800a4ae:	2205      	movs	r2, #5
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	4850      	ldr	r0, [pc, #320]	; (800a5f8 <_svfiprintf_r+0x1e8>)
 800a4b6:	f7f5 feab 	bl	8000210 <memchr>
 800a4ba:	9a04      	ldr	r2, [sp, #16]
 800a4bc:	b9d8      	cbnz	r0, 800a4f6 <_svfiprintf_r+0xe6>
 800a4be:	06d0      	lsls	r0, r2, #27
 800a4c0:	bf44      	itt	mi
 800a4c2:	2320      	movmi	r3, #32
 800a4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c8:	0711      	lsls	r1, r2, #28
 800a4ca:	bf44      	itt	mi
 800a4cc:	232b      	movmi	r3, #43	; 0x2b
 800a4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d8:	d015      	beq.n	800a506 <_svfiprintf_r+0xf6>
 800a4da:	9a07      	ldr	r2, [sp, #28]
 800a4dc:	4654      	mov	r4, sl
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ea:	3b30      	subs	r3, #48	; 0x30
 800a4ec:	2b09      	cmp	r3, #9
 800a4ee:	d94d      	bls.n	800a58c <_svfiprintf_r+0x17c>
 800a4f0:	b1b0      	cbz	r0, 800a520 <_svfiprintf_r+0x110>
 800a4f2:	9207      	str	r2, [sp, #28]
 800a4f4:	e014      	b.n	800a520 <_svfiprintf_r+0x110>
 800a4f6:	eba0 0308 	sub.w	r3, r0, r8
 800a4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fe:	4313      	orrs	r3, r2
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	46a2      	mov	sl, r4
 800a504:	e7d2      	b.n	800a4ac <_svfiprintf_r+0x9c>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	1d19      	adds	r1, r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	9103      	str	r1, [sp, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfbb      	ittet	lt
 800a512:	425b      	neglt	r3, r3
 800a514:	f042 0202 	orrlt.w	r2, r2, #2
 800a518:	9307      	strge	r3, [sp, #28]
 800a51a:	9307      	strlt	r3, [sp, #28]
 800a51c:	bfb8      	it	lt
 800a51e:	9204      	strlt	r2, [sp, #16]
 800a520:	7823      	ldrb	r3, [r4, #0]
 800a522:	2b2e      	cmp	r3, #46	; 0x2e
 800a524:	d10c      	bne.n	800a540 <_svfiprintf_r+0x130>
 800a526:	7863      	ldrb	r3, [r4, #1]
 800a528:	2b2a      	cmp	r3, #42	; 0x2a
 800a52a:	d134      	bne.n	800a596 <_svfiprintf_r+0x186>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	1d1a      	adds	r2, r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	9203      	str	r2, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfb8      	it	lt
 800a538:	f04f 33ff 	movlt.w	r3, #4294967295
 800a53c:	3402      	adds	r4, #2
 800a53e:	9305      	str	r3, [sp, #20]
 800a540:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a608 <_svfiprintf_r+0x1f8>
 800a544:	7821      	ldrb	r1, [r4, #0]
 800a546:	2203      	movs	r2, #3
 800a548:	4650      	mov	r0, sl
 800a54a:	f7f5 fe61 	bl	8000210 <memchr>
 800a54e:	b138      	cbz	r0, 800a560 <_svfiprintf_r+0x150>
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	eba0 000a 	sub.w	r0, r0, sl
 800a556:	2240      	movs	r2, #64	; 0x40
 800a558:	4082      	lsls	r2, r0
 800a55a:	4313      	orrs	r3, r2
 800a55c:	3401      	adds	r4, #1
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a564:	4825      	ldr	r0, [pc, #148]	; (800a5fc <_svfiprintf_r+0x1ec>)
 800a566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a56a:	2206      	movs	r2, #6
 800a56c:	f7f5 fe50 	bl	8000210 <memchr>
 800a570:	2800      	cmp	r0, #0
 800a572:	d038      	beq.n	800a5e6 <_svfiprintf_r+0x1d6>
 800a574:	4b22      	ldr	r3, [pc, #136]	; (800a600 <_svfiprintf_r+0x1f0>)
 800a576:	bb1b      	cbnz	r3, 800a5c0 <_svfiprintf_r+0x1b0>
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	3307      	adds	r3, #7
 800a57c:	f023 0307 	bic.w	r3, r3, #7
 800a580:	3308      	adds	r3, #8
 800a582:	9303      	str	r3, [sp, #12]
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	4433      	add	r3, r6
 800a588:	9309      	str	r3, [sp, #36]	; 0x24
 800a58a:	e768      	b.n	800a45e <_svfiprintf_r+0x4e>
 800a58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a590:	460c      	mov	r4, r1
 800a592:	2001      	movs	r0, #1
 800a594:	e7a6      	b.n	800a4e4 <_svfiprintf_r+0xd4>
 800a596:	2300      	movs	r3, #0
 800a598:	3401      	adds	r4, #1
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	4619      	mov	r1, r3
 800a59e:	f04f 0c0a 	mov.w	ip, #10
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a8:	3a30      	subs	r2, #48	; 0x30
 800a5aa:	2a09      	cmp	r2, #9
 800a5ac:	d903      	bls.n	800a5b6 <_svfiprintf_r+0x1a6>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0c6      	beq.n	800a540 <_svfiprintf_r+0x130>
 800a5b2:	9105      	str	r1, [sp, #20]
 800a5b4:	e7c4      	b.n	800a540 <_svfiprintf_r+0x130>
 800a5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e7f0      	b.n	800a5a2 <_svfiprintf_r+0x192>
 800a5c0:	ab03      	add	r3, sp, #12
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <_svfiprintf_r+0x1f4>)
 800a5c8:	a904      	add	r1, sp, #16
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7fd fef0 	bl	80083b0 <_printf_float>
 800a5d0:	1c42      	adds	r2, r0, #1
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	d1d6      	bne.n	800a584 <_svfiprintf_r+0x174>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	065b      	lsls	r3, r3, #25
 800a5da:	f53f af2d 	bmi.w	800a438 <_svfiprintf_r+0x28>
 800a5de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e0:	b01d      	add	sp, #116	; 0x74
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	462a      	mov	r2, r5
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <_svfiprintf_r+0x1f4>)
 800a5ee:	a904      	add	r1, sp, #16
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7fe f981 	bl	80088f8 <_printf_i>
 800a5f6:	e7eb      	b.n	800a5d0 <_svfiprintf_r+0x1c0>
 800a5f8:	0803e2dc 	.word	0x0803e2dc
 800a5fc:	0803e2e6 	.word	0x0803e2e6
 800a600:	080083b1 	.word	0x080083b1
 800a604:	0800a35d 	.word	0x0800a35d
 800a608:	0803e2e2 	.word	0x0803e2e2

0800a60c <__sflush_r>:
 800a60c:	898a      	ldrh	r2, [r1, #12]
 800a60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	4605      	mov	r5, r0
 800a614:	0710      	lsls	r0, r2, #28
 800a616:	460c      	mov	r4, r1
 800a618:	d458      	bmi.n	800a6cc <__sflush_r+0xc0>
 800a61a:	684b      	ldr	r3, [r1, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dc05      	bgt.n	800a62c <__sflush_r+0x20>
 800a620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc02      	bgt.n	800a62c <__sflush_r+0x20>
 800a626:	2000      	movs	r0, #0
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a62e:	2e00      	cmp	r6, #0
 800a630:	d0f9      	beq.n	800a626 <__sflush_r+0x1a>
 800a632:	2300      	movs	r3, #0
 800a634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a638:	682f      	ldr	r7, [r5, #0]
 800a63a:	6a21      	ldr	r1, [r4, #32]
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	d032      	beq.n	800a6a6 <__sflush_r+0x9a>
 800a640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	075a      	lsls	r2, r3, #29
 800a646:	d505      	bpl.n	800a654 <__sflush_r+0x48>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	1ac0      	subs	r0, r0, r3
 800a64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a64e:	b10b      	cbz	r3, 800a654 <__sflush_r+0x48>
 800a650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a652:	1ac0      	subs	r0, r0, r3
 800a654:	2300      	movs	r3, #0
 800a656:	4602      	mov	r2, r0
 800a658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b0      	blx	r6
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	d106      	bne.n	800a674 <__sflush_r+0x68>
 800a666:	6829      	ldr	r1, [r5, #0]
 800a668:	291d      	cmp	r1, #29
 800a66a:	d82b      	bhi.n	800a6c4 <__sflush_r+0xb8>
 800a66c:	4a29      	ldr	r2, [pc, #164]	; (800a714 <__sflush_r+0x108>)
 800a66e:	410a      	asrs	r2, r1
 800a670:	07d6      	lsls	r6, r2, #31
 800a672:	d427      	bmi.n	800a6c4 <__sflush_r+0xb8>
 800a674:	2200      	movs	r2, #0
 800a676:	6062      	str	r2, [r4, #4]
 800a678:	04d9      	lsls	r1, r3, #19
 800a67a:	6922      	ldr	r2, [r4, #16]
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	d504      	bpl.n	800a68a <__sflush_r+0x7e>
 800a680:	1c42      	adds	r2, r0, #1
 800a682:	d101      	bne.n	800a688 <__sflush_r+0x7c>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b903      	cbnz	r3, 800a68a <__sflush_r+0x7e>
 800a688:	6560      	str	r0, [r4, #84]	; 0x54
 800a68a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68c:	602f      	str	r7, [r5, #0]
 800a68e:	2900      	cmp	r1, #0
 800a690:	d0c9      	beq.n	800a626 <__sflush_r+0x1a>
 800a692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a696:	4299      	cmp	r1, r3
 800a698:	d002      	beq.n	800a6a0 <__sflush_r+0x94>
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff fa8e 	bl	8009bbc <_free_r>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6a4:	e7c0      	b.n	800a628 <__sflush_r+0x1c>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b0      	blx	r6
 800a6ac:	1c41      	adds	r1, r0, #1
 800a6ae:	d1c8      	bne.n	800a642 <__sflush_r+0x36>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0c5      	beq.n	800a642 <__sflush_r+0x36>
 800a6b6:	2b1d      	cmp	r3, #29
 800a6b8:	d001      	beq.n	800a6be <__sflush_r+0xb2>
 800a6ba:	2b16      	cmp	r3, #22
 800a6bc:	d101      	bne.n	800a6c2 <__sflush_r+0xb6>
 800a6be:	602f      	str	r7, [r5, #0]
 800a6c0:	e7b1      	b.n	800a626 <__sflush_r+0x1a>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	e7ad      	b.n	800a628 <__sflush_r+0x1c>
 800a6cc:	690f      	ldr	r7, [r1, #16]
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	d0a9      	beq.n	800a626 <__sflush_r+0x1a>
 800a6d2:	0793      	lsls	r3, r2, #30
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	bf08      	it	eq
 800a6d8:	694b      	ldreq	r3, [r1, #20]
 800a6da:	600f      	str	r7, [r1, #0]
 800a6dc:	bf18      	it	ne
 800a6de:	2300      	movne	r3, #0
 800a6e0:	eba6 0807 	sub.w	r8, r6, r7
 800a6e4:	608b      	str	r3, [r1, #8]
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	dd9c      	ble.n	800a626 <__sflush_r+0x1a>
 800a6ec:	6a21      	ldr	r1, [r4, #32]
 800a6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6f0:	4643      	mov	r3, r8
 800a6f2:	463a      	mov	r2, r7
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	dc06      	bgt.n	800a70a <__sflush_r+0xfe>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	e78e      	b.n	800a628 <__sflush_r+0x1c>
 800a70a:	4407      	add	r7, r0
 800a70c:	eba8 0800 	sub.w	r8, r8, r0
 800a710:	e7e9      	b.n	800a6e6 <__sflush_r+0xda>
 800a712:	bf00      	nop
 800a714:	dfbffffe 	.word	0xdfbffffe

0800a718 <_fflush_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	690b      	ldr	r3, [r1, #16]
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b913      	cbnz	r3, 800a728 <_fflush_r+0x10>
 800a722:	2500      	movs	r5, #0
 800a724:	4628      	mov	r0, r5
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	b118      	cbz	r0, 800a732 <_fflush_r+0x1a>
 800a72a:	6a03      	ldr	r3, [r0, #32]
 800a72c:	b90b      	cbnz	r3, 800a732 <_fflush_r+0x1a>
 800a72e:	f7fe fa91 	bl	8008c54 <__sinit>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f3      	beq.n	800a722 <_fflush_r+0xa>
 800a73a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a73c:	07d0      	lsls	r0, r2, #31
 800a73e:	d404      	bmi.n	800a74a <_fflush_r+0x32>
 800a740:	0599      	lsls	r1, r3, #22
 800a742:	d402      	bmi.n	800a74a <_fflush_r+0x32>
 800a744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a746:	f7fe fbac 	bl	8008ea2 <__retarget_lock_acquire_recursive>
 800a74a:	4628      	mov	r0, r5
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7ff ff5d 	bl	800a60c <__sflush_r>
 800a752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a754:	07da      	lsls	r2, r3, #31
 800a756:	4605      	mov	r5, r0
 800a758:	d4e4      	bmi.n	800a724 <_fflush_r+0xc>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	059b      	lsls	r3, r3, #22
 800a75e:	d4e1      	bmi.n	800a724 <_fflush_r+0xc>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f7fe fb9f 	bl	8008ea4 <__retarget_lock_release_recursive>
 800a766:	e7dd      	b.n	800a724 <_fflush_r+0xc>

0800a768 <memmove>:
 800a768:	4288      	cmp	r0, r1
 800a76a:	b510      	push	{r4, lr}
 800a76c:	eb01 0402 	add.w	r4, r1, r2
 800a770:	d902      	bls.n	800a778 <memmove+0x10>
 800a772:	4284      	cmp	r4, r0
 800a774:	4623      	mov	r3, r4
 800a776:	d807      	bhi.n	800a788 <memmove+0x20>
 800a778:	1e43      	subs	r3, r0, #1
 800a77a:	42a1      	cmp	r1, r4
 800a77c:	d008      	beq.n	800a790 <memmove+0x28>
 800a77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a782:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a786:	e7f8      	b.n	800a77a <memmove+0x12>
 800a788:	4402      	add	r2, r0
 800a78a:	4601      	mov	r1, r0
 800a78c:	428a      	cmp	r2, r1
 800a78e:	d100      	bne.n	800a792 <memmove+0x2a>
 800a790:	bd10      	pop	{r4, pc}
 800a792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a79a:	e7f7      	b.n	800a78c <memmove+0x24>

0800a79c <__assert_func>:
 800a79c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a79e:	4614      	mov	r4, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <__assert_func+0x2c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	68d8      	ldr	r0, [r3, #12]
 800a7aa:	b14c      	cbz	r4, 800a7c0 <__assert_func+0x24>
 800a7ac:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <__assert_func+0x30>)
 800a7ae:	9100      	str	r1, [sp, #0]
 800a7b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7b4:	4906      	ldr	r1, [pc, #24]	; (800a7d0 <__assert_func+0x34>)
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	f000 f844 	bl	800a844 <fiprintf>
 800a7bc:	f000 f854 	bl	800a868 <abort>
 800a7c0:	4b04      	ldr	r3, [pc, #16]	; (800a7d4 <__assert_func+0x38>)
 800a7c2:	461c      	mov	r4, r3
 800a7c4:	e7f3      	b.n	800a7ae <__assert_func+0x12>
 800a7c6:	bf00      	nop
 800a7c8:	20000c5c 	.word	0x20000c5c
 800a7cc:	0803e2f7 	.word	0x0803e2f7
 800a7d0:	0803e304 	.word	0x0803e304
 800a7d4:	0800b914 	.word	0x0800b914

0800a7d8 <_calloc_r>:
 800a7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7da:	fba1 2402 	umull	r2, r4, r1, r2
 800a7de:	b94c      	cbnz	r4, 800a7f4 <_calloc_r+0x1c>
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	9201      	str	r2, [sp, #4]
 800a7e4:	f7fd fc88 	bl	80080f8 <_malloc_r>
 800a7e8:	9a01      	ldr	r2, [sp, #4]
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b930      	cbnz	r0, 800a7fc <_calloc_r+0x24>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	b003      	add	sp, #12
 800a7f2:	bd30      	pop	{r4, r5, pc}
 800a7f4:	220c      	movs	r2, #12
 800a7f6:	6002      	str	r2, [r0, #0]
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	e7f8      	b.n	800a7ee <_calloc_r+0x16>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7fe fac2 	bl	8008d86 <memset>
 800a802:	e7f4      	b.n	800a7ee <_calloc_r+0x16>

0800a804 <__ascii_mbtowc>:
 800a804:	b082      	sub	sp, #8
 800a806:	b901      	cbnz	r1, 800a80a <__ascii_mbtowc+0x6>
 800a808:	a901      	add	r1, sp, #4
 800a80a:	b142      	cbz	r2, 800a81e <__ascii_mbtowc+0x1a>
 800a80c:	b14b      	cbz	r3, 800a822 <__ascii_mbtowc+0x1e>
 800a80e:	7813      	ldrb	r3, [r2, #0]
 800a810:	600b      	str	r3, [r1, #0]
 800a812:	7812      	ldrb	r2, [r2, #0]
 800a814:	1e10      	subs	r0, r2, #0
 800a816:	bf18      	it	ne
 800a818:	2001      	movne	r0, #1
 800a81a:	b002      	add	sp, #8
 800a81c:	4770      	bx	lr
 800a81e:	4610      	mov	r0, r2
 800a820:	e7fb      	b.n	800a81a <__ascii_mbtowc+0x16>
 800a822:	f06f 0001 	mvn.w	r0, #1
 800a826:	e7f8      	b.n	800a81a <__ascii_mbtowc+0x16>

0800a828 <__ascii_wctomb>:
 800a828:	b149      	cbz	r1, 800a83e <__ascii_wctomb+0x16>
 800a82a:	2aff      	cmp	r2, #255	; 0xff
 800a82c:	bf85      	ittet	hi
 800a82e:	238a      	movhi	r3, #138	; 0x8a
 800a830:	6003      	strhi	r3, [r0, #0]
 800a832:	700a      	strbls	r2, [r1, #0]
 800a834:	f04f 30ff 	movhi.w	r0, #4294967295
 800a838:	bf98      	it	ls
 800a83a:	2001      	movls	r0, #1
 800a83c:	4770      	bx	lr
 800a83e:	4608      	mov	r0, r1
 800a840:	4770      	bx	lr
	...

0800a844 <fiprintf>:
 800a844:	b40e      	push	{r1, r2, r3}
 800a846:	b503      	push	{r0, r1, lr}
 800a848:	4601      	mov	r1, r0
 800a84a:	ab03      	add	r3, sp, #12
 800a84c:	4805      	ldr	r0, [pc, #20]	; (800a864 <fiprintf+0x20>)
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	6800      	ldr	r0, [r0, #0]
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	f000 f837 	bl	800a8c8 <_vfiprintf_r>
 800a85a:	b002      	add	sp, #8
 800a85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a860:	b003      	add	sp, #12
 800a862:	4770      	bx	lr
 800a864:	20000c5c 	.word	0x20000c5c

0800a868 <abort>:
 800a868:	b508      	push	{r3, lr}
 800a86a:	2006      	movs	r0, #6
 800a86c:	f000 fa04 	bl	800ac78 <raise>
 800a870:	2001      	movs	r0, #1
 800a872:	f000 fd9b 	bl	800b3ac <_exit>

0800a876 <__sfputc_r>:
 800a876:	6893      	ldr	r3, [r2, #8]
 800a878:	3b01      	subs	r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	b410      	push	{r4}
 800a87e:	6093      	str	r3, [r2, #8]
 800a880:	da08      	bge.n	800a894 <__sfputc_r+0x1e>
 800a882:	6994      	ldr	r4, [r2, #24]
 800a884:	42a3      	cmp	r3, r4
 800a886:	db01      	blt.n	800a88c <__sfputc_r+0x16>
 800a888:	290a      	cmp	r1, #10
 800a88a:	d103      	bne.n	800a894 <__sfputc_r+0x1e>
 800a88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a890:	f000 b934 	b.w	800aafc <__swbuf_r>
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	1c58      	adds	r0, r3, #1
 800a898:	6010      	str	r0, [r2, #0]
 800a89a:	7019      	strb	r1, [r3, #0]
 800a89c:	4608      	mov	r0, r1
 800a89e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <__sfputs_r>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	4614      	mov	r4, r2
 800a8ac:	18d5      	adds	r5, r2, r3
 800a8ae:	42ac      	cmp	r4, r5
 800a8b0:	d101      	bne.n	800a8b6 <__sfputs_r+0x12>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e007      	b.n	800a8c6 <__sfputs_r+0x22>
 800a8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ba:	463a      	mov	r2, r7
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff ffda 	bl	800a876 <__sfputc_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d1f3      	bne.n	800a8ae <__sfputs_r+0xa>
 800a8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8c8 <_vfiprintf_r>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	b09d      	sub	sp, #116	; 0x74
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	4698      	mov	r8, r3
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	b118      	cbz	r0, 800a8e0 <_vfiprintf_r+0x18>
 800a8d8:	6a03      	ldr	r3, [r0, #32]
 800a8da:	b90b      	cbnz	r3, 800a8e0 <_vfiprintf_r+0x18>
 800a8dc:	f7fe f9ba 	bl	8008c54 <__sinit>
 800a8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_vfiprintf_r+0x2a>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	059a      	lsls	r2, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_vfiprintf_r+0x2a>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f7fe fad8 	bl	8008ea2 <__retarget_lock_acquire_recursive>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	071b      	lsls	r3, r3, #28
 800a8f6:	d501      	bpl.n	800a8fc <_vfiprintf_r+0x34>
 800a8f8:	692b      	ldr	r3, [r5, #16]
 800a8fa:	b99b      	cbnz	r3, 800a924 <_vfiprintf_r+0x5c>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f93a 	bl	800ab78 <__swsetup_r>
 800a904:	b170      	cbz	r0, 800a924 <_vfiprintf_r+0x5c>
 800a906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a908:	07dc      	lsls	r4, r3, #31
 800a90a:	d504      	bpl.n	800a916 <_vfiprintf_r+0x4e>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	b01d      	add	sp, #116	; 0x74
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	0598      	lsls	r0, r3, #22
 800a91a:	d4f7      	bmi.n	800a90c <_vfiprintf_r+0x44>
 800a91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91e:	f7fe fac1 	bl	8008ea4 <__retarget_lock_release_recursive>
 800a922:	e7f3      	b.n	800a90c <_vfiprintf_r+0x44>
 800a924:	2300      	movs	r3, #0
 800a926:	9309      	str	r3, [sp, #36]	; 0x24
 800a928:	2320      	movs	r3, #32
 800a92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a92e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a932:	2330      	movs	r3, #48	; 0x30
 800a934:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aae8 <_vfiprintf_r+0x220>
 800a938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a93c:	f04f 0901 	mov.w	r9, #1
 800a940:	4623      	mov	r3, r4
 800a942:	469a      	mov	sl, r3
 800a944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a948:	b10a      	cbz	r2, 800a94e <_vfiprintf_r+0x86>
 800a94a:	2a25      	cmp	r2, #37	; 0x25
 800a94c:	d1f9      	bne.n	800a942 <_vfiprintf_r+0x7a>
 800a94e:	ebba 0b04 	subs.w	fp, sl, r4
 800a952:	d00b      	beq.n	800a96c <_vfiprintf_r+0xa4>
 800a954:	465b      	mov	r3, fp
 800a956:	4622      	mov	r2, r4
 800a958:	4629      	mov	r1, r5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f7ff ffa2 	bl	800a8a4 <__sfputs_r>
 800a960:	3001      	adds	r0, #1
 800a962:	f000 80a9 	beq.w	800aab8 <_vfiprintf_r+0x1f0>
 800a966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a968:	445a      	add	r2, fp
 800a96a:	9209      	str	r2, [sp, #36]	; 0x24
 800a96c:	f89a 3000 	ldrb.w	r3, [sl]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80a1 	beq.w	800aab8 <_vfiprintf_r+0x1f0>
 800a976:	2300      	movs	r3, #0
 800a978:	f04f 32ff 	mov.w	r2, #4294967295
 800a97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a980:	f10a 0a01 	add.w	sl, sl, #1
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	9307      	str	r3, [sp, #28]
 800a988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a98c:	931a      	str	r3, [sp, #104]	; 0x68
 800a98e:	4654      	mov	r4, sl
 800a990:	2205      	movs	r2, #5
 800a992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a996:	4854      	ldr	r0, [pc, #336]	; (800aae8 <_vfiprintf_r+0x220>)
 800a998:	f7f5 fc3a 	bl	8000210 <memchr>
 800a99c:	9a04      	ldr	r2, [sp, #16]
 800a99e:	b9d8      	cbnz	r0, 800a9d8 <_vfiprintf_r+0x110>
 800a9a0:	06d1      	lsls	r1, r2, #27
 800a9a2:	bf44      	itt	mi
 800a9a4:	2320      	movmi	r3, #32
 800a9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9aa:	0713      	lsls	r3, r2, #28
 800a9ac:	bf44      	itt	mi
 800a9ae:	232b      	movmi	r3, #43	; 0x2b
 800a9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ba:	d015      	beq.n	800a9e8 <_vfiprintf_r+0x120>
 800a9bc:	9a07      	ldr	r2, [sp, #28]
 800a9be:	4654      	mov	r4, sl
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	f04f 0c0a 	mov.w	ip, #10
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9cc:	3b30      	subs	r3, #48	; 0x30
 800a9ce:	2b09      	cmp	r3, #9
 800a9d0:	d94d      	bls.n	800aa6e <_vfiprintf_r+0x1a6>
 800a9d2:	b1b0      	cbz	r0, 800aa02 <_vfiprintf_r+0x13a>
 800a9d4:	9207      	str	r2, [sp, #28]
 800a9d6:	e014      	b.n	800aa02 <_vfiprintf_r+0x13a>
 800a9d8:	eba0 0308 	sub.w	r3, r0, r8
 800a9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	46a2      	mov	sl, r4
 800a9e6:	e7d2      	b.n	800a98e <_vfiprintf_r+0xc6>
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	1d19      	adds	r1, r3, #4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	9103      	str	r1, [sp, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bfbb      	ittet	lt
 800a9f4:	425b      	neglt	r3, r3
 800a9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9fa:	9307      	strge	r3, [sp, #28]
 800a9fc:	9307      	strlt	r3, [sp, #28]
 800a9fe:	bfb8      	it	lt
 800aa00:	9204      	strlt	r2, [sp, #16]
 800aa02:	7823      	ldrb	r3, [r4, #0]
 800aa04:	2b2e      	cmp	r3, #46	; 0x2e
 800aa06:	d10c      	bne.n	800aa22 <_vfiprintf_r+0x15a>
 800aa08:	7863      	ldrb	r3, [r4, #1]
 800aa0a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa0c:	d134      	bne.n	800aa78 <_vfiprintf_r+0x1b0>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	1d1a      	adds	r2, r3, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	9203      	str	r2, [sp, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa1e:	3402      	adds	r4, #2
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aaf8 <_vfiprintf_r+0x230>
 800aa26:	7821      	ldrb	r1, [r4, #0]
 800aa28:	2203      	movs	r2, #3
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	f7f5 fbf0 	bl	8000210 <memchr>
 800aa30:	b138      	cbz	r0, 800aa42 <_vfiprintf_r+0x17a>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	eba0 000a 	sub.w	r0, r0, sl
 800aa38:	2240      	movs	r2, #64	; 0x40
 800aa3a:	4082      	lsls	r2, r0
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	3401      	adds	r4, #1
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa46:	4829      	ldr	r0, [pc, #164]	; (800aaec <_vfiprintf_r+0x224>)
 800aa48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa4c:	2206      	movs	r2, #6
 800aa4e:	f7f5 fbdf 	bl	8000210 <memchr>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d03f      	beq.n	800aad6 <_vfiprintf_r+0x20e>
 800aa56:	4b26      	ldr	r3, [pc, #152]	; (800aaf0 <_vfiprintf_r+0x228>)
 800aa58:	bb1b      	cbnz	r3, 800aaa2 <_vfiprintf_r+0x1da>
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	3307      	adds	r3, #7
 800aa5e:	f023 0307 	bic.w	r3, r3, #7
 800aa62:	3308      	adds	r3, #8
 800aa64:	9303      	str	r3, [sp, #12]
 800aa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa68:	443b      	add	r3, r7
 800aa6a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6c:	e768      	b.n	800a940 <_vfiprintf_r+0x78>
 800aa6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa72:	460c      	mov	r4, r1
 800aa74:	2001      	movs	r0, #1
 800aa76:	e7a6      	b.n	800a9c6 <_vfiprintf_r+0xfe>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	3401      	adds	r4, #1
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	f04f 0c0a 	mov.w	ip, #10
 800aa84:	4620      	mov	r0, r4
 800aa86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8a:	3a30      	subs	r2, #48	; 0x30
 800aa8c:	2a09      	cmp	r2, #9
 800aa8e:	d903      	bls.n	800aa98 <_vfiprintf_r+0x1d0>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0c6      	beq.n	800aa22 <_vfiprintf_r+0x15a>
 800aa94:	9105      	str	r1, [sp, #20]
 800aa96:	e7c4      	b.n	800aa22 <_vfiprintf_r+0x15a>
 800aa98:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e7f0      	b.n	800aa84 <_vfiprintf_r+0x1bc>
 800aaa2:	ab03      	add	r3, sp, #12
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <_vfiprintf_r+0x22c>)
 800aaaa:	a904      	add	r1, sp, #16
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7fd fc7f 	bl	80083b0 <_printf_float>
 800aab2:	4607      	mov	r7, r0
 800aab4:	1c78      	adds	r0, r7, #1
 800aab6:	d1d6      	bne.n	800aa66 <_vfiprintf_r+0x19e>
 800aab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaba:	07d9      	lsls	r1, r3, #31
 800aabc:	d405      	bmi.n	800aaca <_vfiprintf_r+0x202>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	059a      	lsls	r2, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_vfiprintf_r+0x202>
 800aac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac6:	f7fe f9ed 	bl	8008ea4 <__retarget_lock_release_recursive>
 800aaca:	89ab      	ldrh	r3, [r5, #12]
 800aacc:	065b      	lsls	r3, r3, #25
 800aace:	f53f af1d 	bmi.w	800a90c <_vfiprintf_r+0x44>
 800aad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aad4:	e71c      	b.n	800a910 <_vfiprintf_r+0x48>
 800aad6:	ab03      	add	r3, sp, #12
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	462a      	mov	r2, r5
 800aadc:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <_vfiprintf_r+0x22c>)
 800aade:	a904      	add	r1, sp, #16
 800aae0:	4630      	mov	r0, r6
 800aae2:	f7fd ff09 	bl	80088f8 <_printf_i>
 800aae6:	e7e4      	b.n	800aab2 <_vfiprintf_r+0x1ea>
 800aae8:	0803e2dc 	.word	0x0803e2dc
 800aaec:	0803e2e6 	.word	0x0803e2e6
 800aaf0:	080083b1 	.word	0x080083b1
 800aaf4:	0800a8a5 	.word	0x0800a8a5
 800aaf8:	0803e2e2 	.word	0x0803e2e2

0800aafc <__swbuf_r>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	460e      	mov	r6, r1
 800ab00:	4614      	mov	r4, r2
 800ab02:	4605      	mov	r5, r0
 800ab04:	b118      	cbz	r0, 800ab0e <__swbuf_r+0x12>
 800ab06:	6a03      	ldr	r3, [r0, #32]
 800ab08:	b90b      	cbnz	r3, 800ab0e <__swbuf_r+0x12>
 800ab0a:	f7fe f8a3 	bl	8008c54 <__sinit>
 800ab0e:	69a3      	ldr	r3, [r4, #24]
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	071a      	lsls	r2, r3, #28
 800ab16:	d525      	bpl.n	800ab64 <__swbuf_r+0x68>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	b31b      	cbz	r3, 800ab64 <__swbuf_r+0x68>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	6922      	ldr	r2, [r4, #16]
 800ab20:	1a98      	subs	r0, r3, r2
 800ab22:	6963      	ldr	r3, [r4, #20]
 800ab24:	b2f6      	uxtb	r6, r6
 800ab26:	4283      	cmp	r3, r0
 800ab28:	4637      	mov	r7, r6
 800ab2a:	dc04      	bgt.n	800ab36 <__swbuf_r+0x3a>
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f7ff fdf2 	bl	800a718 <_fflush_r>
 800ab34:	b9e0      	cbnz	r0, 800ab70 <__swbuf_r+0x74>
 800ab36:	68a3      	ldr	r3, [r4, #8]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	60a3      	str	r3, [r4, #8]
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	6022      	str	r2, [r4, #0]
 800ab42:	701e      	strb	r6, [r3, #0]
 800ab44:	6962      	ldr	r2, [r4, #20]
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d004      	beq.n	800ab56 <__swbuf_r+0x5a>
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	07db      	lsls	r3, r3, #31
 800ab50:	d506      	bpl.n	800ab60 <__swbuf_r+0x64>
 800ab52:	2e0a      	cmp	r6, #10
 800ab54:	d104      	bne.n	800ab60 <__swbuf_r+0x64>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f7ff fddd 	bl	800a718 <_fflush_r>
 800ab5e:	b938      	cbnz	r0, 800ab70 <__swbuf_r+0x74>
 800ab60:	4638      	mov	r0, r7
 800ab62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f806 	bl	800ab78 <__swsetup_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0d5      	beq.n	800ab1c <__swbuf_r+0x20>
 800ab70:	f04f 37ff 	mov.w	r7, #4294967295
 800ab74:	e7f4      	b.n	800ab60 <__swbuf_r+0x64>
	...

0800ab78 <__swsetup_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4b2a      	ldr	r3, [pc, #168]	; (800ac24 <__swsetup_r+0xac>)
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	460c      	mov	r4, r1
 800ab82:	b118      	cbz	r0, 800ab8c <__swsetup_r+0x14>
 800ab84:	6a03      	ldr	r3, [r0, #32]
 800ab86:	b90b      	cbnz	r3, 800ab8c <__swsetup_r+0x14>
 800ab88:	f7fe f864 	bl	8008c54 <__sinit>
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab92:	0718      	lsls	r0, r3, #28
 800ab94:	d422      	bmi.n	800abdc <__swsetup_r+0x64>
 800ab96:	06d9      	lsls	r1, r3, #27
 800ab98:	d407      	bmi.n	800abaa <__swsetup_r+0x32>
 800ab9a:	2309      	movs	r3, #9
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e034      	b.n	800ac14 <__swsetup_r+0x9c>
 800abaa:	0758      	lsls	r0, r3, #29
 800abac:	d512      	bpl.n	800abd4 <__swsetup_r+0x5c>
 800abae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb0:	b141      	cbz	r1, 800abc4 <__swsetup_r+0x4c>
 800abb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb6:	4299      	cmp	r1, r3
 800abb8:	d002      	beq.n	800abc0 <__swsetup_r+0x48>
 800abba:	4628      	mov	r0, r5
 800abbc:	f7fe fffe 	bl	8009bbc <_free_r>
 800abc0:	2300      	movs	r3, #0
 800abc2:	6363      	str	r3, [r4, #52]	; 0x34
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	2300      	movs	r3, #0
 800abce:	6063      	str	r3, [r4, #4]
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f043 0308 	orr.w	r3, r3, #8
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	b94b      	cbnz	r3, 800abf4 <__swsetup_r+0x7c>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abea:	d003      	beq.n	800abf4 <__swsetup_r+0x7c>
 800abec:	4621      	mov	r1, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 f884 	bl	800acfc <__smakebuf_r>
 800abf4:	89a0      	ldrh	r0, [r4, #12]
 800abf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abfa:	f010 0301 	ands.w	r3, r0, #1
 800abfe:	d00a      	beq.n	800ac16 <__swsetup_r+0x9e>
 800ac00:	2300      	movs	r3, #0
 800ac02:	60a3      	str	r3, [r4, #8]
 800ac04:	6963      	ldr	r3, [r4, #20]
 800ac06:	425b      	negs	r3, r3
 800ac08:	61a3      	str	r3, [r4, #24]
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	b943      	cbnz	r3, 800ac20 <__swsetup_r+0xa8>
 800ac0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac12:	d1c4      	bne.n	800ab9e <__swsetup_r+0x26>
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	0781      	lsls	r1, r0, #30
 800ac18:	bf58      	it	pl
 800ac1a:	6963      	ldrpl	r3, [r4, #20]
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	e7f4      	b.n	800ac0a <__swsetup_r+0x92>
 800ac20:	2000      	movs	r0, #0
 800ac22:	e7f7      	b.n	800ac14 <__swsetup_r+0x9c>
 800ac24:	20000c5c 	.word	0x20000c5c

0800ac28 <_raise_r>:
 800ac28:	291f      	cmp	r1, #31
 800ac2a:	b538      	push	{r3, r4, r5, lr}
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	460d      	mov	r5, r1
 800ac30:	d904      	bls.n	800ac3c <_raise_r+0x14>
 800ac32:	2316      	movs	r3, #22
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac3e:	b112      	cbz	r2, 800ac46 <_raise_r+0x1e>
 800ac40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac44:	b94b      	cbnz	r3, 800ac5a <_raise_r+0x32>
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f830 	bl	800acac <_getpid_r>
 800ac4c:	462a      	mov	r2, r5
 800ac4e:	4601      	mov	r1, r0
 800ac50:	4620      	mov	r0, r4
 800ac52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac56:	f000 b817 	b.w	800ac88 <_kill_r>
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d00a      	beq.n	800ac74 <_raise_r+0x4c>
 800ac5e:	1c59      	adds	r1, r3, #1
 800ac60:	d103      	bne.n	800ac6a <_raise_r+0x42>
 800ac62:	2316      	movs	r3, #22
 800ac64:	6003      	str	r3, [r0, #0]
 800ac66:	2001      	movs	r0, #1
 800ac68:	e7e7      	b.n	800ac3a <_raise_r+0x12>
 800ac6a:	2400      	movs	r4, #0
 800ac6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac70:	4628      	mov	r0, r5
 800ac72:	4798      	blx	r3
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7e0      	b.n	800ac3a <_raise_r+0x12>

0800ac78 <raise>:
 800ac78:	4b02      	ldr	r3, [pc, #8]	; (800ac84 <raise+0xc>)
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	6818      	ldr	r0, [r3, #0]
 800ac7e:	f7ff bfd3 	b.w	800ac28 <_raise_r>
 800ac82:	bf00      	nop
 800ac84:	20000c5c 	.word	0x20000c5c

0800ac88 <_kill_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	; (800aca8 <_kill_r+0x20>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	f000 fb71 	bl	800b37c <_kill>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	d102      	bne.n	800aca4 <_kill_r+0x1c>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	b103      	cbz	r3, 800aca4 <_kill_r+0x1c>
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	20001900 	.word	0x20001900

0800acac <_getpid_r>:
 800acac:	f000 bb56 	b.w	800b35c <_getpid>

0800acb0 <__swhatbuf_r>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	460c      	mov	r4, r1
 800acb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb8:	2900      	cmp	r1, #0
 800acba:	b096      	sub	sp, #88	; 0x58
 800acbc:	4615      	mov	r5, r2
 800acbe:	461e      	mov	r6, r3
 800acc0:	da0d      	bge.n	800acde <__swhatbuf_r+0x2e>
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acc8:	f04f 0100 	mov.w	r1, #0
 800accc:	bf0c      	ite	eq
 800acce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800acd2:	2340      	movne	r3, #64	; 0x40
 800acd4:	2000      	movs	r0, #0
 800acd6:	6031      	str	r1, [r6, #0]
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	b016      	add	sp, #88	; 0x58
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	466a      	mov	r2, sp
 800ace0:	f000 f848 	bl	800ad74 <_fstat_r>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	dbec      	blt.n	800acc2 <__swhatbuf_r+0x12>
 800ace8:	9901      	ldr	r1, [sp, #4]
 800acea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800acee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acf2:	4259      	negs	r1, r3
 800acf4:	4159      	adcs	r1, r3
 800acf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acfa:	e7eb      	b.n	800acd4 <__swhatbuf_r+0x24>

0800acfc <__smakebuf_r>:
 800acfc:	898b      	ldrh	r3, [r1, #12]
 800acfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad00:	079d      	lsls	r5, r3, #30
 800ad02:	4606      	mov	r6, r0
 800ad04:	460c      	mov	r4, r1
 800ad06:	d507      	bpl.n	800ad18 <__smakebuf_r+0x1c>
 800ad08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	2301      	movs	r3, #1
 800ad12:	6163      	str	r3, [r4, #20]
 800ad14:	b002      	add	sp, #8
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	ab01      	add	r3, sp, #4
 800ad1a:	466a      	mov	r2, sp
 800ad1c:	f7ff ffc8 	bl	800acb0 <__swhatbuf_r>
 800ad20:	9900      	ldr	r1, [sp, #0]
 800ad22:	4605      	mov	r5, r0
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7fd f9e7 	bl	80080f8 <_malloc_r>
 800ad2a:	b948      	cbnz	r0, 800ad40 <__smakebuf_r+0x44>
 800ad2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad30:	059a      	lsls	r2, r3, #22
 800ad32:	d4ef      	bmi.n	800ad14 <__smakebuf_r+0x18>
 800ad34:	f023 0303 	bic.w	r3, r3, #3
 800ad38:	f043 0302 	orr.w	r3, r3, #2
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	e7e3      	b.n	800ad08 <__smakebuf_r+0xc>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	6163      	str	r3, [r4, #20]
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	b15b      	cbz	r3, 800ad6c <__smakebuf_r+0x70>
 800ad54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f81d 	bl	800ad98 <_isatty_r>
 800ad5e:	b128      	cbz	r0, 800ad6c <__smakebuf_r+0x70>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f023 0303 	bic.w	r3, r3, #3
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	431d      	orrs	r5, r3
 800ad70:	81a5      	strh	r5, [r4, #12]
 800ad72:	e7cf      	b.n	800ad14 <__smakebuf_r+0x18>

0800ad74 <_fstat_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d07      	ldr	r5, [pc, #28]	; (800ad94 <_fstat_r+0x20>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	4611      	mov	r1, r2
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	f000 fae3 	bl	800b34c <_fstat>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d102      	bne.n	800ad90 <_fstat_r+0x1c>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	b103      	cbz	r3, 800ad90 <_fstat_r+0x1c>
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	bd38      	pop	{r3, r4, r5, pc}
 800ad92:	bf00      	nop
 800ad94:	20001900 	.word	0x20001900

0800ad98 <_isatty_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	4d06      	ldr	r5, [pc, #24]	; (800adb4 <_isatty_r+0x1c>)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	f000 fae2 	bl	800b36c <_isatty>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_isatty_r+0x1a>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_isatty_r+0x1a>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20001900 	.word	0x20001900

0800adb8 <expf>:
 800adb8:	b508      	push	{r3, lr}
 800adba:	ed2d 8b02 	vpush	{d8}
 800adbe:	eef0 8a40 	vmov.f32	s17, s0
 800adc2:	f000 f9ed 	bl	800b1a0 <__ieee754_expf>
 800adc6:	eeb0 8a40 	vmov.f32	s16, s0
 800adca:	eeb0 0a68 	vmov.f32	s0, s17
 800adce:	f000 f899 	bl	800af04 <finitef>
 800add2:	b160      	cbz	r0, 800adee <expf+0x36>
 800add4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ae14 <expf+0x5c>
 800add8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800addc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade0:	dd0a      	ble.n	800adf8 <expf+0x40>
 800ade2:	f7fe f833 	bl	8008e4c <__errno>
 800ade6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ae18 <expf+0x60>
 800adea:	2322      	movs	r3, #34	; 0x22
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	eeb0 0a48 	vmov.f32	s0, s16
 800adf2:	ecbd 8b02 	vpop	{d8}
 800adf6:	bd08      	pop	{r3, pc}
 800adf8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ae1c <expf+0x64>
 800adfc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	d5f3      	bpl.n	800adee <expf+0x36>
 800ae06:	f7fe f821 	bl	8008e4c <__errno>
 800ae0a:	2322      	movs	r3, #34	; 0x22
 800ae0c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ae20 <expf+0x68>
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	e7ec      	b.n	800adee <expf+0x36>
 800ae14:	42b17217 	.word	0x42b17217
 800ae18:	7f800000 	.word	0x7f800000
 800ae1c:	c2cff1b5 	.word	0xc2cff1b5
 800ae20:	00000000 	.word	0x00000000

0800ae24 <fabsf>:
 800ae24:	ee10 3a10 	vmov	r3, s0
 800ae28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae2c:	ee00 3a10 	vmov	s0, r3
 800ae30:	4770      	bx	lr
	...

0800ae34 <tanhf>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	ee10 5a10 	vmov	r5, s0
 800ae3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae42:	ed2d 8b02 	vpush	{d8}
 800ae46:	db0f      	blt.n	800ae68 <tanhf+0x34>
 800ae48:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <tanhf+0xc0>)
 800ae4a:	ed93 6a00 	vldr	s12, [r3]
 800ae4e:	edd3 6a00 	vldr	s13, [r3]
 800ae52:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	bfac      	ite	ge
 800ae5a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800ae5e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800ae62:	ecbd 8b02 	vpop	{d8}
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	4a23      	ldr	r2, [pc, #140]	; (800aef8 <tanhf+0xc4>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	dc39      	bgt.n	800aee2 <tanhf+0xae>
 800ae6e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800ae72:	da07      	bge.n	800ae84 <tanhf+0x50>
 800ae74:	4b1f      	ldr	r3, [pc, #124]	; (800aef4 <tanhf+0xc0>)
 800ae76:	edd3 7a00 	vldr	s15, [r3]
 800ae7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ae7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae82:	e7ee      	b.n	800ae62 <tanhf+0x2e>
 800ae84:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ae88:	4c1c      	ldr	r4, [pc, #112]	; (800aefc <tanhf+0xc8>)
 800ae8a:	db19      	blt.n	800aec0 <tanhf+0x8c>
 800ae8c:	f7ff ffca 	bl	800ae24 <fabsf>
 800ae90:	edd4 7a00 	vldr	s15, [r4]
 800ae94:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae98:	f000 f842 	bl	800af20 <expm1f>
 800ae9c:	4b15      	ldr	r3, [pc, #84]	; (800aef4 <tanhf+0xc0>)
 800ae9e:	edd3 7a00 	vldr	s15, [r3]
 800aea2:	edd4 6a00 	vldr	s13, [r4]
 800aea6:	ed94 7a00 	vldr	s14, [r4]
 800aeaa:	ee37 0a00 	vadd.f32	s0, s14, s0
 800aeae:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800aeb2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	bfb8      	it	lt
 800aeba:	eeb1 0a40 	vneglt.f32	s0, s0
 800aebe:	e7d0      	b.n	800ae62 <tanhf+0x2e>
 800aec0:	ed94 8a00 	vldr	s16, [r4]
 800aec4:	f7ff ffae 	bl	800ae24 <fabsf>
 800aec8:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800aecc:	f000 f828 	bl	800af20 <expm1f>
 800aed0:	edd4 7a00 	vldr	s15, [r4]
 800aed4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aed8:	eeb1 7a40 	vneg.f32	s14, s0
 800aedc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800aee0:	e7e9      	b.n	800aeb6 <tanhf+0x82>
 800aee2:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <tanhf+0xc0>)
 800aee4:	ed93 0a00 	vldr	s0, [r3]
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <tanhf+0xcc>)
 800aeea:	edd3 7a00 	vldr	s15, [r3]
 800aeee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aef2:	e7e0      	b.n	800aeb6 <tanhf+0x82>
 800aef4:	20000dcc 	.word	0x20000dcc
 800aef8:	41afffff 	.word	0x41afffff
 800aefc:	20000dd4 	.word	0x20000dd4
 800af00:	20000dd0 	.word	0x20000dd0

0800af04 <finitef>:
 800af04:	b082      	sub	sp, #8
 800af06:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af0a:	9801      	ldr	r0, [sp, #4]
 800af0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800af10:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800af14:	bfac      	ite	ge
 800af16:	2000      	movge	r0, #0
 800af18:	2001      	movlt	r0, #1
 800af1a:	b002      	add	sp, #8
 800af1c:	4770      	bx	lr
	...

0800af20 <expm1f>:
 800af20:	ee10 2a10 	vmov	r2, s0
 800af24:	497e      	ldr	r1, [pc, #504]	; (800b120 <expm1f+0x200>)
 800af26:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800af2a:	428b      	cmp	r3, r1
 800af2c:	d921      	bls.n	800af72 <expm1f+0x52>
 800af2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af32:	d902      	bls.n	800af3a <expm1f+0x1a>
 800af34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af38:	4770      	bx	lr
 800af3a:	d106      	bne.n	800af4a <expm1f+0x2a>
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800af42:	bfb8      	it	lt
 800af44:	eeb0 0a67 	vmovlt.f32	s0, s15
 800af48:	4770      	bx	lr
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	db05      	blt.n	800af5a <expm1f+0x3a>
 800af4e:	4975      	ldr	r1, [pc, #468]	; (800b124 <expm1f+0x204>)
 800af50:	428b      	cmp	r3, r1
 800af52:	d95c      	bls.n	800b00e <expm1f+0xee>
 800af54:	2000      	movs	r0, #0
 800af56:	f000 b91d 	b.w	800b194 <__math_oflowf>
 800af5a:	eddf 7a73 	vldr	s15, [pc, #460]	; 800b128 <expm1f+0x208>
 800af5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800af62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6a:	d550      	bpl.n	800b00e <expm1f+0xee>
 800af6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800af70:	4770      	bx	lr
 800af72:	496e      	ldr	r1, [pc, #440]	; (800b12c <expm1f+0x20c>)
 800af74:	428b      	cmp	r3, r1
 800af76:	d967      	bls.n	800b048 <expm1f+0x128>
 800af78:	496d      	ldr	r1, [pc, #436]	; (800b130 <expm1f+0x210>)
 800af7a:	428b      	cmp	r3, r1
 800af7c:	d847      	bhi.n	800b00e <expm1f+0xee>
 800af7e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b134 <expm1f+0x214>
 800af82:	2a00      	cmp	r2, #0
 800af84:	bfa7      	ittee	ge
 800af86:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800af8a:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 800b138 <expm1f+0x218>
 800af8e:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 800b13c <expm1f+0x21c>
 800af92:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800af96:	bfac      	ite	ge
 800af98:	2301      	movge	r3, #1
 800af9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af9e:	ee37 0a66 	vsub.f32	s0, s14, s13
 800afa2:	ee77 7a40 	vsub.f32	s15, s14, s0
 800afa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800afaa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800afae:	ee20 4a25 	vmul.f32	s8, s0, s11
 800afb2:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800b140 <expm1f+0x220>
 800afb6:	eddf 6a63 	vldr	s13, [pc, #396]	; 800b144 <expm1f+0x224>
 800afba:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800b148 <expm1f+0x228>
 800afbe:	ee20 7a04 	vmul.f32	s14, s0, s8
 800afc2:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800afc6:	eee7 6a06 	vfma.f32	s13, s14, s12
 800afca:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800b14c <expm1f+0x22c>
 800afce:	eea6 6a87 	vfma.f32	s12, s13, s14
 800afd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b150 <expm1f+0x230>
 800afd6:	eee6 6a07 	vfma.f32	s13, s12, s14
 800afda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800afde:	eea6 5a87 	vfma.f32	s10, s13, s14
 800afe2:	eef0 6a46 	vmov.f32	s13, s12
 800afe6:	eee5 6a07 	vfma.f32	s13, s10, s14
 800afea:	eee4 4a66 	vfms.f32	s9, s8, s13
 800afee:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800aff2:	eea0 4a64 	vfms.f32	s8, s0, s9
 800aff6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800affa:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800affe:	ee66 6a87 	vmul.f32	s13, s13, s14
 800b002:	bb7b      	cbnz	r3, 800b064 <expm1f+0x144>
 800b004:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800b008:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b00c:	4770      	bx	lr
 800b00e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b012:	2a00      	cmp	r2, #0
 800b014:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b018:	bfb8      	it	lt
 800b01a:	eef0 7a47 	vmovlt.f32	s15, s14
 800b01e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b154 <expm1f+0x234>
 800b022:	ee40 7a07 	vmla.f32	s15, s0, s14
 800b026:	eeb0 7a40 	vmov.f32	s14, s0
 800b02a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b02e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b032:	ee17 3a90 	vmov	r3, s15
 800b036:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b134 <expm1f+0x214>
 800b03a:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800b03e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800b138 <expm1f+0x218>
 800b042:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b046:	e7aa      	b.n	800af9e <expm1f+0x7e>
 800b048:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800b04c:	d208      	bcs.n	800b060 <expm1f+0x140>
 800b04e:	eddf 7a42 	vldr	s15, [pc, #264]	; 800b158 <expm1f+0x238>
 800b052:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b056:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800b05a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b05e:	4770      	bx	lr
 800b060:	2300      	movs	r3, #0
 800b062:	e7a2      	b.n	800afaa <expm1f+0x8a>
 800b064:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800b06e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b072:	d106      	bne.n	800b082 <expm1f+0x162>
 800b074:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b078:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800b07c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800b080:	4770      	bx	lr
 800b082:	2b01      	cmp	r3, #1
 800b084:	d118      	bne.n	800b0b8 <expm1f+0x198>
 800b086:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800b08a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b092:	bf5b      	ittet	pl
 800b094:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800b098:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800b09c:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800b0a0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800b0a4:	bf43      	ittte	mi
 800b0a6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800b0aa:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800b0ae:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800b0b2:	eeb0 0a46 	vmovpl.f32	s0, s12
 800b0b6:	4770      	bx	lr
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	2a39      	cmp	r2, #57	; 0x39
 800b0bc:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800b0c0:	d90b      	bls.n	800b0da <expm1f+0x1ba>
 800b0c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b0c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b0ca:	ee17 3a90 	vmov	r3, s15
 800b0ce:	4419      	add	r1, r3
 800b0d0:	ee07 1a90 	vmov	s15, r1
 800b0d4:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800b0d8:	4770      	bx	lr
 800b0da:	2b16      	cmp	r3, #22
 800b0dc:	dc11      	bgt.n	800b102 <expm1f+0x1e2>
 800b0de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e2:	fa42 f303 	asr.w	r3, r2, r3
 800b0e6:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800b0ea:	ee07 3a10 	vmov	s14, r3
 800b0ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b0f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f6:	ee17 3a90 	vmov	r3, s15
 800b0fa:	440b      	add	r3, r1
 800b0fc:	ee00 3a10 	vmov	s0, r3
 800b100:	4770      	bx	lr
 800b102:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800b106:	05db      	lsls	r3, r3, #23
 800b108:	ee07 3a10 	vmov	s14, r3
 800b10c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b110:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b114:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b118:	ee17 3a90 	vmov	r3, s15
 800b11c:	e7ed      	b.n	800b0fa <expm1f+0x1da>
 800b11e:	bf00      	nop
 800b120:	4195b843 	.word	0x4195b843
 800b124:	42b17217 	.word	0x42b17217
 800b128:	0da24260 	.word	0x0da24260
 800b12c:	3eb17218 	.word	0x3eb17218
 800b130:	3f851591 	.word	0x3f851591
 800b134:	3f317180 	.word	0x3f317180
 800b138:	3717f7d1 	.word	0x3717f7d1
 800b13c:	b717f7d1 	.word	0xb717f7d1
 800b140:	b457edbb 	.word	0xb457edbb
 800b144:	36867e54 	.word	0x36867e54
 800b148:	bd088889 	.word	0xbd088889
 800b14c:	b8a670cd 	.word	0xb8a670cd
 800b150:	3ad00d01 	.word	0x3ad00d01
 800b154:	3fb8aa3b 	.word	0x3fb8aa3b
 800b158:	7149f2ca 	.word	0x7149f2ca

0800b15c <with_errnof>:
 800b15c:	b513      	push	{r0, r1, r4, lr}
 800b15e:	4604      	mov	r4, r0
 800b160:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b164:	f7fd fe72 	bl	8008e4c <__errno>
 800b168:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b16c:	6004      	str	r4, [r0, #0]
 800b16e:	b002      	add	sp, #8
 800b170:	bd10      	pop	{r4, pc}

0800b172 <xflowf>:
 800b172:	b130      	cbz	r0, 800b182 <xflowf+0x10>
 800b174:	eef1 7a40 	vneg.f32	s15, s0
 800b178:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b17c:	2022      	movs	r0, #34	; 0x22
 800b17e:	f7ff bfed 	b.w	800b15c <with_errnof>
 800b182:	eef0 7a40 	vmov.f32	s15, s0
 800b186:	e7f7      	b.n	800b178 <xflowf+0x6>

0800b188 <__math_uflowf>:
 800b188:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b190 <__math_uflowf+0x8>
 800b18c:	f7ff bff1 	b.w	800b172 <xflowf>
 800b190:	10000000 	.word	0x10000000

0800b194 <__math_oflowf>:
 800b194:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b19c <__math_oflowf+0x8>
 800b198:	f7ff bfeb 	b.w	800b172 <xflowf>
 800b19c:	70000000 	.word	0x70000000

0800b1a0 <__ieee754_expf>:
 800b1a0:	ee10 2a10 	vmov	r2, s0
 800b1a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b1a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1ac:	d902      	bls.n	800b1b4 <__ieee754_expf+0x14>
 800b1ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b1b2:	4770      	bx	lr
 800b1b4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b1b8:	d106      	bne.n	800b1c8 <__ieee754_expf+0x28>
 800b1ba:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b2f4 <__ieee754_expf+0x154>
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	bf18      	it	ne
 800b1c2:	eeb0 0a67 	vmovne.f32	s0, s15
 800b1c6:	4770      	bx	lr
 800b1c8:	484b      	ldr	r0, [pc, #300]	; (800b2f8 <__ieee754_expf+0x158>)
 800b1ca:	4282      	cmp	r2, r0
 800b1cc:	dd02      	ble.n	800b1d4 <__ieee754_expf+0x34>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	f7ff bfe0 	b.w	800b194 <__math_oflowf>
 800b1d4:	2a00      	cmp	r2, #0
 800b1d6:	da05      	bge.n	800b1e4 <__ieee754_expf+0x44>
 800b1d8:	4a48      	ldr	r2, [pc, #288]	; (800b2fc <__ieee754_expf+0x15c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d902      	bls.n	800b1e4 <__ieee754_expf+0x44>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f7ff bfd2 	b.w	800b188 <__math_uflowf>
 800b1e4:	4a46      	ldr	r2, [pc, #280]	; (800b300 <__ieee754_expf+0x160>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b1ec:	d952      	bls.n	800b294 <__ieee754_expf+0xf4>
 800b1ee:	4a45      	ldr	r2, [pc, #276]	; (800b304 <__ieee754_expf+0x164>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b1f6:	d834      	bhi.n	800b262 <__ieee754_expf+0xc2>
 800b1f8:	4b43      	ldr	r3, [pc, #268]	; (800b308 <__ieee754_expf+0x168>)
 800b1fa:	4413      	add	r3, r2
 800b1fc:	ed93 7a00 	vldr	s14, [r3]
 800b200:	4b42      	ldr	r3, [pc, #264]	; (800b30c <__ieee754_expf+0x16c>)
 800b202:	4413      	add	r3, r2
 800b204:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b208:	f1c1 0201 	rsb	r2, r1, #1
 800b20c:	edd3 7a00 	vldr	s15, [r3]
 800b210:	1a52      	subs	r2, r2, r1
 800b212:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b216:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b21a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b310 <__ieee754_expf+0x170>
 800b21e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b314 <__ieee754_expf+0x174>
 800b222:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b226:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b318 <__ieee754_expf+0x178>
 800b22a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b22e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b31c <__ieee754_expf+0x17c>
 800b232:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b236:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b320 <__ieee754_expf+0x180>
 800b23a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b23e:	eef0 6a40 	vmov.f32	s13, s0
 800b242:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b246:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b24a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b24e:	bb92      	cbnz	r2, 800b2b6 <__ieee754_expf+0x116>
 800b250:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b254:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b258:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b25c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b260:	4770      	bx	lr
 800b262:	4b30      	ldr	r3, [pc, #192]	; (800b324 <__ieee754_expf+0x184>)
 800b264:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b328 <__ieee754_expf+0x188>
 800b268:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b32c <__ieee754_expf+0x18c>
 800b26c:	4413      	add	r3, r2
 800b26e:	edd3 7a00 	vldr	s15, [r3]
 800b272:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b276:	eeb0 7a40 	vmov.f32	s14, s0
 800b27a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b27e:	ee17 2a90 	vmov	r2, s15
 800b282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b286:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b28a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b330 <__ieee754_expf+0x190>
 800b28e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b292:	e7be      	b.n	800b212 <__ieee754_expf+0x72>
 800b294:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800b298:	d20b      	bcs.n	800b2b2 <__ieee754_expf+0x112>
 800b29a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b334 <__ieee754_expf+0x194>
 800b29e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b2a2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	dd02      	ble.n	800b2b2 <__ieee754_expf+0x112>
 800b2ac:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b2b0:	4770      	bx	lr
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	e7af      	b.n	800b216 <__ieee754_expf+0x76>
 800b2b6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b2ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b2be:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b2c2:	bfb8      	it	lt
 800b2c4:	3264      	addlt	r2, #100	; 0x64
 800b2c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b2ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2ce:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b2d2:	ee17 3a90 	vmov	r3, s15
 800b2d6:	bfab      	itete	ge
 800b2d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b2dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b2e0:	ee00 3a10 	vmovge	s0, r3
 800b2e4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800b338 <__ieee754_expf+0x198>
 800b2e8:	bfbc      	itt	lt
 800b2ea:	ee00 3a10 	vmovlt	s0, r3
 800b2ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b2f2:	4770      	bx	lr
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	42b17217 	.word	0x42b17217
 800b2fc:	42cff1b5 	.word	0x42cff1b5
 800b300:	3eb17218 	.word	0x3eb17218
 800b304:	3f851591 	.word	0x3f851591
 800b308:	0803e43c 	.word	0x0803e43c
 800b30c:	0803e444 	.word	0x0803e444
 800b310:	3331bb4c 	.word	0x3331bb4c
 800b314:	b5ddea0e 	.word	0xb5ddea0e
 800b318:	388ab355 	.word	0x388ab355
 800b31c:	bb360b61 	.word	0xbb360b61
 800b320:	3e2aaaab 	.word	0x3e2aaaab
 800b324:	0803e434 	.word	0x0803e434
 800b328:	3fb8aa3b 	.word	0x3fb8aa3b
 800b32c:	3f317180 	.word	0x3f317180
 800b330:	3717f7d1 	.word	0x3717f7d1
 800b334:	7149f2ca 	.word	0x7149f2ca
 800b338:	0d800000 	.word	0x0d800000

0800b33c <_close>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <_close+0xc>)
 800b33e:	2258      	movs	r2, #88	; 0x58
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	f04f 30ff 	mov.w	r0, #4294967295
 800b346:	4770      	bx	lr
 800b348:	20001900 	.word	0x20001900

0800b34c <_fstat>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <_fstat+0xc>)
 800b34e:	2258      	movs	r2, #88	; 0x58
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	f04f 30ff 	mov.w	r0, #4294967295
 800b356:	4770      	bx	lr
 800b358:	20001900 	.word	0x20001900

0800b35c <_getpid>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <_getpid+0xc>)
 800b35e:	2258      	movs	r2, #88	; 0x58
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	4770      	bx	lr
 800b368:	20001900 	.word	0x20001900

0800b36c <_isatty>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <_isatty+0xc>)
 800b36e:	2258      	movs	r2, #88	; 0x58
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	2000      	movs	r0, #0
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20001900 	.word	0x20001900

0800b37c <_kill>:
 800b37c:	4b02      	ldr	r3, [pc, #8]	; (800b388 <_kill+0xc>)
 800b37e:	2258      	movs	r2, #88	; 0x58
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	4770      	bx	lr
 800b388:	20001900 	.word	0x20001900

0800b38c <_lseek>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	; (800b398 <_lseek+0xc>)
 800b38e:	2258      	movs	r2, #88	; 0x58
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	f04f 30ff 	mov.w	r0, #4294967295
 800b396:	4770      	bx	lr
 800b398:	20001900 	.word	0x20001900

0800b39c <_read>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <_read+0xc>)
 800b39e:	2258      	movs	r2, #88	; 0x58
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a6:	4770      	bx	lr
 800b3a8:	20001900 	.word	0x20001900

0800b3ac <_exit>:
 800b3ac:	e7fe      	b.n	800b3ac <_exit>
	...

0800b3b0 <_init>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	bf00      	nop
 800b3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b6:	bc08      	pop	{r3}
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	4770      	bx	lr

0800b3bc <_fini>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	bf00      	nop
 800b3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c2:	bc08      	pop	{r3}
 800b3c4:	469e      	mov	lr, r3
 800b3c6:	4770      	bx	lr
