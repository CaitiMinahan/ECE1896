
Nucleo-F446RE_contactor_and_model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003306c  0800ae20  0800ae20  0001ae20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803de8c  0803de8c  00050dd8  2**0
                  CONTENTS
  4 .ARM          00000008  0803de8c  0803de8c  0004de8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803de94  0803de94  00050dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803de94  0803de94  0004de94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803de98  0803de98  0004de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dd8  20000000  0803de9c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  20000dd8  0803ec74  00050dd8  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001878  0803ec74  00051878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050dd8  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00050e08  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ada3  00000000  00000000  00050e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000476c  00000000  00000000  0006bc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000844a  00000000  00000000  000703aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  000787f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d82  00000000  00000000  00079448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000275ec  00000000  00000000  0007a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018dde  00000000  00000000  000a17b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f02f6  00000000  00000000  000ba594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003598  00000000  00000000  001aa88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  001ade24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000dd8 	.word	0x20000dd8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800adec 	.word	0x0800adec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000ddc 	.word	0x20000ddc
 800020c:	0800adec 	.word	0x0800adec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b98e 	b.w	8000f1c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f824 	bl	8000c54 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fd09 	bl	8000638 <__aeabi_dmul>
 8000c26:	f000 f97b 	bl	8000f20 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc8a 	bl	8000544 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fd00 	bl	8000638 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb42 	bl	80002c8 <__aeabi_dsub>
 8000c44:	f000 f96c 	bl	8000f20 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9e08      	ldr	r6, [sp, #32]
 8000c5a:	460d      	mov	r5, r1
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	460f      	mov	r7, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14a      	bne.n	8000cfa <__udivmoddi4+0xa6>
 8000c64:	428a      	cmp	r2, r1
 8000c66:	4694      	mov	ip, r2
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0xe2>
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	b143      	cbz	r3, 8000c82 <__udivmoddi4+0x2e>
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	f1c3 0220 	rsb	r2, r3, #32
 8000c78:	409f      	lsls	r7, r3
 8000c7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	409c      	lsls	r4, r3
 8000c82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c86:	fa1f f58c 	uxth.w	r5, ip
 8000c8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c8e:	0c22      	lsrs	r2, r4, #16
 8000c90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c98:	fb01 f005 	mul.w	r0, r1, r5
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x62>
 8000ca0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca8:	f080 811c 	bcs.w	8000ee4 <__udivmoddi4+0x290>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f240 8119 	bls.w	8000ee4 <__udivmoddi4+0x290>
 8000cb2:	3902      	subs	r1, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a12      	subs	r2, r2, r0
 8000cb8:	b2a4      	uxth	r4, r4
 8000cba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc6:	fb00 f505 	mul.w	r5, r0, r5
 8000cca:	42a5      	cmp	r5, r4
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x90>
 8000cce:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x294>
 8000cda:	42a5      	cmp	r5, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x294>
 8000ce0:	4464      	add	r4, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11e      	cbz	r6, 8000cf6 <__udivmoddi4+0xa2>
 8000cee:	40dc      	lsrs	r4, r3
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0xbc>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f000 80ed 	beq.w	8000ede <__udivmoddi4+0x28a>
 8000d04:	2100      	movs	r1, #0
 8000d06:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	fab3 f183 	clz	r1, r3
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d149      	bne.n	8000dac <__udivmoddi4+0x158>
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	d302      	bcc.n	8000d22 <__udivmoddi4+0xce>
 8000d1c:	4282      	cmp	r2, r0
 8000d1e:	f200 80f8 	bhi.w	8000f12 <__udivmoddi4+0x2be>
 8000d22:	1a84      	subs	r4, r0, r2
 8000d24:	eb65 0203 	sbc.w	r2, r5, r3
 8000d28:	2001      	movs	r0, #1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d0e2      	beq.n	8000cf6 <__udivmoddi4+0xa2>
 8000d30:	e9c6 4700 	strd	r4, r7, [r6]
 8000d34:	e7df      	b.n	8000cf6 <__udivmoddi4+0xa2>
 8000d36:	b902      	cbnz	r2, 8000d3a <__udivmoddi4+0xe6>
 8000d38:	deff      	udf	#255	; 0xff
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8090 	bne.w	8000e64 <__udivmoddi4+0x210>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d54:	fb07 2015 	mls	r0, r7, r5, r2
 8000d58:	0c22      	lsrs	r2, r4, #16
 8000d5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d5e:	fb0e f005 	mul.w	r0, lr, r5
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x124>
 8000d66:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x122>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2b8>
 8000d76:	4645      	mov	r5, r8
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d80:	fb07 2210 	mls	r2, r7, r0, r2
 8000d84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x14e>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x14c>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2c2>
 8000da0:	4610      	mov	r0, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000daa:	e79f      	b.n	8000cec <__udivmoddi4+0x98>
 8000dac:	f1c1 0720 	rsb	r7, r1, #32
 8000db0:	408b      	lsls	r3, r1
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa05 f401 	lsl.w	r4, r5, r1
 8000dbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc2:	40fd      	lsrs	r5, r7
 8000dc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc8:	4323      	orrs	r3, r4
 8000dca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000dd6:	0c1c      	lsrs	r4, r3, #16
 8000dd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ddc:	fb08 f50e 	mul.w	r5, r8, lr
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b0>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2b4>
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2b4>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4464      	add	r4, ip
 8000e04:	1b64      	subs	r4, r4, r5
 8000e06:	b29d      	uxth	r5, r3
 8000e08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1da>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2ac>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2ac>
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e32:	fba3 9502 	umull	r9, r5, r3, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	42ac      	cmp	r4, r5
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46ae      	mov	lr, r5
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x29c>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x298>
 8000e44:	b156      	cbz	r6, 8000e5c <__udivmoddi4+0x208>
 8000e46:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e52:	40ca      	lsrs	r2, r1
 8000e54:	40cc      	lsrs	r4, r1
 8000e56:	4317      	orrs	r7, r2
 8000e58:	e9c6 7400 	strd	r7, r4, [r6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e64:	f1c3 0120 	rsb	r1, r3, #32
 8000e68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e70:	fa25 f101 	lsr.w	r1, r5, r1
 8000e74:	409d      	lsls	r5, r3
 8000e76:	432a      	orrs	r2, r5
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e84:	fb07 1510 	mls	r5, r7, r0, r1
 8000e88:	0c11      	lsrs	r1, r2, #16
 8000e8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e92:	428d      	cmp	r5, r1
 8000e94:	fa04 f403 	lsl.w	r4, r4, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x258>
 8000e9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b0>
 8000ea4:	428d      	cmp	r5, r1
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b0>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	1b49      	subs	r1, r1, r5
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec0:	4291      	cmp	r1, r2
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x282>
 8000ec4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2a8>
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2a8>
 8000ed2:	3d02      	subs	r5, #2
 8000ed4:	4462      	add	r2, ip
 8000ed6:	1a52      	subs	r2, r2, r1
 8000ed8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0xfc>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xa2>
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	e6e6      	b.n	8000cb6 <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x90>
 8000eec:	4548      	cmp	r0, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f0>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f0>
 8000efc:	4645      	mov	r5, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x282>
 8000f00:	462b      	mov	r3, r5
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1da>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x258>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b0>
 8000f0c:	3d02      	subs	r5, #2
 8000f0e:	4462      	add	r2, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x124>
 8000f12:	4608      	mov	r0, r1
 8000f14:	e70a      	b.n	8000d2c <__udivmoddi4+0xd8>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x14e>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_d2uiz>:
 8000f20:	004a      	lsls	r2, r1, #1
 8000f22:	d211      	bcs.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f28:	d211      	bcs.n	8000f4e <__aeabi_d2uiz+0x2e>
 8000f2a:	d50d      	bpl.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f34:	d40e      	bmi.n	8000f54 <__aeabi_d2uiz+0x34>
 8000f36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f42:	fa23 f002 	lsr.w	r0, r3, r2
 8000f46:	4770      	bx	lr
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	4770      	bx	lr
 8000f4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f52:	d102      	bne.n	8000f5a <__aeabi_d2uiz+0x3a>
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4770      	bx	lr

08000f60 <initCellDefaults>:
    newCell.over_temp = false;
    newCell.under_temp = false;
    newCell.over_current = false;
    newCell.under_current = false;

    return newCell;
 8000f60:	7042      	strb	r2, [r0, #1]
 8000f62:	2200      	movs	r2, #0
 8000f64:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8000f68:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8000f6c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8000f70:	7001      	strb	r1, [r0, #0]
 8000f72:	61c2      	str	r2, [r0, #28]
}
 8000f74:	4770      	bx	lr

08000f76 <getCellFaults>:
    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
    result |= (cell->cell & 0x0F) << 8;

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 8000f76:	7e02      	ldrb	r2, [r0, #24]
    result |= (cell->module & 0x0F) << 12;
 8000f78:	7803      	ldrb	r3, [r0, #0]
    result |= (cell->power_rail & 0x01) << 7;
 8000f7a:	01d2      	lsls	r2, r2, #7
    result |= (cell->over_voltage & 0x01) << 5;
    result |= (cell->under_voltage & 0x01) << 4;
    result |= (cell->over_temp & 0x01) << 3;
    result |= (cell->under_temp & 0x01) << 2;
    result |= (cell->over_current & 0x01) << 1;
    result |= (cell->under_current & 0x01);
 8000f7c:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
 8000f80:	7fc3      	ldrb	r3, [r0, #31]
 8000f82:	4313      	orrs	r3, r2
    result |= (cell->comm & 0x01) << 6;
 8000f84:	7e42      	ldrb	r2, [r0, #25]
    result |= (cell->under_current & 0x01);
 8000f86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    result |= (cell->over_voltage & 0x01) << 5;
 8000f8a:	7e82      	ldrb	r2, [r0, #26]
    result |= (cell->under_current & 0x01);
 8000f8c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    result |= (cell->under_voltage & 0x01) << 4;
 8000f90:	7ec2      	ldrb	r2, [r0, #27]
    result |= (cell->under_current & 0x01);
 8000f92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    result |= (cell->over_temp & 0x01) << 3;
 8000f96:	7f02      	ldrb	r2, [r0, #28]
    result |= (cell->under_current & 0x01);
 8000f98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    result |= (cell->under_temp & 0x01) << 2;
 8000f9c:	7f42      	ldrb	r2, [r0, #29]
    result |= (cell->under_current & 0x01);
 8000f9e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    result |= (cell->over_current & 0x01) << 1;
 8000fa2:	7f82      	ldrb	r2, [r0, #30]
    result |= (cell->under_current & 0x01);
 8000fa4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    result |= (cell->cell & 0x0F) << 8;
 8000fa8:	7842      	ldrb	r2, [r0, #1]
 8000faa:	0212      	lsls	r2, r2, #8
 8000fac:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    result |= (cell->under_current & 0x01);
 8000fb0:	ea43 0002 	orr.w	r0, r3, r2

    return result;
}
 8000fb4:	b280      	uxth	r0, r0
 8000fb6:	4770      	bx	lr

08000fb8 <startupSequence>:
float thermistor_resistance; // Calculated unknown resistance from checkVIT
float cell_vref; 			 // measurement voltage for vref
float soc; 					 // State of Charge
float sop; 					 // State of Power

int startupSequence(void){
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	//
	// Negative Contactor Enable
	//

	// Send high Signal to NEG_LSD_OUTPUT
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8000fba:	486c      	ldr	r0, [pc, #432]	; (800116c <startupSequence+0x1b4>)
int startupSequence(void){
 8000fbc:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f001 ff54 	bl	8002e70 <HAL_GPIO_WritePin>

	// Read NEG_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 8000fc8:	4868      	ldr	r0, [pc, #416]	; (800116c <startupSequence+0x1b4>)
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	f001 ff49 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000fd2:	b918      	cbnz	r0, 8000fdc <startupSequence+0x24>
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }

	// Start-up Sequence Concluded Successfully
	return 0;
}
 8000fd8:	b005      	add	sp, #20
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_GPIO_WritePin(NEG_HSD_OUTPUT_GPIO, NEG_HSD_OUTPUT_PIN, 1);
 8000fdc:	4864      	ldr	r0, [pc, #400]	; (8001170 <startupSequence+0x1b8>)
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f001 ff44 	bl	8002e70 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 8000fe8:	4860      	ldr	r0, [pc, #384]	; (800116c <startupSequence+0x1b4>)
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	f001 ff39 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d0ee      	beq.n	8000fd4 <startupSequence+0x1c>
		if (HAL_GPIO_ReadPin(NEG_CON_INPUT_GPIO, NEG_CON_INPUT_PIN)){ return -1; }
 8000ff6:	485f      	ldr	r0, [pc, #380]	; (8001174 <startupSequence+0x1bc>)
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	f001 ff32 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1e7      	bne.n	8000fd4 <startupSequence+0x1c>
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 1);
 8001004:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100c:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8001010:	2201      	movs	r2, #1
 8001012:	f001 ff2d 	bl	8002e70 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 8001016:	4858      	ldr	r0, [pc, #352]	; (8001178 <startupSequence+0x1c0>)
 8001018:	2104      	movs	r1, #4
 800101a:	f001 ff23 	bl	8002e64 <HAL_GPIO_ReadPin>
 800101e:	2800      	cmp	r0, #0
 8001020:	d0d8      	beq.n	8000fd4 <startupSequence+0x1c>
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 1);
 8001022:	4853      	ldr	r0, [pc, #332]	; (8001170 <startupSequence+0x1b8>)
 8001024:	2120      	movs	r1, #32
 8001026:	2201      	movs	r2, #1
 8001028:	f001 ff22 	bl	8002e70 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 800102c:	4850      	ldr	r0, [pc, #320]	; (8001170 <startupSequence+0x1b8>)
 800102e:	2110      	movs	r1, #16
 8001030:	f001 ff18 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001034:	2800      	cmp	r0, #0
 8001036:	d0cd      	beq.n	8000fd4 <startupSequence+0x1c>
		if (HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 8001038:	484c      	ldr	r0, [pc, #304]	; (800116c <startupSequence+0x1b4>)
 800103a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103e:	f001 ff11 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1c6      	bne.n	8000fd4 <startupSequence+0x1c>
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 8001046:	4d4d      	ldr	r5, [pc, #308]	; (800117c <startupSequence+0x1c4>)
		    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8001048:	4f4d      	ldr	r7, [pc, #308]	; (8001180 <startupSequence+0x1c8>)
 800104a:	4e4e      	ldr	r6, [pc, #312]	; (8001184 <startupSequence+0x1cc>)
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 800104c:	ed95 7a00 	vldr	s14, [r5]
 8001050:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8001054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	d43f      	bmi.n	80010de <startupSequence+0x126>
	HAL_GPIO_WritePin(POS_LSD_OUTPUT_GPIO, POS_LSD_OUTPUT_PIN, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	4843      	ldr	r0, [pc, #268]	; (8001170 <startupSequence+0x1b8>)
 8001062:	4611      	mov	r1, r2
 8001064:	f001 ff04 	bl	8002e70 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(POS_LSD_INPUT_GPIO, POS_LSD_INPUT_PIN)){ return -1; }
 8001068:	4840      	ldr	r0, [pc, #256]	; (800116c <startupSequence+0x1b4>)
 800106a:	2102      	movs	r1, #2
 800106c:	f001 fefa 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001070:	2800      	cmp	r0, #0
 8001072:	d0af      	beq.n	8000fd4 <startupSequence+0x1c>
	HAL_GPIO_WritePin(POS_HSD_OUTPUT_GPIO, POS_HSD_OUTPUT_PIN, 1);
 8001074:	483d      	ldr	r0, [pc, #244]	; (800116c <startupSequence+0x1b4>)
 8001076:	2108      	movs	r1, #8
 8001078:	2201      	movs	r2, #1
 800107a:	f001 fef9 	bl	8002e70 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(POS_HSD_INPUT_GPIO, POS_HSD_INPUT_PIN)){ return -1; }
 800107e:	483b      	ldr	r0, [pc, #236]	; (800116c <startupSequence+0x1b4>)
 8001080:	2104      	movs	r1, #4
 8001082:	f001 feef 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001086:	2800      	cmp	r0, #0
 8001088:	d0a4      	beq.n	8000fd4 <startupSequence+0x1c>
		if (HAL_GPIO_ReadPin(POS_CON_INPUT_GPIO, POS_CON_INPUT_PIN)){ return -1; }
 800108a:	4838      	ldr	r0, [pc, #224]	; (800116c <startupSequence+0x1b4>)
 800108c:	2101      	movs	r1, #1
 800108e:	f001 fee9 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001092:	4602      	mov	r2, r0
 8001094:	2800      	cmp	r0, #0
 8001096:	d19d      	bne.n	8000fd4 <startupSequence+0x1c>
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 0);
 8001098:	4835      	ldr	r0, [pc, #212]	; (8001170 <startupSequence+0x1b8>)
 800109a:	2120      	movs	r1, #32
 800109c:	f001 fee8 	bl	8002e70 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80010a0:	4833      	ldr	r0, [pc, #204]	; (8001170 <startupSequence+0x1b8>)
 80010a2:	2110      	movs	r1, #16
 80010a4:	f001 fede 	bl	8002e64 <HAL_GPIO_ReadPin>
 80010a8:	4602      	mov	r2, r0
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d192      	bne.n	8000fd4 <startupSequence+0x1c>
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 0);
 80010ae:	482f      	ldr	r0, [pc, #188]	; (800116c <startupSequence+0x1b4>)
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	f001 fedc 	bl	8002e70 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 80010b8:	482f      	ldr	r0, [pc, #188]	; (8001178 <startupSequence+0x1c0>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	f001 fed2 	bl	8002e64 <HAL_GPIO_ReadPin>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d187      	bne.n	8000fd4 <startupSequence+0x1c>
		if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 80010c4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80010d0:	f001 fec8 	bl	8002e64 <HAL_GPIO_ReadPin>
 80010d4:	fab0 f080 	clz	r0, r0
 80010d8:	0940      	lsrs	r0, r0, #5
 80010da:	4240      	negs	r0, r0
 80010dc:	e77c      	b.n	8000fd8 <startupSequence+0x20>
		    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80010de:	2203      	movs	r2, #3
 80010e0:	4927      	ldr	r1, [pc, #156]	; (8001180 <startupSequence+0x1c8>)
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 ffbe 	bl	8002064 <HAL_ADC_Start_DMA>
		    HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 80010e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ec:	4630      	mov	r0, r6
 80010ee:	f000 ff65 	bl	8001fbc <HAL_ADC_PollForConversion>
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 80010f2:	883b      	ldrh	r3, [r7, #0]
 80010f4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001188 <startupSequence+0x1d0>
		    sprintf(IntPartStr, "%02X", intPart);
 80010f8:	4924      	ldr	r1, [pc, #144]	; (800118c <startupSequence+0x1d4>)
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 80010fa:	ee07 3a10 	vmov	s14, r3
 80010fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		    sprintf(IntPartStr, "%02X", intPart);
 8001102:	4668      	mov	r0, sp
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	edc5 7a00 	vstr	s15, [r5]
		    uint16_t intPart = (uint16_t)pre_charge_voltage;
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		    sprintf(IntPartStr, "%02X", intPart);
 8001110:	ee17 3a90 	vmov	r3, s15
 8001114:	b29c      	uxth	r4, r3
 8001116:	4622      	mov	r2, r4
 8001118:	f007 fb2a 	bl	8008770 <siprintf>
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 800111c:	ee07 4a90 	vmov	s15, r4
 8001120:	ed95 7a00 	vldr	s14, [r5]
		    sprintf(FracPartStr, "%02X", fracPart);
 8001124:	4919      	ldr	r1, [pc, #100]	; (800118c <startupSequence+0x1d4>)
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		    sprintf(FracPartStr, "%02X", fracPart);
 800112a:	a801      	add	r0, sp, #4
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001190 <startupSequence+0x1d8>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		    sprintf(FracPartStr, "%02X", fracPart);
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	b29a      	uxth	r2, r3
 8001142:	f007 fb15 	bl	8008770 <siprintf>
		    sprintf(ResultStr, "%s.%s\r\n", IntPartStr, FracPartStr);
 8001146:	ab01      	add	r3, sp, #4
 8001148:	466a      	mov	r2, sp
 800114a:	4912      	ldr	r1, [pc, #72]	; (8001194 <startupSequence+0x1dc>)
 800114c:	a802      	add	r0, sp, #8
 800114e:	f007 fb0f 	bl	8008770 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001152:	2208      	movs	r2, #8
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	eb0d 0102 	add.w	r1, sp, r2
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <startupSequence+0x1e0>)
 800115c:	f002 fa89 	bl	8003672 <HAL_UART_Transmit>
		    HAL_Delay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001164:	f000 fe5e 	bl	8001e24 <HAL_Delay>
 8001168:	e770      	b.n	800104c <startupSequence+0x94>
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	40020000 	.word	0x40020000
 8001178:	40020c00 	.word	0x40020c00
 800117c:	20001664 	.word	0x20001664
 8001180:	2000152c 	.word	0x2000152c
 8001184:	20001540 	.word	0x20001540
 8001188:	447a0000 	.word	0x447a0000
 800118c:	0800b334 	.word	0x0800b334
 8001190:	42c80000 	.word	0x42c80000
 8001194:	0800b34d 	.word	0x0800b34d
 8001198:	20001618 	.word	0x20001618

0800119c <checkStatusTransmit>:

void checkStatusTransmit(Cell* cell){
 800119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a0:	ed2d 8b02 	vpush	{d8}

	// TODO: Change this to read from BQ Board
	// append id, mod and cell number to sensor reading
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80011a4:	4db5      	ldr	r5, [pc, #724]	; (800147c <checkStatusTransmit+0x2e0>)
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 80011a6:	f8df 832c 	ldr.w	r8, [pc, #812]	; 80014d4 <checkStatusTransmit+0x338>
	cell_current = cell_voltage / known_resistance;
	cell->I = cell_current;

	// TODO: determine temp based off linear eq of degrees vs ohms
	// calculate thermistor R = (Vref - V) /I
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 80011aa:	f8df 932c 	ldr.w	r9, [pc, #812]	; 80014d8 <checkStatusTransmit+0x33c>
	cell_current = cell_voltage / known_resistance;
 80011ae:	4fb4      	ldr	r7, [pc, #720]	; (8001480 <checkStatusTransmit+0x2e4>)
	uint16_t intPart = (uint16_t)cell_voltage;
	char IntPartStr[3];
	sprintf(IntPartStr, "%02X", intPart);

	// Convert the fractional part to a hexadecimal string
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 80011b0:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 8001484 <checkStatusTransmit+0x2e8>
void checkStatusTransmit(Cell* cell){
 80011b4:	b08f      	sub	sp, #60	; 0x3c
 80011b6:	4604      	mov	r4, r0
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80011b8:	2203      	movs	r2, #3
 80011ba:	4629      	mov	r1, r5
 80011bc:	48b2      	ldr	r0, [pc, #712]	; (8001488 <checkStatusTransmit+0x2ec>)
 80011be:	f000 ff51 	bl	8002064 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 80011c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c6:	48b0      	ldr	r0, [pc, #704]	; (8001488 <checkStatusTransmit+0x2ec>)
 80011c8:	f000 fef8 	bl	8001fbc <HAL_ADC_PollForConversion>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 80011cc:	886b      	ldrh	r3, [r5, #2]
 80011ce:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 800148c <checkStatusTransmit+0x2f0>
	sprintf(mod_numStr, "%1X", mod_num);
 80011d2:	49af      	ldr	r1, [pc, #700]	; (8001490 <checkStatusTransmit+0x2f4>)
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
	cell_vref = (float)cell_analog_values[2]/1000;
 80011dc:	88ab      	ldrh	r3, [r5, #4]
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 80011de:	ee87 7a86 	vdiv.f32	s14, s15, s12
	sprintf(mod_numStr, "%1X", mod_num);
 80011e2:	a803      	add	r0, sp, #12
	sprintf(IntPartStr, "%02X", intPart);
 80011e4:	ad05      	add	r5, sp, #20
	char FracPartStr[3];
	sprintf(FracPartStr, "%02X", fracPart);
 80011e6:	ae06      	add	r6, sp, #24
	cell_vref = (float)cell_analog_values[2]/1000;
 80011e8:	ee06 3a90 	vmov	s13, r3
	cell->V = cell_voltage;
 80011ec:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	cell_vref = (float)cell_analog_values[2]/1000;
 80011f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
	cell->V = cell_voltage;
 80011f4:	edc4 7a03 	vstr	s15, [r4, #12]
	cell_vref = (float)cell_analog_values[2]/1000;
 80011f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011fc:	4ba5      	ldr	r3, [pc, #660]	; (8001494 <checkStatusTransmit+0x2f8>)
	cell_current = cell_voltage / known_resistance;
 80011fe:	ed9f 6aa6 	vldr	s12, [pc, #664]	; 8001498 <checkStatusTransmit+0x2fc>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8001202:	ed88 7a00 	vstr	s14, [r8]
	cell_current = cell_voltage / known_resistance;
 8001206:	eec7 6a06 	vdiv.f32	s13, s14, s12
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 800120a:	ee37 7ac7 	vsub.f32	s14, s15, s14
	cell_vref = (float)cell_analog_values[2]/1000;
 800120e:	edc3 7a00 	vstr	s15, [r3]
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
	cell->I = cell_current;
 8001216:	eebc 6ae6 	vcvt.u32.f32	s12, s13
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 800121a:	edc9 7a00 	vstr	s15, [r9]
	cell->T = thermistor_resistance;
 800121e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	cell_current = cell_voltage / known_resistance;
 8001222:	edc7 6a00 	vstr	s13, [r7]
	cell->I = cell_current;
 8001226:	ed84 6a04 	vstr	s12, [r4, #16]
	cell->T = thermistor_resistance;
 800122a:	edc4 7a05 	vstr	s15, [r4, #20]
	sprintf(mod_numStr, "%1X", mod_num);
 800122e:	7822      	ldrb	r2, [r4, #0]
 8001230:	f007 fa9e 	bl	8008770 <siprintf>
	sprintf(cell_numStr, "%1X", cell_num);
 8001234:	7862      	ldrb	r2, [r4, #1]
 8001236:	4996      	ldr	r1, [pc, #600]	; (8001490 <checkStatusTransmit+0x2f4>)
 8001238:	a804      	add	r0, sp, #16
 800123a:	f007 fa99 	bl	8008770 <siprintf>
    Fault = getCellFaults(cell);
 800123e:	4620      	mov	r0, r4
 8001240:	f7ff fe99 	bl	8000f76 <getCellFaults>
    sprintf(FaultStr, "%04X", Fault);
 8001244:	4995      	ldr	r1, [pc, #596]	; (800149c <checkStatusTransmit+0x300>)
    Fault = getCellFaults(cell);
 8001246:	4602      	mov	r2, r0
    sprintf(FaultStr, "%04X", Fault);
 8001248:	a807      	add	r0, sp, #28
 800124a:	f007 fa91 	bl	8008770 <siprintf>
	sprintf(FaultResultStr, "7%s\r\n", FaultStr);
 800124e:	4994      	ldr	r1, [pc, #592]	; (80014a0 <checkStatusTransmit+0x304>)
 8001250:	aa07      	add	r2, sp, #28
 8001252:	a809      	add	r0, sp, #36	; 0x24
 8001254:	f007 fa8c 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)FaultResultStr, sizeof(FaultResultStr), 100);
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	2207      	movs	r2, #7
 800125c:	a909      	add	r1, sp, #36	; 0x24
 800125e:	4891      	ldr	r0, [pc, #580]	; (80014a4 <checkStatusTransmit+0x308>)
 8001260:	f002 fa07 	bl	8003672 <HAL_UART_Transmit>
	uint16_t intPart = (uint16_t)cell_voltage;
 8001264:	edd8 7a00 	vldr	s15, [r8]
	sprintf(IntPartStr, "%02X", intPart);
 8001268:	498f      	ldr	r1, [pc, #572]	; (80014a8 <checkStatusTransmit+0x30c>)
	uint16_t intPart = (uint16_t)cell_voltage;
 800126a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 800126e:	4628      	mov	r0, r5
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b29c      	uxth	r4, r3
 8001276:	4622      	mov	r2, r4
 8001278:	f007 fa7a 	bl	8008770 <siprintf>
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 800127c:	ee07 4a90 	vmov	s15, r4
 8001280:	ed98 7a00 	vldr	s14, [r8]
	sprintf(FracPartStr, "%02X", fracPart);
 8001284:	4988      	ldr	r1, [pc, #544]	; (80014a8 <checkStatusTransmit+0x30c>)
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800128a:	4630      	mov	r0, r6
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 800128c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001290:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 8001298:	ee17 3a90 	vmov	r3, s15
 800129c:	b29a      	uxth	r2, r3
 800129e:	f007 fa67 	bl	8008770 <siprintf>

	// Write to UART
	char ResultStr[11];
	sprintf(ResultStr, "1%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 80012a2:	4982      	ldr	r1, [pc, #520]	; (80014ac <checkStatusTransmit+0x310>)
 80012a4:	ab04      	add	r3, sp, #16
 80012a6:	aa03      	add	r2, sp, #12
 80012a8:	e9cd 5600 	strd	r5, r6, [sp]
 80012ac:	a80b      	add	r0, sp, #44	; 0x2c
 80012ae:	f007 fa5f 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	220b      	movs	r2, #11
 80012b6:	a90b      	add	r1, sp, #44	; 0x2c
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <checkStatusTransmit+0x308>)
 80012ba:	f002 f9da 	bl	8003672 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)cell_current;
 80012be:	edd7 7a00 	vldr	s15, [r7]
	sprintf(IntPartStr, "%02X", intPart);
 80012c2:	4979      	ldr	r1, [pc, #484]	; (80014a8 <checkStatusTransmit+0x30c>)
	intPart = (uint16_t)cell_current;
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 80012c8:	4628      	mov	r0, r5
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	b29c      	uxth	r4, r3
 80012d0:	4622      	mov	r2, r4
 80012d2:	f007 fa4d 	bl	8008770 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 80012d6:	ee07 4a90 	vmov	s15, r4
 80012da:	ed97 7a00 	vldr	s14, [r7]
	sprintf(FracPartStr, "%02X", fracPart);
 80012de:	4972      	ldr	r1, [pc, #456]	; (80014a8 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80012e4:	4630      	mov	r0, r6
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 80012e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f007 fa3a 	bl	8008770 <siprintf>

	// Write to UART
	sprintf(ResultStr, "2%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 80012fc:	496c      	ldr	r1, [pc, #432]	; (80014b0 <checkStatusTransmit+0x314>)
 80012fe:	ab04      	add	r3, sp, #16
 8001300:	aa03      	add	r2, sp, #12
 8001302:	e9cd 5600 	strd	r5, r6, [sp]
 8001306:	a80b      	add	r0, sp, #44	; 0x2c
 8001308:	f007 fa32 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	220b      	movs	r2, #11
 8001310:	a90b      	add	r1, sp, #44	; 0x2c
 8001312:	4864      	ldr	r0, [pc, #400]	; (80014a4 <checkStatusTransmit+0x308>)
 8001314:	f002 f9ad 	bl	8003672 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)thermistor_resistance;
 8001318:	edd9 7a00 	vldr	s15, [r9]
	sprintf(IntPartStr, "%02X", intPart);
 800131c:	4962      	ldr	r1, [pc, #392]	; (80014a8 <checkStatusTransmit+0x30c>)
	intPart = (uint16_t)thermistor_resistance;
 800131e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 8001322:	4628      	mov	r0, r5
 8001324:	ee17 3a90 	vmov	r3, s15
 8001328:	b29c      	uxth	r4, r3
 800132a:	4622      	mov	r2, r4
 800132c:	f007 fa20 	bl	8008770 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8001330:	ee07 4a90 	vmov	s15, r4
 8001334:	ed99 7a00 	vldr	s14, [r9]
	sprintf(FracPartStr, "%02X", fracPart);
 8001338:	495b      	ldr	r1, [pc, #364]	; (80014a8 <checkStatusTransmit+0x30c>)

	// Update IO handlers with the data payload
	ai_input[0].data = AI_HANDLE_PTR(pIn);
	ai_output[0].data = AI_HANDLE_PTR(pOut);

	batch = ai_network_run(network, ai_input, ai_output);
 800133a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80014dc <checkStatusTransmit+0x340>
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 800133e:	4c5d      	ldr	r4, [pc, #372]	; (80014b4 <checkStatusTransmit+0x318>)
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 8001344:	4630      	mov	r0, r6
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 8001352:	ee17 3a90 	vmov	r3, s15
 8001356:	b29a      	uxth	r2, r3
 8001358:	f007 fa0a 	bl	8008770 <siprintf>
	sprintf(ResultStr, "3%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 800135c:	4956      	ldr	r1, [pc, #344]	; (80014b8 <checkStatusTransmit+0x31c>)
 800135e:	ab04      	add	r3, sp, #16
 8001360:	aa03      	add	r2, sp, #12
 8001362:	e9cd 5600 	strd	r5, r6, [sp]
 8001366:	a80b      	add	r0, sp, #44	; 0x2c
 8001368:	f007 fa02 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	220b      	movs	r2, #11
 8001370:	a90b      	add	r1, sp, #44	; 0x2c
 8001372:	484c      	ldr	r0, [pc, #304]	; (80014a4 <checkStatusTransmit+0x308>)
 8001374:	f002 f97d 	bl	8003672 <HAL_UART_Transmit>
	aiInData[0] = cell_voltage;
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <checkStatusTransmit+0x320>)
 800137a:	f8d8 2000 	ldr.w	r2, [r8]
 800137e:	601a      	str	r2, [r3, #0]
	aiInData[1] = cell_current;
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	605a      	str	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <checkStatusTransmit+0x324>)
	batch = ai_network_run(network, ai_input, ai_output);
 8001386:	f8d9 0000 	ldr.w	r0, [r9]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	604b      	str	r3, [r1, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <checkStatusTransmit+0x328>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	6054      	str	r4, [r2, #4]
	batch = ai_network_run(network, ai_input, ai_output);
 8001394:	f002 ffe9 	bl	800436a <ai_network_run>
	if (batch != 1){
 8001398:	2801      	cmp	r0, #1
 800139a:	d005      	beq.n	80013a8 <checkStatusTransmit+0x20c>
		err = ai_network_get_error(network);
 800139c:	f8d9 0000 	ldr.w	r0, [r9]
 80013a0:	f002 fe5a 	bl	8004058 <ai_network_get_error>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <checkStatusTransmit+0x20a>
    soc = aiOutData[0];
 80013a8:	edd4 7a00 	vldr	s15, [r4]
 80013ac:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80014e0 <checkStatusTransmit+0x344>
	sprintf(IntPartStr, "%02X", intPart);
 80013b0:	493d      	ldr	r1, [pc, #244]	; (80014a8 <checkStatusTransmit+0x30c>)
    soc = aiOutData[0];
 80013b2:	edc9 7a00 	vstr	s15, [r9]
	intPart = (uint16_t)soc;
 80013b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 80013ba:	4628      	mov	r0, r5
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	b29c      	uxth	r4, r3
 80013c2:	4622      	mov	r2, r4
 80013c4:	f007 f9d4 	bl	8008770 <siprintf>
	fracPart = (uint16_t)((soc - intPart) * 100);
 80013c8:	ee07 4a90 	vmov	s15, r4
 80013cc:	ed99 7a00 	vldr	s14, [r9]
	sprintf(FracPartStr, "%02X", fracPart);
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((soc - intPart) * 100);
 80013d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80013d6:	4630      	mov	r0, r6
	fracPart = (uint16_t)((soc - intPart) * 100);
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f007 f9c1 	bl	8008770 <siprintf>
	sprintf(ResultStr, "5%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 80013ee:	ab04      	add	r3, sp, #16
 80013f0:	aa03      	add	r2, sp, #12
 80013f2:	e9cd 5600 	strd	r5, r6, [sp]
 80013f6:	4934      	ldr	r1, [pc, #208]	; (80014c8 <checkStatusTransmit+0x32c>)
 80013f8:	a80b      	add	r0, sp, #44	; 0x2c
 80013fa:	f007 f9b9 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80013fe:	a90b      	add	r1, sp, #44	; 0x2c
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	220b      	movs	r2, #11
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <checkStatusTransmit+0x308>)
 8001406:	f002 f934 	bl	8003672 <HAL_UART_Transmit>
	sop = cell_voltage * cell_current;
 800140a:	ed97 7a00 	vldr	s14, [r7]
 800140e:	edd8 7a00 	vldr	s15, [r8]
 8001412:	4f2e      	ldr	r7, [pc, #184]	; (80014cc <checkStatusTransmit+0x330>)
	sprintf(IntPartStr, "%02X", intPart);
 8001414:	4924      	ldr	r1, [pc, #144]	; (80014a8 <checkStatusTransmit+0x30c>)
	sop = cell_voltage * cell_current;
 8001416:	ee67 7a87 	vmul.f32	s15, s15, s14
	sprintf(IntPartStr, "%02X", intPart);
 800141a:	4628      	mov	r0, r5
	sop = cell_voltage * cell_current;
 800141c:	edc7 7a00 	vstr	s15, [r7]
	intPart = (uint16_t)sop;
 8001420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(IntPartStr, "%02X", intPart);
 8001424:	ee17 3a90 	vmov	r3, s15
 8001428:	b29c      	uxth	r4, r3
 800142a:	4622      	mov	r2, r4
 800142c:	f007 f9a0 	bl	8008770 <siprintf>
	fracPart = (uint16_t)((sop - intPart) * 100);
 8001430:	ee07 4a90 	vmov	s15, r4
 8001434:	ed97 7a00 	vldr	s14, [r7]
	sprintf(FracPartStr, "%02X", fracPart);
 8001438:	491b      	ldr	r1, [pc, #108]	; (80014a8 <checkStatusTransmit+0x30c>)
	fracPart = (uint16_t)((sop - intPart) * 100);
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800143e:	4630      	mov	r0, r6
	fracPart = (uint16_t)((sop - intPart) * 100);
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sprintf(FracPartStr, "%02X", fracPart);
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b29a      	uxth	r2, r3
 8001452:	f007 f98d 	bl	8008770 <siprintf>
	sprintf(ResultStr, "6%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8001456:	ab04      	add	r3, sp, #16
 8001458:	aa03      	add	r2, sp, #12
 800145a:	e9cd 5600 	strd	r5, r6, [sp]
 800145e:	491c      	ldr	r1, [pc, #112]	; (80014d0 <checkStatusTransmit+0x334>)
 8001460:	a80b      	add	r0, sp, #44	; 0x2c
 8001462:	f007 f985 	bl	8008770 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	220b      	movs	r2, #11
 800146a:	a90b      	add	r1, sp, #44	; 0x2c
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <checkStatusTransmit+0x308>)
 800146e:	f002 f900 	bl	8003672 <HAL_UART_Transmit>
}
 8001472:	b00f      	add	sp, #60	; 0x3c
 8001474:	ecbd 8b02 	vpop	{d8}
 8001478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147c:	2000152c 	.word	0x2000152c
 8001480:	20001534 	.word	0x20001534
 8001484:	42c80000 	.word	0x42c80000
 8001488:	20001540 	.word	0x20001540
 800148c:	447a0000 	.word	0x447a0000
 8001490:	0800b339 	.word	0x0800b339
 8001494:	2000153c 	.word	0x2000153c
 8001498:	435c0000 	.word	0x435c0000
 800149c:	0800b33d 	.word	0x0800b33d
 80014a0:	0800b342 	.word	0x0800b342
 80014a4:	20001618 	.word	0x20001618
 80014a8:	0800b334 	.word	0x0800b334
 80014ac:	0800b348 	.word	0x0800b348
 80014b0:	0800b355 	.word	0x0800b355
 80014b4:	20001520 	.word	0x20001520
 80014b8:	0800b362 	.word	0x0800b362
 80014bc:	20001518 	.word	0x20001518
 80014c0:	20001524 	.word	0x20001524
 80014c4:	20001528 	.word	0x20001528
 80014c8:	0800b36f 	.word	0x0800b36f
 80014cc:	2000166c 	.word	0x2000166c
 80014d0:	0800b37c 	.word	0x0800b37c
 80014d4:	20001538 	.word	0x20001538
 80014d8:	20001670 	.word	0x20001670
 80014dc:	20001660 	.word	0x20001660
 80014e0:	20001668 	.word	0x20001668

080014e4 <SystemClock_Config>:
{
 80014e4:	b510      	push	{r4, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e8:	2214      	movs	r2, #20
 80014ea:	2100      	movs	r1, #0
 80014ec:	a808      	add	r0, sp, #32
 80014ee:	f007 f9a2 	bl	8008836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f2:	2214      	movs	r2, #20
 80014f4:	2100      	movs	r1, #0
 80014f6:	a802      	add	r0, sp, #8
 80014f8:	f007 f99d 	bl	8008836 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	4a21      	ldr	r2, [pc, #132]	; (8001584 <SystemClock_Config+0xa0>)
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001504:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001508:	6411      	str	r1, [r2, #64]	; 0x40
 800150a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800150c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <SystemClock_Config+0xa4>)
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	6811      	ldr	r1, [r2, #0]
 800151a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800151e:	6011      	str	r1, [r2, #0]
 8001520:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001522:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001524:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001528:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001530:	23b4      	movs	r3, #180	; 0xb4
 8001532:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153a:	2101      	movs	r1, #1
 800153c:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001544:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001548:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f001 fdd9 	bl	8003100 <HAL_RCC_OscConfig>
 800154e:	b108      	cbz	r0, 8001554 <SystemClock_Config+0x70>
 8001550:	b672      	cpsid	i
  while (1)
 8001552:	e7fe      	b.n	8001552 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001554:	f001 fc92 	bl	8002e7c <HAL_PWREx_EnableOverDrive>
 8001558:	b108      	cbz	r0, 800155e <SystemClock_Config+0x7a>
 800155a:	b672      	cpsid	i
  while (1)
 800155c:	e7fe      	b.n	800155c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001560:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156e:	2105      	movs	r1, #5
 8001570:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001576:	f001 fcbb 	bl	8002ef0 <HAL_RCC_ClockConfig>
 800157a:	b108      	cbz	r0, 8001580 <SystemClock_Config+0x9c>
 800157c:	b672      	cpsid	i
  while (1)
 800157e:	e7fe      	b.n	800157e <SystemClock_Config+0x9a>
}
 8001580:	b014      	add	sp, #80	; 0x50
 8001582:	bd10      	pop	{r4, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <main>:
{
 800158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001590:	b0f1      	sub	sp, #452	; 0x1c4
  HAL_Init();
 8001592:	f000 fc1b 	bl	8001dcc <HAL_Init>
  Cell cell1 = initCellDefaults(1, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4611      	mov	r1, r2
 800159a:	a806      	add	r0, sp, #24
 800159c:	f7ff fce0 	bl	8000f60 <initCellDefaults>
  Cell cell2 = initCellDefaults(1, 2);
 80015a0:	2202      	movs	r2, #2
 80015a2:	a80e      	add	r0, sp, #56	; 0x38
 80015a4:	f7ff fcdc 	bl	8000f60 <initCellDefaults>
  Cell cell3 = initCellDefaults(1, 3);
 80015a8:	2203      	movs	r2, #3
 80015aa:	a816      	add	r0, sp, #88	; 0x58
 80015ac:	f7ff fcd8 	bl	8000f60 <initCellDefaults>
  Cell cell4 = initCellDefaults(1, 4);
 80015b0:	2204      	movs	r2, #4
 80015b2:	a81e      	add	r0, sp, #120	; 0x78
 80015b4:	f7ff fcd4 	bl	8000f60 <initCellDefaults>
  Cell cell5 = initCellDefaults(1, 5);
 80015b8:	2205      	movs	r2, #5
 80015ba:	a826      	add	r0, sp, #152	; 0x98
 80015bc:	f7ff fcd0 	bl	8000f60 <initCellDefaults>
  Cell cell6 = initCellDefaults(1, 6);
 80015c0:	2206      	movs	r2, #6
 80015c2:	a82e      	add	r0, sp, #184	; 0xb8
 80015c4:	f7ff fccc 	bl	8000f60 <initCellDefaults>
  Cell cell7 = initCellDefaults(1, 7);
 80015c8:	2207      	movs	r2, #7
 80015ca:	a836      	add	r0, sp, #216	; 0xd8
 80015cc:	f7ff fcc8 	bl	8000f60 <initCellDefaults>
  Cell cell8 = initCellDefaults(1, 8);
 80015d0:	2208      	movs	r2, #8
 80015d2:	a83e      	add	r0, sp, #248	; 0xf8
 80015d4:	f7ff fcc4 	bl	8000f60 <initCellDefaults>
  Cell cell9 = initCellDefaults(1, 9);
 80015d8:	2209      	movs	r2, #9
 80015da:	a846      	add	r0, sp, #280	; 0x118
 80015dc:	f7ff fcc0 	bl	8000f60 <initCellDefaults>
  Cell cell10 = initCellDefaults(1, 10);
 80015e0:	220a      	movs	r2, #10
 80015e2:	a84e      	add	r0, sp, #312	; 0x138
 80015e4:	f7ff fcbc 	bl	8000f60 <initCellDefaults>
  Cell cell11 = initCellDefaults(1, 11);
 80015e8:	220b      	movs	r2, #11
 80015ea:	a856      	add	r0, sp, #344	; 0x158
 80015ec:	f7ff fcb8 	bl	8000f60 <initCellDefaults>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	2714      	movs	r7, #20
  Cell cell12 = initCellDefaults(1, 12);
 80015f2:	220c      	movs	r2, #12
 80015f4:	a85e      	add	r0, sp, #376	; 0x178
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2400      	movs	r4, #0
 80015f8:	4d9d      	ldr	r5, [pc, #628]	; (8001870 <main+0x2e4>)
  Cell cell12 = initCellDefaults(1, 12);
 80015fa:	f7ff fcb1 	bl	8000f60 <initCellDefaults>
  SystemClock_Config();
 80015fe:	f7ff ff71 	bl	80014e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	463a      	mov	r2, r7
 8001604:	2100      	movs	r1, #0
 8001606:	a866      	add	r0, sp, #408	; 0x198
 8001608:	f007 f915 	bl	8008836 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	9401      	str	r4, [sp, #4]
 800160e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001610:	4898      	ldr	r0, [pc, #608]	; (8001874 <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	632b      	str	r3, [r5, #48]	; 0x30
 8001618:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	9402      	str	r4, [sp, #8]
 8001624:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162a:	632b      	str	r3, [r5, #48]	; 0x30
 800162c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	9403      	str	r4, [sp, #12]
 8001638:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	632b      	str	r3, [r5, #48]	; 0x30
 8001640:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	9303      	str	r3, [sp, #12]
 8001648:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	9404      	str	r4, [sp, #16]
 800164c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	632b      	str	r3, [r5, #48]	; 0x30
 8001654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	9304      	str	r3, [sp, #16]
 800165c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	9405      	str	r4, [sp, #20]
 8001660:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	632b      	str	r3, [r5, #48]	; 0x30
 8001668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001670:	4622      	mov	r2, r4
 8001672:	f641 0108 	movw	r1, #6152	; 0x1808
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001678:	f001 fbfa 	bl	8002e70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800167c:	487e      	ldr	r0, [pc, #504]	; (8001878 <main+0x2ec>)
 800167e:	4622      	mov	r2, r4
 8001680:	21e0      	movs	r1, #224	; 0xe0
 8001682:	f001 fbf5 	bl	8002e70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8001686:	487d      	ldr	r0, [pc, #500]	; (800187c <main+0x2f0>)
 8001688:	4622      	mov	r2, r4
 800168a:	f240 1121 	movw	r1, #289	; 0x121
 800168e:	f001 fbef 	bl	8002e70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169a:	4876      	ldr	r0, [pc, #472]	; (8001874 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	9468      	str	r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169e:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a0:	e9cd 2366 	strd	r2, r3, [sp, #408]	; 0x198
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f001 fb0a 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9
 80016a8:	f240 6307 	movw	r3, #1543	; 0x607
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	4871      	ldr	r0, [pc, #452]	; (8001874 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	9468      	str	r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	e9cd 3466 	strd	r3, r4, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f001 fb00 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	f641 0308 	movw	r3, #6152	; 0x1808
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	486c      	ldr	r0, [pc, #432]	; (8001874 <main+0x2e8>)
 80016c2:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	e9cd 3666 	strd	r3, r6, [sp, #408]	; 0x198
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	e9cd 4468 	strd	r4, r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	f001 faf6 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80016d0:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	4869      	ldr	r0, [pc, #420]	; (8001878 <main+0x2ec>)
 80016d4:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	e9cd 3666 	strd	r3, r6, [sp, #408]	; 0x198
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	e9cd 4468 	strd	r4, r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f001 faed 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8;
 80016e2:	f240 1321 	movw	r3, #289	; 0x121
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	4865      	ldr	r0, [pc, #404]	; (800187c <main+0x2f0>)
 80016e8:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	e9cd 3666 	strd	r3, r6, [sp, #408]	; 0x198
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	e9cd 4468 	strd	r4, r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f001 fae3 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 80016f6:	f44f 4303 	mov.w	r3, #33536	; 0x8300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	485f      	ldr	r0, [pc, #380]	; (8001878 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	9468      	str	r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	e9cd 3466 	strd	r3, r4, [sp, #408]	; 0x198
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001704:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f001 fad8 	bl	8002cbc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170c:	485c      	ldr	r0, [pc, #368]	; (8001880 <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	9468      	str	r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001710:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	e9cd a466 	strd	sl, r4, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f001 fad1 	bl	8002cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 800171a:	f44f 7304 	mov.w	r3, #528	; 0x210
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	4857      	ldr	r0, [pc, #348]	; (800187c <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	9468      	str	r4, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	a966      	add	r1, sp, #408	; 0x198
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	e9cd 3466 	strd	r3, r4, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f001 fac8 	bl	8002cbc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800172c:	9400      	str	r4, [sp, #0]
 800172e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001734:	632b      	str	r3, [r5, #48]	; 0x30
 8001736:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001738:	4d52      	ldr	r5, [pc, #328]	; (8001884 <main+0x2f8>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173e:	4622      	mov	r2, r4
 8001740:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001742:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001744:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001746:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001748:	f001 f8c8 	bl	80028dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800174c:	2038      	movs	r0, #56	; 0x38
 800174e:	f001 f8f7 	bl	8002940 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001752:	2210      	movs	r2, #16
 8001754:	4621      	mov	r1, r4
 8001756:	a866      	add	r0, sp, #408	; 0x198
 8001758:	f007 f86d 	bl	8008836 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <main+0x2fc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001760:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8001764:	e9c5 3900 	strd	r3, r9, [r5]
  hadc1.Init.NbrOfConversion = 3;
 8001768:	f04f 0b03 	mov.w	fp, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	4b47      	ldr	r3, [pc, #284]	; (800188c <main+0x300>)
  hadc1.Init.ScanConvMode = ENABLE;
 800176e:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	4628      	mov	r0, r5
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001772:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001774:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177a:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 3;
 800177e:	f8c5 b01c 	str.w	fp, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001782:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001786:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001788:	f000 fb72 	bl	8001e70 <HAL_ADC_Init>
 800178c:	b108      	cbz	r0, 8001792 <main+0x206>
 800178e:	b672      	cpsid	i
  while (1)
 8001790:	e7fe      	b.n	8001790 <main+0x204>
  sConfig.Rank = 1;
 8001792:	e9cd 0666 	strd	r0, r6, [sp, #408]	; 0x198
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001796:	9068      	str	r0, [sp, #416]	; 0x1a0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001798:	a966      	add	r1, sp, #408	; 0x198
 800179a:	4628      	mov	r0, r5
 800179c:	f000 fd5a 	bl	8002254 <HAL_ADC_ConfigChannel>
 80017a0:	b108      	cbz	r0, 80017a6 <main+0x21a>
 80017a2:	b672      	cpsid	i
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <main+0x218>
  sConfig.Rank = 2;
 80017a6:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017aa:	a966      	add	r1, sp, #408	; 0x198
 80017ac:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80017ae:	9666      	str	r6, [sp, #408]	; 0x198
  sConfig.Rank = 2;
 80017b0:	f8cd 819c 	str.w	r8, [sp, #412]	; 0x19c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b4:	f000 fd4e 	bl	8002254 <HAL_ADC_ConfigChannel>
 80017b8:	b108      	cbz	r0, 80017be <main+0x232>
 80017ba:	b672      	cpsid	i
  while (1)
 80017bc:	e7fe      	b.n	80017bc <main+0x230>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017be:	a966      	add	r1, sp, #408	; 0x198
 80017c0:	4628      	mov	r0, r5
  sConfig.Rank = 3;
 80017c2:	e9cd ab66 	strd	sl, fp, [sp, #408]	; 0x198
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c6:	f000 fd45 	bl	8002254 <HAL_ADC_ConfigChannel>
 80017ca:	b108      	cbz	r0, 80017d0 <main+0x244>
 80017cc:	b672      	cpsid	i
  while (1)
 80017ce:	e7fe      	b.n	80017ce <main+0x242>
  hcan1.Instance = CAN1;
 80017d0:	4c2f      	ldr	r4, [pc, #188]	; (8001890 <main+0x304>)
  hcan1.Init.Prescaler = 18;
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <main+0x308>)
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017d4:	83a0      	strh	r0, [r4, #28]
  hcan1.Init.Prescaler = 18;
 80017d6:	2512      	movs	r5, #18
 80017d8:	e9c4 3500 	strd	r3, r5, [r4]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017e0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017e4:	e9c4 3005 	strd	r3, r0, [r4, #20]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017e8:	4620      	mov	r0, r4
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017ea:	f8c4 9010 	str.w	r9, [r4, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017ee:	f000 fdcb 	bl	8002388 <HAL_CAN_Init>
 80017f2:	b108      	cbz	r0, 80017f8 <main+0x26c>
 80017f4:	b672      	cpsid	i
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <main+0x26a>
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 80017f8:	f242 0360 	movw	r3, #8288	; 0x2060
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017fc:	e9cd 056a 	strd	r0, r5, [sp, #424]	; 0x1a8
  canfilterconfig.FilterIdLow = 0;
 8001800:	e9cd 3066 	strd	r3, r0, [sp, #408]	; 0x198
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001804:	e9cd 3068 	strd	r3, r0, [sp, #416]	; 0x1a0
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001808:	e9cd 066c 	strd	r0, r6, [sp, #432]	; 0x1b0
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800180c:	a966      	add	r1, sp, #408	; 0x198
 800180e:	4620      	mov	r0, r4
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001810:	966e      	str	r6, [sp, #440]	; 0x1b8
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001812:	976f      	str	r7, [sp, #444]	; 0x1bc
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001814:	f000 fe34 	bl	8002480 <HAL_CAN_ConfigFilter>
  hcrc.Instance = CRC;
 8001818:	481f      	ldr	r0, [pc, #124]	; (8001898 <main+0x30c>)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <main+0x310>)
 800181c:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800181e:	f001 f8b1 	bl	8002984 <HAL_CRC_Init>
 8001822:	4605      	mov	r5, r0
 8001824:	b108      	cbz	r0, 800182a <main+0x29e>
 8001826:	b672      	cpsid	i
  while (1)
 8001828:	e7fe      	b.n	8001828 <main+0x29c>
	err = ai_network_create_and_init(&network, act_addr, NULL);
 800182a:	4f1d      	ldr	r7, [pc, #116]	; (80018a0 <main+0x314>)
  MX_X_CUBE_AI_Init();
 800182c:	f002 f924 	bl	8003a78 <MX_X_CUBE_AI_Init>
	const ai_handle act_addr[] = { activations };
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <main+0x318>)
 8001832:	9366      	str	r3, [sp, #408]	; 0x198
	err = ai_network_create_and_init(&network, act_addr, NULL);
 8001834:	462a      	mov	r2, r5
 8001836:	a966      	add	r1, sp, #408	; 0x198
 8001838:	4638      	mov	r0, r7
 800183a:	f002 fd4f 	bl	80042dc <ai_network_create_and_init>
	if (err.type != AI_ERROR_NONE){
 800183e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8001842:	d001      	beq.n	8001848 <main+0x2bc>
 8001844:	b672      	cpsid	i
  while (1)
 8001846:	e7fe      	b.n	8001846 <main+0x2ba>
	ai_input = ai_network_inputs_get(network, NULL);
 8001848:	4629      	mov	r1, r5
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80018ac <main+0x320>
 8001850:	f002 fc12 	bl	8004078 <ai_network_inputs_get>
	ai_output = ai_network_outputs_get(network, NULL);
 8001854:	4629      	mov	r1, r5
	ai_input = ai_network_inputs_get(network, NULL);
 8001856:	f8c9 0000 	str.w	r0, [r9]
	ai_output = ai_network_outputs_get(network, NULL);
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	f002 fc16 	bl	800408c <ai_network_outputs_get>
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <main+0x31c>)
 8001862:	6018      	str	r0, [r3, #0]
	if (ai_input == NULL || ai_output == NULL) {
 8001864:	f8d9 3000 	ldr.w	r3, [r9]
 8001868:	b103      	cbz	r3, 800186c <main+0x2e0>
 800186a:	bb08      	cbnz	r0, 80018b0 <main+0x324>
 800186c:	b672      	cpsid	i
  while (1)
 800186e:	e7fe      	b.n	800186e <main+0x2e2>
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020c00 	.word	0x40020c00
 8001884:	20001540 	.word	0x20001540
 8001888:	40012000 	.word	0x40012000
 800188c:	0f000001 	.word	0x0f000001
 8001890:	20001588 	.word	0x20001588
 8001894:	40006400 	.word	0x40006400
 8001898:	200015b0 	.word	0x200015b0
 800189c:	40023000 	.word	0x40023000
 80018a0:	20001660 	.word	0x20001660
 80018a4:	20000e10 	.word	0x20000e10
 80018a8:	20001528 	.word	0x20001528
 80018ac:	20001524 	.word	0x20001524
  HAL_CAN_Start(&hcan1);
 80018b0:	4620      	mov	r0, r4
 80018b2:	f000 fe6b 	bl	800258c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80018b6:	4641      	mov	r1, r8
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 fee1 	bl	8002680 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; // data length
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <main+0x478>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80018c0:	4851      	ldr	r0, [pc, #324]	; (8001a08 <main+0x47c>)
  TxHeader.DLC = 2; // data length
 80018c2:	f8c3 8010 	str.w	r8, [r3, #16]
  TxHeader.StdId = 0x446; // ID
 80018c6:	f240 4246 	movw	r2, #1094	; 0x446
 80018ca:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80018cc:	2120      	movs	r1, #32
 80018ce:	4632      	mov	r2, r6
  TxHeader.RTR = CAN_RTR_DATA;
 80018d0:	e9c3 5502 	strd	r5, r5, [r3, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80018d4:	f001 facc 	bl	8002e70 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80018d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018dc:	f000 faa2 	bl	8001e24 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018e0:	4849      	ldr	r0, [pc, #292]	; (8001a08 <main+0x47c>)
 80018e2:	462a      	mov	r2, r5
 80018e4:	2120      	movs	r1, #32
 80018e6:	f001 fac3 	bl	8002e70 <HAL_GPIO_WritePin>
  success = startupSequence();
 80018ea:	f7ff fb65 	bl	8000fb8 <startupSequence>
  if (success == -1) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); }
 80018ee:	3001      	adds	r0, #1
 80018f0:	d104      	bne.n	80018fc <main+0x370>
 80018f2:	4845      	ldr	r0, [pc, #276]	; (8001a08 <main+0x47c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	2120      	movs	r1, #32
 80018f8:	f001 faba 	bl	8002e70 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 80018fc:	4c42      	ldr	r4, [pc, #264]	; (8001a08 <main+0x47c>)
		  sprintf(FaultStr, "%05X", Fault);
 80018fe:	4f43      	ldr	r7, [pc, #268]	; (8001a0c <main+0x480>)
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8001900:	4e43      	ldr	r6, [pc, #268]	; (8001a10 <main+0x484>)
	  checkStatusTransmit(&cell1);
 8001902:	a806      	add	r0, sp, #24
 8001904:	f7ff fc4a 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell2);
 8001908:	a80e      	add	r0, sp, #56	; 0x38
 800190a:	f7ff fc47 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell3);
 800190e:	a816      	add	r0, sp, #88	; 0x58
 8001910:	f7ff fc44 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell4);
 8001914:	a81e      	add	r0, sp, #120	; 0x78
 8001916:	f7ff fc41 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell5);
 800191a:	a826      	add	r0, sp, #152	; 0x98
 800191c:	f7ff fc3e 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell6);
 8001920:	a82e      	add	r0, sp, #184	; 0xb8
 8001922:	f7ff fc3b 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell7);
 8001926:	a836      	add	r0, sp, #216	; 0xd8
 8001928:	f7ff fc38 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell8);
 800192c:	a83e      	add	r0, sp, #248	; 0xf8
 800192e:	f7ff fc35 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell9);
 8001932:	a846      	add	r0, sp, #280	; 0x118
 8001934:	f7ff fc32 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell10);
 8001938:	a84e      	add	r0, sp, #312	; 0x138
 800193a:	f7ff fc2f 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell11);
 800193e:	a856      	add	r0, sp, #344	; 0x158
 8001940:	f7ff fc2c 	bl	800119c <checkStatusTransmit>
	  checkStatusTransmit(&cell12);
 8001944:	a85e      	add	r0, sp, #376	; 0x178
 8001946:	f7ff fc29 	bl	800119c <checkStatusTransmit>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 800194a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800194e:	4620      	mov	r0, r4
 8001950:	f001 fa88 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001954:	b330      	cbz	r0, 80019a4 <main+0x418>
 8001956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195a:	4620      	mov	r0, r4
 800195c:	f001 fa82 	bl	8002e64 <HAL_GPIO_ReadPin>
 8001960:	4605      	mov	r5, r0
 8001962:	b9f8      	cbnz	r0, 80019a4 <main+0x418>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2140      	movs	r1, #64	; 0x40
 8001968:	4620      	mov	r0, r4
 800196a:	f001 fa81 	bl	8002e70 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800196e:	2064      	movs	r0, #100	; 0x64
 8001970:	f000 fa58 	bl	8001e24 <HAL_Delay>
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 8001974:	2301      	movs	r3, #1
		  Fault = getCellFaults(&cell1);
 8001976:	a806      	add	r0, sp, #24
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 8001978:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		  Fault = getCellFaults(&cell1);
 800197c:	f7ff fafb 	bl	8000f76 <getCellFaults>
		  sprintf(FaultStr, "%05X", Fault);
 8001980:	4639      	mov	r1, r7
		  Fault = getCellFaults(&cell1);
 8001982:	4602      	mov	r2, r0
		  sprintf(FaultStr, "%05X", Fault);
 8001984:	a866      	add	r0, sp, #408	; 0x198
 8001986:	f006 fef3 	bl	8008770 <siprintf>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <main+0x478>)
 800198c:	4821      	ldr	r0, [pc, #132]	; (8001a14 <main+0x488>)
 800198e:	aa66      	add	r2, sp, #408	; 0x198
 8001990:	4633      	mov	r3, r6
 8001992:	f000 fe29 	bl	80025e8 <HAL_CAN_AddTxMessage>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001996:	462a      	mov	r2, r5
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	4620      	mov	r0, r4
            cell->over_current = false;
 800199c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80019a0:	f001 fa66 	bl	8002e70 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 80019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a8:	4620      	mov	r0, r4
 80019aa:	f001 fa5b 	bl	8002e64 <HAL_GPIO_ReadPin>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d0a7      	beq.n	8001902 <main+0x376>
 80019b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b6:	4620      	mov	r0, r4
 80019b8:	f001 fa54 	bl	8002e64 <HAL_GPIO_ReadPin>
 80019bc:	4605      	mov	r5, r0
 80019be:	2800      	cmp	r0, #0
 80019c0:	d19f      	bne.n	8001902 <main+0x376>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	4620      	mov	r0, r4
 80019c8:	f001 fa52 	bl	8002e70 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f000 fa29 	bl	8001e24 <HAL_Delay>
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 80019d2:	2301      	movs	r3, #1
		  Fault = getCellFaults(&cell1);
 80019d4:	a806      	add	r0, sp, #24
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 80019d6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		  Fault = getCellFaults(&cell1);
 80019da:	f7ff facc 	bl	8000f76 <getCellFaults>
		  sprintf(FaultStr, "%05X", Fault);
 80019de:	4639      	mov	r1, r7
		  Fault = getCellFaults(&cell1);
 80019e0:	4602      	mov	r2, r0
		  sprintf(FaultStr, "%05X", Fault);
 80019e2:	a866      	add	r0, sp, #408	; 0x198
 80019e4:	f006 fec4 	bl	8008770 <siprintf>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 80019e8:	aa66      	add	r2, sp, #408	; 0x198
 80019ea:	4906      	ldr	r1, [pc, #24]	; (8001a04 <main+0x478>)
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <main+0x488>)
 80019ee:	4633      	mov	r3, r6
 80019f0:	f000 fdfa 	bl	80025e8 <HAL_CAN_AddTxMessage>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80019f4:	462a      	mov	r2, r5
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	4620      	mov	r0, r4
            cell->over_temp = false;
 80019fa:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80019fe:	f001 fa37 	bl	8002e70 <HAL_GPIO_WritePin>
 8001a02:	e77e      	b.n	8001902 <main+0x376>
 8001a04:	20000df4 	.word	0x20000df4
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	0800b389 	.word	0x0800b389
 8001a10:	20000e0c 	.word	0x20000e0c
 8001a14:	20001588 	.word	0x20001588

08001a18 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 9600;
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <MX_USART2_UART_Init+0x30>)
{
 8001a1c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 9600;
 8001a1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a22:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a28:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a32:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a36:	f001 fded 	bl	8003614 <HAL_UART_Init>
 8001a3a:	b108      	cbz	r0, 8001a40 <MX_USART2_UART_Init+0x28>
 8001a3c:	b672      	cpsid	i
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <MX_USART2_UART_Init+0x26>
}
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	20001618 	.word	0x20001618
 8001a48:	40004400 	.word	0x40004400

08001a4c <Error_Handler>:
 8001a4c:	b672      	cpsid	i
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <Error_Handler+0x2>

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_MspInit+0x38>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	9100      	str	r1, [sp, #0]
 8001a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	9101      	str	r1, [sp, #4]
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a82:	f000 bf19 	b.w	80028b8 <HAL_NVIC_SetPriorityGrouping>
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	4606      	mov	r6, r0
 8001a90:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	2214      	movs	r2, #20
 8001a94:	2100      	movs	r1, #0
 8001a96:	a803      	add	r0, sp, #12
 8001a98:	f006 fecd 	bl	8008836 <memset>
  if(hadc->Instance==ADC1)
 8001a9c:	6832      	ldr	r2, [r6, #0]
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_ADC_MspInit+0x94>)
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d13a      	bne.n	8001b1a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aa4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	9501      	str	r5, [sp, #4]
 8001aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	481d      	ldr	r0, [pc, #116]	; (8001b24 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ab0:	4c1d      	ldr	r4, [pc, #116]	; (8001b28 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	9502      	str	r5, [sp, #8]
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2213      	movs	r2, #19
 8001ad8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001adc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f001 f8ec 	bl	8002cbc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001aea:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001af2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001af6:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b02:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0c:	f000 ff60 	bl	80029d0 <HAL_DMA_Init>
 8001b10:	b108      	cbz	r0, 8001b16 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001b12:	f7ff ff9b 	bl	8001a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b16:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b18:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1a:	b008      	add	sp, #32
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
 8001b1e:	bf00      	nop
 8001b20:	40012000 	.word	0x40012000
 8001b24:	40020000 	.word	0x40020000
 8001b28:	200015b8 	.word	0x200015b8
 8001b2c:	40026410 	.word	0x40026410

08001b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b30:	b510      	push	{r4, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	2214      	movs	r2, #20
 8001b38:	2100      	movs	r1, #0
 8001b3a:	a803      	add	r0, sp, #12
 8001b3c:	f006 fe7b 	bl	8008836 <memset>
  if(hcan->Instance==CAN1)
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_CAN_MspInit+0x74>)
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d12b      	bne.n	8001ba0 <HAL_CAN_MspInit+0x70>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b48:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	9401      	str	r4, [sp, #4]
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <HAL_CAN_MspInit+0x78>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b54:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001b60:	9201      	str	r2, [sp, #4]
 8001b62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	9402      	str	r4, [sp, #8]
 8001b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b82:	2103      	movs	r1, #3
 8001b84:	2309      	movs	r3, #9
 8001b86:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	a903      	add	r1, sp, #12
 8001b8c:	f001 f896 	bl	8002cbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b90:	2014      	movs	r0, #20
 8001b92:	4622      	mov	r2, r4
 8001b94:	4621      	mov	r1, r4
 8001b96:	f000 fea1 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b9a:	2014      	movs	r0, #20
 8001b9c:	f000 fed0 	bl	8002940 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ba0:	b008      	add	sp, #32
 8001ba2:	bd10      	pop	{r4, pc}
 8001ba4:	40006400 	.word	0x40006400
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_CRC_MspInit+0x28>)
 8001bb0:	429a      	cmp	r2, r3
{
 8001bb2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001bb4:	d10b      	bne.n	8001bce <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_CRC_MspInit+0x2c>)
 8001bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bce:	b002      	add	sp, #8
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023000 	.word	0x40023000
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	4604      	mov	r4, r0
 8001be0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	2214      	movs	r2, #20
 8001be4:	2100      	movs	r1, #0
 8001be6:	a803      	add	r0, sp, #12
 8001be8:	f006 fe25 	bl	8008836 <memset>
  if(huart->Instance==USART2)
 8001bec:	6822      	ldr	r2, [r4, #0]
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_UART_MspInit+0x78>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d12d      	bne.n	8001c50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	9101      	str	r1, [sp, #4]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	4816      	ldr	r0, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
 8001c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c08:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c0c:	9201      	str	r2, [sp, #4]
 8001c0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	9102      	str	r1, [sp, #8]
 8001c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2602      	movs	r6, #2
 8001c26:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c28:	2503      	movs	r5, #3
 8001c2a:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c32:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f001 f841 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001c3a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c44:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f001 f836 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c50:	b008      	add	sp, #32
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40020000 	.word	0x40020000

08001c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler>

08001c5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler>

08001c60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler>

08001c62 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler>

08001c64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler>

08001c66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 b8c8 	b.w	8001e00 <HAL_IncTick>

08001c70 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <CAN1_RX0_IRQHandler+0x8>)
 8001c72:	f000 bd23 	b.w	80026bc <HAL_CAN_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	20001588 	.word	0x20001588

08001c7c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <DMA2_Stream0_IRQHandler+0x8>)
 8001c7e:	f000 bf5f 	b.w	8002b40 <HAL_DMA_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	200015b8 	.word	0x200015b8

08001c88 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c88:	2001      	movs	r0, #1
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f006 fe35 	bl	80088fc <__errno>
 8001c92:	2316      	movs	r3, #22
 8001c94:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9a:	bd08      	pop	{r3, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c9e:	f006 fe2d 	bl	80088fc <__errno>
 8001ca2:	2316      	movs	r3, #22
 8001ca4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0xa>

08001ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	460d      	mov	r5, r1
 8001cac:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	460e      	mov	r6, r1
 8001cb0:	1b73      	subs	r3, r6, r5
 8001cb2:	429c      	cmp	r4, r3
 8001cb4:	dc01      	bgt.n	8001cba <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	e7f5      	b.n	8001cb0 <_read+0x8>

08001cc4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cce:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001cd8:	2000      	movs	r0, #0
 8001cda:	4770      	bx	lr

08001cdc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <_sbrk+0x30>)
 8001cde:	6811      	ldr	r1, [r2, #0]
{
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001ce4:	b909      	cbnz	r1, 8001cea <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001ce6:	490a      	ldr	r1, [pc, #40]	; (8001d10 <_sbrk+0x34>)
 8001ce8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	6810      	ldr	r0, [r2, #0]
 8001cec:	4909      	ldr	r1, [pc, #36]	; (8001d14 <_sbrk+0x38>)
 8001cee:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <_sbrk+0x3c>)
 8001cf0:	4403      	add	r3, r0
 8001cf2:	1b09      	subs	r1, r1, r4
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d906      	bls.n	8001d06 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001cf8:	f006 fe00 	bl	80088fc <__errno>
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d04:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d06:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d08:	e7fc      	b.n	8001d04 <_sbrk+0x28>
 8001d0a:	bf00      	nop
 8001d0c:	20001674 	.word	0x20001674
 8001d10:	20001878 	.word	0x20001878
 8001d14:	20020000 	.word	0x20020000
 8001d18:	00000800 	.word	0x00000800

08001d1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <SystemInit+0x10>)
 8001d1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d34:	f7ff fff2 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3a:	490d      	ldr	r1, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f006 fdd3 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7ff fc13 	bl	800158c <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000dd8 	.word	0x20000dd8
  ldr r2, =_sidata
 8001d74:	0803de9c 	.word	0x0803de9c
  ldr r2, =_sbss
 8001d78:	20000dd8 	.word	0x20000dd8
  ldr r4, =_ebss
 8001d7c:	20001878 	.word	0x20001878

08001d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC_IRQHandler>
	...

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_InitTick+0x3c>)
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_InitTick+0x40>)
{
 8001d94:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d96:	6810      	ldr	r0, [r2, #0]
 8001d98:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d9c:	f000 fdde 	bl	800295c <HAL_SYSTICK_Config>
 8001da0:	4604      	mov	r4, r0
 8001da2:	b958      	cbnz	r0, 8001dbc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	2d0f      	cmp	r5, #15
 8001da6:	d809      	bhi.n	8001dbc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	4602      	mov	r2, r0
 8001daa:	4629      	mov	r1, r5
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fd94 	bl	80028dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_InitTick+0x44>)
 8001db6:	4620      	mov	r0, r4
 8001db8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	e7fc      	b.n	8001dba <HAL_InitTick+0x36>
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_Init>:
{
 8001dcc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_Init+0x30>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 fd65 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffc8 	bl	8001d84 <HAL_InitTick>
  HAL_MspInit();
 8001df4:	f7ff fe2c 	bl	8001a50 <HAL_MspInit>
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_IncTick+0x10>)
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_IncTick+0x14>)
 8001e04:	6811      	ldr	r1, [r2, #0]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20001678 	.word	0x20001678
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e18:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <HAL_GetTick+0x8>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20001678 	.word	0x20001678

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fff6 	bl	8001e18 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	bf1c      	itt	ne
 8001e30:	4b05      	ldrne	r3, [pc, #20]	; (8001e48 <HAL_Delay+0x24>)
 8001e32:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001e36:	bf18      	it	ne
 8001e38:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	f7ff ffed 	bl	8001e18 <HAL_GetTick>
 8001e3e:	1b43      	subs	r3, r0, r5
 8001e40:	42a3      	cmp	r3, r4
 8001e42:	d3fa      	bcc.n	8001e3a <HAL_Delay+0x16>
  {
  }
}
 8001e44:	bd38      	pop	{r3, r4, r5, pc}
 8001e46:	bf00      	nop
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001e4c:	4800      	ldr	r0, [pc, #0]	; (8001e50 <HAL_GetHalVersion+0x4>)
 8001e4e:	4770      	bx	lr
 8001e50:	01080200 	.word	0x01080200

08001e54 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001e54:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <HAL_GetREVID+0x8>)
 8001e56:	6818      	ldr	r0, [r3, #0]
}
 8001e58:	0c00      	lsrs	r0, r0, #16
 8001e5a:	4770      	bx	lr
 8001e5c:	e0042000 	.word	0xe0042000

08001e60 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <HAL_GetDEVID+0xc>)
 8001e62:	6818      	ldr	r0, [r3, #0]
}
 8001e64:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e0042000 	.word	0xe0042000

08001e70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e70:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e72:	4604      	mov	r4, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	f000 809b 	beq.w	8001fb0 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e7a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001e7c:	b925      	cbnz	r5, 8001e88 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7e:	f7ff fe05 	bl	8001a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	6465      	str	r5, [r4, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e84:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e8a:	06db      	lsls	r3, r3, #27
 8001e8c:	f100 808e 	bmi.w	8001fac <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_ADC_Init+0x144>)
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ea8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	6861      	ldr	r1, [r4, #4]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eb2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ec4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ec6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eca:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ece:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee6:	4934      	ldr	r1, [pc, #208]	; (8001fb8 <HAL_ADC_Init+0x148>)
 8001ee8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eea:	428a      	cmp	r2, r1
 8001eec:	d052      	beq.n	8001f94 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001ef4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	f022 0202 	bic.w	r2, r2, #2
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	7e21      	ldrb	r1, [r4, #24]
 8001f18:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001f1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d03e      	beq.n	8001fa4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f26:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	3901      	subs	r1, #1
 8001f3c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f40:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f44:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	3901      	subs	r1, #1
 8001f50:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001f64:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001f68:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f6c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f74:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001f76:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f78:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001f7c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa2:	e7b2      	b.n	8001f0a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001faa:	e7c9      	b.n	8001f40 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7ed      	b.n	8001f8c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	e7ee      	b.n	8001f92 <HAL_ADC_Init+0x122>
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	0f000001 	.word	0x0f000001

08001fbc <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fbc:	6803      	ldr	r3, [r0, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	0552      	lsls	r2, r2, #21
{
 8001fc2:	b570      	push	{r4, r5, r6, lr}
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc8:	d50b      	bpl.n	8001fe2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fca:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fcc:	05de      	lsls	r6, r3, #23
 8001fce:	d508      	bpl.n	8001fe2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001fde:	2001      	movs	r0, #1
}
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8001fe2:	f7ff ff19 	bl	8001e18 <HAL_GetTick>
 8001fe6:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	0791      	lsls	r1, r2, #30
 8001fee:	d50c      	bpl.n	800200a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ff0:	f06f 0212 	mvn.w	r2, #18
 8001ff4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	6422      	str	r2, [r4, #64]	; 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002004:	d017      	beq.n	8002036 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	e7ea      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 800200a:	1c68      	adds	r0, r5, #1
 800200c:	d0ed      	beq.n	8001fea <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800200e:	b965      	cbnz	r5, 800202a <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f013 0302 	ands.w	r3, r3, #2
 8002018:	d1e6      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800201a:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 800201c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8002026:	2003      	movs	r0, #3
 8002028:	e7da      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800202a:	f7ff fef5 	bl	8001e18 <HAL_GetTick>
 800202e:	1b80      	subs	r0, r0, r6
 8002030:	42a8      	cmp	r0, r5
 8002032:	d8ed      	bhi.n	8002010 <HAL_ADC_PollForConversion+0x54>
 8002034:	e7d8      	b.n	8001fe8 <HAL_ADC_PollForConversion+0x2c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002036:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002038:	2800      	cmp	r0, #0
 800203a:	d1e4      	bne.n	8002006 <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800203e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002042:	d002      	beq.n	800204a <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002044:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002046:	055a      	lsls	r2, r3, #21
 8002048:	d4dd      	bmi.n	8002006 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800204c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002050:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002054:	04db      	lsls	r3, r3, #19
 8002056:	d4d6      	bmi.n	8002006 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6423      	str	r3, [r4, #64]	; 0x40
 8002060:	e7be      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x24>
	...

08002064 <HAL_ADC_Start_DMA>:
{
 8002064:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002066:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002068:	2200      	movs	r2, #0
 800206a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800206c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002070:	2a01      	cmp	r2, #1
{
 8002072:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002074:	f000 8092 	beq.w	800219c <HAL_ADC_Start_DMA+0x138>
 8002078:	2201      	movs	r2, #1
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207a:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 800207c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002080:	68b2      	ldr	r2, [r6, #8]
 8002082:	07d4      	lsls	r4, r2, #31
 8002084:	d554      	bpl.n	8002130 <HAL_ADC_Start_DMA+0xcc>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002086:	68b2      	ldr	r2, [r6, #8]
 8002088:	05d0      	lsls	r0, r2, #23
 800208a:	d464      	bmi.n	8002156 <HAL_ADC_Start_DMA+0xf2>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800208c:	68b4      	ldr	r4, [r6, #8]
 800208e:	f014 0401 	ands.w	r4, r4, #1
 8002092:	d079      	beq.n	8002188 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 8002094:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8002096:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800209a:	f020 0001 	bic.w	r0, r0, #1
 800209e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80020a2:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a4:	6872      	ldr	r2, [r6, #4]
 80020a6:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020a8:	bf41      	itttt	mi
 80020aa:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 80020ac:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80020b0:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80020b4:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020be:	bf1c      	itt	ne
 80020c0:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80020c2:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80020c8:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ca:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);
 80020cc:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d2:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_ADC_Start_DMA+0x140>)
 80020d4:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d6:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_ADC_Start_DMA+0x144>)
 80020d8:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020de:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e0:	6872      	ldr	r2, [r6, #4]
 80020e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020e6:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020e8:	68b2      	ldr	r2, [r6, #8]
 80020ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ee:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f0:	460a      	mov	r2, r1
 80020f2:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80020f6:	f000 fce9 	bl	8002acc <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020fa:	492c      	ldr	r1, [pc, #176]	; (80021ac <HAL_ADC_Start_DMA+0x148>)
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	684a      	ldr	r2, [r1, #4]
 8002100:	482b      	ldr	r0, [pc, #172]	; (80021b0 <HAL_ADC_Start_DMA+0x14c>)
 8002102:	f012 021f 	ands.w	r2, r2, #31
 8002106:	d132      	bne.n	800216e <HAL_ADC_Start_DMA+0x10a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002108:	4283      	cmp	r3, r0
 800210a:	d007      	beq.n	800211c <HAL_ADC_Start_DMA+0xb8>
 800210c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002110:	4283      	cmp	r3, r0
 8002112:	d125      	bne.n	8002160 <HAL_ADC_Start_DMA+0xfc>
 8002114:	6849      	ldr	r1, [r1, #4]
 8002116:	f011 0f1f 	tst.w	r1, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800211a:	d132      	bne.n	8002182 <HAL_ADC_Start_DMA+0x11e>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800211c:	6898      	ldr	r0, [r3, #8]
 800211e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002122:	d103      	bne.n	800212c <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800212a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800212c:	2200      	movs	r2, #0
 800212e:	e028      	b.n	8002182 <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8002130:	68b2      	ldr	r2, [r6, #8]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_ADC_Start_DMA+0x150>)
 800213a:	6810      	ldr	r0, [r2, #0]
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_ADC_Start_DMA+0x154>)
 800213e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002142:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002146:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8002148:	9a01      	ldr	r2, [sp, #4]
 800214a:	2a00      	cmp	r2, #0
 800214c:	d09b      	beq.n	8002086 <HAL_ADC_Start_DMA+0x22>
      counter--;
 800214e:	9a01      	ldr	r2, [sp, #4]
 8002150:	3a01      	subs	r2, #1
 8002152:	9201      	str	r2, [sp, #4]
 8002154:	e7f8      	b.n	8002148 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002156:	68b2      	ldr	r2, [r6, #8]
 8002158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215c:	60b2      	str	r2, [r6, #8]
 800215e:	e795      	b.n	800208c <HAL_ADC_Start_DMA+0x28>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002160:	4816      	ldr	r0, [pc, #88]	; (80021bc <HAL_ADC_Start_DMA+0x158>)
 8002162:	4283      	cmp	r3, r0
 8002164:	d10d      	bne.n	8002182 <HAL_ADC_Start_DMA+0x11e>
 8002166:	6849      	ldr	r1, [r1, #4]
 8002168:	f011 0f10 	tst.w	r1, #16
 800216c:	e7d5      	b.n	800211a <HAL_ADC_Start_DMA+0xb6>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800216e:	4283      	cmp	r3, r0
 8002170:	d1dc      	bne.n	800212c <HAL_ADC_Start_DMA+0xc8>
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8002178:	d10e      	bne.n	8002198 <HAL_ADC_Start_DMA+0x134>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002180:	6099      	str	r1, [r3, #8]
}
 8002182:	4610      	mov	r0, r2
 8002184:	b002      	add	sp, #8
 8002186:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8002198:	4622      	mov	r2, r4
 800219a:	e7f2      	b.n	8002182 <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 800219c:	2202      	movs	r2, #2
 800219e:	e7f0      	b.n	8002182 <HAL_ADC_Start_DMA+0x11e>
 80021a0:	080021e7 	.word	0x080021e7
 80021a4:	080021c5 	.word	0x080021c5
 80021a8:	080021d1 	.word	0x080021d1
 80021ac:	40012300 	.word	0x40012300
 80021b0:	40012000 	.word	0x40012000
 80021b4:	20000000 	.word	0x20000000
 80021b8:	000f4240 	.word	0x000f4240
 80021bc:	40012200 	.word	0x40012200

080021c0 <HAL_ADC_ConvCpltCallback>:
 80021c0:	4770      	bx	lr

080021c2 <HAL_ADC_ConvHalfCpltCallback>:
 80021c2:	4770      	bx	lr

080021c4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80021c8:	f7ff fffb 	bl	80021c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021cc:	bd08      	pop	{r3, pc}

080021ce <HAL_ADC_ErrorCallback>:
 80021ce:	4770      	bx	lr

080021d0 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80021d2:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021e0:	f7ff fff5 	bl	80021ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e4:	bd08      	pop	{r3, pc}

080021e6 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ea:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80021ee:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021f2:	d123      	bne.n	800223c <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6891      	ldr	r1, [r2, #8]
 80021fe:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002202:	d117      	bne.n	8002234 <ADC_DMAConvCplt+0x4e>
 8002204:	7e19      	ldrb	r1, [r3, #24]
 8002206:	b9a9      	cbnz	r1, 8002234 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002208:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800220e:	d002      	beq.n	8002216 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002210:	6891      	ldr	r1, [r2, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002212:	0548      	lsls	r0, r1, #21
 8002214:	d40e      	bmi.n	8002234 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002216:	6851      	ldr	r1, [r2, #4]
 8002218:	f021 0120 	bic.w	r1, r1, #32
 800221c:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	bf5e      	ittt	pl
 800222c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800222e:	f042 0201 	orrpl.w	r2, r2, #1
 8002232:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ffc3 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
}
 800223a:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800223c:	06d2      	lsls	r2, r2, #27
 800223e:	d503      	bpl.n	8002248 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffc4 	bl	80021ce <HAL_ADC_ErrorCallback>
 8002246:	e7f8      	b.n	800223a <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800224a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4718      	bx	r3
	...

08002254 <HAL_ADC_ConfigChannel>:
{
 8002254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800225a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d067      	beq.n	8002332 <HAL_ADC_ConfigChannel+0xde>
 8002262:	2301      	movs	r3, #1
 8002264:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002268:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800226a:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226c:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800226e:	2d09      	cmp	r5, #9
 8002270:	b2ac      	uxth	r4, r5
 8002272:	d934      	bls.n	80022de <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002274:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002278:	68df      	ldr	r7, [r3, #12]
 800227a:	3a1e      	subs	r2, #30
 800227c:	f04f 0c07 	mov.w	ip, #7
 8002280:	fa0c fc02 	lsl.w	ip, ip, r2
 8002284:	ea27 070c 	bic.w	r7, r7, ip
 8002288:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800228a:	68df      	ldr	r7, [r3, #12]
 800228c:	fa06 f202 	lsl.w	r2, r6, r2
 8002290:	433a      	orrs	r2, r7
 8002292:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002294:	6849      	ldr	r1, [r1, #4]
 8002296:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002298:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 800229c:	d82e      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a0:	3a05      	subs	r2, #5
 80022a2:	261f      	movs	r6, #31
 80022a4:	4096      	lsls	r6, r2
 80022a6:	ea21 0106 	bic.w	r1, r1, r6
 80022aa:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ae:	fa04 f202 	lsl.w	r2, r4, r2
 80022b2:	430a      	orrs	r2, r1
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <HAL_ADC_ConfigChannel+0x120>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10a      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x7e>
 80022bc:	2d12      	cmp	r5, #18
 80022be:	d13a      	bne.n	8002336 <HAL_ADC_ConfigChannel+0xe2>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_ADC_ConfigChannel+0x124>)
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80022c8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80022d0:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80022d2:	2300      	movs	r3, #0
 80022d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80022d8:	4618      	mov	r0, r3
}
 80022da:	b003      	add	sp, #12
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80022e4:	2707      	movs	r7, #7
 80022e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80022ea:	ea22 0207 	bic.w	r2, r2, r7
 80022ee:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	fa06 f60c 	lsl.w	r6, r6, ip
 80022f6:	4316      	orrs	r6, r2
 80022f8:	611e      	str	r6, [r3, #16]
 80022fa:	e7cb      	b.n	8002294 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80022fc:	290c      	cmp	r1, #12
 80022fe:	f04f 011f 	mov.w	r1, #31
 8002302:	d80b      	bhi.n	800231c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002304:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002306:	3a23      	subs	r2, #35	; 0x23
 8002308:	4091      	lsls	r1, r2
 800230a:	ea26 0101 	bic.w	r1, r6, r1
 800230e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002312:	fa04 f202 	lsl.w	r2, r4, r2
 8002316:	430a      	orrs	r2, r1
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
 800231a:	e7cc      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800231c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800231e:	3a41      	subs	r2, #65	; 0x41
 8002320:	4091      	lsls	r1, r2
 8002322:	ea26 0101 	bic.w	r1, r6, r1
 8002326:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232a:	4094      	lsls	r4, r2
 800232c:	430c      	orrs	r4, r1
 800232e:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002330:	e7c1      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8002332:	2002      	movs	r0, #2
 8002334:	e7d1      	b.n	80022da <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_ADC_ConfigChannel+0x128>)
 8002338:	429d      	cmp	r5, r3
 800233a:	d001      	beq.n	8002340 <HAL_ADC_ConfigChannel+0xec>
 800233c:	2d11      	cmp	r5, #17
 800233e:	d1c8      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_ADC_ConfigChannel+0x124>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002348:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002350:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_ADC_ConfigChannel+0x128>)
 8002354:	429d      	cmp	r5, r3
 8002356:	d1bc      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_ADC_ConfigChannel+0x12c>)
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_ADC_ConfigChannel+0x130>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002362:	220a      	movs	r2, #10
 8002364:	4353      	muls	r3, r2
        counter--;
 8002366:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0b1      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	3b01      	subs	r3, #1
 8002372:	e7f8      	b.n	8002366 <HAL_ADC_ConfigChannel+0x112>
 8002374:	40012000 	.word	0x40012000
 8002378:	40012300 	.word	0x40012300
 800237c:	10000012 	.word	0x10000012
 8002380:	20000000 	.word	0x20000000
 8002384:	000f4240 	.word	0x000f4240

08002388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002388:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800238a:	4604      	mov	r4, r0
 800238c:	2800      	cmp	r0, #0
 800238e:	d06e      	beq.n	800246e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002390:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002394:	b90b      	cbnz	r3, 800239a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002396:	f7ff fbcb 	bl	8001b30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a4:	f7ff fd38 	bl	8001e18 <HAL_GetTick>
 80023a8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	07d1      	lsls	r1, r2, #31
 80023b0:	d551      	bpl.n	8002456 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f022 0202 	bic.w	r2, r2, #2
 80023b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ba:	f7ff fd2d 	bl	8001e18 <HAL_GetTick>
 80023be:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	0792      	lsls	r2, r2, #30
 80023c6:	d454      	bmi.n	8002472 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023c8:	7e22      	ldrb	r2, [r4, #24]
 80023ca:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	bf0c      	ite	eq
 80023d0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023da:	7e62      	ldrb	r2, [r4, #25]
 80023dc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	bf0c      	ite	eq
 80023e2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023e6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023ec:	7ea2      	ldrb	r2, [r4, #26]
 80023ee:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	bf0c      	ite	eq
 80023f4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023f8:	f022 0220 	bicne.w	r2, r2, #32
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023fe:	7ee2      	ldrb	r2, [r4, #27]
 8002400:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	bf0c      	ite	eq
 8002406:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800240a:	f042 0210 	orrne.w	r2, r2, #16
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002410:	7f22      	ldrb	r2, [r4, #28]
 8002412:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	bf0c      	ite	eq
 8002418:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241c:	f022 0208 	bicne.w	r2, r2, #8
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002422:	7f62      	ldrb	r2, [r4, #29]
 8002424:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	bf0c      	ite	eq
 800242a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800242e:	f022 0204 	bicne.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002434:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002438:	430a      	orrs	r2, r1
 800243a:	6921      	ldr	r1, [r4, #16]
 800243c:	430a      	orrs	r2, r1
 800243e:	6961      	ldr	r1, [r4, #20]
 8002440:	430a      	orrs	r2, r1
 8002442:	6861      	ldr	r1, [r4, #4]
 8002444:	3901      	subs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800244c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002450:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002454:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002456:	f7ff fcdf 	bl	8001e18 <HAL_GetTick>
 800245a:	1b40      	subs	r0, r0, r5
 800245c:	280a      	cmp	r0, #10
 800245e:	d9a4      	bls.n	80023aa <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002466:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002468:	2305      	movs	r3, #5
 800246a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
 8002470:	e7f0      	b.n	8002454 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002472:	f7ff fcd1 	bl	8001e18 <HAL_GetTick>
 8002476:	1b40      	subs	r0, r0, r5
 8002478:	280a      	cmp	r0, #10
 800247a:	d9a1      	bls.n	80023c0 <HAL_CAN_Init+0x38>
 800247c:	e7f0      	b.n	8002460 <HAL_CAN_Init+0xd8>
	...

08002480 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002480:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002482:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002486:	3b01      	subs	r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d877      	bhi.n	800257c <HAL_CAN_ConfigFilter+0xfc>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_CAN_ConfigFilter+0x108>)
 800248e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800249a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800249e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80024a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024aa:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80024ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80024b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024b4:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024b6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024ba:	f002 041f 	and.w	r4, r2, #31
 80024be:	2001      	movs	r0, #1
 80024c0:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024c2:	ea25 0500 	bic.w	r5, r5, r0
 80024c6:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024ca:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024cc:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024ce:	2d00      	cmp	r5, #0
 80024d0:	d135      	bne.n	800253e <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024d2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80024d6:	4025      	ands	r5, r4
 80024d8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024dc:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024de:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80024e4:	00d3      	lsls	r3, r2, #3
 80024e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024ea:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ee:	880a      	ldrh	r2, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f0:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f4:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024fa:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024fe:	698a      	ldr	r2, [r1, #24]
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_CAN_ConfigFilter+0x108>)
 8002502:	bb8a      	cbnz	r2, 8002568 <HAL_CAN_ConfigFilter+0xe8>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002508:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800250a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800250e:	690a      	ldr	r2, [r1, #16]
 8002510:	bb72      	cbnz	r2, 8002570 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002512:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002516:	4014      	ands	r4, r2
 8002518:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800251c:	6a0b      	ldr	r3, [r1, #32]
 800251e:	2b01      	cmp	r3, #1
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_CAN_ConfigFilter+0x108>)
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002522:	bf02      	ittt	eq
 8002524:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8002528:	4302      	orreq	r2, r0
 800252a:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800252e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800253a:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800253c:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800253e:	2d01      	cmp	r5, #1
 8002540:	d1dd      	bne.n	80024fe <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002542:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8002546:	4305      	orrs	r5, r0
 8002548:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800254c:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800254e:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002550:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002554:	00d3      	lsls	r3, r2, #3
 8002556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800255a:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800255e:	898a      	ldrh	r2, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002560:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002564:	688d      	ldr	r5, [r1, #8]
 8002566:	e7c6      	b.n	80024f6 <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800256c:	4302      	orrs	r2, r0
 800256e:	e7cc      	b.n	800250a <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002570:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002574:	4302      	orrs	r2, r0
 8002576:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800257a:	e7cf      	b.n	800251c <HAL_CAN_ConfigFilter+0x9c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800257c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800257e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002582:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
 8002586:	e7d9      	b.n	800253c <HAL_CAN_ConfigFilter+0xbc>
 8002588:	40006400 	.word	0x40006400

0800258c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800258c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800258e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002592:	2b01      	cmp	r3, #1
{
 8002594:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002596:	b2dd      	uxtb	r5, r3
 8002598:	d120      	bne.n	80025dc <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800259a:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800259c:	2302      	movs	r3, #2
 800259e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025aa:	f7ff fc35 	bl	8001e18 <HAL_GetTick>
 80025ae:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f013 0301 	ands.w	r3, r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ba:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025bc:	461d      	mov	r5, r3
 80025be:	e00b      	b.n	80025d8 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff fc2a 	bl	8001e18 <HAL_GetTick>
 80025c4:	1b80      	subs	r0, r0, r6
 80025c6:	280a      	cmp	r0, #10
 80025c8:	d9f2      	bls.n	80025b0 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	2305      	movs	r3, #5
 80025d4:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80025d8:	4628      	mov	r0, r5
 80025da:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025e2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80025e4:	2501      	movs	r5, #1
 80025e6:	e7f7      	b.n	80025d8 <HAL_CAN_Start+0x4c>

080025e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ea:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025ee:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025f0:	3d01      	subs	r5, #1
 80025f2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025f4:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80025f6:	d83f      	bhi.n	8002678 <HAL_CAN_AddTxMessage+0x90>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025f8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80025fc:	f04f 0501 	mov.w	r5, #1
 8002600:	d034      	beq.n	800266c <HAL_CAN_AddTxMessage+0x84>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002602:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002606:	40a5      	lsls	r5, r4
 8002608:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800260a:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800260e:	f104 0318 	add.w	r3, r4, #24
 8002612:	bb20      	cbnz	r0, 800265e <HAL_CAN_AddTxMessage+0x76>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	ea47 5740 	orr.w	r7, r7, r0, lsl #21
 800261c:	50f7      	str	r7, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800261e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8002622:	690d      	ldr	r5, [r1, #16]
 8002624:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002628:	7d09      	ldrb	r1, [r1, #20]
 800262a:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800262c:	bf08      	it	eq
 800262e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8002632:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8002636:	bf04      	itt	eq
 8002638:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800263c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002640:	4406      	add	r6, r0
 8002642:	6851      	ldr	r1, [r2, #4]
 8002644:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800264e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 800265a:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800265e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8002660:	4338      	orrs	r0, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002662:	011b      	lsls	r3, r3, #4
                                                           pHeader->IDE |
 8002664:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002668:	50f0      	str	r0, [r6, r3]
 800266a:	e7d8      	b.n	800261e <HAL_CAN_AddTxMessage+0x36>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800266c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800266e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002672:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002674:	2001      	movs	r0, #1
 8002676:	e7f1      	b.n	800265c <HAL_CAN_AddTxMessage+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002678:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800267a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267e:	e7f8      	b.n	8002672 <HAL_CAN_AddTxMessage+0x8a>

08002680 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002680:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002684:	3b01      	subs	r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d805      	bhi.n	8002696 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800268a:	6802      	ldr	r2, [r0, #0]
 800268c:	6953      	ldr	r3, [r2, #20]
 800268e:	4319      	orrs	r1, r3
 8002690:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002696:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800269e:	2001      	movs	r0, #1
  }
}
 80026a0:	4770      	bx	lr

080026a2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80026a2:	4770      	bx	lr

080026a4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_TxMailbox0AbortCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_CAN_TxMailbox1AbortCallback>:
 80026aa:	4770      	bx	lr

080026ac <HAL_CAN_TxMailbox2AbortCallback>:
 80026ac:	4770      	bx	lr

080026ae <HAL_CAN_RxFifo0MsgPendingCallback>:
 80026ae:	4770      	bx	lr

080026b0 <HAL_CAN_RxFifo0FullCallback>:
 80026b0:	4770      	bx	lr

080026b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80026b2:	4770      	bx	lr

080026b4 <HAL_CAN_RxFifo1FullCallback>:
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_SleepCallback>:
 80026b6:	4770      	bx	lr

080026b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80026b8:	4770      	bx	lr

080026ba <HAL_CAN_ErrorCallback>:
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026c8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026ca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026ce:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026d2:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026d6:	f016 0401 	ands.w	r4, r6, #1
{
 80026da:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026dc:	d022      	beq.n	8002724 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026de:	f017 0401 	ands.w	r4, r7, #1
 80026e2:	d007      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026e4:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026e6:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026e8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026ea:	f140 80a5 	bpl.w	8002838 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026ee:	f7ff ffd8 	bl	80026a2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026f2:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026f4:	05fb      	lsls	r3, r7, #23
 80026f6:	d509      	bpl.n	800270c <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026fe:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002700:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002702:	f140 80a7 	bpl.w	8002854 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff ffcc 	bl	80026a4 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800270c:	03fb      	lsls	r3, r7, #15
 800270e:	d509      	bpl.n	8002724 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002716:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002718:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800271a:	f140 80a9 	bpl.w	8002870 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800271e:	4628      	mov	r0, r5
 8002720:	f7ff ffc1 	bl	80026a6 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002724:	0733      	lsls	r3, r6, #28
 8002726:	d507      	bpl.n	8002738 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002728:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800272c:	bf1f      	itttt	ne
 800272e:	682b      	ldrne	r3, [r5, #0]
 8002730:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002732:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002736:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002738:	0777      	lsls	r7, r6, #29
 800273a:	d508      	bpl.n	800274e <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800273c:	f01b 0f08 	tst.w	fp, #8
 8002740:	d005      	beq.n	800274e <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002742:	682b      	ldr	r3, [r5, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002748:	4628      	mov	r0, r5
 800274a:	f7ff ffb1 	bl	80026b0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800274e:	07b0      	lsls	r0, r6, #30
 8002750:	d506      	bpl.n	8002760 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002752:	682b      	ldr	r3, [r5, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0799      	lsls	r1, r3, #30
 8002758:	d002      	beq.n	8002760 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff ffa7 	bl	80026ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002760:	0672      	lsls	r2, r6, #25
 8002762:	d507      	bpl.n	8002774 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002764:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002768:	bf1f      	itttt	ne
 800276a:	682b      	ldrne	r3, [r5, #0]
 800276c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800276e:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002772:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002774:	06b3      	lsls	r3, r6, #26
 8002776:	d508      	bpl.n	800278a <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002778:	f01a 0f08 	tst.w	sl, #8
 800277c:	d005      	beq.n	800278a <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002784:	4628      	mov	r0, r5
 8002786:	f7ff ff95 	bl	80026b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800278a:	06f7      	lsls	r7, r6, #27
 800278c:	d506      	bpl.n	800279c <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	0798      	lsls	r0, r3, #30
 8002794:	d002      	beq.n	800279c <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002796:	4628      	mov	r0, r5
 8002798:	f7ff ff8b 	bl	80026b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800279c:	03b1      	lsls	r1, r6, #14
 800279e:	d508      	bpl.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027a0:	f019 0f10 	tst.w	r9, #16
 80027a4:	d005      	beq.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ac:	4628      	mov	r0, r5
 80027ae:	f7ff ff82 	bl	80026b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027b2:	03f2      	lsls	r2, r6, #15
 80027b4:	d508      	bpl.n	80027c8 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027b6:	f019 0f08 	tst.w	r9, #8
 80027ba:	d005      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027c2:	4628      	mov	r0, r5
 80027c4:	f7ff ff78 	bl	80026b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027c8:	0433      	lsls	r3, r6, #16
 80027ca:	d52c      	bpl.n	8002826 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027cc:	f019 0f04 	tst.w	r9, #4
 80027d0:	682a      	ldr	r2, [r5, #0]
 80027d2:	d026      	beq.n	8002822 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027d4:	05f7      	lsls	r7, r6, #23
 80027d6:	d504      	bpl.n	80027e2 <HAL_CAN_IRQHandler+0x126>
 80027d8:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027dc:	bf18      	it	ne
 80027de:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e2:	05b0      	lsls	r0, r6, #22
 80027e4:	d504      	bpl.n	80027f0 <HAL_CAN_IRQHandler+0x134>
 80027e6:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ea:	bf18      	it	ne
 80027ec:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027f0:	0571      	lsls	r1, r6, #21
 80027f2:	d504      	bpl.n	80027fe <HAL_CAN_IRQHandler+0x142>
 80027f4:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027f8:	bf18      	it	ne
 80027fa:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027fe:	0533      	lsls	r3, r6, #20
 8002800:	d50f      	bpl.n	8002822 <HAL_CAN_IRQHandler+0x166>
 8002802:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002806:	d00c      	beq.n	8002822 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d04f      	beq.n	80028ac <HAL_CAN_IRQHandler+0x1f0>
 800280c:	d83e      	bhi.n	800288c <HAL_CAN_IRQHandler+0x1d0>
 800280e:	2b20      	cmp	r3, #32
 8002810:	d046      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x1e4>
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d047      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x1ea>
 8002816:	2b10      	cmp	r3, #16
 8002818:	d03f      	beq.n	800289a <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800281a:	6993      	ldr	r3, [r2, #24]
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002822:	2304      	movs	r3, #4
 8002824:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002826:	b12c      	cbz	r4, 8002834 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800282a:	4323      	orrs	r3, r4
 800282c:	626b      	str	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800282e:	4628      	mov	r0, r5
 8002830:	f7ff ff43 	bl	80026ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002838:	077a      	lsls	r2, r7, #29
 800283a:	d405      	bmi.n	8002848 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800283c:	f017 0408 	ands.w	r4, r7, #8
 8002840:	d105      	bne.n	800284e <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002842:	f7ff ff31 	bl	80026a8 <HAL_CAN_TxMailbox0AbortCallback>
 8002846:	e755      	b.n	80026f4 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002848:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800284c:	e752      	b.n	80026f4 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800284e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002852:	e74f      	b.n	80026f4 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002854:	0579      	lsls	r1, r7, #21
 8002856:	d502      	bpl.n	800285e <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002858:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800285c:	e756      	b.n	800270c <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800285e:	053a      	lsls	r2, r7, #20
 8002860:	d502      	bpl.n	8002868 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002862:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002866:	e751      	b.n	800270c <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002868:	4628      	mov	r0, r5
 800286a:	f7ff ff1e 	bl	80026aa <HAL_CAN_TxMailbox1AbortCallback>
 800286e:	e74d      	b.n	800270c <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002870:	0379      	lsls	r1, r7, #13
 8002872:	d502      	bpl.n	800287a <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002874:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002878:	e754      	b.n	8002724 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800287a:	033a      	lsls	r2, r7, #12
 800287c:	d502      	bpl.n	8002884 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800287e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002882:	e74f      	b.n	8002724 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002884:	4628      	mov	r0, r5
 8002886:	f7ff ff11 	bl	80026ac <HAL_CAN_TxMailbox2AbortCallback>
 800288a:	e74b      	b.n	8002724 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800288c:	2b50      	cmp	r3, #80	; 0x50
 800288e:	d010      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x1f6>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d1c2      	bne.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002894:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8002898:	e7bf      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 800289a:	f044 0408 	orr.w	r4, r4, #8
            break;
 800289e:	e7bc      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028a0:	f044 0410 	orr.w	r4, r4, #16
            break;
 80028a4:	e7b9      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028a6:	f044 0420 	orr.w	r4, r4, #32
            break;
 80028aa:	e7b6      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80028ac:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80028b0:	e7b3      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 80028b2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80028b6:	e7b0      	b.n	800281a <HAL_CAN_IRQHandler+0x15e>

080028b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4907      	ldr	r1, [pc, #28]	; (80028d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ba:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80028d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b530      	push	{r4, r5, lr}
 80028e0:	68dc      	ldr	r4, [r3, #12]
 80028e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	bf28      	it	cs
 80028f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f8:	bf8c      	ite	hi
 80028fa:	3c03      	subhi	r4, #3
 80028fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fe:	fa05 f303 	lsl.w	r3, r5, r3
 8002902:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002906:	40a5      	lsls	r5, r4
 8002908:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800290e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	bfac      	ite	ge
 8002916:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	4a08      	ldrlt	r2, [pc, #32]	; (800293c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	bfb8      	it	lt
 8002922:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	b2db      	uxtb	r3, r3
 8002928:	bfaa      	itet	ge
 800292a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002934:	bd30      	pop	{r4, r5, pc}
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	e000ed14 	.word	0xe000ed14

08002940 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002940:	2800      	cmp	r0, #0
 8002942:	db07      	blt.n	8002954 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_NVIC_EnableIRQ+0x18>)
 8002946:	0941      	lsrs	r1, r0, #5
 8002948:	2301      	movs	r3, #1
 800294a:	f000 001f 	and.w	r0, r0, #31
 800294e:	4083      	lsls	r3, r0
 8002950:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	3801      	subs	r0, #1
 800295e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002962:	d20b      	bcs.n	800297c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002964:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	21f0      	movs	r1, #240	; 0xf0
 800296e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002972:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002974:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002976:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002978:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800297c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002984:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002986:	4604      	mov	r4, r0
 8002988:	b150      	cbz	r0, 80029a0 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800298a:	7943      	ldrb	r3, [r0, #5]
 800298c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002990:	b913      	cbnz	r3, 8002998 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002992:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002994:	f7ff f90a 	bl	8001bac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002998:	2301      	movs	r3, #1
 800299a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800299c:	2000      	movs	r0, #0
}
 800299e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
 80029a2:	e7fc      	b.n	800299e <HAL_CRC_Init+0x1a>

080029a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a4:	6803      	ldr	r3, [r0, #0]
{
 80029a6:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ac:	4c07      	ldr	r4, [pc, #28]	; (80029cc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80029b6:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b8:	bf88      	it	hi
 80029ba:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029bc:	2118      	movs	r1, #24
 80029be:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c2:	5c61      	ldrb	r1, [r4, r1]
 80029c4:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c6:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	0800b3a6 	.word	0x0800b3a6

080029d0 <HAL_DMA_Init>:
{
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fa20 	bl	8001e18 <HAL_GetTick>
 80029d8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80029da:	2c00      	cmp	r4, #0
 80029dc:	d071      	beq.n	8002ac2 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80029e4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80029e6:	2300      	movs	r3, #0
 80029e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80029ec:	6813      	ldr	r3, [r2, #0]
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	07d8      	lsls	r0, r3, #31
 80029fa:	d42e      	bmi.n	8002a5a <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 80029fc:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029fe:	4832      	ldr	r0, [pc, #200]	; (8002ac8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a02:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002a08:	432b      	orrs	r3, r5
 8002a0a:	68e5      	ldr	r5, [r4, #12]
 8002a0c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0e:	6925      	ldr	r5, [r4, #16]
 8002a10:	432b      	orrs	r3, r5
 8002a12:	6965      	ldr	r5, [r4, #20]
 8002a14:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	69e5      	ldr	r5, [r4, #28]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1c:	6a25      	ldr	r5, [r4, #32]
 8002a1e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a20:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a24:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a26:	bf02      	ittt	eq
 8002a28:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002a2c:	4335      	orreq	r5, r6
 8002a2e:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002a30:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8002a32:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a34:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a36:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002a3a:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3e:	d132      	bne.n	8002aa6 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 8002a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a42:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002a44:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a46:	b375      	cbz	r5, 8002aa6 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a48:	b991      	cbnz	r1, 8002a70 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8002a4a:	2801      	cmp	r0, #1
 8002a4c:	d020      	beq.n	8002a90 <HAL_DMA_Init+0xc0>
 8002a4e:	f030 0102 	bics.w	r1, r0, #2
 8002a52:	d128      	bne.n	8002aa6 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	01e9      	lsls	r1, r5, #7
 8002a56:	d526      	bpl.n	8002aa6 <HAL_DMA_Init+0xd6>
 8002a58:	e01d      	b.n	8002a96 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5a:	f7ff f9dd 	bl	8001e18 <HAL_GetTick>
 8002a5e:	1b40      	subs	r0, r0, r5
 8002a60:	2805      	cmp	r0, #5
 8002a62:	d9c7      	bls.n	80029f4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a64:	2320      	movs	r3, #32
 8002a66:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a68:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a70:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002a74:	d113      	bne.n	8002a9e <HAL_DMA_Init+0xce>
    switch (tmp)
 8002a76:	2803      	cmp	r0, #3
 8002a78:	d815      	bhi.n	8002aa6 <HAL_DMA_Init+0xd6>
 8002a7a:	a101      	add	r1, pc, #4	; (adr r1, 8002a80 <HAL_DMA_Init+0xb0>)
 8002a7c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8002a80:	08002a97 	.word	0x08002a97
 8002a84:	08002a55 	.word	0x08002a55
 8002a88:	08002a97 	.word	0x08002a97
 8002a8c:	08002a91 	.word	0x08002a91
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a90:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002a94:	d107      	bne.n	8002aa6 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	e7e5      	b.n	8002a6a <HAL_DMA_Init+0x9a>
    switch (tmp)
 8002a9e:	2802      	cmp	r0, #2
 8002aa0:	d9f9      	bls.n	8002a96 <HAL_DMA_Init+0xc6>
 8002aa2:	2803      	cmp	r0, #3
 8002aa4:	d0d6      	beq.n	8002a54 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8002aa6:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff7b 	bl	80029a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ab0:	233f      	movs	r3, #63	; 0x3f
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002abc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002ac0:	e7d5      	b.n	8002a6e <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	e7d3      	b.n	8002a6e <HAL_DMA_Init+0x9e>
 8002ac6:	bf00      	nop
 8002ac8:	f010803f 	.word	0xf010803f

08002acc <HAL_DMA_Start_IT>:
{
 8002acc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002ace:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002ad4:	2c01      	cmp	r4, #1
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_Start_IT+0x70>
 8002ad8:	2401      	movs	r4, #1
 8002ada:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ade:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002ae2:	2c01      	cmp	r4, #1
 8002ae4:	f04f 0500 	mov.w	r5, #0
 8002ae8:	f04f 0402 	mov.w	r4, #2
 8002aec:	d124      	bne.n	8002b38 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af6:	6825      	ldr	r5, [r4, #0]
 8002af8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002afc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002afe:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b00:	6883      	ldr	r3, [r0, #8]
 8002b02:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002b04:	bf0e      	itee	eq
 8002b06:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002b08:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b0a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002b0e:	bf08      	it	eq
 8002b10:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b12:	233f      	movs	r3, #63	; 0x3f
 8002b14:	4093      	lsls	r3, r2
 8002b16:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	f043 0316 	orr.w	r3, r3, #22
 8002b1e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b22:	b11b      	cbz	r3, 8002b2c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2000      	movs	r0, #0
}
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002b38:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	e7fa      	b.n	8002b36 <HAL_DMA_Start_IT+0x6a>

08002b40 <HAL_DMA_IRQHandler>:
{
 8002b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b48:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b4a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002b4e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	2208      	movs	r2, #8
 8002b52:	409a      	lsls	r2, r3
 8002b54:	4232      	tst	r2, r6
{
 8002b56:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	d00c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5a:	6801      	ldr	r1, [r0, #0]
 8002b5c:	6808      	ldr	r0, [r1, #0]
 8002b5e:	0740      	lsls	r0, r0, #29
 8002b60:	d508      	bpl.n	8002b74 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b62:	6808      	ldr	r0, [r1, #0]
 8002b64:	f020 0004 	bic.w	r0, r0, #4
 8002b68:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b6a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	4232      	tst	r2, r6
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b7c:	6821      	ldr	r1, [r4, #0]
 8002b7e:	6949      	ldr	r1, [r1, #20]
 8002b80:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b82:	bf41      	itttt	mi
 8002b84:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002b88:	f042 0202 	orrmi.w	r2, r2, #2
 8002b8c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8e:	2204      	movs	r2, #4
 8002b90:	409a      	lsls	r2, r3
 8002b92:	4232      	tst	r2, r6
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b96:	6821      	ldr	r1, [r4, #0]
 8002b98:	6809      	ldr	r1, [r1, #0]
 8002b9a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b9c:	bf41      	itttt	mi
 8002b9e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002ba2:	f042 0204 	orrmi.w	r2, r2, #4
 8002ba6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	4232      	tst	r2, r6
 8002bae:	d010      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	0709      	lsls	r1, r1, #28
 8002bb6:	d50c      	bpl.n	8002bd2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bb8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	0350      	lsls	r0, r2, #13
 8002bbe:	d537      	bpl.n	8002c30 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0319      	lsls	r1, r3, #12
 8002bc4:	d401      	bmi.n	8002bca <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bc8:	e000      	b.n	8002bcc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002bcc:	b10b      	cbz	r3, 8002bd2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	408a      	lsls	r2, r1
 8002bd8:	4232      	tst	r2, r6
 8002bda:	d03a      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	06c6      	lsls	r6, r0, #27
 8002be2:	d536      	bpl.n	8002c52 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002be6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002bea:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bec:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bee:	d127      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bf0:	f022 0216 	bic.w	r2, r2, #22
 8002bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c00:	b90a      	cbnz	r2, 8002c06 <HAL_DMA_IRQHandler+0xc6>
 8002c02:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002c04:	b11a      	cbz	r2, 8002c0e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	f022 0208 	bic.w	r2, r2, #8
 8002c0c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0e:	233f      	movs	r3, #63	; 0x3f
 8002c10:	408b      	lsls	r3, r1
 8002c12:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002c20:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002c26:	4620      	mov	r0, r4
}
 8002c28:	b003      	add	sp, #12
 8002c2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002c2e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c34:	bf5e      	ittt	pl
 8002c36:	681a      	ldrpl	r2, [r3, #0]
 8002c38:	f022 0208 	bicpl.w	r2, r2, #8
 8002c3c:	601a      	strpl	r2, [r3, #0]
 8002c3e:	e7c2      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c40:	0350      	lsls	r0, r2, #13
 8002c42:	d527      	bpl.n	8002c94 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0319      	lsls	r1, r3, #12
 8002c48:	d431      	bmi.n	8002cae <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002c4c:	b10b      	cbz	r3, 8002c52 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c54:	b36b      	cbz	r3, 8002cb2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c58:	07da      	lsls	r2, r3, #31
 8002c5a:	d519      	bpl.n	8002c90 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002c5c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c5e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c62:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c66:	2305      	movs	r3, #5
 8002c68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002c74:	9b01      	ldr	r3, [sp, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	42bb      	cmp	r3, r7
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	d802      	bhi.n	8002c84 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	07db      	lsls	r3, r3, #31
 8002c82:	d4f7      	bmi.n	8002c74 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002c90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c92:	e7c6      	b.n	8002c22 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002c9a:	d108      	bne.n	8002cae <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	f021 0110 	bic.w	r1, r1, #16
 8002ca2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002caa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002cae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cb0:	e7cc      	b.n	8002c4c <HAL_DMA_IRQHandler+0x10c>
}
 8002cb2:	b003      	add	sp, #12
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8002e60 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc4:	4a64      	ldr	r2, [pc, #400]	; (8002e58 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002cca:	2401      	movs	r4, #1
 8002ccc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002cd2:	43ac      	bics	r4, r5
 8002cd4:	f040 80ad 	bne.w	8002e32 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd8:	684d      	ldr	r5, [r1, #4]
 8002cda:	f005 0403 	and.w	r4, r5, #3
 8002cde:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cea:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cec:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf0:	d834      	bhi.n	8002d5c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002cf2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf8:	68cf      	ldr	r7, [r1, #12]
 8002cfa:	fa07 f708 	lsl.w	r7, r7, r8
 8002cfe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002d02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d06:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002d0e:	409f      	lsls	r7, r3
 8002d10:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002d14:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002d16:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d18:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1c:	688f      	ldr	r7, [r1, #8]
 8002d1e:	fa07 f708 	lsl.w	r7, r7, r8
 8002d22:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002d28:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2a:	d119      	bne.n	8002d60 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002d2c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002d30:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d34:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002d40:	f04f 0e0f 	mov.w	lr, #15
 8002d44:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002d48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d4c:	690f      	ldr	r7, [r1, #16]
 8002d4e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002d52:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	f8ca 7020 	str.w	r7, [sl, #32]
 8002d5a:	e001      	b.n	8002d60 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5c:	2c03      	cmp	r4, #3
 8002d5e:	d1da      	bne.n	8002d16 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002d60:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d62:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d66:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d68:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d6a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002d6e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d70:	d05f      	beq.n	8002e32 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	f04f 0a00 	mov.w	sl, #0
 8002d76:	f8cd a004 	str.w	sl, [sp, #4]
 8002d7a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7e:	4c37      	ldr	r4, [pc, #220]	; (8002e5c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d80:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002d84:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002d88:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002d8c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002d90:	9601      	str	r6, [sp, #4]
 8002d92:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d94:	f023 0603 	bic.w	r6, r3, #3
 8002d98:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002d9c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002da4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002dac:	270f      	movs	r7, #15
 8002dae:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db8:	d042      	beq.n	8002e40 <HAL_GPIO_Init+0x184>
 8002dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dbe:	42a0      	cmp	r0, r4
 8002dc0:	d040      	beq.n	8002e44 <HAL_GPIO_Init+0x188>
 8002dc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dc6:	42a0      	cmp	r0, r4
 8002dc8:	d03e      	beq.n	8002e48 <HAL_GPIO_Init+0x18c>
 8002dca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dce:	42a0      	cmp	r0, r4
 8002dd0:	d03c      	beq.n	8002e4c <HAL_GPIO_Init+0x190>
 8002dd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dd6:	42a0      	cmp	r0, r4
 8002dd8:	d03a      	beq.n	8002e50 <HAL_GPIO_Init+0x194>
 8002dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dde:	42a0      	cmp	r0, r4
 8002de0:	d038      	beq.n	8002e54 <HAL_GPIO_Init+0x198>
 8002de2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002de6:	42a0      	cmp	r0, r4
 8002de8:	bf0c      	ite	eq
 8002dea:	2406      	moveq	r4, #6
 8002dec:	2407      	movne	r4, #7
 8002dee:	fa04 f40e 	lsl.w	r4, r4, lr
 8002df2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002df6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	bf54      	ite	pl
 8002e00:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e02:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002e06:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e0a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	bf54      	ite	pl
 8002e0e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e10:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002e14:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002e16:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e18:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	bf54      	ite	pl
 8002e1c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e1e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002e22:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e24:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e26:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002e28:	bf54      	ite	pl
 8002e2a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e2c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002e30:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e32:	3301      	adds	r3, #1
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	f47f af47 	bne.w	8002cc8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002e3a:	b003      	add	sp, #12
 8002e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e40:	4654      	mov	r4, sl
 8002e42:	e7d4      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e44:	2401      	movs	r4, #1
 8002e46:	e7d2      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e48:	2402      	movs	r4, #2
 8002e4a:	e7d0      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e4c:	2403      	movs	r4, #3
 8002e4e:	e7ce      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e50:	2404      	movs	r4, #4
 8002e52:	e7cc      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e54:	2405      	movs	r4, #5
 8002e56:	e7ca      	b.n	8002dee <HAL_GPIO_Init+0x132>
 8002e58:	40013c00 	.word	0x40013c00
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40023800 	.word	0x40023800

08002e64 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e64:	6903      	ldr	r3, [r0, #16]
 8002e66:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e68:	bf14      	ite	ne
 8002e6a:	2001      	movne	r0, #1
 8002e6c:	2000      	moveq	r0, #0
 8002e6e:	4770      	bx	lr

08002e70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e70:	b10a      	cbz	r2, 8002e76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e72:	6181      	str	r1, [r0, #24]
  }
}
 8002e74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e76:	0409      	lsls	r1, r1, #16
 8002e78:	e7fb      	b.n	8002e72 <HAL_GPIO_WritePin+0x2>
	...

08002e7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e84:	4d18      	ldr	r5, [pc, #96]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_PWREx_EnableOverDrive+0x70>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002e9e:	f7fe ffbb 	bl	8001e18 <HAL_GetTick>
 8002ea2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ea4:	686b      	ldr	r3, [r5, #4]
 8002ea6:	03da      	lsls	r2, r3, #15
 8002ea8:	d50b      	bpl.n	8002ec2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eac:	4d0e      	ldr	r5, [pc, #56]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eae:	2201      	movs	r2, #1
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8002eb2:	f7fe ffb1 	bl	8001e18 <HAL_GetTick>
 8002eb6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eb8:	686b      	ldr	r3, [r5, #4]
 8002eba:	039b      	lsls	r3, r3, #14
 8002ebc:	d50a      	bpl.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e006      	b.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec2:	f7fe ffa9 	bl	8001e18 <HAL_GetTick>
 8002ec6:	1b00      	subs	r0, r0, r4
 8002ec8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ecc:	d9ea      	bls.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8002ece:	2003      	movs	r0, #3
}
 8002ed0:	b003      	add	sp, #12
 8002ed2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ed4:	f7fe ffa0 	bl	8001e18 <HAL_GetTick>
 8002ed8:	1b00      	subs	r0, r0, r4
 8002eda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ede:	d9eb      	bls.n	8002eb8 <HAL_PWREx_EnableOverDrive+0x3c>
 8002ee0:	e7f5      	b.n	8002ece <HAL_PWREx_EnableOverDrive+0x52>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	420e0000 	.word	0x420e0000

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	b910      	cbnz	r0, 8002f00 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8002efa:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCC_ClockConfig+0x120>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f002 020f 	and.w	r2, r2, #15
 8002f08:	428a      	cmp	r2, r1
 8002f0a:	d328      	bcc.n	8002f5e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	6821      	ldr	r1, [r4, #0]
 8002f0e:	078f      	lsls	r7, r1, #30
 8002f10:	d42d      	bmi.n	8002f6e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	07c8      	lsls	r0, r1, #31
 8002f14:	d440      	bmi.n	8002f98 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f16:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <HAL_RCC_ClockConfig+0x120>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f002 020f 	and.w	r2, r2, #15
 8002f1e:	42aa      	cmp	r2, r5
 8002f20:	d865      	bhi.n	8002fee <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	0751      	lsls	r1, r2, #29
 8002f26:	d46b      	bmi.n	8003000 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	0713      	lsls	r3, r2, #28
 8002f2a:	d507      	bpl.n	8002f3c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8002f2e:	6921      	ldr	r1, [r4, #16]
 8002f30:	6893      	ldr	r3, [r2, #8]
 8002f32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f3a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3c:	f000 f898 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8002f42:	4a35      	ldr	r2, [pc, #212]	; (8003018 <HAL_RCC_ClockConfig+0x128>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	40d8      	lsrs	r0, r3
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_ClockConfig+0x12c>)
 8002f50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCC_ClockConfig+0x130>)
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	f7fe ff15 	bl	8001d84 <HAL_InitTick>
  return HAL_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e7ce      	b.n	8002efc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d1c6      	bne.n	8002efa <HAL_RCC_ClockConfig+0xa>
 8002f6c:	e7ce      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6e:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8002f70:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	bf1e      	ittt	ne
 8002f76:	689a      	ldrne	r2, [r3, #8]
 8002f78:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002f7c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	bf42      	ittt	mi
 8002f82:	689a      	ldrmi	r2, [r3, #8]
 8002f84:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002f88:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68a0      	ldr	r0, [r4, #8]
 8002f8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f92:	4302      	orrs	r2, r0
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	e7bc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f98:	6862      	ldr	r2, [r4, #4]
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d11c      	bne.n	8002fda <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	d0a8      	beq.n	8002efa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa8:	4e1a      	ldr	r6, [pc, #104]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8002faa:	68b3      	ldr	r3, [r6, #8]
 8002fac:	f023 0303 	bic.w	r3, r3, #3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fb4:	f7fe ff30 	bl	8001e18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fbc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	68b3      	ldr	r3, [r6, #8]
 8002fc0:	6862      	ldr	r2, [r4, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fca:	d0a4      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe ff24 	bl	8001e18 <HAL_GetTick>
 8002fd0:	1bc0      	subs	r0, r0, r7
 8002fd2:	4540      	cmp	r0, r8
 8002fd4:	d9f3      	bls.n	8002fbe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	e790      	b.n	8002efc <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	1e91      	subs	r1, r2, #2
 8002fdc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fe6:	e7de      	b.n	8002fa6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	f013 0f02 	tst.w	r3, #2
 8002fec:	e7db      	b.n	8002fa6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	b2ea      	uxtb	r2, r5
 8002ff0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	42ab      	cmp	r3, r5
 8002ffa:	f47f af7e 	bne.w	8002efa <HAL_RCC_ClockConfig+0xa>
 8002ffe:	e790      	b.n	8002f22 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4904      	ldr	r1, [pc, #16]	; (8003014 <HAL_RCC_ClockConfig+0x124>)
 8003002:	68e0      	ldr	r0, [r4, #12]
 8003004:	688b      	ldr	r3, [r1, #8]
 8003006:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800300a:	4303      	orrs	r3, r0
 800300c:	608b      	str	r3, [r1, #8]
 800300e:	e78b      	b.n	8002f28 <HAL_RCC_ClockConfig+0x38>
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	0800b38e 	.word	0x0800b38e
 800301c:	20000000 	.word	0x20000000
 8003020:	20000008 	.word	0x20000008

08003024 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003024:	4b01      	ldr	r3, [pc, #4]	; (800302c <HAL_RCC_GetHCLKFreq+0x8>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000000 	.word	0x20000000

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800303e:	6810      	ldr	r0, [r2, #0]
}
 8003040:	40d8      	lsrs	r0, r3
 8003042:	4770      	bx	lr
 8003044:	40023800 	.word	0x40023800
 8003048:	0800b39e 	.word	0x0800b39e
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800305e:	6810      	ldr	r0, [r2, #0]
}
 8003060:	40d8      	lsrs	r0, r3
 8003062:	4770      	bx	lr
 8003064:	40023800 	.word	0x40023800
 8003068:	0800b39e 	.word	0x0800b39e
 800306c:	20000000 	.word	0x20000000

08003070 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003070:	4920      	ldr	r1, [pc, #128]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8003072:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003074:	688b      	ldr	r3, [r1, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d007      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x1e>
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d020      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x54>
 8003082:	481d      	ldr	r0, [pc, #116]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_RCC_GetSysClockFreq+0x8c>)
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf08      	it	eq
 800308a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800308c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003090:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003092:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003094:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	bf14      	ite	ne
 800309a:	4818      	ldrne	r0, [pc, #96]	; (80030fc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4816      	ldreq	r0, [pc, #88]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80030a2:	bf18      	it	ne
 80030a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	fba1 0100 	umull	r0, r1, r1, r0
 80030ae:	f7fd fd9b 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 80030be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80030c2:	e7e3      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ca:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	bf14      	ite	ne
 80030d0:	480a      	ldrne	r0, [pc, #40]	; (80030fc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d2:	4809      	ldreq	r0, [pc, #36]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80030d8:	bf18      	it	ne
 80030da:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e0:	fba1 0100 	umull	r0, r1, r1, r0
 80030e4:	f7fd fd80 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030e8:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80030f0:	e7e5      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x4e>
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	007a1200 	.word	0x007a1200

08003100 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	4604      	mov	r4, r0
 8003106:	2800      	cmp	r0, #0
 8003108:	d031      	beq.n	800316e <HAL_RCC_OscConfig+0x6e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	07df      	lsls	r7, r3, #31
 800310e:	d410      	bmi.n	8003132 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	079e      	lsls	r6, r3, #30
 8003114:	d467      	bmi.n	80031e6 <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	071a      	lsls	r2, r3, #28
 800311a:	f100 80b2 	bmi.w	8003282 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	075b      	lsls	r3, r3, #29
 8003122:	f100 80d2 	bmi.w	80032ca <HAL_RCC_OscConfig+0x1ca>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003126:	69a0      	ldr	r0, [r4, #24]
 8003128:	2800      	cmp	r0, #0
 800312a:	f040 8139 	bne.w	80033a0 <HAL_RCC_OscConfig+0x2a0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2000      	movs	r0, #0
 8003130:	e034      	b.n	800319c <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003132:	4b98      	ldr	r3, [pc, #608]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	f002 020c 	and.w	r2, r2, #12
 800313a:	2a04      	cmp	r2, #4
 800313c:	d010      	beq.n	8003160 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003144:	2a08      	cmp	r2, #8
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	025d      	lsls	r5, r3, #9
 800314c:	d408      	bmi.n	8003160 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314e:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003156:	2a0c      	cmp	r2, #12
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	0250      	lsls	r0, r2, #9
 800315e:	d508      	bpl.n	8003172 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0399      	lsls	r1, r3, #14
 8003166:	d5d3      	bpl.n	8003110 <HAL_RCC_OscConfig+0x10>
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1d0      	bne.n	8003110 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800316e:	2001      	movs	r0, #1
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	6862      	ldr	r2, [r4, #4]
 8003174:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003178:	d113      	bne.n	80031a2 <HAL_RCC_OscConfig+0xa2>
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003180:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003182:	f7fe fe49 	bl	8001e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4e83      	ldr	r6, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003188:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	6833      	ldr	r3, [r6, #0]
 800318c:	039a      	lsls	r2, r3, #14
 800318e:	d4bf      	bmi.n	8003110 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe fe42 	bl	8001e18 <HAL_GetTick>
 8003194:	1b40      	subs	r0, r0, r5
 8003196:	2864      	cmp	r0, #100	; 0x64
 8003198:	d9f7      	bls.n	800318a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800319a:	2003      	movs	r0, #3
}
 800319c:	b002      	add	sp, #8
 800319e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a2:	4d7c      	ldr	r5, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 80031a4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0xbc>
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	602b      	str	r3, [r5, #0]
 80031b2:	682b      	ldr	r3, [r5, #0]
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ba:	e7e2      	b.n	8003182 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d1d9      	bne.n	8003182 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80031ce:	f7fe fe23 	bl	8001e18 <HAL_GetTick>
 80031d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	039b      	lsls	r3, r3, #14
 80031d8:	d59a      	bpl.n	8003110 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031da:	f7fe fe1d 	bl	8001e18 <HAL_GetTick>
 80031de:	1b80      	subs	r0, r0, r6
 80031e0:	2864      	cmp	r0, #100	; 0x64
 80031e2:	d9f7      	bls.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 80031e4:	e7d9      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e6:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	f012 0f0c 	tst.w	r2, #12
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_OscConfig+0x112>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031f6:	2a08      	cmp	r2, #8
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0x100>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	025f      	lsls	r7, r3, #9
 80031fe:	d508      	bpl.n	8003212 <HAL_RCC_OscConfig+0x112>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003200:	4a64      	ldr	r2, [pc, #400]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 8003202:	6893      	ldr	r3, [r2, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320c:	6853      	ldr	r3, [r2, #4]
 800320e:	025e      	lsls	r6, r3, #9
 8003210:	d40e      	bmi.n	8003230 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	079d      	lsls	r5, r3, #30
 8003218:	d502      	bpl.n	8003220 <HAL_RCC_OscConfig+0x120>
 800321a:	68e3      	ldr	r3, [r4, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d1a6      	bne.n	800316e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	6921      	ldr	r1, [r4, #16]
 8003224:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003228:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800322c:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	e772      	b.n	8003116 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003230:	68e2      	ldr	r2, [r4, #12]
 8003232:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_OscConfig+0x298>)
 8003234:	b1b2      	cbz	r2, 8003264 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_ENABLE();
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800323a:	f7fe fded 	bl	8001e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4d55      	ldr	r5, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003240:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	0798      	lsls	r0, r3, #30
 8003246:	d507      	bpl.n	8003258 <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	6922      	ldr	r2, [r4, #16]
 800324c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003250:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e75e      	b.n	8003116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe fdde 	bl	8001e18 <HAL_GetTick>
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	2802      	cmp	r0, #2
 8003260:	d9ef      	bls.n	8003242 <HAL_RCC_OscConfig+0x142>
 8003262:	e79a      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8003264:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003266:	f7fe fdd7 	bl	8001e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4e4a      	ldr	r6, [pc, #296]	; (8003394 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800326c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	6833      	ldr	r3, [r6, #0]
 8003270:	0799      	lsls	r1, r3, #30
 8003272:	f57f af50 	bpl.w	8003116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe fdcf 	bl	8001e18 <HAL_GetTick>
 800327a:	1b40      	subs	r0, r0, r5
 800327c:	2802      	cmp	r0, #2
 800327e:	d9f6      	bls.n	800326e <HAL_RCC_OscConfig+0x16e>
 8003280:	e78b      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	6962      	ldr	r2, [r4, #20]
 8003284:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_RCC_OscConfig+0x298>)
 8003286:	b182      	cbz	r2, 80032aa <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8003288:	2201      	movs	r2, #1
 800328a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800328e:	f7fe fdc3 	bl	8001e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4e40      	ldr	r6, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8003294:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003298:	079f      	lsls	r7, r3, #30
 800329a:	f53f af40 	bmi.w	800311e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329e:	f7fe fdbb 	bl	8001e18 <HAL_GetTick>
 80032a2:	1b40      	subs	r0, r0, r5
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d9f6      	bls.n	8003296 <HAL_RCC_OscConfig+0x196>
 80032a8:	e777      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80032aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80032ae:	f7fe fdb3 	bl	8001e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b2:	4e38      	ldr	r6, [pc, #224]	; (8003394 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 80032b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80032b8:	0798      	lsls	r0, r3, #30
 80032ba:	f57f af30 	bpl.w	800311e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe fdab 	bl	8001e18 <HAL_GetTick>
 80032c2:	1b40      	subs	r0, r0, r5
 80032c4:	2802      	cmp	r0, #2
 80032c6:	d9f6      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1b6>
 80032c8:	e767      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 80032cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ce:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80032d2:	d128      	bne.n	8003326 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	9201      	str	r2, [sp, #4]
 80032d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032e8:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4d2c      	ldr	r5, [pc, #176]	; (800339c <HAL_RCC_OscConfig+0x29c>)
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	05d9      	lsls	r1, r3, #23
 80032f0:	d51b      	bpl.n	800332a <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	68a3      	ldr	r3, [r4, #8]
 80032f4:	4d27      	ldr	r5, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d127      	bne.n	800334a <HAL_RCC_OscConfig+0x24a>
 80032fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003302:	f7fe fd89 	bl	8001e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	4e23      	ldr	r6, [pc, #140]	; (8003394 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8003308:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003310:	079b      	lsls	r3, r3, #30
 8003312:	d539      	bpl.n	8003388 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8003314:	2f00      	cmp	r7, #0
 8003316:	f43f af06 	beq.w	8003126 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_RCC_OscConfig+0x294>)
 800331c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
 8003324:	e6ff      	b.n	8003126 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2700      	movs	r7, #0
 8003328:	e7df      	b.n	80032ea <HAL_RCC_OscConfig+0x1ea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003332:	f7fe fd71 	bl	8001e18 <HAL_GetTick>
 8003336:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	05da      	lsls	r2, r3, #23
 800333c:	d4d9      	bmi.n	80032f2 <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fd6b 	bl	8001e18 <HAL_GetTick>
 8003342:	1b80      	subs	r0, r0, r6
 8003344:	2802      	cmp	r0, #2
 8003346:	d9f7      	bls.n	8003338 <HAL_RCC_OscConfig+0x238>
 8003348:	e727      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334a:	2b05      	cmp	r3, #5
 800334c:	d104      	bne.n	8003358 <HAL_RCC_OscConfig+0x258>
 800334e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	672b      	str	r3, [r5, #112]	; 0x70
 8003356:	e7d0      	b.n	80032fa <HAL_RCC_OscConfig+0x1fa>
 8003358:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	672a      	str	r2, [r5, #112]	; 0x70
 8003360:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ca      	bne.n	8003302 <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 800336c:	f7fe fd54 	bl	8001e18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003374:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003378:	0798      	lsls	r0, r3, #30
 800337a:	d5cb      	bpl.n	8003314 <HAL_RCC_OscConfig+0x214>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe fd4c 	bl	8001e18 <HAL_GetTick>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	4540      	cmp	r0, r8
 8003384:	d9f7      	bls.n	8003376 <HAL_RCC_OscConfig+0x276>
 8003386:	e708      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe fd46 	bl	8001e18 <HAL_GetTick>
 800338c:	1b40      	subs	r0, r0, r5
 800338e:	4540      	cmp	r0, r8
 8003390:	d9bd      	bls.n	800330e <HAL_RCC_OscConfig+0x20e>
 8003392:	e702      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
 8003394:	40023800 	.word	0x40023800
 8003398:	42470000 	.word	0x42470000
 800339c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a0:	4d3b      	ldr	r5, [pc, #236]	; (8003490 <HAL_RCC_OscConfig+0x390>)
 80033a2:	68ab      	ldr	r3, [r5, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d040      	beq.n	800342e <HAL_RCC_OscConfig+0x32e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_OscConfig+0x394>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b4:	d12e      	bne.n	8003414 <HAL_RCC_OscConfig+0x314>
        tickstart = HAL_GetTick();
 80033b6:	f7fe fd2f 	bl	8001e18 <HAL_GetTick>
 80033ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	0199      	lsls	r1, r3, #6
 80033c0:	d422      	bmi.n	8003408 <HAL_RCC_OscConfig+0x308>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80033da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033dc:	0852      	lsrs	r2, r2, #1
 80033de:	3a01      	subs	r2, #1
 80033e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80033e6:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCC_OscConfig+0x394>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e8:	4d29      	ldr	r5, [pc, #164]	; (8003490 <HAL_RCC_OscConfig+0x390>)
        __HAL_RCC_PLL_ENABLE();
 80033ea:	2201      	movs	r2, #1
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80033ee:	f7fe fd13 	bl	8001e18 <HAL_GetTick>
 80033f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	019a      	lsls	r2, r3, #6
 80033f8:	f53f ae99 	bmi.w	800312e <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fd0c 	bl	8001e18 <HAL_GetTick>
 8003400:	1b00      	subs	r0, r0, r4
 8003402:	2802      	cmp	r0, #2
 8003404:	d9f6      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2f4>
 8003406:	e6c8      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fd06 	bl	8001e18 <HAL_GetTick>
 800340c:	1b80      	subs	r0, r0, r6
 800340e:	2802      	cmp	r0, #2
 8003410:	d9d4      	bls.n	80033bc <HAL_RCC_OscConfig+0x2bc>
 8003412:	e6c2      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8003414:	f7fe fd00 	bl	8001e18 <HAL_GetTick>
 8003418:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	f57f ae86 	bpl.w	800312e <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe fcf9 	bl	8001e18 <HAL_GetTick>
 8003426:	1b00      	subs	r0, r0, r4
 8003428:	2802      	cmp	r0, #2
 800342a:	d9f6      	bls.n	800341a <HAL_RCC_OscConfig+0x31a>
 800342c:	e6b5      	b.n	800319a <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342e:	2801      	cmp	r0, #1
 8003430:	f43f aeb4 	beq.w	800319c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8003434:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003438:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343c:	4291      	cmp	r1, r2
 800343e:	f47f ae96 	bne.w	800316e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003448:	428a      	cmp	r2, r1
 800344a:	f47f ae90 	bne.w	800316e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003450:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003454:	401a      	ands	r2, r3
 8003456:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800345a:	f47f ae88 	bne.w	800316e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003460:	0852      	lsrs	r2, r2, #1
 8003462:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003466:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003468:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800346c:	f47f ae7f 	bne.w	800316e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003470:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003476:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800347a:	f47f ae78 	bne.w	800316e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800347e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003480:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003488:	f43f ae51 	beq.w	800312e <HAL_RCC_OscConfig+0x2e>
 800348c:	e66f      	b.n	800316e <HAL_RCC_OscConfig+0x6e>
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000

08003498 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003498:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	f102 030c 	add.w	r3, r2, #12
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	320c      	adds	r2, #12
 80034a8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80034ac:	6802      	ldr	r2, [r0, #0]
 80034ae:	2900      	cmp	r1, #0
 80034b0:	d1f2      	bne.n	8003498 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	f102 0314 	add.w	r3, r2, #20
 80034b6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	f102 0c14 	add.w	ip, r2, #20
 80034c2:	e84c 3100 	strex	r1, r3, [ip]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d1f3      	bne.n	80034b2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10b      	bne.n	80034e8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f102 030c 	add.w	r3, r2, #12
 80034d4:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	f102 0c0c 	add.w	ip, r2, #12
 80034e0:	e84c 3100 	strex	r1, r3, [ip]
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d1f3      	bne.n	80034d0 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034e8:	2320      	movs	r3, #32
 80034ea:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	2300      	movs	r3, #0
 80034f0:	6303      	str	r3, [r0, #48]	; 0x30
}
 80034f2:	4770      	bx	lr

080034f4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	6802      	ldr	r2, [r0, #0]
 80034f6:	68c1      	ldr	r1, [r0, #12]
 80034f8:	6913      	ldr	r3, [r2, #16]
 80034fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034fe:	430b      	orrs	r3, r1
{
 8003500:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003502:	6113      	str	r3, [r2, #16]
{
 8003504:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003506:	6883      	ldr	r3, [r0, #8]
 8003508:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800350a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800350c:	4303      	orrs	r3, r0
 800350e:	6968      	ldr	r0, [r5, #20]
 8003510:	4303      	orrs	r3, r0
 8003512:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003514:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003518:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800351e:	430b      	orrs	r3, r1
 8003520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003522:	6953      	ldr	r3, [r2, #20]
 8003524:	69a9      	ldr	r1, [r5, #24]
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352a:	430b      	orrs	r3, r1
 800352c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <UART_SetConfig+0xb8>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d003      	beq.n	800353c <UART_SetConfig+0x48>
 8003534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003538:	429a      	cmp	r2, r3
 800353a:	d123      	bne.n	8003584 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff fd88 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003540:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003542:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003548:	e9d5 4600 	ldrd	r4, r6, [r5]
 800354c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003550:	d11b      	bne.n	800358a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003552:	19b2      	adds	r2, r6, r6
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	415b      	adcs	r3, r3
 800355a:	f7fd fb45 	bl	8000be8 <__aeabi_uldivmod>
 800355e:	2264      	movs	r2, #100	; 0x64
 8003560:	fbb0 f1f2 	udiv	r1, r0, r2
 8003564:	fb02 0311 	mls	r3, r2, r1, r0
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	3332      	adds	r3, #50	; 0x32
 800356c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003570:	f003 0207 	and.w	r2, r3, #7
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800357a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800357e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003580:	60a3      	str	r3, [r4, #8]
  }
}
 8003582:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003584:	f7ff fd54 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8003588:	e7da      	b.n	8003540 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800358a:	00b2      	lsls	r2, r6, #2
 800358c:	0fb3      	lsrs	r3, r6, #30
 800358e:	f7fd fb2b 	bl	8000be8 <__aeabi_uldivmod>
 8003592:	2264      	movs	r2, #100	; 0x64
 8003594:	fbb0 f1f2 	udiv	r1, r0, r2
 8003598:	fb02 0311 	mls	r3, r2, r1, r0
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	3332      	adds	r3, #50	; 0x32
 80035a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80035a8:	e7ea      	b.n	8003580 <UART_SetConfig+0x8c>
 80035aa:	bf00      	nop
 80035ac:	40011000 	.word	0x40011000

080035b0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80035b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	4617      	mov	r7, r2
 80035b8:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	682a      	ldr	r2, [r5, #0]
 80035bc:	6813      	ldr	r3, [r2, #0]
 80035be:	ea34 0303 	bics.w	r3, r4, r3
 80035c2:	d101      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80035c4:	2000      	movs	r0, #0
 80035c6:	e021      	b.n	800360c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	1c70      	adds	r0, r6, #1
 80035ca:	d0f7      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7fe fc24 	bl	8001e18 <HAL_GetTick>
 80035d0:	1bc0      	subs	r0, r0, r7
 80035d2:	4286      	cmp	r6, r0
 80035d4:	d31c      	bcc.n	8003610 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80035d6:	b1de      	cbz	r6, 8003610 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	0751      	lsls	r1, r2, #29
 80035de:	d5ec      	bpl.n	80035ba <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80035e0:	2c80      	cmp	r4, #128	; 0x80
 80035e2:	d0ea      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80035e4:	2c40      	cmp	r4, #64	; 0x40
 80035e6:	d0e8      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	0712      	lsls	r2, r2, #28
 80035ec:	d5e5      	bpl.n	80035ba <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035ee:	2400      	movs	r4, #0
 80035f0:	9401      	str	r4, [sp, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	9201      	str	r2, [sp, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80035fa:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035fc:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80035fe:	f7ff ff4b 	bl	8003498 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003602:	2308      	movs	r3, #8
 8003604:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 8003606:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
          return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
}
 800360c:	b003      	add	sp, #12
 800360e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003610:	2003      	movs	r0, #3
 8003612:	e7fb      	b.n	800360c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08003614 <HAL_UART_Init>:
{
 8003614:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003616:	4604      	mov	r4, r0
 8003618:	b348      	cbz	r0, 800366e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800361e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003622:	b91b      	cbnz	r3, 800362c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003624:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003628:	f7fe fad8 	bl	8001bdc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800362c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800362e:	2324      	movs	r3, #36	; 0x24
 8003630:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003634:	68d3      	ldr	r3, [r2, #12]
 8003636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff ff59 	bl	80034f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003652:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800365a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800365e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003662:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800366c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800366e:	2001      	movs	r0, #1
 8003670:	e7fc      	b.n	800366c <HAL_UART_Init+0x58>

08003672 <HAL_UART_Transmit>:
{
 8003672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003674:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003676:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 800367a:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800367c:	2a20      	cmp	r2, #32
{
 800367e:	4604      	mov	r4, r0
 8003680:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003682:	d140      	bne.n	8003706 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8003684:	2900      	cmp	r1, #0
 8003686:	d040      	beq.n	800370a <HAL_UART_Transmit+0x98>
 8003688:	2f00      	cmp	r7, #0
 800368a:	d03e      	beq.n	800370a <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	2500      	movs	r5, #0
 8003690:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003692:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003696:	f7fe fbbf 	bl	8001e18 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369a:	68a1      	ldr	r1, [r4, #8]
 800369c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800369e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80036a4:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80036a6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	d103      	bne.n	80036b2 <HAL_UART_Transmit+0x40>
 80036aa:	6921      	ldr	r1, [r4, #16]
 80036ac:	b909      	cbnz	r1, 80036b2 <HAL_UART_Transmit+0x40>
 80036ae:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80036b0:	460e      	mov	r6, r1
    while (huart->TxXferCount > 0U)
 80036b2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80036b4:	b289      	uxth	r1, r1
 80036b6:	b949      	cbnz	r1, 80036cc <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff ff78 	bl	80035b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80036c0:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80036c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	b968      	cbnz	r0, 80036e4 <HAL_UART_Transmit+0x72>
}
 80036c8:	b003      	add	sp, #12
 80036ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	4620      	mov	r0, r4
 80036d0:	e9cd 2300 	strd	r2, r3, [sp]
 80036d4:	f7ff ff6c 	bl	80035b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80036d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036dc:	b120      	cbz	r0, 80036e8 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80036de:	2320      	movs	r3, #32
 80036e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 80036e4:	2003      	movs	r0, #3
 80036e6:	e7ef      	b.n	80036c8 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036e8:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80036ea:	b94e      	cbnz	r6, 8003700 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	f835 1b02 	ldrh.w	r1, [r5], #2
 80036f0:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f4:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80036f6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80036f8:	3901      	subs	r1, #1
 80036fa:	b289      	uxth	r1, r1
 80036fc:	84e1      	strh	r1, [r4, #38]	; 0x26
 80036fe:	e7d8      	b.n	80036b2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003700:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003704:	e7f6      	b.n	80036f4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003706:	2002      	movs	r0, #2
 8003708:	e7de      	b.n	80036c8 <HAL_UART_Transmit+0x56>
      return  HAL_ERROR;
 800370a:	2001      	movs	r0, #1
 800370c:	e7dc      	b.n	80036c8 <HAL_UART_Transmit+0x56>
	...

08003710 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8003710:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <_put_c_driver+0x24>)
{
 8003714:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b13b      	cbz	r3, 800372c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800371c:	4806      	ldr	r0, [pc, #24]	; (8003738 <_put_c_driver+0x28>)
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	2201      	movs	r2, #1
 8003724:	f10d 0107 	add.w	r1, sp, #7
 8003728:	f7ff ffa3 	bl	8003672 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 800372c:	b003      	add	sp, #12
 800372e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c
 8003738:	20001618 	.word	0x20001618

0800373c <_write>:
{
 800373c:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800373e:	1e14      	subs	r4, r2, #0
 8003740:	da0a      	bge.n	8003758 <_write+0x1c>
 8003742:	3801      	subs	r0, #1
 8003744:	2801      	cmp	r0, #1
 8003746:	d907      	bls.n	8003758 <_write+0x1c>
    errno = EBADF;
 8003748:	f005 f8d8 	bl	80088fc <__errno>
 800374c:	2309      	movs	r3, #9
 800374e:	6003      	str	r3, [r0, #0]
    return -1;
 8003750:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003754:	4620      	mov	r0, r4
 8003756:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <_write+0x38>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f9      	beq.n	8003754 <_write+0x18>
 8003760:	b2a2      	uxth	r2, r4
 8003762:	4805      	ldr	r0, [pc, #20]	; (8003778 <_write+0x3c>)
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	f7ff ff83 	bl	8003672 <HAL_UART_Transmit>
  return (status ? count : 0);
 800376c:	2800      	cmp	r0, #0
 800376e:	bf18      	it	ne
 8003770:	2400      	movne	r4, #0
 8003772:	e7ef      	b.n	8003754 <_write+0x18>
 8003774:	2000000c 	.word	0x2000000c
 8003778:	20001618 	.word	0x20001618

0800377c <lc_print>:

void lc_print(const char* fmt, ... )
{
 800377c:	b40f      	push	{r0, r1, r2, r3}
 800377e:	b507      	push	{r0, r1, r2, lr}
 8003780:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003782:	2100      	movs	r1, #0
{
 8003784:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <lc_print+0x20>)
  va_start(ap, fmt);
 800378a:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800378c:	f000 fa10 	bl	8003bb0 <vlc_print>
  va_end(ap);
}
 8003790:	b003      	add	sp, #12
 8003792:	f85d eb04 	ldr.w	lr, [sp], #4
 8003796:	b004      	add	sp, #16
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	08003711 	.word	0x08003711

080037a0 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 80037a0:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 80037a2:	4d11      	ldr	r5, [pc, #68]	; (80037e8 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 80037a4:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 80037a6:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 80037a8:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 80037ac:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80037b0:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80037b4:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80037b6:	f004 f9cf 	bl	8007b58 <malloc>

  /* remember size */
  if (ptr) {
 80037ba:	b1a0      	cbz	r0, 80037e6 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80037bc:	1903      	adds	r3, r0, r4
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80037c0:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80037c2:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	07db      	lsls	r3, r3, #31
 80037c8:	d50c      	bpl.n	80037e4 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80037ca:	68eb      	ldr	r3, [r5, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80037d0:	686b      	ldr	r3, [r5, #4]
 80037d2:	4423      	add	r3, r4
 80037d4:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80037d6:	69ab      	ldr	r3, [r5, #24]
 80037d8:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80037da:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 80037dc:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 80037de:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 80037e0:	bf88      	it	hi
 80037e2:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80037e4:	3004      	adds	r0, #4
}
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
 80037e8:	20001688 	.word	0x20001688
 80037ec:	efdcba98 	.word	0xefdcba98

080037f0 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80037f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4604      	mov	r4, r0
 80037f6:	468a      	mov	sl, r1
  if (!t)
 80037f8:	4617      	mov	r7, r2
 80037fa:	b382      	cbz	r2, 800385e <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 80037fc:	f7ff fc12 	bl	8003024 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003800:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003802:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003804:	9001      	str	r0, [sp, #4]
 8003806:	4651      	mov	r1, sl
 8003808:	4620      	mov	r0, r4
 800380a:	f7fd f9ed 	bl	8000be8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 800380e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003812:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003814:	fba4 0106 	umull	r0, r1, r4, r6
 8003818:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800381a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003864 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 800381e:	2300      	movs	r3, #0
 8003820:	fb06 110a 	mla	r1, r6, sl, r1
 8003824:	f7fd f9e0 	bl	8000be8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003828:	fbab 3106 	umull	r3, r1, fp, r6
 800382c:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800382e:	fba4 0109 	umull	r0, r1, r4, r9
 8003832:	9a01      	ldr	r2, [sp, #4]
 8003834:	fb09 110a 	mla	r1, r9, sl, r1
 8003838:	2300      	movs	r3, #0
 800383a:	f7fd f9d5 	bl	8000be8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 800383e:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003840:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003842:	fbab 8909 	umull	r8, r9, fp, r9
 8003846:	eba0 0008 	sub.w	r0, r0, r8
 800384a:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 800384e:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003852:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003854:	60f8      	str	r0, [r7, #12]
  return 0;
 8003856:	2000      	movs	r0, #0
}
 8003858:	b003      	add	sp, #12
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800385e:	f04f 30ff 	mov.w	r0, #4294967295
 8003862:	e7f9      	b.n	8003858 <dwtCyclesToTime+0x68>
 8003864:	000f4240 	.word	0x000f4240

08003868 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <getFlashCacheConf+0x38>)
{
 800386a:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003870:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003872:	9b01      	ldr	r3, [sp, #4]
 8003874:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003876:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003878:	f000 000f 	and.w	r0, r0, #15
    mconf |= MCONF_ART_DCACHE;
 800387c:	bf4c      	ite	mi
 800387e:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003882:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003886:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003888:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 800388a:	bf48      	it	mi
 800388c:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003890:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003892:	bf48      	it	mi
 8003894:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003898:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800389c:	b002      	add	sp, #8
 800389e:	4770      	bx	lr
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 80038a8:	f7ff fbbc 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 80038ac:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 80038ae:	f7ff fbb9 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 80038b2:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 80038b4:	f7ff ffd8 	bl	8003868 <getFlashCacheConf>
 80038b8:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 80038ba:	f7fe fad1 	bl	8001e60 <HAL_GetDEVID>
 80038be:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 80038c0:	f7fe fac8 	bl	8001e54 <HAL_GetREVID>
 80038c4:	6120      	str	r0, [r4, #16]
}
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <systemSettingLog>:

void systemSettingLog(void)
{
 80038c8:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80038ca:	2203      	movs	r2, #3
{
 80038cc:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80038ce:	2301      	movs	r3, #1
 80038d0:	210b      	movs	r1, #11
 80038d2:	4826      	ldr	r0, [pc, #152]	; (800396c <systemSettingLog+0xa4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80038d4:	4c26      	ldr	r4, [pc, #152]	; (8003970 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80038d6:	f7ff ff51 	bl	800377c <lc_print>
  if (!conf)
 80038da:	a803      	add	r0, sp, #12
 80038dc:	f7ff ffe2 	bl	80038a4 <getSysConf.part.0>
  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 80038e0:	4824      	ldr	r0, [pc, #144]	; (8003974 <systemSettingLog+0xac>)
 80038e2:	f7ff ff4b 	bl	800377c <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80038e6:	9906      	ldr	r1, [sp, #24]
 80038e8:	4823      	ldr	r0, [pc, #140]	; (8003978 <systemSettingLog+0xb0>)
 80038ea:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b50      	cmp	r3, #80	; 0x50
 80038f2:	bf96      	itet	ls
 80038f4:	4a21      	ldrls	r2, [pc, #132]	; (800397c <systemSettingLog+0xb4>)
 80038f6:	4a22      	ldrhi	r2, [pc, #136]	; (8003980 <systemSettingLog+0xb8>)
 80038f8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80038fc:	9b07      	ldr	r3, [sp, #28]
 80038fe:	f7ff ff3d 	bl	800377c <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <systemSettingLog+0xbc>)
 8003904:	2104      	movs	r1, #4
 8003906:	1d5a      	adds	r2, r3, #5
 8003908:	f103 000a 	add.w	r0, r3, #10
 800390c:	f7ff ff36 	bl	800377c <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003910:	f7fe fa9c 	bl	8001e4c <HAL_GetHalVersion>
 8003914:	4601      	mov	r1, r0
 8003916:	481c      	ldr	r0, [pc, #112]	; (8003988 <systemSettingLog+0xc0>)
 8003918:	f7ff ff30 	bl	800377c <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800391c:	9903      	ldr	r1, [sp, #12]
 800391e:	481b      	ldr	r0, [pc, #108]	; (800398c <systemSettingLog+0xc4>)
 8003920:	fb91 f1f4 	sdiv	r1, r1, r4
 8003924:	f7ff ff2a 	bl	800377c <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003928:	9904      	ldr	r1, [sp, #16]
 800392a:	4819      	ldr	r0, [pc, #100]	; (8003990 <systemSettingLog+0xc8>)
 800392c:	fb91 f1f4 	sdiv	r1, r1, r4
 8003930:	f7ff ff24 	bl	800377c <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <systemSettingLog+0xcc>)
    return "False";
 8003936:	4818      	ldr	r0, [pc, #96]	; (8003998 <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 8003938:	6819      	ldr	r1, [r3, #0]
    return "False";
 800393a:	1d44      	adds	r4, r0, #5
 800393c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003940:	bf14      	ite	ne
 8003942:	4602      	movne	r2, r0
 8003944:	4622      	moveq	r2, r4
 8003946:	f411 7f00 	tst.w	r1, #512	; 0x200
 800394a:	bf14      	ite	ne
 800394c:	4603      	movne	r3, r0
 800394e:	4623      	moveq	r3, r4
 8003950:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003954:	bf18      	it	ne
 8003956:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003958:	f001 050f 	and.w	r5, r1, #15
 800395c:	e9cd 4500 	strd	r4, r5, [sp]
 8003960:	30ec      	adds	r0, #236	; 0xec
 8003962:	f7ff ff0b 	bl	800377c <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003966:	b009      	add	sp, #36	; 0x24
 8003968:	bd30      	pop	{r4, r5, pc}
 800396a:	bf00      	nop
 800396c:	0800ae99 	.word	0x0800ae99
 8003970:	000f4240 	.word	0x000f4240
 8003974:	0800aeb6 	.word	0x0800aeb6
 8003978:	0800aed6 	.word	0x0800aed6
 800397c:	0800b3b0 	.word	0x0800b3b0
 8003980:	0800ae86 	.word	0x0800ae86
 8003984:	0800af07 	.word	0x0800af07
 8003988:	0800af2f 	.word	0x0800af2f
 800398c:	0800af48 	.word	0x0800af48
 8003990:	0800af61 	.word	0x0800af61
 8003994:	40023c00 	.word	0x40023c00
 8003998:	0800ae8e 	.word	0x0800ae8e

0800399c <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 800399c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 800399e:	4c20      	ldr	r4, [pc, #128]	; (8003a20 <aiValidationInit+0x84>)
#else /* USE_SYSTICK_ONLY */
  struct dwtTime t;
  uint32_t st;

  port_dwt_init();
  port_dwt_reset();
 80039a0:	4e20      	ldr	r6, [pc, #128]	; (8003a24 <aiValidationInit+0x88>)
 80039a2:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 80039a6:	f7ff fee9 	bl	800377c <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80039aa:	2300      	movs	r3, #0
 80039ac:	f104 0191 	add.w	r1, r4, #145	; 0x91
 80039b0:	2207      	movs	r2, #7
 80039b2:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 80039b6:	f7ff fee1 	bl	800377c <lc_print>
 80039ba:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80039bc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80039c0:	f7ff fedc 	bl	800377c <lc_print>

  systemSettingLog();
 80039c4:	f7ff ff80 	bl	80038c8 <systemSettingLog>

  crcIpInit();
 80039c8:	f000 f830 	bl	8003a2c <port_hal_crc_ip_init_imp>
  port_dwt_init();
 80039cc:	f000 f840 	bl	8003a50 <port_dwt_init_imp>
  port_dwt_reset();
 80039d0:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80039d2:	2064      	movs	r0, #100	; 0x64
 80039d4:	f7fe fa26 	bl	8001e24 <HAL_Delay>
  st = port_dwt_get_cycles();
 80039d8:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 80039da:	466a      	mov	r2, sp
 80039dc:	2664      	movs	r6, #100	; 0x64
 80039de:	4629      	mov	r1, r5
 80039e0:	fbb0 f0f6 	udiv	r0, r0, r6
 80039e4:	f7ff ff04 	bl	80037f0 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (delay(1)=%d.%03d ms)\r\n",
           t.s * 100 + t.ms, t.us);
#else /* USE_CORE_CLOCK_ONLY == 1 */
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 80039e8:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80039ec:	9a03      	ldr	r2, [sp, #12]
 80039ee:	fb06 3101 	mla	r1, r6, r1, r3
 80039f2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80039f6:	f7ff fec1 	bl	800377c <lc_print>
           t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 80039fa:	466a      	mov	r2, sp
 80039fc:	2100      	movs	r1, #0
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	f7ff fef5 	bl	80037f0 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003a06:	9a01      	ldr	r2, [sp, #4]
 8003a08:	9b02      	ldr	r3, [sp, #8]
 8003a0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a0e:	fb01 3302 	mla	r3, r1, r2, r3
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <aiValidationInit+0x8c>)
 8003a14:	6013      	str	r3, [r2, #0]
#endif /* !USE_CORE_CLOCK_ONLY != 1 */
  port_dwt_init();
 8003a16:	f000 f81b 	bl	8003a50 <port_dwt_init_imp>
  cyclesCounterInit();

  return 0;
}
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	0800b02d 	.word	0x0800b02d
 8003a24:	e0001000 	.word	0xe0001000
 8003a28:	2000167c 	.word	0x2000167c

08003a2c <port_hal_crc_ip_init_imp>:

#if !defined(NO_PORT_CRC_IP_INIT_IMP)
#if defined(HAS_CRC_IP) && HAS_CRC_IP == 1

void port_hal_crc_ip_init_imp(void)
{
 8003a2c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <port_hal_crc_ip_init_imp+0x20>)
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003a46:	b002      	add	sp, #8
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800

08003a50 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <port_dwt_init_imp+0x20>)
 8003a52:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <port_dwt_init_imp+0x24>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	e0001000 	.word	0xe0001000

08003a78 <MX_X_CUBE_AI_Init>:
ai_handle data_activations0[] = {pool0};

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003a78:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003a7a:	f7fd ffcd 	bl	8001a18 <MX_USART2_UART_Init>
    aiValidationInit();
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 8003a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8003a82:	f7ff bf8b 	b.w	800399c <aiValidationInit>

08003a86 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a8a:	6896      	ldr	r6, [r2, #8]
{
 8003a8c:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8003a8e:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a90:	f016 0304 	ands.w	r3, r6, #4
{
 8003a94:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8003a96:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a9a:	d028      	beq.n	8003aee <_write_number+0x68>
    if ((int64_t)number < 0) {
 8003a9c:	42a9      	cmp	r1, r5
 8003a9e:	da07      	bge.n	8003ab0 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003aa0:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003aa2:	4240      	negs	r0, r0
      specifier->width -= 1;
 8003aa4:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003aac:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8003aae:	252d      	movs	r5, #45	; 0x2d
 8003ab0:	f016 0f08 	tst.w	r6, #8
 8003ab4:	bf14      	ite	ne
 8003ab6:	f04f 0841 	movne.w	r8, #65	; 0x41
 8003aba:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8003abe:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003ac2:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8003ac4:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003ac8:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8003acc:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8003ad0:	f1ba 0f00 	cmp.w	sl, #0
 8003ad4:	d033      	beq.n	8003b3e <_write_number+0xb8>
      chr = number & 0x0F;
 8003ad6:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8003ada:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003adc:	2b09      	cmp	r3, #9
      t = number >> 4;
 8003ade:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8003ae2:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003ae6:	d906      	bls.n	8003af6 <_write_number+0x70>
 8003ae8:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e004      	b.n	8003af8 <_write_number+0x72>
  char sign_neg = 0;
 8003aee:	461d      	mov	r5, r3
 8003af0:	e7de      	b.n	8003ab0 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8003af2:	4617      	mov	r7, r2
 8003af4:	e7ea      	b.n	8003acc <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003af6:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8003af8:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8003afc:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8003b00:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8003b04:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8003b08:	d1f3      	bne.n	8003af2 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8003b0a:	f006 0101 	and.w	r1, r6, #1
 8003b0e:	b155      	cbz	r5, 8003b26 <_write_number+0xa0>
 8003b10:	b949      	cbnz	r1, 8003b26 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8003b12:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003b16:	eb0d 0203 	add.w	r2, sp, r3
 8003b1a:	232d      	movs	r3, #45	; 0x2d
 8003b1c:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8003b20:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8003b24:	1eba      	subs	r2, r7, #2
 8003b26:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	bf14      	ite	ne
 8003b2c:	2130      	movne	r1, #48	; 0x30
 8003b2e:	2120      	moveq	r1, #32
 8003b30:	f006 0602 	and.w	r6, r6, #2
 8003b34:	455b      	cmp	r3, fp
 8003b36:	dd13      	ble.n	8003b60 <_write_number+0xda>
 8003b38:	b166      	cbz	r6, 8003b54 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003b3a:	b9a5      	cbnz	r5, 8003b66 <_write_number+0xe0>
 8003b3c:	e01c      	b.n	8003b78 <_write_number+0xf2>
      t = number / 10;
 8003b3e:	220a      	movs	r2, #10
 8003b40:	2300      	movs	r3, #0
 8003b42:	f7fd f851 	bl	8000be8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8003b46:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003b4a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003b4e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003b52:	e7ca      	b.n	8003aea <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8003b54:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8003b58:	f10b 0b01 	add.w	fp, fp, #1
 8003b5c:	3a01      	subs	r2, #1
 8003b5e:	e7e9      	b.n	8003b34 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003b60:	b155      	cbz	r5, 8003b78 <_write_number+0xf2>
 8003b62:	455b      	cmp	r3, fp
 8003b64:	d108      	bne.n	8003b78 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8003b66:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003b6a:	446b      	add	r3, sp
 8003b6c:	212d      	movs	r1, #45	; 0x2d
 8003b6e:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8003b72:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8003b76:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8003b78:	eb0d 0602 	add.w	r6, sp, r2
 8003b7c:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003b7e:	68e3      	ldr	r3, [r4, #12]
 8003b80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b84:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8003b86:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003b88:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8003b8a:	45ab      	cmp	fp, r5
 8003b8c:	d1f7      	bne.n	8003b7e <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	079b      	lsls	r3, r3, #30
 8003b92:	d408      	bmi.n	8003ba6 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8003b94:	4628      	mov	r0, r5
 8003b96:	b011      	add	sp, #68	; 0x44
 8003b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8003b9c:	68e3      	ldr	r3, [r4, #12]
 8003b9e:	6920      	ldr	r0, [r4, #16]
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	4798      	blx	r3
 8003ba4:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dcf7      	bgt.n	8003b9c <_write_number+0x116>
 8003bac:	e7f2      	b.n	8003b94 <_write_number+0x10e>
	...

08003bb0 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	4682      	mov	sl, r0
 8003bb6:	b09d      	sub	sp, #116	; 0x74
 8003bb8:	4688      	mov	r8, r1
 8003bba:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8003bbc:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003bc6:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8003bc8:	b919      	cbnz	r1, 8003bd2 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8003bca:	4658      	mov	r0, fp
 8003bcc:	b01d      	add	sp, #116	; 0x74
 8003bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8003bd2:	290a      	cmp	r1, #10
 8003bd4:	d104      	bne.n	8003be0 <vlc_print+0x30>
      putc_fct(user, c);
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	47d0      	blx	sl
      count++;
 8003bda:	f10b 0b01 	add.w	fp, fp, #1
 8003bde:	e0fb      	b.n	8003dd8 <vlc_print+0x228>
    else if (c == '%')
 8003be0:	2925      	cmp	r1, #37	; 0x25
 8003be2:	d1f8      	bne.n	8003bd6 <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003be4:	2300      	movs	r3, #0
 8003be6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003bea:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8003bee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003bf2:	461f      	mov	r7, r3
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	461e      	mov	r6, r3
      bool long_type = false;
 8003bfc:	469c      	mov	ip, r3
      bool has_precision = false;
 8003bfe:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8003c00:	9904      	ldr	r1, [sp, #16]
 8003c02:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003c06:	9104      	str	r1, [sp, #16]
        if (!c)
 8003c08:	b32d      	cbz	r5, 8003c56 <vlc_print+0xa6>
        else if (c == '0')
 8003c0a:	2d39      	cmp	r5, #57	; 0x39
 8003c0c:	d814      	bhi.n	8003c38 <vlc_print+0x88>
 8003c0e:	2d2c      	cmp	r5, #44	; 0x2c
 8003c10:	d91e      	bls.n	8003c50 <vlc_print+0xa0>
 8003c12:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 8003c16:	290c      	cmp	r1, #12
 8003c18:	d811      	bhi.n	8003c3e <vlc_print+0x8e>
 8003c1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c1e:	0044      	.short	0x0044
 8003c20:	001001ff 	.word	0x001001ff
 8003c24:	00470030 	.word	0x00470030
 8003c28:	00470047 	.word	0x00470047
 8003c2c:	00470047 	.word	0x00470047
 8003c30:	00470047 	.word	0x00470047
 8003c34:	00470047 	.word	0x00470047
 8003c38:	2d6c      	cmp	r5, #108	; 0x6c
 8003c3a:	f000 8202 	beq.w	8004042 <vlc_print+0x492>
          switch(c)
 8003c3e:	2d78      	cmp	r5, #120	; 0x78
 8003c40:	d809      	bhi.n	8003c56 <vlc_print+0xa6>
 8003c42:	2d62      	cmp	r5, #98	; 0x62
 8003c44:	d83d      	bhi.n	8003cc2 <vlc_print+0x112>
 8003c46:	2d46      	cmp	r5, #70	; 0x46
 8003c48:	f000 810c 	beq.w	8003e64 <vlc_print+0x2b4>
 8003c4c:	2d58      	cmp	r5, #88	; 0x58
 8003c4e:	d06b      	beq.n	8003d28 <vlc_print+0x178>
 8003c50:	2d25      	cmp	r5, #37	; 0x25
 8003c52:	f000 8088 	beq.w	8003d66 <vlc_print+0x1b6>
 8003c56:	b103      	cbz	r3, 8003c5a <vlc_print+0xaa>
 8003c58:	9709      	str	r7, [sp, #36]	; 0x24
 8003c5a:	b100      	cbz	r0, 8003c5e <vlc_print+0xae>
 8003c5c:	9208      	str	r2, [sp, #32]
 8003c5e:	9b00      	ldr	r3, [sp, #0]
 8003c60:	b103      	cbz	r3, 8003c64 <vlc_print+0xb4>
 8003c62:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 8003c64:	213c      	movs	r1, #60	; 0x3c
 8003c66:	4640      	mov	r0, r8
 8003c68:	47d0      	blx	sl
        putc_fct(user, '!');
 8003c6a:	2121      	movs	r1, #33	; 0x21
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	47d0      	blx	sl
        putc_fct(user, '>');
 8003c70:	213e      	movs	r1, #62	; 0x3e
 8003c72:	4640      	mov	r0, r8
 8003c74:	47d0      	blx	sl
        va_arg(vl, signed long);
 8003c76:	3404      	adds	r4, #4
        count += 3;
 8003c78:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 8003c7c:	e0ac      	b.n	8003dd8 <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 8003c7e:	ea56 0502 	orrs.w	r5, r6, r2
 8003c82:	d105      	bne.n	8003c90 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003c84:	f047 0701 	orr.w	r7, r7, #1
 8003c88:	462a      	mov	r2, r5
 8003c8a:	462e      	mov	r6, r5
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e7b7      	b.n	8003c00 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c90:	210a      	movs	r1, #10
          } else if (has_precision) {
 8003c92:	f1be 0f00 	cmp.w	lr, #0
 8003c96:	d002      	beq.n	8003c9e <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c98:	434a      	muls	r2, r1
 8003c9a:	4670      	mov	r0, lr
 8003c9c:	e7b0      	b.n	8003c00 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 8003c9e:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	9100      	str	r1, [sp, #0]
 8003ca4:	e7ac      	b.n	8003c00 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 8003ca6:	f047 0702 	orr.w	r7, r7, #2
 8003caa:	e7ef      	b.n	8003c8c <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003cac:	3d30      	subs	r5, #48	; 0x30
 8003cae:	210a      	movs	r1, #10
          if (has_precision) {
 8003cb0:	f1be 0f00 	cmp.w	lr, #0
 8003cb4:	d002      	beq.n	8003cbc <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003cb6:	fb01 5202 	mla	r2, r1, r2, r5
 8003cba:	e7ee      	b.n	8003c9a <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 8003cbc:	fb01 5606 	mla	r6, r1, r6, r5
 8003cc0:	e7ee      	b.n	8003ca0 <vlc_print+0xf0>
          switch(c)
 8003cc2:	3d63      	subs	r5, #99	; 0x63
 8003cc4:	2d15      	cmp	r5, #21
 8003cc6:	d8c6      	bhi.n	8003c56 <vlc_print+0xa6>
 8003cc8:	f20f 0e04 	addw	lr, pc, #4
 8003ccc:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8003cd0:	08003d79 	.word	0x08003d79
 8003cd4:	08003e2d 	.word	0x08003e2d
 8003cd8:	08003c57 	.word	0x08003c57
 8003cdc:	08003e65 	.word	0x08003e65
 8003ce0:	08003c57 	.word	0x08003c57
 8003ce4:	08003c57 	.word	0x08003c57
 8003ce8:	08003e2d 	.word	0x08003e2d
 8003cec:	08003c57 	.word	0x08003c57
 8003cf0:	08003c57 	.word	0x08003c57
 8003cf4:	08003c57 	.word	0x08003c57
 8003cf8:	08003c57 	.word	0x08003c57
 8003cfc:	08003c57 	.word	0x08003c57
 8003d00:	08003c57 	.word	0x08003c57
 8003d04:	08003e17 	.word	0x08003e17
 8003d08:	08003c57 	.word	0x08003c57
 8003d0c:	08003c57 	.word	0x08003c57
 8003d10:	08003d8d 	.word	0x08003d8d
 8003d14:	08003c57 	.word	0x08003c57
 8003d18:	08004023 	.word	0x08004023
 8003d1c:	08003c57 	.word	0x08003c57
 8003d20:	08003c57 	.word	0x08003c57
 8003d24:	08003d41 	.word	0x08003d41
 8003d28:	b103      	cbz	r3, 8003d2c <vlc_print+0x17c>
 8003d2a:	9709      	str	r7, [sp, #36]	; 0x24
 8003d2c:	b100      	cbz	r0, 8003d30 <vlc_print+0x180>
 8003d2e:	9208      	str	r2, [sp, #32]
 8003d30:	9b00      	ldr	r3, [sp, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <vlc_print+0x186>
 8003d34:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8003d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3e:	e006      	b.n	8003d4e <vlc_print+0x19e>
 8003d40:	b103      	cbz	r3, 8003d44 <vlc_print+0x194>
 8003d42:	9709      	str	r7, [sp, #36]	; 0x24
 8003d44:	b100      	cbz	r0, 8003d48 <vlc_print+0x198>
 8003d46:	9208      	str	r2, [sp, #32]
 8003d48:	9b00      	ldr	r3, [sp, #0]
 8003d4a:	b103      	cbz	r3, 8003d4e <vlc_print+0x19e>
 8003d4c:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8003d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8003d50:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8003d54:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8003d58:	aa07      	add	r2, sp, #28
 8003d5a:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8003d5c:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8003d5e:	f7ff fe92 	bl	8003a86 <_write_number>
 8003d62:	4483      	add	fp, r0
            break;
 8003d64:	e038      	b.n	8003dd8 <vlc_print+0x228>
 8003d66:	b103      	cbz	r3, 8003d6a <vlc_print+0x1ba>
 8003d68:	9709      	str	r7, [sp, #36]	; 0x24
 8003d6a:	b100      	cbz	r0, 8003d6e <vlc_print+0x1be>
 8003d6c:	9208      	str	r2, [sp, #32]
 8003d6e:	9b00      	ldr	r3, [sp, #0]
 8003d70:	b103      	cbz	r3, 8003d74 <vlc_print+0x1c4>
 8003d72:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 8003d74:	2125      	movs	r1, #37	; 0x25
 8003d76:	e72e      	b.n	8003bd6 <vlc_print+0x26>
 8003d78:	b103      	cbz	r3, 8003d7c <vlc_print+0x1cc>
 8003d7a:	9709      	str	r7, [sp, #36]	; 0x24
 8003d7c:	b100      	cbz	r0, 8003d80 <vlc_print+0x1d0>
 8003d7e:	9208      	str	r2, [sp, #32]
 8003d80:	9b00      	ldr	r3, [sp, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <vlc_print+0x1d6>
 8003d84:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 8003d86:	f814 1b04 	ldrb.w	r1, [r4], #4
 8003d8a:	e724      	b.n	8003bd6 <vlc_print+0x26>
 8003d8c:	b103      	cbz	r3, 8003d90 <vlc_print+0x1e0>
 8003d8e:	9709      	str	r7, [sp, #36]	; 0x24
 8003d90:	b100      	cbz	r0, 8003d94 <vlc_print+0x1e4>
 8003d92:	9208      	str	r2, [sp, #32]
 8003d94:	9b00      	ldr	r3, [sp, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <vlc_print+0x1ea>
 8003d98:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 8003d9a:	4bab      	ldr	r3, [pc, #684]	; (8004048 <vlc_print+0x498>)
            str = va_arg(vl, char*);
 8003d9c:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8003da0:	f1b9 0f00 	cmp.w	r9, #0
 8003da4:	bf08      	it	eq
 8003da6:	4699      	moveq	r9, r3
  int len = strlen(str);
 8003da8:	4648      	mov	r0, r9
 8003daa:	f7fc fa81 	bl	80002b0 <strlen>
  if (specifier->precision) {
 8003dae:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8003db0:	4606      	mov	r6, r0
  if (specifier->precision) {
 8003db2:	b113      	cbz	r3, 8003dba <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8003db4:	4298      	cmp	r0, r3
 8003db6:	bfa8      	it	ge
 8003db8:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8003dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003dbc:	f017 0702 	ands.w	r7, r7, #2
 8003dc0:	d015      	beq.n	8003dee <vlc_print+0x23e>
  int count = 0;
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8003dc6:	eba2 0309 	sub.w	r3, r2, r9
 8003dca:	429e      	cmp	r6, r3
 8003dcc:	dc11      	bgt.n	8003df2 <vlc_print+0x242>
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	bfa8      	it	ge
 8003dd2:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8003dd4:	b9ef      	cbnz	r7, 8003e12 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8003dd6:	44ab      	add	fp, r5
            break;
 8003dd8:	9a04      	ldr	r2, [sp, #16]
 8003dda:	e6f1      	b.n	8003bc0 <vlc_print+0x10>
      _WRITE_C(' ');
 8003ddc:	2120      	movs	r1, #32
 8003dde:	4640      	mov	r0, r8
 8003de0:	47d0      	blx	sl
 8003de2:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8003de4:	9a07      	ldr	r2, [sp, #28]
 8003de6:	19ab      	adds	r3, r5, r6
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dcf7      	bgt.n	8003ddc <vlc_print+0x22c>
 8003dec:	e7ea      	b.n	8003dc4 <vlc_print+0x214>
  int count = 0;
 8003dee:	463d      	mov	r5, r7
 8003df0:	e7f8      	b.n	8003de4 <vlc_print+0x234>
    _WRITE_C(*str++);
 8003df2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003df6:	9200      	str	r2, [sp, #0]
 8003df8:	4640      	mov	r0, r8
 8003dfa:	47d0      	blx	sl
 8003dfc:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 8003dfe:	e7e2      	b.n	8003dc6 <vlc_print+0x216>
      _WRITE_C(' ');
 8003e00:	2120      	movs	r1, #32
 8003e02:	4640      	mov	r0, r8
 8003e04:	47d0      	blx	sl
 8003e06:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8003e08:	9a07      	ldr	r2, [sp, #28]
 8003e0a:	1973      	adds	r3, r6, r5
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dcf7      	bgt.n	8003e00 <vlc_print+0x250>
 8003e10:	e7e1      	b.n	8003dd6 <vlc_print+0x226>
 8003e12:	1b76      	subs	r6, r6, r5
 8003e14:	e7f8      	b.n	8003e08 <vlc_print+0x258>
 8003e16:	b103      	cbz	r3, 8003e1a <vlc_print+0x26a>
 8003e18:	9709      	str	r7, [sp, #36]	; 0x24
 8003e1a:	b100      	cbz	r0, 8003e1e <vlc_print+0x26e>
 8003e1c:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8003e26:	2308      	movs	r3, #8
 8003e28:	9307      	str	r3, [sp, #28]
 8003e2a:	e784      	b.n	8003d36 <vlc_print+0x186>
 8003e2c:	b103      	cbz	r3, 8003e30 <vlc_print+0x280>
 8003e2e:	9709      	str	r7, [sp, #36]	; 0x24
 8003e30:	b100      	cbz	r0, 8003e34 <vlc_print+0x284>
 8003e32:	9208      	str	r2, [sp, #32]
 8003e34:	9b00      	ldr	r3, [sp, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <vlc_print+0x28a>
 8003e38:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8003e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8003e42:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8003e44:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 8003e46:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8003e48:	aa07      	add	r2, sp, #28
 8003e4a:	f7ff fe1c 	bl	8003a86 <_write_number>
            break;
 8003e4e:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 8003e50:	4483      	add	fp, r0
            break;
 8003e52:	e7c1      	b.n	8003dd8 <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 8003e54:	3407      	adds	r4, #7
 8003e56:	f024 0407 	bic.w	r4, r4, #7
 8003e5a:	4625      	mov	r5, r4
 8003e5c:	6861      	ldr	r1, [r4, #4]
 8003e5e:	f855 0b08 	ldr.w	r0, [r5], #8
 8003e62:	e7f1      	b.n	8003e48 <vlc_print+0x298>
 8003e64:	b103      	cbz	r3, 8003e68 <vlc_print+0x2b8>
 8003e66:	9709      	str	r7, [sp, #36]	; 0x24
 8003e68:	b100      	cbz	r0, 8003e6c <vlc_print+0x2bc>
 8003e6a:	9208      	str	r2, [sp, #32]
 8003e6c:	9b00      	ldr	r3, [sp, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <vlc_print+0x2c2>
 8003e70:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 8003e72:	3407      	adds	r4, #7
 8003e74:	f024 0407 	bic.w	r4, r4, #7
 8003e78:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8003e7c:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8003e7e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8003e82:	b90b      	cbnz	r3, 8003e88 <vlc_print+0x2d8>
              specifier.precision = 6;
 8003e84:	2306      	movs	r3, #6
 8003e86:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8003e88:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 8003e8a:	4f70      	ldr	r7, [pc, #448]	; (800404c <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 8003e8c:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8003e90:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8003e92:	45a9      	cmp	r9, r5
    mul *= 10;
 8003e94:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8003e98:	f2c0 80ac 	blt.w	8003ff4 <vlc_print+0x444>
  if (is_signed)
 8003e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f7fc fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f000 80ae 	beq.w	8004008 <vlc_print+0x458>
    number = -number;
 8003eac:	9b00      	ldr	r3, [sp, #0]
 8003eae:	9302      	str	r3, [sp, #8]
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003eb6:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8003eb8:	4632      	mov	r2, r6
 8003eba:	463b      	mov	r3, r7
 8003ebc:	4964      	ldr	r1, [pc, #400]	; (8004050 <vlc_print+0x4a0>)
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f7fc fce4 	bl	800088c <__aeabi_ddiv>
 8003ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ec8:	f7fc fa00 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 8003ecc:	4632      	mov	r2, r6
 8003ece:	463b      	mov	r3, r7
 8003ed0:	f7fc fbb2 	bl	8000638 <__aeabi_dmul>
 8003ed4:	f7fc fea0 	bl	8000c18 <__aeabi_d2ulz>
  uint32_t count = 0;
 8003ed8:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 8003eda:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8003edc:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 8003ede:	4691      	mov	r9, r2
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	220a      	movs	r2, #10
 8003ee4:	4648      	mov	r0, r9
 8003ee6:	9105      	str	r1, [sp, #20]
 8003ee8:	f7fc fe7e 	bl	8000be8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8003eec:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8003ef0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8003ef4:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8003ef6:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 8003efa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003efe:	446b      	add	r3, sp
 8003f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8003f04:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8003f08:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 8003f0a:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 8003f0c:	bf01      	itttt	eq
 8003f0e:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8003f12:	eb0d 0c03 	addeq.w	ip, sp, r3
 8003f16:	232e      	moveq	r3, #46	; 0x2e
 8003f18:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8003f1c:	bf18      	it	ne
 8003f1e:	461e      	movne	r6, r3
  } while (val);
 8003f20:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8003f22:	bf06      	itte	eq
 8003f24:	3f02      	subeq	r7, #2
      count++;
 8003f26:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 8003f28:	4667      	movne	r7, ip
  } while (val);
 8003f2a:	f1b9 0f0a 	cmp.w	r9, #10
 8003f2e:	f173 0900 	sbcs.w	r9, r3, #0
 8003f32:	d2d4      	bcs.n	8003ede <vlc_print+0x32e>
    buf[idx--] = '0';
 8003f34:	42ae      	cmp	r6, r5
 8003f36:	f1c5 0001 	rsb	r0, r5, #1
 8003f3a:	4430      	add	r0, r6
 8003f3c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8003f40:	bf88      	it	hi
 8003f42:	2001      	movhi	r0, #1
 8003f44:	eba5 0906 	sub.w	r9, r5, r6
 8003f48:	eb0d 0301 	add.w	r3, sp, r1
 8003f4c:	bf88      	it	hi
 8003f4e:	f04f 0900 	movhi.w	r9, #0
 8003f52:	4438      	add	r0, r7
 8003f54:	4418      	add	r0, r3
 8003f56:	464a      	mov	r2, r9
 8003f58:	f004 fc6d 	bl	8008836 <memset>
 8003f5c:	1b73      	subs	r3, r6, r5
 8003f5e:	42ae      	cmp	r6, r5
 8003f60:	bf88      	it	hi
 8003f62:	2300      	movhi	r3, #0
 8003f64:	444e      	add	r6, r9
  if (count == specifier->precision) {
 8003f66:	42b5      	cmp	r5, r6
 8003f68:	441f      	add	r7, r3
 8003f6a:	f105 0501 	add.w	r5, r5, #1
 8003f6e:	d107      	bne.n	8003f80 <vlc_print+0x3d0>
    buf[idx--] = '.';
 8003f70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f74:	446b      	add	r3, sp
 8003f76:	222e      	movs	r2, #46	; 0x2e
 8003f78:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003f7c:	462e      	mov	r6, r5
    buf[idx--] = '.';
 8003f7e:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 8003f80:	42b5      	cmp	r5, r6
 8003f82:	d107      	bne.n	8003f94 <vlc_print+0x3e4>
    buf[idx--] = '0';
 8003f84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f88:	446b      	add	r3, sp
 8003f8a:	2230      	movs	r2, #48	; 0x30
 8003f8c:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003f90:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8003f92:	3f01      	subs	r7, #1
  if (is_signed) {
 8003f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f7fc fdbe 	bl	8000b1c <__aeabi_dcmplt>
 8003fa0:	b138      	cbz	r0, 8003fb2 <vlc_print+0x402>
    buf[idx--] = '-';
 8003fa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003fa6:	446b      	add	r3, sp
 8003fa8:	222d      	movs	r2, #45	; 0x2d
 8003faa:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003fae:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8003fb0:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8003fb2:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8003fb4:	42ae      	cmp	r6, r5
 8003fb6:	f1c5 0001 	rsb	r0, r5, #1
 8003fba:	4430      	add	r0, r6
 8003fbc:	bf88      	it	hi
 8003fbe:	2001      	movhi	r0, #1
 8003fc0:	eba5 0906 	sub.w	r9, r5, r6
 8003fc4:	ab0c      	add	r3, sp, #48	; 0x30
 8003fc6:	bf88      	it	hi
 8003fc8:	f04f 0900 	movhi.w	r9, #0
 8003fcc:	4438      	add	r0, r7
 8003fce:	464a      	mov	r2, r9
 8003fd0:	4418      	add	r0, r3
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	f004 fc2f 	bl	8008836 <memset>
 8003fd8:	1b73      	subs	r3, r6, r5
 8003fda:	42ae      	cmp	r6, r5
 8003fdc:	bf88      	it	hi
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	443b      	add	r3, r7
 8003fe2:	aa0c      	add	r2, sp, #48	; 0x30
 8003fe4:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 8003fe6:	18d7      	adds	r7, r2, r3
 8003fe8:	4433      	add	r3, r6
 8003fea:	189d      	adds	r5, r3, r2
 8003fec:	42bd      	cmp	r5, r7
 8003fee:	d110      	bne.n	8004012 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8003ff0:	44b3      	add	fp, r6
            break;
 8003ff2:	e6f1      	b.n	8003dd8 <vlc_print+0x228>
    mul *= 10;
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <vlc_print+0x4a4>)
 8003ffa:	f7fc fb1d 	bl	8000638 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8003ffe:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004002:	4606      	mov	r6, r0
 8004004:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 8004006:	e744      	b.n	8003e92 <vlc_print+0x2e2>
 8004008:	ed9d 7b00 	vldr	d7, [sp]
 800400c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004010:	e752      	b.n	8003eb8 <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004012:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004016:	4640      	mov	r0, r8
 8004018:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 800401a:	e7e7      	b.n	8003fec <vlc_print+0x43c>
        if (!c)
 800401c:	f04f 0e01 	mov.w	lr, #1
 8004020:	e5ee      	b.n	8003c00 <vlc_print+0x50>
 8004022:	b103      	cbz	r3, 8004026 <vlc_print+0x476>
 8004024:	9709      	str	r7, [sp, #36]	; 0x24
 8004026:	b100      	cbz	r0, 800402a <vlc_print+0x47a>
 8004028:	9208      	str	r2, [sp, #32]
 800402a:	9b00      	ldr	r3, [sp, #0]
 800402c:	b103      	cbz	r3, 8004030 <vlc_print+0x480>
 800402e:	9607      	str	r6, [sp, #28]
              if (long_type)
 8004030:	f1bc 0f00 	cmp.w	ip, #0
 8004034:	f47f af0e 	bne.w	8003e54 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 8004038:	4625      	mov	r5, r4
 800403a:	4661      	mov	r1, ip
 800403c:	f855 0b04 	ldr.w	r0, [r5], #4
 8004040:	e702      	b.n	8003e48 <vlc_print+0x298>
        if (!c)
 8004042:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 8004046:	e5db      	b.n	8003c00 <vlc_print+0x50>
 8004048:	0800b4f4 	.word	0x0800b4f4
 800404c:	3ff00000 	.word	0x3ff00000
 8004050:	3fe00000 	.word	0x3fe00000
 8004054:	40240000 	.word	0x40240000

08004058 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004058:	f000 badc 	b.w	8004614 <ai_platform_network_get_error>

0800405c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800405c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800405e:	2305      	movs	r3, #5
 8004060:	2200      	movs	r2, #0
 8004062:	e9cd 3200 	strd	r3, r2, [sp]
 8004066:	4a03      	ldr	r2, [pc, #12]	; (8004074 <ai_network_create+0x18>)
 8004068:	2301      	movs	r3, #1
 800406a:	f000 fced 	bl	8004a48 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800406e:	b003      	add	sp, #12
 8004070:	f85d fb04 	ldr.w	pc, [sp], #4
 8004074:	200007a8 	.word	0x200007a8

08004078 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8004078:	b910      	cbnz	r0, 8004080 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800407a:	4802      	ldr	r0, [pc, #8]	; (8004084 <ai_network_inputs_get+0xc>)
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <ai_network_inputs_get+0x10>)
 800407e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004080:	f000 bb3c 	b.w	80046fc <ai_platform_inputs_get>
 8004084:	200007a8 	.word	0x200007a8
 8004088:	a1c00100 	.word	0xa1c00100

0800408c <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800408c:	b910      	cbnz	r0, 8004094 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800408e:	4802      	ldr	r0, [pc, #8]	; (8004098 <ai_network_outputs_get+0xc>)
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <ai_network_outputs_get+0x10>)
 8004092:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004094:	f000 bc08 	b.w	80048a8 <ai_platform_outputs_get>
 8004098:	200007a8 	.word	0x200007a8
 800409c:	a1c00100 	.word	0xa1c00100

080040a0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	4606      	mov	r6, r0
 80040a6:	460f      	mov	r7, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80040a8:	f000 fda4 	bl	8004bf4 <ai_platform_network_init>
  if (!net_ctx) return false;
 80040ac:	4604      	mov	r4, r0
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f000 80cf 	beq.w	8004252 <ai_network_init+0x1b2>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80040b4:	f8df 821c 	ldr.w	r8, [pc, #540]	; 80042d4 <ai_network_init+0x234>
 80040b8:	463a      	mov	r2, r7
 80040ba:	2101      	movs	r1, #1
 80040bc:	4640      	mov	r0, r8
 80040be:	f000 f9df 	bl	8004480 <ai_platform_get_weights_map>
 80040c2:	4605      	mov	r5, r0
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f000 80c6 	beq.w	8004256 <ai_network_init+0x1b6>
    dense_20_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <ai_network_init+0x1d0>)
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d2:	6013      	str	r3, [r2, #0]
    dense_20_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80040d4:	f8d8 3000 	ldr.w	r3, [r8]
    dense_20_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80040d8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_21_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <ai_network_init+0x1d4>)
 80040de:	6811      	ldr	r1, [r2, #0]
 80040e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80040e4:	6011      	str	r1, [r2, #0]
    dense_21_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 80040e6:	f103 0120 	add.w	r1, r3, #32
    dense_21_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 32);
 80040ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_21_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80040ee:	4a62      	ldr	r2, [pc, #392]	; (8004278 <ai_network_init+0x1d8>)
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80040f6:	6011      	str	r1, [r2, #0]
    dense_21_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 64);
 80040f8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    dense_21_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 64);
 80040fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004100:	4a5e      	ldr	r2, [pc, #376]	; (800427c <ai_network_init+0x1dc>)
 8004102:	6811      	ldr	r1, [r2, #0]
 8004104:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004108:	6011      	str	r1, [r2, #0]
    lstm_20_kernel_array.data = AI_PTR(g_network_weights_map[0] + 68);
 800410a:	f103 0144 	add.w	r1, r3, #68	; 0x44
    lstm_20_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 68);
 800410e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004112:	4a5b      	ldr	r2, [pc, #364]	; (8004280 <ai_network_init+0x1e0>)
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800411a:	6011      	str	r1, [r2, #0]
    lstm_20_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 1668);
 800411c:	f203 6184 	addw	r1, r3, #1668	; 0x684
    lstm_20_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 1668);
 8004120:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_peephole_array.format |= AI_FMT_FLAG_CONST;
 8004124:	4a57      	ldr	r2, [pc, #348]	; (8004284 <ai_network_init+0x1e4>)
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800412c:	6011      	str	r1, [r2, #0]
    lstm_20_peephole_array.data = AI_PTR(g_network_weights_map[0] + 41668);
 800412e:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 8004132:	31c4      	adds	r1, #196	; 0xc4
    lstm_20_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 41668);
 8004134:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8004138:	4a53      	ldr	r2, [pc, #332]	; (8004288 <ai_network_init+0x1e8>)
 800413a:	6811      	ldr	r1, [r2, #0]
 800413c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004140:	6011      	str	r1, [r2, #0]
    lstm_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 42268);
 8004142:	f503 4125 	add.w	r1, r3, #42240	; 0xa500
 8004146:	311c      	adds	r1, #28
    lstm_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 42268);
 8004148:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_kernel_array.format |= AI_FMT_FLAG_CONST;
 800414c:	4a4f      	ldr	r2, [pc, #316]	; (800428c <ai_network_init+0x1ec>)
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004154:	6011      	str	r1, [r2, #0]
    lstm_21_kernel_array.data = AI_PTR(g_network_weights_map[0] + 43068);
 8004156:	f503 4128 	add.w	r1, r3, #43008	; 0xa800
 800415a:	313c      	adds	r1, #60	; 0x3c
    lstm_21_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 43068);
 800415c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004160:	4a4b      	ldr	r2, [pc, #300]	; (8004290 <ai_network_init+0x1f0>)
 8004162:	6811      	ldr	r1, [r2, #0]
 8004164:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004168:	6011      	str	r1, [r2, #0]
    lstm_21_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 83068);
 800416a:	f503 31a2 	add.w	r1, r3, #82944	; 0x14400
 800416e:	317c      	adds	r1, #124	; 0x7c
    lstm_21_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 83068);
 8004170:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8004174:	4a47      	ldr	r2, [pc, #284]	; (8004294 <ai_network_init+0x1f4>)
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800417c:	6011      	str	r1, [r2, #0]
    lstm_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 123068);
 800417e:	f503 31f0 	add.w	r1, r3, #122880	; 0x1e000
 8004182:	31bc      	adds	r1, #188	; 0xbc
    lstm_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 123068);
 8004184:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004188:	4a43      	ldr	r2, [pc, #268]	; (8004298 <ai_network_init+0x1f8>)
 800418a:	6811      	ldr	r1, [r2, #0]
 800418c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004190:	6011      	str	r1, [r2, #0]
    lstm_22_kernel_array.data = AI_PTR(g_network_weights_map[0] + 123868);
 8004192:	f503 31f1 	add.w	r1, r3, #123392	; 0x1e200
 8004196:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
    lstm_22_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 123868);
 800419a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800419e:	4a3f      	ldr	r2, [pc, #252]	; (800429c <ai_network_init+0x1fc>)
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80041a6:	6011      	str	r1, [r2, #0]
    lstm_22_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 163868);
 80041a8:	f503 3120 	add.w	r1, r3, #163840	; 0x28000
 80041ac:	311c      	adds	r1, #28
    lstm_22_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 163868);
 80041ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80041b2:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <ai_network_init+0x200>)
 80041b4:	6811      	ldr	r1, [r2, #0]
    lstm_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 203868);
 80041b6:	f503 3347 	add.w	r3, r3, #203776	; 0x31c00
    lstm_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80041ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80041be:	6011      	str	r1, [r2, #0]
    lstm_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 203868);
 80041c0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    lstm_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 203868);
 80041c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80041c8:	4a36      	ldr	r2, [pc, #216]	; (80042a4 <ai_network_init+0x204>)
    dense_20_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 204668);
 80041ca:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80041ce:	6811      	ldr	r1, [r2, #0]
    dense_20_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 204668);
 80041d0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80041d4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80041d8:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80041da:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80042d8 <ai_network_init+0x238>
 80041de:	463a      	mov	r2, r7
 80041e0:	2101      	movs	r1, #1
 80041e2:	4640      	mov	r0, r8
 80041e4:	f000 f9a0 	bl	8004528 <ai_platform_get_activations_map>
 80041e8:	4607      	mov	r7, r0
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d039      	beq.n	8004262 <ai_network_init+0x1c2>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 80041ee:	f8d8 3000 	ldr.w	r3, [r8]
 80041f2:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <ai_network_init+0x208>)
    lstm_20_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 80041f4:	482d      	ldr	r0, [pc, #180]	; (80042ac <ai_network_init+0x20c>)
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 80041f6:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 192);
 80041fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 80041fe:	492c      	ldr	r1, [pc, #176]	; (80042b0 <ai_network_init+0x210>)
 8004200:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    lstm_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 8004204:	e9c1 2202 	strd	r2, r2, [r1, #8]
    lstm_20_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8004208:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
    lstm_20_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 800420c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    lstm_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 8004210:	4828      	ldr	r0, [pc, #160]	; (80042b4 <ai_network_init+0x214>)
    lstm_21_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 8004212:	e9c0 2202 	strd	r2, r2, [r0, #8]
    lstm_21_output0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004216:	4828      	ldr	r0, [pc, #160]	; (80042b8 <ai_network_init+0x218>)
    lstm_21_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004218:	e9c0 3302 	strd	r3, r3, [r0, #8]
    lstm_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 200);
 800421c:	4827      	ldr	r0, [pc, #156]	; (80042bc <ai_network_init+0x21c>)
    lstm_22_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 800421e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    lstm_22_output0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8004222:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <ai_network_init+0x220>)
    lstm_22_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 8004224:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_20_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004228:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <ai_network_init+0x224>)
    dense_20_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800422a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_20_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <ai_network_init+0x228>)
 8004230:	f103 0120 	add.w	r1, r3, #32
    dense_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 8004234:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_21_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <ai_network_init+0x22c>)
    dense_21_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800423a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_21_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <ai_network_init+0x230>)
 8004240:	3304      	adds	r3, #4
    dense_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8004242:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004246:	4630      	mov	r0, r6
 8004248:	f000 fdc2 	bl	8004dd0 <ai_platform_network_post_init>
 800424c:	4038      	ands	r0, r7
 800424e:	4005      	ands	r5, r0
 8004250:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004256:	2212      	movs	r2, #18
 8004258:	2130      	movs	r1, #48	; 0x30
 800425a:	4620      	mov	r0, r4
 800425c:	f000 fa48 	bl	80046f0 <ai_platform_network_set_error>
  return false;
 8004260:	e7bb      	b.n	80041da <ai_network_init+0x13a>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004262:	2213      	movs	r2, #19
 8004264:	2130      	movs	r1, #48	; 0x30
 8004266:	4620      	mov	r0, r4
 8004268:	f000 fa42 	bl	80046f0 <ai_platform_network_set_error>
  return false;
 800426c:	e7eb      	b.n	8004246 <ai_network_init+0x1a6>
 800426e:	bf00      	nop
 8004270:	200005ec 	.word	0x200005ec
 8004274:	2000074c 	.word	0x2000074c
 8004278:	200006d8 	.word	0x200006d8
 800427c:	20000868 	.word	0x20000868
 8004280:	20000930 	.word	0x20000930
 8004284:	20000904 	.word	0x20000904
 8004288:	2000083c 	.word	0x2000083c
 800428c:	200009b4 	.word	0x200009b4
 8004290:	20000a50 	.word	0x20000a50
 8004294:	20000988 	.word	0x20000988
 8004298:	20000ad4 	.word	0x20000ad4
 800429c:	20000b70 	.word	0x20000b70
 80042a0:	20000aa8 	.word	0x20000aa8
 80042a4:	20000660 	.word	0x20000660
 80042a8:	20000810 	.word	0x20000810
 80042ac:	200008d8 	.word	0x200008d8
 80042b0:	2000095c 	.word	0x2000095c
 80042b4:	20000a7c 	.word	0x20000a7c
 80042b8:	20000a24 	.word	0x20000a24
 80042bc:	20000b9c 	.word	0x20000b9c
 80042c0:	20000b44 	.word	0x20000b44
 80042c4:	20000634 	.word	0x20000634
 80042c8:	200006ac 	.word	0x200006ac
 80042cc:	20000720 	.word	0x20000720
 80042d0:	20000798 	.word	0x20000798
 80042d4:	20001728 	.word	0x20001728
 80042d8:	20001724 	.word	0x20001724

080042dc <ai_network_create_and_init>:
{
 80042dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042e0:	4688      	mov	r8, r1
 80042e2:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80042e4:	2100      	movs	r1, #0
{
 80042e6:	4606      	mov	r6, r0
 80042e8:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80042ea:	f7ff feb7 	bl	800405c <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 80042ee:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80042f2:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80042f4:	d107      	bne.n	8004306 <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 80042f6:	4668      	mov	r0, sp
 80042f8:	f000 f83a 	bl	8004370 <ai_network_data_params_get>
 80042fc:	b938      	cbnz	r0, 800430e <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80042fe:	6830      	ldr	r0, [r6, #0]
 8004300:	f000 f988 	bl	8004614 <ai_platform_network_get_error>
 8004304:	4604      	mov	r4, r0
}
 8004306:	4620      	mov	r0, r4
 8004308:	b00f      	add	sp, #60	; 0x3c
 800430a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800430e:	f1b8 0f00 	cmp.w	r8, #0
 8004312:	d11a      	bne.n	800434a <ai_network_create_and_init+0x6e>
    if (weights) {
 8004314:	bb3f      	cbnz	r7, 8004366 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8004316:	6830      	ldr	r0, [r6, #0]
 8004318:	4669      	mov	r1, sp
 800431a:	f7ff fec1 	bl	80040a0 <ai_network_init>
 800431e:	b928      	cbnz	r0, 800432c <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8004320:	6830      	ldr	r0, [r6, #0]
 8004322:	f000 f977 	bl	8004614 <ai_platform_network_get_error>
 8004326:	fa5f f980 	uxtb.w	r9, r0
 800432a:	4604      	mov	r4, r0
    return err;
 800432c:	f369 0407 	bfi	r4, r9, #0, #8
 8004330:	e7e9      	b.n	8004306 <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004332:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004336:	4629      	mov	r1, r5
 8004338:	a803      	add	r0, sp, #12
 800433a:	f000 f88d 	bl	8004458 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800433e:	3501      	adds	r5, #1
 8004340:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004344:	42ab      	cmp	r3, r5
 8004346:	dcf4      	bgt.n	8004332 <ai_network_create_and_init+0x56>
 8004348:	e7e4      	b.n	8004314 <ai_network_create_and_init+0x38>
 800434a:	464d      	mov	r5, r9
 800434c:	e7f8      	b.n	8004340 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800434e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8004352:	4629      	mov	r1, r5
 8004354:	a801      	add	r0, sp, #4
 8004356:	f000 f87f 	bl	8004458 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800435a:	3501      	adds	r5, #1
 800435c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004360:	42ab      	cmp	r3, r5
 8004362:	dcf4      	bgt.n	800434e <ai_network_create_and_init+0x72>
 8004364:	e7d7      	b.n	8004316 <ai_network_create_and_init+0x3a>
 8004366:	2500      	movs	r5, #0
 8004368:	e7f8      	b.n	800435c <ai_network_create_and_init+0x80>

0800436a <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800436a:	f000 bdb9 	b.w	8004ee0 <ai_platform_network_process>
	...

08004370 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004370:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004372:	4603      	mov	r3, r0
{
 8004374:	b085      	sub	sp, #20
  if (!params) return false;
 8004376:	b170      	cbz	r0, 8004396 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004378:	4c08      	ldr	r4, [pc, #32]	; (800439c <ai_network_data_params_get+0x2c>)
 800437a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800437e:	466a      	mov	r2, sp
 8004380:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004384:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004388:	ad02      	add	r5, sp, #8
 800438a:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800438e:	4629      	mov	r1, r5
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f91d 	bl	80045d0 <ai_platform_bind_network_params>
}
 8004396:	b005      	add	sp, #20
 8004398:	bd30      	pop	{r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	0800b324 	.word	0x0800b324

080043a0 <ai_version_get>:
 80043a0:	0212      	lsls	r2, r2, #8
 80043a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043a6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80043aa:	4770      	bx	lr

080043ac <get_tensor_byte_size>:
 80043ac:	b410      	push	{r4}
 80043ae:	6983      	ldr	r3, [r0, #24]
 80043b0:	68c4      	ldr	r4, [r0, #12]
 80043b2:	6941      	ldr	r1, [r0, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68e0      	ldr	r0, [r4, #12]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <get_tensor_byte_size+0x2c>)
 80043ba:	68c9      	ldr	r1, [r1, #12]
 80043bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80043c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043c8:	fb01 f000 	mul.w	r0, r1, r0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	bf04      	itt	eq
 80043d0:	3007      	addeq	r0, #7
 80043d2:	08c0      	lsreq	r0, r0, #3
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	000400c0 	.word	0x000400c0

080043dc <ai_buffer_get_size>:
 80043dc:	b378      	cbz	r0, 800443e <ai_buffer_get_size+0x62>
 80043de:	b410      	push	{r4}
 80043e0:	6803      	ldr	r3, [r0, #0]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <ai_buffer_get_size+0x64>)
 80043e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80043e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01e      	beq.n	800442e <ai_buffer_get_size+0x52>
 80043f0:	6984      	ldr	r4, [r0, #24]
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	7d03      	ldrb	r3, [r0, #20]
 80043f6:	6941      	ldr	r1, [r0, #20]
 80043f8:	f1a3 0301 	sub.w	r3, r3, #1
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004406:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800440a:	da0b      	bge.n	8004424 <ai_buffer_get_size+0x48>
 800440c:	2b01      	cmp	r3, #1
 800440e:	d102      	bne.n	8004416 <ai_buffer_get_size+0x3a>
 8004410:	2802      	cmp	r0, #2
 8004412:	d007      	beq.n	8004424 <ai_buffer_get_size+0x48>
 8004414:	2302      	movs	r3, #2
 8004416:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800441a:	3301      	adds	r3, #1
 800441c:	4298      	cmp	r0, r3
 800441e:	fb01 f202 	mul.w	r2, r1, r2
 8004422:	d1f3      	bne.n	800440c <ai_buffer_get_size+0x30>
 8004424:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	2900      	cmp	r1, #0
 8004430:	d0de      	beq.n	80043f0 <ai_buffer_get_size+0x14>
 8004432:	6984      	ldr	r4, [r0, #24]
 8004434:	6863      	ldr	r3, [r4, #4]
 8004436:	331f      	adds	r3, #31
 8004438:	f023 021f 	bic.w	r2, r3, #31
 800443c:	e7da      	b.n	80043f4 <ai_buffer_get_size+0x18>
 800443e:	4770      	bx	lr
 8004440:	000400c0 	.word	0x000400c0

08004444 <ai_buffer_array_sane>:
 8004444:	b138      	cbz	r0, 8004456 <ai_buffer_array_sane+0x12>
 8004446:	6843      	ldr	r3, [r0, #4]
 8004448:	b123      	cbz	r3, 8004454 <ai_buffer_array_sane+0x10>
 800444a:	8840      	ldrh	r0, [r0, #2]
 800444c:	3800      	subs	r0, #0
 800444e:	bf18      	it	ne
 8004450:	2001      	movne	r0, #1
 8004452:	4770      	bx	lr
 8004454:	4618      	mov	r0, r3
 8004456:	4770      	bx	lr

08004458 <ai_buffer_array_item_set_address>:
 8004458:	b150      	cbz	r0, 8004470 <ai_buffer_array_item_set_address+0x18>
 800445a:	6843      	ldr	r3, [r0, #4]
 800445c:	b14b      	cbz	r3, 8004472 <ai_buffer_array_item_set_address+0x1a>
 800445e:	8840      	ldrh	r0, [r0, #2]
 8004460:	b900      	cbnz	r0, 8004464 <ai_buffer_array_item_set_address+0xc>
 8004462:	4770      	bx	lr
 8004464:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004468:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800446c:	2001      	movs	r0, #1
 800446e:	604a      	str	r2, [r1, #4]
 8004470:	4770      	bx	lr
 8004472:	4618      	mov	r0, r3
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <_ai_platform_acquire_crc>:
 8004478:	2001      	movs	r0, #1
 800447a:	4770      	bx	lr

0800447c <_ai_platform_release_crc>:
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <ai_platform_get_weights_map>:
 8004480:	2a00      	cmp	r2, #0
 8004482:	d037      	beq.n	80044f4 <ai_platform_get_weights_map+0x74>
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	b1a0      	cbz	r0, 80044b4 <ai_platform_get_weights_map+0x34>
 800448a:	460f      	mov	r7, r1
 800448c:	b191      	cbz	r1, 80044b4 <ai_platform_get_weights_map+0x34>
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <ai_platform_get_weights_map+0xa4>)
 8004490:	6810      	ldr	r0, [r2, #0]
 8004492:	4298      	cmp	r0, r3
 8004494:	4615      	mov	r5, r2
 8004496:	d00f      	beq.n	80044b8 <ai_platform_get_weights_map+0x38>
 8004498:	6855      	ldr	r5, [r2, #4]
 800449a:	b15d      	cbz	r5, 80044b4 <ai_platform_get_weights_map+0x34>
 800449c:	682e      	ldr	r6, [r5, #0]
 800449e:	429e      	cmp	r6, r3
 80044a0:	d02a      	beq.n	80044f8 <ai_platform_get_weights_map+0x78>
 80044a2:	f1a1 0001 	sub.w	r0, r1, #1
 80044a6:	6025      	str	r5, [r4, #0]
 80044a8:	fab0 f080 	clz	r0, r0
 80044ac:	0940      	lsrs	r0, r0, #5
 80044ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b0:	42a7      	cmp	r7, r4
 80044b2:	d034      	beq.n	800451e <ai_platform_get_weights_map+0x9e>
 80044b4:	2000      	movs	r0, #0
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	1d10      	adds	r0, r2, #4
 80044ba:	f7ff ffc3 	bl	8004444 <ai_buffer_array_sane>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0f8      	beq.n	80044b4 <ai_platform_get_weights_map+0x34>
 80044c2:	88eb      	ldrh	r3, [r5, #6]
 80044c4:	429f      	cmp	r7, r3
 80044c6:	d1f5      	bne.n	80044b4 <ai_platform_get_weights_map+0x34>
 80044c8:	f04f 0e00 	mov.w	lr, #0
 80044cc:	1f23      	subs	r3, r4, #4
 80044ce:	4670      	mov	r0, lr
 80044d0:	68aa      	ldr	r2, [r5, #8]
 80044d2:	eb02 0c0e 	add.w	ip, r2, lr
 80044d6:	f10e 0e1c 	add.w	lr, lr, #28
 80044da:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80044de:	b124      	cbz	r4, 80044ea <ai_platform_get_weights_map+0x6a>
 80044e0:	3001      	adds	r0, #1
 80044e2:	4287      	cmp	r7, r0
 80044e4:	f843 4f04 	str.w	r4, [r3, #4]!
 80044e8:	d1f2      	bne.n	80044d0 <ai_platform_get_weights_map+0x50>
 80044ea:	1a38      	subs	r0, r7, r0
 80044ec:	fab0 f080 	clz	r0, r0
 80044f0:	0940      	lsrs	r0, r0, #5
 80044f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f4:	2000      	movs	r0, #0
 80044f6:	4770      	bx	lr
 80044f8:	1f23      	subs	r3, r4, #4
 80044fa:	4628      	mov	r0, r5
 80044fc:	2400      	movs	r4, #0
 80044fe:	e000      	b.n	8004502 <ai_platform_get_weights_map+0x82>
 8004500:	4614      	mov	r4, r2
 8004502:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004506:	42b2      	cmp	r2, r6
 8004508:	d0d2      	beq.n	80044b0 <ai_platform_get_weights_map+0x30>
 800450a:	f843 2f04 	str.w	r2, [r3, #4]!
 800450e:	1c62      	adds	r2, r4, #1
 8004510:	4297      	cmp	r7, r2
 8004512:	d1f5      	bne.n	8004500 <ai_platform_get_weights_map+0x80>
 8004514:	3402      	adds	r4, #2
 8004516:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800451a:	42b3      	cmp	r3, r6
 800451c:	d1ca      	bne.n	80044b4 <ai_platform_get_weights_map+0x34>
 800451e:	2001      	movs	r0, #1
 8004520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004522:	bf00      	nop
 8004524:	a1facade 	.word	0xa1facade

08004528 <ai_platform_get_activations_map>:
 8004528:	2a00      	cmp	r2, #0
 800452a:	d038      	beq.n	800459e <ai_platform_get_activations_map+0x76>
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	4604      	mov	r4, r0
 8004530:	b1a0      	cbz	r0, 800455c <ai_platform_get_activations_map+0x34>
 8004532:	460f      	mov	r7, r1
 8004534:	b191      	cbz	r1, 800455c <ai_platform_get_activations_map+0x34>
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <ai_platform_get_activations_map+0xa4>)
 8004538:	6810      	ldr	r0, [r2, #0]
 800453a:	4298      	cmp	r0, r3
 800453c:	4615      	mov	r5, r2
 800453e:	d00f      	beq.n	8004560 <ai_platform_get_activations_map+0x38>
 8004540:	6a15      	ldr	r5, [r2, #32]
 8004542:	b15d      	cbz	r5, 800455c <ai_platform_get_activations_map+0x34>
 8004544:	682e      	ldr	r6, [r5, #0]
 8004546:	429e      	cmp	r6, r3
 8004548:	d02b      	beq.n	80045a2 <ai_platform_get_activations_map+0x7a>
 800454a:	f1a1 0001 	sub.w	r0, r1, #1
 800454e:	6025      	str	r5, [r4, #0]
 8004550:	fab0 f080 	clz	r0, r0
 8004554:	0940      	lsrs	r0, r0, #5
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	42a7      	cmp	r7, r4
 800455a:	d035      	beq.n	80045c8 <ai_platform_get_activations_map+0xa0>
 800455c:	2000      	movs	r0, #0
 800455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004560:	f102 000c 	add.w	r0, r2, #12
 8004564:	f7ff ff6e 	bl	8004444 <ai_buffer_array_sane>
 8004568:	2800      	cmp	r0, #0
 800456a:	d0f7      	beq.n	800455c <ai_platform_get_activations_map+0x34>
 800456c:	89eb      	ldrh	r3, [r5, #14]
 800456e:	429f      	cmp	r7, r3
 8004570:	d1f4      	bne.n	800455c <ai_platform_get_activations_map+0x34>
 8004572:	f04f 0e00 	mov.w	lr, #0
 8004576:	1f23      	subs	r3, r4, #4
 8004578:	4670      	mov	r0, lr
 800457a:	692a      	ldr	r2, [r5, #16]
 800457c:	eb02 0c0e 	add.w	ip, r2, lr
 8004580:	f10e 0e1c 	add.w	lr, lr, #28
 8004584:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004588:	b124      	cbz	r4, 8004594 <ai_platform_get_activations_map+0x6c>
 800458a:	3001      	adds	r0, #1
 800458c:	4287      	cmp	r7, r0
 800458e:	f843 4f04 	str.w	r4, [r3, #4]!
 8004592:	d1f2      	bne.n	800457a <ai_platform_get_activations_map+0x52>
 8004594:	1a38      	subs	r0, r7, r0
 8004596:	fab0 f080 	clz	r0, r0
 800459a:	0940      	lsrs	r0, r0, #5
 800459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800459e:	2000      	movs	r0, #0
 80045a0:	4770      	bx	lr
 80045a2:	1f23      	subs	r3, r4, #4
 80045a4:	4628      	mov	r0, r5
 80045a6:	2400      	movs	r4, #0
 80045a8:	e000      	b.n	80045ac <ai_platform_get_activations_map+0x84>
 80045aa:	4614      	mov	r4, r2
 80045ac:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80045b0:	42b2      	cmp	r2, r6
 80045b2:	d0d1      	beq.n	8004558 <ai_platform_get_activations_map+0x30>
 80045b4:	f843 2f04 	str.w	r2, [r3, #4]!
 80045b8:	1c62      	adds	r2, r4, #1
 80045ba:	4297      	cmp	r7, r2
 80045bc:	d1f5      	bne.n	80045aa <ai_platform_get_activations_map+0x82>
 80045be:	3402      	adds	r4, #2
 80045c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80045c4:	42b3      	cmp	r3, r6
 80045c6:	d1c9      	bne.n	800455c <ai_platform_get_activations_map+0x34>
 80045c8:	2001      	movs	r0, #1
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	a1facade 	.word	0xa1facade

080045d0 <ai_platform_bind_network_params>:
 80045d0:	b1a0      	cbz	r0, 80045fc <ai_platform_bind_network_params+0x2c>
 80045d2:	b1b1      	cbz	r1, 8004602 <ai_platform_bind_network_params+0x32>
 80045d4:	b1c2      	cbz	r2, 8004608 <ai_platform_bind_network_params+0x38>
 80045d6:	b410      	push	{r4}
 80045d8:	4603      	mov	r3, r0
 80045da:	4c0d      	ldr	r4, [pc, #52]	; (8004610 <ai_platform_bind_network_params+0x40>)
 80045dc:	f843 4b04 	str.w	r4, [r3], #4
 80045e0:	f100 0c0c 	add.w	ip, r0, #12
 80045e4:	c903      	ldmia	r1, {r0, r1}
 80045e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80045ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 80045f2:	2301      	movs	r3, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	4603      	mov	r3, r0
 80045fe:	4618      	mov	r0, r3
 8004600:	4770      	bx	lr
 8004602:	460b      	mov	r3, r1
 8004604:	4618      	mov	r0, r3
 8004606:	4770      	bx	lr
 8004608:	4613      	mov	r3, r2
 800460a:	4618      	mov	r0, r3
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	a1facade 	.word	0xa1facade

08004614 <ai_platform_network_get_error>:
 8004614:	b510      	push	{r4, lr}
 8004616:	b1f0      	cbz	r0, 8004656 <ai_platform_network_get_error+0x42>
 8004618:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <ai_platform_network_get_error+0xc4>)
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	4604      	mov	r4, r0
 8004620:	d119      	bne.n	8004656 <ai_platform_network_get_error+0x42>
 8004622:	f7ff ff29 	bl	8004478 <_ai_platform_acquire_crc>
 8004626:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <ai_platform_network_get_error+0xc8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d03c      	beq.n	80046ae <ai_platform_network_get_error+0x9a>
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <ai_platform_network_get_error+0xcc>)
 8004636:	2301      	movs	r3, #1
 8004638:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800463c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1fb      	bne.n	800463c <ai_platform_network_get_error+0x28>
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <ai_platform_network_get_error+0xd0>)
 8004646:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800464a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <ai_platform_network_get_error+0xd4>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d038      	beq.n	80046c6 <ai_platform_network_get_error+0xb2>
 8004654:	e7fe      	b.n	8004654 <ai_platform_network_get_error+0x40>
 8004656:	f7ff ff0f 	bl	8004478 <_ai_platform_acquire_crc>
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <ai_platform_network_get_error+0xc8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d010      	beq.n	800468a <ai_platform_network_get_error+0x76>
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <ai_platform_network_get_error+0xcc>)
 800466a:	2301      	movs	r3, #1
 800466c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004670:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1fb      	bne.n	8004670 <ai_platform_network_get_error+0x5c>
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <ai_platform_network_get_error+0xd0>)
 800467a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800467e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004682:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <ai_platform_network_get_error+0xd4>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d00d      	beq.n	80046a4 <ai_platform_network_get_error+0x90>
 8004688:	e7fe      	b.n	8004688 <ai_platform_network_get_error+0x74>
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <ai_platform_network_get_error+0xd8>)
 800468c:	2301      	movs	r3, #1
 800468e:	6093      	str	r3, [r2, #8]
 8004690:	6893      	ldr	r3, [r2, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1fc      	bne.n	8004690 <ai_platform_network_get_error+0x7c>
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <ai_platform_network_get_error+0xd0>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <ai_platform_network_get_error+0xd4>)
 800469e:	429a      	cmp	r2, r3
 80046a0:	d000      	beq.n	80046a4 <ai_platform_network_get_error+0x90>
 80046a2:	e7fe      	b.n	80046a2 <ai_platform_network_get_error+0x8e>
 80046a4:	f7ff feea 	bl	800447c <_ai_platform_release_crc>
 80046a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <ai_platform_network_get_error+0xd8>)
 80046b0:	2301      	movs	r3, #1
 80046b2:	6093      	str	r3, [r2, #8]
 80046b4:	6893      	ldr	r3, [r2, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1fc      	bne.n	80046b4 <ai_platform_network_get_error+0xa0>
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <ai_platform_network_get_error+0xd0>)
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <ai_platform_network_get_error+0xd4>)
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d107      	bne.n	80046d6 <ai_platform_network_get_error+0xc2>
 80046c6:	f7ff fed9 	bl	800447c <_ai_platform_release_crc>
 80046ca:	f104 0010 	add.w	r0, r4, #16
 80046ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d2:	f000 be8b 	b.w	80053ec <core_get_error>
 80046d6:	e7fe      	b.n	80046d6 <ai_platform_network_get_error+0xc2>
 80046d8:	a1c00100 	.word	0xa1c00100
 80046dc:	e0042000 	.word	0xe0042000
 80046e0:	58024000 	.word	0x58024000
 80046e4:	f407a5c2 	.word	0xf407a5c2
 80046e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80046ec:	40023000 	.word	0x40023000

080046f0 <ai_platform_network_set_error>:
 80046f0:	b110      	cbz	r0, 80046f8 <ai_platform_network_set_error+0x8>
 80046f2:	3010      	adds	r0, #16
 80046f4:	f000 be80 	b.w	80053f8 <core_set_error>
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop

080046fc <ai_platform_inputs_get>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	b085      	sub	sp, #20
 8004702:	9102      	str	r1, [sp, #8]
 8004704:	b1f0      	cbz	r0, 8004744 <ai_platform_inputs_get+0x48>
 8004706:	4b62      	ldr	r3, [pc, #392]	; (8004890 <ai_platform_inputs_get+0x194>)
 8004708:	6802      	ldr	r2, [r0, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	4607      	mov	r7, r0
 800470e:	d119      	bne.n	8004744 <ai_platform_inputs_get+0x48>
 8004710:	f7ff feb2 	bl	8004478 <_ai_platform_acquire_crc>
 8004714:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <ai_platform_inputs_get+0x198>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d03d      	beq.n	800479e <ai_platform_inputs_get+0xa2>
 8004722:	4a5d      	ldr	r2, [pc, #372]	; (8004898 <ai_platform_inputs_get+0x19c>)
 8004724:	2301      	movs	r3, #1
 8004726:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800472a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1fb      	bne.n	800472a <ai_platform_inputs_get+0x2e>
 8004732:	4b5a      	ldr	r3, [pc, #360]	; (800489c <ai_platform_inputs_get+0x1a0>)
 8004734:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004738:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800473c:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <ai_platform_inputs_get+0x1a4>)
 800473e:	429a      	cmp	r2, r3
 8004740:	d039      	beq.n	80047b6 <ai_platform_inputs_get+0xba>
 8004742:	e7fe      	b.n	8004742 <ai_platform_inputs_get+0x46>
 8004744:	f7ff fe98 	bl	8004478 <_ai_platform_acquire_crc>
 8004748:	4b52      	ldr	r3, [pc, #328]	; (8004894 <ai_platform_inputs_get+0x198>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d010      	beq.n	8004778 <ai_platform_inputs_get+0x7c>
 8004756:	4a50      	ldr	r2, [pc, #320]	; (8004898 <ai_platform_inputs_get+0x19c>)
 8004758:	2301      	movs	r3, #1
 800475a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800475e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1fb      	bne.n	800475e <ai_platform_inputs_get+0x62>
 8004766:	4b4d      	ldr	r3, [pc, #308]	; (800489c <ai_platform_inputs_get+0x1a0>)
 8004768:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800476c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004770:	4b4b      	ldr	r3, [pc, #300]	; (80048a0 <ai_platform_inputs_get+0x1a4>)
 8004772:	429a      	cmp	r2, r3
 8004774:	d00d      	beq.n	8004792 <ai_platform_inputs_get+0x96>
 8004776:	e7fe      	b.n	8004776 <ai_platform_inputs_get+0x7a>
 8004778:	4a4a      	ldr	r2, [pc, #296]	; (80048a4 <ai_platform_inputs_get+0x1a8>)
 800477a:	2301      	movs	r3, #1
 800477c:	6093      	str	r3, [r2, #8]
 800477e:	6893      	ldr	r3, [r2, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1fc      	bne.n	800477e <ai_platform_inputs_get+0x82>
 8004784:	4b45      	ldr	r3, [pc, #276]	; (800489c <ai_platform_inputs_get+0x1a0>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <ai_platform_inputs_get+0x1a4>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d000      	beq.n	8004792 <ai_platform_inputs_get+0x96>
 8004790:	e7fe      	b.n	8004790 <ai_platform_inputs_get+0x94>
 8004792:	f7ff fe73 	bl	800447c <_ai_platform_release_crc>
 8004796:	2000      	movs	r0, #0
 8004798:	b005      	add	sp, #20
 800479a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479e:	4a41      	ldr	r2, [pc, #260]	; (80048a4 <ai_platform_inputs_get+0x1a8>)
 80047a0:	2301      	movs	r3, #1
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	6893      	ldr	r3, [r2, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1fc      	bne.n	80047a4 <ai_platform_inputs_get+0xa8>
 80047aa:	4b3c      	ldr	r3, [pc, #240]	; (800489c <ai_platform_inputs_get+0x1a0>)
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <ai_platform_inputs_get+0x1a4>)
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d155      	bne.n	8004862 <ai_platform_inputs_get+0x166>
 80047b6:	f7ff fe61 	bl	800447c <_ai_platform_release_crc>
 80047ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d051      	beq.n	8004864 <ai_platform_inputs_get+0x168>
 80047c0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80047c4:	f1ba 0f00 	cmp.w	sl, #0
 80047c8:	d04c      	beq.n	8004864 <ai_platform_inputs_get+0x168>
 80047ca:	f04f 0b00 	mov.w	fp, #0
 80047ce:	465d      	mov	r5, fp
 80047d0:	9703      	str	r7, [sp, #12]
 80047d2:	e016      	b.n	8004802 <ai_platform_inputs_get+0x106>
 80047d4:	9901      	ldr	r1, [sp, #4]
 80047d6:	2301      	movs	r3, #1
 80047d8:	507b      	str	r3, [r7, r1]
 80047da:	69b1      	ldr	r1, [r6, #24]
 80047dc:	6849      	ldr	r1, [r1, #4]
 80047de:	6121      	str	r1, [r4, #16]
 80047e0:	f04f 0301 	mov.w	r3, #1
 80047e4:	7523      	strb	r3, [r4, #20]
 80047e6:	e9c4 c200 	strd	ip, r2, [r4]
 80047ea:	6962      	ldr	r2, [r4, #20]
 80047ec:	60a0      	str	r0, [r4, #8]
 80047ee:	2300      	movs	r3, #0
 80047f0:	f369 221f 	bfi	r2, r9, #8, #24
 80047f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80047f8:	60e3      	str	r3, [r4, #12]
 80047fa:	3501      	adds	r5, #1
 80047fc:	f10b 0b1c 	add.w	fp, fp, #28
 8004800:	6162      	str	r2, [r4, #20]
 8004802:	f8ba 3000 	ldrh.w	r3, [sl]
 8004806:	42ab      	cmp	r3, r5
 8004808:	b2aa      	uxth	r2, r5
 800480a:	d93a      	bls.n	8004882 <ai_platform_inputs_get+0x186>
 800480c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004810:	00e9      	lsls	r1, r5, #3
 8004812:	9101      	str	r1, [sp, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d034      	beq.n	8004882 <ai_platform_inputs_get+0x186>
 8004818:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800481c:	2e00      	cmp	r6, #0
 800481e:	d030      	beq.n	8004882 <ai_platform_inputs_get+0x186>
 8004820:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004824:	69b2      	ldr	r2, [r6, #24]
 8004826:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800482a:	6810      	ldr	r0, [r2, #0]
 800482c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004830:	68b3      	ldr	r3, [r6, #8]
 8004832:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004836:	f003 f8e9 	bl	8007a0c <ai_array_to_buffer_fmt>
 800483a:	69b1      	ldr	r1, [r6, #24]
 800483c:	4684      	mov	ip, r0
 800483e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004842:	688a      	ldr	r2, [r1, #8]
 8004844:	445c      	add	r4, fp
 8004846:	2800      	cmp	r0, #0
 8004848:	d0c8      	beq.n	80047dc <ai_platform_inputs_get+0xe0>
 800484a:	2100      	movs	r1, #0
 800484c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004850:	6831      	ldr	r1, [r6, #0]
 8004852:	6041      	str	r1, [r0, #4]
 8004854:	b111      	cbz	r1, 800485c <ai_platform_inputs_get+0x160>
 8004856:	8849      	ldrh	r1, [r1, #2]
 8004858:	2900      	cmp	r1, #0
 800485a:	d1bb      	bne.n	80047d4 <ai_platform_inputs_get+0xd8>
 800485c:	69b1      	ldr	r1, [r6, #24]
 800485e:	2000      	movs	r0, #0
 8004860:	e7bc      	b.n	80047dc <ai_platform_inputs_get+0xe0>
 8004862:	e7fe      	b.n	8004862 <ai_platform_inputs_get+0x166>
 8004864:	2218      	movs	r2, #24
 8004866:	2111      	movs	r1, #17
 8004868:	f107 0010 	add.w	r0, r7, #16
 800486c:	f000 fdc4 	bl	80053f8 <core_set_error>
 8004870:	2200      	movs	r2, #0
 8004872:	4610      	mov	r0, r2
 8004874:	9b02      	ldr	r3, [sp, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d08e      	beq.n	8004798 <ai_platform_inputs_get+0x9c>
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	b005      	add	sp, #20
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	9f03      	ldr	r7, [sp, #12]
 8004884:	2a00      	cmp	r2, #0
 8004886:	d0ed      	beq.n	8004864 <ai_platform_inputs_get+0x168>
 8004888:	f8da 3008 	ldr.w	r3, [sl, #8]
 800488c:	6858      	ldr	r0, [r3, #4]
 800488e:	e7f1      	b.n	8004874 <ai_platform_inputs_get+0x178>
 8004890:	a1c00100 	.word	0xa1c00100
 8004894:	e0042000 	.word	0xe0042000
 8004898:	58024000 	.word	0x58024000
 800489c:	f407a5c2 	.word	0xf407a5c2
 80048a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80048a4:	40023000 	.word	0x40023000

080048a8 <ai_platform_outputs_get>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	b085      	sub	sp, #20
 80048ae:	9102      	str	r1, [sp, #8]
 80048b0:	b1f0      	cbz	r0, 80048f0 <ai_platform_outputs_get+0x48>
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <ai_platform_outputs_get+0x188>)
 80048b4:	6802      	ldr	r2, [r0, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	4607      	mov	r7, r0
 80048ba:	d119      	bne.n	80048f0 <ai_platform_outputs_get+0x48>
 80048bc:	f7ff fddc 	bl	8004478 <_ai_platform_acquire_crc>
 80048c0:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <ai_platform_outputs_get+0x18c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d03d      	beq.n	800494a <ai_platform_outputs_get+0xa2>
 80048ce:	4a5a      	ldr	r2, [pc, #360]	; (8004a38 <ai_platform_outputs_get+0x190>)
 80048d0:	2301      	movs	r3, #1
 80048d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80048d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1fb      	bne.n	80048d6 <ai_platform_outputs_get+0x2e>
 80048de:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <ai_platform_outputs_get+0x194>)
 80048e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80048e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80048e8:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <ai_platform_outputs_get+0x198>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d039      	beq.n	8004962 <ai_platform_outputs_get+0xba>
 80048ee:	e7fe      	b.n	80048ee <ai_platform_outputs_get+0x46>
 80048f0:	f7ff fdc2 	bl	8004478 <_ai_platform_acquire_crc>
 80048f4:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <ai_platform_outputs_get+0x18c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d010      	beq.n	8004924 <ai_platform_outputs_get+0x7c>
 8004902:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <ai_platform_outputs_get+0x190>)
 8004904:	2301      	movs	r3, #1
 8004906:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800490a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1fb      	bne.n	800490a <ai_platform_outputs_get+0x62>
 8004912:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <ai_platform_outputs_get+0x194>)
 8004914:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004918:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <ai_platform_outputs_get+0x198>)
 800491e:	429a      	cmp	r2, r3
 8004920:	d00d      	beq.n	800493e <ai_platform_outputs_get+0x96>
 8004922:	e7fe      	b.n	8004922 <ai_platform_outputs_get+0x7a>
 8004924:	4a47      	ldr	r2, [pc, #284]	; (8004a44 <ai_platform_outputs_get+0x19c>)
 8004926:	2301      	movs	r3, #1
 8004928:	6093      	str	r3, [r2, #8]
 800492a:	6893      	ldr	r3, [r2, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1fc      	bne.n	800492a <ai_platform_outputs_get+0x82>
 8004930:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <ai_platform_outputs_get+0x194>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <ai_platform_outputs_get+0x198>)
 8004938:	429a      	cmp	r2, r3
 800493a:	d000      	beq.n	800493e <ai_platform_outputs_get+0x96>
 800493c:	e7fe      	b.n	800493c <ai_platform_outputs_get+0x94>
 800493e:	f7ff fd9d 	bl	800447c <_ai_platform_release_crc>
 8004942:	2000      	movs	r0, #0
 8004944:	b005      	add	sp, #20
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <ai_platform_outputs_get+0x19c>)
 800494c:	2301      	movs	r3, #1
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1fc      	bne.n	8004950 <ai_platform_outputs_get+0xa8>
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <ai_platform_outputs_get+0x194>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <ai_platform_outputs_get+0x198>)
 800495e:	429a      	cmp	r2, r3
 8004960:	d150      	bne.n	8004a04 <ai_platform_outputs_get+0x15c>
 8004962:	f7ff fd8b 	bl	800447c <_ai_platform_release_crc>
 8004966:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d958      	bls.n	8004a1e <ai_platform_outputs_get+0x176>
 800496c:	f04f 0b00 	mov.w	fp, #0
 8004970:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004974:	9703      	str	r7, [sp, #12]
 8004976:	465d      	mov	r5, fp
 8004978:	e016      	b.n	80049a8 <ai_platform_outputs_get+0x100>
 800497a:	9901      	ldr	r1, [sp, #4]
 800497c:	2301      	movs	r3, #1
 800497e:	507b      	str	r3, [r7, r1]
 8004980:	69b1      	ldr	r1, [r6, #24]
 8004982:	6849      	ldr	r1, [r1, #4]
 8004984:	6121      	str	r1, [r4, #16]
 8004986:	f04f 0301 	mov.w	r3, #1
 800498a:	7523      	strb	r3, [r4, #20]
 800498c:	e9c4 c200 	strd	ip, r2, [r4]
 8004990:	6962      	ldr	r2, [r4, #20]
 8004992:	60a0      	str	r0, [r4, #8]
 8004994:	2300      	movs	r3, #0
 8004996:	f369 221f 	bfi	r2, r9, #8, #24
 800499a:	f8c4 8018 	str.w	r8, [r4, #24]
 800499e:	60e3      	str	r3, [r4, #12]
 80049a0:	3501      	adds	r5, #1
 80049a2:	f10b 0b1c 	add.w	fp, fp, #28
 80049a6:	6162      	str	r2, [r4, #20]
 80049a8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	b2aa      	uxth	r2, r5
 80049b0:	d929      	bls.n	8004a06 <ai_platform_outputs_get+0x15e>
 80049b2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80049b6:	00e9      	lsls	r1, r5, #3
 80049b8:	9101      	str	r1, [sp, #4]
 80049ba:	b323      	cbz	r3, 8004a06 <ai_platform_outputs_get+0x15e>
 80049bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80049c0:	b30e      	cbz	r6, 8004a06 <ai_platform_outputs_get+0x15e>
 80049c2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80049c6:	69b2      	ldr	r2, [r6, #24]
 80049c8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80049cc:	6810      	ldr	r0, [r2, #0]
 80049ce:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80049d2:	68b3      	ldr	r3, [r6, #8]
 80049d4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80049d8:	f003 f818 	bl	8007a0c <ai_array_to_buffer_fmt>
 80049dc:	69b1      	ldr	r1, [r6, #24]
 80049de:	4684      	mov	ip, r0
 80049e0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80049e4:	688a      	ldr	r2, [r1, #8]
 80049e6:	445c      	add	r4, fp
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d0ca      	beq.n	8004982 <ai_platform_outputs_get+0xda>
 80049ec:	2100      	movs	r1, #0
 80049ee:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80049f2:	6831      	ldr	r1, [r6, #0]
 80049f4:	6041      	str	r1, [r0, #4]
 80049f6:	b111      	cbz	r1, 80049fe <ai_platform_outputs_get+0x156>
 80049f8:	8849      	ldrh	r1, [r1, #2]
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d1bd      	bne.n	800497a <ai_platform_outputs_get+0xd2>
 80049fe:	69b1      	ldr	r1, [r6, #24]
 8004a00:	2000      	movs	r0, #0
 8004a02:	e7be      	b.n	8004982 <ai_platform_outputs_get+0xda>
 8004a04:	e7fe      	b.n	8004a04 <ai_platform_outputs_get+0x15c>
 8004a06:	9f03      	ldr	r7, [sp, #12]
 8004a08:	b14a      	cbz	r2, 8004a1e <ai_platform_outputs_get+0x176>
 8004a0a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004a0e:	6858      	ldr	r0, [r3, #4]
 8004a10:	9b02      	ldr	r3, [sp, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d096      	beq.n	8004944 <ai_platform_outputs_get+0x9c>
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	b005      	add	sp, #20
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	2218      	movs	r2, #24
 8004a20:	2111      	movs	r1, #17
 8004a22:	f107 0010 	add.w	r0, r7, #16
 8004a26:	f000 fce7 	bl	80053f8 <core_set_error>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	e7ef      	b.n	8004a10 <ai_platform_outputs_get+0x168>
 8004a30:	a1c00100 	.word	0xa1c00100
 8004a34:	e0042000 	.word	0xe0042000
 8004a38:	58024000 	.word	0x58024000
 8004a3c:	f407a5c2 	.word	0xf407a5c2
 8004a40:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a44:	40023000 	.word	0x40023000

08004a48 <ai_platform_network_create>:
 8004a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	4606      	mov	r6, r0
 8004a50:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004a54:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004a58:	4615      	mov	r5, r2
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	f7ff fd0c 	bl	8004478 <_ai_platform_acquire_crc>
 8004a60:	b188      	cbz	r0, 8004a86 <ai_platform_network_create+0x3e>
 8004a62:	4a5d      	ldr	r2, [pc, #372]	; (8004bd8 <ai_platform_network_create+0x190>)
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a6a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004a6e:	4603      	mov	r3, r0
 8004a70:	d00e      	beq.n	8004a90 <ai_platform_network_create+0x48>
 8004a72:	4a5a      	ldr	r2, [pc, #360]	; (8004bdc <ai_platform_network_create+0x194>)
 8004a74:	2118      	movs	r1, #24
 8004a76:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004a7a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004a7e:	2918      	cmp	r1, #24
 8004a80:	d018      	beq.n	8004ab4 <ai_platform_network_create+0x6c>
 8004a82:	f7ff fcfb 	bl	800447c <_ai_platform_release_crc>
 8004a86:	f244 1033 	movw	r0, #16691	; 0x4133
 8004a8a:	b003      	add	sp, #12
 8004a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a90:	4a53      	ldr	r2, [pc, #332]	; (8004be0 <ai_platform_network_create+0x198>)
 8004a92:	2101      	movs	r1, #1
 8004a94:	6091      	str	r1, [r2, #8]
 8004a96:	2114      	movs	r1, #20
 8004a98:	e001      	b.n	8004a9e <ai_platform_network_create+0x56>
 8004a9a:	3901      	subs	r1, #1
 8004a9c:	d002      	beq.n	8004aa4 <ai_platform_network_create+0x5c>
 8004a9e:	6894      	ldr	r4, [r2, #8]
 8004aa0:	2c00      	cmp	r4, #0
 8004aa2:	d1fa      	bne.n	8004a9a <ai_platform_network_create+0x52>
 8004aa4:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <ai_platform_network_create+0x198>)
 8004aa6:	6891      	ldr	r1, [r2, #8]
 8004aa8:	b911      	cbnz	r1, 8004ab0 <ai_platform_network_create+0x68>
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	3201      	adds	r2, #1
 8004aae:	d008      	beq.n	8004ac2 <ai_platform_network_create+0x7a>
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	e7e6      	b.n	8004a82 <ai_platform_network_create+0x3a>
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004aba:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	d1fb      	bne.n	8004aba <ai_platform_network_create+0x72>
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fcda 	bl	800447c <_ai_platform_release_crc>
 8004ac8:	f7ff fcd6 	bl	8004478 <_ai_platform_acquire_crc>
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <ai_platform_network_create+0x190>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d010      	beq.n	8004afc <ai_platform_network_create+0xb4>
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <ai_platform_network_create+0x194>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004ae2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d1fb      	bne.n	8004ae2 <ai_platform_network_create+0x9a>
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <ai_platform_network_create+0x19c>)
 8004aec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004af0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004af4:	4b3c      	ldr	r3, [pc, #240]	; (8004be8 <ai_platform_network_create+0x1a0>)
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d00c      	beq.n	8004b14 <ai_platform_network_create+0xcc>
 8004afa:	e7fe      	b.n	8004afa <ai_platform_network_create+0xb2>
 8004afc:	4a38      	ldr	r2, [pc, #224]	; (8004be0 <ai_platform_network_create+0x198>)
 8004afe:	2301      	movs	r3, #1
 8004b00:	6093      	str	r3, [r2, #8]
 8004b02:	6893      	ldr	r3, [r2, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1fc      	bne.n	8004b02 <ai_platform_network_create+0xba>
 8004b08:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <ai_platform_network_create+0x19c>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <ai_platform_network_create+0x1a0>)
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d122      	bne.n	8004b5a <ai_platform_network_create+0x112>
 8004b14:	f7ff fcb2 	bl	800447c <_ai_platform_release_crc>
 8004b18:	b38e      	cbz	r6, 8004b7e <ai_platform_network_create+0x136>
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <ai_platform_network_create+0x1a4>)
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	6035      	str	r5, [r6, #0]
 8004b20:	f000 fc62 	bl	80053e8 <core_init>
 8004b24:	b1d0      	cbz	r0, 8004b5c <ai_platform_network_create+0x114>
 8004b26:	f7ff fca7 	bl	8004478 <_ai_platform_acquire_crc>
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <ai_platform_network_create+0x190>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b36:	d025      	beq.n	8004b84 <ai_platform_network_create+0x13c>
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <ai_platform_network_create+0x194>)
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1fb      	bne.n	8004b40 <ai_platform_network_create+0xf8>
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <ai_platform_network_create+0x19c>)
 8004b4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b52:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <ai_platform_network_create+0x1a0>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d022      	beq.n	8004b9e <ai_platform_network_create+0x156>
 8004b58:	e7fe      	b.n	8004b58 <ai_platform_network_create+0x110>
 8004b5a:	e7fe      	b.n	8004b5a <ai_platform_network_create+0x112>
 8004b5c:	2430      	movs	r4, #48	; 0x30
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	2610      	movs	r6, #16
 8004b64:	464a      	mov	r2, r9
 8004b66:	4641      	mov	r1, r8
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff fc19 	bl	80043a0 <ai_version_get>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2000      	movs	r0, #0
 8004b72:	f364 0007 	bfi	r0, r4, #0, #8
 8004b76:	64ab      	str	r3, [r5, #72]	; 0x48
 8004b78:	f366 201f 	bfi	r0, r6, #8, #24
 8004b7c:	e785      	b.n	8004a8a <ai_platform_network_create+0x42>
 8004b7e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004b82:	e782      	b.n	8004a8a <ai_platform_network_create+0x42>
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <ai_platform_network_create+0x198>)
 8004b86:	2301      	movs	r3, #1
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	6893      	ldr	r3, [r2, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1fc      	bne.n	8004b8a <ai_platform_network_create+0x142>
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <ai_platform_network_create+0x19c>)
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <ai_platform_network_create+0x1a0>)
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d000      	beq.n	8004b9e <ai_platform_network_create+0x156>
 8004b9c:	e7fe      	b.n	8004b9c <ai_platform_network_create+0x154>
 8004b9e:	f7ff fc6d 	bl	800447c <_ai_platform_release_crc>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff fbfa 	bl	80043a0 <ai_version_get>
 8004bac:	2200      	movs	r2, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	2105      	movs	r1, #5
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	f7ff fbf4 	bl	80043a0 <ai_version_get>
 8004bb8:	4284      	cmp	r4, r0
 8004bba:	d001      	beq.n	8004bc0 <ai_platform_network_create+0x178>
 8004bbc:	2401      	movs	r4, #1
 8004bbe:	e7ce      	b.n	8004b5e <ai_platform_network_create+0x116>
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <ai_platform_network_create+0x1a8>)
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	a801      	add	r0, sp, #4
 8004bc6:	f000 fc23 	bl	8005410 <ai_check_custom_types>
 8004bca:	b110      	cbz	r0, 8004bd2 <ai_platform_network_create+0x18a>
 8004bcc:	2600      	movs	r6, #0
 8004bce:	4634      	mov	r4, r6
 8004bd0:	e7c8      	b.n	8004b64 <ai_platform_network_create+0x11c>
 8004bd2:	2402      	movs	r4, #2
 8004bd4:	e7c3      	b.n	8004b5e <ai_platform_network_create+0x116>
 8004bd6:	bf00      	nop
 8004bd8:	e0042000 	.word	0xe0042000
 8004bdc:	58024000 	.word	0x58024000
 8004be0:	40023000 	.word	0x40023000
 8004be4:	f407a5c2 	.word	0xf407a5c2
 8004be8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bec:	a1c00100 	.word	0xa1c00100
 8004bf0:	84048403 	.word	0x84048403

08004bf4 <ai_platform_network_init>:
 8004bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	b1f8      	cbz	r0, 8004c3a <ai_platform_network_init+0x46>
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	; (8004db4 <ai_platform_network_init+0x1c0>)
 8004bfc:	6802      	ldr	r2, [r0, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	4604      	mov	r4, r0
 8004c02:	d11a      	bne.n	8004c3a <ai_platform_network_init+0x46>
 8004c04:	460e      	mov	r6, r1
 8004c06:	f7ff fc37 	bl	8004478 <_ai_platform_acquire_crc>
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <ai_platform_network_init+0x1c4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d03d      	beq.n	8004c94 <ai_platform_network_init+0xa0>
 8004c18:	4a68      	ldr	r2, [pc, #416]	; (8004dbc <ai_platform_network_init+0x1c8>)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1fb      	bne.n	8004c20 <ai_platform_network_init+0x2c>
 8004c28:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <ai_platform_network_init+0x1cc>)
 8004c2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c32:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <ai_platform_network_init+0x1d0>)
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d039      	beq.n	8004cac <ai_platform_network_init+0xb8>
 8004c38:	e7fe      	b.n	8004c38 <ai_platform_network_init+0x44>
 8004c3a:	f7ff fc1d 	bl	8004478 <_ai_platform_acquire_crc>
 8004c3e:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <ai_platform_network_init+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4a:	d010      	beq.n	8004c6e <ai_platform_network_init+0x7a>
 8004c4c:	4a5b      	ldr	r2, [pc, #364]	; (8004dbc <ai_platform_network_init+0x1c8>)
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1fb      	bne.n	8004c54 <ai_platform_network_init+0x60>
 8004c5c:	4b58      	ldr	r3, [pc, #352]	; (8004dc0 <ai_platform_network_init+0x1cc>)
 8004c5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c62:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c66:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <ai_platform_network_init+0x1d0>)
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d00d      	beq.n	8004c88 <ai_platform_network_init+0x94>
 8004c6c:	e7fe      	b.n	8004c6c <ai_platform_network_init+0x78>
 8004c6e:	4a56      	ldr	r2, [pc, #344]	; (8004dc8 <ai_platform_network_init+0x1d4>)
 8004c70:	2301      	movs	r3, #1
 8004c72:	6093      	str	r3, [r2, #8]
 8004c74:	6893      	ldr	r3, [r2, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1fc      	bne.n	8004c74 <ai_platform_network_init+0x80>
 8004c7a:	4b51      	ldr	r3, [pc, #324]	; (8004dc0 <ai_platform_network_init+0x1cc>)
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <ai_platform_network_init+0x1d0>)
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d000      	beq.n	8004c88 <ai_platform_network_init+0x94>
 8004c86:	e7fe      	b.n	8004c86 <ai_platform_network_init+0x92>
 8004c88:	f7ff fbf8 	bl	800447c <_ai_platform_release_crc>
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	4630      	mov	r0, r6
 8004c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c94:	4a4c      	ldr	r2, [pc, #304]	; (8004dc8 <ai_platform_network_init+0x1d4>)
 8004c96:	2301      	movs	r3, #1
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	6893      	ldr	r3, [r2, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1fc      	bne.n	8004c9a <ai_platform_network_init+0xa6>
 8004ca0:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <ai_platform_network_init+0x1cc>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <ai_platform_network_init+0x1d0>)
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d11c      	bne.n	8004ce6 <ai_platform_network_init+0xf2>
 8004cac:	f7ff fbe6 	bl	800447c <_ai_platform_release_crc>
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	d06f      	beq.n	8004d94 <ai_platform_network_init+0x1a0>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <ai_platform_network_init+0x1d8>)
 8004cb6:	6832      	ldr	r2, [r6, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d115      	bne.n	8004ce8 <ai_platform_network_init+0xf4>
 8004cbc:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004cc0:	6933      	ldr	r3, [r6, #16]
 8004cc2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004cc6:	89f7      	ldrh	r7, [r6, #14]
 8004cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cca:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004cce:	2303      	movs	r3, #3
 8004cd0:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004cd2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004cd6:	60e3      	str	r3, [r4, #12]
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4626      	mov	r6, r4
 8004cdc:	f000 fbc2 	bl	8005464 <ai_layers_init_all>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	e7fe      	b.n	8004ce6 <ai_platform_network_init+0xf2>
 8004ce8:	2101      	movs	r1, #1
 8004cea:	4630      	mov	r0, r6
 8004cec:	4635      	mov	r5, r6
 8004cee:	6876      	ldr	r6, [r6, #4]
 8004cf0:	f7ff fb74 	bl	80043dc <ai_buffer_get_size>
 8004cf4:	f105 081c 	add.w	r8, r5, #28
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	6a2f      	ldr	r7, [r5, #32]
 8004d00:	f7ff fb6c 	bl	80043dc <ai_buffer_get_size>
 8004d04:	f1b9 0f00 	cmp.w	r9, #0
 8004d08:	d025      	beq.n	8004d56 <ai_platform_network_init+0x162>
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4696      	mov	lr, r2
 8004d0e:	bb30      	cbnz	r0, 8004d5e <ai_platform_network_init+0x16a>
 8004d10:	4680      	mov	r8, r0
 8004d12:	4607      	mov	r7, r0
 8004d14:	b376      	cbz	r6, 8004d74 <ai_platform_network_init+0x180>
 8004d16:	8be3      	ldrh	r3, [r4, #30]
 8004d18:	4573      	cmp	r3, lr
 8004d1a:	d323      	bcc.n	8004d64 <ai_platform_network_init+0x170>
 8004d1c:	b142      	cbz	r2, 8004d30 <ai_platform_network_init+0x13c>
 8004d1e:	46ac      	mov	ip, r5
 8004d20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d24:	6a25      	ldr	r5, [r4, #32]
 8004d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d28:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d30:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004d32:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004d36:	2600      	movs	r6, #0
 8004d38:	42bb      	cmp	r3, r7
 8004d3a:	83a6      	strh	r6, [r4, #28]
 8004d3c:	d323      	bcc.n	8004d86 <ai_platform_network_init+0x192>
 8004d3e:	b37f      	cbz	r7, 8004da0 <ai_platform_network_init+0x1ac>
 8004d40:	46c4      	mov	ip, r8
 8004d42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d46:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d4e:	46b6      	mov	lr, r6
 8004d50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d54:	e7bb      	b.n	8004cce <ai_platform_network_init+0xda>
 8004d56:	464a      	mov	r2, r9
 8004d58:	46ce      	mov	lr, r9
 8004d5a:	464d      	mov	r5, r9
 8004d5c:	e7d7      	b.n	8004d0e <ai_platform_network_init+0x11a>
 8004d5e:	b30f      	cbz	r7, 8004da4 <ai_platform_network_init+0x1b0>
 8004d60:	2701      	movs	r7, #1
 8004d62:	e7d7      	b.n	8004d14 <ai_platform_network_init+0x120>
 8004d64:	2212      	movs	r2, #18
 8004d66:	2116      	movs	r1, #22
 8004d68:	f104 0010 	add.w	r0, r4, #16
 8004d6c:	f000 fb44 	bl	80053f8 <core_set_error>
 8004d70:	2600      	movs	r6, #0
 8004d72:	e78c      	b.n	8004c8e <ai_platform_network_init+0x9a>
 8004d74:	f1b9 0f00 	cmp.w	r9, #0
 8004d78:	d0cd      	beq.n	8004d16 <ai_platform_network_init+0x122>
 8004d7a:	2110      	movs	r1, #16
 8004d7c:	2212      	movs	r2, #18
 8004d7e:	1860      	adds	r0, r4, r1
 8004d80:	f000 fb3a 	bl	80053f8 <core_set_error>
 8004d84:	e783      	b.n	8004c8e <ai_platform_network_init+0x9a>
 8004d86:	2213      	movs	r2, #19
 8004d88:	2116      	movs	r1, #22
 8004d8a:	f104 0010 	add.w	r0, r4, #16
 8004d8e:	f000 fb33 	bl	80053f8 <core_set_error>
 8004d92:	e77c      	b.n	8004c8e <ai_platform_network_init+0x9a>
 8004d94:	2110      	movs	r1, #16
 8004d96:	2211      	movs	r2, #17
 8004d98:	1860      	adds	r0, r4, r1
 8004d9a:	f000 fb2d 	bl	80053f8 <core_set_error>
 8004d9e:	e776      	b.n	8004c8e <ai_platform_network_init+0x9a>
 8004da0:	46be      	mov	lr, r7
 8004da2:	e794      	b.n	8004cce <ai_platform_network_init+0xda>
 8004da4:	2110      	movs	r1, #16
 8004da6:	2213      	movs	r2, #19
 8004da8:	1860      	adds	r0, r4, r1
 8004daa:	f000 fb25 	bl	80053f8 <core_set_error>
 8004dae:	463e      	mov	r6, r7
 8004db0:	e76d      	b.n	8004c8e <ai_platform_network_init+0x9a>
 8004db2:	bf00      	nop
 8004db4:	a1c00100 	.word	0xa1c00100
 8004db8:	e0042000 	.word	0xe0042000
 8004dbc:	58024000 	.word	0x58024000
 8004dc0:	f407a5c2 	.word	0xf407a5c2
 8004dc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004dc8:	40023000 	.word	0x40023000
 8004dcc:	a1facade 	.word	0xa1facade

08004dd0 <ai_platform_network_post_init>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	b1f0      	cbz	r0, 8004e12 <ai_platform_network_post_init+0x42>
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <ai_platform_network_post_init+0xf8>)
 8004dd6:	6802      	ldr	r2, [r0, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	4604      	mov	r4, r0
 8004ddc:	d119      	bne.n	8004e12 <ai_platform_network_post_init+0x42>
 8004dde:	f7ff fb4b 	bl	8004478 <_ai_platform_acquire_crc>
 8004de2:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <ai_platform_network_post_init+0xfc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d03b      	beq.n	8004e68 <ai_platform_network_post_init+0x98>
 8004df0:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <ai_platform_network_post_init+0x100>)
 8004df2:	2301      	movs	r3, #1
 8004df4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004df8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1fb      	bne.n	8004df8 <ai_platform_network_post_init+0x28>
 8004e00:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <ai_platform_network_post_init+0x104>)
 8004e02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e0a:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <ai_platform_network_post_init+0x108>)
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d037      	beq.n	8004e80 <ai_platform_network_post_init+0xb0>
 8004e10:	e7fe      	b.n	8004e10 <ai_platform_network_post_init+0x40>
 8004e12:	f7ff fb31 	bl	8004478 <_ai_platform_acquire_crc>
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <ai_platform_network_post_init+0xfc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d010      	beq.n	8004e46 <ai_platform_network_post_init+0x76>
 8004e24:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <ai_platform_network_post_init+0x100>)
 8004e26:	2301      	movs	r3, #1
 8004e28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1fb      	bne.n	8004e2c <ai_platform_network_post_init+0x5c>
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <ai_platform_network_post_init+0x104>)
 8004e36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e3e:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <ai_platform_network_post_init+0x108>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d00d      	beq.n	8004e60 <ai_platform_network_post_init+0x90>
 8004e44:	e7fe      	b.n	8004e44 <ai_platform_network_post_init+0x74>
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <ai_platform_network_post_init+0x10c>)
 8004e48:	2301      	movs	r3, #1
 8004e4a:	6093      	str	r3, [r2, #8]
 8004e4c:	6893      	ldr	r3, [r2, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1fc      	bne.n	8004e4c <ai_platform_network_post_init+0x7c>
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <ai_platform_network_post_init+0x104>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <ai_platform_network_post_init+0x108>)
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d000      	beq.n	8004e60 <ai_platform_network_post_init+0x90>
 8004e5e:	e7fe      	b.n	8004e5e <ai_platform_network_post_init+0x8e>
 8004e60:	f7ff fb0c 	bl	800447c <_ai_platform_release_crc>
 8004e64:	2000      	movs	r0, #0
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <ai_platform_network_post_init+0x10c>)
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	6093      	str	r3, [r2, #8]
 8004e6e:	6893      	ldr	r3, [r2, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1fc      	bne.n	8004e6e <ai_platform_network_post_init+0x9e>
 8004e74:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <ai_platform_network_post_init+0x104>)
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <ai_platform_network_post_init+0x108>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d11a      	bne.n	8004eb6 <ai_platform_network_post_init+0xe6>
 8004e80:	f7ff fafc 	bl	800447c <_ai_platform_release_crc>
 8004e84:	68e3      	ldr	r3, [r4, #12]
 8004e86:	f013 0502 	ands.w	r5, r3, #2
 8004e8a:	d015      	beq.n	8004eb8 <ai_platform_network_post_init+0xe8>
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 faf7 	bl	8005480 <ai_layers_post_init_all>
 8004e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e94:	b16b      	cbz	r3, 8004eb2 <ai_platform_network_post_init+0xe2>
 8004e96:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004e98:	e007      	b.n	8004eaa <ai_platform_network_post_init+0xda>
 8004e9a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004e9e:	4798      	blx	r3
 8004ea0:	692b      	ldr	r3, [r5, #16]
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	d005      	beq.n	8004eb2 <ai_platform_network_post_init+0xe2>
 8004ea6:	b123      	cbz	r3, 8004eb2 <ai_platform_network_post_init+0xe2>
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	4629      	mov	r1, r5
 8004eac:	2000      	movs	r0, #0
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	d1f3      	bne.n	8004e9a <ai_platform_network_post_init+0xca>
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	bd38      	pop	{r3, r4, r5, pc}
 8004eb6:	e7fe      	b.n	8004eb6 <ai_platform_network_post_init+0xe6>
 8004eb8:	2210      	movs	r2, #16
 8004eba:	2111      	movs	r1, #17
 8004ebc:	18a0      	adds	r0, r4, r2
 8004ebe:	f000 fa9b 	bl	80053f8 <core_set_error>
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	bd38      	pop	{r3, r4, r5, pc}
 8004ec6:	bf00      	nop
 8004ec8:	a1c00100 	.word	0xa1c00100
 8004ecc:	e0042000 	.word	0xe0042000
 8004ed0:	58024000 	.word	0x58024000
 8004ed4:	f407a5c2 	.word	0xf407a5c2
 8004ed8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004edc:	40023000 	.word	0x40023000

08004ee0 <ai_platform_network_process>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	460e      	mov	r6, r1
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	4693      	mov	fp, r2
 8004eea:	4605      	mov	r5, r0
 8004eec:	b120      	cbz	r0, 8004ef8 <ai_platform_network_process+0x18>
 8004eee:	4bb8      	ldr	r3, [pc, #736]	; (80051d0 <ai_platform_network_process+0x2f0>)
 8004ef0:	6802      	ldr	r2, [r0, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf18      	it	ne
 8004ef6:	2500      	movne	r5, #0
 8004ef8:	f7ff fabe 	bl	8004478 <_ai_platform_acquire_crc>
 8004efc:	4bb5      	ldr	r3, [pc, #724]	; (80051d4 <ai_platform_network_process+0x2f4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f08:	d010      	beq.n	8004f2c <ai_platform_network_process+0x4c>
 8004f0a:	4ab3      	ldr	r2, [pc, #716]	; (80051d8 <ai_platform_network_process+0x2f8>)
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1fb      	bne.n	8004f12 <ai_platform_network_process+0x32>
 8004f1a:	4bb0      	ldr	r3, [pc, #704]	; (80051dc <ai_platform_network_process+0x2fc>)
 8004f1c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f24:	4bae      	ldr	r3, [pc, #696]	; (80051e0 <ai_platform_network_process+0x300>)
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d00d      	beq.n	8004f46 <ai_platform_network_process+0x66>
 8004f2a:	e7fe      	b.n	8004f2a <ai_platform_network_process+0x4a>
 8004f2c:	4aad      	ldr	r2, [pc, #692]	; (80051e4 <ai_platform_network_process+0x304>)
 8004f2e:	2301      	movs	r3, #1
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	6893      	ldr	r3, [r2, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1fc      	bne.n	8004f32 <ai_platform_network_process+0x52>
 8004f38:	4ba8      	ldr	r3, [pc, #672]	; (80051dc <ai_platform_network_process+0x2fc>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	4ba8      	ldr	r3, [pc, #672]	; (80051e0 <ai_platform_network_process+0x300>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	f040 812c 	bne.w	800519e <ai_platform_network_process+0x2be>
 8004f46:	f7ff fa99 	bl	800447c <_ai_platform_release_crc>
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	f000 8154 	beq.w	80051f8 <ai_platform_network_process+0x318>
 8004f50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8124 	beq.w	80051a0 <ai_platform_network_process+0x2c0>
 8004f58:	68eb      	ldr	r3, [r5, #12]
 8004f5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2700      	movs	r7, #0
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	616f      	str	r7, [r5, #20]
 8004f68:	f040 813e 	bne.w	80051e8 <ai_platform_network_process+0x308>
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	f000 811d 	beq.w	80051ac <ai_platform_network_process+0x2cc>
 8004f72:	f1ba 0f00 	cmp.w	sl, #0
 8004f76:	f000 8119 	beq.w	80051ac <ai_platform_network_process+0x2cc>
 8004f7a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8114 	beq.w	80051ac <ai_platform_network_process+0x2cc>
 8004f84:	69b3      	ldr	r3, [r6, #24]
 8004f86:	f8cd b00c 	str.w	fp, [sp, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004f90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d072      	beq.n	800507e <ai_platform_network_process+0x19e>
 8004f98:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	d06e      	beq.n	800507e <ai_platform_network_process+0x19e>
 8004fa0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004fa4:	f8d3 9000 	ldr.w	r9, [r3]
 8004fa8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004fac:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004fb0:	f000 81de 	beq.w	8005370 <ai_platform_network_process+0x490>
 8004fb4:	69a3      	ldr	r3, [r4, #24]
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	685d      	ldr	r5, [r3, #4]
 8004fbc:	f7ff fa0e 	bl	80043dc <ai_buffer_get_size>
 8004fc0:	4285      	cmp	r5, r0
 8004fc2:	f0c0 811b 	bcc.w	80051fc <ai_platform_network_process+0x31c>
 8004fc6:	68e0      	ldr	r0, [r4, #12]
 8004fc8:	69b1      	ldr	r1, [r6, #24]
 8004fca:	68c2      	ldr	r2, [r0, #12]
 8004fcc:	68cb      	ldr	r3, [r1, #12]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f040 8114 	bne.w	80051fc <ai_platform_network_process+0x31c>
 8004fd4:	6882      	ldr	r2, [r0, #8]
 8004fd6:	688b      	ldr	r3, [r1, #8]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	f040 810f 	bne.w	80051fc <ai_platform_network_process+0x31c>
 8004fde:	6842      	ldr	r2, [r0, #4]
 8004fe0:	684b      	ldr	r3, [r1, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	f040 810a 	bne.w	80051fc <ai_platform_network_process+0x31c>
 8004fe8:	69a3      	ldr	r3, [r4, #24]
 8004fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fee:	f002 fda1 	bl	8007b34 <ai_array_get_data_byte_size>
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff f9d9 	bl	80043ac <get_tensor_byte_size>
 8004ffa:	4285      	cmp	r5, r0
 8004ffc:	f0c0 80fe 	bcc.w	80051fc <ai_platform_network_process+0x31c>
 8005000:	69a3      	ldr	r3, [r4, #24]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f002 fd02 	bl	8007a0c <ai_array_to_buffer_fmt>
 8005008:	6833      	ldr	r3, [r6, #0]
 800500a:	4058      	eors	r0, r3
 800500c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005010:	f040 81b9 	bne.w	8005386 <ai_platform_network_process+0x4a6>
 8005014:	6873      	ldr	r3, [r6, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 81ac 	beq.w	8005374 <ai_platform_network_process+0x494>
 800501c:	69b3      	ldr	r3, [r6, #24]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 819c 	beq.w	800535e <ai_platform_network_process+0x47e>
 8005026:	9a01      	ldr	r2, [sp, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	bf38      	it	cc
 800502c:	461a      	movcc	r2, r3
 800502e:	4620      	mov	r0, r4
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	f7ff f9bb 	bl	80043ac <get_tensor_byte_size>
 8005036:	f8c8 0008 	str.w	r0, [r8, #8]
 800503a:	69b3      	ldr	r3, [r6, #24]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fb00 f303 	mul.w	r3, r0, r3
 8005042:	f8c8 300c 	str.w	r3, [r8, #12]
 8005046:	6871      	ldr	r1, [r6, #4]
 8005048:	f8c8 1004 	str.w	r1, [r8, #4]
 800504c:	440b      	add	r3, r1
 800504e:	f849 300b 	str.w	r3, [r9, fp]
 8005052:	69a0      	ldr	r0, [r4, #24]
 8005054:	6803      	ldr	r3, [r0, #0]
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	f107 0701 	add.w	r7, r7, #1
 800505c:	f106 061c 	add.w	r6, r6, #28
 8005060:	f100 80af 	bmi.w	80051c2 <ai_platform_network_process+0x2e2>
 8005064:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	4419      	add	r1, r3
 800506c:	6081      	str	r1, [r0, #8]
 800506e:	69a3      	ldr	r3, [r4, #24]
 8005070:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	f8ba 3000 	ldrh.w	r3, [sl]
 800507a:	42bb      	cmp	r3, r7
 800507c:	d888      	bhi.n	8004f90 <ai_platform_network_process+0xb0>
 800507e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8005082:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005084:	f1bb 0f00 	cmp.w	fp, #0
 8005088:	f000 8186 	beq.w	8005398 <ai_platform_network_process+0x4b8>
 800508c:	2a01      	cmp	r2, #1
 800508e:	f240 815e 	bls.w	800534e <ai_platform_network_process+0x46e>
 8005092:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8005096:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8157 	beq.w	800534e <ai_platform_network_process+0x46e>
 80050a0:	465e      	mov	r6, fp
 80050a2:	2700      	movs	r7, #0
 80050a4:	462c      	mov	r4, r5
 80050a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80b4 	beq.w	8005218 <ai_platform_network_process+0x338>
 80050b0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	f000 80af 	beq.w	8005218 <ai_platform_network_process+0x338>
 80050ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80050be:	f8d3 8000 	ldr.w	r8, [r3]
 80050c2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80050c6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80050ca:	f000 8171 	beq.w	80053b0 <ai_platform_network_process+0x4d0>
 80050ce:	69ab      	ldr	r3, [r5, #24]
 80050d0:	2101      	movs	r1, #1
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	9302      	str	r3, [sp, #8]
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff f980 	bl	80043dc <ai_buffer_get_size>
 80050dc:	9b02      	ldr	r3, [sp, #8]
 80050de:	4283      	cmp	r3, r0
 80050e0:	f0c0 8134 	bcc.w	800534c <ai_platform_network_process+0x46c>
 80050e4:	68e8      	ldr	r0, [r5, #12]
 80050e6:	69b1      	ldr	r1, [r6, #24]
 80050e8:	68c2      	ldr	r2, [r0, #12]
 80050ea:	68cb      	ldr	r3, [r1, #12]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	f040 812d 	bne.w	800534c <ai_platform_network_process+0x46c>
 80050f2:	6882      	ldr	r2, [r0, #8]
 80050f4:	688b      	ldr	r3, [r1, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	f040 8128 	bne.w	800534c <ai_platform_network_process+0x46c>
 80050fc:	6842      	ldr	r2, [r0, #4]
 80050fe:	684b      	ldr	r3, [r1, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	f040 8123 	bne.w	800534c <ai_platform_network_process+0x46c>
 8005106:	69ab      	ldr	r3, [r5, #24]
 8005108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800510c:	f002 fd12 	bl	8007b34 <ai_array_get_data_byte_size>
 8005110:	9002      	str	r0, [sp, #8]
 8005112:	4628      	mov	r0, r5
 8005114:	f7ff f94a 	bl	80043ac <get_tensor_byte_size>
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	4283      	cmp	r3, r0
 800511c:	f0c0 8116 	bcc.w	800534c <ai_platform_network_process+0x46c>
 8005120:	69ab      	ldr	r3, [r5, #24]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	f002 fc72 	bl	8007a0c <ai_array_to_buffer_fmt>
 8005128:	6833      	ldr	r3, [r6, #0]
 800512a:	4058      	eors	r0, r3
 800512c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005130:	f040 8136 	bne.w	80053a0 <ai_platform_network_process+0x4c0>
 8005134:	6873      	ldr	r3, [r6, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 814d 	beq.w	80053d6 <ai_platform_network_process+0x4f6>
 800513c:	69b3      	ldr	r3, [r6, #24]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 813f 	beq.w	80053c4 <ai_platform_network_process+0x4e4>
 8005146:	9a01      	ldr	r2, [sp, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	bf38      	it	cc
 800514c:	461a      	movcc	r2, r3
 800514e:	4628      	mov	r0, r5
 8005150:	9201      	str	r2, [sp, #4]
 8005152:	f7ff f92b 	bl	80043ac <get_tensor_byte_size>
 8005156:	f8ca 0008 	str.w	r0, [sl, #8]
 800515a:	69b3      	ldr	r3, [r6, #24]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	fb00 f303 	mul.w	r3, r0, r3
 8005162:	f8ca 300c 	str.w	r3, [sl, #12]
 8005166:	6871      	ldr	r1, [r6, #4]
 8005168:	f8ca 1004 	str.w	r1, [sl, #4]
 800516c:	440b      	add	r3, r1
 800516e:	f848 300b 	str.w	r3, [r8, fp]
 8005172:	69a8      	ldr	r0, [r5, #24]
 8005174:	6803      	ldr	r3, [r0, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	f107 0701 	add.w	r7, r7, #1
 800517c:	f106 061c 	add.w	r6, r6, #28
 8005180:	d445      	bmi.n	800520e <ai_platform_network_process+0x32e>
 8005182:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	4419      	add	r1, r3
 800518a:	6081      	str	r1, [r0, #8]
 800518c:	69ab      	ldr	r3, [r5, #24]
 800518e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005198:	429f      	cmp	r7, r3
 800519a:	d384      	bcc.n	80050a6 <ai_platform_network_process+0x1c6>
 800519c:	e03c      	b.n	8005218 <ai_platform_network_process+0x338>
 800519e:	e7fe      	b.n	800519e <ai_platform_network_process+0x2be>
 80051a0:	68ea      	ldr	r2, [r5, #12]
 80051a2:	616b      	str	r3, [r5, #20]
 80051a4:	f002 0203 	and.w	r2, r2, #3
 80051a8:	2a03      	cmp	r2, #3
 80051aa:	d11d      	bne.n	80051e8 <ai_platform_network_process+0x308>
 80051ac:	2217      	movs	r2, #23
 80051ae:	2112      	movs	r1, #18
 80051b0:	f105 0010 	add.w	r0, r5, #16
 80051b4:	f000 f920 	bl	80053f8 <core_set_error>
 80051b8:	2400      	movs	r4, #0
 80051ba:	4620      	mov	r0, r4
 80051bc:	b005      	add	sp, #20
 80051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80051c6:	429f      	cmp	r7, r3
 80051c8:	f4ff aee2 	bcc.w	8004f90 <ai_platform_network_process+0xb0>
 80051cc:	e757      	b.n	800507e <ai_platform_network_process+0x19e>
 80051ce:	bf00      	nop
 80051d0:	a1c00100 	.word	0xa1c00100
 80051d4:	e0042000 	.word	0xe0042000
 80051d8:	58024000 	.word	0x58024000
 80051dc:	f407a5c2 	.word	0xf407a5c2
 80051e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80051e4:	40023000 	.word	0x40023000
 80051e8:	2230      	movs	r2, #48	; 0x30
 80051ea:	2111      	movs	r1, #17
 80051ec:	f105 0010 	add.w	r0, r5, #16
 80051f0:	f000 f902 	bl	80053f8 <core_set_error>
 80051f4:	2400      	movs	r4, #0
 80051f6:	e7e0      	b.n	80051ba <ai_platform_network_process+0x2da>
 80051f8:	462c      	mov	r4, r5
 80051fa:	e7de      	b.n	80051ba <ai_platform_network_process+0x2da>
 80051fc:	9d02      	ldr	r5, [sp, #8]
 80051fe:	2218      	movs	r2, #24
 8005200:	2112      	movs	r1, #18
 8005202:	f105 0010 	add.w	r0, r5, #16
 8005206:	f000 f8f7 	bl	80053f8 <core_set_error>
 800520a:	2400      	movs	r4, #0
 800520c:	e7d5      	b.n	80051ba <ai_platform_network_process+0x2da>
 800520e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005212:	429f      	cmp	r7, r3
 8005214:	f4ff af47 	bcc.w	80050a6 <ai_platform_network_process+0x1c6>
 8005218:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800521c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800521e:	82a3      	strh	r3, [r4, #20]
 8005220:	4625      	mov	r5, r4
 8005222:	2a00      	cmp	r2, #0
 8005224:	f040 808c 	bne.w	8005340 <ai_platform_network_process+0x460>
 8005228:	4616      	mov	r6, r2
 800522a:	4617      	mov	r7, r2
 800522c:	8aec      	ldrh	r4, [r5, #22]
 800522e:	429c      	cmp	r4, r3
 8005230:	bf38      	it	cc
 8005232:	46ab      	movcc	fp, r5
 8005234:	d2c1      	bcs.n	80051ba <ai_platform_network_process+0x2da>
 8005236:	2e00      	cmp	r6, #0
 8005238:	d030      	beq.n	800529c <ai_platform_network_process+0x3bc>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	e014      	b.n	800526a <ai_platform_network_process+0x38a>
 8005240:	6882      	ldr	r2, [r0, #8]
 8005242:	68c5      	ldr	r5, [r0, #12]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	1b52      	subs	r2, r2, r5
 8005248:	4413      	add	r3, r2
 800524a:	6083      	str	r3, [r0, #8]
 800524c:	698b      	ldr	r3, [r1, #24]
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005256:	f859 200a 	ldr.w	r2, [r9, sl]
 800525a:	440b      	add	r3, r1
 800525c:	4293      	cmp	r3, r2
 800525e:	bf24      	itt	cs
 8005260:	68e3      	ldrcs	r3, [r4, #12]
 8005262:	1ad3      	subcs	r3, r2, r3
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	f108 0801 	add.w	r8, r8, #1
 800526a:	8833      	ldrh	r3, [r6, #0]
 800526c:	4543      	cmp	r3, r8
 800526e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005272:	d913      	bls.n	800529c <ai_platform_network_process+0x3bc>
 8005274:	6873      	ldr	r3, [r6, #4]
 8005276:	b18b      	cbz	r3, 800529c <ai_platform_network_process+0x3bc>
 8005278:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800527c:	b171      	cbz	r1, 800529c <ai_platform_network_process+0x3bc>
 800527e:	6988      	ldr	r0, [r1, #24]
 8005280:	68b2      	ldr	r2, [r6, #8]
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	f8d2 9000 	ldr.w	r9, [r2]
 8005288:	009d      	lsls	r5, r3, #2
 800528a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800528e:	d5d7      	bpl.n	8005240 <ai_platform_network_process+0x360>
 8005290:	6881      	ldr	r1, [r0, #8]
 8005292:	68a2      	ldr	r2, [r4, #8]
 8005294:	6860      	ldr	r0, [r4, #4]
 8005296:	f002 fb33 	bl	8007900 <st_int8_copy>
 800529a:	e7da      	b.n	8005252 <ai_platform_network_process+0x372>
 800529c:	4658      	mov	r0, fp
 800529e:	f000 f903 	bl	80054a8 <ai_layers_forward_all>
 80052a2:	2f00      	cmp	r7, #0
 80052a4:	d03d      	beq.n	8005322 <ai_platform_network_process+0x442>
 80052a6:	2400      	movs	r4, #0
 80052a8:	e016      	b.n	80052d8 <ai_platform_network_process+0x3f8>
 80052aa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80052ae:	f859 100a 	ldr.w	r1, [r9, sl]
 80052b2:	4413      	add	r3, r2
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf24      	itt	cs
 80052b8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80052bc:	1acb      	subcs	r3, r1, r3
 80052be:	f8c8 3004 	str.w	r3, [r8, #4]
 80052c2:	6981      	ldr	r1, [r0, #24]
 80052c4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80052c8:	1b52      	subs	r2, r2, r5
 80052ca:	4413      	add	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	6983      	ldr	r3, [r0, #24]
 80052d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	3401      	adds	r4, #1
 80052d8:	883b      	ldrh	r3, [r7, #0]
 80052da:	42a3      	cmp	r3, r4
 80052dc:	d921      	bls.n	8005322 <ai_platform_network_process+0x442>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	b1fb      	cbz	r3, 8005322 <ai_platform_network_process+0x442>
 80052e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80052e6:	b1e0      	cbz	r0, 8005322 <ai_platform_network_process+0x442>
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	6983      	ldr	r3, [r0, #24]
 80052ec:	f8d2 9000 	ldr.w	r9, [r2]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80052f8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80052fc:	d5d5      	bpl.n	80052aa <ai_platform_network_process+0x3ca>
 80052fe:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005302:	6898      	ldr	r0, [r3, #8]
 8005304:	f002 fafc 	bl	8007900 <st_int8_copy>
 8005308:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800530c:	f859 200a 	ldr.w	r2, [r9, sl]
 8005310:	440b      	add	r3, r1
 8005312:	4293      	cmp	r3, r2
 8005314:	bf24      	itt	cs
 8005316:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800531a:	1ad3      	subcs	r3, r2, r3
 800531c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005320:	e7d9      	b.n	80052d6 <ai_platform_network_process+0x3f6>
 8005322:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005326:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800532a:	3401      	adds	r4, #1
 800532c:	b2a4      	uxth	r4, r4
 800532e:	42a3      	cmp	r3, r4
 8005330:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005334:	f63f af7f 	bhi.w	8005236 <ai_platform_network_process+0x356>
 8005338:	4620      	mov	r0, r4
 800533a:	b005      	add	sp, #20
 800533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005340:	2a01      	cmp	r2, #1
 8005342:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005344:	d03c      	beq.n	80053c0 <ai_platform_network_process+0x4e0>
 8005346:	f106 070c 	add.w	r7, r6, #12
 800534a:	e76f      	b.n	800522c <ai_platform_network_process+0x34c>
 800534c:	4625      	mov	r5, r4
 800534e:	2218      	movs	r2, #24
 8005350:	2113      	movs	r1, #19
 8005352:	f105 0010 	add.w	r0, r5, #16
 8005356:	f000 f84f 	bl	80053f8 <core_set_error>
 800535a:	2400      	movs	r4, #0
 800535c:	e72d      	b.n	80051ba <ai_platform_network_process+0x2da>
 800535e:	9d02      	ldr	r5, [sp, #8]
 8005360:	4604      	mov	r4, r0
 8005362:	2221      	movs	r2, #33	; 0x21
 8005364:	2112      	movs	r1, #18
 8005366:	f105 0010 	add.w	r0, r5, #16
 800536a:	f000 f845 	bl	80053f8 <core_set_error>
 800536e:	e724      	b.n	80051ba <ai_platform_network_process+0x2da>
 8005370:	9d02      	ldr	r5, [sp, #8]
 8005372:	e71b      	b.n	80051ac <ai_platform_network_process+0x2cc>
 8005374:	9d02      	ldr	r5, [sp, #8]
 8005376:	4604      	mov	r4, r0
 8005378:	2217      	movs	r2, #23
 800537a:	2112      	movs	r1, #18
 800537c:	f105 0010 	add.w	r0, r5, #16
 8005380:	f000 f83a 	bl	80053f8 <core_set_error>
 8005384:	e719      	b.n	80051ba <ai_platform_network_process+0x2da>
 8005386:	9d02      	ldr	r5, [sp, #8]
 8005388:	2219      	movs	r2, #25
 800538a:	2112      	movs	r1, #18
 800538c:	f105 0010 	add.w	r0, r5, #16
 8005390:	f000 f832 	bl	80053f8 <core_set_error>
 8005394:	2400      	movs	r4, #0
 8005396:	e710      	b.n	80051ba <ai_platform_network_process+0x2da>
 8005398:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800539c:	82ab      	strh	r3, [r5, #20]
 800539e:	e740      	b.n	8005222 <ai_platform_network_process+0x342>
 80053a0:	f104 0010 	add.w	r0, r4, #16
 80053a4:	2219      	movs	r2, #25
 80053a6:	2113      	movs	r1, #19
 80053a8:	f000 f826 	bl	80053f8 <core_set_error>
 80053ac:	2400      	movs	r4, #0
 80053ae:	e704      	b.n	80051ba <ai_platform_network_process+0x2da>
 80053b0:	f104 0010 	add.w	r0, r4, #16
 80053b4:	2217      	movs	r2, #23
 80053b6:	2113      	movs	r1, #19
 80053b8:	f000 f81e 	bl	80053f8 <core_set_error>
 80053bc:	4654      	mov	r4, sl
 80053be:	e6fc      	b.n	80051ba <ai_platform_network_process+0x2da>
 80053c0:	2700      	movs	r7, #0
 80053c2:	e733      	b.n	800522c <ai_platform_network_process+0x34c>
 80053c4:	4625      	mov	r5, r4
 80053c6:	2221      	movs	r2, #33	; 0x21
 80053c8:	4604      	mov	r4, r0
 80053ca:	2113      	movs	r1, #19
 80053cc:	f105 0010 	add.w	r0, r5, #16
 80053d0:	f000 f812 	bl	80053f8 <core_set_error>
 80053d4:	e6f1      	b.n	80051ba <ai_platform_network_process+0x2da>
 80053d6:	4625      	mov	r5, r4
 80053d8:	2217      	movs	r2, #23
 80053da:	4604      	mov	r4, r0
 80053dc:	2113      	movs	r1, #19
 80053de:	f105 0010 	add.w	r0, r5, #16
 80053e2:	f000 f809 	bl	80053f8 <core_set_error>
 80053e6:	e6e8      	b.n	80051ba <ai_platform_network_process+0x2da>

080053e8 <core_init>:
 80053e8:	2001      	movs	r0, #1
 80053ea:	4770      	bx	lr

080053ec <core_get_error>:
 80053ec:	4603      	mov	r3, r0
 80053ee:	2200      	movs	r2, #0
 80053f0:	6800      	ldr	r0, [r0, #0]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop

080053f8 <core_set_error>:
 80053f8:	4603      	mov	r3, r0
 80053fa:	7800      	ldrb	r0, [r0, #0]
 80053fc:	b108      	cbz	r0, 8005402 <core_set_error+0xa>
 80053fe:	2000      	movs	r0, #0
 8005400:	4770      	bx	lr
 8005402:	7019      	strb	r1, [r3, #0]
 8005404:	6819      	ldr	r1, [r3, #0]
 8005406:	f362 211f 	bfi	r1, r2, #8, #24
 800540a:	2001      	movs	r0, #1
 800540c:	6019      	str	r1, [r3, #0]
 800540e:	4770      	bx	lr

08005410 <ai_check_custom_types>:
 8005410:	b082      	sub	sp, #8
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <ai_check_custom_types+0x50>)
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	b118      	cbz	r0, 8005420 <ai_check_custom_types+0x10>
 8005418:	7803      	ldrb	r3, [r0, #0]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d002      	beq.n	8005424 <ai_check_custom_types+0x14>
 800541e:	2000      	movs	r0, #0
 8005420:	b002      	add	sp, #8
 8005422:	4770      	bx	lr
 8005424:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <ai_check_custom_types+0x26>
 800542c:	2001      	movs	r0, #1
 800542e:	f080 0001 	eor.w	r0, r0, #1
 8005432:	b002      	add	sp, #8
 8005434:	4770      	bx	lr
 8005436:	7842      	ldrb	r2, [r0, #1]
 8005438:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800543c:	429a      	cmp	r2, r3
 800543e:	f100 0001 	add.w	r0, r0, #1
 8005442:	d1f3      	bne.n	800542c <ai_check_custom_types+0x1c>
 8005444:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005448:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800544c:	429a      	cmp	r2, r3
 800544e:	d1ed      	bne.n	800542c <ai_check_custom_types+0x1c>
 8005450:	7842      	ldrb	r2, [r0, #1]
 8005452:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005456:	429a      	cmp	r2, r3
 8005458:	d1e8      	bne.n	800542c <ai_check_custom_types+0x1c>
 800545a:	2000      	movs	r0, #0
 800545c:	e7e7      	b.n	800542e <ai_check_custom_types+0x1e>
 800545e:	bf00      	nop
 8005460:	84048403 	.word	0x84048403

08005464 <ai_layers_init_all>:
 8005464:	4601      	mov	r1, r0
 8005466:	2000      	movs	r0, #0
 8005468:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800546a:	b143      	cbz	r3, 800547e <ai_layers_init_all+0x1a>
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	60d9      	str	r1, [r3, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	f100 0001 	add.w	r0, r0, #1
 8005476:	d002      	beq.n	800547e <ai_layers_init_all+0x1a>
 8005478:	b10a      	cbz	r2, 800547e <ai_layers_init_all+0x1a>
 800547a:	4613      	mov	r3, r2
 800547c:	e7f5      	b.n	800546a <ai_layers_init_all+0x6>
 800547e:	4770      	bx	lr

08005480 <ai_layers_post_init_all>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005484:	2500      	movs	r5, #0
 8005486:	b16c      	cbz	r4, 80054a4 <ai_layers_post_init_all+0x24>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d504      	bpl.n	8005498 <ai_layers_post_init_all+0x18>
 800548e:	6a23      	ldr	r3, [r4, #32]
 8005490:	4620      	mov	r0, r4
 8005492:	b10b      	cbz	r3, 8005498 <ai_layers_post_init_all+0x18>
 8005494:	4798      	blx	r3
 8005496:	3501      	adds	r5, #1
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	42a3      	cmp	r3, r4
 800549c:	d002      	beq.n	80054a4 <ai_layers_post_init_all+0x24>
 800549e:	b10b      	cbz	r3, 80054a4 <ai_layers_post_init_all+0x24>
 80054a0:	461c      	mov	r4, r3
 80054a2:	e7f0      	b.n	8005486 <ai_layers_post_init_all+0x6>
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}

080054a8 <ai_layers_forward_all>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80054b0:	4604      	mov	r4, r0
 80054b2:	f1b8 0f00 	cmp.w	r8, #0
 80054b6:	d02b      	beq.n	8005510 <ai_layers_forward_all+0x68>
 80054b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80054ba:	6381      	str	r1, [r0, #56]	; 0x38
 80054bc:	b321      	cbz	r1, 8005508 <ai_layers_forward_all+0x60>
 80054be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054c0:	2001      	movs	r0, #1
 80054c2:	47c0      	blx	r8
 80054c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054c6:	b1fe      	cbz	r6, 8005508 <ai_layers_forward_all+0x60>
 80054c8:	2700      	movs	r7, #0
 80054ca:	4631      	mov	r1, r6
 80054cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054ce:	2002      	movs	r0, #2
 80054d0:	47c0      	blx	r8
 80054d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80054d4:	4628      	mov	r0, r5
 80054d6:	696b      	ldr	r3, [r5, #20]
 80054d8:	4798      	blx	r3
 80054da:	692e      	ldr	r6, [r5, #16]
 80054dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054e0:	42b5      	cmp	r5, r6
 80054e2:	f04f 0003 	mov.w	r0, #3
 80054e6:	d007      	beq.n	80054f8 <ai_layers_forward_all+0x50>
 80054e8:	47c0      	blx	r8
 80054ea:	3701      	adds	r7, #1
 80054ec:	63a6      	str	r6, [r4, #56]	; 0x38
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d1eb      	bne.n	80054ca <ai_layers_forward_all+0x22>
 80054f2:	4638      	mov	r0, r7
 80054f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f8:	2003      	movs	r0, #3
 80054fa:	47c0      	blx	r8
 80054fc:	2300      	movs	r3, #0
 80054fe:	3701      	adds	r7, #1
 8005500:	63a3      	str	r3, [r4, #56]	; 0x38
 8005502:	4638      	mov	r0, r7
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	2700      	movs	r7, #0
 800550a:	4638      	mov	r0, r7
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005512:	6385      	str	r5, [r0, #56]	; 0x38
 8005514:	2d00      	cmp	r5, #0
 8005516:	d0f7      	beq.n	8005508 <ai_layers_forward_all+0x60>
 8005518:	4647      	mov	r7, r8
 800551a:	696b      	ldr	r3, [r5, #20]
 800551c:	4628      	mov	r0, r5
 800551e:	4798      	blx	r3
 8005520:	462b      	mov	r3, r5
 8005522:	692d      	ldr	r5, [r5, #16]
 8005524:	429d      	cmp	r5, r3
 8005526:	d004      	beq.n	8005532 <ai_layers_forward_all+0x8a>
 8005528:	63a5      	str	r5, [r4, #56]	; 0x38
 800552a:	3701      	adds	r7, #1
 800552c:	2d00      	cmp	r5, #0
 800552e:	d1f4      	bne.n	800551a <ai_layers_forward_all+0x72>
 8005530:	e7df      	b.n	80054f2 <ai_layers_forward_all+0x4a>
 8005532:	2300      	movs	r3, #0
 8005534:	63a3      	str	r3, [r4, #56]	; 0x38
 8005536:	3701      	adds	r7, #1
 8005538:	e7db      	b.n	80054f2 <ai_layers_forward_all+0x4a>
 800553a:	bf00      	nop

0800553c <forward_dense>:
 800553c:	6983      	ldr	r3, [r0, #24]
 800553e:	881a      	ldrh	r2, [r3, #0]
 8005540:	2a00      	cmp	r2, #0
 8005542:	f000 8181 	beq.w	8005848 <forward_dense+0x30c>
 8005546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	ed2d 8b02 	vpush	{d8}
 800554e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005552:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005556:	b095      	sub	sp, #84	; 0x54
 8005558:	b105      	cbz	r5, 800555c <forward_dense+0x20>
 800555a:	682d      	ldr	r5, [r5, #0]
 800555c:	2a01      	cmp	r2, #1
 800555e:	f000 828f 	beq.w	8005a80 <forward_dense+0x544>
 8005562:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8005566:	b106      	cbz	r6, 800556a <forward_dense+0x2e>
 8005568:	6836      	ldr	r6, [r6, #0]
 800556a:	2a02      	cmp	r2, #2
 800556c:	f000 816e 	beq.w	800584c <forward_dense+0x310>
 8005570:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005574:	930b      	str	r3, [sp, #44]	; 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8274 	beq.w	8005a64 <forward_dense+0x528>
 800557c:	4619      	mov	r1, r3
 800557e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005582:	6809      	ldr	r1, [r1, #0]
 8005584:	910d      	str	r1, [sp, #52]	; 0x34
 8005586:	2b01      	cmp	r3, #1
 8005588:	f240 826e 	bls.w	8005a68 <forward_dense+0x52c>
 800558c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	930b      	str	r3, [sp, #44]	; 0x2c
 8005592:	460b      	mov	r3, r1
 8005594:	68e8      	ldr	r0, [r5, #12]
 8005596:	68f7      	ldr	r7, [r6, #12]
 8005598:	6840      	ldr	r0, [r0, #4]
 800559a:	6999      	ldr	r1, [r3, #24]
 800559c:	9013      	str	r0, [sp, #76]	; 0x4c
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	680b      	ldr	r3, [r1, #0]
 80055a2:	9012      	str	r0, [sp, #72]	; 0x48
 80055a4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80055a8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80055ac:	fb00 f404 	mul.w	r4, r0, r4
 80055b0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80055b4:	fa4e f000 	asr.w	r0, lr, r0
 80055b8:	2a03      	cmp	r2, #3
 80055ba:	9010      	str	r0, [sp, #64]	; 0x40
 80055bc:	f000 825d 	beq.w	8005a7a <forward_dense+0x53e>
 80055c0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80055c4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	f000 8246 	beq.w	8005a5a <forward_dense+0x51e>
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	f000 8242 	beq.w	8005a5a <forward_dense+0x51e>
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80055dc:	f000 822c 	beq.w	8005a38 <forward_dense+0x4fc>
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	f000 8229 	beq.w	8005a38 <forward_dense+0x4fc>
 80055e6:	f04f 0b00 	mov.w	fp, #0
 80055ea:	69b2      	ldr	r2, [r6, #24]
 80055ec:	69ab      	ldr	r3, [r5, #24]
 80055ee:	6891      	ldr	r1, [r2, #8]
 80055f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	6952      	ldr	r2, [r2, #20]
 80055f6:	9106      	str	r1, [sp, #24]
 80055f8:	fb07 f404 	mul.w	r4, r7, r4
 80055fc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005600:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005602:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005606:	4281      	cmp	r1, r0
 8005608:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800560c:	900e      	str	r0, [sp, #56]	; 0x38
 800560e:	940c      	str	r4, [sp, #48]	; 0x30
 8005610:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005614:	f080 8113 	bcs.w	800583e <forward_dense+0x302>
 8005618:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800561a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005868 <forward_dense+0x32c>
 800561e:	f021 0201 	bic.w	r2, r1, #1
 8005622:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005626:	9204      	str	r2, [sp, #16]
 8005628:	f001 0201 	and.w	r2, r1, #1
 800562c:	08c8      	lsrs	r0, r1, #3
 800562e:	9208      	str	r2, [sp, #32]
 8005630:	008a      	lsls	r2, r1, #2
 8005632:	f001 0a07 	and.w	sl, r1, #7
 8005636:	920f      	str	r2, [sp, #60]	; 0x3c
 8005638:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800563c:	3320      	adds	r3, #32
 800563e:	465c      	mov	r4, fp
 8005640:	9007      	str	r0, [sp, #28]
 8005642:	46cb      	mov	fp, r9
 8005644:	9205      	str	r2, [sp, #20]
 8005646:	9302      	str	r3, [sp, #8]
 8005648:	46c1      	mov	r9, r8
 800564a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	3b20      	subs	r3, #32
 8005658:	930a      	str	r3, [sp, #40]	; 0x28
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	b10b      	cbz	r3, 8005662 <forward_dense+0x126>
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2c00      	cmp	r4, #0
 8005664:	f000 81da 	beq.w	8005a1c <forward_dense+0x4e0>
 8005668:	9910      	ldr	r1, [sp, #64]	; 0x40
 800566a:	2904      	cmp	r1, #4
 800566c:	9906      	ldr	r1, [sp, #24]
 800566e:	f000 80fd 	beq.w	800586c <forward_dense+0x330>
 8005672:	4549      	cmp	r1, r9
 8005674:	f080 80d2 	bcs.w	800581c <forward_dense+0x2e0>
 8005678:	460f      	mov	r7, r1
 800567a:	9907      	ldr	r1, [sp, #28]
 800567c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005680:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005684:	1c4e      	adds	r6, r1, #1
 8005686:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800568a:	4694      	mov	ip, r2
 800568c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800568e:	468e      	mov	lr, r1
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80de 	beq.w	8005852 <forward_dense+0x316>
 8005696:	ecf3 2a01 	vldmia	r3!, {s5}
 800569a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005868 <forward_dense+0x32c>
 800569e:	f1be 0f00 	cmp.w	lr, #0
 80056a2:	f000 80de 	beq.w	8005862 <forward_dense+0x326>
 80056a6:	f10c 0108 	add.w	r1, ip, #8
 80056aa:	4640      	mov	r0, r8
 80056ac:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80056b0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80056b4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80056b8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80056bc:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80056c0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80056c4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80056c8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80056cc:	ed50 6a01 	vldr	s13, [r0, #-4]
 80056d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80056d4:	edd5 7a00 	vldr	s15, [r5]
 80056d8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80056dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80056e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80056e4:	ed95 3a00 	vldr	s6, [r5]
 80056e8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80056ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 80056f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80056f4:	3108      	adds	r1, #8
 80056f6:	edd5 3a00 	vldr	s7, [r5]
 80056fa:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80056fe:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005702:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005706:	3020      	adds	r0, #32
 8005708:	ed95 4a00 	vldr	s8, [r5]
 800570c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005710:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005714:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005718:	edd5 4a00 	vldr	s9, [r5]
 800571c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005720:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005724:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005728:	ed95 5a00 	vldr	s10, [r5]
 800572c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005730:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005734:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005738:	edd5 5a00 	vldr	s11, [r5]
 800573c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005740:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005744:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005748:	428e      	cmp	r6, r1
 800574a:	ed95 6a00 	vldr	s12, [r5]
 800574e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005756:	d1a9      	bne.n	80056ac <forward_dense+0x170>
 8005758:	f1a6 0108 	sub.w	r1, r6, #8
 800575c:	4650      	mov	r0, sl
 800575e:	2a00      	cmp	r2, #0
 8005760:	d04a      	beq.n	80057f8 <forward_dense+0x2bc>
 8005762:	780d      	ldrb	r5, [r1, #0]
 8005764:	edd0 6a00 	vldr	s13, [r0]
 8005768:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800576c:	edd5 7a00 	vldr	s15, [r5]
 8005770:	2a01      	cmp	r2, #1
 8005772:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005776:	d03f      	beq.n	80057f8 <forward_dense+0x2bc>
 8005778:	784d      	ldrb	r5, [r1, #1]
 800577a:	edd0 6a01 	vldr	s13, [r0, #4]
 800577e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005782:	edd5 7a00 	vldr	s15, [r5]
 8005786:	2a02      	cmp	r2, #2
 8005788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800578c:	d034      	beq.n	80057f8 <forward_dense+0x2bc>
 800578e:	788d      	ldrb	r5, [r1, #2]
 8005790:	edd0 6a02 	vldr	s13, [r0, #8]
 8005794:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005798:	edd5 7a00 	vldr	s15, [r5]
 800579c:	2a03      	cmp	r2, #3
 800579e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057a2:	d029      	beq.n	80057f8 <forward_dense+0x2bc>
 80057a4:	78cd      	ldrb	r5, [r1, #3]
 80057a6:	edd0 6a03 	vldr	s13, [r0, #12]
 80057aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057ae:	edd5 7a00 	vldr	s15, [r5]
 80057b2:	2a04      	cmp	r2, #4
 80057b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057b8:	d01e      	beq.n	80057f8 <forward_dense+0x2bc>
 80057ba:	790d      	ldrb	r5, [r1, #4]
 80057bc:	edd0 6a04 	vldr	s13, [r0, #16]
 80057c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057c4:	edd5 7a00 	vldr	s15, [r5]
 80057c8:	2a05      	cmp	r2, #5
 80057ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057ce:	d013      	beq.n	80057f8 <forward_dense+0x2bc>
 80057d0:	794d      	ldrb	r5, [r1, #5]
 80057d2:	edd0 6a05 	vldr	s13, [r0, #20]
 80057d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057da:	edd5 7a00 	vldr	s15, [r5]
 80057de:	2a06      	cmp	r2, #6
 80057e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057e4:	d008      	beq.n	80057f8 <forward_dense+0x2bc>
 80057e6:	7989      	ldrb	r1, [r1, #6]
 80057e8:	edd0 7a06 	vldr	s15, [r0, #24]
 80057ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80057f0:	edd1 6a00 	vldr	s13, [r1]
 80057f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057f8:	44dc      	add	ip, fp
 80057fa:	445e      	add	r6, fp
 80057fc:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005800:	eca7 7a01 	vstmia	r7!, {s14}
 8005804:	454f      	cmp	r7, r9
 8005806:	f4ff af43 	bcc.w	8005690 <forward_dense+0x154>
 800580a:	9a06      	ldr	r2, [sp, #24]
 800580c:	eba9 0302 	sub.w	r3, r9, r2
 8005810:	3b01      	subs	r3, #1
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	3304      	adds	r3, #4
 8005818:	18d3      	adds	r3, r2, r3
 800581a:	9306      	str	r3, [sp, #24]
 800581c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800581e:	9a05      	ldr	r2, [sp, #20]
 8005820:	4499      	add	r9, r3
 8005822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005824:	441a      	add	r2, r3
 8005826:	9205      	str	r2, [sp, #20]
 8005828:	9a02      	ldr	r2, [sp, #8]
 800582a:	441a      	add	r2, r3
 800582c:	9202      	str	r2, [sp, #8]
 800582e:	9a04      	ldr	r2, [sp, #16]
 8005830:	441a      	add	r2, r3
 8005832:	9204      	str	r2, [sp, #16]
 8005834:	9b06      	ldr	r3, [sp, #24]
 8005836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005838:	4293      	cmp	r3, r2
 800583a:	f4ff af08 	bcc.w	800564e <forward_dense+0x112>
 800583e:	b015      	add	sp, #84	; 0x54
 8005840:	ecbd 8b02 	vpop	{d8}
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	6853      	ldr	r3, [r2, #4]
 800584a:	deff      	udf	#255	; 0xff
 800584c:	2300      	movs	r3, #0
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	deff      	udf	#255	; 0xff
 8005852:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005868 <forward_dense+0x32c>
 8005856:	eef0 2a48 	vmov.f32	s5, s16
 800585a:	f1be 0f00 	cmp.w	lr, #0
 800585e:	f47f af22 	bne.w	80056a6 <forward_dense+0x16a>
 8005862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005864:	4661      	mov	r1, ip
 8005866:	e77a      	b.n	800575e <forward_dense+0x222>
 8005868:	00000000 	.word	0x00000000
 800586c:	4549      	cmp	r1, r9
 800586e:	d2d5      	bcs.n	800581c <forward_dense+0x2e0>
 8005870:	9807      	ldr	r0, [sp, #28]
 8005872:	9103      	str	r1, [sp, #12]
 8005874:	9904      	ldr	r1, [sp, #16]
 8005876:	f100 0c01 	add.w	ip, r0, #1
 800587a:	3901      	subs	r1, #1
 800587c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005880:	9109      	str	r1, [sp, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80b2 	beq.w	80059ec <forward_dense+0x4b0>
 8005888:	9907      	ldr	r1, [sp, #28]
 800588a:	ecf3 2a01 	vldmia	r3!, {s5}
 800588e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005868 <forward_dense+0x32c>
 8005892:	2900      	cmp	r1, #0
 8005894:	f000 80b2 	beq.w	80059fc <forward_dense+0x4c0>
 8005898:	9902      	ldr	r1, [sp, #8]
 800589a:	1d10      	adds	r0, r2, #4
 800589c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80058a0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80058a4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80058a8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80058ac:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80058b0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80058b4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80058b8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80058bc:	ed11 6a02 	vldr	s12, [r1, #-8]
 80058c0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80058c4:	f006 070f 	and.w	r7, r6, #15
 80058c8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80058cc:	edd7 7a00 	vldr	s15, [r7]
 80058d0:	0936      	lsrs	r6, r6, #4
 80058d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80058d6:	ed96 3a00 	vldr	s6, [r6]
 80058da:	ee67 7a82 	vmul.f32	s15, s15, s4
 80058de:	092e      	lsrs	r6, r5, #4
 80058e0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80058e4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80058e8:	f005 050f 	and.w	r5, r5, #15
 80058ec:	edd6 3a00 	vldr	s7, [r6]
 80058f0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80058f4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80058f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80058fc:	0937      	lsrs	r7, r6, #4
 80058fe:	ed95 4a00 	vldr	s8, [r5]
 8005902:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005906:	eee4 7a24 	vfma.f32	s15, s8, s9
 800590a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800590e:	f006 060f 	and.w	r6, r6, #15
 8005912:	edd7 4a00 	vldr	s9, [r7]
 8005916:	eee4 7a85 	vfma.f32	s15, s9, s10
 800591a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800591e:	3004      	adds	r0, #4
 8005920:	ed96 5a00 	vldr	s10, [r6]
 8005924:	092e      	lsrs	r6, r5, #4
 8005926:	eee5 7a25 	vfma.f32	s15, s10, s11
 800592a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800592e:	f005 050f 	and.w	r5, r5, #15
 8005932:	edd6 5a00 	vldr	s11, [r6]
 8005936:	eee5 7a86 	vfma.f32	s15, s11, s12
 800593a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800593e:	4584      	cmp	ip, r0
 8005940:	ed95 6a00 	vldr	s12, [r5]
 8005944:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005948:	f101 0120 	add.w	r1, r1, #32
 800594c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005950:	d1a4      	bne.n	800589c <forward_dense+0x360>
 8005952:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005956:	f1ac 0804 	sub.w	r8, ip, #4
 800595a:	9904      	ldr	r1, [sp, #16]
 800595c:	458e      	cmp	lr, r1
 800595e:	d22a      	bcs.n	80059b6 <forward_dense+0x47a>
 8005960:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005962:	eba1 070e 	sub.w	r7, r1, lr
 8005966:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800596a:	f10e 0008 	add.w	r0, lr, #8
 800596e:	f108 36ff 	add.w	r6, r8, #4294967295
 8005972:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800597a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800597e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005982:	f001 050f 	and.w	r5, r1, #15
 8005986:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800598a:	edd5 7a00 	vldr	s15, [r5]
 800598e:	0909      	lsrs	r1, r1, #4
 8005990:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005994:	ed91 6a00 	vldr	s12, [r1]
 8005998:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800599c:	42b7      	cmp	r7, r6
 800599e:	eee6 7a26 	vfma.f32	s15, s12, s13
 80059a2:	f100 0008 	add.w	r0, r0, #8
 80059a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059aa:	d1e4      	bne.n	8005976 <forward_dense+0x43a>
 80059ac:	f10a 0a01 	add.w	sl, sl, #1
 80059b0:	44d0      	add	r8, sl
 80059b2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80059b6:	9908      	ldr	r1, [sp, #32]
 80059b8:	b321      	cbz	r1, 8005a04 <forward_dense+0x4c8>
 80059ba:	f898 1000 	ldrb.w	r1, [r8]
 80059be:	edde 7a00 	vldr	s15, [lr]
 80059c2:	0909      	lsrs	r1, r1, #4
 80059c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80059c8:	edd1 6a00 	vldr	s13, [r1]
 80059cc:	9903      	ldr	r1, [sp, #12]
 80059ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059d2:	445a      	add	r2, fp
 80059d4:	44dc      	add	ip, fp
 80059d6:	ee72 2a87 	vadd.f32	s5, s5, s14
 80059da:	ece1 2a01 	vstmia	r1!, {s5}
 80059de:	4589      	cmp	r9, r1
 80059e0:	9103      	str	r1, [sp, #12]
 80059e2:	f67f af12 	bls.w	800580a <forward_dense+0x2ce>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f47f af4e 	bne.w	8005888 <forward_dense+0x34c>
 80059ec:	9907      	ldr	r1, [sp, #28]
 80059ee:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005868 <forward_dense+0x32c>
 80059f2:	eef0 2a48 	vmov.f32	s5, s16
 80059f6:	2900      	cmp	r1, #0
 80059f8:	f47f af4e 	bne.w	8005898 <forward_dense+0x35c>
 80059fc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005a00:	4690      	mov	r8, r2
 8005a02:	e7aa      	b.n	800595a <forward_dense+0x41e>
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005a0a:	445a      	add	r2, fp
 8005a0c:	eca1 7a01 	vstmia	r1!, {s14}
 8005a10:	4549      	cmp	r1, r9
 8005a12:	9103      	str	r1, [sp, #12]
 8005a14:	44dc      	add	ip, fp
 8005a16:	f4ff af34 	bcc.w	8005882 <forward_dense+0x346>
 8005a1a:	e6f6      	b.n	800580a <forward_dense+0x2ce>
 8005a1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a1e:	9d06      	ldr	r5, [sp, #24]
 8005a20:	9101      	str	r1, [sp, #4]
 8005a22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a24:	9100      	str	r1, [sp, #0]
 8005a26:	4628      	mov	r0, r5
 8005a28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a2a:	f001 fde9 	bl	8007600 <forward_lite_dense_if32of32wf32>
 8005a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a30:	462b      	mov	r3, r5
 8005a32:	4413      	add	r3, r2
 8005a34:	9306      	str	r3, [sp, #24]
 8005a36:	e6f1      	b.n	800581c <forward_dense+0x2e0>
 8005a38:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005a3c:	f1b9 0f00 	cmp.w	r9, #0
 8005a40:	d016      	beq.n	8005a70 <forward_dense+0x534>
 8005a42:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a46:	f002 f84d 	bl	8007ae4 <ai_array_get_byte_size>
 8005a4a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4659      	mov	r1, fp
 8005a52:	4640      	mov	r0, r8
 8005a54:	f001 ff54 	bl	8007900 <st_int8_copy>
 8005a58:	e5c7      	b.n	80055ea <forward_dense+0xae>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d00a      	beq.n	8005a74 <forward_dense+0x538>
 8005a5e:	f04f 0900 	mov.w	r9, #0
 8005a62:	e5bd      	b.n	80055e0 <forward_dense+0xa4>
 8005a64:	930d      	str	r3, [sp, #52]	; 0x34
 8005a66:	e595      	b.n	8005594 <forward_dense+0x58>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	e591      	b.n	8005594 <forward_dense+0x58>
 8005a70:	46c3      	mov	fp, r8
 8005a72:	e5ba      	b.n	80055ea <forward_dense+0xae>
 8005a74:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005a78:	e5b7      	b.n	80055ea <forward_dense+0xae>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	deff      	udf	#255	; 0xff
 8005a80:	2300      	movs	r3, #0
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	deff      	udf	#255	; 0xff
 8005a86:	bf00      	nop

08005a88 <nl_func_sigmoid_array_f32>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	ed2d 8b02 	vpush	{d8}
 8005a8e:	698f      	ldr	r7, [r1, #24]
 8005a90:	6980      	ldr	r0, [r0, #24]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	6886      	ldr	r6, [r0, #8]
 8005a96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	0093      	lsls	r3, r2, #2
 8005a9e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	d815      	bhi.n	8005ad2 <nl_func_sigmoid_array_f32+0x4a>
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	1d14      	adds	r4, r2, #4
 8005aaa:	441e      	add	r6, r3
 8005aac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005ab0:	4625      	mov	r5, r4
 8005ab2:	ed34 0a01 	vldmdb	r4!, {s0}
 8005ab6:	eeb1 0a40 	vneg.f32	s0, s0
 8005aba:	f004 fed5 	bl	800a868 <expf>
 8005abe:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005ac2:	3d08      	subs	r5, #8
 8005ac4:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8005ac8:	ed66 7a01 	vstmdb	r6!, {s15}
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	42ab      	cmp	r3, r5
 8005ad0:	d9ee      	bls.n	8005ab0 <nl_func_sigmoid_array_f32+0x28>
 8005ad2:	ecbd 8b02 	vpop	{d8}
 8005ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ad8 <nl_func_tanh_array_f32>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	698f      	ldr	r7, [r1, #24]
 8005adc:	6980      	ldr	r0, [r0, #24]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	6886      	ldr	r6, [r0, #8]
 8005ae2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	0093      	lsls	r3, r2, #2
 8005aea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005aee:	4291      	cmp	r1, r2
 8005af0:	d80d      	bhi.n	8005b0e <nl_func_tanh_array_f32+0x36>
 8005af2:	3304      	adds	r3, #4
 8005af4:	1d14      	adds	r4, r2, #4
 8005af6:	441e      	add	r6, r3
 8005af8:	4625      	mov	r5, r4
 8005afa:	ed34 0a01 	vldmdb	r4!, {s0}
 8005afe:	f004 fef1 	bl	800a8e4 <tanhf>
 8005b02:	ed26 0a01 	vstmdb	r6!, {s0}
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	3d08      	subs	r5, #8
 8005b0a:	42ab      	cmp	r3, r5
 8005b0c:	d9f4      	bls.n	8005af8 <nl_func_tanh_array_f32+0x20>
 8005b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b10 <forward_relu>:
 8005b10:	6982      	ldr	r2, [r0, #24]
 8005b12:	8813      	ldrh	r3, [r2, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d05b      	beq.n	8005bd0 <forward_relu+0xc0>
 8005b18:	6851      	ldr	r1, [r2, #4]
 8005b1a:	684a      	ldr	r2, [r1, #4]
 8005b1c:	b102      	cbz	r2, 8005b20 <forward_relu+0x10>
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f000 8123 	beq.w	8005d6c <forward_relu+0x25c>
 8005b26:	b470      	push	{r4, r5, r6}
 8005b28:	6909      	ldr	r1, [r1, #16]
 8005b2a:	b101      	cbz	r1, 8005b2e <forward_relu+0x1e>
 8005b2c:	6809      	ldr	r1, [r1, #0]
 8005b2e:	69c6      	ldr	r6, [r0, #28]
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	f000 8097 	beq.w	8005c64 <forward_relu+0x154>
 8005b36:	6873      	ldr	r3, [r6, #4]
 8005b38:	6988      	ldr	r0, [r1, #24]
 8005b3a:	6991      	ldr	r1, [r2, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f000 80c1 	beq.w	8005cc4 <forward_relu+0x1b4>
 8005b42:	6893      	ldr	r3, [r2, #8]
 8005b44:	6880      	ldr	r0, [r0, #8]
 8005b46:	688c      	ldr	r4, [r1, #8]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f000 80f2 	beq.w	8005d32 <forward_relu+0x222>
 8005b4e:	68d5      	ldr	r5, [r2, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	fb01 f202 	mul.w	r2, r1, r2
 8005b60:	d1f9      	bne.n	8005b56 <forward_relu+0x46>
 8005b62:	68b3      	ldr	r3, [r6, #8]
 8005b64:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b68:	edd3 6a00 	vldr	s13, [r3]
 8005b6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005b70:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005b74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b82:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005b86:	d425      	bmi.n	8005bd4 <forward_relu+0xc4>
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	d81f      	bhi.n	8005bcc <forward_relu+0xbc>
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	1d01      	adds	r1, r0, #4
 8005b90:	e00d      	b.n	8005bae <forward_relu+0x9e>
 8005b92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	db03      	blt.n	8005ba4 <forward_relu+0x94>
 8005b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ba0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005ba4:	3b08      	subs	r3, #8
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	ed61 7a01 	vstmdb	r1!, {s15}
 8005bac:	d80e      	bhi.n	8005bcc <forward_relu+0xbc>
 8005bae:	4613      	mov	r3, r2
 8005bb0:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbc:	d9e9      	bls.n	8005b92 <forward_relu+0x82>
 8005bbe:	3b08      	subs	r3, #8
 8005bc0:	eef0 7a47 	vmov.f32	s15, s14
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	ed61 7a01 	vstmdb	r1!, {s15}
 8005bca:	d9f0      	bls.n	8005bae <forward_relu+0x9e>
 8005bcc:	bc70      	pop	{r4, r5, r6}
 8005bce:	4770      	bx	lr
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	deff      	udf	#255	; 0xff
 8005bd4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bdc:	d11f      	bne.n	8005c1e <forward_relu+0x10e>
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d8f4      	bhi.n	8005bcc <forward_relu+0xbc>
 8005be2:	1b1c      	subs	r4, r3, r4
 8005be4:	f024 0403 	bic.w	r4, r4, #3
 8005be8:	1d1a      	adds	r2, r3, #4
 8005bea:	2500      	movs	r5, #0
 8005bec:	1b1b      	subs	r3, r3, r4
 8005bee:	1d01      	adds	r1, r0, #4
 8005bf0:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bf4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	dc0a      	bgt.n	8005c14 <forward_relu+0x104>
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005c04:	d0e2      	beq.n	8005bcc <forward_relu+0xbc>
 8005c06:	ed72 7a01 	vldmdb	r2!, {s15}
 8005c0a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	ddf4      	ble.n	8005bfe <forward_relu+0xee>
 8005c14:	429a      	cmp	r2, r3
 8005c16:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c1a:	d1e9      	bne.n	8005bf0 <forward_relu+0xe0>
 8005c1c:	e7d6      	b.n	8005bcc <forward_relu+0xbc>
 8005c1e:	429c      	cmp	r4, r3
 8005c20:	d8d4      	bhi.n	8005bcc <forward_relu+0xbc>
 8005c22:	1b1c      	subs	r4, r3, r4
 8005c24:	f024 0403 	bic.w	r4, r4, #3
 8005c28:	1d1a      	adds	r2, r3, #4
 8005c2a:	1d01      	adds	r1, r0, #4
 8005c2c:	1b1b      	subs	r3, r3, r4
 8005c2e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005c32:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3a:	db0e      	blt.n	8005c5a <forward_relu+0x14a>
 8005c3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c40:	4293      	cmp	r3, r2
 8005c42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c46:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c4a:	d0bf      	beq.n	8005bcc <forward_relu+0xbc>
 8005c4c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005c50:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c58:	daf0      	bge.n	8005c3c <forward_relu+0x12c>
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c60:	d1e5      	bne.n	8005c2e <forward_relu+0x11e>
 8005c62:	e7b3      	b.n	8005bcc <forward_relu+0xbc>
 8005c64:	6893      	ldr	r3, [r2, #8]
 8005c66:	6989      	ldr	r1, [r1, #24]
 8005c68:	6990      	ldr	r0, [r2, #24]
 8005c6a:	6889      	ldr	r1, [r1, #8]
 8005c6c:	6884      	ldr	r4, [r0, #8]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	d075      	beq.n	8005d5e <forward_relu+0x24e>
 8005c72:	68d5      	ldr	r5, [r2, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005c7a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005c7e:	429d      	cmp	r5, r3
 8005c80:	fb00 f202 	mul.w	r2, r0, r2
 8005c84:	d1f9      	bne.n	8005c7a <forward_relu+0x16a>
 8005c86:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005c90:	4294      	cmp	r4, r2
 8005c92:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005c96:	d899      	bhi.n	8005bcc <forward_relu+0xbc>
 8005c98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005d74 <forward_relu+0x264>
 8005c9c:	3204      	adds	r2, #4
 8005c9e:	3104      	adds	r1, #4
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	ed72 7a01 	vldmdb	r2!, {s15}
 8005ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	f1a3 0308 	sub.w	r3, r3, #8
 8005cb2:	bfb8      	it	lt
 8005cb4:	eef0 7a47 	vmovlt.f32	s15, s14
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	ed61 7a01 	vstmdb	r1!, {s15}
 8005cbe:	d9ef      	bls.n	8005ca0 <forward_relu+0x190>
 8005cc0:	bc70      	pop	{r4, r5, r6}
 8005cc2:	4770      	bx	lr
 8005cc4:	688c      	ldr	r4, [r1, #8]
 8005cc6:	6891      	ldr	r1, [r2, #8]
 8005cc8:	6880      	ldr	r0, [r0, #8]
 8005cca:	0a09      	lsrs	r1, r1, #8
 8005ccc:	d049      	beq.n	8005d62 <forward_relu+0x252>
 8005cce:	68d5      	ldr	r5, [r2, #12]
 8005cd0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005cd4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005cd8:	42aa      	cmp	r2, r5
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	d1f9      	bne.n	8005cd4 <forward_relu+0x1c4>
 8005ce0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005ce4:	3a01      	subs	r2, #1
 8005ce6:	68b1      	ldr	r1, [r6, #8]
 8005ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cec:	429c      	cmp	r4, r3
 8005cee:	ed91 7a00 	vldr	s14, [r1]
 8005cf2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005cf6:	f63f af69 	bhi.w	8005bcc <forward_relu+0xbc>
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	1d02      	adds	r2, r0, #4
 8005d00:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	f1a3 0104 	sub.w	r1, r3, #4
 8005d10:	f1a3 0308 	sub.w	r3, r3, #8
 8005d14:	d406      	bmi.n	8005d24 <forward_relu+0x214>
 8005d16:	429c      	cmp	r4, r3
 8005d18:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005d1c:	f63f af56 	bhi.w	8005bcc <forward_relu+0xbc>
 8005d20:	460b      	mov	r3, r1
 8005d22:	e7ed      	b.n	8005d00 <forward_relu+0x1f0>
 8005d24:	429c      	cmp	r4, r3
 8005d26:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d2a:	f63f af4f 	bhi.w	8005bcc <forward_relu+0xbc>
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e7e6      	b.n	8005d00 <forward_relu+0x1f0>
 8005d32:	68b3      	ldr	r3, [r6, #8]
 8005d34:	ed93 7a02 	vldr	s14, [r3, #8]
 8005d38:	edd3 6a00 	vldr	s13, [r3]
 8005d3c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005d40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d48:	d401      	bmi.n	8005d4e <forward_relu+0x23e>
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	e71e      	b.n	8005b8c <forward_relu+0x7c>
 8005d4e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d56:	4623      	mov	r3, r4
 8005d58:	f47f af63 	bne.w	8005c22 <forward_relu+0x112>
 8005d5c:	e741      	b.n	8005be2 <forward_relu+0xd2>
 8005d5e:	4622      	mov	r2, r4
 8005d60:	e79a      	b.n	8005c98 <forward_relu+0x188>
 8005d62:	68b2      	ldr	r2, [r6, #8]
 8005d64:	4623      	mov	r3, r4
 8005d66:	ed92 7a00 	vldr	s14, [r2]
 8005d6a:	e7c6      	b.n	8005cfa <forward_relu+0x1ea>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	deff      	udf	#255	; 0xff
 8005d72:	bf00      	nop
 8005d74:	00000000 	.word	0x00000000

08005d78 <array_f32_identity>:
 8005d78:	6980      	ldr	r0, [r0, #24]
 8005d7a:	698b      	ldr	r3, [r1, #24]
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	d004      	beq.n	8005d8a <array_f32_identity+0x12>
 8005d80:	68c1      	ldr	r1, [r0, #12]
 8005d82:	68d8      	ldr	r0, [r3, #12]
 8005d84:	0092      	lsls	r2, r2, #2
 8005d86:	f001 bdbb 	b.w	8007900 <st_int8_copy>
 8005d8a:	4770      	bx	lr

08005d8c <forward_lstm>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	ed2d 8b06 	vpush	{d8-d10}
 8005d94:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8005d98:	6983      	ldr	r3, [r0, #24]
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	60b8      	str	r0, [r7, #8]
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	f001 842a 	beq.w	80075fa <forward_lstm+0x186e>
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	f001 8424 	beq.w	80075fa <forward_lstm+0x186e>
 8005db2:	2a02      	cmp	r2, #2
 8005db4:	f001 8421 	beq.w	80075fa <forward_lstm+0x186e>
 8005db8:	69d8      	ldr	r0, [r3, #28]
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f001 8414 	beq.w	80075e8 <forward_lstm+0x185c>
 8005dc0:	8b1b      	ldrh	r3, [r3, #24]
 8005dc2:	6801      	ldr	r1, [r0, #0]
 8005dc4:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	6883      	ldr	r3, [r0, #8]
 8005dcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dd0:	bf88      	it	hi
 8005dd2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8005dd6:	68c3      	ldr	r3, [r0, #12]
 8005dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ddc:	bf98      	it	ls
 8005dde:	f04f 0b00 	movls.w	fp, #0
 8005de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dea:	b10b      	cbz	r3, 8005df0 <forward_lstm+0x64>
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005df4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005df6:	899b      	ldrh	r3, [r3, #12]
 8005df8:	68cd      	ldr	r5, [r1, #12]
 8005dfa:	0099      	lsls	r1, r3, #2
 8005dfc:	3107      	adds	r1, #7
 8005dfe:	08c9      	lsrs	r1, r1, #3
 8005e00:	466c      	mov	r4, sp
 8005e02:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 8005e06:	46a5      	mov	sp, r4
 8005e08:	1ddc      	adds	r4, r3, #7
 8005e0a:	466e      	mov	r6, sp
 8005e0c:	08e4      	lsrs	r4, r4, #3
 8005e0e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8005e12:	46a5      	mov	sp, r4
 8005e14:	68bc      	ldr	r4, [r7, #8]
 8005e16:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8005e1a:	466c      	mov	r4, sp
 8005e1c:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8005e20:	46e5      	mov	sp, ip
 8005e22:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 8005e26:	f8c7 d010 	str.w	sp, [r7, #16]
 8005e2a:	468d      	mov	sp, r1
 8005e2c:	68e9      	ldr	r1, [r5, #12]
 8005e2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e30:	6869      	ldr	r1, [r5, #4]
 8005e32:	6779      	str	r1, [r7, #116]	; 0x74
 8005e34:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8005e38:	ee09 1a10 	vmov	s18, r1
 8005e3c:	46ee      	mov	lr, sp
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f001 83c9 	beq.w	80075d6 <forward_lstm+0x184a>
 8005e44:	6945      	ldr	r5, [r0, #20]
 8005e46:	6901      	ldr	r1, [r0, #16]
 8005e48:	ee09 5a90 	vmov	s19, r5
 8005e4c:	6985      	ldr	r5, [r0, #24]
 8005e4e:	ee0a 1a90 	vmov	s21, r1
 8005e52:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 8005e56:	ee0a 5a10 	vmov	s20, r5
 8005e5a:	b119      	cbz	r1, 8005e64 <forward_lstm+0xd8>
 8005e5c:	6989      	ldr	r1, [r1, #24]
 8005e5e:	6889      	ldr	r1, [r1, #8]
 8005e60:	ee0a 1a90 	vmov	s21, r1
 8005e64:	ee19 1a90 	vmov	r1, s19
 8005e68:	b119      	cbz	r1, 8005e72 <forward_lstm+0xe6>
 8005e6a:	6989      	ldr	r1, [r1, #24]
 8005e6c:	6889      	ldr	r1, [r1, #8]
 8005e6e:	ee09 1a90 	vmov	s19, r1
 8005e72:	ee1a 1a10 	vmov	r1, s20
 8005e76:	b119      	cbz	r1, 8005e80 <forward_lstm+0xf4>
 8005e78:	6989      	ldr	r1, [r1, #24]
 8005e7a:	6889      	ldr	r1, [r1, #8]
 8005e7c:	ee0a 1a10 	vmov	s20, r1
 8005e80:	f1b9 0f00 	cmp.w	r9, #0
 8005e84:	d003      	beq.n	8005e8e <forward_lstm+0x102>
 8005e86:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005e8a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8005e8e:	b108      	cbz	r0, 8005e94 <forward_lstm+0x108>
 8005e90:	6981      	ldr	r1, [r0, #24]
 8005e92:	6888      	ldr	r0, [r1, #8]
 8005e94:	2a03      	cmp	r2, #3
 8005e96:	f001 83b0 	beq.w	80075fa <forward_lstm+0x186e>
 8005e9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005e9e:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8005ea2:	f1ba 0f00 	cmp.w	sl, #0
 8005ea6:	d001      	beq.n	8005eac <forward_lstm+0x120>
 8005ea8:	f8da a000 	ldr.w	sl, [sl]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8005eb2:	4423      	add	r3, r4
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f1ae 0404 	sub.w	r4, lr, #4
 8005eba:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 8005ebe:	60fc      	str	r4, [r7, #12]
 8005ec0:	3e04      	subs	r6, #4
 8005ec2:	f1ce 0e04 	rsb	lr, lr, #4
 8005ec6:	1f15      	subs	r5, r2, #4
 8005ec8:	4699      	mov	r9, r3
 8005eca:	e016      	b.n	8005efa <forward_lstm+0x16e>
 8005ecc:	4423      	add	r3, r4
 8005ece:	f853 200e 	ldr.w	r2, [r3, lr]
 8005ed2:	b1c2      	cbz	r2, 8005f06 <forward_lstm+0x17a>
 8005ed4:	68d3      	ldr	r3, [r2, #12]
 8005ed6:	f846 2f04 	str.w	r2, [r6, #4]!
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	6992      	ldr	r2, [r2, #24]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	f845 3f04 	str.w	r3, [r5, #4]!
 8005ee6:	bf8c      	ite	hi
 8005ee8:	2301      	movhi	r3, #1
 8005eea:	2300      	movls	r3, #0
 8005eec:	f801 3b01 	strb.w	r3, [r1], #1
 8005ef0:	bf8c      	ite	hi
 8005ef2:	4643      	movhi	r3, r8
 8005ef4:	2300      	movls	r3, #0
 8005ef6:	f844 3f04 	str.w	r3, [r4, #4]!
 8005efa:	4549      	cmp	r1, r9
 8005efc:	d003      	beq.n	8005f06 <forward_lstm+0x17a>
 8005efe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e2      	bne.n	8005ecc <forward_lstm+0x140>
 8005f06:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005f0a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005f0e:	689d      	ldr	r5, [r3, #8]
 8005f10:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8005f14:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005f18:	6989      	ldr	r1, [r1, #24]
 8005f1a:	69a4      	ldr	r4, [r4, #24]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	667b      	str	r3, [r7, #100]	; 0x64
 8005f20:	688b      	ldr	r3, [r1, #8]
 8005f22:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f28:	68a3      	ldr	r3, [r4, #8]
 8005f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6992      	ldr	r2, [r2, #24]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	6892      	ldr	r2, [r2, #8]
 8005f34:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f36:	ee19 1a10 	vmov	r1, s18
 8005f3a:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8005f3e:	186a      	adds	r2, r5, r1
 8005f40:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8005f44:	4421      	add	r1, r4
 8005f46:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 8005f4a:	673d      	str	r5, [r7, #112]	; 0x70
 8005f4c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005f50:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8005f54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f58:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	f041 8264 	bne.w	800742a <forward_lstm+0x169e>
 8005f62:	4629      	mov	r1, r5
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f001 826e 	beq.w	8007446 <forward_lstm+0x16ba>
 8005f6a:	ee19 2a10 	vmov	r2, s18
 8005f6e:	f001 fcc7 	bl	8007900 <st_int8_copy>
 8005f72:	ee19 2a10 	vmov	r2, s18
 8005f76:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005f7a:	4648      	mov	r0, r9
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	f001 826f 	beq.w	8007462 <forward_lstm+0x16d6>
 8005f84:	f001 fcbc 	bl	8007900 <st_int8_copy>
 8005f88:	ee19 2a10 	vmov	r2, s18
 8005f8c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005f90:	2000      	movs	r0, #0
 8005f92:	f001 fc59 	bl	8007848 <st_int8_fill>
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	4bab      	ldr	r3, [pc, #684]	; (8006248 <forward_lstm+0x4bc>)
 8005f9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005f9c:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	bf08      	it	eq
 8005fa4:	4619      	moveq	r1, r3
 8005fa6:	6479      	str	r1, [r7, #68]	; 0x44
 8005fa8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005faa:	2900      	cmp	r1, #0
 8005fac:	bf08      	it	eq
 8005fae:	4619      	moveq	r1, r3
 8005fb0:	67f9      	str	r1, [r7, #124]	; 0x7c
 8005fb2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	bf08      	it	eq
 8005fb8:	4619      	moveq	r1, r3
 8005fba:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8005fbe:	6439      	str	r1, [r7, #64]	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f001 8301 	beq.w	80075c8 <forward_lstm+0x183c>
 8005fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fda:	b1b3      	cbz	r3, 800600a <forward_lstm+0x27e>
 8005fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fe0:	899d      	ldrh	r5, [r3, #12]
 8005fe2:	b195      	cbz	r5, 800600a <forward_lstm+0x27e>
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005fee:	1e5e      	subs	r6, r3, #1
 8005ff0:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8005ff4:	6811      	ldr	r1, [r2, #0]
 8005ff6:	fb03 f406 	mul.w	r4, r3, r6
 8005ffa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ffe:	f842 1b04 	str.w	r1, [r2], #4
 8006002:	425b      	negs	r3, r3
 8006004:	4295      	cmp	r5, r2
 8006006:	6003      	str	r3, [r0, #0]
 8006008:	d1f2      	bne.n	8005ff0 <forward_lstm+0x264>
 800600a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800600c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800600e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006012:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8006250 <forward_lstm+0x4c4>
 8006016:	b2a9      	uxth	r1, r5
 8006018:	fa1f f288 	uxth.w	r2, r8
 800601c:	f1a1 0310 	sub.w	r3, r1, #16
 8006020:	0096      	lsls	r6, r2, #2
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006028:	3301      	adds	r3, #1
 800602a:	fb06 f101 	mul.w	r1, r6, r1
 800602e:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8006032:	019b      	lsls	r3, r3, #6
 8006034:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8006036:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800603a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800603e:	f1a2 0310 	sub.w	r3, r2, #16
 8006042:	fb02 f202 	mul.w	r2, r2, r2
 8006046:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 800604a:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 800604e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8006050:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 800605a:	1c5c      	adds	r4, r3, #1
 800605c:	019b      	lsls	r3, r3, #6
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	01a3      	lsls	r3, r4, #6
 8006062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006068:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 800606c:	440b      	add	r3, r1
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006072:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006076:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 800607a:	440b      	add	r3, r1
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
 800607e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006080:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
 8006086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006088:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800608c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800608e:	633b      	str	r3, [r7, #48]	; 0x30
 8006090:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8006094:	4633      	mov	r3, r6
 8006096:	1996      	adds	r6, r2, r6
 8006098:	62fe      	str	r6, [r7, #44]	; 0x2c
 800609a:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800609c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80060a0:	441e      	add	r6, r3
 80060a2:	62be      	str	r6, [r7, #40]	; 0x28
 80060a4:	18e6      	adds	r6, r4, r3
 80060a6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80060a8:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 80060ac:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 80060b0:	ea04 0600 	and.w	r6, r4, r0
 80060b4:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 80060b8:	ea08 0600 	and.w	r6, r8, r0
 80060bc:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 80060c0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80060c4:	0089      	lsls	r1, r1, #2
 80060c6:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80060ca:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80060cc:	00ad      	lsls	r5, r5, #2
 80060ce:	fb05 f101 	mul.w	r1, r5, r1
 80060d2:	61b9      	str	r1, [r7, #24]
 80060d4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80060d8:	fb05 f501 	mul.w	r5, r5, r1
 80060dc:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 80060e0:	4661      	mov	r1, ip
 80060e2:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 80060e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80060ea:	61fd      	str	r5, [r7, #28]
 80060ec:	4419      	add	r1, r3
 80060ee:	6279      	str	r1, [r7, #36]	; 0x24
 80060f0:	18d1      	adds	r1, r2, r3
 80060f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80060f6:	f008 060f 	and.w	r6, r8, #15
 80060fa:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006106:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800610a:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800610e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006112:	4413      	add	r3, r2
 8006114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006118:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800611c:	4b4b      	ldr	r3, [pc, #300]	; (800624c <forward_lstm+0x4c0>)
 800611e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006122:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8006126:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 800612a:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 800612e:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8006132:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006144:	4403      	add	r3, r0
 8006146:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800614a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800614e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006152:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8006156:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 800615a:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 800615e:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8006162:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006166:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8006168:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 800616c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006170:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8006174:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8006178:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 800617c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8006180:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8006184:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006188:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 800618c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8006190:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8006194:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8006198:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 800619c:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	f001 81a2 	beq.w	80074ea <forward_lstm+0x175e>
 80061a6:	6a38      	ldr	r0, [r7, #32]
 80061a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80061ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061b0:	46a9      	mov	r9, r5
 80061b2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80061b4:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 80061b8:	3080      	adds	r0, #128	; 0x80
 80061ba:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80061bc:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 80061c0:	4410      	add	r0, r2
 80061c2:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80061c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80061ca:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 80061ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061d2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80061d6:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 80061da:	1955      	adds	r5, r2, r5
 80061dc:	469e      	mov	lr, r3
 80061de:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 80061e2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80061e6:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 80061ea:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 80061ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061f2:	442a      	add	r2, r5
 80061f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80061fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800620a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800620c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006214:	f002 020f 	and.w	r2, r2, #15
 8006218:	46a0      	mov	r8, r4
 800621a:	468c      	mov	ip, r1
 800621c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8006220:	469a      	mov	sl, r3
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006250 <forward_lstm+0x4c4>
 800622a:	ecac 8a01 	vstmia	ip!, {s16}
 800622e:	2b00      	cmp	r3, #0
 8006230:	f001 8154 	beq.w	80074dc <forward_lstm+0x1750>
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800623c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006240:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8006244:	e006      	b.n	8006254 <forward_lstm+0x4c8>
 8006246:	bf00      	nop
 8006248:	08005d79 	.word	0x08005d79
 800624c:	01821040 	.word	0x01821040
 8006250:	00000000 	.word	0x00000000
 8006254:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006258:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800625c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006260:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006264:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006268:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800626c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006270:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006274:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006278:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800627c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006280:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006284:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006288:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800628c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8006290:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006294:	3910      	subs	r1, #16
 8006296:	290f      	cmp	r1, #15
 8006298:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800629c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80062a0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80062a4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80062a8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80062ac:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80062b0:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80062b4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80062b8:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80062bc:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80062c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062c4:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80062c8:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80062cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062d0:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80062d4:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80062d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80062dc:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80062e0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80062e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80062e8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80062ec:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80062f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062f4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80062f8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80062fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006300:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006304:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8006308:	eee1 7a21 	vfma.f32	s15, s2, s3
 800630c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006310:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006314:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006318:	eee5 7a25 	vfma.f32	s15, s10, s11
 800631c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006324:	d896      	bhi.n	8006254 <forward_lstm+0x4c8>
 8006326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632a:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 800632e:	4453      	add	r3, sl
 8006330:	2d00      	cmp	r5, #0
 8006332:	d076      	beq.n	8006422 <forward_lstm+0x696>
 8006334:	edd4 6a00 	vldr	s13, [r4]
 8006338:	edd3 7a00 	vldr	s15, [r3]
 800633c:	2d01      	cmp	r5, #1
 800633e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006342:	d06e      	beq.n	8006422 <forward_lstm+0x696>
 8006344:	edd3 6a01 	vldr	s13, [r3, #4]
 8006348:	edd4 7a01 	vldr	s15, [r4, #4]
 800634c:	2d02      	cmp	r5, #2
 800634e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006352:	d066      	beq.n	8006422 <forward_lstm+0x696>
 8006354:	edd3 6a02 	vldr	s13, [r3, #8]
 8006358:	edd4 7a02 	vldr	s15, [r4, #8]
 800635c:	2d03      	cmp	r5, #3
 800635e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006362:	d05e      	beq.n	8006422 <forward_lstm+0x696>
 8006364:	edd3 6a03 	vldr	s13, [r3, #12]
 8006368:	edd4 7a03 	vldr	s15, [r4, #12]
 800636c:	2d04      	cmp	r5, #4
 800636e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006372:	d056      	beq.n	8006422 <forward_lstm+0x696>
 8006374:	edd3 6a04 	vldr	s13, [r3, #16]
 8006378:	edd4 7a04 	vldr	s15, [r4, #16]
 800637c:	2d05      	cmp	r5, #5
 800637e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006382:	d04e      	beq.n	8006422 <forward_lstm+0x696>
 8006384:	edd3 6a05 	vldr	s13, [r3, #20]
 8006388:	edd4 7a05 	vldr	s15, [r4, #20]
 800638c:	2d06      	cmp	r5, #6
 800638e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006392:	d046      	beq.n	8006422 <forward_lstm+0x696>
 8006394:	edd3 6a06 	vldr	s13, [r3, #24]
 8006398:	edd4 7a06 	vldr	s15, [r4, #24]
 800639c:	2d07      	cmp	r5, #7
 800639e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063a2:	d03e      	beq.n	8006422 <forward_lstm+0x696>
 80063a4:	edd3 6a07 	vldr	s13, [r3, #28]
 80063a8:	edd4 7a07 	vldr	s15, [r4, #28]
 80063ac:	2d08      	cmp	r5, #8
 80063ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063b2:	d036      	beq.n	8006422 <forward_lstm+0x696>
 80063b4:	edd3 6a08 	vldr	s13, [r3, #32]
 80063b8:	edd4 7a08 	vldr	s15, [r4, #32]
 80063bc:	2d09      	cmp	r5, #9
 80063be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063c2:	d02e      	beq.n	8006422 <forward_lstm+0x696>
 80063c4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80063c8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80063cc:	2d0a      	cmp	r5, #10
 80063ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063d2:	d026      	beq.n	8006422 <forward_lstm+0x696>
 80063d4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80063d8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80063dc:	2d0b      	cmp	r5, #11
 80063de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063e2:	d01e      	beq.n	8006422 <forward_lstm+0x696>
 80063e4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80063e8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80063ec:	2d0c      	cmp	r5, #12
 80063ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063f2:	d016      	beq.n	8006422 <forward_lstm+0x696>
 80063f4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80063f8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80063fc:	f1b5 020d 	subs.w	r2, r5, #13
 8006400:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006404:	d00d      	beq.n	8006422 <forward_lstm+0x696>
 8006406:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800640a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800640e:	2a01      	cmp	r2, #1
 8006410:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006414:	d005      	beq.n	8006422 <forward_lstm+0x696>
 8006416:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800641a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800641e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006426:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8006250 <forward_lstm+0x4c4>
 800642a:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f001 804c 	beq.w	80074cc <forward_lstm+0x1740>
 8006434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006438:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800643c:	3340      	adds	r3, #64	; 0x40
 800643e:	3240      	adds	r2, #64	; 0x40
 8006440:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8006444:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8006448:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800644c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006450:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8006454:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8006458:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 800645c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006460:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8006464:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8006468:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800646c:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8006470:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006474:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006478:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 800647c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006480:	3340      	adds	r3, #64	; 0x40
 8006482:	3240      	adds	r2, #64	; 0x40
 8006484:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8006488:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800648c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006490:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8006494:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8006498:	eee4 7a06 	vfma.f32	s15, s8, s12
 800649c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80064a0:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 80064a4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064a8:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80064ac:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80064b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80064b4:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80064b8:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80064bc:	eee2 7a83 	vfma.f32	s15, s5, s6
 80064c0:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80064c4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80064c8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80064cc:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80064d0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80064d4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064d8:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80064dc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80064e0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80064e4:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80064e8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80064ec:	eee0 7a81 	vfma.f32	s15, s1, s2
 80064f0:	4298      	cmp	r0, r3
 80064f2:	eee1 7a82 	vfma.f32	s15, s3, s4
 80064f6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80064fa:	eee3 7a84 	vfma.f32	s15, s7, s8
 80064fe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006502:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006506:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800650a:	d199      	bne.n	8006440 <forward_lstm+0x6b4>
 800650c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006510:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006514:	189a      	adds	r2, r3, r2
 8006516:	2e00      	cmp	r6, #0
 8006518:	d078      	beq.n	800660c <forward_lstm+0x880>
 800651a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800651e:	4633      	mov	r3, r6
 8006520:	ed91 6a00 	vldr	s12, [r1]
 8006524:	edd2 7a00 	vldr	s15, [r2]
 8006528:	2b01      	cmp	r3, #1
 800652a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800652e:	d06d      	beq.n	800660c <forward_lstm+0x880>
 8006530:	ed91 6a01 	vldr	s12, [r1, #4]
 8006534:	edd2 7a01 	vldr	s15, [r2, #4]
 8006538:	2b02      	cmp	r3, #2
 800653a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800653e:	d065      	beq.n	800660c <forward_lstm+0x880>
 8006540:	ed91 6a02 	vldr	s12, [r1, #8]
 8006544:	edd2 7a02 	vldr	s15, [r2, #8]
 8006548:	2b03      	cmp	r3, #3
 800654a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800654e:	d05d      	beq.n	800660c <forward_lstm+0x880>
 8006550:	ed91 6a03 	vldr	s12, [r1, #12]
 8006554:	edd2 7a03 	vldr	s15, [r2, #12]
 8006558:	2b04      	cmp	r3, #4
 800655a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800655e:	d055      	beq.n	800660c <forward_lstm+0x880>
 8006560:	ed91 6a04 	vldr	s12, [r1, #16]
 8006564:	edd2 7a04 	vldr	s15, [r2, #16]
 8006568:	2b05      	cmp	r3, #5
 800656a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800656e:	d04d      	beq.n	800660c <forward_lstm+0x880>
 8006570:	ed91 6a05 	vldr	s12, [r1, #20]
 8006574:	edd2 7a05 	vldr	s15, [r2, #20]
 8006578:	2b06      	cmp	r3, #6
 800657a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800657e:	d045      	beq.n	800660c <forward_lstm+0x880>
 8006580:	ed91 6a06 	vldr	s12, [r1, #24]
 8006584:	edd2 7a06 	vldr	s15, [r2, #24]
 8006588:	2b07      	cmp	r3, #7
 800658a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800658e:	d03d      	beq.n	800660c <forward_lstm+0x880>
 8006590:	ed91 6a07 	vldr	s12, [r1, #28]
 8006594:	edd2 7a07 	vldr	s15, [r2, #28]
 8006598:	2b08      	cmp	r3, #8
 800659a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800659e:	d035      	beq.n	800660c <forward_lstm+0x880>
 80065a0:	ed91 6a08 	vldr	s12, [r1, #32]
 80065a4:	edd2 7a08 	vldr	s15, [r2, #32]
 80065a8:	2b09      	cmp	r3, #9
 80065aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065ae:	d02d      	beq.n	800660c <forward_lstm+0x880>
 80065b0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80065b4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80065b8:	2b0a      	cmp	r3, #10
 80065ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065be:	d025      	beq.n	800660c <forward_lstm+0x880>
 80065c0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80065c4:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80065c8:	2b0b      	cmp	r3, #11
 80065ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065ce:	d01d      	beq.n	800660c <forward_lstm+0x880>
 80065d0:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80065d4:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065de:	d015      	beq.n	800660c <forward_lstm+0x880>
 80065e0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80065e4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80065e8:	3b0d      	subs	r3, #13
 80065ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065ee:	d00d      	beq.n	800660c <forward_lstm+0x880>
 80065f0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80065f4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80065fe:	d005      	beq.n	800660c <forward_lstm+0x880>
 8006600:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8006604:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006608:	eee6 6a27 	vfma.f32	s13, s12, s15
 800660c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006610:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8006614:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006618:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800661c:	ecb3 6a01 	vldmia	r3!, {s12}
 8006620:	edd9 6a00 	vldr	s13, [r9]
 8006624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800662c:	ecf3 7a01 	vldmia	r3!, {s15}
 8006630:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006640:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8006644:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8006934 <forward_lstm+0xba8>
 8006648:	ed88 8a00 	vstr	s16, [r8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8739 	beq.w	80074c4 <forward_lstm+0x1738>
 8006652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006656:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800665a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800665e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006662:	3340      	adds	r3, #64	; 0x40
 8006664:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006668:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800666c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006670:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006674:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006678:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800667c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006680:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006684:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006688:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800668c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006690:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006694:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006698:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800669c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80066a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80066a4:	3910      	subs	r1, #16
 80066a6:	290f      	cmp	r1, #15
 80066a8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 80066ac:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80066b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80066b4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80066b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80066bc:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80066c0:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80066c4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80066c8:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80066cc:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80066d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80066d4:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80066d8:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80066dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80066e0:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80066e4:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80066e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80066ec:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80066f0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80066f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80066f8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80066fc:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8006700:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006704:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006708:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800670c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006710:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006714:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8006718:	eee1 7a21 	vfma.f32	s15, s2, s3
 800671c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006720:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006724:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006728:	eee5 7a25 	vfma.f32	s15, s10, s11
 800672c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006734:	d896      	bhi.n	8006664 <forward_lstm+0x8d8>
 8006736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800673a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800673e:	4413      	add	r3, r2
 8006740:	2d00      	cmp	r5, #0
 8006742:	d076      	beq.n	8006832 <forward_lstm+0xaa6>
 8006744:	edd4 6a00 	vldr	s13, [r4]
 8006748:	edd3 7a00 	vldr	s15, [r3]
 800674c:	2d01      	cmp	r5, #1
 800674e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006752:	d06e      	beq.n	8006832 <forward_lstm+0xaa6>
 8006754:	edd4 6a01 	vldr	s13, [r4, #4]
 8006758:	edd3 7a01 	vldr	s15, [r3, #4]
 800675c:	2d02      	cmp	r5, #2
 800675e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006762:	d066      	beq.n	8006832 <forward_lstm+0xaa6>
 8006764:	edd4 6a02 	vldr	s13, [r4, #8]
 8006768:	edd3 7a02 	vldr	s15, [r3, #8]
 800676c:	2d03      	cmp	r5, #3
 800676e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006772:	d05e      	beq.n	8006832 <forward_lstm+0xaa6>
 8006774:	edd4 6a03 	vldr	s13, [r4, #12]
 8006778:	edd3 7a03 	vldr	s15, [r3, #12]
 800677c:	2d04      	cmp	r5, #4
 800677e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006782:	d056      	beq.n	8006832 <forward_lstm+0xaa6>
 8006784:	edd4 6a04 	vldr	s13, [r4, #16]
 8006788:	edd3 7a04 	vldr	s15, [r3, #16]
 800678c:	2d05      	cmp	r5, #5
 800678e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006792:	d04e      	beq.n	8006832 <forward_lstm+0xaa6>
 8006794:	edd4 6a05 	vldr	s13, [r4, #20]
 8006798:	edd3 7a05 	vldr	s15, [r3, #20]
 800679c:	2d06      	cmp	r5, #6
 800679e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067a2:	d046      	beq.n	8006832 <forward_lstm+0xaa6>
 80067a4:	edd4 6a06 	vldr	s13, [r4, #24]
 80067a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80067ac:	2d07      	cmp	r5, #7
 80067ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067b2:	d03e      	beq.n	8006832 <forward_lstm+0xaa6>
 80067b4:	edd4 6a07 	vldr	s13, [r4, #28]
 80067b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80067bc:	2d08      	cmp	r5, #8
 80067be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067c2:	d036      	beq.n	8006832 <forward_lstm+0xaa6>
 80067c4:	edd4 6a08 	vldr	s13, [r4, #32]
 80067c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80067cc:	2d09      	cmp	r5, #9
 80067ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067d2:	d02e      	beq.n	8006832 <forward_lstm+0xaa6>
 80067d4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80067d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80067dc:	2d0a      	cmp	r5, #10
 80067de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067e2:	d026      	beq.n	8006832 <forward_lstm+0xaa6>
 80067e4:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80067e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80067ec:	2d0b      	cmp	r5, #11
 80067ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067f2:	d01e      	beq.n	8006832 <forward_lstm+0xaa6>
 80067f4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80067f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80067fc:	2d0c      	cmp	r5, #12
 80067fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006802:	d016      	beq.n	8006832 <forward_lstm+0xaa6>
 8006804:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8006808:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800680c:	f1b5 020d 	subs.w	r2, r5, #13
 8006810:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006814:	d00d      	beq.n	8006832 <forward_lstm+0xaa6>
 8006816:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800681a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800681e:	2a01      	cmp	r2, #1
 8006820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006824:	d005      	beq.n	8006832 <forward_lstm+0xaa6>
 8006826:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800682a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800682e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006836:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8006934 <forward_lstm+0xba8>
 800683a:	ed88 7a00 	vstr	s14, [r8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8638 	beq.w	80074b4 <forward_lstm+0x1728>
 8006844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006848:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800684c:	3340      	adds	r3, #64	; 0x40
 800684e:	3240      	adds	r2, #64	; 0x40
 8006850:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8006854:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8006858:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800685c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006860:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8006864:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8006868:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 800686c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006870:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8006874:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8006878:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800687c:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8006880:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006884:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006888:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 800688c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006890:	3340      	adds	r3, #64	; 0x40
 8006892:	3240      	adds	r2, #64	; 0x40
 8006894:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8006898:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800689c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80068a0:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 80068a4:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80068a8:	eee4 7a06 	vfma.f32	s15, s8, s12
 80068ac:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80068b0:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 80068b4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80068b8:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80068bc:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80068c0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80068c4:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80068c8:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80068cc:	eee2 7a83 	vfma.f32	s15, s5, s6
 80068d0:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80068d4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80068d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80068dc:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80068e0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80068e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80068e8:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80068ec:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80068f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80068f4:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80068f8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80068fc:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006900:	4283      	cmp	r3, r0
 8006902:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006906:	eee2 7a83 	vfma.f32	s15, s5, s6
 800690a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800690e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006912:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006916:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800691a:	d199      	bne.n	8006850 <forward_lstm+0xac4>
 800691c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006920:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006924:	189a      	adds	r2, r3, r2
 8006926:	2e00      	cmp	r6, #0
 8006928:	d07c      	beq.n	8006a24 <forward_lstm+0xc98>
 800692a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800692e:	4633      	mov	r3, r6
 8006930:	e002      	b.n	8006938 <forward_lstm+0xbac>
 8006932:	bf00      	nop
 8006934:	00000000 	.word	0x00000000
 8006938:	ed91 6a00 	vldr	s12, [r1]
 800693c:	edd2 7a00 	vldr	s15, [r2]
 8006940:	2b01      	cmp	r3, #1
 8006942:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006946:	d06d      	beq.n	8006a24 <forward_lstm+0xc98>
 8006948:	ed91 6a01 	vldr	s12, [r1, #4]
 800694c:	edd2 7a01 	vldr	s15, [r2, #4]
 8006950:	2b02      	cmp	r3, #2
 8006952:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006956:	d065      	beq.n	8006a24 <forward_lstm+0xc98>
 8006958:	ed91 6a02 	vldr	s12, [r1, #8]
 800695c:	edd2 7a02 	vldr	s15, [r2, #8]
 8006960:	2b03      	cmp	r3, #3
 8006962:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006966:	d05d      	beq.n	8006a24 <forward_lstm+0xc98>
 8006968:	ed91 6a03 	vldr	s12, [r1, #12]
 800696c:	edd2 7a03 	vldr	s15, [r2, #12]
 8006970:	2b04      	cmp	r3, #4
 8006972:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006976:	d055      	beq.n	8006a24 <forward_lstm+0xc98>
 8006978:	ed91 6a04 	vldr	s12, [r1, #16]
 800697c:	edd2 7a04 	vldr	s15, [r2, #16]
 8006980:	2b05      	cmp	r3, #5
 8006982:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006986:	d04d      	beq.n	8006a24 <forward_lstm+0xc98>
 8006988:	ed91 6a05 	vldr	s12, [r1, #20]
 800698c:	edd2 7a05 	vldr	s15, [r2, #20]
 8006990:	2b06      	cmp	r3, #6
 8006992:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006996:	d045      	beq.n	8006a24 <forward_lstm+0xc98>
 8006998:	ed91 6a06 	vldr	s12, [r1, #24]
 800699c:	edd2 7a06 	vldr	s15, [r2, #24]
 80069a0:	2b07      	cmp	r3, #7
 80069a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069a6:	d03d      	beq.n	8006a24 <forward_lstm+0xc98>
 80069a8:	ed91 6a07 	vldr	s12, [r1, #28]
 80069ac:	edd2 7a07 	vldr	s15, [r2, #28]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069b6:	d035      	beq.n	8006a24 <forward_lstm+0xc98>
 80069b8:	ed91 6a08 	vldr	s12, [r1, #32]
 80069bc:	edd2 7a08 	vldr	s15, [r2, #32]
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069c6:	d02d      	beq.n	8006a24 <forward_lstm+0xc98>
 80069c8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80069cc:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80069d0:	2b0a      	cmp	r3, #10
 80069d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069d6:	d025      	beq.n	8006a24 <forward_lstm+0xc98>
 80069d8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80069dc:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80069e0:	2b0b      	cmp	r3, #11
 80069e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069e6:	d01d      	beq.n	8006a24 <forward_lstm+0xc98>
 80069e8:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80069ec:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80069f6:	d015      	beq.n	8006a24 <forward_lstm+0xc98>
 80069f8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80069fc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006a00:	3b0d      	subs	r3, #13
 8006a02:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a06:	d00d      	beq.n	8006a24 <forward_lstm+0xc98>
 8006a08:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8006a0c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a16:	d005      	beq.n	8006a24 <forward_lstm+0xc98>
 8006a18:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8006a1c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006a20:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a28:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006a2c:	f109 0904 	add.w	r9, r9, #4
 8006a30:	ed88 7a00 	vstr	s14, [r8]
 8006a34:	edd3 7a00 	vldr	s15, [r3]
 8006a38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a3c:	ecb3 6a01 	vldmia	r3!, {s12}
 8006a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a48:	ecf3 6a01 	vldmia	r3!, {s13}
 8006a4c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006a5c:	eca8 7a01 	vstmia	r8!, {s14}
 8006a60:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8006934 <forward_lstm+0xba8>
 8006a64:	ed8e 8a00 	vstr	s16, [lr]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 851f 	beq.w	80074ac <forward_lstm+0x1720>
 8006a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006a76:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	3340      	adds	r3, #64	; 0x40
 8006a80:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006a84:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006a88:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006a8c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006a90:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006a94:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8006a98:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006a9c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006aa0:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006aa4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006aa8:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006aac:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006ab0:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006ab4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006ab8:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8006abc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ac0:	3910      	subs	r1, #16
 8006ac2:	290f      	cmp	r1, #15
 8006ac4:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8006ac8:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8006acc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ad0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006ad4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006ad8:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8006adc:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006ae0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006ae4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8006ae8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8006aec:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006af0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006af4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8006af8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006afc:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006b00:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8006b04:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b08:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006b0c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8006b10:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b14:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8006b18:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8006b1c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b20:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006b24:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8006b28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b2c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006b30:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8006b34:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006b38:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006b3c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b40:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b44:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b50:	d896      	bhi.n	8006a80 <forward_lstm+0xcf4>
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	d076      	beq.n	8006c4e <forward_lstm+0xec2>
 8006b60:	edd4 6a00 	vldr	s13, [r4]
 8006b64:	edd3 7a00 	vldr	s15, [r3]
 8006b68:	2d01      	cmp	r5, #1
 8006b6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b6e:	d06e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006b70:	edd4 6a01 	vldr	s13, [r4, #4]
 8006b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b78:	2d02      	cmp	r5, #2
 8006b7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b7e:	d066      	beq.n	8006c4e <forward_lstm+0xec2>
 8006b80:	edd4 6a02 	vldr	s13, [r4, #8]
 8006b84:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b88:	2d03      	cmp	r5, #3
 8006b8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b8e:	d05e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006b90:	edd4 6a03 	vldr	s13, [r4, #12]
 8006b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b98:	2d04      	cmp	r5, #4
 8006b9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b9e:	d056      	beq.n	8006c4e <forward_lstm+0xec2>
 8006ba0:	edd4 6a04 	vldr	s13, [r4, #16]
 8006ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ba8:	2d05      	cmp	r5, #5
 8006baa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bae:	d04e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006bb0:	edd4 6a05 	vldr	s13, [r4, #20]
 8006bb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8006bb8:	2d06      	cmp	r5, #6
 8006bba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bbe:	d046      	beq.n	8006c4e <forward_lstm+0xec2>
 8006bc0:	edd4 6a06 	vldr	s13, [r4, #24]
 8006bc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8006bc8:	2d07      	cmp	r5, #7
 8006bca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bce:	d03e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006bd0:	edd4 6a07 	vldr	s13, [r4, #28]
 8006bd4:	edd3 7a07 	vldr	s15, [r3, #28]
 8006bd8:	2d08      	cmp	r5, #8
 8006bda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bde:	d036      	beq.n	8006c4e <forward_lstm+0xec2>
 8006be0:	edd4 6a08 	vldr	s13, [r4, #32]
 8006be4:	edd3 7a08 	vldr	s15, [r3, #32]
 8006be8:	2d09      	cmp	r5, #9
 8006bea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bee:	d02e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006bf0:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8006bf4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006bf8:	2d0a      	cmp	r5, #10
 8006bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bfe:	d026      	beq.n	8006c4e <forward_lstm+0xec2>
 8006c00:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8006c04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006c08:	2d0b      	cmp	r5, #11
 8006c0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c0e:	d01e      	beq.n	8006c4e <forward_lstm+0xec2>
 8006c10:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8006c14:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006c18:	2d0c      	cmp	r5, #12
 8006c1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c1e:	d016      	beq.n	8006c4e <forward_lstm+0xec2>
 8006c20:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8006c24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006c28:	f1b5 020d 	subs.w	r2, r5, #13
 8006c2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c30:	d00d      	beq.n	8006c4e <forward_lstm+0xec2>
 8006c32:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8006c36:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c3a:	2a01      	cmp	r2, #1
 8006c3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c40:	d005      	beq.n	8006c4e <forward_lstm+0xec2>
 8006c42:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8006c46:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8006c4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c52:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8006934 <forward_lstm+0xba8>
 8006c56:	ed8e 7a00 	vstr	s14, [lr]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 8420 	beq.w	80074a0 <forward_lstm+0x1714>
 8006c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c64:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 8006c68:	3340      	adds	r3, #64	; 0x40
 8006c6a:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8006c6e:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8006c72:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8006c76:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006c7a:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8006c7e:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8006c82:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8006c86:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006c8a:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8006c8e:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8006c92:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006c96:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8006c9a:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006c9e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006ca2:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8006ca6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006caa:	3340      	adds	r3, #64	; 0x40
 8006cac:	3240      	adds	r2, #64	; 0x40
 8006cae:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8006cb2:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8006cb6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cba:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8006cbe:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8006cc2:	eee4 7a06 	vfma.f32	s15, s8, s12
 8006cc6:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006cca:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8006cce:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cd2:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8006cd6:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006cda:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006cde:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8006ce2:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006ce6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006cea:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8006cee:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006cf2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006cf6:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8006cfa:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8006cfe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006d02:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8006d06:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8006d0a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006d0e:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8006d12:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8006d16:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006d1a:	4283      	cmp	r3, r0
 8006d1c:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006d20:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006d24:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006d28:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006d2c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006d30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006d34:	d199      	bne.n	8006c6a <forward_lstm+0xede>
 8006d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3a:	eb0b 0203 	add.w	r2, fp, r3
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	d078      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d42:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006d46:	4633      	mov	r3, r6
 8006d48:	ed91 6a00 	vldr	s12, [r1]
 8006d4c:	edd2 7a00 	vldr	s15, [r2]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006d56:	d06d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d58:	ed91 6a01 	vldr	s12, [r1, #4]
 8006d5c:	edd2 7a01 	vldr	s15, [r2, #4]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006d66:	d065      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d68:	ed91 6a02 	vldr	s12, [r1, #8]
 8006d6c:	edd2 7a02 	vldr	s15, [r2, #8]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006d76:	d05d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d78:	ed91 6a03 	vldr	s12, [r1, #12]
 8006d7c:	edd2 7a03 	vldr	s15, [r2, #12]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006d86:	d055      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d88:	ed91 6a04 	vldr	s12, [r1, #16]
 8006d8c:	edd2 7a04 	vldr	s15, [r2, #16]
 8006d90:	2b05      	cmp	r3, #5
 8006d92:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006d96:	d04d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006d98:	ed91 6a05 	vldr	s12, [r1, #20]
 8006d9c:	edd2 7a05 	vldr	s15, [r2, #20]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006da6:	d045      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006da8:	ed91 6a06 	vldr	s12, [r1, #24]
 8006dac:	edd2 7a06 	vldr	s15, [r2, #24]
 8006db0:	2b07      	cmp	r3, #7
 8006db2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006db6:	d03d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006db8:	ed91 6a07 	vldr	s12, [r1, #28]
 8006dbc:	edd2 7a07 	vldr	s15, [r2, #28]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006dc6:	d035      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006dc8:	ed91 6a08 	vldr	s12, [r1, #32]
 8006dcc:	edd2 7a08 	vldr	s15, [r2, #32]
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006dd6:	d02d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006dd8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8006ddc:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006de0:	2b0a      	cmp	r3, #10
 8006de2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006de6:	d025      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006de8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8006dec:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006df0:	2b0b      	cmp	r3, #11
 8006df2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006df6:	d01d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006df8:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8006dfc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006e00:	2b0c      	cmp	r3, #12
 8006e02:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006e06:	d015      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006e08:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8006e0c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006e10:	3b0d      	subs	r3, #13
 8006e12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006e16:	d00d      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006e18:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8006e1c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006e26:	d005      	beq.n	8006e34 <forward_lstm+0x10a8>
 8006e28:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8006e2c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006e30:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006e34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e38:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8006e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006e44:	449a      	add	sl, r3
 8006e46:	ed8e 7a00 	vstr	s14, [lr]
 8006e4a:	ecf2 7a01 	vldmia	r2!, {s15}
 8006e4e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8006e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e56:	4411      	add	r1, r2
 8006e58:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006e5c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8006e60:	4419      	add	r1, r3
 8006e62:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8006e66:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006e6a:	4411      	add	r1, r2
 8006e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e70:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8006e74:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006e78:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8006e7c:	4419      	add	r1, r3
 8006e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e82:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8a:	bf88      	it	hi
 8006e8c:	eeb0 7a68 	vmovhi.f32	s14, s17
 8006e90:	4563      	cmp	r3, ip
 8006e92:	ecae 7a01 	vstmia	lr!, {s14}
 8006e96:	4493      	add	fp, r2
 8006e98:	f47f a9c3 	bne.w	8006222 <forward_lstm+0x496>
 8006e9c:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8006ea0:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 8006ea4:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4608      	mov	r0, r1
 8006eac:	ee19 3a90 	vmov	r3, s19
 8006eb0:	46a3      	mov	fp, r4
 8006eb2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006eb4:	47a0      	blx	r4
 8006eb6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8006eba:	4642      	mov	r2, r8
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	ee19 3a90 	vmov	r3, s19
 8006ec2:	47a0      	blx	r4
 8006ec4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8006ec8:	4642      	mov	r2, r8
 8006eca:	4608      	mov	r0, r1
 8006ecc:	ee1a 3a90 	vmov	r3, s21
 8006ed0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006ed2:	47a0      	blx	r4
 8006ed4:	1e6a      	subs	r2, r5, #1
 8006ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006eda:	1eaa      	subs	r2, r5, #2
 8006edc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8006ee0:	1eea      	subs	r2, r5, #3
 8006ee2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006ee6:	1f2a      	subs	r2, r5, #4
 8006ee8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8006eec:	1f6a      	subs	r2, r5, #5
 8006eee:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ef2:	1faa      	subs	r2, r5, #6
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006efa:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 8006efe:	1fea      	subs	r2, r5, #7
 8006f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f04:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8006f08:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 8006f0c:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8006f10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f12:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 8006f16:	f1a5 0208 	sub.w	r2, r5, #8
 8006f1a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8006f1e:	465c      	mov	r4, fp
 8006f20:	461e      	mov	r6, r3
 8006f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f26:	ecf8 7a01 	vldmia	r8!, {s15}
 8006f2a:	ecb3 6a01 	vldmia	r3!, {s12}
 8006f2e:	ed9a 7a00 	vldr	s14, [sl]
 8006f32:	ecfe 6a01 	vldmia	lr!, {s13}
 8006f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006f46:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8007264 <forward_lstm+0x14d8>
 8006f4a:	ecea 7a01 	vstmia	sl!, {s15}
 8006f4e:	eca1 8a01 	vstmia	r1!, {s16}
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 82a2 	beq.w	800749c <forward_lstm+0x1710>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5c:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 8006f60:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006f64:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8006f68:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006f6c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006f70:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8006f74:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006f78:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006f7c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8006f80:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8006f84:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006f88:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006f8c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006f90:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8006f94:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006f98:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006f9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006fa0:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8006fa4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006fa8:	f1ab 0b10 	sub.w	fp, fp, #16
 8006fac:	f1bb 0f0f 	cmp.w	fp, #15
 8006fb0:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8006fb4:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8006fb8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006fbc:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006fc0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006fc4:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8006fc8:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8006fcc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006fd0:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8006fd4:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8006fd8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006fdc:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8006fe0:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8006fe4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006fe8:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8006fec:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8006ff0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006ff4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8006ff8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8006ffc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007000:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007004:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007008:	eee5 7a25 	vfma.f32	s15, s10, s11
 800700c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007010:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007014:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007018:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800701c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007020:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007024:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007028:	eee3 7a23 	vfma.f32	s15, s6, s7
 800702c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007030:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007034:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800703c:	d894      	bhi.n	8006f68 <forward_lstm+0x11dc>
 800703e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007042:	18c3      	adds	r3, r0, r3
 8007044:	2d00      	cmp	r5, #0
 8007046:	f000 8085 	beq.w	8007154 <forward_lstm+0x13c8>
 800704a:	edd4 6a00 	vldr	s13, [r4]
 800704e:	edd3 7a00 	vldr	s15, [r3]
 8007052:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007056:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800705a:	2a00      	cmp	r2, #0
 800705c:	d07a      	beq.n	8007154 <forward_lstm+0x13c8>
 800705e:	edd4 6a01 	vldr	s13, [r4, #4]
 8007062:	edd3 7a01 	vldr	s15, [r3, #4]
 8007066:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800706a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800706e:	2a00      	cmp	r2, #0
 8007070:	d070      	beq.n	8007154 <forward_lstm+0x13c8>
 8007072:	edd4 6a02 	vldr	s13, [r4, #8]
 8007076:	edd3 7a02 	vldr	s15, [r3, #8]
 800707a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800707e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007082:	2a00      	cmp	r2, #0
 8007084:	d066      	beq.n	8007154 <forward_lstm+0x13c8>
 8007086:	edd4 6a03 	vldr	s13, [r4, #12]
 800708a:	edd3 7a03 	vldr	s15, [r3, #12]
 800708e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007092:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007096:	2a00      	cmp	r2, #0
 8007098:	d05c      	beq.n	8007154 <forward_lstm+0x13c8>
 800709a:	edd4 6a04 	vldr	s13, [r4, #16]
 800709e:	edd3 7a04 	vldr	s15, [r3, #16]
 80070a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070aa:	2a00      	cmp	r2, #0
 80070ac:	d052      	beq.n	8007154 <forward_lstm+0x13c8>
 80070ae:	edd4 6a05 	vldr	s13, [r4, #20]
 80070b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80070b6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d048      	beq.n	8007154 <forward_lstm+0x13c8>
 80070c2:	edd4 6a06 	vldr	s13, [r4, #24]
 80070c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80070ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80070ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070d2:	b3fa      	cbz	r2, 8007154 <forward_lstm+0x13c8>
 80070d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80070d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80070dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070e4:	b3b2      	cbz	r2, 8007154 <forward_lstm+0x13c8>
 80070e6:	edd4 6a08 	vldr	s13, [r4, #32]
 80070ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80070ee:	2d09      	cmp	r5, #9
 80070f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070f4:	d02e      	beq.n	8007154 <forward_lstm+0x13c8>
 80070f6:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80070fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80070fe:	2d0a      	cmp	r5, #10
 8007100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007104:	d026      	beq.n	8007154 <forward_lstm+0x13c8>
 8007106:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800710a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800710e:	2d0b      	cmp	r5, #11
 8007110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007114:	d01e      	beq.n	8007154 <forward_lstm+0x13c8>
 8007116:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800711a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800711e:	2d0c      	cmp	r5, #12
 8007120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007124:	d016      	beq.n	8007154 <forward_lstm+0x13c8>
 8007126:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800712a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800712e:	f1b5 020d 	subs.w	r2, r5, #13
 8007132:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007136:	d00d      	beq.n	8007154 <forward_lstm+0x13c8>
 8007138:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800713c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007140:	2a01      	cmp	r2, #1
 8007142:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007146:	d005      	beq.n	8007154 <forward_lstm+0x13c8>
 8007148:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800714c:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8007150:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007158:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007264 <forward_lstm+0x14d8>
 800715c:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8195 	beq.w	8007490 <forward_lstm+0x1704>
 8007166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716a:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 800716e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007172:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8007176:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 800717a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800717e:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8007182:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8007186:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 800718a:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 800718e:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8007192:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8007196:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 800719a:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 800719e:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 80071a2:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 80071a6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80071aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80071ae:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 80071b2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80071b6:	f1ab 0b10 	sub.w	fp, fp, #16
 80071ba:	f1bb 0f0f 	cmp.w	fp, #15
 80071be:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 80071c2:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 80071c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80071ca:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80071ce:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80071d2:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 80071d6:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 80071da:	eee4 7a06 	vfma.f32	s15, s8, s12
 80071de:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 80071e2:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 80071e6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80071ea:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 80071ee:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 80071f2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80071f6:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 80071fa:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 80071fe:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007202:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8007206:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800720a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800720e:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8007212:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8007216:	eee4 7a85 	vfma.f32	s15, s9, s10
 800721a:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800721e:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8007222:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007226:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800722a:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800722e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007232:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007236:	eee2 7a83 	vfma.f32	s15, s5, s6
 800723a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800723e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007242:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007246:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800724a:	d894      	bhi.n	8007176 <forward_lstm+0x13ea>
 800724c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007250:	eb0c 0203 	add.w	r2, ip, r3
 8007254:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d07b      	beq.n	8007354 <forward_lstm+0x15c8>
 800725c:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8007260:	e002      	b.n	8007268 <forward_lstm+0x14dc>
 8007262:	bf00      	nop
 8007264:	00000000 	.word	0x00000000
 8007268:	ed9b 6a00 	vldr	s12, [fp]
 800726c:	edd2 7a00 	vldr	s15, [r2]
 8007270:	2b01      	cmp	r3, #1
 8007272:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007276:	d06d      	beq.n	8007354 <forward_lstm+0x15c8>
 8007278:	ed9b 6a01 	vldr	s12, [fp, #4]
 800727c:	edd2 7a01 	vldr	s15, [r2, #4]
 8007280:	2b02      	cmp	r3, #2
 8007282:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007286:	d065      	beq.n	8007354 <forward_lstm+0x15c8>
 8007288:	ed9b 6a02 	vldr	s12, [fp, #8]
 800728c:	edd2 7a02 	vldr	s15, [r2, #8]
 8007290:	2b03      	cmp	r3, #3
 8007292:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007296:	d05d      	beq.n	8007354 <forward_lstm+0x15c8>
 8007298:	ed9b 6a03 	vldr	s12, [fp, #12]
 800729c:	edd2 7a03 	vldr	s15, [r2, #12]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072a6:	d055      	beq.n	8007354 <forward_lstm+0x15c8>
 80072a8:	ed9b 6a04 	vldr	s12, [fp, #16]
 80072ac:	edd2 7a04 	vldr	s15, [r2, #16]
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072b6:	d04d      	beq.n	8007354 <forward_lstm+0x15c8>
 80072b8:	ed9b 6a05 	vldr	s12, [fp, #20]
 80072bc:	edd2 7a05 	vldr	s15, [r2, #20]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072c6:	d045      	beq.n	8007354 <forward_lstm+0x15c8>
 80072c8:	ed9b 6a06 	vldr	s12, [fp, #24]
 80072cc:	edd2 7a06 	vldr	s15, [r2, #24]
 80072d0:	2b07      	cmp	r3, #7
 80072d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072d6:	d03d      	beq.n	8007354 <forward_lstm+0x15c8>
 80072d8:	ed9b 6a07 	vldr	s12, [fp, #28]
 80072dc:	edd2 7a07 	vldr	s15, [r2, #28]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072e6:	d035      	beq.n	8007354 <forward_lstm+0x15c8>
 80072e8:	ed9b 6a08 	vldr	s12, [fp, #32]
 80072ec:	edd2 7a08 	vldr	s15, [r2, #32]
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072f6:	d02d      	beq.n	8007354 <forward_lstm+0x15c8>
 80072f8:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 80072fc:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007300:	2b0a      	cmp	r3, #10
 8007302:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007306:	d025      	beq.n	8007354 <forward_lstm+0x15c8>
 8007308:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 800730c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007310:	2b0b      	cmp	r3, #11
 8007312:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007316:	d01d      	beq.n	8007354 <forward_lstm+0x15c8>
 8007318:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 800731c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007320:	2b0c      	cmp	r3, #12
 8007322:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007326:	d015      	beq.n	8007354 <forward_lstm+0x15c8>
 8007328:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 800732c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007330:	3b0d      	subs	r3, #13
 8007332:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007336:	d00d      	beq.n	8007354 <forward_lstm+0x15c8>
 8007338:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 800733c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007340:	2b01      	cmp	r3, #1
 8007342:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007346:	d005      	beq.n	8007354 <forward_lstm+0x15c8>
 8007348:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 800734c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007350:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007358:	ee37 7a26 	vadd.f32	s14, s14, s13
 800735c:	4418      	add	r0, r3
 800735e:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007362:	ecb6 6a01 	vldmia	r6!, {s12}
 8007366:	ecf9 7a01 	vldmia	r9!, {s15}
 800736a:	ed5a 6a01 	vldr	s13, [sl, #-4]
 800736e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007372:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007376:	449c      	add	ip, r3
 8007378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007380:	459e      	cmp	lr, r3
 8007382:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007386:	f47f adcc 	bne.w	8006f22 <forward_lstm+0x1196>
 800738a:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 800738e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8007390:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8007394:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8007398:	4608      	mov	r0, r1
 800739a:	ee19 3a90 	vmov	r3, s19
 800739e:	462a      	mov	r2, r5
 80073a0:	47a0      	blx	r4
 80073a2:	ee1a 3a10 	vmov	r3, s20
 80073a6:	462a      	mov	r2, r5
 80073a8:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80073ac:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80073ae:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 80073b2:	47a0      	blx	r4
 80073b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073bc:	6979      	ldr	r1, [r7, #20]
 80073be:	ecf3 7a01 	vldmia	r3!, {s15}
 80073c2:	ed92 7a00 	vldr	s14, [r2]
 80073c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073ca:	428b      	cmp	r3, r1
 80073cc:	ece2 7a01 	vstmia	r2!, {s15}
 80073d0:	d1f5      	bne.n	80073be <forward_lstm+0x1632>
 80073d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073d6:	899b      	ldrh	r3, [r3, #12]
 80073d8:	b163      	cbz	r3, 80073f4 <forward_lstm+0x1668>
 80073da:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 80073de:	2400      	movs	r4, #0
 80073e0:	46a8      	mov	r8, r5
 80073e2:	f859 5f04 	ldr.w	r5, [r9, #4]!
 80073e6:	3401      	adds	r4, #1
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	d13e      	bne.n	800746a <forward_lstm+0x16de>
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	f108 0804 	add.w	r8, r8, #4
 80073f2:	dcf6      	bgt.n	80073e2 <forward_lstm+0x1656>
 80073f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80073fa:	428a      	cmp	r2, r1
 80073fc:	f340 809d 	ble.w	800753a <forward_lstm+0x17ae>
 8007400:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007404:	69b9      	ldr	r1, [r7, #24]
 8007406:	440a      	add	r2, r1
 8007408:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800740c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007410:	2a00      	cmp	r2, #0
 8007412:	f2c0 8092 	blt.w	800753a <forward_lstm+0x17ae>
 8007416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800741a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800741e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007426:	f7fe be6b 	b.w	8006100 <forward_lstm+0x374>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4629      	mov	r1, r5
 800742e:	69d8      	ldr	r0, [r3, #28]
 8007430:	f000 fa66 	bl	8007900 <st_int8_copy>
 8007434:	ee19 2a10 	vmov	r2, s18
 8007438:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800743c:	2000      	movs	r0, #0
 800743e:	f000 fa03 	bl	8007848 <st_int8_fill>
 8007442:	f7fe bda8 	b.w	8005f96 <forward_lstm+0x20a>
 8007446:	ee19 2a10 	vmov	r2, s18
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f9fc 	bl	8007848 <st_int8_fill>
 8007450:	ee19 2a10 	vmov	r2, s18
 8007454:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8007458:	4648      	mov	r0, r9
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	f47e ad91 	bne.w	8005f84 <forward_lstm+0x1f8>
 8007462:	f000 f9f1 	bl	8007848 <st_int8_fill>
 8007466:	f7fe bd8f 	b.w	8005f88 <forward_lstm+0x1fc>
 800746a:	f8d8 a000 	ldr.w	sl, [r8]
 800746e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007472:	ee19 2a10 	vmov	r2, s18
 8007476:	4651      	mov	r1, sl
 8007478:	f000 fa42 	bl	8007900 <st_int8_copy>
 800747c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007480:	899b      	ldrh	r3, [r3, #12]
 8007482:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8007486:	42a3      	cmp	r3, r4
 8007488:	f848 5b04 	str.w	r5, [r8], #4
 800748c:	dca9      	bgt.n	80073e2 <forward_lstm+0x1656>
 800748e:	e7b1      	b.n	80073f4 <forward_lstm+0x1668>
 8007490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007494:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8007498:	4662      	mov	r2, ip
 800749a:	e6e5      	b.n	8007268 <forward_lstm+0x14dc>
 800749c:	4603      	mov	r3, r0
 800749e:	e5d1      	b.n	8007044 <forward_lstm+0x12b8>
 80074a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80074a8:	465a      	mov	r2, fp
 80074aa:	e44d      	b.n	8006d48 <forward_lstm+0xfbc>
 80074ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b0:	f7ff bb54 	b.w	8006b5c <forward_lstm+0xdd0>
 80074b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074b8:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80074bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80074c0:	f7ff ba3a 	b.w	8006938 <forward_lstm+0xbac>
 80074c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074c8:	f7ff b93a 	b.w	8006740 <forward_lstm+0x9b4>
 80074cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074d0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80074d4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80074d8:	f7ff b822 	b.w	8006520 <forward_lstm+0x794>
 80074dc:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 80074e0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80074e4:	4653      	mov	r3, sl
 80074e6:	f7fe bf23 	b.w	8006330 <forward_lstm+0x5a4>
 80074ea:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80074ee:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80074f0:	ee19 3a90 	vmov	r3, s19
 80074f4:	4608      	mov	r0, r1
 80074f6:	4690      	mov	r8, r2
 80074f8:	47a0      	blx	r4
 80074fa:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80074fe:	ee19 3a90 	vmov	r3, s19
 8007502:	4642      	mov	r2, r8
 8007504:	4608      	mov	r0, r1
 8007506:	47a0      	blx	r4
 8007508:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800750c:	ee1a 3a90 	vmov	r3, s21
 8007510:	4642      	mov	r2, r8
 8007512:	4608      	mov	r0, r1
 8007514:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8007516:	47a8      	blx	r5
 8007518:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 800751c:	ee19 3a90 	vmov	r3, s19
 8007520:	4642      	mov	r2, r8
 8007522:	4608      	mov	r0, r1
 8007524:	47a0      	blx	r4
 8007526:	ee1a 3a10 	vmov	r3, s20
 800752a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800752c:	4642      	mov	r2, r8
 800752e:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8007532:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8007536:	47a0      	blx	r4
 8007538:	e74b      	b.n	80073d2 <forward_lstm+0x1646>
 800753a:	b353      	cbz	r3, 8007592 <forward_lstm+0x1806>
 800753c:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8007540:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 8007544:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8007548:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800754c:	ee19 ba10 	vmov	fp, s18
 8007550:	2600      	movs	r6, #0
 8007552:	e00b      	b.n	800756c <forward_lstm+0x17e0>
 8007554:	6821      	ldr	r1, [r4, #0]
 8007556:	465a      	mov	r2, fp
 8007558:	4648      	mov	r0, r9
 800755a:	f000 f9d1 	bl	8007900 <st_int8_copy>
 800755e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007562:	3601      	adds	r6, #1
 8007564:	42b3      	cmp	r3, r6
 8007566:	f104 0404 	add.w	r4, r4, #4
 800756a:	dd12      	ble.n	8007592 <forward_lstm+0x1806>
 800756c:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8007570:	2a00      	cmp	r2, #0
 8007572:	d1f6      	bne.n	8007562 <forward_lstm+0x17d6>
 8007574:	3b01      	subs	r3, #1
 8007576:	42b3      	cmp	r3, r6
 8007578:	d1ec      	bne.n	8007554 <forward_lstm+0x17c8>
 800757a:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0e8      	beq.n	8007554 <forward_lstm+0x17c8>
 8007582:	6821      	ldr	r1, [r4, #0]
 8007584:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007586:	465a      	mov	r2, fp
 8007588:	f000 f9ba 	bl	8007900 <st_int8_copy>
 800758c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007590:	e7e7      	b.n	8007562 <forward_lstm+0x17d6>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	b18b      	cbz	r3, 80075ba <forward_lstm+0x182e>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	69dc      	ldr	r4, [r3, #28]
 800759a:	b174      	cbz	r4, 80075ba <forward_lstm+0x182e>
 800759c:	ee19 5a10 	vmov	r5, s18
 80075a0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80075a2:	ee19 2a10 	vmov	r2, s18
 80075a6:	4621      	mov	r1, r4
 80075a8:	f000 f9aa 	bl	8007900 <st_int8_copy>
 80075ac:	ee19 2a10 	vmov	r2, s18
 80075b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80075b4:	1961      	adds	r1, r4, r5
 80075b6:	f000 f9a3 	bl	8007900 <st_int8_copy>
 80075ba:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 80075be:	46bd      	mov	sp, r7
 80075c0:	ecbd 8b06 	vpop	{d8-d10}
 80075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075cc:	2301      	movs	r3, #1
 80075ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d0:	4613      	mov	r3, r2
 80075d2:	f7fe bd00 	b.w	8005fd6 <forward_lstm+0x24a>
 80075d6:	ee0a 0a10 	vmov	s20, r0
 80075da:	ee09 0a90 	vmov	s19, r0
 80075de:	ee0a 0a90 	vmov	s21, r0
 80075e2:	4681      	mov	r9, r0
 80075e4:	f7fe bc56 	b.w	8005e94 <forward_lstm+0x108>
 80075e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80075ec:	4683      	mov	fp, r0
 80075ee:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80075f2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80075f6:	f7fe bbf4 	b.w	8005de2 <forward_lstm+0x56>
 80075fa:	2300      	movs	r3, #0
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	deff      	udf	#255	; 0xff

08007600 <forward_lite_dense_if32of32wf32>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007608:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800760c:	4287      	cmp	r7, r0
 800760e:	f240 8106 	bls.w	800781e <forward_lite_dense_if32of32wf32+0x21e>
 8007612:	f1a6 0810 	sub.w	r8, r6, #16
 8007616:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007622:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007626:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800762a:	4605      	mov	r5, r0
 800762c:	f006 0a0f 	and.w	sl, r6, #15
 8007630:	2e0f      	cmp	r6, #15
 8007632:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007844 <forward_lite_dense_if32of32wf32+0x244>
 8007636:	f240 8101 	bls.w	800783c <forward_lite_dense_if32of32wf32+0x23c>
 800763a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800763e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007642:	46b6      	mov	lr, r6
 8007644:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007648:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800764c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8007650:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007654:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8007658:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800765c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8007660:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8007664:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8007668:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800766c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8007670:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8007674:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8007678:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800767c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8007680:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007684:	f1ae 0e10 	sub.w	lr, lr, #16
 8007688:	f1be 0f0f 	cmp.w	lr, #15
 800768c:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8007690:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8007694:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007698:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800769c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80076a0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80076a4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80076a8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80076ac:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80076b0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80076b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80076b8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80076bc:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80076c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80076c4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80076c8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80076cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80076d0:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80076d4:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80076d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80076dc:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80076e0:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80076e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80076e8:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80076ec:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80076f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80076f4:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80076f8:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80076fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007700:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007704:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007708:	eee4 7a24 	vfma.f32	s15, s8, s9
 800770c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007710:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007718:	d894      	bhi.n	8007644 <forward_lite_dense_if32of32wf32+0x44>
 800771a:	eb02 0e0b 	add.w	lr, r2, fp
 800771e:	4654      	mov	r4, sl
 8007720:	46c4      	mov	ip, r8
 8007722:	2c00      	cmp	r4, #0
 8007724:	d075      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007726:	eddc 6a00 	vldr	s13, [ip]
 800772a:	edde 7a00 	vldr	s15, [lr]
 800772e:	2c01      	cmp	r4, #1
 8007730:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007734:	d06d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007736:	eddc 6a01 	vldr	s13, [ip, #4]
 800773a:	edde 7a01 	vldr	s15, [lr, #4]
 800773e:	2c02      	cmp	r4, #2
 8007740:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007744:	d065      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007746:	eddc 6a02 	vldr	s13, [ip, #8]
 800774a:	edde 7a02 	vldr	s15, [lr, #8]
 800774e:	2c03      	cmp	r4, #3
 8007750:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007754:	d05d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007756:	eddc 6a03 	vldr	s13, [ip, #12]
 800775a:	edde 7a03 	vldr	s15, [lr, #12]
 800775e:	2c04      	cmp	r4, #4
 8007760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007764:	d055      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007766:	eddc 6a04 	vldr	s13, [ip, #16]
 800776a:	edde 7a04 	vldr	s15, [lr, #16]
 800776e:	2c05      	cmp	r4, #5
 8007770:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007774:	d04d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007776:	eddc 6a05 	vldr	s13, [ip, #20]
 800777a:	edde 7a05 	vldr	s15, [lr, #20]
 800777e:	2c06      	cmp	r4, #6
 8007780:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007784:	d045      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007786:	eddc 6a06 	vldr	s13, [ip, #24]
 800778a:	edde 7a06 	vldr	s15, [lr, #24]
 800778e:	2c07      	cmp	r4, #7
 8007790:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007794:	d03d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007796:	eddc 6a07 	vldr	s13, [ip, #28]
 800779a:	edde 7a07 	vldr	s15, [lr, #28]
 800779e:	2c08      	cmp	r4, #8
 80077a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077a4:	d035      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077a6:	eddc 6a08 	vldr	s13, [ip, #32]
 80077aa:	edde 7a08 	vldr	s15, [lr, #32]
 80077ae:	2c09      	cmp	r4, #9
 80077b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077b4:	d02d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077b6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80077ba:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80077be:	2c0a      	cmp	r4, #10
 80077c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077c4:	d025      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077c6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80077ca:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80077ce:	2c0b      	cmp	r4, #11
 80077d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077d4:	d01d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077d6:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80077da:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80077de:	2c0c      	cmp	r4, #12
 80077e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077e4:	d015      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077e6:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80077ea:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80077ee:	3c0d      	subs	r4, #13
 80077f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077f4:	d00d      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 80077f6:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80077fa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80077fe:	2c01      	cmp	r4, #1
 8007800:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007804:	d005      	beq.n	8007812 <forward_lite_dense_if32of32wf32+0x212>
 8007806:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800780a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800780e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007812:	444a      	add	r2, r9
 8007814:	eca5 7a01 	vstmia	r5!, {s14}
 8007818:	42af      	cmp	r7, r5
 800781a:	f63f af09 	bhi.w	8007630 <forward_lite_dense_if32of32wf32+0x30>
 800781e:	b15b      	cbz	r3, 8007838 <forward_lite_dense_if32of32wf32+0x238>
 8007820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007822:	b14a      	cbz	r2, 8007838 <forward_lite_dense_if32of32wf32+0x238>
 8007824:	edd0 7a00 	vldr	s15, [r0]
 8007828:	ecb3 7a01 	vldmia	r3!, {s14}
 800782c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007830:	ece0 7a01 	vstmia	r0!, {s15}
 8007834:	4287      	cmp	r7, r0
 8007836:	d1f5      	bne.n	8007824 <forward_lite_dense_if32of32wf32+0x224>
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	4634      	mov	r4, r6
 800783e:	4696      	mov	lr, r2
 8007840:	468c      	mov	ip, r1
 8007842:	e76e      	b.n	8007722 <forward_lite_dense_if32of32wf32+0x122>
 8007844:	00000000 	.word	0x00000000

08007848 <st_int8_fill>:
 8007848:	b510      	push	{r4, lr}
 800784a:	b2c3      	uxtb	r3, r0
 800784c:	0204      	lsls	r4, r0, #8
 800784e:	b2a4      	uxth	r4, r4
 8007850:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007854:	4323      	orrs	r3, r4
 8007856:	0404      	lsls	r4, r0, #16
 8007858:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800785c:	431c      	orrs	r4, r3
 800785e:	078b      	lsls	r3, r1, #30
 8007860:	468c      	mov	ip, r1
 8007862:	d007      	beq.n	8007874 <st_int8_fill+0x2c>
 8007864:	b3a2      	cbz	r2, 80078d0 <st_int8_fill+0x88>
 8007866:	f80c 0b01 	strb.w	r0, [ip], #1
 800786a:	f01c 0f03 	tst.w	ip, #3
 800786e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007872:	d1f7      	bne.n	8007864 <st_int8_fill+0x1c>
 8007874:	0911      	lsrs	r1, r2, #4
 8007876:	d03e      	beq.n	80078f6 <st_int8_fill+0xae>
 8007878:	1e4b      	subs	r3, r1, #1
 800787a:	2b04      	cmp	r3, #4
 800787c:	d929      	bls.n	80078d2 <st_int8_fill+0x8a>
 800787e:	f01c 0f07 	tst.w	ip, #7
 8007882:	d126      	bne.n	80078d2 <st_int8_fill+0x8a>
 8007884:	f10c 0310 	add.w	r3, ip, #16
 8007888:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800788c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8007890:	e943 4404 	strd	r4, r4, [r3, #-16]
 8007894:	e943 4402 	strd	r4, r4, [r3, #-8]
 8007898:	3310      	adds	r3, #16
 800789a:	428b      	cmp	r3, r1
 800789c:	d1f8      	bne.n	8007890 <st_int8_fill+0x48>
 800789e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80078a2:	44f4      	add	ip, lr
 80078a4:	f002 0203 	and.w	r2, r2, #3
 80078a8:	b15b      	cbz	r3, 80078c2 <st_int8_fill+0x7a>
 80078aa:	1e59      	subs	r1, r3, #1
 80078ac:	f8cc 4000 	str.w	r4, [ip]
 80078b0:	d005      	beq.n	80078be <st_int8_fill+0x76>
 80078b2:	2901      	cmp	r1, #1
 80078b4:	f8cc 4004 	str.w	r4, [ip, #4]
 80078b8:	bf18      	it	ne
 80078ba:	f8cc 4008 	strne.w	r4, [ip, #8]
 80078be:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 80078c2:	b12a      	cbz	r2, 80078d0 <st_int8_fill+0x88>
 80078c4:	4601      	mov	r1, r0
 80078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ca:	4660      	mov	r0, ip
 80078cc:	f000 bfb3 	b.w	8008836 <memset>
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80078d6:	4663      	mov	r3, ip
 80078d8:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 80078dc:	601c      	str	r4, [r3, #0]
 80078de:	605c      	str	r4, [r3, #4]
 80078e0:	609c      	str	r4, [r3, #8]
 80078e2:	60dc      	str	r4, [r3, #12]
 80078e4:	3310      	adds	r3, #16
 80078e6:	4299      	cmp	r1, r3
 80078e8:	d1f8      	bne.n	80078dc <st_int8_fill+0x94>
 80078ea:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80078ee:	44f4      	add	ip, lr
 80078f0:	f002 0203 	and.w	r2, r2, #3
 80078f4:	e7d8      	b.n	80078a8 <st_int8_fill+0x60>
 80078f6:	0893      	lsrs	r3, r2, #2
 80078f8:	f002 0203 	and.w	r2, r2, #3
 80078fc:	e7d4      	b.n	80078a8 <st_int8_fill+0x60>
 80078fe:	bf00      	nop

08007900 <st_int8_copy>:
 8007900:	4288      	cmp	r0, r1
 8007902:	d057      	beq.n	80079b4 <st_int8_copy+0xb4>
 8007904:	2a00      	cmp	r2, #0
 8007906:	d055      	beq.n	80079b4 <st_int8_copy+0xb4>
 8007908:	4288      	cmp	r0, r1
 800790a:	d354      	bcc.n	80079b6 <st_int8_copy+0xb6>
 800790c:	078b      	lsls	r3, r1, #30
 800790e:	d102      	bne.n	8007916 <st_int8_copy+0x16>
 8007910:	e009      	b.n	8007926 <st_int8_copy+0x26>
 8007912:	2a00      	cmp	r2, #0
 8007914:	d05c      	beq.n	80079d0 <st_int8_copy+0xd0>
 8007916:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800791a:	f801 3b01 	strb.w	r3, [r1], #1
 800791e:	078b      	lsls	r3, r1, #30
 8007920:	f102 32ff 	add.w	r2, r2, #4294967295
 8007924:	d1f5      	bne.n	8007912 <st_int8_copy+0x12>
 8007926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800792e:	d069      	beq.n	8007a04 <st_int8_copy+0x104>
 8007930:	ea41 0300 	orr.w	r3, r1, r0
 8007934:	075b      	lsls	r3, r3, #29
 8007936:	d14c      	bne.n	80079d2 <st_int8_copy+0xd2>
 8007938:	f10e 33ff 	add.w	r3, lr, #4294967295
 800793c:	2b01      	cmp	r3, #1
 800793e:	d948      	bls.n	80079d2 <st_int8_copy+0xd2>
 8007940:	f100 0310 	add.w	r3, r0, #16
 8007944:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007948:	f101 0c10 	add.w	ip, r1, #16
 800794c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8007950:	ed13 6b04 	vldr	d6, [r3, #-16]
 8007954:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007958:	3310      	adds	r3, #16
 800795a:	4573      	cmp	r3, lr
 800795c:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8007960:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8007964:	f10c 0c10 	add.w	ip, ip, #16
 8007968:	d1f2      	bne.n	8007950 <st_int8_copy+0x50>
 800796a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800796e:	4421      	add	r1, r4
 8007970:	4420      	add	r0, r4
 8007972:	f002 0203 	and.w	r2, r2, #3
 8007976:	b16b      	cbz	r3, 8007994 <st_int8_copy+0x94>
 8007978:	6804      	ldr	r4, [r0, #0]
 800797a:	600c      	str	r4, [r1, #0]
 800797c:	1e5c      	subs	r4, r3, #1
 800797e:	d005      	beq.n	800798c <st_int8_copy+0x8c>
 8007980:	6845      	ldr	r5, [r0, #4]
 8007982:	604d      	str	r5, [r1, #4]
 8007984:	2c01      	cmp	r4, #1
 8007986:	bf1c      	itt	ne
 8007988:	6884      	ldrne	r4, [r0, #8]
 800798a:	608c      	strne	r4, [r1, #8]
 800798c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007990:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007994:	b162      	cbz	r2, 80079b0 <st_int8_copy+0xb0>
 8007996:	f990 3000 	ldrsb.w	r3, [r0]
 800799a:	700b      	strb	r3, [r1, #0]
 800799c:	3a01      	subs	r2, #1
 800799e:	d007      	beq.n	80079b0 <st_int8_copy+0xb0>
 80079a0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80079a4:	704b      	strb	r3, [r1, #1]
 80079a6:	2a01      	cmp	r2, #1
 80079a8:	bf1c      	itt	ne
 80079aa:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80079ae:	708b      	strbne	r3, [r1, #2]
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	4770      	bx	lr
 80079b6:	1883      	adds	r3, r0, r2
 80079b8:	428b      	cmp	r3, r1
 80079ba:	d9a7      	bls.n	800790c <st_int8_copy+0xc>
 80079bc:	4283      	cmp	r3, r0
 80079be:	440a      	add	r2, r1
 80079c0:	d9f8      	bls.n	80079b4 <st_int8_copy+0xb4>
 80079c2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80079c6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80079ca:	4283      	cmp	r3, r0
 80079cc:	d1f9      	bne.n	80079c2 <st_int8_copy+0xc2>
 80079ce:	4770      	bx	lr
 80079d0:	4770      	bx	lr
 80079d2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80079d6:	460b      	mov	r3, r1
 80079d8:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80079dc:	4684      	mov	ip, r0
 80079de:	f8dc 7000 	ldr.w	r7, [ip]
 80079e2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80079e6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80079ea:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80079ee:	f8c3 800c 	str.w	r8, [r3, #12]
 80079f2:	601f      	str	r7, [r3, #0]
 80079f4:	605e      	str	r6, [r3, #4]
 80079f6:	609d      	str	r5, [r3, #8]
 80079f8:	3310      	adds	r3, #16
 80079fa:	459e      	cmp	lr, r3
 80079fc:	f10c 0c10 	add.w	ip, ip, #16
 8007a00:	d1ed      	bne.n	80079de <st_int8_copy+0xde>
 8007a02:	e7b2      	b.n	800796a <st_int8_copy+0x6a>
 8007a04:	0893      	lsrs	r3, r2, #2
 8007a06:	f002 0203 	and.w	r2, r2, #3
 8007a0a:	e7b4      	b.n	8007976 <st_int8_copy+0x76>

08007a0c <ai_array_to_buffer_fmt>:
 8007a0c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d050      	beq.n	8007ab6 <ai_array_to_buffer_fmt+0xaa>
 8007a14:	4b2a      	ldr	r3, [pc, #168]	; (8007ac0 <ai_array_to_buffer_fmt+0xb4>)
 8007a16:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d00b      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a1e:	dc1c      	bgt.n	8007a5a <ai_array_to_buffer_fmt+0x4e>
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <ai_array_to_buffer_fmt+0xb8>)
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d007      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a26:	dd0b      	ble.n	8007a40 <ai_array_to_buffer_fmt+0x34>
 8007a28:	4b27      	ldr	r3, [pc, #156]	; (8007ac8 <ai_array_to_buffer_fmt+0xbc>)
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d003      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a2e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d131      	bne.n	8007a9a <ai_array_to_buffer_fmt+0x8e>
 8007a36:	4613      	mov	r3, r2
 8007a38:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007a3c:	4318      	orrs	r0, r3
 8007a3e:	4770      	bx	lr
 8007a40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d0f6      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a48:	dd2c      	ble.n	8007aa4 <ai_array_to_buffer_fmt+0x98>
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <ai_array_to_buffer_fmt+0xc0>)
 8007a4c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007a50:	429a      	cmp	r2, r3
 8007a52:	bf18      	it	ne
 8007a54:	2340      	movne	r3, #64	; 0x40
 8007a56:	4318      	orrs	r0, r3
 8007a58:	4770      	bx	lr
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <ai_array_to_buffer_fmt+0xc4>)
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d0ea      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a60:	dd0e      	ble.n	8007a80 <ai_array_to_buffer_fmt+0x74>
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <ai_array_to_buffer_fmt+0xc8>)
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d0e6      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a68:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d0e2      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a70:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <ai_array_to_buffer_fmt+0xcc>)
 8007a72:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf18      	it	ne
 8007a7a:	2340      	movne	r3, #64	; 0x40
 8007a7c:	4318      	orrs	r0, r3
 8007a7e:	4770      	bx	lr
 8007a80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d0d6      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a88:	3307      	adds	r3, #7
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d0d3      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007a8e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf18      	it	ne
 8007a96:	2340      	movne	r3, #64	; 0x40
 8007a98:	e7ce      	b.n	8007a38 <ai_array_to_buffer_fmt+0x2c>
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <ai_array_to_buffer_fmt+0xd0>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	bf18      	it	ne
 8007aa0:	2340      	movne	r3, #64	; 0x40
 8007aa2:	e7c9      	b.n	8007a38 <ai_array_to_buffer_fmt+0x2c>
 8007aa4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d0c4      	beq.n	8007a36 <ai_array_to_buffer_fmt+0x2a>
 8007aac:	3380      	adds	r3, #128	; 0x80
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf18      	it	ne
 8007ab2:	2340      	movne	r3, #64	; 0x40
 8007ab4:	e7c0      	b.n	8007a38 <ai_array_to_buffer_fmt+0x2c>
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <ai_array_to_buffer_fmt+0xd4>)
 8007ab8:	4003      	ands	r3, r0
 8007aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007abe:	e7bb      	b.n	8007a38 <ai_array_to_buffer_fmt+0x2c>
 8007ac0:	00840040 	.word	0x00840040
 8007ac4:	00040840 	.word	0x00040840
 8007ac8:	00041040 	.word	0x00041040
 8007acc:	00040447 	.word	0x00040447
 8007ad0:	00840840 	.word	0x00840840
 8007ad4:	00841040 	.word	0x00841040
 8007ad8:	0084084f 	.word	0x0084084f
 8007adc:	0004084f 	.word	0x0004084f
 8007ae0:	00803fff 	.word	0x00803fff

08007ae4 <ai_array_get_byte_size>:
 8007ae4:	b319      	cbz	r1, 8007b2e <ai_array_get_byte_size+0x4a>
 8007ae6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007aea:	fb03 f101 	mul.w	r1, r3, r1
 8007aee:	3107      	adds	r1, #7
 8007af0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8007af4:	f021 0307 	bic.w	r3, r1, #7
 8007af8:	2a04      	cmp	r2, #4
 8007afa:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8007afe:	fa23 f101 	lsr.w	r1, r3, r1
 8007b02:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8007b06:	d00b      	beq.n	8007b20 <ai_array_get_byte_size+0x3c>
 8007b08:	2a08      	cmp	r2, #8
 8007b0a:	d002      	beq.n	8007b12 <ai_array_get_byte_size+0x2e>
 8007b0c:	3107      	adds	r1, #7
 8007b0e:	08c8      	lsrs	r0, r1, #3
 8007b10:	4770      	bx	lr
 8007b12:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007b16:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007b1a:	3107      	adds	r1, #7
 8007b1c:	08c8      	lsrs	r0, r1, #3
 8007b1e:	4770      	bx	lr
 8007b20:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007b24:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8007b28:	3107      	adds	r1, #7
 8007b2a:	08c8      	lsrs	r0, r1, #3
 8007b2c:	4770      	bx	lr
 8007b2e:	4608      	mov	r0, r1
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop

08007b34 <ai_array_get_data_byte_size>:
 8007b34:	b169      	cbz	r1, 8007b52 <ai_array_get_data_byte_size+0x1e>
 8007b36:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8007b3a:	fb02 f101 	mul.w	r1, r2, r1
 8007b3e:	1dcb      	adds	r3, r1, #7
 8007b40:	f023 0307 	bic.w	r3, r3, #7
 8007b44:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007b48:	fa23 f000 	lsr.w	r0, r3, r0
 8007b4c:	3007      	adds	r0, #7
 8007b4e:	08c0      	lsrs	r0, r0, #3
 8007b50:	4770      	bx	lr
 8007b52:	4608      	mov	r0, r1
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <malloc>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <malloc+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f000 b823 	b.w	8007ba8 <_malloc_r>
 8007b62:	bf00      	nop
 8007b64:	20000c5c 	.word	0x20000c5c

08007b68 <sbrk_aligned>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4e0e      	ldr	r6, [pc, #56]	; (8007ba4 <sbrk_aligned+0x3c>)
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	6831      	ldr	r1, [r6, #0]
 8007b70:	4605      	mov	r5, r0
 8007b72:	b911      	cbnz	r1, 8007b7a <sbrk_aligned+0x12>
 8007b74:	f000 fea0 	bl	80088b8 <_sbrk_r>
 8007b78:	6030      	str	r0, [r6, #0]
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 fe9b 	bl	80088b8 <_sbrk_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d00a      	beq.n	8007b9c <sbrk_aligned+0x34>
 8007b86:	1cc4      	adds	r4, r0, #3
 8007b88:	f024 0403 	bic.w	r4, r4, #3
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d007      	beq.n	8007ba0 <sbrk_aligned+0x38>
 8007b90:	1a21      	subs	r1, r4, r0
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 fe90 	bl	80088b8 <_sbrk_r>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d101      	bne.n	8007ba0 <sbrk_aligned+0x38>
 8007b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	20001730 	.word	0x20001730

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d905      	bls.n	8007bd0 <_malloc_r+0x28>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	2600      	movs	r6, #0
 8007bca:	4630      	mov	r0, r6
 8007bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ca4 <_malloc_r+0xfc>
 8007bd4:	f000 f868 	bl	8007ca8 <__malloc_lock>
 8007bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bdc:	461c      	mov	r4, r3
 8007bde:	bb5c      	cbnz	r4, 8007c38 <_malloc_r+0x90>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7ff ffc0 	bl	8007b68 <sbrk_aligned>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	4604      	mov	r4, r0
 8007bec:	d155      	bne.n	8007c9a <_malloc_r+0xf2>
 8007bee:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf2:	4626      	mov	r6, r4
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	d145      	bne.n	8007c84 <_malloc_r+0xdc>
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d048      	beq.n	8007c8e <_malloc_r+0xe6>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4638      	mov	r0, r7
 8007c02:	eb04 0903 	add.w	r9, r4, r3
 8007c06:	f000 fe57 	bl	80088b8 <_sbrk_r>
 8007c0a:	4581      	cmp	r9, r0
 8007c0c:	d13f      	bne.n	8007c8e <_malloc_r+0xe6>
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	1a6d      	subs	r5, r5, r1
 8007c12:	4629      	mov	r1, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff ffa7 	bl	8007b68 <sbrk_aligned>
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d037      	beq.n	8007c8e <_malloc_r+0xe6>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	442b      	add	r3, r5
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	f8d8 3000 	ldr.w	r3, [r8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d038      	beq.n	8007c9e <_malloc_r+0xf6>
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	42a2      	cmp	r2, r4
 8007c30:	d12b      	bne.n	8007c8a <_malloc_r+0xe2>
 8007c32:	2200      	movs	r2, #0
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	e00f      	b.n	8007c58 <_malloc_r+0xb0>
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	1b52      	subs	r2, r2, r5
 8007c3c:	d41f      	bmi.n	8007c7e <_malloc_r+0xd6>
 8007c3e:	2a0b      	cmp	r2, #11
 8007c40:	d917      	bls.n	8007c72 <_malloc_r+0xca>
 8007c42:	1961      	adds	r1, r4, r5
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	6025      	str	r5, [r4, #0]
 8007c48:	bf18      	it	ne
 8007c4a:	6059      	strne	r1, [r3, #4]
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	bf08      	it	eq
 8007c50:	f8c8 1000 	streq.w	r1, [r8]
 8007c54:	5162      	str	r2, [r4, r5]
 8007c56:	604b      	str	r3, [r1, #4]
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f104 060b 	add.w	r6, r4, #11
 8007c5e:	f000 f829 	bl	8007cb4 <__malloc_unlock>
 8007c62:	f026 0607 	bic.w	r6, r6, #7
 8007c66:	1d23      	adds	r3, r4, #4
 8007c68:	1af2      	subs	r2, r6, r3
 8007c6a:	d0ae      	beq.n	8007bca <_malloc_r+0x22>
 8007c6c:	1b9b      	subs	r3, r3, r6
 8007c6e:	50a3      	str	r3, [r4, r2]
 8007c70:	e7ab      	b.n	8007bca <_malloc_r+0x22>
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	6862      	ldr	r2, [r4, #4]
 8007c76:	d1dd      	bne.n	8007c34 <_malloc_r+0x8c>
 8007c78:	f8c8 2000 	str.w	r2, [r8]
 8007c7c:	e7ec      	b.n	8007c58 <_malloc_r+0xb0>
 8007c7e:	4623      	mov	r3, r4
 8007c80:	6864      	ldr	r4, [r4, #4]
 8007c82:	e7ac      	b.n	8007bde <_malloc_r+0x36>
 8007c84:	4634      	mov	r4, r6
 8007c86:	6876      	ldr	r6, [r6, #4]
 8007c88:	e7b4      	b.n	8007bf4 <_malloc_r+0x4c>
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	e7cc      	b.n	8007c28 <_malloc_r+0x80>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4638      	mov	r0, r7
 8007c94:	f000 f80e 	bl	8007cb4 <__malloc_unlock>
 8007c98:	e797      	b.n	8007bca <_malloc_r+0x22>
 8007c9a:	6025      	str	r5, [r4, #0]
 8007c9c:	e7dc      	b.n	8007c58 <_malloc_r+0xb0>
 8007c9e:	605b      	str	r3, [r3, #4]
 8007ca0:	deff      	udf	#255	; 0xff
 8007ca2:	bf00      	nop
 8007ca4:	2000172c 	.word	0x2000172c

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f000 be52 	b.w	8008952 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20001874 	.word	0x20001874

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f000 be4d 	b.w	8008954 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20001874 	.word	0x20001874

08007cc0 <_realloc_r>:
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	460e      	mov	r6, r1
 8007cca:	b921      	cbnz	r1, 8007cd6 <_realloc_r+0x16>
 8007ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	f7ff bf69 	b.w	8007ba8 <_malloc_r>
 8007cd6:	b92a      	cbnz	r2, 8007ce4 <_realloc_r+0x24>
 8007cd8:	f001 fcc8 	bl	800966c <_free_r>
 8007cdc:	4625      	mov	r5, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce4:	f002 f88a 	bl	8009dfc <_malloc_usable_size_r>
 8007ce8:	4284      	cmp	r4, r0
 8007cea:	4607      	mov	r7, r0
 8007cec:	d802      	bhi.n	8007cf4 <_realloc_r+0x34>
 8007cee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cf2:	d812      	bhi.n	8007d1a <_realloc_r+0x5a>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f7ff ff56 	bl	8007ba8 <_malloc_r>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d0ed      	beq.n	8007cde <_realloc_r+0x1e>
 8007d02:	42bc      	cmp	r4, r7
 8007d04:	4622      	mov	r2, r4
 8007d06:	4631      	mov	r1, r6
 8007d08:	bf28      	it	cs
 8007d0a:	463a      	movcs	r2, r7
 8007d0c:	f000 fe23 	bl	8008956 <memcpy>
 8007d10:	4631      	mov	r1, r6
 8007d12:	4640      	mov	r0, r8
 8007d14:	f001 fcaa 	bl	800966c <_free_r>
 8007d18:	e7e1      	b.n	8007cde <_realloc_r+0x1e>
 8007d1a:	4635      	mov	r5, r6
 8007d1c:	e7df      	b.n	8007cde <_realloc_r+0x1e>

08007d1e <__cvt>:
 8007d1e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d22:	ec55 4b10 	vmov	r4, r5, d0
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	460e      	mov	r6, r1
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	bfbb      	ittet	lt
 8007d30:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d34:	461d      	movlt	r5, r3
 8007d36:	2300      	movge	r3, #0
 8007d38:	232d      	movlt	r3, #45	; 0x2d
 8007d3a:	700b      	strb	r3, [r1, #0]
 8007d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d3e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d42:	4691      	mov	r9, r2
 8007d44:	f023 0820 	bic.w	r8, r3, #32
 8007d48:	bfbc      	itt	lt
 8007d4a:	4622      	movlt	r2, r4
 8007d4c:	4614      	movlt	r4, r2
 8007d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d52:	d005      	beq.n	8007d60 <__cvt+0x42>
 8007d54:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d58:	d100      	bne.n	8007d5c <__cvt+0x3e>
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	e000      	b.n	8007d62 <__cvt+0x44>
 8007d60:	2103      	movs	r1, #3
 8007d62:	ab03      	add	r3, sp, #12
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	ab02      	add	r3, sp, #8
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	ec45 4b10 	vmov	d0, r4, r5
 8007d6e:	4653      	mov	r3, sl
 8007d70:	4632      	mov	r2, r6
 8007d72:	f000 fe89 	bl	8008a88 <_dtoa_r>
 8007d76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	d102      	bne.n	8007d84 <__cvt+0x66>
 8007d7e:	f019 0f01 	tst.w	r9, #1
 8007d82:	d022      	beq.n	8007dca <__cvt+0xac>
 8007d84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d88:	eb07 0906 	add.w	r9, r7, r6
 8007d8c:	d110      	bne.n	8007db0 <__cvt+0x92>
 8007d8e:	783b      	ldrb	r3, [r7, #0]
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d10a      	bne.n	8007daa <__cvt+0x8c>
 8007d94:	2200      	movs	r2, #0
 8007d96:	2300      	movs	r3, #0
 8007d98:	4620      	mov	r0, r4
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	f7f8 feb4 	bl	8000b08 <__aeabi_dcmpeq>
 8007da0:	b918      	cbnz	r0, 8007daa <__cvt+0x8c>
 8007da2:	f1c6 0601 	rsb	r6, r6, #1
 8007da6:	f8ca 6000 	str.w	r6, [sl]
 8007daa:	f8da 3000 	ldr.w	r3, [sl]
 8007dae:	4499      	add	r9, r3
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	4620      	mov	r0, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7f8 fea6 	bl	8000b08 <__aeabi_dcmpeq>
 8007dbc:	b108      	cbz	r0, 8007dc2 <__cvt+0xa4>
 8007dbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dc2:	2230      	movs	r2, #48	; 0x30
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	454b      	cmp	r3, r9
 8007dc8:	d307      	bcc.n	8007dda <__cvt+0xbc>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dce:	1bdb      	subs	r3, r3, r7
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	b004      	add	sp, #16
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	9103      	str	r1, [sp, #12]
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	e7f0      	b.n	8007dc4 <__cvt+0xa6>

08007de2 <__exponent>:
 8007de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de4:	4603      	mov	r3, r0
 8007de6:	2900      	cmp	r1, #0
 8007de8:	bfb8      	it	lt
 8007dea:	4249      	neglt	r1, r1
 8007dec:	f803 2b02 	strb.w	r2, [r3], #2
 8007df0:	bfb4      	ite	lt
 8007df2:	222d      	movlt	r2, #45	; 0x2d
 8007df4:	222b      	movge	r2, #43	; 0x2b
 8007df6:	2909      	cmp	r1, #9
 8007df8:	7042      	strb	r2, [r0, #1]
 8007dfa:	dd2a      	ble.n	8007e52 <__exponent+0x70>
 8007dfc:	f10d 0207 	add.w	r2, sp, #7
 8007e00:	4617      	mov	r7, r2
 8007e02:	260a      	movs	r6, #10
 8007e04:	4694      	mov	ip, r2
 8007e06:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e0a:	fb06 1415 	mls	r4, r6, r5, r1
 8007e0e:	3430      	adds	r4, #48	; 0x30
 8007e10:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e14:	460c      	mov	r4, r1
 8007e16:	2c63      	cmp	r4, #99	; 0x63
 8007e18:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	dcf1      	bgt.n	8007e04 <__exponent+0x22>
 8007e20:	3130      	adds	r1, #48	; 0x30
 8007e22:	f1ac 0402 	sub.w	r4, ip, #2
 8007e26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e2a:	1c41      	adds	r1, r0, #1
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	42ba      	cmp	r2, r7
 8007e30:	d30a      	bcc.n	8007e48 <__exponent+0x66>
 8007e32:	f10d 0209 	add.w	r2, sp, #9
 8007e36:	eba2 020c 	sub.w	r2, r2, ip
 8007e3a:	42bc      	cmp	r4, r7
 8007e3c:	bf88      	it	hi
 8007e3e:	2200      	movhi	r2, #0
 8007e40:	4413      	add	r3, r2
 8007e42:	1a18      	subs	r0, r3, r0
 8007e44:	b003      	add	sp, #12
 8007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e48:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e4c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e50:	e7ed      	b.n	8007e2e <__exponent+0x4c>
 8007e52:	2330      	movs	r3, #48	; 0x30
 8007e54:	3130      	adds	r1, #48	; 0x30
 8007e56:	7083      	strb	r3, [r0, #2]
 8007e58:	70c1      	strb	r1, [r0, #3]
 8007e5a:	1d03      	adds	r3, r0, #4
 8007e5c:	e7f1      	b.n	8007e42 <__exponent+0x60>
	...

08007e60 <_printf_float>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	ed2d 8b02 	vpush	{d8}
 8007e68:	b08d      	sub	sp, #52	; 0x34
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e70:	4616      	mov	r6, r2
 8007e72:	461f      	mov	r7, r3
 8007e74:	4605      	mov	r5, r0
 8007e76:	f000 fce7 	bl	8008848 <_localeconv_r>
 8007e7a:	f8d0 a000 	ldr.w	sl, [r0]
 8007e7e:	4650      	mov	r0, sl
 8007e80:	f7f8 fa16 	bl	80002b0 <strlen>
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	; 0x28
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e94:	3307      	adds	r3, #7
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	f103 0208 	add.w	r2, r3, #8
 8007e9e:	f8c8 2000 	str.w	r2, [r8]
 8007ea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eb0:	ee08 0a10 	vmov	s16, r0
 8007eb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ebc:	4b9e      	ldr	r3, [pc, #632]	; (8008138 <_printf_float+0x2d8>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	f7f8 fe53 	bl	8000b6c <__aeabi_dcmpun>
 8007ec6:	bb88      	cbnz	r0, 8007f2c <_printf_float+0xcc>
 8007ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ecc:	4b9a      	ldr	r3, [pc, #616]	; (8008138 <_printf_float+0x2d8>)
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	f7f8 fe2d 	bl	8000b30 <__aeabi_dcmple>
 8007ed6:	bb48      	cbnz	r0, 8007f2c <_printf_float+0xcc>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2300      	movs	r3, #0
 8007edc:	4640      	mov	r0, r8
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 fe1c 	bl	8000b1c <__aeabi_dcmplt>
 8007ee4:	b110      	cbz	r0, 8007eec <_printf_float+0x8c>
 8007ee6:	232d      	movs	r3, #45	; 0x2d
 8007ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eec:	4a93      	ldr	r2, [pc, #588]	; (800813c <_printf_float+0x2dc>)
 8007eee:	4b94      	ldr	r3, [pc, #592]	; (8008140 <_printf_float+0x2e0>)
 8007ef0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ef4:	bf94      	ite	ls
 8007ef6:	4690      	movls	r8, r2
 8007ef8:	4698      	movhi	r8, r3
 8007efa:	2303      	movs	r3, #3
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	f023 0304 	bic.w	r3, r3, #4
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	9700      	str	r7, [sp, #0]
 8007f0c:	4633      	mov	r3, r6
 8007f0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 f9da 	bl	80082cc <_printf_common>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	f040 8090 	bne.w	800803e <_printf_float+0x1de>
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	b00d      	add	sp, #52	; 0x34
 8007f24:	ecbd 8b02 	vpop	{d8}
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 fe1a 	bl	8000b6c <__aeabi_dcmpun>
 8007f38:	b140      	cbz	r0, 8007f4c <_printf_float+0xec>
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfbc      	itt	lt
 8007f40:	232d      	movlt	r3, #45	; 0x2d
 8007f42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f46:	4a7f      	ldr	r2, [pc, #508]	; (8008144 <_printf_float+0x2e4>)
 8007f48:	4b7f      	ldr	r3, [pc, #508]	; (8008148 <_printf_float+0x2e8>)
 8007f4a:	e7d1      	b.n	8007ef0 <_printf_float+0x90>
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f52:	9206      	str	r2, [sp, #24]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	d13f      	bne.n	8007fd8 <_printf_float+0x178>
 8007f58:	2306      	movs	r3, #6
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	6861      	ldr	r1, [r4, #4]
 8007f60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f64:	2300      	movs	r3, #0
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	ab0a      	add	r3, sp, #40	; 0x28
 8007f6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f6e:	ab09      	add	r3, sp, #36	; 0x24
 8007f70:	ec49 8b10 	vmov	d0, r8, r9
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f7ff fece 	bl	8007d1e <__cvt>
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f86:	2b47      	cmp	r3, #71	; 0x47
 8007f88:	4680      	mov	r8, r0
 8007f8a:	d108      	bne.n	8007f9e <_printf_float+0x13e>
 8007f8c:	1cc8      	adds	r0, r1, #3
 8007f8e:	db02      	blt.n	8007f96 <_printf_float+0x136>
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	4299      	cmp	r1, r3
 8007f94:	dd41      	ble.n	800801a <_printf_float+0x1ba>
 8007f96:	f1ab 0302 	sub.w	r3, fp, #2
 8007f9a:	fa5f fb83 	uxtb.w	fp, r3
 8007f9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fa2:	d820      	bhi.n	8007fe6 <_printf_float+0x186>
 8007fa4:	3901      	subs	r1, #1
 8007fa6:	465a      	mov	r2, fp
 8007fa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fac:	9109      	str	r1, [sp, #36]	; 0x24
 8007fae:	f7ff ff18 	bl	8007de2 <__exponent>
 8007fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb4:	1813      	adds	r3, r2, r0
 8007fb6:	2a01      	cmp	r2, #1
 8007fb8:	4681      	mov	r9, r0
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	dc02      	bgt.n	8007fc4 <_printf_float+0x164>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	07d2      	lsls	r2, r2, #31
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_float+0x168>
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d09c      	beq.n	8007f0a <_printf_float+0xaa>
 8007fd0:	232d      	movs	r3, #45	; 0x2d
 8007fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd6:	e798      	b.n	8007f0a <_printf_float+0xaa>
 8007fd8:	9a06      	ldr	r2, [sp, #24]
 8007fda:	2a47      	cmp	r2, #71	; 0x47
 8007fdc:	d1be      	bne.n	8007f5c <_printf_float+0xfc>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1bc      	bne.n	8007f5c <_printf_float+0xfc>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7b9      	b.n	8007f5a <_printf_float+0xfa>
 8007fe6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fea:	d118      	bne.n	800801e <_printf_float+0x1be>
 8007fec:	2900      	cmp	r1, #0
 8007fee:	6863      	ldr	r3, [r4, #4]
 8007ff0:	dd0b      	ble.n	800800a <_printf_float+0x1aa>
 8007ff2:	6121      	str	r1, [r4, #16]
 8007ff4:	b913      	cbnz	r3, 8007ffc <_printf_float+0x19c>
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	07d0      	lsls	r0, r2, #31
 8007ffa:	d502      	bpl.n	8008002 <_printf_float+0x1a2>
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	440b      	add	r3, r1
 8008000:	6123      	str	r3, [r4, #16]
 8008002:	65a1      	str	r1, [r4, #88]	; 0x58
 8008004:	f04f 0900 	mov.w	r9, #0
 8008008:	e7de      	b.n	8007fc8 <_printf_float+0x168>
 800800a:	b913      	cbnz	r3, 8008012 <_printf_float+0x1b2>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	07d2      	lsls	r2, r2, #31
 8008010:	d501      	bpl.n	8008016 <_printf_float+0x1b6>
 8008012:	3302      	adds	r3, #2
 8008014:	e7f4      	b.n	8008000 <_printf_float+0x1a0>
 8008016:	2301      	movs	r3, #1
 8008018:	e7f2      	b.n	8008000 <_printf_float+0x1a0>
 800801a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	4299      	cmp	r1, r3
 8008022:	db05      	blt.n	8008030 <_printf_float+0x1d0>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	6121      	str	r1, [r4, #16]
 8008028:	07d8      	lsls	r0, r3, #31
 800802a:	d5ea      	bpl.n	8008002 <_printf_float+0x1a2>
 800802c:	1c4b      	adds	r3, r1, #1
 800802e:	e7e7      	b.n	8008000 <_printf_float+0x1a0>
 8008030:	2900      	cmp	r1, #0
 8008032:	bfd4      	ite	le
 8008034:	f1c1 0202 	rsble	r2, r1, #2
 8008038:	2201      	movgt	r2, #1
 800803a:	4413      	add	r3, r2
 800803c:	e7e0      	b.n	8008000 <_printf_float+0x1a0>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	055a      	lsls	r2, r3, #21
 8008042:	d407      	bmi.n	8008054 <_printf_float+0x1f4>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	4642      	mov	r2, r8
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	47b8      	blx	r7
 800804e:	3001      	adds	r0, #1
 8008050:	d12c      	bne.n	80080ac <_printf_float+0x24c>
 8008052:	e764      	b.n	8007f1e <_printf_float+0xbe>
 8008054:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008058:	f240 80e0 	bls.w	800821c <_printf_float+0x3bc>
 800805c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008060:	2200      	movs	r2, #0
 8008062:	2300      	movs	r3, #0
 8008064:	f7f8 fd50 	bl	8000b08 <__aeabi_dcmpeq>
 8008068:	2800      	cmp	r0, #0
 800806a:	d034      	beq.n	80080d6 <_printf_float+0x276>
 800806c:	4a37      	ldr	r2, [pc, #220]	; (800814c <_printf_float+0x2ec>)
 800806e:	2301      	movs	r3, #1
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af51 	beq.w	8007f1e <_printf_float+0xbe>
 800807c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008080:	429a      	cmp	r2, r3
 8008082:	db02      	blt.n	800808a <_printf_float+0x22a>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	07d8      	lsls	r0, r3, #31
 8008088:	d510      	bpl.n	80080ac <_printf_float+0x24c>
 800808a:	ee18 3a10 	vmov	r3, s16
 800808e:	4652      	mov	r2, sl
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f af41 	beq.w	8007f1e <_printf_float+0xbe>
 800809c:	f04f 0800 	mov.w	r8, #0
 80080a0:	f104 091a 	add.w	r9, r4, #26
 80080a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4543      	cmp	r3, r8
 80080aa:	dc09      	bgt.n	80080c0 <_printf_float+0x260>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	f100 8107 	bmi.w	80082c2 <_printf_float+0x462>
 80080b4:	68e0      	ldr	r0, [r4, #12]
 80080b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b8:	4298      	cmp	r0, r3
 80080ba:	bfb8      	it	lt
 80080bc:	4618      	movlt	r0, r3
 80080be:	e730      	b.n	8007f22 <_printf_float+0xc2>
 80080c0:	2301      	movs	r3, #1
 80080c2:	464a      	mov	r2, r9
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af27 	beq.w	8007f1e <_printf_float+0xbe>
 80080d0:	f108 0801 	add.w	r8, r8, #1
 80080d4:	e7e6      	b.n	80080a4 <_printf_float+0x244>
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc39      	bgt.n	8008150 <_printf_float+0x2f0>
 80080dc:	4a1b      	ldr	r2, [pc, #108]	; (800814c <_printf_float+0x2ec>)
 80080de:	2301      	movs	r3, #1
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af19 	beq.w	8007f1e <_printf_float+0xbe>
 80080ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d102      	bne.n	80080fa <_printf_float+0x29a>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	07d9      	lsls	r1, r3, #31
 80080f8:	d5d8      	bpl.n	80080ac <_printf_float+0x24c>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f af09 	beq.w	8007f1e <_printf_float+0xbe>
 800810c:	f04f 0900 	mov.w	r9, #0
 8008110:	f104 0a1a 	add.w	sl, r4, #26
 8008114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008116:	425b      	negs	r3, r3
 8008118:	454b      	cmp	r3, r9
 800811a:	dc01      	bgt.n	8008120 <_printf_float+0x2c0>
 800811c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811e:	e792      	b.n	8008046 <_printf_float+0x1e6>
 8008120:	2301      	movs	r3, #1
 8008122:	4652      	mov	r2, sl
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f aef7 	beq.w	8007f1e <_printf_float+0xbe>
 8008130:	f109 0901 	add.w	r9, r9, #1
 8008134:	e7ee      	b.n	8008114 <_printf_float+0x2b4>
 8008136:	bf00      	nop
 8008138:	7fefffff 	.word	0x7fefffff
 800813c:	0803db00 	.word	0x0803db00
 8008140:	0803db04 	.word	0x0803db04
 8008144:	0803db08 	.word	0x0803db08
 8008148:	0803db0c 	.word	0x0803db0c
 800814c:	0803db10 	.word	0x0803db10
 8008150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008154:	429a      	cmp	r2, r3
 8008156:	bfa8      	it	ge
 8008158:	461a      	movge	r2, r3
 800815a:	2a00      	cmp	r2, #0
 800815c:	4691      	mov	r9, r2
 800815e:	dc37      	bgt.n	80081d0 <_printf_float+0x370>
 8008160:	f04f 0b00 	mov.w	fp, #0
 8008164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008168:	f104 021a 	add.w	r2, r4, #26
 800816c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	eba3 0309 	sub.w	r3, r3, r9
 8008174:	455b      	cmp	r3, fp
 8008176:	dc33      	bgt.n	80081e0 <_printf_float+0x380>
 8008178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800817c:	429a      	cmp	r2, r3
 800817e:	db3b      	blt.n	80081f8 <_printf_float+0x398>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	07da      	lsls	r2, r3, #31
 8008184:	d438      	bmi.n	80081f8 <_printf_float+0x398>
 8008186:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800818a:	eba2 0903 	sub.w	r9, r2, r3
 800818e:	9b05      	ldr	r3, [sp, #20]
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	4591      	cmp	r9, r2
 8008194:	bfa8      	it	ge
 8008196:	4691      	movge	r9, r2
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	dc35      	bgt.n	800820a <_printf_float+0x3aa>
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a6:	f104 0a1a 	add.w	sl, r4, #26
 80081aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	eba3 0309 	sub.w	r3, r3, r9
 80081b4:	4543      	cmp	r3, r8
 80081b6:	f77f af79 	ble.w	80080ac <_printf_float+0x24c>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4652      	mov	r2, sl
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f aeaa 	beq.w	8007f1e <_printf_float+0xbe>
 80081ca:	f108 0801 	add.w	r8, r8, #1
 80081ce:	e7ec      	b.n	80081aa <_printf_float+0x34a>
 80081d0:	4613      	mov	r3, r2
 80081d2:	4631      	mov	r1, r6
 80081d4:	4642      	mov	r2, r8
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	d1c0      	bne.n	8008160 <_printf_float+0x300>
 80081de:	e69e      	b.n	8007f1e <_printf_float+0xbe>
 80081e0:	2301      	movs	r3, #1
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	9205      	str	r2, [sp, #20]
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f ae97 	beq.w	8007f1e <_printf_float+0xbe>
 80081f0:	9a05      	ldr	r2, [sp, #20]
 80081f2:	f10b 0b01 	add.w	fp, fp, #1
 80081f6:	e7b9      	b.n	800816c <_printf_float+0x30c>
 80081f8:	ee18 3a10 	vmov	r3, s16
 80081fc:	4652      	mov	r2, sl
 80081fe:	4631      	mov	r1, r6
 8008200:	4628      	mov	r0, r5
 8008202:	47b8      	blx	r7
 8008204:	3001      	adds	r0, #1
 8008206:	d1be      	bne.n	8008186 <_printf_float+0x326>
 8008208:	e689      	b.n	8007f1e <_printf_float+0xbe>
 800820a:	9a05      	ldr	r2, [sp, #20]
 800820c:	464b      	mov	r3, r9
 800820e:	4442      	add	r2, r8
 8008210:	4631      	mov	r1, r6
 8008212:	4628      	mov	r0, r5
 8008214:	47b8      	blx	r7
 8008216:	3001      	adds	r0, #1
 8008218:	d1c1      	bne.n	800819e <_printf_float+0x33e>
 800821a:	e680      	b.n	8007f1e <_printf_float+0xbe>
 800821c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800821e:	2a01      	cmp	r2, #1
 8008220:	dc01      	bgt.n	8008226 <_printf_float+0x3c6>
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d53a      	bpl.n	800829c <_printf_float+0x43c>
 8008226:	2301      	movs	r3, #1
 8008228:	4642      	mov	r2, r8
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f ae74 	beq.w	8007f1e <_printf_float+0xbe>
 8008236:	ee18 3a10 	vmov	r3, s16
 800823a:	4652      	mov	r2, sl
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f ae6b 	beq.w	8007f1e <_printf_float+0xbe>
 8008248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008254:	f7f8 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 8008258:	b9d8      	cbnz	r0, 8008292 <_printf_float+0x432>
 800825a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800825e:	f108 0201 	add.w	r2, r8, #1
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	d10e      	bne.n	800828a <_printf_float+0x42a>
 800826c:	e657      	b.n	8007f1e <_printf_float+0xbe>
 800826e:	2301      	movs	r3, #1
 8008270:	4652      	mov	r2, sl
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	f43f ae50 	beq.w	8007f1e <_printf_float+0xbe>
 800827e:	f108 0801 	add.w	r8, r8, #1
 8008282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008284:	3b01      	subs	r3, #1
 8008286:	4543      	cmp	r3, r8
 8008288:	dcf1      	bgt.n	800826e <_printf_float+0x40e>
 800828a:	464b      	mov	r3, r9
 800828c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008290:	e6da      	b.n	8008048 <_printf_float+0x1e8>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	f104 0a1a 	add.w	sl, r4, #26
 800829a:	e7f2      	b.n	8008282 <_printf_float+0x422>
 800829c:	2301      	movs	r3, #1
 800829e:	4642      	mov	r2, r8
 80082a0:	e7df      	b.n	8008262 <_printf_float+0x402>
 80082a2:	2301      	movs	r3, #1
 80082a4:	464a      	mov	r2, r9
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f ae36 	beq.w	8007f1e <_printf_float+0xbe>
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ba:	1a5b      	subs	r3, r3, r1
 80082bc:	4543      	cmp	r3, r8
 80082be:	dcf0      	bgt.n	80082a2 <_printf_float+0x442>
 80082c0:	e6f8      	b.n	80080b4 <_printf_float+0x254>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0919 	add.w	r9, r4, #25
 80082ca:	e7f4      	b.n	80082b6 <_printf_float+0x456>

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4699      	mov	r9, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bfb8      	it	lt
 80082e0:	4613      	movlt	r3, r2
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc26      	bgt.n	8008362 <_printf_common+0x96>
 8008314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008318:	1e13      	subs	r3, r2, #0
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d42b      	bmi.n	800837c <_printf_common+0xb0>
 8008324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d01e      	beq.n	8008370 <_printf_common+0xa4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	f003 0306 	and.w	r3, r3, #6
 800833a:	2b04      	cmp	r3, #4
 800833c:	bf02      	ittt	eq
 800833e:	68e5      	ldreq	r5, [r4, #12]
 8008340:	6833      	ldreq	r3, [r6, #0]
 8008342:	1aed      	subeq	r5, r5, r3
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	2600      	movs	r6, #0
 8008358:	341a      	adds	r4, #26
 800835a:	42b5      	cmp	r5, r6
 800835c:	d11a      	bne.n	8008394 <_printf_common+0xc8>
 800835e:	2000      	movs	r0, #0
 8008360:	e008      	b.n	8008374 <_printf_common+0xa8>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4649      	mov	r1, r9
 8008368:	4638      	mov	r0, r7
 800836a:	47c0      	blx	r8
 800836c:	3001      	adds	r0, #1
 800836e:	d103      	bne.n	8008378 <_printf_common+0xac>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	3501      	adds	r5, #1
 800837a:	e7c6      	b.n	800830a <_printf_common+0x3e>
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	2030      	movs	r0, #48	; 0x30
 8008382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008386:	4422      	add	r2, r4
 8008388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800838c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008390:	3302      	adds	r3, #2
 8008392:	e7c7      	b.n	8008324 <_printf_common+0x58>
 8008394:	2301      	movs	r3, #1
 8008396:	4622      	mov	r2, r4
 8008398:	4649      	mov	r1, r9
 800839a:	4638      	mov	r0, r7
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d0e6      	beq.n	8008370 <_printf_common+0xa4>
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7d9      	b.n	800835a <_printf_common+0x8e>
	...

080083a8 <_printf_i>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	7e0f      	ldrb	r7, [r1, #24]
 80083ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083b0:	2f78      	cmp	r7, #120	; 0x78
 80083b2:	4691      	mov	r9, r2
 80083b4:	4680      	mov	r8, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	469a      	mov	sl, r3
 80083ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083be:	d807      	bhi.n	80083d0 <_printf_i+0x28>
 80083c0:	2f62      	cmp	r7, #98	; 0x62
 80083c2:	d80a      	bhi.n	80083da <_printf_i+0x32>
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f000 80d4 	beq.w	8008572 <_printf_i+0x1ca>
 80083ca:	2f58      	cmp	r7, #88	; 0x58
 80083cc:	f000 80c0 	beq.w	8008550 <_printf_i+0x1a8>
 80083d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d8:	e03a      	b.n	8008450 <_printf_i+0xa8>
 80083da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d8f6      	bhi.n	80083d0 <_printf_i+0x28>
 80083e2:	a101      	add	r1, pc, #4	; (adr r1, 80083e8 <_printf_i+0x40>)
 80083e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083e8:	08008441 	.word	0x08008441
 80083ec:	08008455 	.word	0x08008455
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	080083d1 	.word	0x080083d1
 80083f8:	080083d1 	.word	0x080083d1
 80083fc:	080083d1 	.word	0x080083d1
 8008400:	08008455 	.word	0x08008455
 8008404:	080083d1 	.word	0x080083d1
 8008408:	080083d1 	.word	0x080083d1
 800840c:	080083d1 	.word	0x080083d1
 8008410:	080083d1 	.word	0x080083d1
 8008414:	08008559 	.word	0x08008559
 8008418:	08008481 	.word	0x08008481
 800841c:	08008513 	.word	0x08008513
 8008420:	080083d1 	.word	0x080083d1
 8008424:	080083d1 	.word	0x080083d1
 8008428:	0800857b 	.word	0x0800857b
 800842c:	080083d1 	.word	0x080083d1
 8008430:	08008481 	.word	0x08008481
 8008434:	080083d1 	.word	0x080083d1
 8008438:	080083d1 	.word	0x080083d1
 800843c:	0800851b 	.word	0x0800851b
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800844c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008450:	2301      	movs	r3, #1
 8008452:	e09f      	b.n	8008594 <_printf_i+0x1ec>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	0607      	lsls	r7, r0, #24
 800845a:	f103 0104 	add.w	r1, r3, #4
 800845e:	6029      	str	r1, [r5, #0]
 8008460:	d501      	bpl.n	8008466 <_printf_i+0xbe>
 8008462:	681e      	ldr	r6, [r3, #0]
 8008464:	e003      	b.n	800846e <_printf_i+0xc6>
 8008466:	0646      	lsls	r6, r0, #25
 8008468:	d5fb      	bpl.n	8008462 <_printf_i+0xba>
 800846a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800846e:	2e00      	cmp	r6, #0
 8008470:	da03      	bge.n	800847a <_printf_i+0xd2>
 8008472:	232d      	movs	r3, #45	; 0x2d
 8008474:	4276      	negs	r6, r6
 8008476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847a:	485a      	ldr	r0, [pc, #360]	; (80085e4 <_printf_i+0x23c>)
 800847c:	230a      	movs	r3, #10
 800847e:	e012      	b.n	80084a6 <_printf_i+0xfe>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	6820      	ldr	r0, [r4, #0]
 8008484:	1d19      	adds	r1, r3, #4
 8008486:	6029      	str	r1, [r5, #0]
 8008488:	0605      	lsls	r5, r0, #24
 800848a:	d501      	bpl.n	8008490 <_printf_i+0xe8>
 800848c:	681e      	ldr	r6, [r3, #0]
 800848e:	e002      	b.n	8008496 <_printf_i+0xee>
 8008490:	0641      	lsls	r1, r0, #25
 8008492:	d5fb      	bpl.n	800848c <_printf_i+0xe4>
 8008494:	881e      	ldrh	r6, [r3, #0]
 8008496:	4853      	ldr	r0, [pc, #332]	; (80085e4 <_printf_i+0x23c>)
 8008498:	2f6f      	cmp	r7, #111	; 0x6f
 800849a:	bf0c      	ite	eq
 800849c:	2308      	moveq	r3, #8
 800849e:	230a      	movne	r3, #10
 80084a0:	2100      	movs	r1, #0
 80084a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084a6:	6865      	ldr	r5, [r4, #4]
 80084a8:	60a5      	str	r5, [r4, #8]
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	bfa2      	ittt	ge
 80084ae:	6821      	ldrge	r1, [r4, #0]
 80084b0:	f021 0104 	bicge.w	r1, r1, #4
 80084b4:	6021      	strge	r1, [r4, #0]
 80084b6:	b90e      	cbnz	r6, 80084bc <_printf_i+0x114>
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	d04b      	beq.n	8008554 <_printf_i+0x1ac>
 80084bc:	4615      	mov	r5, r2
 80084be:	fbb6 f1f3 	udiv	r1, r6, r3
 80084c2:	fb03 6711 	mls	r7, r3, r1, r6
 80084c6:	5dc7      	ldrb	r7, [r0, r7]
 80084c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084cc:	4637      	mov	r7, r6
 80084ce:	42bb      	cmp	r3, r7
 80084d0:	460e      	mov	r6, r1
 80084d2:	d9f4      	bls.n	80084be <_printf_i+0x116>
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d10b      	bne.n	80084f0 <_printf_i+0x148>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	07de      	lsls	r6, r3, #31
 80084dc:	d508      	bpl.n	80084f0 <_printf_i+0x148>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	6861      	ldr	r1, [r4, #4]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	bfde      	ittt	le
 80084e6:	2330      	movle	r3, #48	; 0x30
 80084e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084f0:	1b52      	subs	r2, r2, r5
 80084f2:	6122      	str	r2, [r4, #16]
 80084f4:	f8cd a000 	str.w	sl, [sp]
 80084f8:	464b      	mov	r3, r9
 80084fa:	aa03      	add	r2, sp, #12
 80084fc:	4621      	mov	r1, r4
 80084fe:	4640      	mov	r0, r8
 8008500:	f7ff fee4 	bl	80082cc <_printf_common>
 8008504:	3001      	adds	r0, #1
 8008506:	d14a      	bne.n	800859e <_printf_i+0x1f6>
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	b004      	add	sp, #16
 800850e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f043 0320 	orr.w	r3, r3, #32
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	4833      	ldr	r0, [pc, #204]	; (80085e8 <_printf_i+0x240>)
 800851c:	2778      	movs	r7, #120	; 0x78
 800851e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6829      	ldr	r1, [r5, #0]
 8008526:	061f      	lsls	r7, r3, #24
 8008528:	f851 6b04 	ldr.w	r6, [r1], #4
 800852c:	d402      	bmi.n	8008534 <_printf_i+0x18c>
 800852e:	065f      	lsls	r7, r3, #25
 8008530:	bf48      	it	mi
 8008532:	b2b6      	uxthmi	r6, r6
 8008534:	07df      	lsls	r7, r3, #31
 8008536:	bf48      	it	mi
 8008538:	f043 0320 	orrmi.w	r3, r3, #32
 800853c:	6029      	str	r1, [r5, #0]
 800853e:	bf48      	it	mi
 8008540:	6023      	strmi	r3, [r4, #0]
 8008542:	b91e      	cbnz	r6, 800854c <_printf_i+0x1a4>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	f023 0320 	bic.w	r3, r3, #32
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	2310      	movs	r3, #16
 800854e:	e7a7      	b.n	80084a0 <_printf_i+0xf8>
 8008550:	4824      	ldr	r0, [pc, #144]	; (80085e4 <_printf_i+0x23c>)
 8008552:	e7e4      	b.n	800851e <_printf_i+0x176>
 8008554:	4615      	mov	r5, r2
 8008556:	e7bd      	b.n	80084d4 <_printf_i+0x12c>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	6826      	ldr	r6, [r4, #0]
 800855c:	6961      	ldr	r1, [r4, #20]
 800855e:	1d18      	adds	r0, r3, #4
 8008560:	6028      	str	r0, [r5, #0]
 8008562:	0635      	lsls	r5, r6, #24
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	d501      	bpl.n	800856c <_printf_i+0x1c4>
 8008568:	6019      	str	r1, [r3, #0]
 800856a:	e002      	b.n	8008572 <_printf_i+0x1ca>
 800856c:	0670      	lsls	r0, r6, #25
 800856e:	d5fb      	bpl.n	8008568 <_printf_i+0x1c0>
 8008570:	8019      	strh	r1, [r3, #0]
 8008572:	2300      	movs	r3, #0
 8008574:	6123      	str	r3, [r4, #16]
 8008576:	4615      	mov	r5, r2
 8008578:	e7bc      	b.n	80084f4 <_printf_i+0x14c>
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	1d1a      	adds	r2, r3, #4
 800857e:	602a      	str	r2, [r5, #0]
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	6862      	ldr	r2, [r4, #4]
 8008584:	2100      	movs	r1, #0
 8008586:	4628      	mov	r0, r5
 8008588:	f7f7 fe42 	bl	8000210 <memchr>
 800858c:	b108      	cbz	r0, 8008592 <_printf_i+0x1ea>
 800858e:	1b40      	subs	r0, r0, r5
 8008590:	6060      	str	r0, [r4, #4]
 8008592:	6863      	ldr	r3, [r4, #4]
 8008594:	6123      	str	r3, [r4, #16]
 8008596:	2300      	movs	r3, #0
 8008598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859c:	e7aa      	b.n	80084f4 <_printf_i+0x14c>
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	462a      	mov	r2, r5
 80085a2:	4649      	mov	r1, r9
 80085a4:	4640      	mov	r0, r8
 80085a6:	47d0      	blx	sl
 80085a8:	3001      	adds	r0, #1
 80085aa:	d0ad      	beq.n	8008508 <_printf_i+0x160>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	079b      	lsls	r3, r3, #30
 80085b0:	d413      	bmi.n	80085da <_printf_i+0x232>
 80085b2:	68e0      	ldr	r0, [r4, #12]
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	4298      	cmp	r0, r3
 80085b8:	bfb8      	it	lt
 80085ba:	4618      	movlt	r0, r3
 80085bc:	e7a6      	b.n	800850c <_printf_i+0x164>
 80085be:	2301      	movs	r3, #1
 80085c0:	4632      	mov	r2, r6
 80085c2:	4649      	mov	r1, r9
 80085c4:	4640      	mov	r0, r8
 80085c6:	47d0      	blx	sl
 80085c8:	3001      	adds	r0, #1
 80085ca:	d09d      	beq.n	8008508 <_printf_i+0x160>
 80085cc:	3501      	adds	r5, #1
 80085ce:	68e3      	ldr	r3, [r4, #12]
 80085d0:	9903      	ldr	r1, [sp, #12]
 80085d2:	1a5b      	subs	r3, r3, r1
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dcf2      	bgt.n	80085be <_printf_i+0x216>
 80085d8:	e7eb      	b.n	80085b2 <_printf_i+0x20a>
 80085da:	2500      	movs	r5, #0
 80085dc:	f104 0619 	add.w	r6, r4, #25
 80085e0:	e7f5      	b.n	80085ce <_printf_i+0x226>
 80085e2:	bf00      	nop
 80085e4:	0803db12 	.word	0x0803db12
 80085e8:	0803db23 	.word	0x0803db23

080085ec <std>:
 80085ec:	2300      	movs	r3, #0
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	e9c0 3300 	strd	r3, r3, [r0]
 80085f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085fa:	6083      	str	r3, [r0, #8]
 80085fc:	8181      	strh	r1, [r0, #12]
 80085fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008600:	81c2      	strh	r2, [r0, #14]
 8008602:	6183      	str	r3, [r0, #24]
 8008604:	4619      	mov	r1, r3
 8008606:	2208      	movs	r2, #8
 8008608:	305c      	adds	r0, #92	; 0x5c
 800860a:	f000 f914 	bl	8008836 <memset>
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <std+0x58>)
 8008610:	6263      	str	r3, [r4, #36]	; 0x24
 8008612:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <std+0x5c>)
 8008614:	62a3      	str	r3, [r4, #40]	; 0x28
 8008616:	4b0d      	ldr	r3, [pc, #52]	; (800864c <std+0x60>)
 8008618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800861a:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <std+0x64>)
 800861c:	6323      	str	r3, [r4, #48]	; 0x30
 800861e:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <std+0x68>)
 8008620:	6224      	str	r4, [r4, #32]
 8008622:	429c      	cmp	r4, r3
 8008624:	d006      	beq.n	8008634 <std+0x48>
 8008626:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800862a:	4294      	cmp	r4, r2
 800862c:	d002      	beq.n	8008634 <std+0x48>
 800862e:	33d0      	adds	r3, #208	; 0xd0
 8008630:	429c      	cmp	r4, r3
 8008632:	d105      	bne.n	8008640 <std+0x54>
 8008634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800863c:	f000 b988 	b.w	8008950 <__retarget_lock_init_recursive>
 8008640:	bd10      	pop	{r4, pc}
 8008642:	bf00      	nop
 8008644:	080087b1 	.word	0x080087b1
 8008648:	080087d3 	.word	0x080087d3
 800864c:	0800880b 	.word	0x0800880b
 8008650:	0800882f 	.word	0x0800882f
 8008654:	20001734 	.word	0x20001734

08008658 <stdio_exit_handler>:
 8008658:	4a02      	ldr	r2, [pc, #8]	; (8008664 <stdio_exit_handler+0xc>)
 800865a:	4903      	ldr	r1, [pc, #12]	; (8008668 <stdio_exit_handler+0x10>)
 800865c:	4803      	ldr	r0, [pc, #12]	; (800866c <stdio_exit_handler+0x14>)
 800865e:	f000 b869 	b.w	8008734 <_fwalk_sglue>
 8008662:	bf00      	nop
 8008664:	20000c04 	.word	0x20000c04
 8008668:	0800a1c9 	.word	0x0800a1c9
 800866c:	20000c10 	.word	0x20000c10

08008670 <cleanup_stdio>:
 8008670:	6841      	ldr	r1, [r0, #4]
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <cleanup_stdio+0x34>)
 8008674:	4299      	cmp	r1, r3
 8008676:	b510      	push	{r4, lr}
 8008678:	4604      	mov	r4, r0
 800867a:	d001      	beq.n	8008680 <cleanup_stdio+0x10>
 800867c:	f001 fda4 	bl	800a1c8 <_fflush_r>
 8008680:	68a1      	ldr	r1, [r4, #8]
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <cleanup_stdio+0x38>)
 8008684:	4299      	cmp	r1, r3
 8008686:	d002      	beq.n	800868e <cleanup_stdio+0x1e>
 8008688:	4620      	mov	r0, r4
 800868a:	f001 fd9d 	bl	800a1c8 <_fflush_r>
 800868e:	68e1      	ldr	r1, [r4, #12]
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <cleanup_stdio+0x3c>)
 8008692:	4299      	cmp	r1, r3
 8008694:	d004      	beq.n	80086a0 <cleanup_stdio+0x30>
 8008696:	4620      	mov	r0, r4
 8008698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800869c:	f001 bd94 	b.w	800a1c8 <_fflush_r>
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	bf00      	nop
 80086a4:	20001734 	.word	0x20001734
 80086a8:	2000179c 	.word	0x2000179c
 80086ac:	20001804 	.word	0x20001804

080086b0 <global_stdio_init.part.0>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <global_stdio_init.part.0+0x30>)
 80086b4:	4c0b      	ldr	r4, [pc, #44]	; (80086e4 <global_stdio_init.part.0+0x34>)
 80086b6:	4a0c      	ldr	r2, [pc, #48]	; (80086e8 <global_stdio_init.part.0+0x38>)
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	4620      	mov	r0, r4
 80086bc:	2200      	movs	r2, #0
 80086be:	2104      	movs	r1, #4
 80086c0:	f7ff ff94 	bl	80085ec <std>
 80086c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086c8:	2201      	movs	r2, #1
 80086ca:	2109      	movs	r1, #9
 80086cc:	f7ff ff8e 	bl	80085ec <std>
 80086d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086d4:	2202      	movs	r2, #2
 80086d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086da:	2112      	movs	r1, #18
 80086dc:	f7ff bf86 	b.w	80085ec <std>
 80086e0:	2000186c 	.word	0x2000186c
 80086e4:	20001734 	.word	0x20001734
 80086e8:	08008659 	.word	0x08008659

080086ec <__sfp_lock_acquire>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__sfp_lock_acquire+0x8>)
 80086ee:	f000 b930 	b.w	8008952 <__retarget_lock_acquire_recursive>
 80086f2:	bf00      	nop
 80086f4:	20001875 	.word	0x20001875

080086f8 <__sfp_lock_release>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__sfp_lock_release+0x8>)
 80086fa:	f000 b92b 	b.w	8008954 <__retarget_lock_release_recursive>
 80086fe:	bf00      	nop
 8008700:	20001875 	.word	0x20001875

08008704 <__sinit>:
 8008704:	b510      	push	{r4, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	f7ff fff0 	bl	80086ec <__sfp_lock_acquire>
 800870c:	6a23      	ldr	r3, [r4, #32]
 800870e:	b11b      	cbz	r3, 8008718 <__sinit+0x14>
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008714:	f7ff bff0 	b.w	80086f8 <__sfp_lock_release>
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <__sinit+0x28>)
 800871a:	6223      	str	r3, [r4, #32]
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <__sinit+0x2c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1f5      	bne.n	8008710 <__sinit+0xc>
 8008724:	f7ff ffc4 	bl	80086b0 <global_stdio_init.part.0>
 8008728:	e7f2      	b.n	8008710 <__sinit+0xc>
 800872a:	bf00      	nop
 800872c:	08008671 	.word	0x08008671
 8008730:	2000186c 	.word	0x2000186c

08008734 <_fwalk_sglue>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4607      	mov	r7, r0
 800873a:	4688      	mov	r8, r1
 800873c:	4614      	mov	r4, r2
 800873e:	2600      	movs	r6, #0
 8008740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008744:	f1b9 0901 	subs.w	r9, r9, #1
 8008748:	d505      	bpl.n	8008756 <_fwalk_sglue+0x22>
 800874a:	6824      	ldr	r4, [r4, #0]
 800874c:	2c00      	cmp	r4, #0
 800874e:	d1f7      	bne.n	8008740 <_fwalk_sglue+0xc>
 8008750:	4630      	mov	r0, r6
 8008752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d907      	bls.n	800876c <_fwalk_sglue+0x38>
 800875c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008760:	3301      	adds	r3, #1
 8008762:	d003      	beq.n	800876c <_fwalk_sglue+0x38>
 8008764:	4629      	mov	r1, r5
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	4306      	orrs	r6, r0
 800876c:	3568      	adds	r5, #104	; 0x68
 800876e:	e7e9      	b.n	8008744 <_fwalk_sglue+0x10>

08008770 <siprintf>:
 8008770:	b40e      	push	{r1, r2, r3}
 8008772:	b500      	push	{lr}
 8008774:	b09c      	sub	sp, #112	; 0x70
 8008776:	ab1d      	add	r3, sp, #116	; 0x74
 8008778:	9002      	str	r0, [sp, #8]
 800877a:	9006      	str	r0, [sp, #24]
 800877c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008780:	4809      	ldr	r0, [pc, #36]	; (80087a8 <siprintf+0x38>)
 8008782:	9107      	str	r1, [sp, #28]
 8008784:	9104      	str	r1, [sp, #16]
 8008786:	4909      	ldr	r1, [pc, #36]	; (80087ac <siprintf+0x3c>)
 8008788:	f853 2b04 	ldr.w	r2, [r3], #4
 800878c:	9105      	str	r1, [sp, #20]
 800878e:	6800      	ldr	r0, [r0, #0]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	a902      	add	r1, sp, #8
 8008794:	f001 fb94 	bl	8009ec0 <_svfiprintf_r>
 8008798:	9b02      	ldr	r3, [sp, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	b01c      	add	sp, #112	; 0x70
 80087a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a4:	b003      	add	sp, #12
 80087a6:	4770      	bx	lr
 80087a8:	20000c5c 	.word	0x20000c5c
 80087ac:	ffff0208 	.word	0xffff0208

080087b0 <__sread>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	460c      	mov	r4, r1
 80087b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b8:	f000 f86c 	bl	8008894 <_read_r>
 80087bc:	2800      	cmp	r0, #0
 80087be:	bfab      	itete	ge
 80087c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087c2:	89a3      	ldrhlt	r3, [r4, #12]
 80087c4:	181b      	addge	r3, r3, r0
 80087c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ca:	bfac      	ite	ge
 80087cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ce:	81a3      	strhlt	r3, [r4, #12]
 80087d0:	bd10      	pop	{r4, pc}

080087d2 <__swrite>:
 80087d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	461f      	mov	r7, r3
 80087d8:	898b      	ldrh	r3, [r1, #12]
 80087da:	05db      	lsls	r3, r3, #23
 80087dc:	4605      	mov	r5, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	4616      	mov	r6, r2
 80087e2:	d505      	bpl.n	80087f0 <__swrite+0x1e>
 80087e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e8:	2302      	movs	r3, #2
 80087ea:	2200      	movs	r2, #0
 80087ec:	f000 f840 	bl	8008870 <_lseek_r>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	4632      	mov	r2, r6
 80087fe:	463b      	mov	r3, r7
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008806:	f000 b867 	b.w	80088d8 <_write_r>

0800880a <__sseek>:
 800880a:	b510      	push	{r4, lr}
 800880c:	460c      	mov	r4, r1
 800880e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008812:	f000 f82d 	bl	8008870 <_lseek_r>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	bf15      	itete	ne
 800881c:	6560      	strne	r0, [r4, #84]	; 0x54
 800881e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008826:	81a3      	strheq	r3, [r4, #12]
 8008828:	bf18      	it	ne
 800882a:	81a3      	strhne	r3, [r4, #12]
 800882c:	bd10      	pop	{r4, pc}

0800882e <__sclose>:
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 b80d 	b.w	8008850 <_close_r>

08008836 <memset>:
 8008836:	4402      	add	r2, r0
 8008838:	4603      	mov	r3, r0
 800883a:	4293      	cmp	r3, r2
 800883c:	d100      	bne.n	8008840 <memset+0xa>
 800883e:	4770      	bx	lr
 8008840:	f803 1b01 	strb.w	r1, [r3], #1
 8008844:	e7f9      	b.n	800883a <memset+0x4>
	...

08008848 <_localeconv_r>:
 8008848:	4800      	ldr	r0, [pc, #0]	; (800884c <_localeconv_r+0x4>)
 800884a:	4770      	bx	lr
 800884c:	20000d50 	.word	0x20000d50

08008850 <_close_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	; (800886c <_close_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7f9 fa32 	bl	8001cc4 <_close>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_close_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_close_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20001870 	.word	0x20001870

08008870 <_lseek_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_lseek_r+0x20>)
 8008874:	4604      	mov	r4, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	602a      	str	r2, [r5, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7f9 fa2a 	bl	8001cd8 <_lseek>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_lseek_r+0x1e>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_lseek_r+0x1e>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20001870 	.word	0x20001870

08008894 <_read_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	; (80088b4 <_read_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7f9 fa00 	bl	8001ca8 <_read>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_read_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_read_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20001870 	.word	0x20001870

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f9 fa0a 	bl	8001cdc <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20001870 	.word	0x20001870

080088d8 <_write_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	; (80088f8 <_write_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7fa ff28 	bl	800373c <_write>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_write_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_write_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20001870 	.word	0x20001870

080088fc <__errno>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	; (8008904 <__errno+0x8>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20000c5c 	.word	0x20000c5c

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4d0d      	ldr	r5, [pc, #52]	; (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	; (8008944 <__libc_init_array+0x3c>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2600      	movs	r6, #0
 8008914:	42a6      	cmp	r6, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4d0b      	ldr	r5, [pc, #44]	; (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	; (800894c <__libc_init_array+0x44>)
 800891c:	f002 fa66 	bl	800adec <_init>
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2600      	movs	r6, #0
 8008926:	42a6      	cmp	r6, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008930:	4798      	blx	r3
 8008932:	3601      	adds	r6, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f855 3b04 	ldr.w	r3, [r5], #4
 800893a:	4798      	blx	r3
 800893c:	3601      	adds	r6, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	0803de94 	.word	0x0803de94
 8008944:	0803de94 	.word	0x0803de94
 8008948:	0803de94 	.word	0x0803de94
 800894c:	0803de98 	.word	0x0803de98

08008950 <__retarget_lock_init_recursive>:
 8008950:	4770      	bx	lr

08008952 <__retarget_lock_acquire_recursive>:
 8008952:	4770      	bx	lr

08008954 <__retarget_lock_release_recursive>:
 8008954:	4770      	bx	lr

08008956 <memcpy>:
 8008956:	440a      	add	r2, r1
 8008958:	4291      	cmp	r1, r2
 800895a:	f100 33ff 	add.w	r3, r0, #4294967295
 800895e:	d100      	bne.n	8008962 <memcpy+0xc>
 8008960:	4770      	bx	lr
 8008962:	b510      	push	{r4, lr}
 8008964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896c:	4291      	cmp	r1, r2
 800896e:	d1f9      	bne.n	8008964 <memcpy+0xe>
 8008970:	bd10      	pop	{r4, pc}

08008972 <quorem>:
 8008972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	6903      	ldr	r3, [r0, #16]
 8008978:	690c      	ldr	r4, [r1, #16]
 800897a:	42a3      	cmp	r3, r4
 800897c:	4607      	mov	r7, r0
 800897e:	db7e      	blt.n	8008a7e <quorem+0x10c>
 8008980:	3c01      	subs	r4, #1
 8008982:	f101 0814 	add.w	r8, r1, #20
 8008986:	f100 0514 	add.w	r5, r0, #20
 800898a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008998:	3301      	adds	r3, #1
 800899a:	429a      	cmp	r2, r3
 800899c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089a8:	d331      	bcc.n	8008a0e <quorem+0x9c>
 80089aa:	f04f 0e00 	mov.w	lr, #0
 80089ae:	4640      	mov	r0, r8
 80089b0:	46ac      	mov	ip, r5
 80089b2:	46f2      	mov	sl, lr
 80089b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80089b8:	b293      	uxth	r3, r2
 80089ba:	fb06 e303 	mla	r3, r6, r3, lr
 80089be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089c2:	0c1a      	lsrs	r2, r3, #16
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ebaa 0303 	sub.w	r3, sl, r3
 80089ca:	f8dc a000 	ldr.w	sl, [ip]
 80089ce:	fa13 f38a 	uxtah	r3, r3, sl
 80089d2:	fb06 220e 	mla	r2, r6, lr, r2
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089de:	b292      	uxth	r2, r2
 80089e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80089ec:	4581      	cmp	r9, r0
 80089ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f2:	f84c 3b04 	str.w	r3, [ip], #4
 80089f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089fa:	d2db      	bcs.n	80089b4 <quorem+0x42>
 80089fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a00:	b92b      	cbnz	r3, 8008a0e <quorem+0x9c>
 8008a02:	9b01      	ldr	r3, [sp, #4]
 8008a04:	3b04      	subs	r3, #4
 8008a06:	429d      	cmp	r5, r3
 8008a08:	461a      	mov	r2, r3
 8008a0a:	d32c      	bcc.n	8008a66 <quorem+0xf4>
 8008a0c:	613c      	str	r4, [r7, #16]
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f001 f8f4 	bl	8009bfc <__mcmp>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	db22      	blt.n	8008a5e <quorem+0xec>
 8008a18:	3601      	adds	r6, #1
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a22:	f8d1 c000 	ldr.w	ip, [r1]
 8008a26:	b293      	uxth	r3, r2
 8008a28:	1ac3      	subs	r3, r0, r3
 8008a2a:	0c12      	lsrs	r2, r2, #16
 8008a2c:	fa13 f38c 	uxtah	r3, r3, ip
 8008a30:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a3e:	45c1      	cmp	r9, r8
 8008a40:	f841 3b04 	str.w	r3, [r1], #4
 8008a44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a48:	d2e9      	bcs.n	8008a1e <quorem+0xac>
 8008a4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a52:	b922      	cbnz	r2, 8008a5e <quorem+0xec>
 8008a54:	3b04      	subs	r3, #4
 8008a56:	429d      	cmp	r5, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	d30a      	bcc.n	8008a72 <quorem+0x100>
 8008a5c:	613c      	str	r4, [r7, #16]
 8008a5e:	4630      	mov	r0, r6
 8008a60:	b003      	add	sp, #12
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	3b04      	subs	r3, #4
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	d1ce      	bne.n	8008a0c <quorem+0x9a>
 8008a6e:	3c01      	subs	r4, #1
 8008a70:	e7c9      	b.n	8008a06 <quorem+0x94>
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	3b04      	subs	r3, #4
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d1f0      	bne.n	8008a5c <quorem+0xea>
 8008a7a:	3c01      	subs	r4, #1
 8008a7c:	e7eb      	b.n	8008a56 <quorem+0xe4>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e7ee      	b.n	8008a60 <quorem+0xee>
 8008a82:	0000      	movs	r0, r0
 8008a84:	0000      	movs	r0, r0
	...

08008a88 <_dtoa_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	ed2d 8b04 	vpush	{d8-d9}
 8008a90:	69c5      	ldr	r5, [r0, #28]
 8008a92:	b093      	sub	sp, #76	; 0x4c
 8008a94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a98:	ec57 6b10 	vmov	r6, r7, d0
 8008a9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aa0:	9107      	str	r1, [sp, #28]
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa8:	b975      	cbnz	r5, 8008ac8 <_dtoa_r+0x40>
 8008aaa:	2010      	movs	r0, #16
 8008aac:	f7fa fe78 	bl	80037a0 <__wrap_malloc>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	61e0      	str	r0, [r4, #28]
 8008ab4:	b920      	cbnz	r0, 8008ac0 <_dtoa_r+0x38>
 8008ab6:	4bae      	ldr	r3, [pc, #696]	; (8008d70 <_dtoa_r+0x2e8>)
 8008ab8:	21ef      	movs	r1, #239	; 0xef
 8008aba:	48ae      	ldr	r0, [pc, #696]	; (8008d74 <_dtoa_r+0x2ec>)
 8008abc:	f001 fbc6 	bl	800a24c <__assert_func>
 8008ac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ac4:	6005      	str	r5, [r0, #0]
 8008ac6:	60c5      	str	r5, [r0, #12]
 8008ac8:	69e3      	ldr	r3, [r4, #28]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	b151      	cbz	r1, 8008ae4 <_dtoa_r+0x5c>
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	604a      	str	r2, [r1, #4]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4093      	lsls	r3, r2
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fe53 	bl	8009784 <_Bfree>
 8008ade:	69e3      	ldr	r3, [r4, #28]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	1e3b      	subs	r3, r7, #0
 8008ae6:	bfbb      	ittet	lt
 8008ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008aec:	9303      	strlt	r3, [sp, #12]
 8008aee:	2300      	movge	r3, #0
 8008af0:	2201      	movlt	r2, #1
 8008af2:	bfac      	ite	ge
 8008af4:	f8c8 3000 	strge.w	r3, [r8]
 8008af8:	f8c8 2000 	strlt.w	r2, [r8]
 8008afc:	4b9e      	ldr	r3, [pc, #632]	; (8008d78 <_dtoa_r+0x2f0>)
 8008afe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b02:	ea33 0308 	bics.w	r3, r3, r8
 8008b06:	d11b      	bne.n	8008b40 <_dtoa_r+0xb8>
 8008b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b14:	4333      	orrs	r3, r6
 8008b16:	f000 8593 	beq.w	8009640 <_dtoa_r+0xbb8>
 8008b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b1c:	b963      	cbnz	r3, 8008b38 <_dtoa_r+0xb0>
 8008b1e:	4b97      	ldr	r3, [pc, #604]	; (8008d7c <_dtoa_r+0x2f4>)
 8008b20:	e027      	b.n	8008b72 <_dtoa_r+0xea>
 8008b22:	4b97      	ldr	r3, [pc, #604]	; (8008d80 <_dtoa_r+0x2f8>)
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	9800      	ldr	r0, [sp, #0]
 8008b2e:	b013      	add	sp, #76	; 0x4c
 8008b30:	ecbd 8b04 	vpop	{d8-d9}
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	4b90      	ldr	r3, [pc, #576]	; (8008d7c <_dtoa_r+0x2f4>)
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	3303      	adds	r3, #3
 8008b3e:	e7f3      	b.n	8008b28 <_dtoa_r+0xa0>
 8008b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	ec51 0b17 	vmov	r0, r1, d7
 8008b4a:	eeb0 8a47 	vmov.f32	s16, s14
 8008b4e:	eef0 8a67 	vmov.f32	s17, s15
 8008b52:	2300      	movs	r3, #0
 8008b54:	f7f7 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b58:	4681      	mov	r9, r0
 8008b5a:	b160      	cbz	r0, 8008b76 <_dtoa_r+0xee>
 8008b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b5e:	2301      	movs	r3, #1
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8568 	beq.w	800963a <_dtoa_r+0xbb2>
 8008b6a:	4b86      	ldr	r3, [pc, #536]	; (8008d84 <_dtoa_r+0x2fc>)
 8008b6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	e7da      	b.n	8008b2c <_dtoa_r+0xa4>
 8008b76:	aa10      	add	r2, sp, #64	; 0x40
 8008b78:	a911      	add	r1, sp, #68	; 0x44
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008b80:	eef0 0a68 	vmov.f32	s1, s17
 8008b84:	f001 f8e0 	bl	8009d48 <__d2b>
 8008b88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	d07f      	beq.n	8008c92 <_dtoa_r+0x20a>
 8008b92:	ee18 3a90 	vmov	r3, s17
 8008b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b9e:	ec51 0b18 	vmov	r0, r1, d8
 8008ba2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008baa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bae:	4619      	mov	r1, r3
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4b75      	ldr	r3, [pc, #468]	; (8008d88 <_dtoa_r+0x300>)
 8008bb4:	f7f7 fb88 	bl	80002c8 <__aeabi_dsub>
 8008bb8:	a367      	add	r3, pc, #412	; (adr r3, 8008d58 <_dtoa_r+0x2d0>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f7f7 fd3b 	bl	8000638 <__aeabi_dmul>
 8008bc2:	a367      	add	r3, pc, #412	; (adr r3, 8008d60 <_dtoa_r+0x2d8>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f7f7 fb80 	bl	80002cc <__adddf3>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	4628      	mov	r0, r5
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	f7f7 fcc7 	bl	8000564 <__aeabi_i2d>
 8008bd6:	a364      	add	r3, pc, #400	; (adr r3, 8008d68 <_dtoa_r+0x2e0>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fd2c 	bl	8000638 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 fb70 	bl	80002cc <__adddf3>
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	f7f7 ffd2 	bl	8000b98 <__aeabi_d2iz>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4683      	mov	fp, r0
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 ff8d 	bl	8000b1c <__aeabi_dcmplt>
 8008c02:	b148      	cbz	r0, 8008c18 <_dtoa_r+0x190>
 8008c04:	4658      	mov	r0, fp
 8008c06:	f7f7 fcad 	bl	8000564 <__aeabi_i2d>
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	f7f7 ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8008c12:	b908      	cbnz	r0, 8008c18 <_dtoa_r+0x190>
 8008c14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c18:	f1bb 0f16 	cmp.w	fp, #22
 8008c1c:	d857      	bhi.n	8008cce <_dtoa_r+0x246>
 8008c1e:	4b5b      	ldr	r3, [pc, #364]	; (8008d8c <_dtoa_r+0x304>)
 8008c20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	ec51 0b18 	vmov	r0, r1, d8
 8008c2c:	f7f7 ff76 	bl	8000b1c <__aeabi_dcmplt>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d04e      	beq.n	8008cd2 <_dtoa_r+0x24a>
 8008c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c38:	2300      	movs	r3, #0
 8008c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c3e:	1b5b      	subs	r3, r3, r5
 8008c40:	1e5a      	subs	r2, r3, #1
 8008c42:	bf45      	ittet	mi
 8008c44:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c48:	9305      	strmi	r3, [sp, #20]
 8008c4a:	2300      	movpl	r3, #0
 8008c4c:	2300      	movmi	r3, #0
 8008c4e:	9206      	str	r2, [sp, #24]
 8008c50:	bf54      	ite	pl
 8008c52:	9305      	strpl	r3, [sp, #20]
 8008c54:	9306      	strmi	r3, [sp, #24]
 8008c56:	f1bb 0f00 	cmp.w	fp, #0
 8008c5a:	db3c      	blt.n	8008cd6 <_dtoa_r+0x24e>
 8008c5c:	9b06      	ldr	r3, [sp, #24]
 8008c5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c62:	445b      	add	r3, fp
 8008c64:	9306      	str	r3, [sp, #24]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	9b07      	ldr	r3, [sp, #28]
 8008c6c:	2b09      	cmp	r3, #9
 8008c6e:	d868      	bhi.n	8008d42 <_dtoa_r+0x2ba>
 8008c70:	2b05      	cmp	r3, #5
 8008c72:	bfc4      	itt	gt
 8008c74:	3b04      	subgt	r3, #4
 8008c76:	9307      	strgt	r3, [sp, #28]
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	f1a3 0302 	sub.w	r3, r3, #2
 8008c7e:	bfcc      	ite	gt
 8008c80:	2500      	movgt	r5, #0
 8008c82:	2501      	movle	r5, #1
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	f200 8085 	bhi.w	8008d94 <_dtoa_r+0x30c>
 8008c8a:	e8df f003 	tbb	[pc, r3]
 8008c8e:	3b2e      	.short	0x3b2e
 8008c90:	5839      	.short	0x5839
 8008c92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c96:	441d      	add	r5, r3
 8008c98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	bfc1      	itttt	gt
 8008ca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ca4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ca8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008cac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008cb0:	bfd6      	itet	le
 8008cb2:	f1c3 0320 	rsble	r3, r3, #32
 8008cb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cba:	fa06 f003 	lslle.w	r0, r6, r3
 8008cbe:	f7f7 fc41 	bl	8000544 <__aeabi_ui2d>
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008cc8:	3d01      	subs	r5, #1
 8008cca:	920e      	str	r2, [sp, #56]	; 0x38
 8008ccc:	e76f      	b.n	8008bae <_dtoa_r+0x126>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e7b3      	b.n	8008c3a <_dtoa_r+0x1b2>
 8008cd2:	900c      	str	r0, [sp, #48]	; 0x30
 8008cd4:	e7b2      	b.n	8008c3c <_dtoa_r+0x1b4>
 8008cd6:	9b05      	ldr	r3, [sp, #20]
 8008cd8:	eba3 030b 	sub.w	r3, r3, fp
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	f1cb 0300 	rsb	r3, fp, #0
 8008ce2:	9308      	str	r3, [sp, #32]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce8:	e7bf      	b.n	8008c6a <_dtoa_r+0x1e2>
 8008cea:	2300      	movs	r3, #0
 8008cec:	9309      	str	r3, [sp, #36]	; 0x24
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dc52      	bgt.n	8008d9a <_dtoa_r+0x312>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	9301      	str	r3, [sp, #4]
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	920a      	str	r2, [sp, #40]	; 0x28
 8008cfe:	e00b      	b.n	8008d18 <_dtoa_r+0x290>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e7f3      	b.n	8008cec <_dtoa_r+0x264>
 8008d04:	2300      	movs	r3, #0
 8008d06:	9309      	str	r3, [sp, #36]	; 0x24
 8008d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0a:	445b      	add	r3, fp
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	bfb8      	it	lt
 8008d16:	2301      	movlt	r3, #1
 8008d18:	69e0      	ldr	r0, [r4, #28]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	f102 0614 	add.w	r6, r2, #20
 8008d22:	429e      	cmp	r6, r3
 8008d24:	d93d      	bls.n	8008da2 <_dtoa_r+0x31a>
 8008d26:	6041      	str	r1, [r0, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fceb 	bl	8009704 <_Balloc>
 8008d2e:	9000      	str	r0, [sp, #0]
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d139      	bne.n	8008da8 <_dtoa_r+0x320>
 8008d34:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <_dtoa_r+0x308>)
 8008d36:	4602      	mov	r2, r0
 8008d38:	f240 11af 	movw	r1, #431	; 0x1af
 8008d3c:	e6bd      	b.n	8008aba <_dtoa_r+0x32>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7e1      	b.n	8008d06 <_dtoa_r+0x27e>
 8008d42:	2501      	movs	r5, #1
 8008d44:	2300      	movs	r3, #0
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	9509      	str	r5, [sp, #36]	; 0x24
 8008d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2312      	movs	r3, #18
 8008d56:	e7d1      	b.n	8008cfc <_dtoa_r+0x274>
 8008d58:	636f4361 	.word	0x636f4361
 8008d5c:	3fd287a7 	.word	0x3fd287a7
 8008d60:	8b60c8b3 	.word	0x8b60c8b3
 8008d64:	3fc68a28 	.word	0x3fc68a28
 8008d68:	509f79fb 	.word	0x509f79fb
 8008d6c:	3fd34413 	.word	0x3fd34413
 8008d70:	0803db41 	.word	0x0803db41
 8008d74:	0803db58 	.word	0x0803db58
 8008d78:	7ff00000 	.word	0x7ff00000
 8008d7c:	0803db3d 	.word	0x0803db3d
 8008d80:	0803db34 	.word	0x0803db34
 8008d84:	0803db11 	.word	0x0803db11
 8008d88:	3ff80000 	.word	0x3ff80000
 8008d8c:	0803dc48 	.word	0x0803dc48
 8008d90:	0803dbb0 	.word	0x0803dbb0
 8008d94:	2301      	movs	r3, #1
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	e7d7      	b.n	8008d4a <_dtoa_r+0x2c2>
 8008d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	e7ba      	b.n	8008d18 <_dtoa_r+0x290>
 8008da2:	3101      	adds	r1, #1
 8008da4:	0052      	lsls	r2, r2, #1
 8008da6:	e7ba      	b.n	8008d1e <_dtoa_r+0x296>
 8008da8:	69e3      	ldr	r3, [r4, #28]
 8008daa:	9a00      	ldr	r2, [sp, #0]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	2b0e      	cmp	r3, #14
 8008db2:	f200 80a8 	bhi.w	8008f06 <_dtoa_r+0x47e>
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	f000 80a5 	beq.w	8008f06 <_dtoa_r+0x47e>
 8008dbc:	f1bb 0f00 	cmp.w	fp, #0
 8008dc0:	dd38      	ble.n	8008e34 <_dtoa_r+0x3ac>
 8008dc2:	4bc0      	ldr	r3, [pc, #768]	; (80090c4 <_dtoa_r+0x63c>)
 8008dc4:	f00b 020f 	and.w	r2, fp, #15
 8008dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008dd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008dd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008dd8:	d019      	beq.n	8008e0e <_dtoa_r+0x386>
 8008dda:	4bbb      	ldr	r3, [pc, #748]	; (80090c8 <_dtoa_r+0x640>)
 8008ddc:	ec51 0b18 	vmov	r0, r1, d8
 8008de0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008de4:	f7f7 fd52 	bl	800088c <__aeabi_ddiv>
 8008de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dec:	f008 080f 	and.w	r8, r8, #15
 8008df0:	2503      	movs	r5, #3
 8008df2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090c8 <_dtoa_r+0x640>
 8008df6:	f1b8 0f00 	cmp.w	r8, #0
 8008dfa:	d10a      	bne.n	8008e12 <_dtoa_r+0x38a>
 8008dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e00:	4632      	mov	r2, r6
 8008e02:	463b      	mov	r3, r7
 8008e04:	f7f7 fd42 	bl	800088c <__aeabi_ddiv>
 8008e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e0c:	e02b      	b.n	8008e66 <_dtoa_r+0x3de>
 8008e0e:	2502      	movs	r5, #2
 8008e10:	e7ef      	b.n	8008df2 <_dtoa_r+0x36a>
 8008e12:	f018 0f01 	tst.w	r8, #1
 8008e16:	d008      	beq.n	8008e2a <_dtoa_r+0x3a2>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e20:	f7f7 fc0a 	bl	8000638 <__aeabi_dmul>
 8008e24:	3501      	adds	r5, #1
 8008e26:	4606      	mov	r6, r0
 8008e28:	460f      	mov	r7, r1
 8008e2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e2e:	f109 0908 	add.w	r9, r9, #8
 8008e32:	e7e0      	b.n	8008df6 <_dtoa_r+0x36e>
 8008e34:	f000 809f 	beq.w	8008f76 <_dtoa_r+0x4ee>
 8008e38:	f1cb 0600 	rsb	r6, fp, #0
 8008e3c:	4ba1      	ldr	r3, [pc, #644]	; (80090c4 <_dtoa_r+0x63c>)
 8008e3e:	4fa2      	ldr	r7, [pc, #648]	; (80090c8 <_dtoa_r+0x640>)
 8008e40:	f006 020f 	and.w	r2, r6, #15
 8008e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	ec51 0b18 	vmov	r0, r1, d8
 8008e50:	f7f7 fbf2 	bl	8000638 <__aeabi_dmul>
 8008e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e58:	1136      	asrs	r6, r6, #4
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2502      	movs	r5, #2
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d17e      	bne.n	8008f60 <_dtoa_r+0x4d8>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1d0      	bne.n	8008e08 <_dtoa_r+0x380>
 8008e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8084 	beq.w	8008f7a <_dtoa_r+0x4f2>
 8008e72:	4b96      	ldr	r3, [pc, #600]	; (80090cc <_dtoa_r+0x644>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4640      	mov	r0, r8
 8008e78:	4649      	mov	r1, r9
 8008e7a:	f7f7 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d07b      	beq.n	8008f7a <_dtoa_r+0x4f2>
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d078      	beq.n	8008f7a <_dtoa_r+0x4f2>
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dd39      	ble.n	8008f02 <_dtoa_r+0x47a>
 8008e8e:	4b90      	ldr	r3, [pc, #576]	; (80090d0 <_dtoa_r+0x648>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fbcf 	bl	8000638 <__aeabi_dmul>
 8008e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9e:	9e01      	ldr	r6, [sp, #4]
 8008ea0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008ea4:	3501      	adds	r5, #1
 8008ea6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f7f7 fb5a 	bl	8000564 <__aeabi_i2d>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	f7f7 fbc0 	bl	8000638 <__aeabi_dmul>
 8008eb8:	4b86      	ldr	r3, [pc, #536]	; (80090d4 <_dtoa_r+0x64c>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f7f7 fa06 	bl	80002cc <__adddf3>
 8008ec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec8:	9303      	str	r3, [sp, #12]
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	d158      	bne.n	8008f80 <_dtoa_r+0x4f8>
 8008ece:	4b82      	ldr	r3, [pc, #520]	; (80090d8 <_dtoa_r+0x650>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 f9f7 	bl	80002c8 <__aeabi_dsub>
 8008eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	f7f7 fe39 	bl	8000b58 <__aeabi_dcmpgt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f040 8296 	bne.w	8009418 <_dtoa_r+0x990>
 8008eec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	f7f7 fe10 	bl	8000b1c <__aeabi_dcmplt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f040 8289 	bne.w	8009414 <_dtoa_r+0x98c>
 8008f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f2c0 814e 	blt.w	80091aa <_dtoa_r+0x722>
 8008f0e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f12:	f300 814a 	bgt.w	80091aa <_dtoa_r+0x722>
 8008f16:	4b6b      	ldr	r3, [pc, #428]	; (80090c4 <_dtoa_r+0x63c>)
 8008f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f280 80dc 	bge.w	80090e0 <_dtoa_r+0x658>
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f300 80d8 	bgt.w	80090e0 <_dtoa_r+0x658>
 8008f30:	f040 826f 	bne.w	8009412 <_dtoa_r+0x98a>
 8008f34:	4b68      	ldr	r3, [pc, #416]	; (80090d8 <_dtoa_r+0x650>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 fb7c 	bl	8000638 <__aeabi_dmul>
 8008f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f44:	f7f7 fdfe 	bl	8000b44 <__aeabi_dcmpge>
 8008f48:	9e04      	ldr	r6, [sp, #16]
 8008f4a:	4637      	mov	r7, r6
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	f040 8245 	bne.w	80093dc <_dtoa_r+0x954>
 8008f52:	9d00      	ldr	r5, [sp, #0]
 8008f54:	2331      	movs	r3, #49	; 0x31
 8008f56:	f805 3b01 	strb.w	r3, [r5], #1
 8008f5a:	f10b 0b01 	add.w	fp, fp, #1
 8008f5e:	e241      	b.n	80093e4 <_dtoa_r+0x95c>
 8008f60:	07f2      	lsls	r2, r6, #31
 8008f62:	d505      	bpl.n	8008f70 <_dtoa_r+0x4e8>
 8008f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f68:	f7f7 fb66 	bl	8000638 <__aeabi_dmul>
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	2301      	movs	r3, #1
 8008f70:	1076      	asrs	r6, r6, #1
 8008f72:	3708      	adds	r7, #8
 8008f74:	e773      	b.n	8008e5e <_dtoa_r+0x3d6>
 8008f76:	2502      	movs	r5, #2
 8008f78:	e775      	b.n	8008e66 <_dtoa_r+0x3de>
 8008f7a:	9e04      	ldr	r6, [sp, #16]
 8008f7c:	465f      	mov	r7, fp
 8008f7e:	e792      	b.n	8008ea6 <_dtoa_r+0x41e>
 8008f80:	9900      	ldr	r1, [sp, #0]
 8008f82:	4b50      	ldr	r3, [pc, #320]	; (80090c4 <_dtoa_r+0x63c>)
 8008f84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f88:	4431      	add	r1, r6
 8008f8a:	9102      	str	r1, [sp, #8]
 8008f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f8e:	eeb0 9a47 	vmov.f32	s18, s14
 8008f92:	eef0 9a67 	vmov.f32	s19, s15
 8008f96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d044      	beq.n	800902c <_dtoa_r+0x5a4>
 8008fa2:	494e      	ldr	r1, [pc, #312]	; (80090dc <_dtoa_r+0x654>)
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f7f7 fc71 	bl	800088c <__aeabi_ddiv>
 8008faa:	ec53 2b19 	vmov	r2, r3, d9
 8008fae:	f7f7 f98b 	bl	80002c8 <__aeabi_dsub>
 8008fb2:	9d00      	ldr	r5, [sp, #0]
 8008fb4:	ec41 0b19 	vmov	d9, r0, r1
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4640      	mov	r0, r8
 8008fbc:	f7f7 fdec 	bl	8000b98 <__aeabi_d2iz>
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	f7f7 facf 	bl	8000564 <__aeabi_i2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 f97b 	bl	80002c8 <__aeabi_dsub>
 8008fd2:	3630      	adds	r6, #48	; 0x30
 8008fd4:	f805 6b01 	strb.w	r6, [r5], #1
 8008fd8:	ec53 2b19 	vmov	r2, r3, d9
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4689      	mov	r9, r1
 8008fe0:	f7f7 fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d164      	bne.n	80090b2 <_dtoa_r+0x62a>
 8008fe8:	4642      	mov	r2, r8
 8008fea:	464b      	mov	r3, r9
 8008fec:	4937      	ldr	r1, [pc, #220]	; (80090cc <_dtoa_r+0x644>)
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f7f7 f96a 	bl	80002c8 <__aeabi_dsub>
 8008ff4:	ec53 2b19 	vmov	r2, r3, d9
 8008ff8:	f7f7 fd90 	bl	8000b1c <__aeabi_dcmplt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 80b6 	bne.w	800916e <_dtoa_r+0x6e6>
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	429d      	cmp	r5, r3
 8009006:	f43f af7c 	beq.w	8008f02 <_dtoa_r+0x47a>
 800900a:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <_dtoa_r+0x648>)
 800900c:	ec51 0b19 	vmov	r0, r1, d9
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 fb11 	bl	8000638 <__aeabi_dmul>
 8009016:	4b2e      	ldr	r3, [pc, #184]	; (80090d0 <_dtoa_r+0x648>)
 8009018:	ec41 0b19 	vmov	d9, r0, r1
 800901c:	2200      	movs	r2, #0
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 fb09 	bl	8000638 <__aeabi_dmul>
 8009026:	4680      	mov	r8, r0
 8009028:	4689      	mov	r9, r1
 800902a:	e7c5      	b.n	8008fb8 <_dtoa_r+0x530>
 800902c:	ec51 0b17 	vmov	r0, r1, d7
 8009030:	f7f7 fb02 	bl	8000638 <__aeabi_dmul>
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	9d00      	ldr	r5, [sp, #0]
 8009038:	930f      	str	r3, [sp, #60]	; 0x3c
 800903a:	ec41 0b19 	vmov	d9, r0, r1
 800903e:	4649      	mov	r1, r9
 8009040:	4640      	mov	r0, r8
 8009042:	f7f7 fda9 	bl	8000b98 <__aeabi_d2iz>
 8009046:	4606      	mov	r6, r0
 8009048:	f7f7 fa8c 	bl	8000564 <__aeabi_i2d>
 800904c:	3630      	adds	r6, #48	; 0x30
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 f937 	bl	80002c8 <__aeabi_dsub>
 800905a:	f805 6b01 	strb.w	r6, [r5], #1
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	429d      	cmp	r5, r3
 8009062:	4680      	mov	r8, r0
 8009064:	4689      	mov	r9, r1
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	d124      	bne.n	80090b6 <_dtoa_r+0x62e>
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <_dtoa_r+0x654>)
 800906e:	ec51 0b19 	vmov	r0, r1, d9
 8009072:	f7f7 f92b 	bl	80002cc <__adddf3>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 fd6b 	bl	8000b58 <__aeabi_dcmpgt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d173      	bne.n	800916e <_dtoa_r+0x6e6>
 8009086:	ec53 2b19 	vmov	r2, r3, d9
 800908a:	4914      	ldr	r1, [pc, #80]	; (80090dc <_dtoa_r+0x654>)
 800908c:	2000      	movs	r0, #0
 800908e:	f7f7 f91b 	bl	80002c8 <__aeabi_dsub>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4640      	mov	r0, r8
 8009098:	4649      	mov	r1, r9
 800909a:	f7f7 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f af2f 	beq.w	8008f02 <_dtoa_r+0x47a>
 80090a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090a6:	1e6b      	subs	r3, r5, #1
 80090a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090ae:	2b30      	cmp	r3, #48	; 0x30
 80090b0:	d0f8      	beq.n	80090a4 <_dtoa_r+0x61c>
 80090b2:	46bb      	mov	fp, r7
 80090b4:	e04a      	b.n	800914c <_dtoa_r+0x6c4>
 80090b6:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <_dtoa_r+0x648>)
 80090b8:	f7f7 fabe 	bl	8000638 <__aeabi_dmul>
 80090bc:	4680      	mov	r8, r0
 80090be:	4689      	mov	r9, r1
 80090c0:	e7bd      	b.n	800903e <_dtoa_r+0x5b6>
 80090c2:	bf00      	nop
 80090c4:	0803dc48 	.word	0x0803dc48
 80090c8:	0803dc20 	.word	0x0803dc20
 80090cc:	3ff00000 	.word	0x3ff00000
 80090d0:	40240000 	.word	0x40240000
 80090d4:	401c0000 	.word	0x401c0000
 80090d8:	40140000 	.word	0x40140000
 80090dc:	3fe00000 	.word	0x3fe00000
 80090e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090e4:	9d00      	ldr	r5, [sp, #0]
 80090e6:	4642      	mov	r2, r8
 80090e8:	464b      	mov	r3, r9
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f7f7 fbcd 	bl	800088c <__aeabi_ddiv>
 80090f2:	f7f7 fd51 	bl	8000b98 <__aeabi_d2iz>
 80090f6:	9001      	str	r0, [sp, #4]
 80090f8:	f7f7 fa34 	bl	8000564 <__aeabi_i2d>
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	f7f7 fa9a 	bl	8000638 <__aeabi_dmul>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 f8dc 	bl	80002c8 <__aeabi_dsub>
 8009110:	9e01      	ldr	r6, [sp, #4]
 8009112:	9f04      	ldr	r7, [sp, #16]
 8009114:	3630      	adds	r6, #48	; 0x30
 8009116:	f805 6b01 	strb.w	r6, [r5], #1
 800911a:	9e00      	ldr	r6, [sp, #0]
 800911c:	1bae      	subs	r6, r5, r6
 800911e:	42b7      	cmp	r7, r6
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	d134      	bne.n	8009190 <_dtoa_r+0x708>
 8009126:	f7f7 f8d1 	bl	80002cc <__adddf3>
 800912a:	4642      	mov	r2, r8
 800912c:	464b      	mov	r3, r9
 800912e:	4606      	mov	r6, r0
 8009130:	460f      	mov	r7, r1
 8009132:	f7f7 fd11 	bl	8000b58 <__aeabi_dcmpgt>
 8009136:	b9c8      	cbnz	r0, 800916c <_dtoa_r+0x6e4>
 8009138:	4642      	mov	r2, r8
 800913a:	464b      	mov	r3, r9
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fce2 	bl	8000b08 <__aeabi_dcmpeq>
 8009144:	b110      	cbz	r0, 800914c <_dtoa_r+0x6c4>
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	07db      	lsls	r3, r3, #31
 800914a:	d40f      	bmi.n	800916c <_dtoa_r+0x6e4>
 800914c:	4651      	mov	r1, sl
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fb18 	bl	8009784 <_Bfree>
 8009154:	2300      	movs	r3, #0
 8009156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009158:	702b      	strb	r3, [r5, #0]
 800915a:	f10b 0301 	add.w	r3, fp, #1
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009162:	2b00      	cmp	r3, #0
 8009164:	f43f ace2 	beq.w	8008b2c <_dtoa_r+0xa4>
 8009168:	601d      	str	r5, [r3, #0]
 800916a:	e4df      	b.n	8008b2c <_dtoa_r+0xa4>
 800916c:	465f      	mov	r7, fp
 800916e:	462b      	mov	r3, r5
 8009170:	461d      	mov	r5, r3
 8009172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009176:	2a39      	cmp	r2, #57	; 0x39
 8009178:	d106      	bne.n	8009188 <_dtoa_r+0x700>
 800917a:	9a00      	ldr	r2, [sp, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d1f7      	bne.n	8009170 <_dtoa_r+0x6e8>
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	2230      	movs	r2, #48	; 0x30
 8009184:	3701      	adds	r7, #1
 8009186:	700a      	strb	r2, [r1, #0]
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	3201      	adds	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e790      	b.n	80090b2 <_dtoa_r+0x62a>
 8009190:	4ba3      	ldr	r3, [pc, #652]	; (8009420 <_dtoa_r+0x998>)
 8009192:	2200      	movs	r2, #0
 8009194:	f7f7 fa50 	bl	8000638 <__aeabi_dmul>
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	4606      	mov	r6, r0
 800919e:	460f      	mov	r7, r1
 80091a0:	f7f7 fcb2 	bl	8000b08 <__aeabi_dcmpeq>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d09e      	beq.n	80090e6 <_dtoa_r+0x65e>
 80091a8:	e7d0      	b.n	800914c <_dtoa_r+0x6c4>
 80091aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ac:	2a00      	cmp	r2, #0
 80091ae:	f000 80ca 	beq.w	8009346 <_dtoa_r+0x8be>
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	2a01      	cmp	r2, #1
 80091b6:	f300 80ad 	bgt.w	8009314 <_dtoa_r+0x88c>
 80091ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091bc:	2a00      	cmp	r2, #0
 80091be:	f000 80a5 	beq.w	800930c <_dtoa_r+0x884>
 80091c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091c6:	9e08      	ldr	r6, [sp, #32]
 80091c8:	9d05      	ldr	r5, [sp, #20]
 80091ca:	9a05      	ldr	r2, [sp, #20]
 80091cc:	441a      	add	r2, r3
 80091ce:	9205      	str	r2, [sp, #20]
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	2101      	movs	r1, #1
 80091d4:	441a      	add	r2, r3
 80091d6:	4620      	mov	r0, r4
 80091d8:	9206      	str	r2, [sp, #24]
 80091da:	f000 fb89 	bl	80098f0 <__i2b>
 80091de:	4607      	mov	r7, r0
 80091e0:	b165      	cbz	r5, 80091fc <_dtoa_r+0x774>
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd09      	ble.n	80091fc <_dtoa_r+0x774>
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	bfa8      	it	ge
 80091ee:	462b      	movge	r3, r5
 80091f0:	1ad2      	subs	r2, r2, r3
 80091f2:	9205      	str	r2, [sp, #20]
 80091f4:	9a06      	ldr	r2, [sp, #24]
 80091f6:	1aed      	subs	r5, r5, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	b1f3      	cbz	r3, 800923e <_dtoa_r+0x7b6>
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80a3 	beq.w	800934e <_dtoa_r+0x8c6>
 8009208:	2e00      	cmp	r6, #0
 800920a:	dd10      	ble.n	800922e <_dtoa_r+0x7a6>
 800920c:	4639      	mov	r1, r7
 800920e:	4632      	mov	r2, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f000 fc2d 	bl	8009a70 <__pow5mult>
 8009216:	4652      	mov	r2, sl
 8009218:	4601      	mov	r1, r0
 800921a:	4607      	mov	r7, r0
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fb7d 	bl	800991c <__multiply>
 8009222:	4651      	mov	r1, sl
 8009224:	4680      	mov	r8, r0
 8009226:	4620      	mov	r0, r4
 8009228:	f000 faac 	bl	8009784 <_Bfree>
 800922c:	46c2      	mov	sl, r8
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	1b9a      	subs	r2, r3, r6
 8009232:	d004      	beq.n	800923e <_dtoa_r+0x7b6>
 8009234:	4651      	mov	r1, sl
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fc1a 	bl	8009a70 <__pow5mult>
 800923c:	4682      	mov	sl, r0
 800923e:	2101      	movs	r1, #1
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fb55 	bl	80098f0 <__i2b>
 8009246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009248:	2b00      	cmp	r3, #0
 800924a:	4606      	mov	r6, r0
 800924c:	f340 8081 	ble.w	8009352 <_dtoa_r+0x8ca>
 8009250:	461a      	mov	r2, r3
 8009252:	4601      	mov	r1, r0
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fc0b 	bl	8009a70 <__pow5mult>
 800925a:	9b07      	ldr	r3, [sp, #28]
 800925c:	2b01      	cmp	r3, #1
 800925e:	4606      	mov	r6, r0
 8009260:	dd7a      	ble.n	8009358 <_dtoa_r+0x8d0>
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	6933      	ldr	r3, [r6, #16]
 8009268:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800926c:	6918      	ldr	r0, [r3, #16]
 800926e:	f000 faf1 	bl	8009854 <__hi0bits>
 8009272:	f1c0 0020 	rsb	r0, r0, #32
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	4418      	add	r0, r3
 800927a:	f010 001f 	ands.w	r0, r0, #31
 800927e:	f000 8094 	beq.w	80093aa <_dtoa_r+0x922>
 8009282:	f1c0 0320 	rsb	r3, r0, #32
 8009286:	2b04      	cmp	r3, #4
 8009288:	f340 8085 	ble.w	8009396 <_dtoa_r+0x90e>
 800928c:	9b05      	ldr	r3, [sp, #20]
 800928e:	f1c0 001c 	rsb	r0, r0, #28
 8009292:	4403      	add	r3, r0
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	4403      	add	r3, r0
 800929a:	4405      	add	r5, r0
 800929c:	9306      	str	r3, [sp, #24]
 800929e:	9b05      	ldr	r3, [sp, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd05      	ble.n	80092b0 <_dtoa_r+0x828>
 80092a4:	4651      	mov	r1, sl
 80092a6:	461a      	mov	r2, r3
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fc3b 	bl	8009b24 <__lshift>
 80092ae:	4682      	mov	sl, r0
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dd05      	ble.n	80092c2 <_dtoa_r+0x83a>
 80092b6:	4631      	mov	r1, r6
 80092b8:	461a      	mov	r2, r3
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fc32 	bl	8009b24 <__lshift>
 80092c0:	4606      	mov	r6, r0
 80092c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d072      	beq.n	80093ae <_dtoa_r+0x926>
 80092c8:	4631      	mov	r1, r6
 80092ca:	4650      	mov	r0, sl
 80092cc:	f000 fc96 	bl	8009bfc <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	da6c      	bge.n	80093ae <_dtoa_r+0x926>
 80092d4:	2300      	movs	r3, #0
 80092d6:	4651      	mov	r1, sl
 80092d8:	220a      	movs	r2, #10
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fa74 	bl	80097c8 <__multadd>
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092e6:	4682      	mov	sl, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 81b0 	beq.w	800964e <_dtoa_r+0xbc6>
 80092ee:	2300      	movs	r3, #0
 80092f0:	4639      	mov	r1, r7
 80092f2:	220a      	movs	r2, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fa67 	bl	80097c8 <__multadd>
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	4607      	mov	r7, r0
 8009300:	f300 8096 	bgt.w	8009430 <_dtoa_r+0x9a8>
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	2b02      	cmp	r3, #2
 8009308:	dc59      	bgt.n	80093be <_dtoa_r+0x936>
 800930a:	e091      	b.n	8009430 <_dtoa_r+0x9a8>
 800930c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800930e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009312:	e758      	b.n	80091c6 <_dtoa_r+0x73e>
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	1e5e      	subs	r6, r3, #1
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	42b3      	cmp	r3, r6
 800931c:	bfbf      	itttt	lt
 800931e:	9b08      	ldrlt	r3, [sp, #32]
 8009320:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009322:	9608      	strlt	r6, [sp, #32]
 8009324:	1af3      	sublt	r3, r6, r3
 8009326:	bfb4      	ite	lt
 8009328:	18d2      	addlt	r2, r2, r3
 800932a:	1b9e      	subge	r6, r3, r6
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	bfbc      	itt	lt
 8009330:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009332:	2600      	movlt	r6, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfb7      	itett	lt
 8009338:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800933c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009340:	1a9d      	sublt	r5, r3, r2
 8009342:	2300      	movlt	r3, #0
 8009344:	e741      	b.n	80091ca <_dtoa_r+0x742>
 8009346:	9e08      	ldr	r6, [sp, #32]
 8009348:	9d05      	ldr	r5, [sp, #20]
 800934a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800934c:	e748      	b.n	80091e0 <_dtoa_r+0x758>
 800934e:	9a08      	ldr	r2, [sp, #32]
 8009350:	e770      	b.n	8009234 <_dtoa_r+0x7ac>
 8009352:	9b07      	ldr	r3, [sp, #28]
 8009354:	2b01      	cmp	r3, #1
 8009356:	dc19      	bgt.n	800938c <_dtoa_r+0x904>
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	b9bb      	cbnz	r3, 800938c <_dtoa_r+0x904>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009362:	b99b      	cbnz	r3, 800938c <_dtoa_r+0x904>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800936a:	0d1b      	lsrs	r3, r3, #20
 800936c:	051b      	lsls	r3, r3, #20
 800936e:	b183      	cbz	r3, 8009392 <_dtoa_r+0x90a>
 8009370:	9b05      	ldr	r3, [sp, #20]
 8009372:	3301      	adds	r3, #1
 8009374:	9305      	str	r3, [sp, #20]
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	3301      	adds	r3, #1
 800937a:	9306      	str	r3, [sp, #24]
 800937c:	f04f 0801 	mov.w	r8, #1
 8009380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f af6f 	bne.w	8009266 <_dtoa_r+0x7de>
 8009388:	2001      	movs	r0, #1
 800938a:	e774      	b.n	8009276 <_dtoa_r+0x7ee>
 800938c:	f04f 0800 	mov.w	r8, #0
 8009390:	e7f6      	b.n	8009380 <_dtoa_r+0x8f8>
 8009392:	4698      	mov	r8, r3
 8009394:	e7f4      	b.n	8009380 <_dtoa_r+0x8f8>
 8009396:	d082      	beq.n	800929e <_dtoa_r+0x816>
 8009398:	9a05      	ldr	r2, [sp, #20]
 800939a:	331c      	adds	r3, #28
 800939c:	441a      	add	r2, r3
 800939e:	9205      	str	r2, [sp, #20]
 80093a0:	9a06      	ldr	r2, [sp, #24]
 80093a2:	441a      	add	r2, r3
 80093a4:	441d      	add	r5, r3
 80093a6:	9206      	str	r2, [sp, #24]
 80093a8:	e779      	b.n	800929e <_dtoa_r+0x816>
 80093aa:	4603      	mov	r3, r0
 80093ac:	e7f4      	b.n	8009398 <_dtoa_r+0x910>
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc37      	bgt.n	8009424 <_dtoa_r+0x99c>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	dd34      	ble.n	8009424 <_dtoa_r+0x99c>
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	b963      	cbnz	r3, 80093dc <_dtoa_r+0x954>
 80093c2:	4631      	mov	r1, r6
 80093c4:	2205      	movs	r2, #5
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 f9fe 	bl	80097c8 <__multadd>
 80093cc:	4601      	mov	r1, r0
 80093ce:	4606      	mov	r6, r0
 80093d0:	4650      	mov	r0, sl
 80093d2:	f000 fc13 	bl	8009bfc <__mcmp>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f73f adbb 	bgt.w	8008f52 <_dtoa_r+0x4ca>
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	9d00      	ldr	r5, [sp, #0]
 80093e0:	ea6f 0b03 	mvn.w	fp, r3
 80093e4:	f04f 0800 	mov.w	r8, #0
 80093e8:	4631      	mov	r1, r6
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f9ca 	bl	8009784 <_Bfree>
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	f43f aeab 	beq.w	800914c <_dtoa_r+0x6c4>
 80093f6:	f1b8 0f00 	cmp.w	r8, #0
 80093fa:	d005      	beq.n	8009408 <_dtoa_r+0x980>
 80093fc:	45b8      	cmp	r8, r7
 80093fe:	d003      	beq.n	8009408 <_dtoa_r+0x980>
 8009400:	4641      	mov	r1, r8
 8009402:	4620      	mov	r0, r4
 8009404:	f000 f9be 	bl	8009784 <_Bfree>
 8009408:	4639      	mov	r1, r7
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f9ba 	bl	8009784 <_Bfree>
 8009410:	e69c      	b.n	800914c <_dtoa_r+0x6c4>
 8009412:	2600      	movs	r6, #0
 8009414:	4637      	mov	r7, r6
 8009416:	e7e1      	b.n	80093dc <_dtoa_r+0x954>
 8009418:	46bb      	mov	fp, r7
 800941a:	4637      	mov	r7, r6
 800941c:	e599      	b.n	8008f52 <_dtoa_r+0x4ca>
 800941e:	bf00      	nop
 8009420:	40240000 	.word	0x40240000
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 80c8 	beq.w	80095bc <_dtoa_r+0xb34>
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	2d00      	cmp	r5, #0
 8009432:	dd05      	ble.n	8009440 <_dtoa_r+0x9b8>
 8009434:	4639      	mov	r1, r7
 8009436:	462a      	mov	r2, r5
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fb73 	bl	8009b24 <__lshift>
 800943e:	4607      	mov	r7, r0
 8009440:	f1b8 0f00 	cmp.w	r8, #0
 8009444:	d05b      	beq.n	80094fe <_dtoa_r+0xa76>
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f95b 	bl	8009704 <_Balloc>
 800944e:	4605      	mov	r5, r0
 8009450:	b928      	cbnz	r0, 800945e <_dtoa_r+0x9d6>
 8009452:	4b83      	ldr	r3, [pc, #524]	; (8009660 <_dtoa_r+0xbd8>)
 8009454:	4602      	mov	r2, r0
 8009456:	f240 21ef 	movw	r1, #751	; 0x2ef
 800945a:	f7ff bb2e 	b.w	8008aba <_dtoa_r+0x32>
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	3202      	adds	r2, #2
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	f107 010c 	add.w	r1, r7, #12
 8009468:	300c      	adds	r0, #12
 800946a:	f7ff fa74 	bl	8008956 <memcpy>
 800946e:	2201      	movs	r2, #1
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fb56 	bl	8009b24 <__lshift>
 8009478:	9b00      	ldr	r3, [sp, #0]
 800947a:	3301      	adds	r3, #1
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009482:	4413      	add	r3, r2
 8009484:	9308      	str	r3, [sp, #32]
 8009486:	9b02      	ldr	r3, [sp, #8]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	46b8      	mov	r8, r7
 800948e:	9306      	str	r3, [sp, #24]
 8009490:	4607      	mov	r7, r0
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	4631      	mov	r1, r6
 8009496:	3b01      	subs	r3, #1
 8009498:	4650      	mov	r0, sl
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	f7ff fa69 	bl	8008972 <quorem>
 80094a0:	4641      	mov	r1, r8
 80094a2:	9002      	str	r0, [sp, #8]
 80094a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094a8:	4650      	mov	r0, sl
 80094aa:	f000 fba7 	bl	8009bfc <__mcmp>
 80094ae:	463a      	mov	r2, r7
 80094b0:	9005      	str	r0, [sp, #20]
 80094b2:	4631      	mov	r1, r6
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fbbd 	bl	8009c34 <__mdiff>
 80094ba:	68c2      	ldr	r2, [r0, #12]
 80094bc:	4605      	mov	r5, r0
 80094be:	bb02      	cbnz	r2, 8009502 <_dtoa_r+0xa7a>
 80094c0:	4601      	mov	r1, r0
 80094c2:	4650      	mov	r0, sl
 80094c4:	f000 fb9a 	bl	8009bfc <__mcmp>
 80094c8:	4602      	mov	r2, r0
 80094ca:	4629      	mov	r1, r5
 80094cc:	4620      	mov	r0, r4
 80094ce:	9209      	str	r2, [sp, #36]	; 0x24
 80094d0:	f000 f958 	bl	8009784 <_Bfree>
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d8:	9d04      	ldr	r5, [sp, #16]
 80094da:	ea43 0102 	orr.w	r1, r3, r2
 80094de:	9b06      	ldr	r3, [sp, #24]
 80094e0:	4319      	orrs	r1, r3
 80094e2:	d110      	bne.n	8009506 <_dtoa_r+0xa7e>
 80094e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094e8:	d029      	beq.n	800953e <_dtoa_r+0xab6>
 80094ea:	9b05      	ldr	r3, [sp, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd02      	ble.n	80094f6 <_dtoa_r+0xa6e>
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	f883 9000 	strb.w	r9, [r3]
 80094fc:	e774      	b.n	80093e8 <_dtoa_r+0x960>
 80094fe:	4638      	mov	r0, r7
 8009500:	e7ba      	b.n	8009478 <_dtoa_r+0x9f0>
 8009502:	2201      	movs	r2, #1
 8009504:	e7e1      	b.n	80094ca <_dtoa_r+0xa42>
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db04      	blt.n	8009516 <_dtoa_r+0xa8e>
 800950c:	9907      	ldr	r1, [sp, #28]
 800950e:	430b      	orrs	r3, r1
 8009510:	9906      	ldr	r1, [sp, #24]
 8009512:	430b      	orrs	r3, r1
 8009514:	d120      	bne.n	8009558 <_dtoa_r+0xad0>
 8009516:	2a00      	cmp	r2, #0
 8009518:	dded      	ble.n	80094f6 <_dtoa_r+0xa6e>
 800951a:	4651      	mov	r1, sl
 800951c:	2201      	movs	r2, #1
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fb00 	bl	8009b24 <__lshift>
 8009524:	4631      	mov	r1, r6
 8009526:	4682      	mov	sl, r0
 8009528:	f000 fb68 	bl	8009bfc <__mcmp>
 800952c:	2800      	cmp	r0, #0
 800952e:	dc03      	bgt.n	8009538 <_dtoa_r+0xab0>
 8009530:	d1e1      	bne.n	80094f6 <_dtoa_r+0xa6e>
 8009532:	f019 0f01 	tst.w	r9, #1
 8009536:	d0de      	beq.n	80094f6 <_dtoa_r+0xa6e>
 8009538:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800953c:	d1d8      	bne.n	80094f0 <_dtoa_r+0xa68>
 800953e:	9a01      	ldr	r2, [sp, #4]
 8009540:	2339      	movs	r3, #57	; 0x39
 8009542:	7013      	strb	r3, [r2, #0]
 8009544:	462b      	mov	r3, r5
 8009546:	461d      	mov	r5, r3
 8009548:	3b01      	subs	r3, #1
 800954a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800954e:	2a39      	cmp	r2, #57	; 0x39
 8009550:	d06c      	beq.n	800962c <_dtoa_r+0xba4>
 8009552:	3201      	adds	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e747      	b.n	80093e8 <_dtoa_r+0x960>
 8009558:	2a00      	cmp	r2, #0
 800955a:	dd07      	ble.n	800956c <_dtoa_r+0xae4>
 800955c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009560:	d0ed      	beq.n	800953e <_dtoa_r+0xab6>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	f109 0301 	add.w	r3, r9, #1
 8009568:	7013      	strb	r3, [r2, #0]
 800956a:	e73d      	b.n	80093e8 <_dtoa_r+0x960>
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009574:	4293      	cmp	r3, r2
 8009576:	d043      	beq.n	8009600 <_dtoa_r+0xb78>
 8009578:	4651      	mov	r1, sl
 800957a:	2300      	movs	r3, #0
 800957c:	220a      	movs	r2, #10
 800957e:	4620      	mov	r0, r4
 8009580:	f000 f922 	bl	80097c8 <__multadd>
 8009584:	45b8      	cmp	r8, r7
 8009586:	4682      	mov	sl, r0
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	f04f 020a 	mov.w	r2, #10
 8009590:	4641      	mov	r1, r8
 8009592:	4620      	mov	r0, r4
 8009594:	d107      	bne.n	80095a6 <_dtoa_r+0xb1e>
 8009596:	f000 f917 	bl	80097c8 <__multadd>
 800959a:	4680      	mov	r8, r0
 800959c:	4607      	mov	r7, r0
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	3301      	adds	r3, #1
 80095a2:	9304      	str	r3, [sp, #16]
 80095a4:	e775      	b.n	8009492 <_dtoa_r+0xa0a>
 80095a6:	f000 f90f 	bl	80097c8 <__multadd>
 80095aa:	4639      	mov	r1, r7
 80095ac:	4680      	mov	r8, r0
 80095ae:	2300      	movs	r3, #0
 80095b0:	220a      	movs	r2, #10
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 f908 	bl	80097c8 <__multadd>
 80095b8:	4607      	mov	r7, r0
 80095ba:	e7f0      	b.n	800959e <_dtoa_r+0xb16>
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	9d00      	ldr	r5, [sp, #0]
 80095c2:	4631      	mov	r1, r6
 80095c4:	4650      	mov	r0, sl
 80095c6:	f7ff f9d4 	bl	8008972 <quorem>
 80095ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	f805 9b01 	strb.w	r9, [r5], #1
 80095d4:	1aea      	subs	r2, r5, r3
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	4293      	cmp	r3, r2
 80095da:	dd07      	ble.n	80095ec <_dtoa_r+0xb64>
 80095dc:	4651      	mov	r1, sl
 80095de:	2300      	movs	r3, #0
 80095e0:	220a      	movs	r2, #10
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 f8f0 	bl	80097c8 <__multadd>
 80095e8:	4682      	mov	sl, r0
 80095ea:	e7ea      	b.n	80095c2 <_dtoa_r+0xb3a>
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfc8      	it	gt
 80095f2:	461d      	movgt	r5, r3
 80095f4:	9b00      	ldr	r3, [sp, #0]
 80095f6:	bfd8      	it	le
 80095f8:	2501      	movle	r5, #1
 80095fa:	441d      	add	r5, r3
 80095fc:	f04f 0800 	mov.w	r8, #0
 8009600:	4651      	mov	r1, sl
 8009602:	2201      	movs	r2, #1
 8009604:	4620      	mov	r0, r4
 8009606:	f000 fa8d 	bl	8009b24 <__lshift>
 800960a:	4631      	mov	r1, r6
 800960c:	4682      	mov	sl, r0
 800960e:	f000 faf5 	bl	8009bfc <__mcmp>
 8009612:	2800      	cmp	r0, #0
 8009614:	dc96      	bgt.n	8009544 <_dtoa_r+0xabc>
 8009616:	d102      	bne.n	800961e <_dtoa_r+0xb96>
 8009618:	f019 0f01 	tst.w	r9, #1
 800961c:	d192      	bne.n	8009544 <_dtoa_r+0xabc>
 800961e:	462b      	mov	r3, r5
 8009620:	461d      	mov	r5, r3
 8009622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009626:	2a30      	cmp	r2, #48	; 0x30
 8009628:	d0fa      	beq.n	8009620 <_dtoa_r+0xb98>
 800962a:	e6dd      	b.n	80093e8 <_dtoa_r+0x960>
 800962c:	9a00      	ldr	r2, [sp, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d189      	bne.n	8009546 <_dtoa_r+0xabe>
 8009632:	f10b 0b01 	add.w	fp, fp, #1
 8009636:	2331      	movs	r3, #49	; 0x31
 8009638:	e796      	b.n	8009568 <_dtoa_r+0xae0>
 800963a:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <_dtoa_r+0xbdc>)
 800963c:	f7ff ba99 	b.w	8008b72 <_dtoa_r+0xea>
 8009640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009642:	2b00      	cmp	r3, #0
 8009644:	f47f aa6d 	bne.w	8008b22 <_dtoa_r+0x9a>
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <_dtoa_r+0xbe0>)
 800964a:	f7ff ba92 	b.w	8008b72 <_dtoa_r+0xea>
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dcb5      	bgt.n	80095c0 <_dtoa_r+0xb38>
 8009654:	9b07      	ldr	r3, [sp, #28]
 8009656:	2b02      	cmp	r3, #2
 8009658:	f73f aeb1 	bgt.w	80093be <_dtoa_r+0x936>
 800965c:	e7b0      	b.n	80095c0 <_dtoa_r+0xb38>
 800965e:	bf00      	nop
 8009660:	0803dbb0 	.word	0x0803dbb0
 8009664:	0803db10 	.word	0x0803db10
 8009668:	0803db34 	.word	0x0803db34

0800966c <_free_r>:
 800966c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966e:	2900      	cmp	r1, #0
 8009670:	d044      	beq.n	80096fc <_free_r+0x90>
 8009672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009676:	9001      	str	r0, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f1a1 0404 	sub.w	r4, r1, #4
 800967e:	bfb8      	it	lt
 8009680:	18e4      	addlt	r4, r4, r3
 8009682:	f7fe fb11 	bl	8007ca8 <__malloc_lock>
 8009686:	4a1e      	ldr	r2, [pc, #120]	; (8009700 <_free_r+0x94>)
 8009688:	9801      	ldr	r0, [sp, #4]
 800968a:	6813      	ldr	r3, [r2, #0]
 800968c:	b933      	cbnz	r3, 800969c <_free_r+0x30>
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6014      	str	r4, [r2, #0]
 8009692:	b003      	add	sp, #12
 8009694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009698:	f7fe bb0c 	b.w	8007cb4 <__malloc_unlock>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d908      	bls.n	80096b2 <_free_r+0x46>
 80096a0:	6825      	ldr	r5, [r4, #0]
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf01      	itttt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	1949      	addeq	r1, r1, r5
 80096ae:	6021      	streq	r1, [r4, #0]
 80096b0:	e7ed      	b.n	800968e <_free_r+0x22>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x50>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x46>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1855      	adds	r5, r2, r1
 80096c0:	42a5      	cmp	r5, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x70>
 80096c4:	6824      	ldr	r4, [r4, #0]
 80096c6:	4421      	add	r1, r4
 80096c8:	1854      	adds	r4, r2, r1
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1e0      	bne.n	8009692 <_free_r+0x26>
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	440c      	add	r4, r1
 80096d8:	6014      	str	r4, [r2, #0]
 80096da:	e7da      	b.n	8009692 <_free_r+0x26>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x78>
 80096de:	230c      	movs	r3, #12
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	e7d6      	b.n	8009692 <_free_r+0x26>
 80096e4:	6825      	ldr	r5, [r4, #0]
 80096e6:	1961      	adds	r1, r4, r5
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7ca      	b.n	8009692 <_free_r+0x26>
 80096fc:	b003      	add	sp, #12
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	2000172c 	.word	0x2000172c

08009704 <_Balloc>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	69c6      	ldr	r6, [r0, #28]
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	b976      	cbnz	r6, 800972c <_Balloc+0x28>
 800970e:	2010      	movs	r0, #16
 8009710:	f7fa f846 	bl	80037a0 <__wrap_malloc>
 8009714:	4602      	mov	r2, r0
 8009716:	61e0      	str	r0, [r4, #28]
 8009718:	b920      	cbnz	r0, 8009724 <_Balloc+0x20>
 800971a:	4b18      	ldr	r3, [pc, #96]	; (800977c <_Balloc+0x78>)
 800971c:	4818      	ldr	r0, [pc, #96]	; (8009780 <_Balloc+0x7c>)
 800971e:	216b      	movs	r1, #107	; 0x6b
 8009720:	f000 fd94 	bl	800a24c <__assert_func>
 8009724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009728:	6006      	str	r6, [r0, #0]
 800972a:	60c6      	str	r6, [r0, #12]
 800972c:	69e6      	ldr	r6, [r4, #28]
 800972e:	68f3      	ldr	r3, [r6, #12]
 8009730:	b183      	cbz	r3, 8009754 <_Balloc+0x50>
 8009732:	69e3      	ldr	r3, [r4, #28]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800973a:	b9b8      	cbnz	r0, 800976c <_Balloc+0x68>
 800973c:	2101      	movs	r1, #1
 800973e:	fa01 f605 	lsl.w	r6, r1, r5
 8009742:	1d72      	adds	r2, r6, #5
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	4620      	mov	r0, r4
 8009748:	f000 fd9e 	bl	800a288 <_calloc_r>
 800974c:	b160      	cbz	r0, 8009768 <_Balloc+0x64>
 800974e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009752:	e00e      	b.n	8009772 <_Balloc+0x6e>
 8009754:	2221      	movs	r2, #33	; 0x21
 8009756:	2104      	movs	r1, #4
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fd95 	bl	800a288 <_calloc_r>
 800975e:	69e3      	ldr	r3, [r4, #28]
 8009760:	60f0      	str	r0, [r6, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e4      	bne.n	8009732 <_Balloc+0x2e>
 8009768:	2000      	movs	r0, #0
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	6802      	ldr	r2, [r0, #0]
 800976e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009772:	2300      	movs	r3, #0
 8009774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009778:	e7f7      	b.n	800976a <_Balloc+0x66>
 800977a:	bf00      	nop
 800977c:	0803db41 	.word	0x0803db41
 8009780:	0803dbc1 	.word	0x0803dbc1

08009784 <_Bfree>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	69c6      	ldr	r6, [r0, #28]
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	b976      	cbnz	r6, 80097ac <_Bfree+0x28>
 800978e:	2010      	movs	r0, #16
 8009790:	f7fa f806 	bl	80037a0 <__wrap_malloc>
 8009794:	4602      	mov	r2, r0
 8009796:	61e8      	str	r0, [r5, #28]
 8009798:	b920      	cbnz	r0, 80097a4 <_Bfree+0x20>
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <_Bfree+0x3c>)
 800979c:	4809      	ldr	r0, [pc, #36]	; (80097c4 <_Bfree+0x40>)
 800979e:	218f      	movs	r1, #143	; 0x8f
 80097a0:	f000 fd54 	bl	800a24c <__assert_func>
 80097a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a8:	6006      	str	r6, [r0, #0]
 80097aa:	60c6      	str	r6, [r0, #12]
 80097ac:	b13c      	cbz	r4, 80097be <_Bfree+0x3a>
 80097ae:	69eb      	ldr	r3, [r5, #28]
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b8:	6021      	str	r1, [r4, #0]
 80097ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	0803db41 	.word	0x0803db41
 80097c4:	0803dbc1 	.word	0x0803dbc1

080097c8 <__multadd>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	690d      	ldr	r5, [r1, #16]
 80097ce:	4607      	mov	r7, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	461e      	mov	r6, r3
 80097d4:	f101 0c14 	add.w	ip, r1, #20
 80097d8:	2000      	movs	r0, #0
 80097da:	f8dc 3000 	ldr.w	r3, [ip]
 80097de:	b299      	uxth	r1, r3
 80097e0:	fb02 6101 	mla	r1, r2, r1, r6
 80097e4:	0c1e      	lsrs	r6, r3, #16
 80097e6:	0c0b      	lsrs	r3, r1, #16
 80097e8:	fb02 3306 	mla	r3, r2, r6, r3
 80097ec:	b289      	uxth	r1, r1
 80097ee:	3001      	adds	r0, #1
 80097f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097f4:	4285      	cmp	r5, r0
 80097f6:	f84c 1b04 	str.w	r1, [ip], #4
 80097fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097fe:	dcec      	bgt.n	80097da <__multadd+0x12>
 8009800:	b30e      	cbz	r6, 8009846 <__multadd+0x7e>
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	42ab      	cmp	r3, r5
 8009806:	dc19      	bgt.n	800983c <__multadd+0x74>
 8009808:	6861      	ldr	r1, [r4, #4]
 800980a:	4638      	mov	r0, r7
 800980c:	3101      	adds	r1, #1
 800980e:	f7ff ff79 	bl	8009704 <_Balloc>
 8009812:	4680      	mov	r8, r0
 8009814:	b928      	cbnz	r0, 8009822 <__multadd+0x5a>
 8009816:	4602      	mov	r2, r0
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <__multadd+0x84>)
 800981a:	480d      	ldr	r0, [pc, #52]	; (8009850 <__multadd+0x88>)
 800981c:	21ba      	movs	r1, #186	; 0xba
 800981e:	f000 fd15 	bl	800a24c <__assert_func>
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	3202      	adds	r2, #2
 8009826:	f104 010c 	add.w	r1, r4, #12
 800982a:	0092      	lsls	r2, r2, #2
 800982c:	300c      	adds	r0, #12
 800982e:	f7ff f892 	bl	8008956 <memcpy>
 8009832:	4621      	mov	r1, r4
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff ffa5 	bl	8009784 <_Bfree>
 800983a:	4644      	mov	r4, r8
 800983c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009840:	3501      	adds	r5, #1
 8009842:	615e      	str	r6, [r3, #20]
 8009844:	6125      	str	r5, [r4, #16]
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984c:	0803dbb0 	.word	0x0803dbb0
 8009850:	0803dbc1 	.word	0x0803dbc1

08009854 <__hi0bits>:
 8009854:	0c03      	lsrs	r3, r0, #16
 8009856:	041b      	lsls	r3, r3, #16
 8009858:	b9d3      	cbnz	r3, 8009890 <__hi0bits+0x3c>
 800985a:	0400      	lsls	r0, r0, #16
 800985c:	2310      	movs	r3, #16
 800985e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009862:	bf04      	itt	eq
 8009864:	0200      	lsleq	r0, r0, #8
 8009866:	3308      	addeq	r3, #8
 8009868:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800986c:	bf04      	itt	eq
 800986e:	0100      	lsleq	r0, r0, #4
 8009870:	3304      	addeq	r3, #4
 8009872:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009876:	bf04      	itt	eq
 8009878:	0080      	lsleq	r0, r0, #2
 800987a:	3302      	addeq	r3, #2
 800987c:	2800      	cmp	r0, #0
 800987e:	db05      	blt.n	800988c <__hi0bits+0x38>
 8009880:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009884:	f103 0301 	add.w	r3, r3, #1
 8009888:	bf08      	it	eq
 800988a:	2320      	moveq	r3, #32
 800988c:	4618      	mov	r0, r3
 800988e:	4770      	bx	lr
 8009890:	2300      	movs	r3, #0
 8009892:	e7e4      	b.n	800985e <__hi0bits+0xa>

08009894 <__lo0bits>:
 8009894:	6803      	ldr	r3, [r0, #0]
 8009896:	f013 0207 	ands.w	r2, r3, #7
 800989a:	d00c      	beq.n	80098b6 <__lo0bits+0x22>
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	d422      	bmi.n	80098e6 <__lo0bits+0x52>
 80098a0:	079a      	lsls	r2, r3, #30
 80098a2:	bf49      	itett	mi
 80098a4:	085b      	lsrmi	r3, r3, #1
 80098a6:	089b      	lsrpl	r3, r3, #2
 80098a8:	6003      	strmi	r3, [r0, #0]
 80098aa:	2201      	movmi	r2, #1
 80098ac:	bf5c      	itt	pl
 80098ae:	6003      	strpl	r3, [r0, #0]
 80098b0:	2202      	movpl	r2, #2
 80098b2:	4610      	mov	r0, r2
 80098b4:	4770      	bx	lr
 80098b6:	b299      	uxth	r1, r3
 80098b8:	b909      	cbnz	r1, 80098be <__lo0bits+0x2a>
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	2210      	movs	r2, #16
 80098be:	b2d9      	uxtb	r1, r3
 80098c0:	b909      	cbnz	r1, 80098c6 <__lo0bits+0x32>
 80098c2:	3208      	adds	r2, #8
 80098c4:	0a1b      	lsrs	r3, r3, #8
 80098c6:	0719      	lsls	r1, r3, #28
 80098c8:	bf04      	itt	eq
 80098ca:	091b      	lsreq	r3, r3, #4
 80098cc:	3204      	addeq	r2, #4
 80098ce:	0799      	lsls	r1, r3, #30
 80098d0:	bf04      	itt	eq
 80098d2:	089b      	lsreq	r3, r3, #2
 80098d4:	3202      	addeq	r2, #2
 80098d6:	07d9      	lsls	r1, r3, #31
 80098d8:	d403      	bmi.n	80098e2 <__lo0bits+0x4e>
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	f102 0201 	add.w	r2, r2, #1
 80098e0:	d003      	beq.n	80098ea <__lo0bits+0x56>
 80098e2:	6003      	str	r3, [r0, #0]
 80098e4:	e7e5      	b.n	80098b2 <__lo0bits+0x1e>
 80098e6:	2200      	movs	r2, #0
 80098e8:	e7e3      	b.n	80098b2 <__lo0bits+0x1e>
 80098ea:	2220      	movs	r2, #32
 80098ec:	e7e1      	b.n	80098b2 <__lo0bits+0x1e>
	...

080098f0 <__i2b>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	460c      	mov	r4, r1
 80098f4:	2101      	movs	r1, #1
 80098f6:	f7ff ff05 	bl	8009704 <_Balloc>
 80098fa:	4602      	mov	r2, r0
 80098fc:	b928      	cbnz	r0, 800990a <__i2b+0x1a>
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <__i2b+0x24>)
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <__i2b+0x28>)
 8009902:	f240 1145 	movw	r1, #325	; 0x145
 8009906:	f000 fca1 	bl	800a24c <__assert_func>
 800990a:	2301      	movs	r3, #1
 800990c:	6144      	str	r4, [r0, #20]
 800990e:	6103      	str	r3, [r0, #16]
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	0803dbb0 	.word	0x0803dbb0
 8009918:	0803dbc1 	.word	0x0803dbc1

0800991c <__multiply>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4691      	mov	r9, r2
 8009922:	690a      	ldr	r2, [r1, #16]
 8009924:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	bfb8      	it	lt
 800992c:	460b      	movlt	r3, r1
 800992e:	460c      	mov	r4, r1
 8009930:	bfbc      	itt	lt
 8009932:	464c      	movlt	r4, r9
 8009934:	4699      	movlt	r9, r3
 8009936:	6927      	ldr	r7, [r4, #16]
 8009938:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800993c:	68a3      	ldr	r3, [r4, #8]
 800993e:	6861      	ldr	r1, [r4, #4]
 8009940:	eb07 060a 	add.w	r6, r7, sl
 8009944:	42b3      	cmp	r3, r6
 8009946:	b085      	sub	sp, #20
 8009948:	bfb8      	it	lt
 800994a:	3101      	addlt	r1, #1
 800994c:	f7ff feda 	bl	8009704 <_Balloc>
 8009950:	b930      	cbnz	r0, 8009960 <__multiply+0x44>
 8009952:	4602      	mov	r2, r0
 8009954:	4b44      	ldr	r3, [pc, #272]	; (8009a68 <__multiply+0x14c>)
 8009956:	4845      	ldr	r0, [pc, #276]	; (8009a6c <__multiply+0x150>)
 8009958:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800995c:	f000 fc76 	bl	800a24c <__assert_func>
 8009960:	f100 0514 	add.w	r5, r0, #20
 8009964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009968:	462b      	mov	r3, r5
 800996a:	2200      	movs	r2, #0
 800996c:	4543      	cmp	r3, r8
 800996e:	d321      	bcc.n	80099b4 <__multiply+0x98>
 8009970:	f104 0314 	add.w	r3, r4, #20
 8009974:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009978:	f109 0314 	add.w	r3, r9, #20
 800997c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	1b3a      	subs	r2, r7, r4
 8009984:	3a15      	subs	r2, #21
 8009986:	f022 0203 	bic.w	r2, r2, #3
 800998a:	3204      	adds	r2, #4
 800998c:	f104 0115 	add.w	r1, r4, #21
 8009990:	428f      	cmp	r7, r1
 8009992:	bf38      	it	cc
 8009994:	2204      	movcc	r2, #4
 8009996:	9201      	str	r2, [sp, #4]
 8009998:	9a02      	ldr	r2, [sp, #8]
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	429a      	cmp	r2, r3
 800999e:	d80c      	bhi.n	80099ba <__multiply+0x9e>
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	dd03      	ble.n	80099ac <__multiply+0x90>
 80099a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d05b      	beq.n	8009a64 <__multiply+0x148>
 80099ac:	6106      	str	r6, [r0, #16]
 80099ae:	b005      	add	sp, #20
 80099b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	f843 2b04 	str.w	r2, [r3], #4
 80099b8:	e7d8      	b.n	800996c <__multiply+0x50>
 80099ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80099be:	f1ba 0f00 	cmp.w	sl, #0
 80099c2:	d024      	beq.n	8009a0e <__multiply+0xf2>
 80099c4:	f104 0e14 	add.w	lr, r4, #20
 80099c8:	46a9      	mov	r9, r5
 80099ca:	f04f 0c00 	mov.w	ip, #0
 80099ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099d2:	f8d9 1000 	ldr.w	r1, [r9]
 80099d6:	fa1f fb82 	uxth.w	fp, r2
 80099da:	b289      	uxth	r1, r1
 80099dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80099e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099e4:	f8d9 2000 	ldr.w	r2, [r9]
 80099e8:	4461      	add	r1, ip
 80099ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80099f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099f6:	b289      	uxth	r1, r1
 80099f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099fc:	4577      	cmp	r7, lr
 80099fe:	f849 1b04 	str.w	r1, [r9], #4
 8009a02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a06:	d8e2      	bhi.n	80099ce <__multiply+0xb2>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f845 c002 	str.w	ip, [r5, r2]
 8009a0e:	9a03      	ldr	r2, [sp, #12]
 8009a10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a14:	3304      	adds	r3, #4
 8009a16:	f1b9 0f00 	cmp.w	r9, #0
 8009a1a:	d021      	beq.n	8009a60 <__multiply+0x144>
 8009a1c:	6829      	ldr	r1, [r5, #0]
 8009a1e:	f104 0c14 	add.w	ip, r4, #20
 8009a22:	46ae      	mov	lr, r5
 8009a24:	f04f 0a00 	mov.w	sl, #0
 8009a28:	f8bc b000 	ldrh.w	fp, [ip]
 8009a2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a30:	fb09 220b 	mla	r2, r9, fp, r2
 8009a34:	4452      	add	r2, sl
 8009a36:	b289      	uxth	r1, r1
 8009a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a48:	f8be 1000 	ldrh.w	r1, [lr]
 8009a4c:	fb09 110a 	mla	r1, r9, sl, r1
 8009a50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a54:	4567      	cmp	r7, ip
 8009a56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a5a:	d8e5      	bhi.n	8009a28 <__multiply+0x10c>
 8009a5c:	9a01      	ldr	r2, [sp, #4]
 8009a5e:	50a9      	str	r1, [r5, r2]
 8009a60:	3504      	adds	r5, #4
 8009a62:	e799      	b.n	8009998 <__multiply+0x7c>
 8009a64:	3e01      	subs	r6, #1
 8009a66:	e79b      	b.n	80099a0 <__multiply+0x84>
 8009a68:	0803dbb0 	.word	0x0803dbb0
 8009a6c:	0803dbc1 	.word	0x0803dbc1

08009a70 <__pow5mult>:
 8009a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a74:	4615      	mov	r5, r2
 8009a76:	f012 0203 	ands.w	r2, r2, #3
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	d007      	beq.n	8009a90 <__pow5mult+0x20>
 8009a80:	4c25      	ldr	r4, [pc, #148]	; (8009b18 <__pow5mult+0xa8>)
 8009a82:	3a01      	subs	r2, #1
 8009a84:	2300      	movs	r3, #0
 8009a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a8a:	f7ff fe9d 	bl	80097c8 <__multadd>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	10ad      	asrs	r5, r5, #2
 8009a92:	d03d      	beq.n	8009b10 <__pow5mult+0xa0>
 8009a94:	69f4      	ldr	r4, [r6, #28]
 8009a96:	b97c      	cbnz	r4, 8009ab8 <__pow5mult+0x48>
 8009a98:	2010      	movs	r0, #16
 8009a9a:	f7f9 fe81 	bl	80037a0 <__wrap_malloc>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	61f0      	str	r0, [r6, #28]
 8009aa2:	b928      	cbnz	r0, 8009ab0 <__pow5mult+0x40>
 8009aa4:	4b1d      	ldr	r3, [pc, #116]	; (8009b1c <__pow5mult+0xac>)
 8009aa6:	481e      	ldr	r0, [pc, #120]	; (8009b20 <__pow5mult+0xb0>)
 8009aa8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009aac:	f000 fbce 	bl	800a24c <__assert_func>
 8009ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab4:	6004      	str	r4, [r0, #0]
 8009ab6:	60c4      	str	r4, [r0, #12]
 8009ab8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ac0:	b94c      	cbnz	r4, 8009ad6 <__pow5mult+0x66>
 8009ac2:	f240 2171 	movw	r1, #625	; 0x271
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ff12 	bl	80098f0 <__i2b>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	f04f 0900 	mov.w	r9, #0
 8009ada:	07eb      	lsls	r3, r5, #31
 8009adc:	d50a      	bpl.n	8009af4 <__pow5mult+0x84>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff1a 	bl	800991c <__multiply>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4680      	mov	r8, r0
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff fe49 	bl	8009784 <_Bfree>
 8009af2:	4647      	mov	r7, r8
 8009af4:	106d      	asrs	r5, r5, #1
 8009af6:	d00b      	beq.n	8009b10 <__pow5mult+0xa0>
 8009af8:	6820      	ldr	r0, [r4, #0]
 8009afa:	b938      	cbnz	r0, 8009b0c <__pow5mult+0x9c>
 8009afc:	4622      	mov	r2, r4
 8009afe:	4621      	mov	r1, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff ff0b 	bl	800991c <__multiply>
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	f8c0 9000 	str.w	r9, [r0]
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	e7e4      	b.n	8009ada <__pow5mult+0x6a>
 8009b10:	4638      	mov	r0, r7
 8009b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b16:	bf00      	nop
 8009b18:	0803dd10 	.word	0x0803dd10
 8009b1c:	0803db41 	.word	0x0803db41
 8009b20:	0803dbc1 	.word	0x0803dbc1

08009b24 <__lshift>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	460c      	mov	r4, r1
 8009b2a:	6849      	ldr	r1, [r1, #4]
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	4607      	mov	r7, r0
 8009b36:	4691      	mov	r9, r2
 8009b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b3c:	f108 0601 	add.w	r6, r8, #1
 8009b40:	42b3      	cmp	r3, r6
 8009b42:	db0b      	blt.n	8009b5c <__lshift+0x38>
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff fddd 	bl	8009704 <_Balloc>
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b948      	cbnz	r0, 8009b62 <__lshift+0x3e>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <__lshift+0xd0>)
 8009b52:	4829      	ldr	r0, [pc, #164]	; (8009bf8 <__lshift+0xd4>)
 8009b54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b58:	f000 fb78 	bl	800a24c <__assert_func>
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	e7ee      	b.n	8009b40 <__lshift+0x1c>
 8009b62:	2300      	movs	r3, #0
 8009b64:	f100 0114 	add.w	r1, r0, #20
 8009b68:	f100 0210 	add.w	r2, r0, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4553      	cmp	r3, sl
 8009b70:	db33      	blt.n	8009bda <__lshift+0xb6>
 8009b72:	6920      	ldr	r0, [r4, #16]
 8009b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b78:	f104 0314 	add.w	r3, r4, #20
 8009b7c:	f019 091f 	ands.w	r9, r9, #31
 8009b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b88:	d02b      	beq.n	8009be2 <__lshift+0xbe>
 8009b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b8e:	468a      	mov	sl, r1
 8009b90:	2200      	movs	r2, #0
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	fa00 f009 	lsl.w	r0, r0, r9
 8009b98:	4310      	orrs	r0, r2
 8009b9a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	459c      	cmp	ip, r3
 8009ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ba8:	d8f3      	bhi.n	8009b92 <__lshift+0x6e>
 8009baa:	ebac 0304 	sub.w	r3, ip, r4
 8009bae:	3b15      	subs	r3, #21
 8009bb0:	f023 0303 	bic.w	r3, r3, #3
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	f104 0015 	add.w	r0, r4, #21
 8009bba:	4584      	cmp	ip, r0
 8009bbc:	bf38      	it	cc
 8009bbe:	2304      	movcc	r3, #4
 8009bc0:	50ca      	str	r2, [r1, r3]
 8009bc2:	b10a      	cbz	r2, 8009bc8 <__lshift+0xa4>
 8009bc4:	f108 0602 	add.w	r6, r8, #2
 8009bc8:	3e01      	subs	r6, #1
 8009bca:	4638      	mov	r0, r7
 8009bcc:	612e      	str	r6, [r5, #16]
 8009bce:	4621      	mov	r1, r4
 8009bd0:	f7ff fdd8 	bl	8009784 <_Bfree>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bde:	3301      	adds	r3, #1
 8009be0:	e7c5      	b.n	8009b6e <__lshift+0x4a>
 8009be2:	3904      	subs	r1, #4
 8009be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bec:	459c      	cmp	ip, r3
 8009bee:	d8f9      	bhi.n	8009be4 <__lshift+0xc0>
 8009bf0:	e7ea      	b.n	8009bc8 <__lshift+0xa4>
 8009bf2:	bf00      	nop
 8009bf4:	0803dbb0 	.word	0x0803dbb0
 8009bf8:	0803dbc1 	.word	0x0803dbc1

08009bfc <__mcmp>:
 8009bfc:	b530      	push	{r4, r5, lr}
 8009bfe:	6902      	ldr	r2, [r0, #16]
 8009c00:	690c      	ldr	r4, [r1, #16]
 8009c02:	1b12      	subs	r2, r2, r4
 8009c04:	d10e      	bne.n	8009c24 <__mcmp+0x28>
 8009c06:	f100 0314 	add.w	r3, r0, #20
 8009c0a:	3114      	adds	r1, #20
 8009c0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c1c:	42a5      	cmp	r5, r4
 8009c1e:	d003      	beq.n	8009c28 <__mcmp+0x2c>
 8009c20:	d305      	bcc.n	8009c2e <__mcmp+0x32>
 8009c22:	2201      	movs	r2, #1
 8009c24:	4610      	mov	r0, r2
 8009c26:	bd30      	pop	{r4, r5, pc}
 8009c28:	4283      	cmp	r3, r0
 8009c2a:	d3f3      	bcc.n	8009c14 <__mcmp+0x18>
 8009c2c:	e7fa      	b.n	8009c24 <__mcmp+0x28>
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	e7f7      	b.n	8009c24 <__mcmp+0x28>

08009c34 <__mdiff>:
 8009c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460c      	mov	r4, r1
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4690      	mov	r8, r2
 8009c42:	f7ff ffdb 	bl	8009bfc <__mcmp>
 8009c46:	1e05      	subs	r5, r0, #0
 8009c48:	d110      	bne.n	8009c6c <__mdiff+0x38>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7ff fd59 	bl	8009704 <_Balloc>
 8009c52:	b930      	cbnz	r0, 8009c62 <__mdiff+0x2e>
 8009c54:	4b3a      	ldr	r3, [pc, #232]	; (8009d40 <__mdiff+0x10c>)
 8009c56:	4602      	mov	r2, r0
 8009c58:	f240 2137 	movw	r1, #567	; 0x237
 8009c5c:	4839      	ldr	r0, [pc, #228]	; (8009d44 <__mdiff+0x110>)
 8009c5e:	f000 faf5 	bl	800a24c <__assert_func>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	bfa4      	itt	ge
 8009c6e:	4643      	movge	r3, r8
 8009c70:	46a0      	movge	r8, r4
 8009c72:	4630      	mov	r0, r6
 8009c74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c78:	bfa6      	itte	ge
 8009c7a:	461c      	movge	r4, r3
 8009c7c:	2500      	movge	r5, #0
 8009c7e:	2501      	movlt	r5, #1
 8009c80:	f7ff fd40 	bl	8009704 <_Balloc>
 8009c84:	b920      	cbnz	r0, 8009c90 <__mdiff+0x5c>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <__mdiff+0x10c>)
 8009c88:	4602      	mov	r2, r0
 8009c8a:	f240 2145 	movw	r1, #581	; 0x245
 8009c8e:	e7e5      	b.n	8009c5c <__mdiff+0x28>
 8009c90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c94:	6926      	ldr	r6, [r4, #16]
 8009c96:	60c5      	str	r5, [r0, #12]
 8009c98:	f104 0914 	add.w	r9, r4, #20
 8009c9c:	f108 0514 	add.w	r5, r8, #20
 8009ca0:	f100 0e14 	add.w	lr, r0, #20
 8009ca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cac:	f108 0210 	add.w	r2, r8, #16
 8009cb0:	46f2      	mov	sl, lr
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cbc:	fa11 f88b 	uxtah	r8, r1, fp
 8009cc0:	b299      	uxth	r1, r3
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	eba8 0801 	sub.w	r8, r8, r1
 8009cc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ccc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cd0:	fa1f f888 	uxth.w	r8, r8
 8009cd4:	1419      	asrs	r1, r3, #16
 8009cd6:	454e      	cmp	r6, r9
 8009cd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cdc:	f84a 3b04 	str.w	r3, [sl], #4
 8009ce0:	d8e8      	bhi.n	8009cb4 <__mdiff+0x80>
 8009ce2:	1b33      	subs	r3, r6, r4
 8009ce4:	3b15      	subs	r3, #21
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	3304      	adds	r3, #4
 8009cec:	3415      	adds	r4, #21
 8009cee:	42a6      	cmp	r6, r4
 8009cf0:	bf38      	it	cc
 8009cf2:	2304      	movcc	r3, #4
 8009cf4:	441d      	add	r5, r3
 8009cf6:	4473      	add	r3, lr
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	462e      	mov	r6, r5
 8009cfc:	4566      	cmp	r6, ip
 8009cfe:	d30e      	bcc.n	8009d1e <__mdiff+0xea>
 8009d00:	f10c 0203 	add.w	r2, ip, #3
 8009d04:	1b52      	subs	r2, r2, r5
 8009d06:	f022 0203 	bic.w	r2, r2, #3
 8009d0a:	3d03      	subs	r5, #3
 8009d0c:	45ac      	cmp	ip, r5
 8009d0e:	bf38      	it	cc
 8009d10:	2200      	movcc	r2, #0
 8009d12:	4413      	add	r3, r2
 8009d14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d18:	b17a      	cbz	r2, 8009d3a <__mdiff+0x106>
 8009d1a:	6107      	str	r7, [r0, #16]
 8009d1c:	e7a4      	b.n	8009c68 <__mdiff+0x34>
 8009d1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d22:	fa11 f288 	uxtah	r2, r1, r8
 8009d26:	1414      	asrs	r4, r2, #16
 8009d28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d2c:	b292      	uxth	r2, r2
 8009d2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d32:	f84e 2b04 	str.w	r2, [lr], #4
 8009d36:	1421      	asrs	r1, r4, #16
 8009d38:	e7e0      	b.n	8009cfc <__mdiff+0xc8>
 8009d3a:	3f01      	subs	r7, #1
 8009d3c:	e7ea      	b.n	8009d14 <__mdiff+0xe0>
 8009d3e:	bf00      	nop
 8009d40:	0803dbb0 	.word	0x0803dbb0
 8009d44:	0803dbc1 	.word	0x0803dbc1

08009d48 <__d2b>:
 8009d48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	2101      	movs	r1, #1
 8009d50:	ec59 8b10 	vmov	r8, r9, d0
 8009d54:	4616      	mov	r6, r2
 8009d56:	f7ff fcd5 	bl	8009704 <_Balloc>
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	b930      	cbnz	r0, 8009d6c <__d2b+0x24>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <__d2b+0xac>)
 8009d62:	4825      	ldr	r0, [pc, #148]	; (8009df8 <__d2b+0xb0>)
 8009d64:	f240 310f 	movw	r1, #783	; 0x30f
 8009d68:	f000 fa70 	bl	800a24c <__assert_func>
 8009d6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d74:	bb2d      	cbnz	r5, 8009dc2 <__d2b+0x7a>
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	f1b8 0300 	subs.w	r3, r8, #0
 8009d7c:	d026      	beq.n	8009dcc <__d2b+0x84>
 8009d7e:	4668      	mov	r0, sp
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	f7ff fd87 	bl	8009894 <__lo0bits>
 8009d86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d8a:	b1e8      	cbz	r0, 8009dc8 <__d2b+0x80>
 8009d8c:	f1c0 0320 	rsb	r3, r0, #32
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	430b      	orrs	r3, r1
 8009d96:	40c2      	lsrs	r2, r0
 8009d98:	6163      	str	r3, [r4, #20]
 8009d9a:	9201      	str	r2, [sp, #4]
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	61a3      	str	r3, [r4, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf14      	ite	ne
 8009da4:	2202      	movne	r2, #2
 8009da6:	2201      	moveq	r2, #1
 8009da8:	6122      	str	r2, [r4, #16]
 8009daa:	b1bd      	cbz	r5, 8009ddc <__d2b+0x94>
 8009dac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009db0:	4405      	add	r5, r0
 8009db2:	603d      	str	r5, [r7, #0]
 8009db4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009db8:	6030      	str	r0, [r6, #0]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	b003      	add	sp, #12
 8009dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc6:	e7d6      	b.n	8009d76 <__d2b+0x2e>
 8009dc8:	6161      	str	r1, [r4, #20]
 8009dca:	e7e7      	b.n	8009d9c <__d2b+0x54>
 8009dcc:	a801      	add	r0, sp, #4
 8009dce:	f7ff fd61 	bl	8009894 <__lo0bits>
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	6163      	str	r3, [r4, #20]
 8009dd6:	3020      	adds	r0, #32
 8009dd8:	2201      	movs	r2, #1
 8009dda:	e7e5      	b.n	8009da8 <__d2b+0x60>
 8009ddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009de0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009de4:	6038      	str	r0, [r7, #0]
 8009de6:	6918      	ldr	r0, [r3, #16]
 8009de8:	f7ff fd34 	bl	8009854 <__hi0bits>
 8009dec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009df0:	e7e2      	b.n	8009db8 <__d2b+0x70>
 8009df2:	bf00      	nop
 8009df4:	0803dbb0 	.word	0x0803dbb0
 8009df8:	0803dbc1 	.word	0x0803dbc1

08009dfc <_malloc_usable_size_r>:
 8009dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e00:	1f18      	subs	r0, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bfbc      	itt	lt
 8009e06:	580b      	ldrlt	r3, [r1, r0]
 8009e08:	18c0      	addlt	r0, r0, r3
 8009e0a:	4770      	bx	lr

08009e0c <__ssputs_r>:
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	688e      	ldr	r6, [r1, #8]
 8009e12:	461f      	mov	r7, r3
 8009e14:	42be      	cmp	r6, r7
 8009e16:	680b      	ldr	r3, [r1, #0]
 8009e18:	4682      	mov	sl, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	d82c      	bhi.n	8009e7a <__ssputs_r+0x6e>
 8009e20:	898a      	ldrh	r2, [r1, #12]
 8009e22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e26:	d026      	beq.n	8009e76 <__ssputs_r+0x6a>
 8009e28:	6965      	ldr	r5, [r4, #20]
 8009e2a:	6909      	ldr	r1, [r1, #16]
 8009e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e30:	eba3 0901 	sub.w	r9, r3, r1
 8009e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e38:	1c7b      	adds	r3, r7, #1
 8009e3a:	444b      	add	r3, r9
 8009e3c:	106d      	asrs	r5, r5, #1
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	bf38      	it	cc
 8009e42:	461d      	movcc	r5, r3
 8009e44:	0553      	lsls	r3, r2, #21
 8009e46:	d527      	bpl.n	8009e98 <__ssputs_r+0x8c>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7fd fead 	bl	8007ba8 <_malloc_r>
 8009e4e:	4606      	mov	r6, r0
 8009e50:	b360      	cbz	r0, 8009eac <__ssputs_r+0xa0>
 8009e52:	6921      	ldr	r1, [r4, #16]
 8009e54:	464a      	mov	r2, r9
 8009e56:	f7fe fd7e 	bl	8008956 <memcpy>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	6126      	str	r6, [r4, #16]
 8009e68:	6165      	str	r5, [r4, #20]
 8009e6a:	444e      	add	r6, r9
 8009e6c:	eba5 0509 	sub.w	r5, r5, r9
 8009e70:	6026      	str	r6, [r4, #0]
 8009e72:	60a5      	str	r5, [r4, #8]
 8009e74:	463e      	mov	r6, r7
 8009e76:	42be      	cmp	r6, r7
 8009e78:	d900      	bls.n	8009e7c <__ssputs_r+0x70>
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4641      	mov	r1, r8
 8009e82:	f000 f9c9 	bl	800a218 <memmove>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	1b9b      	subs	r3, r3, r6
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	4433      	add	r3, r6
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	2000      	movs	r0, #0
 8009e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e98:	462a      	mov	r2, r5
 8009e9a:	f7fd ff11 	bl	8007cc0 <_realloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1e0      	bne.n	8009e66 <__ssputs_r+0x5a>
 8009ea4:	6921      	ldr	r1, [r4, #16]
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	f7ff fbe0 	bl	800966c <_free_r>
 8009eac:	230c      	movs	r3, #12
 8009eae:	f8ca 3000 	str.w	r3, [sl]
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebe:	e7e9      	b.n	8009e94 <__ssputs_r+0x88>

08009ec0 <_svfiprintf_r>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	4698      	mov	r8, r3
 8009ec6:	898b      	ldrh	r3, [r1, #12]
 8009ec8:	061b      	lsls	r3, r3, #24
 8009eca:	b09d      	sub	sp, #116	; 0x74
 8009ecc:	4607      	mov	r7, r0
 8009ece:	460d      	mov	r5, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	d50e      	bpl.n	8009ef2 <_svfiprintf_r+0x32>
 8009ed4:	690b      	ldr	r3, [r1, #16]
 8009ed6:	b963      	cbnz	r3, 8009ef2 <_svfiprintf_r+0x32>
 8009ed8:	2140      	movs	r1, #64	; 0x40
 8009eda:	f7fd fe65 	bl	8007ba8 <_malloc_r>
 8009ede:	6028      	str	r0, [r5, #0]
 8009ee0:	6128      	str	r0, [r5, #16]
 8009ee2:	b920      	cbnz	r0, 8009eee <_svfiprintf_r+0x2e>
 8009ee4:	230c      	movs	r3, #12
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	e0d0      	b.n	800a090 <_svfiprintf_r+0x1d0>
 8009eee:	2340      	movs	r3, #64	; 0x40
 8009ef0:	616b      	str	r3, [r5, #20]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef6:	2320      	movs	r3, #32
 8009ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f00:	2330      	movs	r3, #48	; 0x30
 8009f02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a0a8 <_svfiprintf_r+0x1e8>
 8009f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f0a:	f04f 0901 	mov.w	r9, #1
 8009f0e:	4623      	mov	r3, r4
 8009f10:	469a      	mov	sl, r3
 8009f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f16:	b10a      	cbz	r2, 8009f1c <_svfiprintf_r+0x5c>
 8009f18:	2a25      	cmp	r2, #37	; 0x25
 8009f1a:	d1f9      	bne.n	8009f10 <_svfiprintf_r+0x50>
 8009f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f20:	d00b      	beq.n	8009f3a <_svfiprintf_r+0x7a>
 8009f22:	465b      	mov	r3, fp
 8009f24:	4622      	mov	r2, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff ff6f 	bl	8009e0c <__ssputs_r>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f000 80a9 	beq.w	800a086 <_svfiprintf_r+0x1c6>
 8009f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f36:	445a      	add	r2, fp
 8009f38:	9209      	str	r2, [sp, #36]	; 0x24
 8009f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80a1 	beq.w	800a086 <_svfiprintf_r+0x1c6>
 8009f44:	2300      	movs	r3, #0
 8009f46:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f4e:	f10a 0a01 	add.w	sl, sl, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f5c:	4654      	mov	r4, sl
 8009f5e:	2205      	movs	r2, #5
 8009f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f64:	4850      	ldr	r0, [pc, #320]	; (800a0a8 <_svfiprintf_r+0x1e8>)
 8009f66:	f7f6 f953 	bl	8000210 <memchr>
 8009f6a:	9a04      	ldr	r2, [sp, #16]
 8009f6c:	b9d8      	cbnz	r0, 8009fa6 <_svfiprintf_r+0xe6>
 8009f6e:	06d0      	lsls	r0, r2, #27
 8009f70:	bf44      	itt	mi
 8009f72:	2320      	movmi	r3, #32
 8009f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f78:	0711      	lsls	r1, r2, #28
 8009f7a:	bf44      	itt	mi
 8009f7c:	232b      	movmi	r3, #43	; 0x2b
 8009f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f82:	f89a 3000 	ldrb.w	r3, [sl]
 8009f86:	2b2a      	cmp	r3, #42	; 0x2a
 8009f88:	d015      	beq.n	8009fb6 <_svfiprintf_r+0xf6>
 8009f8a:	9a07      	ldr	r2, [sp, #28]
 8009f8c:	4654      	mov	r4, sl
 8009f8e:	2000      	movs	r0, #0
 8009f90:	f04f 0c0a 	mov.w	ip, #10
 8009f94:	4621      	mov	r1, r4
 8009f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f9a:	3b30      	subs	r3, #48	; 0x30
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	d94d      	bls.n	800a03c <_svfiprintf_r+0x17c>
 8009fa0:	b1b0      	cbz	r0, 8009fd0 <_svfiprintf_r+0x110>
 8009fa2:	9207      	str	r2, [sp, #28]
 8009fa4:	e014      	b.n	8009fd0 <_svfiprintf_r+0x110>
 8009fa6:	eba0 0308 	sub.w	r3, r0, r8
 8009faa:	fa09 f303 	lsl.w	r3, r9, r3
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	46a2      	mov	sl, r4
 8009fb4:	e7d2      	b.n	8009f5c <_svfiprintf_r+0x9c>
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	1d19      	adds	r1, r3, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	9103      	str	r1, [sp, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfbb      	ittet	lt
 8009fc2:	425b      	neglt	r3, r3
 8009fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fc8:	9307      	strge	r3, [sp, #28]
 8009fca:	9307      	strlt	r3, [sp, #28]
 8009fcc:	bfb8      	it	lt
 8009fce:	9204      	strlt	r2, [sp, #16]
 8009fd0:	7823      	ldrb	r3, [r4, #0]
 8009fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fd4:	d10c      	bne.n	8009ff0 <_svfiprintf_r+0x130>
 8009fd6:	7863      	ldrb	r3, [r4, #1]
 8009fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fda:	d134      	bne.n	800a046 <_svfiprintf_r+0x186>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	1d1a      	adds	r2, r3, #4
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	9203      	str	r2, [sp, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfb8      	it	lt
 8009fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fec:	3402      	adds	r4, #2
 8009fee:	9305      	str	r3, [sp, #20]
 8009ff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a0b8 <_svfiprintf_r+0x1f8>
 8009ff4:	7821      	ldrb	r1, [r4, #0]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	f7f6 f909 	bl	8000210 <memchr>
 8009ffe:	b138      	cbz	r0, 800a010 <_svfiprintf_r+0x150>
 800a000:	9b04      	ldr	r3, [sp, #16]
 800a002:	eba0 000a 	sub.w	r0, r0, sl
 800a006:	2240      	movs	r2, #64	; 0x40
 800a008:	4082      	lsls	r2, r0
 800a00a:	4313      	orrs	r3, r2
 800a00c:	3401      	adds	r4, #1
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a014:	4825      	ldr	r0, [pc, #148]	; (800a0ac <_svfiprintf_r+0x1ec>)
 800a016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a01a:	2206      	movs	r2, #6
 800a01c:	f7f6 f8f8 	bl	8000210 <memchr>
 800a020:	2800      	cmp	r0, #0
 800a022:	d038      	beq.n	800a096 <_svfiprintf_r+0x1d6>
 800a024:	4b22      	ldr	r3, [pc, #136]	; (800a0b0 <_svfiprintf_r+0x1f0>)
 800a026:	bb1b      	cbnz	r3, 800a070 <_svfiprintf_r+0x1b0>
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	3307      	adds	r3, #7
 800a02c:	f023 0307 	bic.w	r3, r3, #7
 800a030:	3308      	adds	r3, #8
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	4433      	add	r3, r6
 800a038:	9309      	str	r3, [sp, #36]	; 0x24
 800a03a:	e768      	b.n	8009f0e <_svfiprintf_r+0x4e>
 800a03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a040:	460c      	mov	r4, r1
 800a042:	2001      	movs	r0, #1
 800a044:	e7a6      	b.n	8009f94 <_svfiprintf_r+0xd4>
 800a046:	2300      	movs	r3, #0
 800a048:	3401      	adds	r4, #1
 800a04a:	9305      	str	r3, [sp, #20]
 800a04c:	4619      	mov	r1, r3
 800a04e:	f04f 0c0a 	mov.w	ip, #10
 800a052:	4620      	mov	r0, r4
 800a054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a058:	3a30      	subs	r2, #48	; 0x30
 800a05a:	2a09      	cmp	r2, #9
 800a05c:	d903      	bls.n	800a066 <_svfiprintf_r+0x1a6>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0c6      	beq.n	8009ff0 <_svfiprintf_r+0x130>
 800a062:	9105      	str	r1, [sp, #20]
 800a064:	e7c4      	b.n	8009ff0 <_svfiprintf_r+0x130>
 800a066:	fb0c 2101 	mla	r1, ip, r1, r2
 800a06a:	4604      	mov	r4, r0
 800a06c:	2301      	movs	r3, #1
 800a06e:	e7f0      	b.n	800a052 <_svfiprintf_r+0x192>
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <_svfiprintf_r+0x1f4>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4638      	mov	r0, r7
 800a07c:	f7fd fef0 	bl	8007e60 <_printf_float>
 800a080:	1c42      	adds	r2, r0, #1
 800a082:	4606      	mov	r6, r0
 800a084:	d1d6      	bne.n	800a034 <_svfiprintf_r+0x174>
 800a086:	89ab      	ldrh	r3, [r5, #12]
 800a088:	065b      	lsls	r3, r3, #25
 800a08a:	f53f af2d 	bmi.w	8009ee8 <_svfiprintf_r+0x28>
 800a08e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a090:	b01d      	add	sp, #116	; 0x74
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	ab03      	add	r3, sp, #12
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	462a      	mov	r2, r5
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <_svfiprintf_r+0x1f4>)
 800a09e:	a904      	add	r1, sp, #16
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7fe f981 	bl	80083a8 <_printf_i>
 800a0a6:	e7eb      	b.n	800a080 <_svfiprintf_r+0x1c0>
 800a0a8:	0803dd1c 	.word	0x0803dd1c
 800a0ac:	0803dd26 	.word	0x0803dd26
 800a0b0:	08007e61 	.word	0x08007e61
 800a0b4:	08009e0d 	.word	0x08009e0d
 800a0b8:	0803dd22 	.word	0x0803dd22

0800a0bc <__sflush_r>:
 800a0bc:	898a      	ldrh	r2, [r1, #12]
 800a0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	0710      	lsls	r0, r2, #28
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	d458      	bmi.n	800a17c <__sflush_r+0xc0>
 800a0ca:	684b      	ldr	r3, [r1, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dc05      	bgt.n	800a0dc <__sflush_r+0x20>
 800a0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dc02      	bgt.n	800a0dc <__sflush_r+0x20>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	d0f9      	beq.n	800a0d6 <__sflush_r+0x1a>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0e8:	682f      	ldr	r7, [r5, #0]
 800a0ea:	6a21      	ldr	r1, [r4, #32]
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	d032      	beq.n	800a156 <__sflush_r+0x9a>
 800a0f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	075a      	lsls	r2, r3, #29
 800a0f6:	d505      	bpl.n	800a104 <__sflush_r+0x48>
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	1ac0      	subs	r0, r0, r3
 800a0fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0fe:	b10b      	cbz	r3, 800a104 <__sflush_r+0x48>
 800a100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a102:	1ac0      	subs	r0, r0, r3
 800a104:	2300      	movs	r3, #0
 800a106:	4602      	mov	r2, r0
 800a108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a10a:	6a21      	ldr	r1, [r4, #32]
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b0      	blx	r6
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	d106      	bne.n	800a124 <__sflush_r+0x68>
 800a116:	6829      	ldr	r1, [r5, #0]
 800a118:	291d      	cmp	r1, #29
 800a11a:	d82b      	bhi.n	800a174 <__sflush_r+0xb8>
 800a11c:	4a29      	ldr	r2, [pc, #164]	; (800a1c4 <__sflush_r+0x108>)
 800a11e:	410a      	asrs	r2, r1
 800a120:	07d6      	lsls	r6, r2, #31
 800a122:	d427      	bmi.n	800a174 <__sflush_r+0xb8>
 800a124:	2200      	movs	r2, #0
 800a126:	6062      	str	r2, [r4, #4]
 800a128:	04d9      	lsls	r1, r3, #19
 800a12a:	6922      	ldr	r2, [r4, #16]
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	d504      	bpl.n	800a13a <__sflush_r+0x7e>
 800a130:	1c42      	adds	r2, r0, #1
 800a132:	d101      	bne.n	800a138 <__sflush_r+0x7c>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b903      	cbnz	r3, 800a13a <__sflush_r+0x7e>
 800a138:	6560      	str	r0, [r4, #84]	; 0x54
 800a13a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a13c:	602f      	str	r7, [r5, #0]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d0c9      	beq.n	800a0d6 <__sflush_r+0x1a>
 800a142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a146:	4299      	cmp	r1, r3
 800a148:	d002      	beq.n	800a150 <__sflush_r+0x94>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff fa8e 	bl	800966c <_free_r>
 800a150:	2000      	movs	r0, #0
 800a152:	6360      	str	r0, [r4, #52]	; 0x34
 800a154:	e7c0      	b.n	800a0d8 <__sflush_r+0x1c>
 800a156:	2301      	movs	r3, #1
 800a158:	4628      	mov	r0, r5
 800a15a:	47b0      	blx	r6
 800a15c:	1c41      	adds	r1, r0, #1
 800a15e:	d1c8      	bne.n	800a0f2 <__sflush_r+0x36>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0c5      	beq.n	800a0f2 <__sflush_r+0x36>
 800a166:	2b1d      	cmp	r3, #29
 800a168:	d001      	beq.n	800a16e <__sflush_r+0xb2>
 800a16a:	2b16      	cmp	r3, #22
 800a16c:	d101      	bne.n	800a172 <__sflush_r+0xb6>
 800a16e:	602f      	str	r7, [r5, #0]
 800a170:	e7b1      	b.n	800a0d6 <__sflush_r+0x1a>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	e7ad      	b.n	800a0d8 <__sflush_r+0x1c>
 800a17c:	690f      	ldr	r7, [r1, #16]
 800a17e:	2f00      	cmp	r7, #0
 800a180:	d0a9      	beq.n	800a0d6 <__sflush_r+0x1a>
 800a182:	0793      	lsls	r3, r2, #30
 800a184:	680e      	ldr	r6, [r1, #0]
 800a186:	bf08      	it	eq
 800a188:	694b      	ldreq	r3, [r1, #20]
 800a18a:	600f      	str	r7, [r1, #0]
 800a18c:	bf18      	it	ne
 800a18e:	2300      	movne	r3, #0
 800a190:	eba6 0807 	sub.w	r8, r6, r7
 800a194:	608b      	str	r3, [r1, #8]
 800a196:	f1b8 0f00 	cmp.w	r8, #0
 800a19a:	dd9c      	ble.n	800a0d6 <__sflush_r+0x1a>
 800a19c:	6a21      	ldr	r1, [r4, #32]
 800a19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1a0:	4643      	mov	r3, r8
 800a1a2:	463a      	mov	r2, r7
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	47b0      	blx	r6
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	dc06      	bgt.n	800a1ba <__sflush_r+0xfe>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	e78e      	b.n	800a0d8 <__sflush_r+0x1c>
 800a1ba:	4407      	add	r7, r0
 800a1bc:	eba8 0800 	sub.w	r8, r8, r0
 800a1c0:	e7e9      	b.n	800a196 <__sflush_r+0xda>
 800a1c2:	bf00      	nop
 800a1c4:	dfbffffe 	.word	0xdfbffffe

0800a1c8 <_fflush_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	690b      	ldr	r3, [r1, #16]
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b913      	cbnz	r3, 800a1d8 <_fflush_r+0x10>
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	b118      	cbz	r0, 800a1e2 <_fflush_r+0x1a>
 800a1da:	6a03      	ldr	r3, [r0, #32]
 800a1dc:	b90b      	cbnz	r3, 800a1e2 <_fflush_r+0x1a>
 800a1de:	f7fe fa91 	bl	8008704 <__sinit>
 800a1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0f3      	beq.n	800a1d2 <_fflush_r+0xa>
 800a1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1ec:	07d0      	lsls	r0, r2, #31
 800a1ee:	d404      	bmi.n	800a1fa <_fflush_r+0x32>
 800a1f0:	0599      	lsls	r1, r3, #22
 800a1f2:	d402      	bmi.n	800a1fa <_fflush_r+0x32>
 800a1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1f6:	f7fe fbac 	bl	8008952 <__retarget_lock_acquire_recursive>
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f7ff ff5d 	bl	800a0bc <__sflush_r>
 800a202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a204:	07da      	lsls	r2, r3, #31
 800a206:	4605      	mov	r5, r0
 800a208:	d4e4      	bmi.n	800a1d4 <_fflush_r+0xc>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	059b      	lsls	r3, r3, #22
 800a20e:	d4e1      	bmi.n	800a1d4 <_fflush_r+0xc>
 800a210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a212:	f7fe fb9f 	bl	8008954 <__retarget_lock_release_recursive>
 800a216:	e7dd      	b.n	800a1d4 <_fflush_r+0xc>

0800a218 <memmove>:
 800a218:	4288      	cmp	r0, r1
 800a21a:	b510      	push	{r4, lr}
 800a21c:	eb01 0402 	add.w	r4, r1, r2
 800a220:	d902      	bls.n	800a228 <memmove+0x10>
 800a222:	4284      	cmp	r4, r0
 800a224:	4623      	mov	r3, r4
 800a226:	d807      	bhi.n	800a238 <memmove+0x20>
 800a228:	1e43      	subs	r3, r0, #1
 800a22a:	42a1      	cmp	r1, r4
 800a22c:	d008      	beq.n	800a240 <memmove+0x28>
 800a22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a232:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a236:	e7f8      	b.n	800a22a <memmove+0x12>
 800a238:	4402      	add	r2, r0
 800a23a:	4601      	mov	r1, r0
 800a23c:	428a      	cmp	r2, r1
 800a23e:	d100      	bne.n	800a242 <memmove+0x2a>
 800a240:	bd10      	pop	{r4, pc}
 800a242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a24a:	e7f7      	b.n	800a23c <memmove+0x24>

0800a24c <__assert_func>:
 800a24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a24e:	4614      	mov	r4, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <__assert_func+0x2c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4605      	mov	r5, r0
 800a258:	68d8      	ldr	r0, [r3, #12]
 800a25a:	b14c      	cbz	r4, 800a270 <__assert_func+0x24>
 800a25c:	4b07      	ldr	r3, [pc, #28]	; (800a27c <__assert_func+0x30>)
 800a25e:	9100      	str	r1, [sp, #0]
 800a260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a264:	4906      	ldr	r1, [pc, #24]	; (800a280 <__assert_func+0x34>)
 800a266:	462b      	mov	r3, r5
 800a268:	f000 f844 	bl	800a2f4 <fiprintf>
 800a26c:	f000 f854 	bl	800a318 <abort>
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <__assert_func+0x38>)
 800a272:	461c      	mov	r4, r3
 800a274:	e7f3      	b.n	800a25e <__assert_func+0x12>
 800a276:	bf00      	nop
 800a278:	20000c5c 	.word	0x20000c5c
 800a27c:	0803dd37 	.word	0x0803dd37
 800a280:	0803dd44 	.word	0x0803dd44
 800a284:	0800b354 	.word	0x0800b354

0800a288 <_calloc_r>:
 800a288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a28a:	fba1 2402 	umull	r2, r4, r1, r2
 800a28e:	b94c      	cbnz	r4, 800a2a4 <_calloc_r+0x1c>
 800a290:	4611      	mov	r1, r2
 800a292:	9201      	str	r2, [sp, #4]
 800a294:	f7fd fc88 	bl	8007ba8 <_malloc_r>
 800a298:	9a01      	ldr	r2, [sp, #4]
 800a29a:	4605      	mov	r5, r0
 800a29c:	b930      	cbnz	r0, 800a2ac <_calloc_r+0x24>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	b003      	add	sp, #12
 800a2a2:	bd30      	pop	{r4, r5, pc}
 800a2a4:	220c      	movs	r2, #12
 800a2a6:	6002      	str	r2, [r0, #0]
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	e7f8      	b.n	800a29e <_calloc_r+0x16>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7fe fac2 	bl	8008836 <memset>
 800a2b2:	e7f4      	b.n	800a29e <_calloc_r+0x16>

0800a2b4 <__ascii_mbtowc>:
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	b901      	cbnz	r1, 800a2ba <__ascii_mbtowc+0x6>
 800a2b8:	a901      	add	r1, sp, #4
 800a2ba:	b142      	cbz	r2, 800a2ce <__ascii_mbtowc+0x1a>
 800a2bc:	b14b      	cbz	r3, 800a2d2 <__ascii_mbtowc+0x1e>
 800a2be:	7813      	ldrb	r3, [r2, #0]
 800a2c0:	600b      	str	r3, [r1, #0]
 800a2c2:	7812      	ldrb	r2, [r2, #0]
 800a2c4:	1e10      	subs	r0, r2, #0
 800a2c6:	bf18      	it	ne
 800a2c8:	2001      	movne	r0, #1
 800a2ca:	b002      	add	sp, #8
 800a2cc:	4770      	bx	lr
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	e7fb      	b.n	800a2ca <__ascii_mbtowc+0x16>
 800a2d2:	f06f 0001 	mvn.w	r0, #1
 800a2d6:	e7f8      	b.n	800a2ca <__ascii_mbtowc+0x16>

0800a2d8 <__ascii_wctomb>:
 800a2d8:	b149      	cbz	r1, 800a2ee <__ascii_wctomb+0x16>
 800a2da:	2aff      	cmp	r2, #255	; 0xff
 800a2dc:	bf85      	ittet	hi
 800a2de:	238a      	movhi	r3, #138	; 0x8a
 800a2e0:	6003      	strhi	r3, [r0, #0]
 800a2e2:	700a      	strbls	r2, [r1, #0]
 800a2e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2e8:	bf98      	it	ls
 800a2ea:	2001      	movls	r0, #1
 800a2ec:	4770      	bx	lr
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <fiprintf>:
 800a2f4:	b40e      	push	{r1, r2, r3}
 800a2f6:	b503      	push	{r0, r1, lr}
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	ab03      	add	r3, sp, #12
 800a2fc:	4805      	ldr	r0, [pc, #20]	; (800a314 <fiprintf+0x20>)
 800a2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a302:	6800      	ldr	r0, [r0, #0]
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	f000 f837 	bl	800a378 <_vfiprintf_r>
 800a30a:	b002      	add	sp, #8
 800a30c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a310:	b003      	add	sp, #12
 800a312:	4770      	bx	lr
 800a314:	20000c5c 	.word	0x20000c5c

0800a318 <abort>:
 800a318:	b508      	push	{r3, lr}
 800a31a:	2006      	movs	r0, #6
 800a31c:	f000 fa04 	bl	800a728 <raise>
 800a320:	2001      	movs	r0, #1
 800a322:	f7f7 fcbb 	bl	8001c9c <_exit>

0800a326 <__sfputc_r>:
 800a326:	6893      	ldr	r3, [r2, #8]
 800a328:	3b01      	subs	r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	b410      	push	{r4}
 800a32e:	6093      	str	r3, [r2, #8]
 800a330:	da08      	bge.n	800a344 <__sfputc_r+0x1e>
 800a332:	6994      	ldr	r4, [r2, #24]
 800a334:	42a3      	cmp	r3, r4
 800a336:	db01      	blt.n	800a33c <__sfputc_r+0x16>
 800a338:	290a      	cmp	r1, #10
 800a33a:	d103      	bne.n	800a344 <__sfputc_r+0x1e>
 800a33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a340:	f000 b934 	b.w	800a5ac <__swbuf_r>
 800a344:	6813      	ldr	r3, [r2, #0]
 800a346:	1c58      	adds	r0, r3, #1
 800a348:	6010      	str	r0, [r2, #0]
 800a34a:	7019      	strb	r1, [r3, #0]
 800a34c:	4608      	mov	r0, r1
 800a34e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <__sfputs_r>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	4614      	mov	r4, r2
 800a35c:	18d5      	adds	r5, r2, r3
 800a35e:	42ac      	cmp	r4, r5
 800a360:	d101      	bne.n	800a366 <__sfputs_r+0x12>
 800a362:	2000      	movs	r0, #0
 800a364:	e007      	b.n	800a376 <__sfputs_r+0x22>
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	463a      	mov	r2, r7
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff ffda 	bl	800a326 <__sfputc_r>
 800a372:	1c43      	adds	r3, r0, #1
 800a374:	d1f3      	bne.n	800a35e <__sfputs_r+0xa>
 800a376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a378 <_vfiprintf_r>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	460d      	mov	r5, r1
 800a37e:	b09d      	sub	sp, #116	; 0x74
 800a380:	4614      	mov	r4, r2
 800a382:	4698      	mov	r8, r3
 800a384:	4606      	mov	r6, r0
 800a386:	b118      	cbz	r0, 800a390 <_vfiprintf_r+0x18>
 800a388:	6a03      	ldr	r3, [r0, #32]
 800a38a:	b90b      	cbnz	r3, 800a390 <_vfiprintf_r+0x18>
 800a38c:	f7fe f9ba 	bl	8008704 <__sinit>
 800a390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a392:	07d9      	lsls	r1, r3, #31
 800a394:	d405      	bmi.n	800a3a2 <_vfiprintf_r+0x2a>
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	059a      	lsls	r2, r3, #22
 800a39a:	d402      	bmi.n	800a3a2 <_vfiprintf_r+0x2a>
 800a39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39e:	f7fe fad8 	bl	8008952 <__retarget_lock_acquire_recursive>
 800a3a2:	89ab      	ldrh	r3, [r5, #12]
 800a3a4:	071b      	lsls	r3, r3, #28
 800a3a6:	d501      	bpl.n	800a3ac <_vfiprintf_r+0x34>
 800a3a8:	692b      	ldr	r3, [r5, #16]
 800a3aa:	b99b      	cbnz	r3, 800a3d4 <_vfiprintf_r+0x5c>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f000 f93a 	bl	800a628 <__swsetup_r>
 800a3b4:	b170      	cbz	r0, 800a3d4 <_vfiprintf_r+0x5c>
 800a3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b8:	07dc      	lsls	r4, r3, #31
 800a3ba:	d504      	bpl.n	800a3c6 <_vfiprintf_r+0x4e>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b01d      	add	sp, #116	; 0x74
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	0598      	lsls	r0, r3, #22
 800a3ca:	d4f7      	bmi.n	800a3bc <_vfiprintf_r+0x44>
 800a3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ce:	f7fe fac1 	bl	8008954 <__retarget_lock_release_recursive>
 800a3d2:	e7f3      	b.n	800a3bc <_vfiprintf_r+0x44>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3e2:	2330      	movs	r3, #48	; 0x30
 800a3e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a598 <_vfiprintf_r+0x220>
 800a3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ec:	f04f 0901 	mov.w	r9, #1
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	469a      	mov	sl, r3
 800a3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f8:	b10a      	cbz	r2, 800a3fe <_vfiprintf_r+0x86>
 800a3fa:	2a25      	cmp	r2, #37	; 0x25
 800a3fc:	d1f9      	bne.n	800a3f2 <_vfiprintf_r+0x7a>
 800a3fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a402:	d00b      	beq.n	800a41c <_vfiprintf_r+0xa4>
 800a404:	465b      	mov	r3, fp
 800a406:	4622      	mov	r2, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7ff ffa2 	bl	800a354 <__sfputs_r>
 800a410:	3001      	adds	r0, #1
 800a412:	f000 80a9 	beq.w	800a568 <_vfiprintf_r+0x1f0>
 800a416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a418:	445a      	add	r2, fp
 800a41a:	9209      	str	r2, [sp, #36]	; 0x24
 800a41c:	f89a 3000 	ldrb.w	r3, [sl]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 80a1 	beq.w	800a568 <_vfiprintf_r+0x1f0>
 800a426:	2300      	movs	r3, #0
 800a428:	f04f 32ff 	mov.w	r2, #4294967295
 800a42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a430:	f10a 0a01 	add.w	sl, sl, #1
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	9307      	str	r3, [sp, #28]
 800a438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a43c:	931a      	str	r3, [sp, #104]	; 0x68
 800a43e:	4654      	mov	r4, sl
 800a440:	2205      	movs	r2, #5
 800a442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a446:	4854      	ldr	r0, [pc, #336]	; (800a598 <_vfiprintf_r+0x220>)
 800a448:	f7f5 fee2 	bl	8000210 <memchr>
 800a44c:	9a04      	ldr	r2, [sp, #16]
 800a44e:	b9d8      	cbnz	r0, 800a488 <_vfiprintf_r+0x110>
 800a450:	06d1      	lsls	r1, r2, #27
 800a452:	bf44      	itt	mi
 800a454:	2320      	movmi	r3, #32
 800a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45a:	0713      	lsls	r3, r2, #28
 800a45c:	bf44      	itt	mi
 800a45e:	232b      	movmi	r3, #43	; 0x2b
 800a460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a464:	f89a 3000 	ldrb.w	r3, [sl]
 800a468:	2b2a      	cmp	r3, #42	; 0x2a
 800a46a:	d015      	beq.n	800a498 <_vfiprintf_r+0x120>
 800a46c:	9a07      	ldr	r2, [sp, #28]
 800a46e:	4654      	mov	r4, sl
 800a470:	2000      	movs	r0, #0
 800a472:	f04f 0c0a 	mov.w	ip, #10
 800a476:	4621      	mov	r1, r4
 800a478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a47c:	3b30      	subs	r3, #48	; 0x30
 800a47e:	2b09      	cmp	r3, #9
 800a480:	d94d      	bls.n	800a51e <_vfiprintf_r+0x1a6>
 800a482:	b1b0      	cbz	r0, 800a4b2 <_vfiprintf_r+0x13a>
 800a484:	9207      	str	r2, [sp, #28]
 800a486:	e014      	b.n	800a4b2 <_vfiprintf_r+0x13a>
 800a488:	eba0 0308 	sub.w	r3, r0, r8
 800a48c:	fa09 f303 	lsl.w	r3, r9, r3
 800a490:	4313      	orrs	r3, r2
 800a492:	9304      	str	r3, [sp, #16]
 800a494:	46a2      	mov	sl, r4
 800a496:	e7d2      	b.n	800a43e <_vfiprintf_r+0xc6>
 800a498:	9b03      	ldr	r3, [sp, #12]
 800a49a:	1d19      	adds	r1, r3, #4
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	9103      	str	r1, [sp, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bfbb      	ittet	lt
 800a4a4:	425b      	neglt	r3, r3
 800a4a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4aa:	9307      	strge	r3, [sp, #28]
 800a4ac:	9307      	strlt	r3, [sp, #28]
 800a4ae:	bfb8      	it	lt
 800a4b0:	9204      	strlt	r2, [sp, #16]
 800a4b2:	7823      	ldrb	r3, [r4, #0]
 800a4b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b6:	d10c      	bne.n	800a4d2 <_vfiprintf_r+0x15a>
 800a4b8:	7863      	ldrb	r3, [r4, #1]
 800a4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a4bc:	d134      	bne.n	800a528 <_vfiprintf_r+0x1b0>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d1a      	adds	r2, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9203      	str	r2, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfb8      	it	lt
 800a4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ce:	3402      	adds	r4, #2
 800a4d0:	9305      	str	r3, [sp, #20]
 800a4d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a5a8 <_vfiprintf_r+0x230>
 800a4d6:	7821      	ldrb	r1, [r4, #0]
 800a4d8:	2203      	movs	r2, #3
 800a4da:	4650      	mov	r0, sl
 800a4dc:	f7f5 fe98 	bl	8000210 <memchr>
 800a4e0:	b138      	cbz	r0, 800a4f2 <_vfiprintf_r+0x17a>
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	eba0 000a 	sub.w	r0, r0, sl
 800a4e8:	2240      	movs	r2, #64	; 0x40
 800a4ea:	4082      	lsls	r2, r0
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	3401      	adds	r4, #1
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f6:	4829      	ldr	r0, [pc, #164]	; (800a59c <_vfiprintf_r+0x224>)
 800a4f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4fc:	2206      	movs	r2, #6
 800a4fe:	f7f5 fe87 	bl	8000210 <memchr>
 800a502:	2800      	cmp	r0, #0
 800a504:	d03f      	beq.n	800a586 <_vfiprintf_r+0x20e>
 800a506:	4b26      	ldr	r3, [pc, #152]	; (800a5a0 <_vfiprintf_r+0x228>)
 800a508:	bb1b      	cbnz	r3, 800a552 <_vfiprintf_r+0x1da>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	3307      	adds	r3, #7
 800a50e:	f023 0307 	bic.w	r3, r3, #7
 800a512:	3308      	adds	r3, #8
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a518:	443b      	add	r3, r7
 800a51a:	9309      	str	r3, [sp, #36]	; 0x24
 800a51c:	e768      	b.n	800a3f0 <_vfiprintf_r+0x78>
 800a51e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a522:	460c      	mov	r4, r1
 800a524:	2001      	movs	r0, #1
 800a526:	e7a6      	b.n	800a476 <_vfiprintf_r+0xfe>
 800a528:	2300      	movs	r3, #0
 800a52a:	3401      	adds	r4, #1
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	4619      	mov	r1, r3
 800a530:	f04f 0c0a 	mov.w	ip, #10
 800a534:	4620      	mov	r0, r4
 800a536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53a:	3a30      	subs	r2, #48	; 0x30
 800a53c:	2a09      	cmp	r2, #9
 800a53e:	d903      	bls.n	800a548 <_vfiprintf_r+0x1d0>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0c6      	beq.n	800a4d2 <_vfiprintf_r+0x15a>
 800a544:	9105      	str	r1, [sp, #20]
 800a546:	e7c4      	b.n	800a4d2 <_vfiprintf_r+0x15a>
 800a548:	fb0c 2101 	mla	r1, ip, r1, r2
 800a54c:	4604      	mov	r4, r0
 800a54e:	2301      	movs	r3, #1
 800a550:	e7f0      	b.n	800a534 <_vfiprintf_r+0x1bc>
 800a552:	ab03      	add	r3, sp, #12
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	462a      	mov	r2, r5
 800a558:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <_vfiprintf_r+0x22c>)
 800a55a:	a904      	add	r1, sp, #16
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7fd fc7f 	bl	8007e60 <_printf_float>
 800a562:	4607      	mov	r7, r0
 800a564:	1c78      	adds	r0, r7, #1
 800a566:	d1d6      	bne.n	800a516 <_vfiprintf_r+0x19e>
 800a568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56a:	07d9      	lsls	r1, r3, #31
 800a56c:	d405      	bmi.n	800a57a <_vfiprintf_r+0x202>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d402      	bmi.n	800a57a <_vfiprintf_r+0x202>
 800a574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a576:	f7fe f9ed 	bl	8008954 <__retarget_lock_release_recursive>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	065b      	lsls	r3, r3, #25
 800a57e:	f53f af1d 	bmi.w	800a3bc <_vfiprintf_r+0x44>
 800a582:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a584:	e71c      	b.n	800a3c0 <_vfiprintf_r+0x48>
 800a586:	ab03      	add	r3, sp, #12
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	462a      	mov	r2, r5
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <_vfiprintf_r+0x22c>)
 800a58e:	a904      	add	r1, sp, #16
 800a590:	4630      	mov	r0, r6
 800a592:	f7fd ff09 	bl	80083a8 <_printf_i>
 800a596:	e7e4      	b.n	800a562 <_vfiprintf_r+0x1ea>
 800a598:	0803dd1c 	.word	0x0803dd1c
 800a59c:	0803dd26 	.word	0x0803dd26
 800a5a0:	08007e61 	.word	0x08007e61
 800a5a4:	0800a355 	.word	0x0800a355
 800a5a8:	0803dd22 	.word	0x0803dd22

0800a5ac <__swbuf_r>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	b118      	cbz	r0, 800a5be <__swbuf_r+0x12>
 800a5b6:	6a03      	ldr	r3, [r0, #32]
 800a5b8:	b90b      	cbnz	r3, 800a5be <__swbuf_r+0x12>
 800a5ba:	f7fe f8a3 	bl	8008704 <__sinit>
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	60a3      	str	r3, [r4, #8]
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	071a      	lsls	r2, r3, #28
 800a5c6:	d525      	bpl.n	800a614 <__swbuf_r+0x68>
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	b31b      	cbz	r3, 800a614 <__swbuf_r+0x68>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	6922      	ldr	r2, [r4, #16]
 800a5d0:	1a98      	subs	r0, r3, r2
 800a5d2:	6963      	ldr	r3, [r4, #20]
 800a5d4:	b2f6      	uxtb	r6, r6
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	4637      	mov	r7, r6
 800a5da:	dc04      	bgt.n	800a5e6 <__swbuf_r+0x3a>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7ff fdf2 	bl	800a1c8 <_fflush_r>
 800a5e4:	b9e0      	cbnz	r0, 800a620 <__swbuf_r+0x74>
 800a5e6:	68a3      	ldr	r3, [r4, #8]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	6022      	str	r2, [r4, #0]
 800a5f2:	701e      	strb	r6, [r3, #0]
 800a5f4:	6962      	ldr	r2, [r4, #20]
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d004      	beq.n	800a606 <__swbuf_r+0x5a>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	07db      	lsls	r3, r3, #31
 800a600:	d506      	bpl.n	800a610 <__swbuf_r+0x64>
 800a602:	2e0a      	cmp	r6, #10
 800a604:	d104      	bne.n	800a610 <__swbuf_r+0x64>
 800a606:	4621      	mov	r1, r4
 800a608:	4628      	mov	r0, r5
 800a60a:	f7ff fddd 	bl	800a1c8 <_fflush_r>
 800a60e:	b938      	cbnz	r0, 800a620 <__swbuf_r+0x74>
 800a610:	4638      	mov	r0, r7
 800a612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f806 	bl	800a628 <__swsetup_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0d5      	beq.n	800a5cc <__swbuf_r+0x20>
 800a620:	f04f 37ff 	mov.w	r7, #4294967295
 800a624:	e7f4      	b.n	800a610 <__swbuf_r+0x64>
	...

0800a628 <__swsetup_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4b2a      	ldr	r3, [pc, #168]	; (800a6d4 <__swsetup_r+0xac>)
 800a62c:	4605      	mov	r5, r0
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	460c      	mov	r4, r1
 800a632:	b118      	cbz	r0, 800a63c <__swsetup_r+0x14>
 800a634:	6a03      	ldr	r3, [r0, #32]
 800a636:	b90b      	cbnz	r3, 800a63c <__swsetup_r+0x14>
 800a638:	f7fe f864 	bl	8008704 <__sinit>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a642:	0718      	lsls	r0, r3, #28
 800a644:	d422      	bmi.n	800a68c <__swsetup_r+0x64>
 800a646:	06d9      	lsls	r1, r3, #27
 800a648:	d407      	bmi.n	800a65a <__swsetup_r+0x32>
 800a64a:	2309      	movs	r3, #9
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e034      	b.n	800a6c4 <__swsetup_r+0x9c>
 800a65a:	0758      	lsls	r0, r3, #29
 800a65c:	d512      	bpl.n	800a684 <__swsetup_r+0x5c>
 800a65e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a660:	b141      	cbz	r1, 800a674 <__swsetup_r+0x4c>
 800a662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a666:	4299      	cmp	r1, r3
 800a668:	d002      	beq.n	800a670 <__swsetup_r+0x48>
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7fe fffe 	bl	800966c <_free_r>
 800a670:	2300      	movs	r3, #0
 800a672:	6363      	str	r3, [r4, #52]	; 0x34
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	2300      	movs	r3, #0
 800a67e:	6063      	str	r3, [r4, #4]
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	f043 0308 	orr.w	r3, r3, #8
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	b94b      	cbnz	r3, 800a6a4 <__swsetup_r+0x7c>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69a:	d003      	beq.n	800a6a4 <__swsetup_r+0x7c>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f884 	bl	800a7ac <__smakebuf_r>
 800a6a4:	89a0      	ldrh	r0, [r4, #12]
 800a6a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6aa:	f010 0301 	ands.w	r3, r0, #1
 800a6ae:	d00a      	beq.n	800a6c6 <__swsetup_r+0x9e>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60a3      	str	r3, [r4, #8]
 800a6b4:	6963      	ldr	r3, [r4, #20]
 800a6b6:	425b      	negs	r3, r3
 800a6b8:	61a3      	str	r3, [r4, #24]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	b943      	cbnz	r3, 800a6d0 <__swsetup_r+0xa8>
 800a6be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6c2:	d1c4      	bne.n	800a64e <__swsetup_r+0x26>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	0781      	lsls	r1, r0, #30
 800a6c8:	bf58      	it	pl
 800a6ca:	6963      	ldrpl	r3, [r4, #20]
 800a6cc:	60a3      	str	r3, [r4, #8]
 800a6ce:	e7f4      	b.n	800a6ba <__swsetup_r+0x92>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7f7      	b.n	800a6c4 <__swsetup_r+0x9c>
 800a6d4:	20000c5c 	.word	0x20000c5c

0800a6d8 <_raise_r>:
 800a6d8:	291f      	cmp	r1, #31
 800a6da:	b538      	push	{r3, r4, r5, lr}
 800a6dc:	4604      	mov	r4, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	d904      	bls.n	800a6ec <_raise_r+0x14>
 800a6e2:	2316      	movs	r3, #22
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6ee:	b112      	cbz	r2, 800a6f6 <_raise_r+0x1e>
 800a6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f4:	b94b      	cbnz	r3, 800a70a <_raise_r+0x32>
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 f830 	bl	800a75c <_getpid_r>
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	4601      	mov	r1, r0
 800a700:	4620      	mov	r0, r4
 800a702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a706:	f000 b817 	b.w	800a738 <_kill_r>
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d00a      	beq.n	800a724 <_raise_r+0x4c>
 800a70e:	1c59      	adds	r1, r3, #1
 800a710:	d103      	bne.n	800a71a <_raise_r+0x42>
 800a712:	2316      	movs	r3, #22
 800a714:	6003      	str	r3, [r0, #0]
 800a716:	2001      	movs	r0, #1
 800a718:	e7e7      	b.n	800a6ea <_raise_r+0x12>
 800a71a:	2400      	movs	r4, #0
 800a71c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a720:	4628      	mov	r0, r5
 800a722:	4798      	blx	r3
 800a724:	2000      	movs	r0, #0
 800a726:	e7e0      	b.n	800a6ea <_raise_r+0x12>

0800a728 <raise>:
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <raise+0xc>)
 800a72a:	4601      	mov	r1, r0
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	f7ff bfd3 	b.w	800a6d8 <_raise_r>
 800a732:	bf00      	nop
 800a734:	20000c5c 	.word	0x20000c5c

0800a738 <_kill_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d07      	ldr	r5, [pc, #28]	; (800a758 <_kill_r+0x20>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	4611      	mov	r1, r2
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f7f7 faa1 	bl	8001c8c <_kill>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d102      	bne.n	800a754 <_kill_r+0x1c>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	b103      	cbz	r3, 800a754 <_kill_r+0x1c>
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	bd38      	pop	{r3, r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	20001870 	.word	0x20001870

0800a75c <_getpid_r>:
 800a75c:	f7f7 ba94 	b.w	8001c88 <_getpid>

0800a760 <__swhatbuf_r>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	460c      	mov	r4, r1
 800a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a768:	2900      	cmp	r1, #0
 800a76a:	b096      	sub	sp, #88	; 0x58
 800a76c:	4615      	mov	r5, r2
 800a76e:	461e      	mov	r6, r3
 800a770:	da0d      	bge.n	800a78e <__swhatbuf_r+0x2e>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a778:	f04f 0100 	mov.w	r1, #0
 800a77c:	bf0c      	ite	eq
 800a77e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a782:	2340      	movne	r3, #64	; 0x40
 800a784:	2000      	movs	r0, #0
 800a786:	6031      	str	r1, [r6, #0]
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	b016      	add	sp, #88	; 0x58
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	466a      	mov	r2, sp
 800a790:	f000 f848 	bl	800a824 <_fstat_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	dbec      	blt.n	800a772 <__swhatbuf_r+0x12>
 800a798:	9901      	ldr	r1, [sp, #4]
 800a79a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a79e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7a2:	4259      	negs	r1, r3
 800a7a4:	4159      	adcs	r1, r3
 800a7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7aa:	e7eb      	b.n	800a784 <__swhatbuf_r+0x24>

0800a7ac <__smakebuf_r>:
 800a7ac:	898b      	ldrh	r3, [r1, #12]
 800a7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b0:	079d      	lsls	r5, r3, #30
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	d507      	bpl.n	800a7c8 <__smakebuf_r+0x1c>
 800a7b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	6163      	str	r3, [r4, #20]
 800a7c4:	b002      	add	sp, #8
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	ab01      	add	r3, sp, #4
 800a7ca:	466a      	mov	r2, sp
 800a7cc:	f7ff ffc8 	bl	800a760 <__swhatbuf_r>
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7fd f9e7 	bl	8007ba8 <_malloc_r>
 800a7da:	b948      	cbnz	r0, 800a7f0 <__smakebuf_r+0x44>
 800a7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e0:	059a      	lsls	r2, r3, #22
 800a7e2:	d4ef      	bmi.n	800a7c4 <__smakebuf_r+0x18>
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	f043 0302 	orr.w	r3, r3, #2
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e7e3      	b.n	800a7b8 <__smakebuf_r+0xc>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	6020      	str	r0, [r4, #0]
 800a7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	6163      	str	r3, [r4, #20]
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	6120      	str	r0, [r4, #16]
 800a802:	b15b      	cbz	r3, 800a81c <__smakebuf_r+0x70>
 800a804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f81d 	bl	800a848 <_isatty_r>
 800a80e:	b128      	cbz	r0, 800a81c <__smakebuf_r+0x70>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	431d      	orrs	r5, r3
 800a820:	81a5      	strh	r5, [r4, #12]
 800a822:	e7cf      	b.n	800a7c4 <__smakebuf_r+0x18>

0800a824 <_fstat_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	; (800a844 <_fstat_r+0x20>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	f7f7 fa4a 	bl	8001cca <_fstat>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d102      	bne.n	800a840 <_fstat_r+0x1c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	b103      	cbz	r3, 800a840 <_fstat_r+0x1c>
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop
 800a844:	20001870 	.word	0x20001870

0800a848 <_isatty_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4d06      	ldr	r5, [pc, #24]	; (800a864 <_isatty_r+0x1c>)
 800a84c:	2300      	movs	r3, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	602b      	str	r3, [r5, #0]
 800a854:	f7f7 fa3e 	bl	8001cd4 <_isatty>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_isatty_r+0x1a>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_isatty_r+0x1a>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20001870 	.word	0x20001870

0800a868 <expf>:
 800a868:	b508      	push	{r3, lr}
 800a86a:	ed2d 8b02 	vpush	{d8}
 800a86e:	eef0 8a40 	vmov.f32	s17, s0
 800a872:	f000 f9ed 	bl	800ac50 <__ieee754_expf>
 800a876:	eeb0 8a40 	vmov.f32	s16, s0
 800a87a:	eeb0 0a68 	vmov.f32	s0, s17
 800a87e:	f000 f899 	bl	800a9b4 <finitef>
 800a882:	b160      	cbz	r0, 800a89e <expf+0x36>
 800a884:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a8c4 <expf+0x5c>
 800a888:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a890:	dd0a      	ble.n	800a8a8 <expf+0x40>
 800a892:	f7fe f833 	bl	80088fc <__errno>
 800a896:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a8c8 <expf+0x60>
 800a89a:	2322      	movs	r3, #34	; 0x22
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	eeb0 0a48 	vmov.f32	s0, s16
 800a8a2:	ecbd 8b02 	vpop	{d8}
 800a8a6:	bd08      	pop	{r3, pc}
 800a8a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a8cc <expf+0x64>
 800a8ac:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b4:	d5f3      	bpl.n	800a89e <expf+0x36>
 800a8b6:	f7fe f821 	bl	80088fc <__errno>
 800a8ba:	2322      	movs	r3, #34	; 0x22
 800a8bc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a8d0 <expf+0x68>
 800a8c0:	6003      	str	r3, [r0, #0]
 800a8c2:	e7ec      	b.n	800a89e <expf+0x36>
 800a8c4:	42b17217 	.word	0x42b17217
 800a8c8:	7f800000 	.word	0x7f800000
 800a8cc:	c2cff1b5 	.word	0xc2cff1b5
 800a8d0:	00000000 	.word	0x00000000

0800a8d4 <fabsf>:
 800a8d4:	ee10 3a10 	vmov	r3, s0
 800a8d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8dc:	ee00 3a10 	vmov	s0, r3
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <tanhf>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	ee10 5a10 	vmov	r5, s0
 800a8ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a8f2:	ed2d 8b02 	vpush	{d8}
 800a8f6:	db0f      	blt.n	800a918 <tanhf+0x34>
 800a8f8:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <tanhf+0xc0>)
 800a8fa:	ed93 6a00 	vldr	s12, [r3]
 800a8fe:	edd3 6a00 	vldr	s13, [r3]
 800a902:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800a906:	2d00      	cmp	r5, #0
 800a908:	bfac      	ite	ge
 800a90a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800a90e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800a912:	ecbd 8b02 	vpop	{d8}
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	4a23      	ldr	r2, [pc, #140]	; (800a9a8 <tanhf+0xc4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	dc39      	bgt.n	800a992 <tanhf+0xae>
 800a91e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800a922:	da07      	bge.n	800a934 <tanhf+0x50>
 800a924:	4b1f      	ldr	r3, [pc, #124]	; (800a9a4 <tanhf+0xc0>)
 800a926:	edd3 7a00 	vldr	s15, [r3]
 800a92a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a92e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a932:	e7ee      	b.n	800a912 <tanhf+0x2e>
 800a934:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a938:	4c1c      	ldr	r4, [pc, #112]	; (800a9ac <tanhf+0xc8>)
 800a93a:	db19      	blt.n	800a970 <tanhf+0x8c>
 800a93c:	f7ff ffca 	bl	800a8d4 <fabsf>
 800a940:	edd4 7a00 	vldr	s15, [r4]
 800a944:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a948:	f000 f842 	bl	800a9d0 <expm1f>
 800a94c:	4b15      	ldr	r3, [pc, #84]	; (800a9a4 <tanhf+0xc0>)
 800a94e:	edd3 7a00 	vldr	s15, [r3]
 800a952:	edd4 6a00 	vldr	s13, [r4]
 800a956:	ed94 7a00 	vldr	s14, [r4]
 800a95a:	ee37 0a00 	vadd.f32	s0, s14, s0
 800a95e:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800a962:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a966:	2d00      	cmp	r5, #0
 800a968:	bfb8      	it	lt
 800a96a:	eeb1 0a40 	vneglt.f32	s0, s0
 800a96e:	e7d0      	b.n	800a912 <tanhf+0x2e>
 800a970:	ed94 8a00 	vldr	s16, [r4]
 800a974:	f7ff ffae 	bl	800a8d4 <fabsf>
 800a978:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800a97c:	f000 f828 	bl	800a9d0 <expm1f>
 800a980:	edd4 7a00 	vldr	s15, [r4]
 800a984:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a988:	eeb1 7a40 	vneg.f32	s14, s0
 800a98c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a990:	e7e9      	b.n	800a966 <tanhf+0x82>
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <tanhf+0xc0>)
 800a994:	ed93 0a00 	vldr	s0, [r3]
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <tanhf+0xcc>)
 800a99a:	edd3 7a00 	vldr	s15, [r3]
 800a99e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9a2:	e7e0      	b.n	800a966 <tanhf+0x82>
 800a9a4:	20000dcc 	.word	0x20000dcc
 800a9a8:	41afffff 	.word	0x41afffff
 800a9ac:	20000dd4 	.word	0x20000dd4
 800a9b0:	20000dd0 	.word	0x20000dd0

0800a9b4 <finitef>:
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a9ba:	9801      	ldr	r0, [sp, #4]
 800a9bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a9c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a9c4:	bfac      	ite	ge
 800a9c6:	2000      	movge	r0, #0
 800a9c8:	2001      	movlt	r0, #1
 800a9ca:	b002      	add	sp, #8
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <expm1f>:
 800a9d0:	ee10 2a10 	vmov	r2, s0
 800a9d4:	497e      	ldr	r1, [pc, #504]	; (800abd0 <expm1f+0x200>)
 800a9d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a9da:	428b      	cmp	r3, r1
 800a9dc:	d921      	bls.n	800aa22 <expm1f+0x52>
 800a9de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9e2:	d902      	bls.n	800a9ea <expm1f+0x1a>
 800a9e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a9e8:	4770      	bx	lr
 800a9ea:	d106      	bne.n	800a9fa <expm1f+0x2a>
 800a9ec:	2a00      	cmp	r2, #0
 800a9ee:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a9f2:	bfb8      	it	lt
 800a9f4:	eeb0 0a67 	vmovlt.f32	s0, s15
 800a9f8:	4770      	bx	lr
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	db05      	blt.n	800aa0a <expm1f+0x3a>
 800a9fe:	4975      	ldr	r1, [pc, #468]	; (800abd4 <expm1f+0x204>)
 800aa00:	428b      	cmp	r3, r1
 800aa02:	d95c      	bls.n	800aabe <expm1f+0xee>
 800aa04:	2000      	movs	r0, #0
 800aa06:	f000 b91d 	b.w	800ac44 <__math_oflowf>
 800aa0a:	eddf 7a73 	vldr	s15, [pc, #460]	; 800abd8 <expm1f+0x208>
 800aa0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aa12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1a:	d550      	bpl.n	800aabe <expm1f+0xee>
 800aa1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800aa20:	4770      	bx	lr
 800aa22:	496e      	ldr	r1, [pc, #440]	; (800abdc <expm1f+0x20c>)
 800aa24:	428b      	cmp	r3, r1
 800aa26:	d967      	bls.n	800aaf8 <expm1f+0x128>
 800aa28:	496d      	ldr	r1, [pc, #436]	; (800abe0 <expm1f+0x210>)
 800aa2a:	428b      	cmp	r3, r1
 800aa2c:	d847      	bhi.n	800aabe <expm1f+0xee>
 800aa2e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800abe4 <expm1f+0x214>
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	bfa7      	ittee	ge
 800aa36:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800aa3a:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 800abe8 <expm1f+0x218>
 800aa3e:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 800abec <expm1f+0x21c>
 800aa42:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800aa46:	bfac      	ite	ge
 800aa48:	2301      	movge	r3, #1
 800aa4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa4e:	ee37 0a66 	vsub.f32	s0, s14, s13
 800aa52:	ee77 7a40 	vsub.f32	s15, s14, s0
 800aa56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa5a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800aa5e:	ee20 4a25 	vmul.f32	s8, s0, s11
 800aa62:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800abf0 <expm1f+0x220>
 800aa66:	eddf 6a63 	vldr	s13, [pc, #396]	; 800abf4 <expm1f+0x224>
 800aa6a:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800abf8 <expm1f+0x228>
 800aa6e:	ee20 7a04 	vmul.f32	s14, s0, s8
 800aa72:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800aa76:	eee7 6a06 	vfma.f32	s13, s14, s12
 800aa7a:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800abfc <expm1f+0x22c>
 800aa7e:	eea6 6a87 	vfma.f32	s12, s13, s14
 800aa82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac00 <expm1f+0x230>
 800aa86:	eee6 6a07 	vfma.f32	s13, s12, s14
 800aa8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa8e:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aa92:	eef0 6a46 	vmov.f32	s13, s12
 800aa96:	eee5 6a07 	vfma.f32	s13, s10, s14
 800aa9a:	eee4 4a66 	vfms.f32	s9, s8, s13
 800aa9e:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800aaa2:	eea0 4a64 	vfms.f32	s8, s0, s9
 800aaa6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800aaaa:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800aaae:	ee66 6a87 	vmul.f32	s13, s13, s14
 800aab2:	bb7b      	cbnz	r3, 800ab14 <expm1f+0x144>
 800aab4:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800aab8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aabc:	4770      	bx	lr
 800aabe:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aac8:	bfb8      	it	lt
 800aaca:	eef0 7a47 	vmovlt.f32	s15, s14
 800aace:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ac04 <expm1f+0x234>
 800aad2:	ee40 7a07 	vmla.f32	s15, s0, s14
 800aad6:	eeb0 7a40 	vmov.f32	s14, s0
 800aada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aade:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aae2:	ee17 3a90 	vmov	r3, s15
 800aae6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800abe4 <expm1f+0x214>
 800aaea:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800aaee:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800abe8 <expm1f+0x218>
 800aaf2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800aaf6:	e7aa      	b.n	800aa4e <expm1f+0x7e>
 800aaf8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800aafc:	d208      	bcs.n	800ab10 <expm1f+0x140>
 800aafe:	eddf 7a42 	vldr	s15, [pc, #264]	; 800ac08 <expm1f+0x238>
 800ab02:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ab06:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ab0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab0e:	4770      	bx	lr
 800ab10:	2300      	movs	r3, #0
 800ab12:	e7a2      	b.n	800aa5a <expm1f+0x8a>
 800ab14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ab1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab22:	d106      	bne.n	800ab32 <expm1f+0x162>
 800ab24:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ab2c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ab30:	4770      	bx	lr
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d118      	bne.n	800ab68 <expm1f+0x198>
 800ab36:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ab3a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ab3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab42:	bf5b      	ittet	pl
 800ab44:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800ab48:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800ab4c:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800ab50:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800ab54:	bf43      	ittte	mi
 800ab56:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800ab5a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800ab5e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800ab62:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ab66:	4770      	bx	lr
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	2a39      	cmp	r2, #57	; 0x39
 800ab6c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800ab70:	d90b      	bls.n	800ab8a <expm1f+0x1ba>
 800ab72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab76:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ab7a:	ee17 3a90 	vmov	r3, s15
 800ab7e:	4419      	add	r1, r3
 800ab80:	ee07 1a90 	vmov	s15, r1
 800ab84:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800ab88:	4770      	bx	lr
 800ab8a:	2b16      	cmp	r3, #22
 800ab8c:	dc11      	bgt.n	800abb2 <expm1f+0x1e2>
 800ab8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab92:	fa42 f303 	asr.w	r3, r2, r3
 800ab96:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800ab9a:	ee07 3a10 	vmov	s14, r3
 800ab9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba6:	ee17 3a90 	vmov	r3, s15
 800abaa:	440b      	add	r3, r1
 800abac:	ee00 3a10 	vmov	s0, r3
 800abb0:	4770      	bx	lr
 800abb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800abb6:	05db      	lsls	r3, r3, #23
 800abb8:	ee07 3a10 	vmov	s14, r3
 800abbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abc0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abc4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800abc8:	ee17 3a90 	vmov	r3, s15
 800abcc:	e7ed      	b.n	800abaa <expm1f+0x1da>
 800abce:	bf00      	nop
 800abd0:	4195b843 	.word	0x4195b843
 800abd4:	42b17217 	.word	0x42b17217
 800abd8:	0da24260 	.word	0x0da24260
 800abdc:	3eb17218 	.word	0x3eb17218
 800abe0:	3f851591 	.word	0x3f851591
 800abe4:	3f317180 	.word	0x3f317180
 800abe8:	3717f7d1 	.word	0x3717f7d1
 800abec:	b717f7d1 	.word	0xb717f7d1
 800abf0:	b457edbb 	.word	0xb457edbb
 800abf4:	36867e54 	.word	0x36867e54
 800abf8:	bd088889 	.word	0xbd088889
 800abfc:	b8a670cd 	.word	0xb8a670cd
 800ac00:	3ad00d01 	.word	0x3ad00d01
 800ac04:	3fb8aa3b 	.word	0x3fb8aa3b
 800ac08:	7149f2ca 	.word	0x7149f2ca

0800ac0c <with_errnof>:
 800ac0c:	b513      	push	{r0, r1, r4, lr}
 800ac0e:	4604      	mov	r4, r0
 800ac10:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ac14:	f7fd fe72 	bl	80088fc <__errno>
 800ac18:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ac1c:	6004      	str	r4, [r0, #0]
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd10      	pop	{r4, pc}

0800ac22 <xflowf>:
 800ac22:	b130      	cbz	r0, 800ac32 <xflowf+0x10>
 800ac24:	eef1 7a40 	vneg.f32	s15, s0
 800ac28:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ac2c:	2022      	movs	r0, #34	; 0x22
 800ac2e:	f7ff bfed 	b.w	800ac0c <with_errnof>
 800ac32:	eef0 7a40 	vmov.f32	s15, s0
 800ac36:	e7f7      	b.n	800ac28 <xflowf+0x6>

0800ac38 <__math_uflowf>:
 800ac38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac40 <__math_uflowf+0x8>
 800ac3c:	f7ff bff1 	b.w	800ac22 <xflowf>
 800ac40:	10000000 	.word	0x10000000

0800ac44 <__math_oflowf>:
 800ac44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac4c <__math_oflowf+0x8>
 800ac48:	f7ff bfeb 	b.w	800ac22 <xflowf>
 800ac4c:	70000000 	.word	0x70000000

0800ac50 <__ieee754_expf>:
 800ac50:	ee10 2a10 	vmov	r2, s0
 800ac54:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ac58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac5c:	d902      	bls.n	800ac64 <__ieee754_expf+0x14>
 800ac5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ac62:	4770      	bx	lr
 800ac64:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ac68:	d106      	bne.n	800ac78 <__ieee754_expf+0x28>
 800ac6a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800ada4 <__ieee754_expf+0x154>
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	bf18      	it	ne
 800ac72:	eeb0 0a67 	vmovne.f32	s0, s15
 800ac76:	4770      	bx	lr
 800ac78:	484b      	ldr	r0, [pc, #300]	; (800ada8 <__ieee754_expf+0x158>)
 800ac7a:	4282      	cmp	r2, r0
 800ac7c:	dd02      	ble.n	800ac84 <__ieee754_expf+0x34>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	f7ff bfe0 	b.w	800ac44 <__math_oflowf>
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	da05      	bge.n	800ac94 <__ieee754_expf+0x44>
 800ac88:	4a48      	ldr	r2, [pc, #288]	; (800adac <__ieee754_expf+0x15c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d902      	bls.n	800ac94 <__ieee754_expf+0x44>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	f7ff bfd2 	b.w	800ac38 <__math_uflowf>
 800ac94:	4a46      	ldr	r2, [pc, #280]	; (800adb0 <__ieee754_expf+0x160>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ac9c:	d952      	bls.n	800ad44 <__ieee754_expf+0xf4>
 800ac9e:	4a45      	ldr	r2, [pc, #276]	; (800adb4 <__ieee754_expf+0x164>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800aca6:	d834      	bhi.n	800ad12 <__ieee754_expf+0xc2>
 800aca8:	4b43      	ldr	r3, [pc, #268]	; (800adb8 <__ieee754_expf+0x168>)
 800acaa:	4413      	add	r3, r2
 800acac:	ed93 7a00 	vldr	s14, [r3]
 800acb0:	4b42      	ldr	r3, [pc, #264]	; (800adbc <__ieee754_expf+0x16c>)
 800acb2:	4413      	add	r3, r2
 800acb4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800acb8:	f1c1 0201 	rsb	r2, r1, #1
 800acbc:	edd3 7a00 	vldr	s15, [r3]
 800acc0:	1a52      	subs	r2, r2, r1
 800acc2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800acc6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800acca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800adc0 <__ieee754_expf+0x170>
 800acce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adc4 <__ieee754_expf+0x174>
 800acd2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800acd6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800adc8 <__ieee754_expf+0x178>
 800acda:	eea6 5a86 	vfma.f32	s10, s13, s12
 800acde:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800adcc <__ieee754_expf+0x17c>
 800ace2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ace6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800add0 <__ieee754_expf+0x180>
 800acea:	eea6 5a86 	vfma.f32	s10, s13, s12
 800acee:	eef0 6a40 	vmov.f32	s13, s0
 800acf2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800acf6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800acfa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800acfe:	bb92      	cbnz	r2, 800ad66 <__ieee754_expf+0x116>
 800ad00:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ad04:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ad08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ad0c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800ad10:	4770      	bx	lr
 800ad12:	4b30      	ldr	r3, [pc, #192]	; (800add4 <__ieee754_expf+0x184>)
 800ad14:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800add8 <__ieee754_expf+0x188>
 800ad18:	eddf 6a30 	vldr	s13, [pc, #192]	; 800addc <__ieee754_expf+0x18c>
 800ad1c:	4413      	add	r3, r2
 800ad1e:	edd3 7a00 	vldr	s15, [r3]
 800ad22:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ad26:	eeb0 7a40 	vmov.f32	s14, s0
 800ad2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad2e:	ee17 2a90 	vmov	r2, s15
 800ad32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad36:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ad3a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ade0 <__ieee754_expf+0x190>
 800ad3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad42:	e7be      	b.n	800acc2 <__ieee754_expf+0x72>
 800ad44:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800ad48:	d20b      	bcs.n	800ad62 <__ieee754_expf+0x112>
 800ad4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ade4 <__ieee754_expf+0x194>
 800ad4e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ad52:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ad56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5a:	dd02      	ble.n	800ad62 <__ieee754_expf+0x112>
 800ad5c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800ad60:	4770      	bx	lr
 800ad62:	2200      	movs	r2, #0
 800ad64:	e7af      	b.n	800acc6 <__ieee754_expf+0x76>
 800ad66:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ad6a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800ad6e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ad72:	bfb8      	it	lt
 800ad74:	3264      	addlt	r2, #100	; 0x64
 800ad76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad7e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ad82:	ee17 3a90 	vmov	r3, s15
 800ad86:	bfab      	itete	ge
 800ad88:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ad8c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ad90:	ee00 3a10 	vmovge	s0, r3
 800ad94:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800ade8 <__ieee754_expf+0x198>
 800ad98:	bfbc      	itt	lt
 800ad9a:	ee00 3a10 	vmovlt	s0, r3
 800ad9e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800ada2:	4770      	bx	lr
 800ada4:	00000000 	.word	0x00000000
 800ada8:	42b17217 	.word	0x42b17217
 800adac:	42cff1b5 	.word	0x42cff1b5
 800adb0:	3eb17218 	.word	0x3eb17218
 800adb4:	3f851591 	.word	0x3f851591
 800adb8:	0803de7c 	.word	0x0803de7c
 800adbc:	0803de84 	.word	0x0803de84
 800adc0:	3331bb4c 	.word	0x3331bb4c
 800adc4:	b5ddea0e 	.word	0xb5ddea0e
 800adc8:	388ab355 	.word	0x388ab355
 800adcc:	bb360b61 	.word	0xbb360b61
 800add0:	3e2aaaab 	.word	0x3e2aaaab
 800add4:	0803de74 	.word	0x0803de74
 800add8:	3fb8aa3b 	.word	0x3fb8aa3b
 800addc:	3f317180 	.word	0x3f317180
 800ade0:	3717f7d1 	.word	0x3717f7d1
 800ade4:	7149f2ca 	.word	0x7149f2ca
 800ade8:	0d800000 	.word	0x0d800000

0800adec <_init>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr

0800adf8 <_fini>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr
