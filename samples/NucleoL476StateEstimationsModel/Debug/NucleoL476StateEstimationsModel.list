
NucleoL476StateEstimationsModel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bc34  0800cd20  0800cd20  0001cd20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018954  08018954  0003074c  2**0
                  CONTENTS
  4 .ARM          00000008  08018954  08018954  00028954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801895c  0801895c  0003074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801895c  0801895c  0002895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018960  08018960  00028960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000074c  20000000  08018964  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  20000760  080190b0  00030760  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200013c8  080190b0  000313c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e957  00000000  00000000  0003080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005374  00000000  00000000  0004f166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  000544e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c5  00000000  00000000  00055418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c6e7  00000000  00000000  000564dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd69  00000000  00000000  00082bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100f19  00000000  00000000  0009e92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b84  00000000  00000000  0019f848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a387  00000000  00000000  001a33cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001ad753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccec 	.word	0x0800ccec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800ccec 	.word	0x0800ccec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b98e 	b.w	80010f8 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f824 	bl	8000e30 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_d2ulz>:
 8000df4:	b5d0      	push	{r4, r6, r7, lr}
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__aeabi_d2ulz+0x34>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4606      	mov	r6, r0
 8000dfc:	460f      	mov	r7, r1
 8000dfe:	f7ff fbfb 	bl	80005f8 <__aeabi_dmul>
 8000e02:	f000 f97b 	bl	80010fc <__aeabi_d2uiz>
 8000e06:	4604      	mov	r4, r0
 8000e08:	f7ff fb7c 	bl	8000504 <__aeabi_ui2d>
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <__aeabi_d2ulz+0x38>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f7ff fbf2 	bl	80005f8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4630      	mov	r0, r6
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	f7ff fa34 	bl	8000288 <__aeabi_dsub>
 8000e20:	f000 f96c 	bl	80010fc <__aeabi_d2uiz>
 8000e24:	4621      	mov	r1, r4
 8000e26:	bdd0      	pop	{r4, r6, r7, pc}
 8000e28:	3df00000 	.word	0x3df00000
 8000e2c:	41f00000 	.word	0x41f00000

08000e30 <__udivmoddi4>:
 8000e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e34:	9e08      	ldr	r6, [sp, #32]
 8000e36:	460d      	mov	r5, r1
 8000e38:	4604      	mov	r4, r0
 8000e3a:	460f      	mov	r7, r1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d14a      	bne.n	8000ed6 <__udivmoddi4+0xa6>
 8000e40:	428a      	cmp	r2, r1
 8000e42:	4694      	mov	ip, r2
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0xe2>
 8000e46:	fab2 f382 	clz	r3, r2
 8000e4a:	b143      	cbz	r3, 8000e5e <__udivmoddi4+0x2e>
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	f1c3 0220 	rsb	r2, r3, #32
 8000e54:	409f      	lsls	r7, r3
 8000e56:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	409c      	lsls	r4, r3
 8000e5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e62:	fa1f f58c 	uxth.w	r5, ip
 8000e66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e6a:	0c22      	lsrs	r2, r4, #16
 8000e6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e74:	fb01 f005 	mul.w	r0, r1, r5
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x62>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e84:	f080 811c 	bcs.w	80010c0 <__udivmoddi4+0x290>
 8000e88:	4290      	cmp	r0, r2
 8000e8a:	f240 8119 	bls.w	80010c0 <__udivmoddi4+0x290>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a12      	subs	r2, r2, r0
 8000e94:	b2a4      	uxth	r4, r4
 8000e96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea2:	fb00 f505 	mul.w	r5, r0, r5
 8000ea6:	42a5      	cmp	r5, r4
 8000ea8:	d90a      	bls.n	8000ec0 <__udivmoddi4+0x90>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb2:	f080 8107 	bcs.w	80010c4 <__udivmoddi4+0x294>
 8000eb6:	42a5      	cmp	r5, r4
 8000eb8:	f240 8104 	bls.w	80010c4 <__udivmoddi4+0x294>
 8000ebc:	4464      	add	r4, ip
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	b11e      	cbz	r6, 8000ed2 <__udivmoddi4+0xa2>
 8000eca:	40dc      	lsrs	r4, r3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e9c6 4300 	strd	r4, r3, [r6]
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0xbc>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f000 80ed 	beq.w	80010ba <__udivmoddi4+0x28a>
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	fab3 f183 	clz	r1, r3
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d149      	bne.n	8000f88 <__udivmoddi4+0x158>
 8000ef4:	42ab      	cmp	r3, r5
 8000ef6:	d302      	bcc.n	8000efe <__udivmoddi4+0xce>
 8000ef8:	4282      	cmp	r2, r0
 8000efa:	f200 80f8 	bhi.w	80010ee <__udivmoddi4+0x2be>
 8000efe:	1a84      	subs	r4, r0, r2
 8000f00:	eb65 0203 	sbc.w	r2, r5, r3
 8000f04:	2001      	movs	r0, #1
 8000f06:	4617      	mov	r7, r2
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d0e2      	beq.n	8000ed2 <__udivmoddi4+0xa2>
 8000f0c:	e9c6 4700 	strd	r4, r7, [r6]
 8000f10:	e7df      	b.n	8000ed2 <__udivmoddi4+0xa2>
 8000f12:	b902      	cbnz	r2, 8000f16 <__udivmoddi4+0xe6>
 8000f14:	deff      	udf	#255	; 0xff
 8000f16:	fab2 f382 	clz	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x210>
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f26:	fa1f fe8c 	uxth.w	lr, ip
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f30:	fb07 2015 	mls	r0, r7, r5, r2
 8000f34:	0c22      	lsrs	r2, r4, #16
 8000f36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f3a:	fb0e f005 	mul.w	r0, lr, r5
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x124>
 8000f42:	eb1c 0202 	adds.w	r2, ip, r2
 8000f46:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4a:	d202      	bcs.n	8000f52 <__udivmoddi4+0x122>
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	f200 80cb 	bhi.w	80010e8 <__udivmoddi4+0x2b8>
 8000f52:	4645      	mov	r5, r8
 8000f54:	1a12      	subs	r2, r2, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000f60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f64:	fb0e fe00 	mul.w	lr, lr, r0
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x14e>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f74:	d202      	bcs.n	8000f7c <__udivmoddi4+0x14c>
 8000f76:	45a6      	cmp	lr, r4
 8000f78:	f200 80bb 	bhi.w	80010f2 <__udivmoddi4+0x2c2>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	eba4 040e 	sub.w	r4, r4, lr
 8000f82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f86:	e79f      	b.n	8000ec8 <__udivmoddi4+0x98>
 8000f88:	f1c1 0720 	rsb	r7, r1, #32
 8000f8c:	408b      	lsls	r3, r1
 8000f8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f96:	fa05 f401 	lsl.w	r4, r5, r1
 8000f9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f9e:	40fd      	lsrs	r5, r7
 8000fa0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000faa:	fa1f fe8c 	uxth.w	lr, ip
 8000fae:	fb09 5518 	mls	r5, r9, r8, r5
 8000fb2:	0c1c      	lsrs	r4, r3, #16
 8000fb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fb8:	fb08 f50e 	mul.w	r5, r8, lr
 8000fbc:	42a5      	cmp	r5, r4
 8000fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000fc2:	fa00 f001 	lsl.w	r0, r0, r1
 8000fc6:	d90b      	bls.n	8000fe0 <__udivmoddi4+0x1b0>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fd0:	f080 8088 	bcs.w	80010e4 <__udivmoddi4+0x2b4>
 8000fd4:	42a5      	cmp	r5, r4
 8000fd6:	f240 8085 	bls.w	80010e4 <__udivmoddi4+0x2b4>
 8000fda:	f1a8 0802 	sub.w	r8, r8, #2
 8000fde:	4464      	add	r4, ip
 8000fe0:	1b64      	subs	r4, r4, r5
 8000fe2:	b29d      	uxth	r5, r3
 8000fe4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fe8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ff0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ff4:	45a6      	cmp	lr, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x1da>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f103 35ff 	add.w	r5, r3, #4294967295
 8001000:	d26c      	bcs.n	80010dc <__udivmoddi4+0x2ac>
 8001002:	45a6      	cmp	lr, r4
 8001004:	d96a      	bls.n	80010dc <__udivmoddi4+0x2ac>
 8001006:	3b02      	subs	r3, #2
 8001008:	4464      	add	r4, ip
 800100a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800100e:	fba3 9502 	umull	r9, r5, r3, r2
 8001012:	eba4 040e 	sub.w	r4, r4, lr
 8001016:	42ac      	cmp	r4, r5
 8001018:	46c8      	mov	r8, r9
 800101a:	46ae      	mov	lr, r5
 800101c:	d356      	bcc.n	80010cc <__udivmoddi4+0x29c>
 800101e:	d053      	beq.n	80010c8 <__udivmoddi4+0x298>
 8001020:	b156      	cbz	r6, 8001038 <__udivmoddi4+0x208>
 8001022:	ebb0 0208 	subs.w	r2, r0, r8
 8001026:	eb64 040e 	sbc.w	r4, r4, lr
 800102a:	fa04 f707 	lsl.w	r7, r4, r7
 800102e:	40ca      	lsrs	r2, r1
 8001030:	40cc      	lsrs	r4, r1
 8001032:	4317      	orrs	r7, r2
 8001034:	e9c6 7400 	strd	r7, r4, [r6]
 8001038:	4618      	mov	r0, r3
 800103a:	2100      	movs	r1, #0
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	f1c3 0120 	rsb	r1, r3, #32
 8001044:	fa02 fc03 	lsl.w	ip, r2, r3
 8001048:	fa20 f201 	lsr.w	r2, r0, r1
 800104c:	fa25 f101 	lsr.w	r1, r5, r1
 8001050:	409d      	lsls	r5, r3
 8001052:	432a      	orrs	r2, r5
 8001054:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001058:	fa1f fe8c 	uxth.w	lr, ip
 800105c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001060:	fb07 1510 	mls	r5, r7, r0, r1
 8001064:	0c11      	lsrs	r1, r2, #16
 8001066:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800106a:	fb00 f50e 	mul.w	r5, r0, lr
 800106e:	428d      	cmp	r5, r1
 8001070:	fa04 f403 	lsl.w	r4, r4, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x258>
 8001076:	eb1c 0101 	adds.w	r1, ip, r1
 800107a:	f100 38ff 	add.w	r8, r0, #4294967295
 800107e:	d22f      	bcs.n	80010e0 <__udivmoddi4+0x2b0>
 8001080:	428d      	cmp	r5, r1
 8001082:	d92d      	bls.n	80010e0 <__udivmoddi4+0x2b0>
 8001084:	3802      	subs	r0, #2
 8001086:	4461      	add	r1, ip
 8001088:	1b49      	subs	r1, r1, r5
 800108a:	b292      	uxth	r2, r2
 800108c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001090:	fb07 1115 	mls	r1, r7, r5, r1
 8001094:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001098:	fb05 f10e 	mul.w	r1, r5, lr
 800109c:	4291      	cmp	r1, r2
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x282>
 80010a0:	eb1c 0202 	adds.w	r2, ip, r2
 80010a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80010a8:	d216      	bcs.n	80010d8 <__udivmoddi4+0x2a8>
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d914      	bls.n	80010d8 <__udivmoddi4+0x2a8>
 80010ae:	3d02      	subs	r5, #2
 80010b0:	4462      	add	r2, ip
 80010b2:	1a52      	subs	r2, r2, r1
 80010b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010b8:	e738      	b.n	8000f2c <__udivmoddi4+0xfc>
 80010ba:	4631      	mov	r1, r6
 80010bc:	4630      	mov	r0, r6
 80010be:	e708      	b.n	8000ed2 <__udivmoddi4+0xa2>
 80010c0:	4639      	mov	r1, r7
 80010c2:	e6e6      	b.n	8000e92 <__udivmoddi4+0x62>
 80010c4:	4610      	mov	r0, r2
 80010c6:	e6fb      	b.n	8000ec0 <__udivmoddi4+0x90>
 80010c8:	4548      	cmp	r0, r9
 80010ca:	d2a9      	bcs.n	8001020 <__udivmoddi4+0x1f0>
 80010cc:	ebb9 0802 	subs.w	r8, r9, r2
 80010d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010d4:	3b01      	subs	r3, #1
 80010d6:	e7a3      	b.n	8001020 <__udivmoddi4+0x1f0>
 80010d8:	4645      	mov	r5, r8
 80010da:	e7ea      	b.n	80010b2 <__udivmoddi4+0x282>
 80010dc:	462b      	mov	r3, r5
 80010de:	e794      	b.n	800100a <__udivmoddi4+0x1da>
 80010e0:	4640      	mov	r0, r8
 80010e2:	e7d1      	b.n	8001088 <__udivmoddi4+0x258>
 80010e4:	46d0      	mov	r8, sl
 80010e6:	e77b      	b.n	8000fe0 <__udivmoddi4+0x1b0>
 80010e8:	3d02      	subs	r5, #2
 80010ea:	4462      	add	r2, ip
 80010ec:	e732      	b.n	8000f54 <__udivmoddi4+0x124>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e70a      	b.n	8000f08 <__udivmoddi4+0xd8>
 80010f2:	4464      	add	r4, ip
 80010f4:	3802      	subs	r0, #2
 80010f6:	e742      	b.n	8000f7e <__udivmoddi4+0x14e>

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_d2uiz>:
 80010fc:	004a      	lsls	r2, r1, #1
 80010fe:	d211      	bcs.n	8001124 <__aeabi_d2uiz+0x28>
 8001100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001104:	d211      	bcs.n	800112a <__aeabi_d2uiz+0x2e>
 8001106:	d50d      	bpl.n	8001124 <__aeabi_d2uiz+0x28>
 8001108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800110c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001110:	d40e      	bmi.n	8001130 <__aeabi_d2uiz+0x34>
 8001112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800111e:	fa23 f002 	lsr.w	r0, r3, r2
 8001122:	4770      	bx	lr
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	4770      	bx	lr
 800112a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800112e:	d102      	bne.n	8001136 <__aeabi_d2uiz+0x3a>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b500      	push	{lr}
 800113e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001140:	2244      	movs	r2, #68	; 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	a805      	add	r0, sp, #20
 8001146:	f009 fdee 	bl	800ad26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	2214      	movs	r2, #20
 800114c:	2100      	movs	r1, #0
 800114e:	4668      	mov	r0, sp
 8001150:	f009 fde9 	bl	800ad26 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001154:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001158:	f000 fbcc 	bl	80018f4 <HAL_PWREx_ControlVoltageScaling>
 800115c:	b108      	cbz	r0, 8001162 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001162:	2210      	movs	r2, #16
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001168:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800116e:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001172:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001176:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800117e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001182:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001184:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f000 fc7b 	bl	8001a80 <HAL_RCC_OscConfig>
 800118a:	b108      	cbz	r0, 8001190 <SystemClock_Config+0x54>
 800118c:	b672      	cpsid	i
  while (1)
 800118e:	e7fe      	b.n	800118e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001190:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	220f      	movs	r2, #15
 8001196:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119a:	2104      	movs	r1, #4
 800119c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a2:	f000 feed 	bl	8001f80 <HAL_RCC_ClockConfig>
 80011a6:	b108      	cbz	r0, 80011ac <SystemClock_Config+0x70>
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <SystemClock_Config+0x6e>
}
 80011ac:	b017      	add	sp, #92	; 0x5c
 80011ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011b4 <main>:
{
 80011b4:	b500      	push	{lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80011b8:	f000 f9aa 	bl	8001510 <HAL_Init>
  SystemClock_Config();
 80011bc:	f7ff ffbe 	bl	800113c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	2214      	movs	r2, #20
 80011c2:	2100      	movs	r1, #0
 80011c4:	eb0d 0002 	add.w	r0, sp, r2
 80011c8:	f009 fdad 	bl	800ad26 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <main+0xc0>)
 80011ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80011d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d8:	f002 0204 	and.w	r2, r2, #4
 80011dc:	9201      	str	r2, [sp, #4]
 80011de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011ee:	9202      	str	r2, [sp, #8]
 80011f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80011fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fc:	f002 0201 	and.w	r2, r2, #1
 8001200:	9203      	str	r2, [sp, #12]
 8001202:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001206:	f042 0202 	orr.w	r2, r2, #2
 800120a:	64da      	str	r2, [r3, #76]	; 0x4c
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2120      	movs	r1, #32
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001220:	f000 fb5a 	bl	80018d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001228:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	4812      	ldr	r0, [pc, #72]	; (8001278 <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001230:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001232:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f000 fa70 	bl	800171c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800124c:	f000 fa66 	bl	800171c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <main+0xc8>)
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <main+0xcc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001254:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001256:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 800125a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800125c:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800125e:	f000 f9fd 	bl	800165c <HAL_CRC_Init>
 8001262:	b108      	cbz	r0, 8001268 <main+0xb4>
 8001264:	b672      	cpsid	i
  while (1)
 8001266:	e7fe      	b.n	8001266 <main+0xb2>
  MX_X_CUBE_AI_Init();
 8001268:	f003 f9c0 	bl	80045ec <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 800126c:	f003 f9c5 	bl	80045fa <MX_X_CUBE_AI_Process>
  while (1)
 8001270:	e7fc      	b.n	800126c <main+0xb8>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800
 800127c:	2000077c 	.word	0x2000077c
 8001280:	40023000 	.word	0x40023000

08001284 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x34>)
{
 8001288:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800128a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800128e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001296:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	f001 fd46 	bl	8002d36 <HAL_UART_Init>
 80012aa:	b108      	cbz	r0, 80012b0 <MX_USART2_UART_Init+0x2c>
 80012ac:	b672      	cpsid	i
  while (1)
 80012ae:	e7fe      	b.n	80012ae <MX_USART2_UART_Init+0x2a>
}
 80012b0:	bd08      	pop	{r3, pc}
 80012b2:	bf00      	nop
 80012b4:	200007a0 	.word	0x200007a0
 80012b8:	40004400 	.word	0x40004400

080012bc <Error_Handler>:
 80012bc:	b672      	cpsid	i
  while (1)
 80012be:	e7fe      	b.n	80012be <Error_Handler+0x2>

080012c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x2c>)
 80012c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60
 80012ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80012cc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	f002 0201 	and.w	r2, r2, #1
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012dc:	659a      	str	r2, [r3, #88]	; 0x58
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	b002      	add	sp, #8
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80012f0:	6802      	ldr	r2, [r0, #0]
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_CRC_MspInit+0x24>)
 80012f4:	429a      	cmp	r2, r3
{
 80012f6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80012f8:	d10a      	bne.n	8001310 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012fa:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80012fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
 8001306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001310:	b002      	add	sp, #8
 8001312:	4770      	bx	lr
 8001314:	40023000 	.word	0x40023000

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	b0aa      	sub	sp, #168	; 0xa8
 800131c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	2214      	movs	r2, #20
 8001320:	2100      	movs	r1, #0
 8001322:	a803      	add	r0, sp, #12
 8001324:	f009 fcff 	bl	800ad26 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	a808      	add	r0, sp, #32
 800132e:	f009 fcfa 	bl	800ad26 <memset>
  if(huart->Instance==USART2)
 8001332:	6822      	ldr	r2, [r4, #0]
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_UART_MspInit+0x94>)
 8001336:	429a      	cmp	r2, r3
 8001338:	d135      	bne.n	80013a6 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800133a:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800133e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f000 fff4 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8001344:	b108      	cbz	r0, 800134a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001346:	f7ff ffb9 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0x98>)
 800134c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800134e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001352:	659a      	str	r2, [r3, #88]	; 0x58
 8001354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001356:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	64da      	str	r2, [r3, #76]	; 0x4c
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2602      	movs	r6, #2
 8001372:	2304      	movs	r3, #4
 8001374:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2503      	movs	r5, #3
 800137a:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137c:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800137e:	a903      	add	r1, sp, #12
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001388:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800138a:	f000 f9c7 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 800138e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001394:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f000 f9bb 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a6:	b02a      	add	sp, #168	; 0xa8
 80013a8:	bd70      	pop	{r4, r5, r6, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000

080013b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler>

080013b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler>

080013b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler>

080013ba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler>

080013bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler>

080013be <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 b8ba 	b.w	800153c <HAL_IncTick>

080013c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80013c8:	2001      	movs	r0, #1
 80013ca:	4770      	bx	lr

080013cc <_kill>:

int _kill(int pid, int sig)
{
 80013cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ce:	f009 fd1f 	bl	800ae10 <__errno>
 80013d2:	2316      	movs	r3, #22
 80013d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	bd08      	pop	{r3, pc}

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80013de:	f009 fd17 	bl	800ae10 <__errno>
 80013e2:	2316      	movs	r3, #22
 80013e4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80013e6:	e7fe      	b.n	80013e6 <_exit+0xa>

080013e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	460d      	mov	r5, r1
 80013ec:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	460e      	mov	r6, r1
 80013f0:	1b73      	subs	r3, r6, r5
 80013f2:	429c      	cmp	r4, r3
 80013f4:	dc01      	bgt.n	80013fa <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80013f6:	4620      	mov	r0, r4
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	e7f5      	b.n	80013f0 <_read+0x8>

08001404 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr

08001414 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001414:	2001      	movs	r0, #1
 8001416:	4770      	bx	lr

08001418 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001418:	2000      	movs	r0, #0
 800141a:	4770      	bx	lr

0800141c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <_sbrk+0x30>)
 800141e:	6811      	ldr	r1, [r2, #0]
{
 8001420:	b510      	push	{r4, lr}
 8001422:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001424:	b909      	cbnz	r1, 800142a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <_sbrk+0x34>)
 8001428:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	4909      	ldr	r1, [pc, #36]	; (8001454 <_sbrk+0x38>)
 800142e:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <_sbrk+0x3c>)
 8001430:	4403      	add	r3, r0
 8001432:	1b09      	subs	r1, r1, r4
 8001434:	428b      	cmp	r3, r1
 8001436:	d906      	bls.n	8001446 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001438:	f009 fcea 	bl	800ae10 <__errno>
 800143c:	230c      	movs	r3, #12
 800143e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001444:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001446:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001448:	e7fc      	b.n	8001444 <_sbrk+0x28>
 800144a:	bf00      	nop
 800144c:	20000828 	.word	0x20000828
 8001450:	200013c8 	.word	0x200013c8
 8001454:	20018000 	.word	0x20018000
 8001458:	00000800 	.word	0x00000800

0800145c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <SystemInit+0x10>)
 800145e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001462:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff fff2 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopForever+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f009 fcbd 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a2:	f7ff fe87 	bl	80011b4 <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	2000074c 	.word	0x2000074c
  ldr r2, =_sidata
 80014b4:	08018964 	.word	0x08018964
  ldr r2, =_sbss
 80014b8:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 80014bc:	200013c8 	.word	0x200013c8

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_InitTick+0x40>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
{
 80014ca:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80014cc:	b90a      	cbnz	r2, 80014d2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_InitTick+0x44>)
 80014dc:	6810      	ldr	r0, [r2, #0]
 80014de:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e2:	f000 f8a7 	bl	8001634 <HAL_SYSTICK_Config>
 80014e6:	4604      	mov	r4, r0
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	2d0f      	cmp	r5, #15
 80014ee:	d8ee      	bhi.n	80014ce <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	4602      	mov	r2, r0
 80014f2:	4629      	mov	r1, r5
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f86a 	bl	80015d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_InitTick+0x48>)
 80014fe:	4620      	mov	r0, r4
 8001500:	601d      	str	r5, [r3, #0]
  return status;
 8001502:	e7e5      	b.n	80014d0 <HAL_InitTick+0xc>
 8001504:	20000004 	.word	0x20000004
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008

08001510 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_Init+0x28>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001518:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	f000 f845 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff ffce 	bl	80014c4 <HAL_InitTick>
 8001528:	4604      	mov	r4, r0
 800152a:	b918      	cbnz	r0, 8001534 <HAL_Init+0x24>
    HAL_MspInit();
 800152c:	f7ff fec8 	bl	80012c0 <HAL_MspInit>
}
 8001530:	4620      	mov	r0, r4
 8001532:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001534:	2401      	movs	r4, #1
 8001536:	e7fb      	b.n	8001530 <HAL_Init+0x20>
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x10>)
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_IncTick+0x14>)
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	440b      	add	r3, r1
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000082c 	.word	0x2000082c
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001554:	4b01      	ldr	r3, [pc, #4]	; (800155c <HAL_GetTick+0x8>)
 8001556:	6818      	ldr	r0, [r3, #0]
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000082c 	.word	0x2000082c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fff6 	bl	8001554 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001568:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800156a:	bf1c      	itt	ne
 800156c:	4b05      	ldrne	r3, [pc, #20]	; (8001584 <HAL_Delay+0x24>)
 800156e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001570:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001572:	bf18      	it	ne
 8001574:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	f7ff ffed 	bl	8001554 <HAL_GetTick>
 800157a:	1b43      	subs	r3, r0, r5
 800157c:	42a3      	cmp	r3, r4
 800157e:	d3fa      	bcc.n	8001576 <HAL_Delay+0x16>
  {
  }
}
 8001580:	bd38      	pop	{r3, r4, r5, pc}
 8001582:	bf00      	nop
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001588:	4800      	ldr	r0, [pc, #0]	; (800158c <HAL_GetHalVersion+0x4>)
 800158a:	4770      	bx	lr
 800158c:	010d0400 	.word	0x010d0400

08001590 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001590:	4b01      	ldr	r3, [pc, #4]	; (8001598 <HAL_GetREVID+0x8>)
 8001592:	6818      	ldr	r0, [r3, #0]
}
 8001594:	0c00      	lsrs	r0, r0, #16
 8001596:	4770      	bx	lr
 8001598:	e0042000 	.word	0xe0042000

0800159c <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <HAL_GetDEVID+0xc>)
 800159e:	6818      	ldr	r0, [r3, #0]
}
 80015a0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e0042000 	.word	0xe0042000

080015ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b530      	push	{r4, r5, lr}
 80015d4:	68dc      	ldr	r4, [r3, #12]
 80015d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	bf28      	it	cs
 80015e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ec:	bf8c      	ite	hi
 80015ee:	3c03      	subhi	r4, #3
 80015f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f2:	fa05 f303 	lsl.w	r3, r5, r3
 80015f6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fa:	40a5      	lsls	r5, r4
 80015fc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001602:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	bfac      	ite	ge
 800160a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	4a08      	ldrlt	r2, [pc, #32]	; (8001630 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	bfb8      	it	lt
 8001616:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	b2db      	uxtb	r3, r3
 800161c:	bfaa      	itet	ge
 800161e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001628:	bd30      	pop	{r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	e000ed14 	.word	0xe000ed14

08001634 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	3801      	subs	r0, #1
 8001636:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800163a:	d20b      	bcs.n	8001654 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	21f0      	movs	r1, #240	; 0xf0
 8001646:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001650:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001652:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001654:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800165c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800165e:	4604      	mov	r4, r0
 8001660:	b908      	cbnz	r0, 8001666 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001664:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001666:	7f43      	ldrb	r3, [r0, #29]
 8001668:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800166c:	b913      	cbnz	r3, 8001674 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800166e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001670:	f7ff fe3e 	bl	80012f0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001674:	2302      	movs	r3, #2
 8001676:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001678:	7923      	ldrb	r3, [r4, #4]
 800167a:	b9e3      	cbnz	r3, 80016b6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_CRC_Init+0x70>)
 8001680:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	f022 0218 	bic.w	r2, r2, #24
 8001688:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800168a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800168c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800168e:	b9d2      	cbnz	r2, 80016c6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001694:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	6961      	ldr	r1, [r4, #20]
 800169a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69a1      	ldr	r1, [r4, #24]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80016b2:	2000      	movs	r0, #0
 80016b4:	e7d6      	b.n	8001664 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016b6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 f808 	bl	80016d0 <HAL_CRCEx_Polynomial_Set>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d0e2      	beq.n	800168a <HAL_CRC_Init+0x2e>
 80016c4:	e7cd      	b.n	8001662 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016c6:	6922      	ldr	r2, [r4, #16]
 80016c8:	e7e4      	b.n	8001694 <HAL_CRC_Init+0x38>
 80016ca:	bf00      	nop
 80016cc:	04c11db7 	.word	0x04c11db7

080016d0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016d0:	07cb      	lsls	r3, r1, #31
{
 80016d2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016d4:	d50c      	bpl.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016d6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80016d8:	3b01      	subs	r3, #1
 80016da:	d31c      	bcc.n	8001716 <HAL_CRCEx_Polynomial_Set+0x46>
 80016dc:	fa21 f403 	lsr.w	r4, r1, r3
 80016e0:	07e4      	lsls	r4, r4, #31
 80016e2:	d5f9      	bpl.n	80016d8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80016e4:	2a10      	cmp	r2, #16
 80016e6:	d012      	beq.n	800170e <HAL_CRCEx_Polynomial_Set+0x3e>
 80016e8:	d804      	bhi.n	80016f4 <HAL_CRCEx_Polynomial_Set+0x24>
 80016ea:	b13a      	cbz	r2, 80016fc <HAL_CRCEx_Polynomial_Set+0x2c>
 80016ec:	2a08      	cmp	r2, #8
 80016ee:	d010      	beq.n	8001712 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 80016f0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80016f2:	e00b      	b.n	800170c <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 80016f4:	2a18      	cmp	r2, #24
 80016f6:	d1fb      	bne.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 80016f8:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80016fa:	d8f9      	bhi.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016fc:	6800      	ldr	r0, [r0, #0]
 80016fe:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001700:	6883      	ldr	r3, [r0, #8]
 8001702:	f023 0318 	bic.w	r3, r3, #24
 8001706:	4313      	orrs	r3, r2
 8001708:	6083      	str	r3, [r0, #8]
 800170a:	2000      	movs	r0, #0
}
 800170c:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800170e:	2b07      	cmp	r3, #7
 8001710:	e7f3      	b.n	80016fa <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8001712:	2b0f      	cmp	r3, #15
 8001714:	e7f1      	b.n	80016fa <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8001716:	2a00      	cmp	r2, #0
 8001718:	d1ea      	bne.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x20>
 800171a:	e7ef      	b.n	80016fc <HAL_CRCEx_Polynomial_Set+0x2c>

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001720:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80018d4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001724:	4c69      	ldr	r4, [pc, #420]	; (80018cc <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	680a      	ldr	r2, [r1, #0]
 800172a:	fa32 f503 	lsrs.w	r5, r2, r3
 800172e:	d102      	bne.n	8001736 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001730:	b003      	add	sp, #12
 8001732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001736:	f04f 0e01 	mov.w	lr, #1
 800173a:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800173e:	ea1e 0202 	ands.w	r2, lr, r2
 8001742:	f000 8090 	beq.w	8001866 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001746:	684d      	ldr	r5, [r1, #4]
 8001748:	f005 0603 	and.w	r6, r5, #3
 800174c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001750:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001756:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800175c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001760:	f200 8083 	bhi.w	800186a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001764:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800176a:	68cf      	ldr	r7, [r1, #12]
 800176c:	fa07 f708 	lsl.w	r7, r7, r8
 8001770:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001774:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001776:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001778:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001780:	409f      	lsls	r7, r3
 8001782:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001786:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001788:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178e:	688f      	ldr	r7, [r1, #8]
 8001790:	fa07 f708 	lsl.w	r7, r7, r8
 8001794:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800179a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	d071      	beq.n	8001882 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 800179e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a0:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a8:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017aa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80017ae:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b0:	d059      	beq.n	8001866 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017b6:	f046 0601 	orr.w	r6, r6, #1
 80017ba:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80017be:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017c2:	f023 0703 	bic.w	r7, r3, #3
 80017c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017ca:	f006 0601 	and.w	r6, r6, #1
 80017ce:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017d2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80017da:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017e0:	f04f 0c0f 	mov.w	ip, #15
 80017e4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ec:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f0:	d05f      	beq.n	80018b2 <HAL_GPIO_Init+0x196>
 80017f2:	4e37      	ldr	r6, [pc, #220]	; (80018d0 <HAL_GPIO_Init+0x1b4>)
 80017f4:	42b0      	cmp	r0, r6
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0x19a>
 80017f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017fc:	42b0      	cmp	r0, r6
 80017fe:	d05c      	beq.n	80018ba <HAL_GPIO_Init+0x19e>
 8001800:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001804:	42b0      	cmp	r0, r6
 8001806:	d05a      	beq.n	80018be <HAL_GPIO_Init+0x1a2>
 8001808:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800180c:	42b0      	cmp	r0, r6
 800180e:	d058      	beq.n	80018c2 <HAL_GPIO_Init+0x1a6>
 8001810:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001814:	42b0      	cmp	r0, r6
 8001816:	d056      	beq.n	80018c6 <HAL_GPIO_Init+0x1aa>
 8001818:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800181c:	42b0      	cmp	r0, r6
 800181e:	bf0c      	ite	eq
 8001820:	2606      	moveq	r6, #6
 8001822:	2607      	movne	r6, #7
 8001824:	fa06 f60e 	lsl.w	r6, r6, lr
 8001828:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800182c:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 800182e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001830:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001832:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001836:	bf0c      	ite	eq
 8001838:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800183a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800183c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800183e:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001840:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001844:	bf0c      	ite	eq
 8001846:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001848:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800184a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 800184c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800184e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001852:	bf0c      	ite	eq
 8001854:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001856:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001858:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800185a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800185e:	bf54      	ite	pl
 8001860:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001862:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001864:	6026      	str	r6, [r4, #0]
    position++;
 8001866:	3301      	adds	r3, #1
 8001868:	e75e      	b.n	8001728 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800186a:	2e03      	cmp	r6, #3
 800186c:	d18c      	bne.n	8001788 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800186e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001870:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001874:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001878:	409f      	lsls	r7, r3
 800187a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800187e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001880:	e78d      	b.n	800179e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001882:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001886:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800188e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001892:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001896:	f04f 0e0f 	mov.w	lr, #15
 800189a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800189e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a2:	690f      	ldr	r7, [r1, #16]
 80018a4:	fa07 f70b 	lsl.w	r7, r7, fp
 80018a8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80018ac:	f8ca 7020 	str.w	r7, [sl, #32]
 80018b0:	e775      	b.n	800179e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b2:	2600      	movs	r6, #0
 80018b4:	e7b6      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018b6:	2601      	movs	r6, #1
 80018b8:	e7b4      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018ba:	2602      	movs	r6, #2
 80018bc:	e7b2      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018be:	2603      	movs	r6, #3
 80018c0:	e7b0      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018c2:	2604      	movs	r6, #4
 80018c4:	e7ae      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018c6:	2605      	movs	r6, #5
 80018c8:	e7ac      	b.n	8001824 <HAL_GPIO_Init+0x108>
 80018ca:	bf00      	nop
 80018cc:	40010400 	.word	0x40010400
 80018d0:	48000400 	.word	0x48000400
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	b10a      	cbz	r2, 80018de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018da:	6181      	str	r1, [r0, #24]
 80018dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018de:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80018e6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80018e8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40007000 	.word	0x40007000

080018f4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001900:	d11d      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001906:	d101      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001908:	2000      	movs	r0, #0
 800190a:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001916:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2132      	movs	r1, #50	; 0x32
 800191e:	434b      	muls	r3, r1
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001928:	6951      	ldr	r1, [r2, #20]
 800192a:	0549      	lsls	r1, r1, #21
 800192c:	d500      	bpl.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x3c>
 800192e:	b923      	cbnz	r3, 800193a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001930:	6953      	ldr	r3, [r2, #20]
 8001932:	055b      	lsls	r3, r3, #21
 8001934:	d5e8      	bpl.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
}
 8001938:	4770      	bx	lr
        wait_loop_index--;
 800193a:	3b01      	subs	r3, #1
 800193c:	e7f4      	b.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001942:	bf1f      	itttt	ne
 8001944:	6813      	ldrne	r3, [r2, #0]
 8001946:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800194a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800194e:	6013      	strne	r3, [r2, #0]
 8001950:	e7da      	b.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000
 8001958:	20000000 	.word	0x20000000
 800195c:	000f4240 	.word	0x000f4240

08001960 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001960:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001962:	4d1e      	ldr	r5, [pc, #120]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001964:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001966:	00da      	lsls	r2, r3, #3
{
 8001968:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800196a:	d518      	bpl.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800196c:	f7ff ffba 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001970:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001974:	d123      	bne.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001976:	2c80      	cmp	r4, #128	; 0x80
 8001978:	d929      	bls.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800197a:	2ca0      	cmp	r4, #160	; 0xa0
 800197c:	bf8c      	ite	hi
 800197e:	2402      	movhi	r4, #2
 8001980:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001982:	4917      	ldr	r1, [pc, #92]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001984:	680a      	ldr	r2, [r1, #0]
 8001986:	f022 0207 	bic.w	r2, r2, #7
 800198a:	4322      	orrs	r2, r4
 800198c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800198e:	6808      	ldr	r0, [r1, #0]
 8001990:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001994:	1b00      	subs	r0, r0, r4
 8001996:	bf18      	it	ne
 8001998:	2001      	movne	r0, #1
 800199a:	b003      	add	sp, #12
 800199c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	65ab      	str	r3, [r5, #88]	; 0x58
 80019a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80019b0:	f7ff ff98 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80019bc:	e7d8      	b.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80019be:	2c80      	cmp	r4, #128	; 0x80
 80019c0:	d807      	bhi.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80019c2:	d008      	beq.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80019c4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80019c8:	425c      	negs	r4, r3
 80019ca:	415c      	adcs	r4, r3
 80019cc:	e7d9      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019ce:	2400      	movs	r4, #0
 80019d0:	e7d7      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80019d2:	2403      	movs	r4, #3
 80019d4:	e7d5      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d6:	2402      	movs	r4, #2
 80019d8:	e7d3      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x8c>)
 80019e6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ea:	f012 020c 	ands.w	r2, r2, #12
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x18>
 80019f0:	2a0c      	cmp	r2, #12
 80019f2:	d115      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019f8:	2901      	cmp	r1, #1
 80019fa:	d118      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019fc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80019fe:	481d      	ldr	r0, [pc, #116]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a00:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a02:	bf55      	itete	pl
 8001a04:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a08:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a0a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a0e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001a12:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a16:	b34a      	cbz	r2, 8001a6c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a18:	2a0c      	cmp	r2, #12
 8001a1a:	d009      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x4c>
 8001a1c:	2000      	movs	r0, #0
  return sysclockfreq;
 8001a1e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a20:	2a04      	cmp	r2, #4
 8001a22:	d022      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a24:	2a08      	cmp	r2, #8
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a28:	bf18      	it	ne
 8001a2a:	2000      	movne	r0, #0
 8001a2c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a2e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001a36:	2a02      	cmp	r2, #2
 8001a38:	d015      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x82>
 8001a3a:	490f      	ldr	r1, [pc, #60]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a3c:	2a03      	cmp	r2, #3
 8001a3e:	bf08      	it	eq
 8001a40:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a42:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001a4a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a4c:	68d8      	ldr	r0, [r3, #12]
 8001a4e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a52:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a56:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a58:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a5a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a5c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001a60:	fbb2 f0f0 	udiv	r0, r2, r0
 8001a64:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a68:	e7eb      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001a6a:	4804      	ldr	r0, [pc, #16]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	0800d4b0 	.word	0x0800d4b0
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	00f42400 	.word	0x00f42400

08001a80 <HAL_RCC_OscConfig>:
{
 8001a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001a84:	4605      	mov	r5, r0
 8001a86:	b918      	cbnz	r0, 8001a90 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
}
 8001a8a:	b003      	add	sp, #12
 8001a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a90:	4c92      	ldr	r4, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a92:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a94:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a96:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a98:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aa2:	d53d      	bpl.n	8001b20 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa4:	b11e      	cbz	r6, 8001aae <HAL_RCC_OscConfig+0x2e>
 8001aa6:	2e0c      	cmp	r6, #12
 8001aa8:	d166      	bne.n	8001b78 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aaa:	2f01      	cmp	r7, #1
 8001aac:	d164      	bne.n	8001b78 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	0798      	lsls	r0, r3, #30
 8001ab2:	d502      	bpl.n	8001aba <HAL_RCC_OscConfig+0x3a>
 8001ab4:	69ab      	ldr	r3, [r5, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0e6      	beq.n	8001a88 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	6a28      	ldr	r0, [r5, #32]
 8001abe:	0719      	lsls	r1, r3, #28
 8001ac0:	bf56      	itet	pl
 8001ac2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001ac6:	6823      	ldrmi	r3, [r4, #0]
 8001ac8:	091b      	lsrpl	r3, r3, #4
 8001aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ace:	4298      	cmp	r0, r3
 8001ad0:	d93b      	bls.n	8001b4a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad2:	f7ff ff45 	bl	8001960 <RCC_SetFlashLatencyFromMSIRange>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d1d6      	bne.n	8001a88 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	6a2a      	ldr	r2, [r5, #32]
 8001ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aea:	4313      	orrs	r3, r2
 8001aec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aee:	6863      	ldr	r3, [r4, #4]
 8001af0:	69ea      	ldr	r2, [r5, #28]
 8001af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001af6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001afa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afc:	f7ff ff72 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	4a77      	ldr	r2, [pc, #476]	; (8001ce0 <HAL_RCC_OscConfig+0x260>)
 8001b04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	40d8      	lsrs	r0, r3
 8001b10:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_RCC_OscConfig+0x264>)
 8001b12:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001b14:	4b74      	ldr	r3, [pc, #464]	; (8001ce8 <HAL_RCC_OscConfig+0x268>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f7ff fcd4 	bl	80014c4 <HAL_InitTick>
        if(status != HAL_OK)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1b4      	bne.n	8001a8a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	07d8      	lsls	r0, r3, #31
 8001b24:	d45f      	bmi.n	8001be6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	0799      	lsls	r1, r3, #30
 8001b2a:	f100 809e 	bmi.w	8001c6a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	0718      	lsls	r0, r3, #28
 8001b32:	f100 80db 	bmi.w	8001cec <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	0759      	lsls	r1, r3, #29
 8001b3a:	f100 8101 	bmi.w	8001d40 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 816a 	bne.w	8001e1a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001b46:	2000      	movs	r0, #0
 8001b48:	e79f      	b.n	8001a8a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	69ea      	ldr	r2, [r5, #28]
 8001b60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b68:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6a:	2e00      	cmp	r6, #0
 8001b6c:	d1c6      	bne.n	8001afc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6e:	f7ff fef7 	bl	8001960 <RCC_SetFlashLatencyFromMSIRange>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d0c2      	beq.n	8001afc <HAL_RCC_OscConfig+0x7c>
 8001b76:	e787      	b.n	8001a88 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b78:	69ab      	ldr	r3, [r5, #24]
 8001b7a:	b31b      	cbz	r3, 8001bc4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7ff fce6 	bl	8001554 <HAL_GetTick>
 8001b88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	079a      	lsls	r2, r3, #30
 8001b8e:	d511      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	6a2a      	ldr	r2, [r5, #32]
 8001b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	69ea      	ldr	r2, [r5, #28]
 8001ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bb0:	6063      	str	r3, [r4, #4]
 8001bb2:	e7b5      	b.n	8001b20 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fcce 	bl	8001554 <HAL_GetTick>
 8001bb8:	eba0 0008 	sub.w	r0, r0, r8
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d9e4      	bls.n	8001b8a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	e762      	b.n	8001a8a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fcc2 	bl	8001554 <HAL_GetTick>
 8001bd0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	079b      	lsls	r3, r3, #30
 8001bd6:	d5a3      	bpl.n	8001b20 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fcbc 	bl	8001554 <HAL_GetTick>
 8001bdc:	eba0 0008 	sub.w	r0, r0, r8
 8001be0:	2802      	cmp	r0, #2
 8001be2:	d9f6      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001be4:	e7ec      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be6:	2e08      	cmp	r6, #8
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x172>
 8001bea:	2e0c      	cmp	r6, #12
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bee:	2f03      	cmp	r7, #3
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	039a      	lsls	r2, r3, #14
 8001bf6:	d596      	bpl.n	8001b26 <HAL_RCC_OscConfig+0xa6>
 8001bf8:	686b      	ldr	r3, [r5, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d193      	bne.n	8001b26 <HAL_RCC_OscConfig+0xa6>
 8001bfe:	e743      	b.n	8001a88 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c00:	686b      	ldr	r3, [r5, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d110      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1aa>
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c10:	f7ff fca0 	bl	8001554 <HAL_GetTick>
 8001c14:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	039b      	lsls	r3, r3, #14
 8001c1a:	d484      	bmi.n	8001b26 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc9a 	bl	8001554 <HAL_GetTick>
 8001c20:	eba0 0008 	sub.w	r0, r0, r8
 8001c24:	2864      	cmp	r0, #100	; 0x64
 8001c26:	d9f6      	bls.n	8001c16 <HAL_RCC_OscConfig+0x196>
 8001c28:	e7ca      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2e:	d104      	bne.n	8001c3a <HAL_RCC_OscConfig+0x1ba>
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	e7e6      	b.n	8001c08 <HAL_RCC_OscConfig+0x188>
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c40:	6022      	str	r2, [r4, #0]
 8001c42:	6822      	ldr	r2, [r4, #0]
 8001c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c48:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fc81 	bl	8001554 <HAL_GetTick>
 8001c52:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	0398      	lsls	r0, r3, #14
 8001c58:	f57f af65 	bpl.w	8001b26 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fc7a 	bl	8001554 <HAL_GetTick>
 8001c60:	eba0 0008 	sub.w	r0, r0, r8
 8001c64:	2864      	cmp	r0, #100	; 0x64
 8001c66:	d9f5      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1d4>
 8001c68:	e7aa      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6a:	2e04      	cmp	r6, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
 8001c6e:	2e0c      	cmp	r6, #12
 8001c70:	d110      	bne.n	8001c94 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c72:	2f02      	cmp	r7, #2
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	0559      	lsls	r1, r3, #21
 8001c7a:	d503      	bpl.n	8001c84 <HAL_RCC_OscConfig+0x204>
 8001c7c:	68eb      	ldr	r3, [r5, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f43f af02 	beq.w	8001a88 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	692a      	ldr	r2, [r5, #16]
 8001c88:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001c8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c90:	6063      	str	r3, [r4, #4]
 8001c92:	e74c      	b.n	8001b2e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c94:	68eb      	ldr	r3, [r5, #12]
 8001c96:	b17b      	cbz	r3, 8001cb8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fc58 	bl	8001554 <HAL_GetTick>
 8001ca4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	055a      	lsls	r2, r3, #21
 8001caa:	d4eb      	bmi.n	8001c84 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc52 	bl	8001554 <HAL_GetTick>
 8001cb0:	1bc0      	subs	r0, r0, r7
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	d9f7      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x226>
 8001cb6:	e783      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc48 	bl	8001554 <HAL_GetTick>
 8001cc4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	055b      	lsls	r3, r3, #21
 8001cca:	f57f af30 	bpl.w	8001b2e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fc41 	bl	8001554 <HAL_GetTick>
 8001cd2:	1bc0      	subs	r0, r0, r7
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9f6      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x246>
 8001cd8:	e772      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	0800d498 	.word	0x0800d498
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	696b      	ldr	r3, [r5, #20]
 8001cee:	b19b      	cbz	r3, 8001d18 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001cf0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc2a 	bl	8001554 <HAL_GetTick>
 8001d00:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d06:	079a      	lsls	r2, r3, #30
 8001d08:	f53f af15 	bmi.w	8001b36 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc22 	bl	8001554 <HAL_GetTick>
 8001d10:	1bc0      	subs	r0, r0, r7
 8001d12:	2802      	cmp	r0, #2
 8001d14:	d9f5      	bls.n	8001d02 <HAL_RCC_OscConfig+0x282>
 8001d16:	e753      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001d18:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d24:	f7ff fc16 	bl	8001554 <HAL_GetTick>
 8001d28:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d2e:	079b      	lsls	r3, r3, #30
 8001d30:	f57f af01 	bpl.w	8001b36 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fc0e 	bl	8001554 <HAL_GetTick>
 8001d38:	1bc0      	subs	r0, r0, r7
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9f5      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2aa>
 8001d3e:	e73f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d42:	00df      	lsls	r7, r3, #3
 8001d44:	d429      	bmi.n	8001d9a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d58:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4f85      	ldr	r7, [pc, #532]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	05d8      	lsls	r0, r3, #23
 8001d62:	d51d      	bpl.n	8001da0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	68ab      	ldr	r3, [r5, #8]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d12b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x342>
 8001d6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d76:	f7ff fbed 	bl	8001554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d7e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d80:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d84:	079a      	lsls	r2, r3, #30
 8001d86:	d542      	bpl.n	8001e0e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001d88:	f1b8 0f00 	cmp.w	r8, #0
 8001d8c:	f43f aed7 	beq.w	8001b3e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d98:	e6d1      	b.n	8001b3e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	f04f 0800 	mov.w	r8, #0
 8001d9e:	e7dd      	b.n	8001d5c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001da8:	f7ff fbd4 	bl	8001554 <HAL_GetTick>
 8001dac:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	05d9      	lsls	r1, r3, #23
 8001db2:	d4d7      	bmi.n	8001d64 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7ff fbce 	bl	8001554 <HAL_GetTick>
 8001db8:	eba0 0009 	sub.w	r0, r0, r9
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9f6      	bls.n	8001dae <HAL_RCC_OscConfig+0x32e>
 8001dc0:	e6fe      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x354>
 8001dc6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001dd2:	e7ca      	b.n	8001d6a <HAL_RCC_OscConfig+0x2ea>
 8001dd4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001de0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001de4:	f022 0204 	bic.w	r2, r2, #4
 8001de8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1c2      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001df0:	f7ff fbb0 	bl	8001554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001df8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001dfe:	079b      	lsls	r3, r3, #30
 8001e00:	d5c2      	bpl.n	8001d88 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff fba7 	bl	8001554 <HAL_GetTick>
 8001e06:	1bc0      	subs	r0, r0, r7
 8001e08:	4548      	cmp	r0, r9
 8001e0a:	d9f6      	bls.n	8001dfa <HAL_RCC_OscConfig+0x37a>
 8001e0c:	e6d8      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fba1 	bl	8001554 <HAL_GetTick>
 8001e12:	1bc0      	subs	r0, r0, r7
 8001e14:	4548      	cmp	r0, r9
 8001e16:	d9b3      	bls.n	8001d80 <HAL_RCC_OscConfig+0x300>
 8001e18:	e6d2      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f040 808f 	bne.w	8001f3e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001e20:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e24:	f003 0103 	and.w	r1, r3, #3
 8001e28:	4291      	cmp	r1, r2
 8001e2a:	d124      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001e2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e32:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001e38:	d11d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001e3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001e44:	d117      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e46:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e48:	3a07      	subs	r2, #7
 8001e4a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001e4e:	bf18      	it	ne
 8001e50:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e52:	4291      	cmp	r1, r2
 8001e54:	d10f      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e58:	0852      	lsrs	r2, r2, #1
 8001e5a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001e5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e60:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e66:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e68:	0852      	lsrs	r2, r2, #1
 8001e6a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001e6e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e74:	d04a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e76:	2e0c      	cmp	r6, #12
 8001e78:	f43f ae06 	beq.w	8001a88 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	015f      	lsls	r7, r3, #5
 8001e80:	f53f ae02 	bmi.w	8001a88 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	00de      	lsls	r6, r3, #3
 8001e88:	f53f adfe 	bmi.w	8001a88 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001e94:	f7ff fb5e 	bl	8001554 <HAL_GetTick>
 8001e98:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	0198      	lsls	r0, r3, #6
 8001e9e:	d42f      	bmi.n	8001f00 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea0:	68e2      	ldr	r2, [r4, #12]
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001eb0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001eb2:	3a01      	subs	r2, #1
 8001eb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001eb8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001eba:	0912      	lsrs	r2, r2, #4
 8001ebc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001ec0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001eca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001ecc:	0852      	lsrs	r2, r2, #1
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001ed4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001edc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ede:	68e3      	ldr	r3, [r4, #12]
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001ee6:	f7ff fb35 	bl	8001554 <HAL_GetTick>
 8001eea:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	0199      	lsls	r1, r3, #6
 8001ef0:	f53f ae29 	bmi.w	8001b46 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff fb2e 	bl	8001554 <HAL_GetTick>
 8001ef8:	1b40      	subs	r0, r0, r5
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9f6      	bls.n	8001eec <HAL_RCC_OscConfig+0x46c>
 8001efe:	e65f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fb28 	bl	8001554 <HAL_GetTick>
 8001f04:	1b80      	subs	r0, r0, r6
 8001f06:	2802      	cmp	r0, #2
 8001f08:	d9c7      	bls.n	8001e9a <HAL_RCC_OscConfig+0x41a>
 8001f0a:	e659      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	019a      	lsls	r2, r3, #6
 8001f10:	f53f ae19 	bmi.w	8001b46 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f1c:	68e3      	ldr	r3, [r4, #12]
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f22:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001f24:	f7ff fb16 	bl	8001554 <HAL_GetTick>
 8001f28:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	f53f ae0a 	bmi.w	8001b46 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fb0f 	bl	8001554 <HAL_GetTick>
 8001f36:	1b40      	subs	r0, r0, r5
 8001f38:	2802      	cmp	r0, #2
 8001f3a:	d9f6      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
 8001f3c:	e640      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3e:	2e0c      	cmp	r6, #12
 8001f40:	f43f ada2 	beq.w	8001a88 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fb02 	bl	8001554 <HAL_GetTick>
 8001f50:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001f58:	d105      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f5a:	68e1      	ldr	r1, [r4, #12]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001f62:	4618      	mov	r0, r3
 8001f64:	e591      	b.n	8001a8a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff faf5 	bl	8001554 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d9f0      	bls.n	8001f52 <HAL_RCC_OscConfig+0x4d2>
 8001f70:	e626      	b.n	8001bc0 <HAL_RCC_OscConfig+0x140>
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000
 8001f78:	f99d808c 	.word	0xf99d808c
 8001f7c:	feeefffc 	.word	0xfeeefffc

08001f80 <HAL_RCC_ClockConfig>:
{
 8001f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f84:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f86:	4604      	mov	r4, r0
 8001f88:	b910      	cbnz	r0, 8001f90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f8a:	2001      	movs	r0, #1
}
 8001f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_RCC_ClockConfig+0x140>)
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d32c      	bcc.n	8001ff6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	6821      	ldr	r1, [r4, #0]
 8001f9e:	0788      	lsls	r0, r1, #30
 8001fa0:	d434      	bmi.n	800200c <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	07c9      	lsls	r1, r1, #31
 8001fa4:	d43f      	bmi.n	8002026 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa6:	6821      	ldr	r1, [r4, #0]
 8001fa8:	078a      	lsls	r2, r1, #30
 8001faa:	d468      	bmi.n	800207e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4a44      	ldr	r2, [pc, #272]	; (80020c0 <HAL_RCC_ClockConfig+0x140>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	42ab      	cmp	r3, r5
 8001fb6:	d86f      	bhi.n	8002098 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	f011 0f04 	tst.w	r1, #4
 8001fbc:	4d41      	ldr	r5, [pc, #260]	; (80020c4 <HAL_RCC_ClockConfig+0x144>)
 8001fbe:	d177      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	070b      	lsls	r3, r1, #28
 8001fc2:	d506      	bpl.n	8001fd2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc4:	68ab      	ldr	r3, [r5, #8]
 8001fc6:	6922      	ldr	r2, [r4, #16]
 8001fc8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fd0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd2:	f7ff fd07 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001fd6:	68ab      	ldr	r3, [r5, #8]
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_ClockConfig+0x148>)
 8001fda:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	40d8      	lsrs	r0, r3
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_ClockConfig+0x14c>)
 8001fec:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_RCC_ClockConfig+0x150>)
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f7ff ba67 	b.w	80014c4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	f023 0307 	bic.w	r3, r3, #7
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	428b      	cmp	r3, r1
 8002008:	d1bf      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xa>
 800200a:	e7c7      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800200c:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_RCC_ClockConfig+0x144>)
 800200e:	68a0      	ldr	r0, [r4, #8]
 8002010:	6893      	ldr	r3, [r2, #8]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	bf81      	itttt	hi
 800201a:	6893      	ldrhi	r3, [r2, #8]
 800201c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002020:	4303      	orrhi	r3, r0
 8002022:	6093      	strhi	r3, [r2, #8]
 8002024:	e7bd      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	6862      	ldr	r2, [r4, #4]
 8002028:	4e26      	ldr	r6, [pc, #152]	; (80020c4 <HAL_RCC_ClockConfig+0x144>)
 800202a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	d11a      	bne.n	8002066 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002030:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002034:	d0a9      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002036:	68b3      	ldr	r3, [r6, #8]
 8002038:	f023 0303 	bic.w	r3, r3, #3
 800203c:	4313      	orrs	r3, r2
 800203e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002040:	f7ff fa88 	bl	8001554 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002048:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	68b3      	ldr	r3, [r6, #8]
 800204c:	6862      	ldr	r2, [r4, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002056:	d0a6      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7ff fa7c 	bl	8001554 <HAL_GetTick>
 800205c:	1bc0      	subs	r0, r0, r7
 800205e:	4540      	cmp	r0, r8
 8002060:	d9f3      	bls.n	800204a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8002062:	2003      	movs	r0, #3
 8002064:	e792      	b.n	8001f8c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	2a02      	cmp	r2, #2
 8002068:	d102      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800206e:	e7e1      	b.n	8002034 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002070:	b912      	cbnz	r2, 8002078 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002072:	f013 0f02 	tst.w	r3, #2
 8002076:	e7dd      	b.n	8002034 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002078:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800207c:	e7da      	b.n	8002034 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_RCC_ClockConfig+0x144>)
 8002080:	68a0      	ldr	r0, [r4, #8]
 8002082:	6893      	ldr	r3, [r2, #8]
 8002084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002088:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	bf3f      	itttt	cc
 800208c:	6893      	ldrcc	r3, [r2, #8]
 800208e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8002092:	4303      	orrcc	r3, r0
 8002094:	6093      	strcc	r3, [r2, #8]
 8002096:	e789      	b.n	8001fac <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	f023 0307 	bic.w	r3, r3, #7
 800209e:	432b      	orrs	r3, r5
 80020a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	6813      	ldr	r3, [r2, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	f47f af6e 	bne.w	8001f8a <HAL_RCC_ClockConfig+0xa>
 80020ae:	e783      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	68ab      	ldr	r3, [r5, #8]
 80020b2:	68e2      	ldr	r2, [r4, #12]
 80020b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60ab      	str	r3, [r5, #8]
 80020bc:	e780      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x40>
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800d498 	.word	0x0800d498
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_RCC_GetHCLKFreq>:
}
 80020d4:	4b01      	ldr	r3, [pc, #4]	; (80020dc <HAL_RCC_GetHCLKFreq+0x8>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020e2:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ee:	6810      	ldr	r0, [r2, #0]
 80020f0:	f003 031f 	and.w	r3, r3, #31
}
 80020f4:	40d8      	lsrs	r0, r3
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	0800d4a8 	.word	0x0800d4a8
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002106:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002112:	6810      	ldr	r0, [r2, #0]
 8002114:	f003 031f 	and.w	r3, r3, #31
}
 8002118:	40d8      	lsrs	r0, r3
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000
 8002120:	0800d4a8 	.word	0x0800d4a8
 8002124:	20000000 	.word	0x20000000

08002128 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800212a:	4c42      	ldr	r4, [pc, #264]	; (8002234 <RCCEx_PLLSAI1_Config+0x10c>)
 800212c:	68e2      	ldr	r2, [r4, #12]
 800212e:	0793      	lsls	r3, r2, #30
{
 8002130:	4605      	mov	r5, r0
 8002132:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002134:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002136:	d029      	beq.n	800218c <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002138:	68e2      	ldr	r2, [r4, #12]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	4282      	cmp	r2, r0
 8002140:	d13c      	bne.n	80021bc <RCCEx_PLLSAI1_Config+0x94>
       ||
 8002142:	2a00      	cmp	r2, #0
 8002144:	d03a      	beq.n	80021bc <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002146:	68e3      	ldr	r3, [r4, #12]
       ||
 8002148:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800214a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800214e:	3301      	adds	r3, #1
       ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d133      	bne.n	80021bc <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800215c:	f7ff f9fa 	bl	8001554 <HAL_GetTick>
 8002160:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	011a      	lsls	r2, r3, #4
 8002166:	d432      	bmi.n	80021ce <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002168:	68aa      	ldr	r2, [r5, #8]
 800216a:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 800216c:	2e00      	cmp	r6, #0
 800216e:	d035      	beq.n	80021dc <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002170:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002172:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002174:	d14d      	bne.n	8002212 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002176:	6929      	ldr	r1, [r5, #16]
 8002178:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800217c:	0849      	lsrs	r1, r1, #1
 800217e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002182:	3901      	subs	r1, #1
 8002184:	4313      	orrs	r3, r2
 8002186:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800218a:	e031      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 800218c:	2802      	cmp	r0, #2
 800218e:	d011      	beq.n	80021b4 <RCCEx_PLLSAI1_Config+0x8c>
 8002190:	2803      	cmp	r0, #3
 8002192:	d015      	beq.n	80021c0 <RCCEx_PLLSAI1_Config+0x98>
 8002194:	2801      	cmp	r0, #1
 8002196:	d111      	bne.n	80021bc <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002198:	6822      	ldr	r2, [r4, #0]
 800219a:	0797      	lsls	r7, r2, #30
 800219c:	d51d      	bpl.n	80021da <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800219e:	68e2      	ldr	r2, [r4, #12]
 80021a0:	6869      	ldr	r1, [r5, #4]
 80021a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80021a6:	3901      	subs	r1, #1
 80021a8:	ea42 0300 	orr.w	r3, r2, r0
 80021ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80021b0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80021b2:	e7cf      	b.n	8002154 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021ba:	d1f0      	bne.n	800219e <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e00c      	b.n	80021da <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021c0:	6822      	ldr	r2, [r4, #0]
 80021c2:	0391      	lsls	r1, r2, #14
 80021c4:	d4eb      	bmi.n	800219e <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021c6:	6822      	ldr	r2, [r4, #0]
 80021c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80021cc:	e7f5      	b.n	80021ba <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021ce:	f7ff f9c1 	bl	8001554 <HAL_GetTick>
 80021d2:	1bc0      	subs	r0, r0, r7
 80021d4:	2802      	cmp	r0, #2
 80021d6:	d9c4      	bls.n	8002162 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 80021d8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	68e9      	ldr	r1, [r5, #12]
 80021e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	0909      	lsrs	r1, r1, #4
 80021ea:	4313      	orrs	r3, r2
 80021ec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021f0:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80021fa:	f7ff f9ab 	bl	8001554 <HAL_GetTick>
 80021fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	d510      	bpl.n	8002228 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002206:	6923      	ldr	r3, [r4, #16]
 8002208:	69aa      	ldr	r2, [r5, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	6123      	str	r3, [r4, #16]
 800220e:	2000      	movs	r0, #0
  return status;
 8002210:	e7e3      	b.n	80021da <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002212:	6969      	ldr	r1, [r5, #20]
 8002214:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002218:	0849      	lsrs	r1, r1, #1
 800221a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800221e:	3901      	subs	r1, #1
 8002220:	4313      	orrs	r3, r2
 8002222:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002226:	e7e3      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002228:	f7ff f994 	bl	8001554 <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	2802      	cmp	r0, #2
 8002230:	d9e6      	bls.n	8002200 <RCCEx_PLLSAI1_Config+0xd8>
 8002232:	e7d1      	b.n	80021d8 <RCCEx_PLLSAI1_Config+0xb0>
 8002234:	40021000 	.word	0x40021000

08002238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800223a:	4c3b      	ldr	r4, [pc, #236]	; (8002328 <RCCEx_PLLSAI2_Config+0xf0>)
 800223c:	68e2      	ldr	r2, [r4, #12]
 800223e:	0793      	lsls	r3, r2, #30
{
 8002240:	4605      	mov	r5, r0
 8002242:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002244:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002246:	d026      	beq.n	8002296 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002248:	68e2      	ldr	r2, [r4, #12]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	4282      	cmp	r2, r0
 8002250:	d139      	bne.n	80022c6 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002252:	2a00      	cmp	r2, #0
 8002254:	d037      	beq.n	80022c6 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002256:	68e3      	ldr	r3, [r4, #12]
       ||
 8002258:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800225a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800225e:	3301      	adds	r3, #1
       ||
 8002260:	4293      	cmp	r3, r2
 8002262:	d130      	bne.n	80022c6 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7ff f972 	bl	8001554 <HAL_GetTick>
 8002270:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	009a      	lsls	r2, r3, #2
 8002276:	d42f      	bmi.n	80022d8 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002278:	68a9      	ldr	r1, [r5, #8]
 800227a:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 800227c:	b39e      	cbz	r6, 80022e6 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800227e:	6963      	ldr	r3, [r4, #20]
 8002280:	692a      	ldr	r2, [r5, #16]
 8002282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002286:	0852      	lsrs	r2, r2, #1
 8002288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800228c:	3a01      	subs	r2, #1
 800228e:	430b      	orrs	r3, r1
 8002290:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002294:	e031      	b.n	80022fa <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002296:	2802      	cmp	r0, #2
 8002298:	d011      	beq.n	80022be <RCCEx_PLLSAI2_Config+0x86>
 800229a:	2803      	cmp	r0, #3
 800229c:	d015      	beq.n	80022ca <RCCEx_PLLSAI2_Config+0x92>
 800229e:	2801      	cmp	r0, #1
 80022a0:	d111      	bne.n	80022c6 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	0797      	lsls	r7, r2, #30
 80022a6:	d51d      	bpl.n	80022e4 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022a8:	68e2      	ldr	r2, [r4, #12]
 80022aa:	6869      	ldr	r1, [r5, #4]
 80022ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80022b0:	3901      	subs	r1, #1
 80022b2:	ea42 0300 	orr.w	r3, r2, r0
 80022b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80022ba:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80022bc:	e7d2      	b.n	8002264 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022c4:	d1f0      	bne.n	80022a8 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e00c      	b.n	80022e4 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	0391      	lsls	r1, r2, #14
 80022ce:	d4eb      	bmi.n	80022a8 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80022d6:	e7f5      	b.n	80022c4 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022d8:	f7ff f93c 	bl	8001554 <HAL_GetTick>
 80022dc:	1bc0      	subs	r0, r0, r7
 80022de:	2802      	cmp	r0, #2
 80022e0:	d9c7      	bls.n	8002272 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80022e2:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80022e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022e6:	6963      	ldr	r3, [r4, #20]
 80022e8:	68ea      	ldr	r2, [r5, #12]
 80022ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	0912      	lsrs	r2, r2, #4
 80022f4:	430b      	orrs	r3, r1
 80022f6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022fa:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002304:	f7ff f926 	bl	8001554 <HAL_GetTick>
 8002308:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	d505      	bpl.n	800231c <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002310:	6963      	ldr	r3, [r4, #20]
 8002312:	696a      	ldr	r2, [r5, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	6163      	str	r3, [r4, #20]
 8002318:	2000      	movs	r0, #0
  return status;
 800231a:	e7e3      	b.n	80022e4 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800231c:	f7ff f91a 	bl	8001554 <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	2802      	cmp	r0, #2
 8002324:	d9f1      	bls.n	800230a <RCCEx_PLLSAI2_Config+0xd2>
 8002326:	e7dc      	b.n	80022e2 <RCCEx_PLLSAI2_Config+0xaa>
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCCEx_PeriphCLKConfig>:
{
 800232c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002330:	6806      	ldr	r6, [r0, #0]
 8002332:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002336:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002338:	d009      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800233a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800233c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002340:	d022      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002342:	d813      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002344:	b331      	cbz	r1, 8002394 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002346:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800234a:	d02a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800234c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	04d8      	lsls	r0, r3, #19
 8002352:	d509      	bpl.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002354:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002356:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800235a:	d02c      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800235c:	d826      	bhi.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
 800235e:	b381      	cbz	r1, 80023c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002360:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002364:	d072      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002366:	2601      	movs	r6, #1
 8002368:	4635      	mov	r5, r6
 800236a:	e039      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800236c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002370:	d1ec      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002372:	4a3c      	ldr	r2, [pc, #240]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002374:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002376:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800237a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800237e:	430b      	orrs	r3, r1
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002384:	2600      	movs	r6, #0
 8002386:	e7e2      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002388:	4a36      	ldr	r2, [pc, #216]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800238a:	68d3      	ldr	r3, [r2, #12]
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002392:	e7ee      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002394:	3004      	adds	r0, #4
 8002396:	f7ff fec7 	bl	8002128 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800239c:	2800      	cmp	r0, #0
 800239e:	d1d6      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x22>
 80023a0:	e7e7      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a2:	2100      	movs	r1, #0
 80023a4:	3020      	adds	r0, #32
 80023a6:	f7ff ff47 	bl	8002238 <RCCEx_PLLSAI2_Config>
 80023aa:	e7f6      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023ac:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80023b0:	d1d9      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80023b2:	4635      	mov	r5, r6
 80023b4:	e009      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b6:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80023b8:	68d3      	ldr	r3, [r2, #12]
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	60d3      	str	r3, [r2, #12]
      break;
 80023c0:	e7f7      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c2:	1d20      	adds	r0, r4, #4
 80023c4:	f7ff feb0 	bl	8002128 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d144      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80023d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80023d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023da:	430b      	orrs	r3, r1
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	0399      	lsls	r1, r3, #14
 80023e4:	f140 815d 	bpl.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023e8:	4f1e      	ldr	r7, [pc, #120]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80023ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ec:	00da      	lsls	r2, r3, #3
 80023ee:	d435      	bmi.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80023f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002402:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002406:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800240a:	f8d9 3000 	ldr.w	r3, [r9]
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002416:	f7ff f89d 	bl	8001554 <HAL_GetTick>
 800241a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241c:	f8d9 3000 	ldr.w	r3, [r9]
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	d523      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002424:	bb4d      	cbnz	r5, 800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800242a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800242e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002432:	f040 810e 	bne.w	8002652 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800243a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800243e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002448:	4635      	mov	r5, r6
 800244a:	e016      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800244c:	2100      	movs	r1, #0
 800244e:	f104 0020 	add.w	r0, r4, #32
 8002452:	f7ff fef1 	bl	8002238 <RCCEx_PLLSAI2_Config>
 8002456:	e7b7      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002458:	462e      	mov	r6, r5
 800245a:	e7c1      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800245c:	f04f 0800 	mov.w	r8, #0
 8002460:	e7d1      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7ff f872 	bl	8001554 <HAL_GetTick>
 8002470:	eba0 000a 	sub.w	r0, r0, sl
 8002474:	2802      	cmp	r0, #2
 8002476:	d9d1      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002478:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800247a:	f1b8 0f00 	cmp.w	r8, #0
 800247e:	d003      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002486:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	07da      	lsls	r2, r3, #31
 800248c:	d508      	bpl.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	499b      	ldr	r1, [pc, #620]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002490:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002492:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002496:	f022 0203 	bic.w	r2, r2, #3
 800249a:	4302      	orrs	r2, r0
 800249c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a0:	079f      	lsls	r7, r3, #30
 80024a2:	d508      	bpl.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a4:	4995      	ldr	r1, [pc, #596]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80024a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ac:	f022 020c 	bic.w	r2, r2, #12
 80024b0:	4302      	orrs	r2, r0
 80024b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024b6:	075e      	lsls	r6, r3, #29
 80024b8:	d508      	bpl.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ba:	4990      	ldr	r1, [pc, #576]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80024be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80024c6:	4302      	orrs	r2, r0
 80024c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024cc:	0718      	lsls	r0, r3, #28
 80024ce:	d508      	bpl.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d0:	498a      	ldr	r1, [pc, #552]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024d2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80024d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024dc:	4302      	orrs	r2, r0
 80024de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e2:	06d9      	lsls	r1, r3, #27
 80024e4:	d508      	bpl.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024e6:	4985      	ldr	r1, [pc, #532]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80024ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024f2:	4302      	orrs	r2, r0
 80024f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f8:	069a      	lsls	r2, r3, #26
 80024fa:	d508      	bpl.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024fc:	497f      	ldr	r1, [pc, #508]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002500:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002504:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002508:	4302      	orrs	r2, r0
 800250a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800250e:	059f      	lsls	r7, r3, #22
 8002510:	d508      	bpl.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	497a      	ldr	r1, [pc, #488]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002514:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002516:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800251a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800251e:	4302      	orrs	r2, r0
 8002520:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002524:	055e      	lsls	r6, r3, #21
 8002526:	d508      	bpl.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002528:	4974      	ldr	r1, [pc, #464]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800252a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800252c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002530:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002534:	4302      	orrs	r2, r0
 8002536:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	0658      	lsls	r0, r3, #25
 800253c:	d508      	bpl.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253e:	496f      	ldr	r1, [pc, #444]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002540:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002542:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002546:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800254a:	4302      	orrs	r2, r0
 800254c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002550:	0619      	lsls	r1, r3, #24
 8002552:	d508      	bpl.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002554:	4969      	ldr	r1, [pc, #420]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002558:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800255c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002560:	4302      	orrs	r2, r0
 8002562:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002566:	05da      	lsls	r2, r3, #23
 8002568:	d508      	bpl.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256a:	4964      	ldr	r1, [pc, #400]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800256c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800256e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002572:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002576:	4302      	orrs	r2, r0
 8002578:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	d510      	bpl.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002580:	4a5e      	ldr	r2, [pc, #376]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002582:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002588:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800258c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002596:	f040 8086 	bne.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259a:	68d3      	ldr	r3, [r2, #12]
 800259c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	031f      	lsls	r7, r3, #12
 80025a6:	d50f      	bpl.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a8:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025aa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80025ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025b4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025be:	d17e      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	68d3      	ldr	r3, [r2, #12]
 80025c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	035e      	lsls	r6, r3, #13
 80025cc:	d50f      	bpl.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ce:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025d0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80025d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025da:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e4:	d176      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e6:	68d3      	ldr	r3, [r2, #12]
 80025e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ec:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	0458      	lsls	r0, r3, #17
 80025f2:	d512      	bpl.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f4:	4941      	ldr	r1, [pc, #260]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025f6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80025f8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002600:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002602:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800260a:	d16e      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800260c:	2102      	movs	r1, #2
 800260e:	1d20      	adds	r0, r4, #4
 8002610:	f7ff fd8a 	bl	8002128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002614:	2800      	cmp	r0, #0
 8002616:	bf18      	it	ne
 8002618:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	0411      	lsls	r1, r2, #16
 800261e:	d508      	bpl.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002620:	4936      	ldr	r1, [pc, #216]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002622:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002624:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800262c:	4303      	orrs	r3, r0
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002632:	03d3      	lsls	r3, r2, #15
 8002634:	d509      	bpl.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002636:	4a31      	ldr	r2, [pc, #196]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002638:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800263c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002644:	430b      	orrs	r3, r1
 8002646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800264a:	4628      	mov	r0, r5
 800264c:	b002      	add	sp, #8
 800264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002652:	429a      	cmp	r2, r3
 8002654:	f43f aeef 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002658:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800265c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002674:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800267a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800267e:	f57f aeda 	bpl.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002682:	f7fe ff67 	bl	8001554 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800268a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002690:	0799      	lsls	r1, r3, #30
 8002692:	f53f aed0 	bmi.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe ff5d 	bl	8001554 <HAL_GetTick>
 800269a:	1b40      	subs	r0, r0, r5
 800269c:	4548      	cmp	r0, r9
 800269e:	d9f5      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80026a0:	e6ea      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026a2:	4635      	mov	r5, r6
 80026a4:	e6f0      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026a6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026aa:	f47f af7a 	bne.w	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ae:	2101      	movs	r1, #1
 80026b0:	1d20      	adds	r0, r4, #4
 80026b2:	f7ff fd39 	bl	8002128 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80026b6:	2800      	cmp	r0, #0
 80026b8:	bf18      	it	ne
 80026ba:	4605      	movne	r5, r0
 80026bc:	e771      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026be:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026c2:	d181      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c4:	2101      	movs	r1, #1
 80026c6:	1d20      	adds	r0, r4, #4
 80026c8:	f7ff fd2e 	bl	8002128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026cc:	2800      	cmp	r0, #0
 80026ce:	bf18      	it	ne
 80026d0:	4605      	movne	r5, r0
 80026d2:	e779      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026d4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026d8:	d189      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026da:	2101      	movs	r1, #1
 80026dc:	1d20      	adds	r0, r4, #4
 80026de:	f7ff fd23 	bl	8002128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026e2:	2800      	cmp	r0, #0
 80026e4:	bf18      	it	ne
 80026e6:	4605      	movne	r5, r0
 80026e8:	e781      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026ea:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80026ee:	d194      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026f0:	2102      	movs	r1, #2
 80026f2:	f104 0020 	add.w	r0, r4, #32
 80026f6:	f7ff fd9f 	bl	8002238 <RCCEx_PLLSAI2_Config>
 80026fa:	e78b      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80026fc:	40021000 	.word	0x40021000

08002700 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002700:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	e852 3f00 	ldrex	r3, [r2]
 8002706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800270e:	6802      	ldr	r2, [r0, #0]
 8002710:	2900      	cmp	r1, #0
 8002712:	d1f5      	bne.n	8002700 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	f102 0308 	add.w	r3, r2, #8
 8002718:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	f102 0c08 	add.w	ip, r2, #8
 8002724:	e84c 3100 	strex	r1, r3, [ip]
 8002728:	2900      	cmp	r1, #0
 800272a:	d1f3      	bne.n	8002714 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002732:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002736:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273a:	e842 3100 	strex	r1, r3, [r2]
 800273e:	2900      	cmp	r1, #0
 8002740:	d1f7      	bne.n	8002732 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
 8002744:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002748:	2300      	movs	r3, #0
 800274a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800274c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800274e:	4770      	bx	lr

08002750 <UART_SetConfig>:
{
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002754:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002756:	6921      	ldr	r1, [r4, #16]
 8002758:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800275a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800275c:	69c0      	ldr	r0, [r0, #28]
 800275e:	430a      	orrs	r2, r1
 8002760:	6961      	ldr	r1, [r4, #20]
 8002762:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002764:	498f      	ldr	r1, [pc, #572]	; (80029a4 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002766:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002768:	4029      	ands	r1, r5
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	68e1      	ldr	r1, [r4, #12]
 8002772:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800277a:	4a8b      	ldr	r2, [pc, #556]	; (80029a8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800277e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002780:	bf1c      	itt	ne
 8002782:	6a22      	ldrne	r2, [r4, #32]
 8002784:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002790:	4a86      	ldr	r2, [pc, #536]	; (80029ac <UART_SetConfig+0x25c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d117      	bne.n	80027c6 <UART_SetConfig+0x76>
 8002796:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <UART_SetConfig+0x260>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f200 80cf 	bhi.w	8002946 <UART_SetConfig+0x1f6>
 80027a8:	4a82      	ldr	r2, [pc, #520]	; (80029b4 <UART_SetConfig+0x264>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027b0:	f040 8099 	bne.w	80028e6 <UART_SetConfig+0x196>
    switch (clocksource)
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d822      	bhi.n	80027fe <UART_SetConfig+0xae>
 80027b8:	e8df f003 	tbb	[pc, r3]
 80027bc:	2193c8d9 	.word	0x2193c8d9
 80027c0:	212121ce 	.word	0x212121ce
 80027c4:	dd          	.byte	0xdd
 80027c5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c6:	4a7c      	ldr	r2, [pc, #496]	; (80029b8 <UART_SetConfig+0x268>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d106      	bne.n	80027da <UART_SetConfig+0x8a>
 80027cc:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <UART_SetConfig+0x260>)
 80027ce:	4a7b      	ldr	r2, [pc, #492]	; (80029bc <UART_SetConfig+0x26c>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	e7e7      	b.n	80027aa <UART_SetConfig+0x5a>
 80027da:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <UART_SetConfig+0x270>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d119      	bne.n	8002814 <UART_SetConfig+0xc4>
 80027e0:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <UART_SetConfig+0x260>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f000 80b7 	beq.w	800295e <UART_SetConfig+0x20e>
 80027f0:	d807      	bhi.n	8002802 <UART_SetConfig+0xb2>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80b8 	beq.w	8002968 <UART_SetConfig+0x218>
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	f000 80aa 	beq.w	8002952 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fe:	2001      	movs	r0, #1
 8002800:	e04e      	b.n	80028a0 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002802:	2b30      	cmp	r3, #48	; 0x30
 8002804:	d1fb      	bne.n	80027fe <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002806:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800280a:	f000 80b4 	beq.w	8002976 <UART_SetConfig+0x226>
 800280e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002812:	e083      	b.n	800291c <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002814:	4a6b      	ldr	r2, [pc, #428]	; (80029c4 <UART_SetConfig+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10f      	bne.n	800283a <UART_SetConfig+0xea>
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <UART_SetConfig+0x260>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	f000 809a 	beq.w	800295e <UART_SetConfig+0x20e>
 800282a:	d804      	bhi.n	8002836 <UART_SetConfig+0xe6>
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 809b 	beq.w	8002968 <UART_SetConfig+0x218>
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	e7e1      	b.n	80027fa <UART_SetConfig+0xaa>
 8002836:	2bc0      	cmp	r3, #192	; 0xc0
 8002838:	e7e4      	b.n	8002804 <UART_SetConfig+0xb4>
 800283a:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <UART_SetConfig+0x278>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d112      	bne.n	8002866 <UART_SetConfig+0x116>
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <UART_SetConfig+0x260>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284e:	f000 8086 	beq.w	800295e <UART_SetConfig+0x20e>
 8002852:	d805      	bhi.n	8002860 <UART_SetConfig+0x110>
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8087 	beq.w	8002968 <UART_SetConfig+0x218>
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	e7cc      	b.n	80027fa <UART_SetConfig+0xaa>
 8002860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002864:	e7ce      	b.n	8002804 <UART_SetConfig+0xb4>
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <UART_SetConfig+0x258>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d1c8      	bne.n	80027fe <UART_SetConfig+0xae>
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <UART_SetConfig+0x260>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800287a:	d015      	beq.n	80028a8 <UART_SetConfig+0x158>
 800287c:	d806      	bhi.n	800288c <UART_SetConfig+0x13c>
 800287e:	b15b      	cbz	r3, 8002898 <UART_SetConfig+0x148>
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002884:	d1bb      	bne.n	80027fe <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002886:	f7ff f8ad 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
        break;
 800288a:	e007      	b.n	800289c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002890:	d1b5      	bne.n	80027fe <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002892:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002896:	e008      	b.n	80028aa <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002898:	f7ff fc22 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800289c:	b928      	cbnz	r0, 80028aa <UART_SetConfig+0x15a>
 800289e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80028a0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80028a2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80028a8:	4848      	ldr	r0, [pc, #288]	; (80029cc <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028aa:	6862      	ldr	r2, [r4, #4]
 80028ac:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80028b0:	4283      	cmp	r3, r0
 80028b2:	d8a4      	bhi.n	80027fe <UART_SetConfig+0xae>
 80028b4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80028b8:	d8a1      	bhi.n	80027fe <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028ba:	0851      	lsrs	r1, r2, #1
 80028bc:	2500      	movs	r5, #0
 80028be:	468c      	mov	ip, r1
 80028c0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80028c4:	4629      	mov	r1, r5
 80028c6:	fbe0 c106 	umlal	ip, r1, r0, r6
 80028ca:	462b      	mov	r3, r5
 80028cc:	4660      	mov	r0, ip
 80028ce:	f7fe fa79 	bl	8000dc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <UART_SetConfig+0x280>)
 80028d4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80028d8:	429a      	cmp	r2, r3
 80028da:	d890      	bhi.n	80027fe <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	60d8      	str	r0, [r3, #12]
 80028e0:	e7dd      	b.n	800289e <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80028e2:	483a      	ldr	r0, [pc, #232]	; (80029cc <UART_SetConfig+0x27c>)
 80028e4:	e047      	b.n	8002976 <UART_SetConfig+0x226>
    switch (clocksource)
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d889      	bhi.n	80027fe <UART_SetConfig+0xae>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <UART_SetConfig+0x1a0>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002915 	.word	0x08002915
 80028f4:	0800293b 	.word	0x0800293b
 80028f8:	08002965 	.word	0x08002965
 80028fc:	080027ff 	.word	0x080027ff
 8002900:	08002941 	.word	0x08002941
 8002904:	080027ff 	.word	0x080027ff
 8002908:	080027ff 	.word	0x080027ff
 800290c:	080027ff 	.word	0x080027ff
 8002910:	0800280f 	.word	0x0800280f
        pclk = HAL_RCC_GetPCLK1Freq();
 8002914:	f7ff fbe4 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002918:	2800      	cmp	r0, #0
 800291a:	d0c0      	beq.n	800289e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800291c:	6862      	ldr	r2, [r4, #4]
 800291e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002922:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002926:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800292a:	f1a3 0110 	sub.w	r1, r3, #16
 800292e:	4291      	cmp	r1, r2
 8002930:	f63f af65 	bhi.w	80027fe <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	60d3      	str	r3, [r2, #12]
 8002938:	e7b1      	b.n	800289e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800293a:	f7ff fbe3 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
        break;
 800293e:	e7eb      	b.n	8002918 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002940:	f7ff f850 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
        break;
 8002944:	e7e8      	b.n	8002918 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002946:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800294a:	d1f6      	bne.n	800293a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 800294c:	f7ff fbda 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
        break;
 8002950:	e00f      	b.n	8002972 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002952:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002956:	d1f3      	bne.n	8002940 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002958:	f7ff f844 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
        break;
 800295c:	e009      	b.n	8002972 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002962:	d0be      	beq.n	80028e2 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002964:	4819      	ldr	r0, [pc, #100]	; (80029cc <UART_SetConfig+0x27c>)
 8002966:	e7d9      	b.n	800291c <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002968:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800296c:	d1d2      	bne.n	8002914 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800296e:	f7ff fbb7 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002972:	2800      	cmp	r0, #0
 8002974:	d093      	beq.n	800289e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002976:	6862      	ldr	r2, [r4, #4]
 8002978:	0853      	lsrs	r3, r2, #1
 800297a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800297e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002982:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002986:	f1a3 0110 	sub.w	r1, r3, #16
 800298a:	4291      	cmp	r1, r2
 800298c:	f63f af37 	bhi.w	80027fe <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002990:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002994:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002996:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002998:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e77d      	b.n	800289e <UART_SetConfig+0x14e>
 80029a2:	bf00      	nop
 80029a4:	efff69f3 	.word	0xefff69f3
 80029a8:	40008000 	.word	0x40008000
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40021000 	.word	0x40021000
 80029b4:	0800d4e0 	.word	0x0800d4e0
 80029b8:	40004400 	.word	0x40004400
 80029bc:	0800d4e3 	.word	0x0800d4e3
 80029c0:	40004800 	.word	0x40004800
 80029c4:	40004c00 	.word	0x40004c00
 80029c8:	40005000 	.word	0x40005000
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	000ffcff 	.word	0x000ffcff

080029d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029d6:	071a      	lsls	r2, r3, #28
{
 80029d8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029da:	d506      	bpl.n	80029ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029dc:	6801      	ldr	r1, [r0, #0]
 80029de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80029e0:	684a      	ldr	r2, [r1, #4]
 80029e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e6:	4322      	orrs	r2, r4
 80029e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ea:	07dc      	lsls	r4, r3, #31
 80029ec:	d506      	bpl.n	80029fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80029f2:	684a      	ldr	r2, [r1, #4]
 80029f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029f8:	4322      	orrs	r2, r4
 80029fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029fc:	0799      	lsls	r1, r3, #30
 80029fe:	d506      	bpl.n	8002a0e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a00:	6801      	ldr	r1, [r0, #0]
 8002a02:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a04:	684a      	ldr	r2, [r1, #4]
 8002a06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a0a:	4322      	orrs	r2, r4
 8002a0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a0e:	075a      	lsls	r2, r3, #29
 8002a10:	d506      	bpl.n	8002a20 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a12:	6801      	ldr	r1, [r0, #0]
 8002a14:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a16:	684a      	ldr	r2, [r1, #4]
 8002a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1c:	4322      	orrs	r2, r4
 8002a1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a20:	06dc      	lsls	r4, r3, #27
 8002a22:	d506      	bpl.n	8002a32 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a24:	6801      	ldr	r1, [r0, #0]
 8002a26:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a28:	688a      	ldr	r2, [r1, #8]
 8002a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a2e:	4322      	orrs	r2, r4
 8002a30:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a32:	0699      	lsls	r1, r3, #26
 8002a34:	d506      	bpl.n	8002a44 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a36:	6801      	ldr	r1, [r0, #0]
 8002a38:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002a3a:	688a      	ldr	r2, [r1, #8]
 8002a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a40:	4322      	orrs	r2, r4
 8002a42:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a44:	065a      	lsls	r2, r3, #25
 8002a46:	d50f      	bpl.n	8002a68 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002a4c:	684a      	ldr	r2, [r1, #4]
 8002a4e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002a52:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a54:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a58:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5a:	d105      	bne.n	8002a68 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a5c:	684a      	ldr	r2, [r1, #4]
 8002a5e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a60:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002a64:	4322      	orrs	r2, r4
 8002a66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	d506      	bpl.n	8002a7a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002a70:	6853      	ldr	r3, [r2, #4]
 8002a72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a76:	430b      	orrs	r3, r1
 8002a78:	6053      	str	r3, [r2, #4]
}
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <UART_WaitOnFlagUntilTimeout>:
{
 8002a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a84:	4604      	mov	r4, r0
 8002a86:	460f      	mov	r7, r1
 8002a88:	4616      	mov	r6, r2
 8002a8a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8c:	6822      	ldr	r2, [r4, #0]
 8002a8e:	69d3      	ldr	r3, [r2, #28]
 8002a90:	ea37 0303 	bics.w	r3, r7, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	42b3      	cmp	r3, r6
 8002a9c:	d001      	beq.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e01e      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002aa6:	d0f2      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa8:	f7fe fd54 	bl	8001554 <HAL_GetTick>
 8002aac:	eba0 0008 	sub.w	r0, r0, r8
 8002ab0:	4548      	cmp	r0, r9
 8002ab2:	d825      	bhi.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x84>
 8002ab4:	f1b9 0f00 	cmp.w	r9, #0
 8002ab8:	d022      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002aba:	6820      	ldr	r0, [r4, #0]
 8002abc:	6803      	ldr	r3, [r0, #0]
 8002abe:	075a      	lsls	r2, r3, #29
 8002ac0:	d5e4      	bpl.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ac2:	69c5      	ldr	r5, [r0, #28]
 8002ac4:	f015 0508 	ands.w	r5, r5, #8
 8002ac8:	d00c      	beq.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aca:	2508      	movs	r5, #8
 8002acc:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff fe16 	bl	8002700 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8002ad4:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ad6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8002ada:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
}
 8002ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ae4:	69c3      	ldr	r3, [r0, #28]
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	d5d0      	bpl.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aee:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fe05 	bl	8002700 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002af6:	2320      	movs	r3, #32
 8002af8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8002afc:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e7ed      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x64>

08002b04 <HAL_UART_Transmit>:
{
 8002b04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002b08:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002b0c:	2b20      	cmp	r3, #32
{
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460e      	mov	r6, r1
 8002b12:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b14:	d144      	bne.n	8002ba0 <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_UART_Transmit+0xa0>
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d042      	beq.n	8002ba4 <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	2500      	movs	r5, #0
 8002b22:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b26:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002b28:	f7fe fd14 	bl	8001554 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2c:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002b2e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b32:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002b36:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002b38:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	d103      	bne.n	8002b46 <HAL_UART_Transmit+0x42>
 8002b3e:	6922      	ldr	r2, [r4, #16]
 8002b40:	b90a      	cbnz	r2, 8002b46 <HAL_UART_Transmit+0x42>
 8002b42:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002b44:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8002b46:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	b94a      	cbnz	r2, 8002b66 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff ff91 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002b5a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002b5c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	b960      	cbnz	r0, 8002b7a <HAL_UART_Transmit+0x76>
}
 8002b60:	b004      	add	sp, #16
 8002b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	9303      	str	r3, [sp, #12]
 8002b6e:	f7ff ff85 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	b118      	cbz	r0, 8002b7e <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 8002b76:	2320      	movs	r3, #32
 8002b78:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	e7f0      	b.n	8002b60 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002b80:	b95e      	cbnz	r6, 8002b9a <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b82:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b8a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002b8c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002b90:	3a01      	subs	r2, #1
 8002b92:	b292      	uxth	r2, r2
 8002b94:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002b98:	e7d5      	b.n	8002b46 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b9a:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002b9e:	e7f4      	b.n	8002b8a <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	e7dd      	b.n	8002b60 <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e7db      	b.n	8002b60 <HAL_UART_Transmit+0x5c>

08002ba8 <HAL_UART_Receive>:
{
 8002ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bac:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bae:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002bb2:	2b20      	cmp	r3, #32
{
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	460e      	mov	r6, r1
 8002bb8:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bba:	d15e      	bne.n	8002c7a <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d05e      	beq.n	8002c7e <HAL_UART_Receive+0xd6>
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	d05c      	beq.n	8002c7e <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bc4:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bcc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fcbf 	bl	8001554 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002bd6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8002bd8:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002be0:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8002be2:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002be6:	d116      	bne.n	8002c16 <HAL_UART_Receive+0x6e>
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	42aa      	cmp	r2, r5
 8002bec:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002bf0:	bf18      	it	ne
 8002bf2:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 8002bf8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfc:	d11b      	bne.n	8002c36 <HAL_UART_Receive+0x8e>
 8002bfe:	6923      	ldr	r3, [r4, #16]
 8002c00:	b9cb      	cbnz	r3, 8002c36 <HAL_UART_Receive+0x8e>
 8002c02:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8002c04:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002c06:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002c0a:	b290      	uxth	r0, r2
 8002c0c:	b9a8      	cbnz	r0, 8002c3a <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8002c14:	e01e      	b.n	8002c54 <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 8002c16:	b92b      	cbnz	r3, 8002c24 <HAL_UART_Receive+0x7c>
 8002c18:	6922      	ldr	r2, [r4, #16]
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	257f      	movne	r5, #127	; 0x7f
 8002c20:	25ff      	moveq	r5, #255	; 0xff
 8002c22:	e7e7      	b.n	8002bf4 <HAL_UART_Receive+0x4c>
 8002c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_UART_Receive+0x4c>
 8002c2a:	6922      	ldr	r2, [r4, #16]
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	257f      	moveq	r5, #127	; 0x7f
 8002c32:	253f      	movne	r5, #63	; 0x3f
 8002c34:	e7de      	b.n	8002bf4 <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8002c36:	2700      	movs	r7, #0
 8002c38:	e7e5      	b.n	8002c06 <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3a:	f8cd 8000 	str.w	r8, [sp]
 8002c3e:	464b      	mov	r3, r9
 8002c40:	2200      	movs	r2, #0
 8002c42:	2120      	movs	r1, #32
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff19 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002c4a:	b130      	cbz	r0, 8002c5a <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8002c52:	2003      	movs	r0, #3
}
 8002c54:	b003      	add	sp, #12
 8002c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c5e:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8002c60:	b946      	cbnz	r6, 8002c74 <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c62:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002c66:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002c72:	e7c8      	b.n	8002c06 <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c74:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8002c78:	e7f5      	b.n	8002c66 <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	e7ea      	b.n	8002c54 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
 8002c80:	e7e8      	b.n	8002c54 <HAL_UART_Receive+0xac>

08002c82 <UART_CheckIdleState>:
{
 8002c82:	b530      	push	{r4, r5, lr}
 8002c84:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c86:	2500      	movs	r5, #0
{
 8002c88:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8002c8e:	f7fe fc61 	bl	8001554 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002c98:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c9a:	d51c      	bpl.n	8002cd6 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002ca0:	9200      	str	r2, [sp, #0]
 8002ca2:	9003      	str	r0, [sp, #12]
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff fee6 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	b180      	cbz	r0, 8002cd6 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	e852 3f00 	ldrex	r3, [r2]
 8002cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	e842 3100 	strex	r1, r3, [r2]
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d1f6      	bne.n	8002cb4 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8002cd2:	b005      	add	sp, #20
 8002cd4:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	0752      	lsls	r2, r2, #29
 8002cdc:	d523      	bpl.n	8002d26 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cde:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff fec6 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002cf0:	b1c8      	cbz	r0, 8002d26 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	e852 3f00 	ldrex	r3, [r2]
 8002cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d1f5      	bne.n	8002cf2 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	f102 0308 	add.w	r3, r2, #8
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	f102 0008 	add.w	r0, r2, #8
 8002d16:	e840 3100 	strex	r1, r3, [r0]
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	d1f3      	bne.n	8002d06 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002d24:	e7d1      	b.n	8002cca <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d32:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002d34:	e7ca      	b.n	8002ccc <UART_CheckIdleState+0x4a>

08002d36 <HAL_UART_Init>:
{
 8002d36:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d38:	4604      	mov	r4, r0
 8002d3a:	b340      	cbz	r0, 8002d8e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002d3e:	b91b      	cbnz	r3, 8002d48 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002d40:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002d44:	f7fe fae8 	bl	8001318 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d48:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d4a:	2324      	movs	r3, #36	; 0x24
 8002d4c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d58:	b113      	cbz	r3, 8002d60 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fe3a 	bl	80029d4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fcf5 	bl	8002750 <UART_SetConfig>
 8002d66:	2801      	cmp	r0, #1
 8002d68:	d011      	beq.n	8002d8e <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002d82:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002d84:	601a      	str	r2, [r3, #0]
}
 8002d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002d8a:	f7ff bf7a 	b.w	8002c82 <UART_CheckIdleState>
}
 8002d8e:	2001      	movs	r0, #1
 8002d90:	bd10      	pop	{r4, pc}
	...

08002d94 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002d96:	4d0e      	ldr	r5, [pc, #56]	; (8002dd0 <write_callback+0x3c>)
{
 8002d98:	460e      	mov	r6, r1
 8002d9a:	4614      	mov	r4, r2
  bool res = true;
 8002d9c:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8002d9e:	2700      	movs	r7, #0
  while (count) {
 8002da0:	b93c      	cbnz	r4, 8002db2 <write_callback+0x1e>
 8002da2:	e00b      	b.n	8002dbc <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8002da4:	18ea      	adds	r2, r5, r3
 8002da6:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002daa:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002dac:	3301      	adds	r3, #1
      count--;
 8002dae:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002db0:	702b      	strb	r3, [r5, #0]
 8002db2:	782b      	ldrb	r3, [r5, #0]
 8002db4:	2b1f      	cmp	r3, #31
 8002db6:	d802      	bhi.n	8002dbe <write_callback+0x2a>
 8002db8:	2c00      	cmp	r4, #0
 8002dba:	d1f3      	bne.n	8002da4 <write_callback+0x10>
    }
  }
  return res;
}
 8002dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d1ee      	bne.n	8002da0 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002dc2:	2121      	movs	r1, #33	; 0x21
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f000 fc85 	bl	80036d4 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8002dca:	702f      	strb	r7, [r5, #0]
 8002dcc:	e7e8      	b.n	8002da0 <write_callback+0xc>
 8002dce:	bf00      	nop
 8002dd0:	20000858 	.word	0x20000858

08002dd4 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002dda:	4615      	mov	r5, r2
 8002ddc:	b35a      	cbz	r2, 8002e36 <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002dde:	4e20      	ldr	r6, [pc, #128]	; (8002e60 <read_callback+0x8c>)
 8002de0:	4f20      	ldr	r7, [pc, #128]	; (8002e64 <read_callback+0x90>)
 8002de2:	7833      	ldrb	r3, [r6, #0]
 8002de4:	2bff      	cmp	r3, #255	; 0xff
 8002de6:	d008      	beq.n	8002dfa <read_callback+0x26>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002de8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002e60 <read_callback+0x8c>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002dec:	f04f 0900 	mov.w	r9, #0
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	18f0      	adds	r0, r6, r3
 8002df6:	1b1b      	subs	r3, r3, r4
 8002df8:	e013      	b.n	8002e22 <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002dfa:	2121      	movs	r1, #33	; 0x21
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	f000 fc77 	bl	80036f0 <ioRawReadBuffer>
  i_ridx = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	603b      	str	r3, [r7, #0]
  if (res == false)
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d1ee      	bne.n	8002de8 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8002e0a:	b003      	add	sp, #12
 8002e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002e10:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002e14:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002e18:	7832      	ldrb	r2, [r6, #0]
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	7032      	strb	r2, [r6, #0]
      count--;
 8002e1e:	3d01      	subs	r5, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002e20:	2201      	movs	r2, #1
 8002e22:	f896 c000 	ldrb.w	ip, [r6]
 8002e26:	18e1      	adds	r1, r4, r3
 8002e28:	f1bc 0f00 	cmp.w	ip, #0
 8002e2c:	d005      	beq.n	8002e3a <read_callback+0x66>
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	d1ee      	bne.n	8002e10 <read_callback+0x3c>
 8002e32:	b102      	cbz	r2, 8002e36 <read_callback+0x62>
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	2001      	movs	r0, #1
 8002e38:	e7e7      	b.n	8002e0a <read_callback+0x36>
 8002e3a:	b102      	cbz	r2, 8002e3e <read_callback+0x6a>
 8002e3c:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	d0f9      	beq.n	8002e36 <read_callback+0x62>
      uint8_t sync = 0xAA;
 8002e42:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8002e44:	2101      	movs	r1, #1
 8002e46:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8002e4a:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8002e4e:	f000 fc41 	bl	80036d4 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002e52:	2121      	movs	r1, #33	; 0x21
 8002e54:	4640      	mov	r0, r8
 8002e56:	f000 fc4b 	bl	80036f0 <ioRawReadBuffer>
  i_ridx = 0;
 8002e5a:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8002e5e:	e7c7      	b.n	8002df0 <read_callback+0x1c>
 8002e60:	20000830 	.word	0x20000830
 8002e64:	20000854 	.word	0x20000854

08002e68 <pb_io_flush_ostream>:
{
 8002e68:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002e6a:	4c06      	ldr	r4, [pc, #24]	; (8002e84 <pb_io_flush_ostream+0x1c>)
 8002e6c:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002e6e:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002e74:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002e76:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002e78:	f000 fc2c 	bl	80036d4 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	7023      	strb	r3, [r4, #0]
}
 8002e80:	bd10      	pop	{r4, pc}
 8002e82:	bf00      	nop
 8002e84:	20000858 	.word	0x20000858

08002e88 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <pb_io_flush_istream+0x10>)
 8002e8a:	22ff      	movs	r2, #255	; 0xff
 8002e8c:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <pb_io_flush_istream+0x14>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000830 	.word	0x20000830
 8002e9c:	20000854 	.word	0x20000854

08002ea0 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 8002ea0:	b510      	push	{r4, lr}
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <pb_io_ostream+0x18>)
 8002eaa:	e9c0 2100 	strd	r2, r1, [r0]
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	6082      	str	r2, [r0, #8]
}
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	bf00      	nop
 8002eb8:	08002d95 	.word	0x08002d95

08002ebc <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60c2      	str	r2, [r0, #12]
  return stream;
 8002ec0:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <pb_io_istream+0x14>)
 8002ec2:	e9c0 2100 	strd	r2, r1, [r0]
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	6082      	str	r2, [r0, #8]
}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	08002dd5 	.word	0x08002dd5

08002ed4 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002ed4:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8002ed6:	f000 fc19 	bl	800370c <ioRawDisableLLWrite>
  return 0;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	bd08      	pop	{r3, pc}

08002ede <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8002ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8002ee2:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
 8002ee6:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (int i = 0; i < array->size; i++)
 8002eea:	2600      	movs	r6, #0
 8002eec:	2c00      	cmp	r4, #0
{
 8002eee:	4607      	mov	r7, r0
 8002ef0:	4689      	mov	r9, r1
 8002ef2:	bf08      	it	eq
 8002ef4:	2404      	moveq	r4, #4
  for (int i = 0; i < array->size; i++)
 8002ef6:	4635      	mov	r5, r6
 8002ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8002efc:	429d      	cmp	r5, r3
 8002efe:	d301      	bcc.n	8002f04 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002f00:	2001      	movs	r0, #1
 8002f02:	e005      	b.n	8002f10 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002f04:	4649      	mov	r1, r9
 8002f06:	4638      	mov	r0, r7
 8002f08:	f002 ff7c 	bl	8005e04 <pb_encode_tag_for_field>
 8002f0c:	b910      	cbnz	r0, 8002f14 <encode_uint32+0x36>
      return false;
 8002f0e:	2000      	movs	r0, #0
}
 8002f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002f14:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8002f18:	2c02      	cmp	r4, #2
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8002f1a:	bf14      	ite	ne
 8002f1c:	599a      	ldrne	r2, [r3, r6]
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002f1e:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002f22:	4638      	mov	r0, r7
 8002f24:	17d3      	asrs	r3, r2, #31
 8002f26:	f002 fea5 	bl	8005c74 <pb_encode_varint>
 8002f2a:	4426      	add	r6, r4
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d0ee      	beq.n	8002f0e <encode_uint32+0x30>
  for (int i = 0; i < array->size; i++)
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7e1      	b.n	8002ef8 <encode_uint32+0x1a>

08002f34 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002f36:	6815      	ldr	r5, [r2, #0]
{
 8002f38:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8002f3a:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8002f3c:	f002 ff62 	bl	8005e04 <pb_encode_tag_for_field>
 8002f40:	b130      	cbz	r0, 8002f50 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8002f42:	686a      	ldr	r2, [r5, #4]
 8002f44:	4631      	mov	r1, r6
 8002f46:	4620      	mov	r0, r4
    return false;

  return true;
}
 8002f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8002f4c:	f003 b8b4 	b.w	80060b8 <pb_encode_string>
}
 8002f50:	bd70      	pop	{r4, r5, r6, pc}

08002f52 <decode_data_cb>:
{
 8002f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002f54:	6814      	ldr	r4, [r2, #0]
  uint8_t *pw = (uint8_t *)data->addr;
 8002f56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
{
 8002f5a:	4605      	mov	r5, r0
  data->nb_read = 0;
 8002f5c:	2300      	movs	r3, #0
    data->nb_read += itsize;
 8002f5e:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8002f60:	68ab      	ldr	r3, [r5, #8]
 8002f62:	b913      	cbnz	r3, 8002f6a <decode_data_cb+0x18>
  return true;
 8002f64:	2001      	movs	r0, #1
}
 8002f66:	b003      	add	sp, #12
 8002f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4669      	mov	r1, sp
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f002 f946 	bl	8005200 <pb_read>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d0f6      	beq.n	8002f66 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8002f78:	b13f      	cbz	r7, 8002f8a <decode_data_cb+0x38>
 8002f7a:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8002f7c:	bfc2      	ittt	gt
 8002f7e:	f89d 3000 	ldrbgt.w	r3, [sp]
 8002f82:	f807 3b01 	strbgt.w	r3, [r7], #1
      maxr--;
 8002f86:	f106 36ff 	addgt.w	r6, r6, #4294967295
    data->nb_read += itsize;
 8002f8a:	68e3      	ldr	r3, [r4, #12]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e7e6      	b.n	8002f5e <decode_data_cb+0xc>

08002f90 <aiPbMgrInit>:
{
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002f92:	4c1b      	ldr	r4, [pc, #108]	; (8003000 <aiPbMgrInit+0x70>)
{
 8002f94:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002f96:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002f9a:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8002f9c:	ad06      	add	r5, sp, #24
{
 8002f9e:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f007 fec0 	bl	800ad26 <memset>
  pb_io_stream_init();
 8002fa6:	f7ff ff95 	bl	8002ed4 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002faa:	4628      	mov	r0, r5
 8002fac:	2100      	movs	r1, #0
 8002fae:	f7ff ff85 	bl	8002ebc <pb_io_istream>
 8002fb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8002fb6:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 8002fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4668      	mov	r0, sp
 8002fc0:	f7ff ff6e 	bl	8002ea0 <pb_io_ostream>
 8002fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc6:	f104 0610 	add.w	r6, r4, #16
 8002fca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 8002fd0:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8002fd2:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 8002fd6:	b97f      	cbnz	r7, 8002ff8 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
}
 8002fde:	b00b      	add	sp, #44	; 0x2c
 8002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8002fe2:	320c      	adds	r2, #12
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002fe8:	6850      	ldr	r0, [r2, #4]
 8002fea:	1c5d      	adds	r5, r3, #1
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d1f8      	bne.n	8002fe2 <aiPbMgrInit+0x52>
 8002ff0:	b101      	cbz	r1, 8002ff4 <aiPbMgrInit+0x64>
 8002ff2:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 8002ff4:	6267      	str	r7, [r4, #36]	; 0x24
 8002ff6:	e7ef      	b.n	8002fd8 <aiPbMgrInit+0x48>
 8002ff8:	463a      	mov	r2, r7
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	e7f4      	b.n	8002fe8 <aiPbMgrInit+0x58>
 8002ffe:	bf00      	nop
 8003000:	20000880 	.word	0x20000880

08003004 <aiPbStrCopy>:
{
 8003004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003006:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8003008:	4a10      	ldr	r2, [pc, #64]	; (800304c <aiPbStrCopy+0x48>)
{
 800300a:	4605      	mov	r5, r0
 800300c:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 800300e:	6810      	ldr	r0, [r2, #0]
 8003010:	6851      	ldr	r1, [r2, #4]
 8003012:	8912      	ldrh	r2, [r2, #8]
 8003014:	ab01      	add	r3, sp, #4
 8003016:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8003018:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 800301a:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 800301c:	f7fd f928 	bl	8000270 <strlen>
  if (l > max)
 8003020:	42b0      	cmp	r0, r6
    l = max-1;
 8003022:	bf88      	it	hi
 8003024:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8003028:	b174      	cbz	r4, 8003048 <aiPbStrCopy+0x44>
  if (src && l)
 800302a:	b138      	cbz	r0, 800303c <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 800302c:	1c42      	adds	r2, r0, #1
 800302e:	4629      	mov	r1, r5
 8003030:	4620      	mov	r0, r4
}
 8003032:	b004      	add	sp, #16
 8003034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8003038:	f007 bf17 	b.w	800ae6a <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 800303c:	ab01      	add	r3, sp, #4
 800303e:	cb03      	ldmia	r3!, {r0, r1}
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	6020      	str	r0, [r4, #0]
 8003044:	6061      	str	r1, [r4, #4]
 8003046:	8123      	strh	r3, [r4, #8]
}
 8003048:	b004      	add	sp, #16
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	0800d4f0 	.word	0x0800d4f0

08003050 <encode_tensor_desc>:
{
 8003050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 8003054:	6816      	ldr	r6, [r2, #0]
    msg.dims.funcs.encode = encode_uint32;
 8003056:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80030b0 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 800305a:	f8df a058 	ldr.w	sl, [pc, #88]	; 80030b4 <encode_tensor_desc+0x64>
{
 800305e:	b09c      	sub	sp, #112	; 0x70
 8003060:	4605      	mov	r5, r0
 8003062:	4688      	mov	r8, r1
  for (size_t i = 0; i < tensors->size; i++)
 8003064:	2400      	movs	r4, #0
 8003066:	6873      	ldr	r3, [r6, #4]
 8003068:	42a3      	cmp	r3, r4
 800306a:	d801      	bhi.n	8003070 <encode_tensor_desc+0x20>
  return true;
 800306c:	2001      	movs	r0, #1
 800306e:	e01c      	b.n	80030aa <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8003070:	2264      	movs	r2, #100	; 0x64
 8003072:	2100      	movs	r1, #0
 8003074:	a803      	add	r0, sp, #12
 8003076:	f007 fe56 	bl	800ad26 <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 800307a:	68b1      	ldr	r1, [r6, #8]
 800307c:	6837      	ldr	r7, [r6, #0]
 800307e:	4620      	mov	r0, r4
 8003080:	466b      	mov	r3, sp
 8003082:	aa03      	add	r2, sp, #12
 8003084:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8003086:	4641      	mov	r1, r8
 8003088:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 800308a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 800308e:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 8003092:	f002 feb7 	bl	8005e04 <pb_encode_tag_for_field>
 8003096:	b138      	cbz	r0, 80030a8 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8003098:	aa03      	add	r2, sp, #12
 800309a:	4651      	mov	r1, sl
 800309c:	4628      	mov	r0, r5
 800309e:	f003 f85b 	bl	8006158 <pb_encode_submessage>
 80030a2:	b108      	cbz	r0, 80030a8 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 80030a4:	3401      	adds	r4, #1
 80030a6:	e7de      	b.n	8003066 <encode_tensor_desc+0x16>
      return false;
 80030a8:	2000      	movs	r0, #0
}
 80030aa:	b01c      	add	sp, #112	; 0x70
 80030ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b0:	08002edf 	.word	0x08002edf
 80030b4:	08018328 	.word	0x08018328

080030b8 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 80030b8:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80030ba:	6803      	ldr	r3, [r0, #0]
 80030bc:	600b      	str	r3, [r1, #0]
  resp->state = state;
 80030be:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <aiPbMgrSendResp+0x1c>)
 80030c2:	460a      	mov	r2, r1
 80030c4:	4904      	ldr	r1, [pc, #16]	; (80030d8 <aiPbMgrSendResp+0x20>)
 80030c6:	f002 ffc3 	bl	8006050 <pb_encode>
  pb_io_flush_ostream();
}
 80030ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80030ce:	f7ff becb 	b.w	8002e68 <pb_io_flush_ostream>
 80030d2:	bf00      	nop
 80030d4:	20000890 	.word	0x20000890
 80030d8:	0801848d 	.word	0x0801848d

080030dc <aiPbMgrWaitAndProcess>:
{
 80030dc:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80030de:	4c1d      	ldr	r4, [pc, #116]	; (8003154 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 80030e0:	f7ff fed2 	bl	8002e88 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80030e4:	491c      	ldr	r1, [pc, #112]	; (8003158 <aiPbMgrWaitAndProcess+0x7c>)
 80030e6:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80030ea:	4620      	mov	r0, r4
 80030ec:	f002 fccc 	bl	8005a88 <pb_decode_delimited>
 80030f0:	b348      	cbz	r0, 8003146 <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 80030f2:	f7ff fec9 	bl	8002e88 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80030fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 80030fe:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8003102:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003104:	2500      	movs	r5, #0
 8003106:	42a9      	cmp	r1, r5
 8003108:	d00d      	beq.n	8003126 <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 800310a:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 800310c:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8003110:	4286      	cmp	r6, r0
 8003112:	d11c      	bne.n	800314e <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8003114:	4911      	ldr	r1, [pc, #68]	; (800315c <aiPbMgrWaitAndProcess+0x80>)
 8003116:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 800311a:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 800311e:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8003120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003122:	42ab      	cmp	r3, r5
 8003124:	d10c      	bne.n	8003140 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8003126:	490d      	ldr	r1, [pc, #52]	; (800315c <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8003128:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 800312a:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 800312c:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->which_payload = respMsg_ack_tag;
 8003130:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  resp->payload.ack.param = param;
 8003134:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  resp->payload.ack.error = error;
 8003138:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  aiPbMgrSendResp(req, resp, state);
 800313c:	f7ff ffbc 	bl	80030b8 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8003140:	2301      	movs	r3, #1
 8003142:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
  pb_io_flush_istream();
 8003146:	f7ff fe9f 	bl	8002e88 <pb_io_flush_istream>
}
 800314a:	2000      	movs	r0, #0
 800314c:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800314e:	3501      	adds	r5, #1
 8003150:	e7d9      	b.n	8003106 <aiPbMgrWaitAndProcess+0x2a>
 8003152:	bf00      	nop
 8003154:	20000880 	.word	0x20000880
 8003158:	08018433 	.word	0x08018433
 800315c:	20000900 	.word	0x20000900

08003160 <aiPbMgrSendAck>:
{
 8003160:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8003162:	260c      	movs	r6, #12
{
 8003164:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 8003168:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 800316a:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 800316c:	608b      	str	r3, [r1, #8]
}
 800316e:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8003170:	f7ff bfa2 	b.w	80030b8 <aiPbMgrSendResp>

08003174 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8003174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8003176:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <aiPbMgrWaitAck+0x24>)
 800317a:	4808      	ldr	r0, [pc, #32]	; (800319c <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 800317c:	9302      	str	r3, [sp, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800317e:	aa02      	add	r2, sp, #8
  ackMsg ack = ackMsg_init_default;
 8003180:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003184:	f002 fc80 	bl	8005a88 <pb_decode_delimited>
 8003188:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 800318a:	f7ff fe7d 	bl	8002e88 <pb_io_flush_istream>
  return res;
}
 800318e:	9801      	ldr	r0, [sp, #4]
 8003190:	b005      	add	sp, #20
 8003192:	f85d fb04 	ldr.w	pc, [sp], #4
 8003196:	bf00      	nop
 8003198:	08018138 	.word	0x08018138
 800319c:	20000880 	.word	0x20000880

080031a0 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 80031a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80031a2:	4c19      	ldr	r4, [pc, #100]	; (8003208 <aiPbMgrSendLogV2+0x68>)
{
 80031a4:	460e      	mov	r6, r1
 80031a6:	4611      	mov	r1, r2
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80031a8:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
  ackMsg ack = ackMsg_init_default;
 80031ac:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80031ae:	2a02      	cmp	r2, #2
{
 80031b0:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 80031b2:	9302      	str	r3, [sp, #8]
 80031b4:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80031b8:	d123      	bne.n	8003202 <aiPbMgrSendLogV2+0x62>
    return false;

  size_t len = strlen(str);
 80031ba:	4608      	mov	r0, r1
 80031bc:	9101      	str	r1, [sp, #4]
 80031be:	f7fd f857 	bl	8000270 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80031c2:	287f      	cmp	r0, #127	; 0x7f
 80031c4:	bf28      	it	cs
 80031c6:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80031c8:	230d      	movs	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80031ca:	1c42      	adds	r2, r0, #1
 80031cc:	9901      	ldr	r1, [sp, #4]
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80031ce:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80031d2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  pbContextMgr.resp.payload.log.level = lvl;
 80031d6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80031da:	f007 fe46 	bl	800ae6a <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 80031de:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80031e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80031e6:	462a      	mov	r2, r5
 80031e8:	f7ff ff66 	bl	80030b8 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80031ec:	4620      	mov	r0, r4
 80031ee:	4907      	ldr	r1, [pc, #28]	; (800320c <aiPbMgrSendLogV2+0x6c>)
 80031f0:	aa02      	add	r2, sp, #8
 80031f2:	f002 fc49 	bl	8005a88 <pb_decode_delimited>
 80031f6:	4604      	mov	r4, r0
  pb_io_flush_istream();
 80031f8:	f7ff fe46 	bl	8002e88 <pb_io_flush_istream>
  return res;
}
 80031fc:	4620      	mov	r0, r4
 80031fe:	b004      	add	sp, #16
 8003200:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8003202:	461c      	mov	r4, r3
 8003204:	e7fa      	b.n	80031fc <aiPbMgrSendLogV2+0x5c>
 8003206:	bf00      	nop
 8003208:	20000880 	.word	0x20000880
 800320c:	08018138 	.word	0x08018138

08003210 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8003210:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <aiPbMgrReceiveData+0x28>)
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8003214:	4909      	ldr	r1, [pc, #36]	; (800323c <aiPbMgrReceiveData+0x2c>)
{
 8003216:	b086      	sub	sp, #24
  msg.datas.arg = (void *)data;
 8003218:	e9cd 3004 	strd	r3, r0, [sp, #16]
{
 800321c:	4604      	mov	r4, r0
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 800321e:	aa01      	add	r2, sp, #4
 8003220:	4807      	ldr	r0, [pc, #28]	; (8003240 <aiPbMgrReceiveData+0x30>)
 8003222:	f002 fc31 	bl	8005a88 <pb_decode_delimited>
  pb_io_flush_istream();
 8003226:	f7ff fe2f 	bl	8002e88 <pb_io_flush_istream>

  data->type = msg.type;
 800322a:	9b01      	ldr	r3, [sp, #4]
 800322c:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	60a3      	str	r3, [r4, #8]

  return true;
}
 8003232:	2001      	movs	r0, #1
 8003234:	b006      	add	sp, #24
 8003236:	bd10      	pop	{r4, pc}
 8003238:	08002f53 	.word	0x08002f53
 800323c:	0801816c 	.word	0x0801816c
 8003240:	20000880 	.word	0x20000880

08003244 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	4617      	mov	r7, r2
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 800324a:	2210      	movs	r2, #16
{
 800324c:	4606      	mov	r6, r0
 800324e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  resp->which_payload = respMsg_op_tag;
 8003250:	80ca      	strh	r2, [r1, #6]
{
 8003252:	460c      	mov	r4, r1
  if (name)
 8003254:	4618      	mov	r0, r3
 8003256:	b1fb      	cbz	r3, 8003298 <aiPbMgrSendOperator+0x54>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	3108      	adds	r1, #8
 800325c:	f7ff fed2 	bl	8003004 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8003260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003262:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8003264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003266:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8003268:	b1d5      	cbz	r5, 80032a0 <aiPbMgrSendOperator+0x5c>
    resp->payload.op.duration = perf->duration;
 800326a:	682b      	ldr	r3, [r5, #0]
 800326c:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 800326e:	686b      	ldr	r3, [r5, #4]
 8003270:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8003272:	68eb      	ldr	r3, [r5, #12]
 8003274:	b193      	cbz	r3, 800329c <aiPbMgrSendOperator+0x58>
      array.size = perf->counter_n;
 8003276:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8003278:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 800327c:	2304      	movs	r3, #4
 800327e:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <aiPbMgrSendOperator+0x68>)
 8003282:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8003284:	ab01      	add	r3, sp, #4
 8003286:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8003288:	4630      	mov	r0, r6
 800328a:	463a      	mov	r2, r7
 800328c:	4621      	mov	r1, r4
 800328e:	f7ff ff13 	bl	80030b8 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8003292:	2001      	movs	r0, #1
 8003294:	b005      	add	sp, #20
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8003298:	720b      	strb	r3, [r1, #8]
 800329a:	e7e1      	b.n	8003260 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 800329c:	65a3      	str	r3, [r4, #88]	; 0x58
 800329e:	e7f3      	b.n	8003288 <aiPbMgrSendOperator+0x44>
    resp->payload.op.duration = 0.0f;
 80032a0:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 80032a2:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 80032a6:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 80032a8:	e7ee      	b.n	8003288 <aiPbMgrSendOperator+0x44>
 80032aa:	bf00      	nop
 80032ac:	08002edf 	.word	0x08002edf

080032b0 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 80032b0:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80032b2:	240a      	movs	r4, #10
 80032b4:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80032b6:	f44f 7440 	mov.w	r4, #768	; 0x300
 80032ba:	608c      	str	r4, [r1, #8]
#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  resp->payload.sync.rtid = (uint32_t)param >> 16;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80032bc:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 80032be:	0c12      	lsrs	r2, r2, #16

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80032c4:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80032c6:	610a      	str	r2, [r1, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 80032c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80032cc:	2200      	movs	r2, #0
 80032ce:	f7ff bef3 	b.w	80030b8 <aiPbMgrSendResp>
	...

080032d4 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80032d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80032d6:	f003 f9c7 	bl	8006668 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80032da:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80032e6:	b2c0      	uxtb	r0, r0
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	9000      	str	r0, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <aiPlatformVersion+0x28>)
 80032f0:	4611      	mov	r1, r2
 80032f2:	f000 fa31 	bl	8003758 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80032f6:	b007      	add	sp, #28
 80032f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80032fc:	0800cd20 	.word	0x0800cd20

08003300 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8003300:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003302:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003306:	b2c4      	uxtb	r4, r0
  if (fct)
 8003308:	b129      	cbz	r1, 8003316 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800330a:	4622      	mov	r2, r4
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 800330e:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003312:	f000 ba21 	b.w	8003758 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003316:	4621      	mov	r1, r4
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <aiLogErr+0x28>)
}
 800331a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800331e:	461a      	mov	r2, r3
 8003320:	f000 ba1a 	b.w	8003758 <lc_print>
 8003324:	0800cd52 	.word	0x0800cd52
 8003328:	0800cd7f 	.word	0x0800cd7f

0800332c <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 800332c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8003330:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 8003332:	6807      	ldr	r7, [r0, #0]
{
 8003334:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 8003336:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800333a:	486b      	ldr	r0, [pc, #428]	; (80034e8 <aiPrintBufferInfo+0x1bc>)
 800333c:	6809      	ldr	r1, [r1, #0]
 800333e:	f000 fa0b 	bl	8003758 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8003342:	696a      	ldr	r2, [r5, #20]
 8003344:	69a8      	ldr	r0, [r5, #24]
 8003346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800334a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800334e:	d119      	bne.n	8003384 <aiPrintBufferInfo+0x58>
  {
    LC_PRINT("%d,%d)",
 8003350:	6842      	ldr	r2, [r0, #4]
 8003352:	6901      	ldr	r1, [r0, #16]
 8003354:	4865      	ldr	r0, [pc, #404]	; (80034ec <aiPrintBufferInfo+0x1c0>)
 8003356:	f000 f9ff 	bl	8003758 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800335a:	2101      	movs	r1, #1
 800335c:	4628      	mov	r0, r5
 800335e:	f002 ff9b 	bl	8006298 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003362:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003366:	4601      	mov	r1, r0
 8003368:	4861      	ldr	r0, [pc, #388]	; (80034f0 <aiPrintBufferInfo+0x1c4>)
 800336a:	f000 f9f5 	bl	8003758 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800336e:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003370:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8003374:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003378:	d113      	bne.n	80033a2 <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800337a:	485e      	ldr	r0, [pc, #376]	; (80034f4 <aiPrintBufferInfo+0x1c8>)
 800337c:	4621      	mov	r1, r4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800337e:	f000 f9eb 	bl	8003758 <lc_print>
 8003382:	e046      	b.n	8003412 <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003384:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8003388:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800338a:	d105      	bne.n	8003398 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 800338c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8003390:	4859      	ldr	r0, [pc, #356]	; (80034f8 <aiPrintBufferInfo+0x1cc>)
 8003392:	f000 f9e1 	bl	8003758 <lc_print>
 8003396:	e7e0      	b.n	800335a <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8003398:	4858      	ldr	r0, [pc, #352]	; (80034fc <aiPrintBufferInfo+0x1d0>)
 800339a:	4619      	mov	r1, r3
 800339c:	f000 f9dc 	bl	8003758 <lc_print>
 80033a0:	e7db      	b.n	800335a <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80033a2:	2e03      	cmp	r6, #3
 80033a4:	d102      	bne.n	80033ac <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80033a6:	4856      	ldr	r0, [pc, #344]	; (8003500 <aiPrintBufferInfo+0x1d4>)
 80033a8:	4621      	mov	r1, r4
 80033aa:	e7e8      	b.n	800337e <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80033ac:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8003518 <aiPrintBufferInfo+0x1ec>
 80033b0:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 80033b4:	f108 0102 	add.w	r1, r8, #2
 80033b8:	4622      	mov	r2, r4
 80033ba:	bf18      	it	ne
 80033bc:	4641      	movne	r1, r8
 80033be:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 80033c2:	f000 f9c9 	bl	8003758 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80033c6:	2e02      	cmp	r6, #2
 80033c8:	d123      	bne.n	8003412 <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80033ca:	68ab      	ldr	r3, [r5, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d069      	beq.n	80034a4 <aiPrintBufferInfo+0x178>
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	07d2      	lsls	r2, r2, #31
 80033d4:	d566      	bpl.n	80034a4 <aiPrintBufferInfo+0x178>
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d063      	beq.n	80034a4 <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80033dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 80033e0:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 80033e4:	f1ba 0f04 	cmp.w	sl, #4
      LC_PRINT(" %d:", s_);
 80033e8:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 80033ea:	46d3      	mov	fp, sl
 80033ec:	bf28      	it	cs
 80033ee:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 80033f2:	f000 f9b1 	bl	8003758 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80033f6:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80033f8:	f04f 0900 	mov.w	r9, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80033fc:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 8003400:	455e      	cmp	r6, fp
 8003402:	db18      	blt.n	8003436 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <aiPrintBufferInfo+0x1d8>)
 8003406:	1cd8      	adds	r0, r3, #3
 8003408:	45d3      	cmp	fp, sl
 800340a:	bf38      	it	cc
 800340c:	4618      	movcc	r0, r3
 800340e:	f000 f9a3 	bl	8003758 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8003412:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8003414:	2101      	movs	r1, #1
 8003416:	4628      	mov	r0, r5
  if (buffer->data)
 8003418:	2c00      	cmp	r4, #0
 800341a:	d054      	beq.n	80034c6 <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 800341c:	f002 ff3c 	bl	8006298 <ai_buffer_get_size>
 8003420:	4639      	mov	r1, r7
 8003422:	f002 ff6d 	bl	8006300 <ai_buffer_get_byte_size>
 8003426:	4602      	mov	r2, r0
 8003428:	4837      	ldr	r0, [pc, #220]	; (8003508 <aiPrintBufferInfo+0x1dc>)
 800342a:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 800342c:	b003      	add	sp, #12
 800342e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 8003432:	f000 b991 	b.w	8003758 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003436:	68ab      	ldr	r3, [r5, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02e      	beq.n	800349a <aiPrintBufferInfo+0x16e>
 800343c:	681c      	ldr	r4, [r3, #0]
 800343e:	f014 0401 	ands.w	r4, r4, #1
 8003442:	d02d      	beq.n	80034a0 <aiPrintBufferInfo+0x174>
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	2a00      	cmp	r2, #0
 8003448:	d049      	beq.n	80034de <aiPrintBufferInfo+0x1b2>
 800344a:	6853      	ldr	r3, [r2, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d049      	beq.n	80034e4 <aiPrintBufferInfo+0x1b8>
 8003450:	8851      	ldrh	r1, [r2, #2]
 8003452:	42b1      	cmp	r1, r6
 8003454:	dd46      	ble.n	80034e4 <aiPrintBufferInfo+0x1b8>
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800345c:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800345e:	2a00      	cmp	r2, #0
 8003460:	d03e      	beq.n	80034e0 <aiPrintBufferInfo+0x1b4>
 8003462:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003464:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003466:	f014 0402 	ands.w	r4, r4, #2
 800346a:	d00f      	beq.n	800348c <aiPrintBufferInfo+0x160>
 800346c:	b1b3      	cbz	r3, 800349c <aiPrintBufferInfo+0x170>
 800346e:	8852      	ldrh	r2, [r2, #2]
 8003470:	42b2      	cmp	r2, r6
 8003472:	dd35      	ble.n	80034e0 <aiPrintBufferInfo+0x1b4>
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8003478:	f7fd f866 	bl	8000548 <__aeabi_f2d>
 800347c:	9400      	str	r4, [sp, #0]
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4640      	mov	r0, r8
 8003484:	f000 f968 	bl	8003758 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003488:	3601      	adds	r6, #1
 800348a:	e7b9      	b.n	8003400 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800348c:	b133      	cbz	r3, 800349c <aiPrintBufferInfo+0x170>
 800348e:	8852      	ldrh	r2, [r2, #2]
 8003490:	42b2      	cmp	r2, r6
 8003492:	ddf1      	ble.n	8003478 <aiPrintBufferInfo+0x14c>
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	579c      	ldrsb	r4, [r3, r6]
 8003498:	e7ee      	b.n	8003478 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800349a:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800349c:	461c      	mov	r4, r3
 800349e:	e7eb      	b.n	8003478 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80034a0:	4648      	mov	r0, r9
 80034a2:	e7e9      	b.n	8003478 <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 80034a4:	f019 0f78 	tst.w	r9, #120	; 0x78
 80034a8:	d102      	bne.n	80034b0 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80034aa:	4818      	ldr	r0, [pc, #96]	; (800350c <aiPrintBufferInfo+0x1e0>)
 80034ac:	4621      	mov	r1, r4
 80034ae:	e766      	b.n	800337e <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80034b0:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80034b4:	3a40      	subs	r2, #64	; 0x40
 80034b6:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80034ba:	4411      	add	r1, r2
 80034bc:	4814      	ldr	r0, [pc, #80]	; (8003510 <aiPrintBufferInfo+0x1e4>)
 80034be:	1a61      	subs	r1, r4, r1
 80034c0:	f000 f94a 	bl	8003758 <lc_print>
 80034c4:	e7a5      	b.n	8003412 <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 80034c6:	f002 fee7 	bl	8006298 <ai_buffer_get_size>
 80034ca:	4639      	mov	r1, r7
 80034cc:	f002 ff18 	bl	8006300 <ai_buffer_get_byte_size>
 80034d0:	4601      	mov	r1, r0
 80034d2:	4810      	ldr	r0, [pc, #64]	; (8003514 <aiPrintBufferInfo+0x1e8>)
}
 80034d4:	b003      	add	sp, #12
 80034d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80034da:	f000 b93d 	b.w	8003758 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80034de:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80034e0:	2400      	movs	r4, #0
 80034e2:	e7c9      	b.n	8003478 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80034e4:	4648      	mov	r0, r9
 80034e6:	e7ba      	b.n	800345e <aiPrintBufferInfo+0x132>
 80034e8:	0800cdaf 	.word	0x0800cdaf
 80034ec:	0800cdba 	.word	0x0800cdba
 80034f0:	0800cdcf 	.word	0x0800cdcf
 80034f4:	0800cdd3 	.word	0x0800cdd3
 80034f8:	0800cdc1 	.word	0x0800cdc1
 80034fc:	0800cdcb 	.word	0x0800cdcb
 8003500:	0800cddb 	.word	0x0800cddb
 8003504:	0800cdab 	.word	0x0800cdab
 8003508:	0800ce08 	.word	0x0800ce08
 800350c:	0800cdf5 	.word	0x0800cdf5
 8003510:	0800ce00 	.word	0x0800ce00
 8003514:	0800ce12 	.word	0x0800ce12
 8003518:	0800cda7 	.word	0x0800cda7

0800351c <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 800351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003520:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8003522:	484b      	ldr	r0, [pc, #300]	; (8003650 <aiPrintNetworkInfo+0x134>)
 8003524:	f000 f918 	bl	8003758 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8003528:	6821      	ldr	r1, [r4, #0]
 800352a:	484a      	ldr	r0, [pc, #296]	; (8003654 <aiPrintNetworkInfo+0x138>)
 800352c:	f000 f914 	bl	8003758 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003530:	6861      	ldr	r1, [r4, #4]
 8003532:	4849      	ldr	r0, [pc, #292]	; (8003658 <aiPrintNetworkInfo+0x13c>)
 8003534:	f000 f910 	bl	8003758 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003538:	68a1      	ldr	r1, [r4, #8]
 800353a:	4848      	ldr	r0, [pc, #288]	; (800365c <aiPrintNetworkInfo+0x140>)
 800353c:	f000 f90c 	bl	8003758 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8003540:	68e1      	ldr	r1, [r4, #12]
 8003542:	4847      	ldr	r0, [pc, #284]	; (8003660 <aiPrintNetworkInfo+0x144>)
 8003544:	f000 f908 	bl	8003758 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8003548:	69a1      	ldr	r1, [r4, #24]
 800354a:	780b      	ldrb	r3, [r1, #0]
 800354c:	b113      	cbz	r3, 8003554 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800354e:	4845      	ldr	r0, [pc, #276]	; (8003664 <aiPrintNetworkInfo+0x148>)
 8003550:	f000 f902 	bl	8003758 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003554:	7f21      	ldrb	r1, [r4, #28]
 8003556:	7fa3      	ldrb	r3, [r4, #30]
 8003558:	7f62      	ldrb	r2, [r4, #29]
 800355a:	4843      	ldr	r0, [pc, #268]	; (8003668 <aiPrintNetworkInfo+0x14c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 800355c:	4f43      	ldr	r7, [pc, #268]	; (800366c <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800355e:	f000 f8fb 	bl	8003758 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8003562:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003566:	4842      	ldr	r0, [pc, #264]	; (8003670 <aiPrintNetworkInfo+0x154>)
 8003568:	f000 f8f6 	bl	8003758 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800356c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800356e:	4841      	ldr	r0, [pc, #260]	; (8003674 <aiPrintNetworkInfo+0x158>)
 8003570:	f000 f8f2 	bl	8003758 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8003574:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8003578:	483f      	ldr	r0, [pc, #252]	; (8003678 <aiPrintNetworkInfo+0x15c>)
 800357a:	f000 f8ed 	bl	8003758 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800357e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003580:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003584:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003588:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800358c:	42ab      	cmp	r3, r5
 800358e:	dc25      	bgt.n	80035dc <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003590:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8003594:	4839      	ldr	r0, [pc, #228]	; (800367c <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003596:	4f35      	ldr	r7, [pc, #212]	; (800366c <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003598:	f000 f8de 	bl	8003758 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800359c:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800359e:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 80035a2:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80035a6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80035aa:	42ab      	cmp	r3, r5
 80035ac:	dc25      	bgt.n	80035fa <aiPrintNetworkInfo+0xde>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80035ae:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80035b0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80035b2:	4833      	ldr	r0, [pc, #204]	; (8003680 <aiPrintNetworkInfo+0x164>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80035b4:	4e33      	ldr	r6, [pc, #204]	; (8003684 <aiPrintNetworkInfo+0x168>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80035b6:	f000 f8cf 	bl	8003758 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80035ba:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80035bc:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80035be:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 80035c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80035c4:	42ab      	cmp	r3, r5
 80035c6:	dc27      	bgt.n	8003618 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80035c8:	4e2f      	ldr	r6, [pc, #188]	; (8003688 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 80035ca:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80035cc:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80035ce:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80035d2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	dc2d      	bgt.n	8003634 <aiPrintNetworkInfo+0x118>
  }
}
 80035d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80035dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 80035de:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80035e0:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80035e4:	4638      	mov	r0, r7
 80035e6:	f000 f8b7 	bl	8003758 <lc_print>
      aiPrintBufferInfo(buffer);
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff fe9e 	bl	800332c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80035f0:	4648      	mov	r0, r9
 80035f2:	f000 f8b1 	bl	8003758 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80035f6:	3501      	adds	r5, #1
 80035f8:	e7c6      	b.n	8003588 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80035fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80035fc:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80035fe:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8003602:	4638      	mov	r0, r7
 8003604:	f000 f8a8 	bl	8003758 <lc_print>
      aiPrintBufferInfo(buffer);
 8003608:	4630      	mov	r0, r6
 800360a:	f7ff fe8f 	bl	800332c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 800360e:	4648      	mov	r0, r9
 8003610:	f000 f8a2 	bl	8003758 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003614:	3501      	adds	r5, #1
 8003616:	e7c6      	b.n	80035a6 <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8003618:	4629      	mov	r1, r5
 800361a:	4630      	mov	r0, r6
 800361c:	f000 f89c 	bl	8003758 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8003620:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003622:	fb07 0005 	mla	r0, r7, r5, r0
 8003626:	f7ff fe81 	bl	800332c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800362a:	4640      	mov	r0, r8
 800362c:	f000 f894 	bl	8003758 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003630:	3501      	adds	r5, #1
 8003632:	e7c6      	b.n	80035c2 <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f000 f88e 	bl	8003758 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 800363c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800363e:	fb07 0005 	mla	r0, r7, r5, r0
 8003642:	f7ff fe73 	bl	800332c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003646:	4640      	mov	r0, r8
 8003648:	f000 f886 	bl	8003758 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 800364c:	3501      	adds	r5, #1
 800364e:	e7c0      	b.n	80035d2 <aiPrintNetworkInfo+0xb6>
 8003650:	0800ce24 	.word	0x0800ce24
 8003654:	0800ce3e 	.word	0x0800ce3e
 8003658:	0800ce59 	.word	0x0800ce59
 800365c:	0800ce74 	.word	0x0800ce74
 8003660:	0800ce8f 	.word	0x0800ce8f
 8003664:	0800ceaa 	.word	0x0800ceaa
 8003668:	0800cec5 	.word	0x0800cec5
 800366c:	0800cf3e 	.word	0x0800cf3e
 8003670:	0800cee6 	.word	0x0800cee6
 8003674:	0800cf08 	.word	0x0800cf08
 8003678:	0800cf23 	.word	0x0800cf23
 800367c:	0800cf49 	.word	0x0800cf49
 8003680:	0800cf64 	.word	0x0800cf64
 8003684:	0800cf82 	.word	0x0800cf82
 8003688:	0800cf8b 	.word	0x0800cf8b

0800368c <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 800368c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	429a      	cmp	r2, r3
 8003694:	d207      	bcs.n	80036a6 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
 800369a:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800369c:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 800369e:	3301      	adds	r3, #1
    buffer->buffer[buffer->pos] = 0;
 80036a0:	2100      	movs	r1, #0
    buffer->pos++;
 80036a2:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80036a4:	54d1      	strb	r1, [r2, r3]
  }
}
 80036a6:	4770      	bx	lr

080036a8 <_put_c_driver>:
{
 80036a8:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <_put_c_driver+0x24>)
{
 80036ac:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b13b      	cbz	r3, 80036c4 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80036b4:	4806      	ldr	r0, [pc, #24]	; (80036d0 <_put_c_driver+0x28>)
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	2201      	movs	r2, #1
 80036bc:	f10d 0107 	add.w	r1, sp, #7
 80036c0:	f7ff fa20 	bl	8002b04 <HAL_UART_Transmit>
}
 80036c4:	b003      	add	sp, #12
 80036c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	200007a0 	.word	0x200007a0

080036d4 <ioRawWriteBuffer>:
{
 80036d4:	b508      	push	{r3, lr}
 80036d6:	b28a      	uxth	r2, r1
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	4601      	mov	r1, r0
 80036de:	4803      	ldr	r0, [pc, #12]	; (80036ec <ioRawWriteBuffer+0x18>)
 80036e0:	f7ff fa10 	bl	8002b04 <HAL_UART_Transmit>
}
 80036e4:	fab0 f080 	clz	r0, r0
 80036e8:	0940      	lsrs	r0, r0, #5
 80036ea:	bd08      	pop	{r3, pc}
 80036ec:	200007a0 	.word	0x200007a0

080036f0 <ioRawReadBuffer>:
{
 80036f0:	b508      	push	{r3, lr}

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 80036f2:	b28a      	uxth	r2, r1
 80036f4:	f04f 33ff 	mov.w	r3, #4294967295
 80036f8:	4601      	mov	r1, r0
 80036fa:	4803      	ldr	r0, [pc, #12]	; (8003708 <ioRawReadBuffer+0x18>)
 80036fc:	f7ff fa54 	bl	8002ba8 <HAL_UART_Receive>
}
 8003700:	fab0 f080 	clz	r0, r0
 8003704:	0940      	lsrs	r0, r0, #5
 8003706:	bd08      	pop	{r3, pc}
 8003708:	200007a0 	.word	0x200007a0

0800370c <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <ioRawDisableLLWrite+0x8>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
}
 8003712:	4770      	bx	lr
 8003714:	2000000c 	.word	0x2000000c

08003718 <_write>:
{
 8003718:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800371a:	1e14      	subs	r4, r2, #0
 800371c:	da0a      	bge.n	8003734 <_write+0x1c>
 800371e:	3801      	subs	r0, #1
 8003720:	2801      	cmp	r0, #1
 8003722:	d907      	bls.n	8003734 <_write+0x1c>
    errno = EBADF;
 8003724:	f007 fb74 	bl	800ae10 <__errno>
 8003728:	2309      	movs	r3, #9
 800372a:	6003      	str	r3, [r0, #0]
    return -1;
 800372c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003730:	4620      	mov	r0, r4
 8003732:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <_write+0x38>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f9      	beq.n	8003730 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800373c:	b2a2      	uxth	r2, r4
 800373e:	4805      	ldr	r0, [pc, #20]	; (8003754 <_write+0x3c>)
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	f7ff f9de 	bl	8002b04 <HAL_UART_Transmit>
  return (status ? count : 0);
 8003748:	2800      	cmp	r0, #0
 800374a:	bf18      	it	ne
 800374c:	2400      	movne	r4, #0
 800374e:	e7ef      	b.n	8003730 <_write+0x18>
 8003750:	2000000c 	.word	0x2000000c
 8003754:	200007a0 	.word	0x200007a0

08003758 <lc_print>:
{
 8003758:	b40f      	push	{r0, r1, r2, r3}
 800375a:	b507      	push	{r0, r1, r2, lr}
 800375c:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800375e:	2100      	movs	r1, #0
{
 8003760:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003764:	4804      	ldr	r0, [pc, #16]	; (8003778 <lc_print+0x20>)
  va_start(ap, fmt);
 8003766:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003768:	f001 f890 	bl	800488c <vlc_print>
}
 800376c:	b003      	add	sp, #12
 800376e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003772:	b004      	add	sp, #16
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	080036a9 	.word	0x080036a9

0800377c <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 800377c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 800377e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003782:	2100      	movs	r1, #0
 8003784:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8003786:	4804      	ldr	r0, [pc, #16]	; (8003798 <lc_vsnprint+0x1c>)
 8003788:	a901      	add	r1, sp, #4
 800378a:	f001 f87f 	bl	800488c <vlc_print>
  return buffer.pos - 1;
}
 800378e:	9803      	ldr	r0, [sp, #12]
 8003790:	3801      	subs	r0, #1
 8003792:	b005      	add	sp, #20
 8003794:	f85d fb04 	ldr.w	pc, [sp], #4
 8003798:	0800368d 	.word	0x0800368d

0800379c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 800379c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800379e:	4d11      	ldr	r5, [pc, #68]	; (80037e4 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 80037a0:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 80037a2:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 80037a4:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 80037a8:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80037ac:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80037b0:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80037b2:	f006 fc99 	bl	800a0e8 <malloc>

  /* remember size */
  if (ptr) {
 80037b6:	b1a0      	cbz	r0, 80037e2 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80037b8:	1903      	adds	r3, r0, r4
 80037ba:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80037bc:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80037be:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	07db      	lsls	r3, r3, #31
 80037c4:	d50c      	bpl.n	80037e0 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80037c6:	68eb      	ldr	r3, [r5, #12]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80037cc:	686b      	ldr	r3, [r5, #4]
 80037ce:	4423      	add	r3, r4
 80037d0:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80037d2:	69ab      	ldr	r3, [r5, #24]
 80037d4:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80037d6:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 80037d8:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 80037da:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 80037dc:	bf88      	it	hi
 80037de:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80037e0:	3004      	adds	r0, #4
}
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000a2c 	.word	0x20000a2c
 80037e8:	efdcba98 	.word	0xefdcba98

080037ec <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80037ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f0:	4604      	mov	r4, r0
 80037f2:	468a      	mov	sl, r1
  if (!t)
 80037f4:	4617      	mov	r7, r2
 80037f6:	b382      	cbz	r2, 800385a <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 80037f8:	f7fe fc6c 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 80037fc:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 80037fe:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003800:	9001      	str	r0, [sp, #4]
 8003802:	4651      	mov	r1, sl
 8003804:	4620      	mov	r0, r4
 8003806:	f7fd fadd 	bl	8000dc4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 800380a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 800380e:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003810:	fba4 0106 	umull	r0, r1, r4, r6
 8003814:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003816:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003860 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 800381a:	2300      	movs	r3, #0
 800381c:	fb06 110a 	mla	r1, r6, sl, r1
 8003820:	f7fd fad0 	bl	8000dc4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003824:	fbab 3106 	umull	r3, r1, fp, r6
 8003828:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800382a:	fba4 0109 	umull	r0, r1, r4, r9
 800382e:	9a01      	ldr	r2, [sp, #4]
 8003830:	fb09 110a 	mla	r1, r9, sl, r1
 8003834:	2300      	movs	r3, #0
 8003836:	f7fd fac5 	bl	8000dc4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 800383a:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 800383c:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 800383e:	fbab 8909 	umull	r8, r9, fp, r9
 8003842:	eba0 0008 	sub.w	r0, r0, r8
 8003846:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 800384a:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 800384e:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003850:	60f8      	str	r0, [r7, #12]
  return 0;
 8003852:	2000      	movs	r0, #0
}
 8003854:	b003      	add	sp, #12
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	e7f9      	b.n	8003854 <dwtCyclesToTime+0x68>
 8003860:	000f4240 	.word	0x000f4240

08003864 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8003864:	b510      	push	{r4, lr}
 8003866:	ed2d 8b02 	vpush	{d8}
 800386a:	b082      	sub	sp, #8
 800386c:	4604      	mov	r4, r0
 800386e:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 8003870:	f7fe fc30 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 8003874:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 8003876:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 800387a:	4620      	mov	r0, r4
 800387c:	f7fd fa5c 	bl	8000d38 <__aeabi_ul2f>
 8003880:	eddf 7a06 	vldr	s15, [pc, #24]	; 800389c <dwtCyclesToFloatMs+0x38>
 8003884:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8003888:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 800388c:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 8003890:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8003894:	b002      	add	sp, #8
 8003896:	ecbd 8b02 	vpop	{d8}
 800389a:	bd10      	pop	{r4, pc}
 800389c:	447a0000 	.word	0x447a0000

080038a0 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <getFlashCacheConf+0x38>)
{
 80038a2:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80038a8:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80038ae:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80038b0:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 80038b4:	bf4c      	ite	mi
 80038b6:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80038ba:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80038be:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 80038c0:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 80038c2:	bf48      	it	mi
 80038c4:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 80038c8:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 80038ca:	bf48      	it	mi
 80038cc:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 80038d0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80038d4:	b002      	add	sp, #8
 80038d6:	4770      	bx	lr
 80038d8:	40022000 	.word	0x40022000

080038dc <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 80038dc:	b510      	push	{r4, lr}
 80038de:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 80038e0:	f7fe fbf8 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80038e4:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 80038e6:	f7fe fbf5 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80038ea:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 80038ec:	f7ff ffd8 	bl	80038a0 <getFlashCacheConf>
 80038f0:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 80038f2:	f7fd fe53 	bl	800159c <HAL_GetDEVID>
 80038f6:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 80038f8:	f7fd fe4a 	bl	8001590 <HAL_GetREVID>
 80038fc:	6120      	str	r0, [r4, #16]
}
 80038fe:	bd10      	pop	{r4, pc}

08003900 <getSysConf>:
  if (!conf)
 8003900:	b108      	cbz	r0, 8003906 <getSysConf+0x6>
 8003902:	f7ff bfeb 	b.w	80038dc <getSysConf.part.0>
}
 8003906:	4770      	bx	lr

08003908 <systemSettingLog>:

void systemSettingLog(void)
{
 8003908:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800390a:	2301      	movs	r3, #1
{
 800390c:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800390e:	2203      	movs	r2, #3
 8003910:	210b      	movs	r1, #11
 8003912:	4838      	ldr	r0, [pc, #224]	; (80039f4 <systemSettingLog+0xec>)
 8003914:	f7ff ff20 	bl	8003758 <lc_print>
  if (!conf)
 8003918:	a803      	add	r0, sp, #12
 800391a:	f7ff ffdf 	bl	80038dc <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 800391e:	4836      	ldr	r0, [pc, #216]	; (80039f8 <systemSettingLog+0xf0>)
 8003920:	f7ff ff1a 	bl	8003758 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003924:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8003926:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800392a:	b28b      	uxth	r3, r1
  switch (dev_id) {
 800392c:	4293      	cmp	r3, r2
 800392e:	d056      	beq.n	80039de <systemSettingLog+0xd6>
 8003930:	d848      	bhi.n	80039c4 <systemSettingLog+0xbc>
 8003932:	f240 4235 	movw	r2, #1077	; 0x435
 8003936:	4293      	cmp	r3, r2
 8003938:	d053      	beq.n	80039e2 <systemSettingLog+0xda>
 800393a:	f240 4261 	movw	r2, #1121	; 0x461
 800393e:	4293      	cmp	r3, r2
 8003940:	d051      	beq.n	80039e6 <systemSettingLog+0xde>
  case 0x415: str = "STM32L4x6xx"; break;  /* Orca_1M */
 8003942:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <systemSettingLog+0xf4>)
 8003944:	f240 4415 	movw	r4, #1045	; 0x415
 8003948:	f1a2 0022 	sub.w	r0, r2, #34	; 0x22
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 800394c:	42a3      	cmp	r3, r4
 800394e:	bf08      	it	eq
 8003950:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003952:	9b07      	ldr	r3, [sp, #28]
 8003954:	482a      	ldr	r0, [pc, #168]	; (8003a00 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003956:	4c2b      	ldr	r4, [pc, #172]	; (8003a04 <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003958:	f7ff fefe 	bl	8003758 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <systemSettingLog+0x100>)
 800395e:	2104      	movs	r1, #4
 8003960:	1d5a      	adds	r2, r3, #5
 8003962:	f103 000a 	add.w	r0, r3, #10
 8003966:	f7ff fef7 	bl	8003758 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 800396a:	f7fd fe0d 	bl	8001588 <HAL_GetHalVersion>
 800396e:	4601      	mov	r1, r0
 8003970:	4826      	ldr	r0, [pc, #152]	; (8003a0c <systemSettingLog+0x104>)
 8003972:	f7ff fef1 	bl	8003758 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003976:	9903      	ldr	r1, [sp, #12]
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <systemSettingLog+0x108>)
 800397a:	fb91 f1f4 	sdiv	r1, r1, r4
 800397e:	f7ff feeb 	bl	8003758 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003982:	9904      	ldr	r1, [sp, #16]
 8003984:	4823      	ldr	r0, [pc, #140]	; (8003a14 <systemSettingLog+0x10c>)
 8003986:	fb91 f1f4 	sdiv	r1, r1, r4
 800398a:	f7ff fee5 	bl	8003758 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <systemSettingLog+0x110>)
    return "False";
 8003990:	4822      	ldr	r0, [pc, #136]	; (8003a1c <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 8003992:	6819      	ldr	r1, [r3, #0]
    return "False";
 8003994:	1d44      	adds	r4, r0, #5
 8003996:	f411 7f80 	tst.w	r1, #256	; 0x100
 800399a:	bf14      	ite	ne
 800399c:	4602      	movne	r2, r0
 800399e:	4622      	moveq	r2, r4
 80039a0:	f411 7f00 	tst.w	r1, #512	; 0x200
 80039a4:	bf14      	ite	ne
 80039a6:	4603      	movne	r3, r0
 80039a8:	4623      	moveq	r3, r4
 80039aa:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80039ae:	bf18      	it	ne
 80039b0:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80039b2:	f001 0507 	and.w	r5, r1, #7
 80039b6:	e9cd 4500 	strd	r4, r5, [sp]
 80039ba:	30ec      	adds	r0, #236	; 0xec
 80039bc:	f7ff fecc 	bl	8003758 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 80039c0:	b009      	add	sp, #36	; 0x24
 80039c2:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 80039c4:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80039c8:	d00f      	beq.n	80039ea <systemSettingLog+0xe2>
 80039ca:	f240 4271 	movw	r2, #1137	; 0x471
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <systemSettingLog+0xe6>
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <systemSettingLog+0xf4>)
 80039d4:	f240 4464 	movw	r4, #1124	; 0x464
 80039d8:	f1a2 0038 	sub.w	r0, r2, #56	; 0x38
 80039dc:	e7b6      	b.n	800394c <systemSettingLog+0x44>
  switch (dev_id) {
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <systemSettingLog+0x118>)
 80039e0:	e7b7      	b.n	8003952 <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <systemSettingLog+0x11c>)
 80039e4:	e7b5      	b.n	8003952 <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 80039e6:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <systemSettingLog+0x120>)
 80039e8:	e7b3      	b.n	8003952 <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <systemSettingLog+0x124>)
 80039ec:	e7b1      	b.n	8003952 <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <systemSettingLog+0x128>)
 80039f0:	e7af      	b.n	8003952 <systemSettingLog+0x4a>
 80039f2:	bf00      	nop
 80039f4:	0800d05d 	.word	0x0800d05d
 80039f8:	0800d07a 	.word	0x0800d07a
 80039fc:	0800d04a 	.word	0x0800d04a
 8003a00:	0800d09a 	.word	0x0800d09a
 8003a04:	000f4240 	.word	0x000f4240
 8003a08:	0800d0cb 	.word	0x0800d0cb
 8003a0c:	0800d0f3 	.word	0x0800d0f3
 8003a10:	0800d10c 	.word	0x0800d10c
 8003a14:	0800d125 	.word	0x0800d125
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	0800d052 	.word	0x0800d052
 8003a20:	0800d006 	.word	0x0800d006
 8003a24:	0800d01c 	.word	0x0800d01c
 8003a28:	0800cffa 	.word	0x0800cffa
 8003a2c:	0800d03f 	.word	0x0800d03f
 8003a30:	0800d034 	.word	0x0800d034

08003a34 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003a34:	b530      	push	{r4, r5, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	460c      	mov	r4, r1
 8003a3a:	4605      	mov	r5, r0
  UNUSED(param);
  struct mcu_conf conf;

  getSysConf(&conf);
 8003a3c:	a801      	add	r0, sp, #4
 8003a3e:	f7ff ff5f 	bl	8003900 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 8003a42:	230b      	movs	r3, #11
 8003a44:	80e3      	strh	r3, [r4, #6]

  resp->payload.sinfo.devid = conf.devid;
 8003a46:	9b04      	ldr	r3, [sp, #16]
 8003a48:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8003a4a:	9b01      	ldr	r3, [sp, #4]
 8003a4c:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8003a4e:	9b02      	ldr	r3, [sp, #8]
 8003a50:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8003a52:	9b03      	ldr	r3, [sp, #12]
 8003a54:	6163      	str	r3, [r4, #20]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003a56:	2200      	movs	r2, #0
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f7ff fb2c 	bl	80030b8 <aiPbMgrSendResp>
}
 8003a60:	b007      	add	sp, #28
 8003a62:	bd30      	pop	{r4, r5, pc}

08003a64 <encode_mempool_to_tensor_desc>:
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	461e      	mov	r6, r3
  array_u32->size = 1;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6033      	str	r3, [r6, #0]
  if (info->name)
 8003a6c:	6808      	ldr	r0, [r1, #0]
  array_u32->data = (void *)&info->size;
 8003a6e:	1d0b      	adds	r3, r1, #4
 8003a70:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8003a72:	2304      	movs	r3, #4
{
 8003a74:	460d      	mov	r5, r1
 8003a76:	4614      	mov	r4, r2
  array_u32->offset = 4;
 8003a78:	60b3      	str	r3, [r6, #8]
  if (info->name)
 8003a7a:	b1a0      	cbz	r0, 8003aa6 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	4621      	mov	r1, r4
 8003a80:	f7ff fac0 	bl	8003004 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <encode_mempool_to_tensor_desc+0x48>)
 8003a86:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8003a88:	686b      	ldr	r3, [r5, #4]
 8003a8a:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = AI_SHAPE_BCWH << 24 | array_u32->size;
 8003a8c:	6833      	ldr	r3, [r6, #0]
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 8003a9c:	68ab      	ldr	r3, [r5, #8]
 8003a9e:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003aa4:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8003aa6:	7010      	strb	r0, [r2, #0]
 8003aa8:	e7ec      	b.n	8003a84 <encode_mempool_to_tensor_desc+0x20>
 8003aaa:	bf00      	nop
 8003aac:	00040440 	.word	0x00040440

08003ab0 <fill_tensor_desc_msg>:
{
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8003ab4:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8003ab6:	6986      	ldr	r6, [r0, #24]
  array_u32->size = buff->shape.size;
 8003ab8:	f3c1 2117 	ubfx	r1, r1, #8, #24
  array_u32->offset = sizeof(buff->shape.data[0]);
 8003abc:	2704      	movs	r7, #4
{
 8003abe:	ed2d 8b02 	vpush	{d8}
  array_u32->size = buff->shape.size;
 8003ac2:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8003ac4:	6056      	str	r6, [r2, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8003ac6:	6097      	str	r7, [r2, #8]
  msg->name[0] = 0;
 8003ac8:	2200      	movs	r2, #0
 8003aca:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8003acc:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8003ace:	6623      	str	r3, [r4, #96]	; 0x60
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 8003ad0:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8003ad2:	6422      	str	r2, [r4, #64]	; 0x40
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 8003ad4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8003ad8:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003ada:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003adc:	6836      	ldr	r6, [r6, #0]
{
 8003ade:	4605      	mov	r5, r0
 8003ae0:	eeb0 8a40 	vmov.f32	s16, s0
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003ae4:	f002 fbd8 	bl	8006298 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8003ae8:	68ab      	ldr	r3, [r5, #8]
  msg->zeropoint = zero_point;
 8003aea:	9a08      	ldr	r2, [sp, #32]
  msg->scale = scale;
 8003aec:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003af0:	4370      	muls	r0, r6
  msg->size = _get_buffer_element_size(buff);
 8003af2:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8003af4:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003af6:	b1a3      	cbz	r3, 8003b22 <fill_tensor_desc_msg+0x72>
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	07d0      	lsls	r0, r2, #31
 8003afc:	d511      	bpl.n	8003b22 <fill_tensor_desc_msg+0x72>
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	b17b      	cbz	r3, 8003b22 <fill_tensor_desc_msg+0x72>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	b192      	cbz	r2, 8003b2c <fill_tensor_desc_msg+0x7c>
 8003b06:	8859      	ldrh	r1, [r3, #2]
 8003b08:	b181      	cbz	r1, 8003b2c <fill_tensor_desc_msg+0x7c>
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	6809      	ldr	r1, [r1, #0]
 8003b0e:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003b10:	8819      	ldrh	r1, [r3, #0]
 8003b12:	0789      	lsls	r1, r1, #30
 8003b14:	d50c      	bpl.n	8003b30 <fill_tensor_desc_msg+0x80>
 8003b16:	b19a      	cbz	r2, 8003b40 <fill_tensor_desc_msg+0x90>
 8003b18:	885b      	ldrh	r3, [r3, #2]
 8003b1a:	b10b      	cbz	r3, 8003b20 <fill_tensor_desc_msg+0x70>
 8003b1c:	6853      	ldr	r3, [r2, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003b22:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8003b26:	686b      	ldr	r3, [r5, #4]
 8003b28:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	e7ee      	b.n	8003b0e <fill_tensor_desc_msg+0x5e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003b30:	b132      	cbz	r2, 8003b40 <fill_tensor_desc_msg+0x90>
 8003b32:	885b      	ldrh	r3, [r3, #2]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f3      	beq.n	8003b20 <fill_tensor_desc_msg+0x70>
 8003b38:	6853      	ldr	r3, [r2, #4]
 8003b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b3e:	e7ef      	b.n	8003b20 <fill_tensor_desc_msg+0x70>
 8003b40:	4613      	mov	r3, r2
 8003b42:	e7ed      	b.n	8003b20 <fill_tensor_desc_msg+0x70>

08003b44 <encode_ai_buffer_to_tensor_desc>:
{
 8003b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b46:	460c      	mov	r4, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003b4c:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8003b4e:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	ed94 0a02 	vldr	s0, [r4, #8]
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	241c      	movs	r4, #28
 8003b5a:	fb04 5000 	mla	r0, r4, r0, r5
 8003b5e:	f7ff ffa7 	bl	8003ab0 <fill_tensor_desc_msg>
}
 8003b62:	b003      	add	sp, #12
 8003b64:	bd30      	pop	{r4, r5, pc}

08003b66 <_get_buffer_size>:
{
 8003b66:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003b68:	6983      	ldr	r3, [r0, #24]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003b6a:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003b6c:	681d      	ldr	r5, [r3, #0]
{
 8003b6e:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003b70:	f002 fb92 	bl	8006298 <ai_buffer_get_size>
 8003b74:	6821      	ldr	r1, [r4, #0]
 8003b76:	4368      	muls	r0, r5
}
 8003b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003b7c:	f002 bbc0 	b.w	8006300 <ai_buffer_get_byte_size>

08003b80 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8003b80:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8003b82:	f7fd fce7 	bl	8001554 <HAL_GetTick>
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = port_hal_get_tick();
 8003b8a:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8003b90:	6852      	ldr	r2, [r2, #4]
 8003b92:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8003b94:	bd08      	pop	{r3, pc}
 8003b96:	bf00      	nop
 8003b98:	20000a20 	.word	0x20000a20
 8003b9c:	e0001000 	.word	0xe0001000

08003ba0 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8003ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <cyclesCounterEnd+0x44>)
 8003ba4:	4d10      	ldr	r5, [pc, #64]	; (8003be8 <cyclesCounterEnd+0x48>)
 8003ba6:	685c      	ldr	r4, [r3, #4]
 8003ba8:	686b      	ldr	r3, [r5, #4]
 8003baa:	1ae4      	subs	r4, r4, r3
 8003bac:	2300      	movs	r3, #0
 8003bae:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003bb0:	f7fd fcd0 	bl	8001554 <HAL_GetTick>
 8003bb4:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8003bb6:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003bb8:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8003bba:	682a      	ldr	r2, [r5, #0]
 8003bbc:	4290      	cmp	r0, r2
 8003bbe:	d90c      	bls.n	8003bda <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fd f8ff 	bl	8000dc4 <__aeabi_uldivmod>
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	fba0 0303 	umull	r0, r3, r0, r3
 8003bce:	1900      	adds	r0, r0, r4
 8003bd0:	eba3 0301 	sub.w	r3, r3, r1
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8003bda:	4620      	mov	r0, r4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	b003      	add	sp, #12
 8003be0:	bd30      	pop	{r4, r5, pc}
 8003be2:	bf00      	nop
 8003be4:	e0001000 	.word	0xe0001000
 8003be8:	20000a20 	.word	0x20000a20

08003bec <aiExecCtx>:
{
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8003bf0:	7800      	ldrb	r0, [r0, #0]
 8003bf2:	b930      	cbnz	r0, 8003c02 <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8003bf4:	b921      	cbnz	r1, 8003c00 <aiExecCtx+0x14>
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <aiExecCtx+0x4c>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	bf18      	it	ne
 8003bfe:	4618      	movne	r0, r3
}
 8003c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 8003c02:	4e0d      	ldr	r6, [pc, #52]	; (8003c38 <aiExecCtx+0x4c>)
 8003c04:	6830      	ldr	r0, [r6, #0]
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0fa      	beq.n	8003c00 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8003c0a:	68b7      	ldr	r7, [r6, #8]
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	f7fc fb2f 	bl	8000270 <strlen>
 8003c12:	4605      	mov	r5, r0
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7fc fb2b 	bl	8000270 <strlen>
      if (cur->handle &&
 8003c1a:	4285      	cmp	r5, r0
 8003c1c:	d109      	bne.n	8003c32 <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4621      	mov	r1, r4
 8003c22:	4638      	mov	r0, r7
 8003c24:	f007 f887 	bl	800ad36 <strncmp>
      cur = &net_exec_ctx[pos];
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	4630      	moveq	r0, r6
 8003c2e:	2000      	movne	r0, #0
 8003c30:	e7e6      	b.n	8003c00 <aiExecCtx+0x14>
 8003c32:	2000      	movs	r0, #0
 8003c34:	e7e4      	b.n	8003c00 <aiExecCtx+0x14>
 8003c36:	bf00      	nop
 8003c38:	20000a98 	.word	0x20000a98

08003c3c <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c40:	b08b      	sub	sp, #44	; 0x2c
 8003c42:	461d      	mov	r5, r3
 8003c44:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  resp->which_payload = respMsg_tensor_tag;
 8003c48:	2311      	movs	r3, #17
 8003c4a:	80cb      	strh	r3, [r1, #6]
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003c4c:	f10d 090c 	add.w	r9, sp, #12
 8003c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c52:	9300      	str	r3, [sp, #0]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003c54:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003c56:	4643      	mov	r3, r8
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003c58:	4606      	mov	r6, r0
 8003c5a:	4617      	mov	r7, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003c5c:	3108      	adds	r1, #8
 8003c5e:	464a      	mov	r2, r9
 8003c60:	4628      	mov	r0, r5
 8003c62:	f7ff ff25 	bl	8003ab0 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003c68:	f418 7f00 	tst.w	r8, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8003c6c:	e9c4 3915 	strd	r3, r9, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8003c70:	686b      	ldr	r3, [r5, #4]
 8003c72:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003c74:	d115      	bne.n	8003ca2 <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8003c76:	4628      	mov	r0, r5
 8003c78:	f7ff ff75 	bl	8003b66 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003c7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    resp->payload.tensor.data.size = 0;
 8003c7e:	6720      	str	r0, [r4, #112]	; 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003c80:	2200      	movs	r2, #0
 8003c82:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <send_ai_io_tensor.isra.0+0x70>)
 8003c88:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8003c8a:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003c8c:	e9cd 2006 	strd	r2, r0, [sp, #24]
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8003c90:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8003c92:	463a      	mov	r2, r7
 8003c94:	4621      	mov	r1, r4
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff fa0e 	bl	80030b8 <aiPbMgrSendResp>
}
 8003c9c:	b00b      	add	sp, #44	; 0x2c
 8003c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e7ea      	b.n	8003c7c <send_ai_io_tensor.isra.0+0x40>
 8003ca6:	bf00      	nop
 8003ca8:	08002edf 	.word	0x08002edf
 8003cac:	08002f35 	.word	0x08002f35

08003cb0 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8003cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	ed2d 8b02 	vpush	{d8}
 8003cb8:	b093      	sub	sp, #76	; 0x4c
 8003cba:	460d      	mov	r5, r1
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003cbc:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
    const ai_observer_node *node) {
 8003cc0:	4617      	mov	r7, r2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003cc2:	f7ff ff6d 	bl	8003ba0 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003cc6:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003cce:	d011      	beq.n	8003cf4 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8003cd0:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003cd2:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8003cd4:	f103 0301 	add.w	r3, r3, #1
 8003cd8:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003cda:	d503      	bpl.n	8003ce4 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 8003cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ce0:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8003ce4:	f7ff ff4c 	bl	8003b80 <cyclesCounterStart>
}
 8003ce8:	2000      	movs	r0, #0
 8003cea:	b013      	add	sp, #76	; 0x4c
 8003cec:	ecbd 8b02 	vpop	{d8}
 8003cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8003cf4:	076b      	lsls	r3, r5, #29
 8003cf6:	d5f5      	bpl.n	8003ce4 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8003cf8:	f7ff ff42 	bl	8003b80 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d00:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003d04:	181b      	adds	r3, r3, r0
 8003d06:	eb42 0201 	adc.w	r2, r2, r1
 8003d0a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8003d0e:	68a3      	ldr	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003d10:	f415 7f00 	tst.w	r5, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8003d14:	887d      	ldrh	r5, [r7, #2]
    obs_ctx->n_cb_out++;
 8003d16:	f103 0301 	add.w	r3, r3, #1
 8003d1a:	60a3      	str	r3, [r4, #8]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003d20:	bf0c      	ite	eq
 8003d22:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003d26:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    type |= (node->type & (ai_u16)0x7FFF);
 8003d2a:	f3c5 050e 	ubfx	r5, r5, #0, #15
 8003d2e:	431d      	orrs	r5, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003d30:	f7ff fd98 	bl	8003864 <dwtCyclesToFloatMs>
 8003d34:	ab04      	add	r3, sp, #16
 8003d36:	930a      	str	r3, [sp, #40]	; 0x28
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003d38:	ab07      	add	r3, sp, #28
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003d3e:	ed8d 0a07 	vstr	s0, [sp, #28]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003d42:	e9cd 5300 	strd	r5, r3, [sp]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003d46:	2202      	movs	r2, #2
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003d48:	4633      	mov	r3, r6
 8003d4a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d50:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003d52:	f7ff fa77 	bl	8003244 <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	2a01      	cmp	r2, #1
 8003d5c:	d90e      	bls.n	8003d7c <aiOnExecNode_cb+0xcc>
 8003d5e:	f8d3 8004 	ldr.w	r8, [r3, #4]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003d62:	eddf 8a39 	vldr	s17, [pc, #228]	; 8003e48 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003d66:	46b1      	mov	r9, r6
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003d68:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003d6c:	429e      	cmp	r6, r3
 8003d6e:	d205      	bcs.n	8003d7c <aiOnExecNode_cb+0xcc>
 8003d70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003d74:	b113      	cbz	r3, 8003d7c <aiOnExecNode_cb+0xcc>
 8003d76:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8003d7a:	b94f      	cbnz	r7, 8003d90 <aiOnExecNode_cb+0xe0>
    obs_ctx->tcom += cyclesCounterEnd();
 8003d7c:	f7ff ff10 	bl	8003ba0 <cyclesCounterEnd>
 8003d80:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003d84:	1818      	adds	r0, r3, r0
 8003d86:	eb42 0101 	adc.w	r1, r2, r1
 8003d8a:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8003d8e:	e7a9      	b.n	8003ce4 <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d046      	beq.n	8003e24 <aiOnExecNode_cb+0x174>
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d043      	beq.n	8003e24 <aiOnExecNode_cb+0x174>
 8003d9c:	8859      	ldrh	r1, [r3, #2]
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	d040      	beq.n	8003e24 <aiOnExecNode_cb+0x174>
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003da8:	69b8      	ldr	r0, [r7, #24]
 8003daa:	6802      	ldr	r2, [r0, #0]
 8003dac:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8003db0:	d03b      	beq.n	8003e2a <aiOnExecNode_cb+0x17a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <aiOnExecNode_cb+0x190>
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d043      	beq.n	8003e44 <aiOnExecNode_cb+0x194>
 8003dbc:	885d      	ldrh	r5, [r3, #2]
 8003dbe:	b115      	cbz	r5, 8003dc6 <aiOnExecNode_cb+0x116>
 8003dc0:	684b      	ldr	r3, [r1, #4]
 8003dc2:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8003dc6:	68c3      	ldr	r3, [r0, #12]
 8003dc8:	920b      	str	r2, [sp, #44]	; 0x2c
          AI_BUFFER_INIT(
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4638      	mov	r0, r7
      ai_buffer buffer =
 8003dce:	e9cd 390c 	strd	r3, r9, [sp, #48]	; 0x30
 8003dd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8003dd6:	f002 fa33 	bl	8006240 <get_tensor_size>
      ai_buffer buffer =
 8003dda:	7a3b      	ldrb	r3, [r7, #8]
 8003ddc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8003de0:	68bb      	ldr	r3, [r7, #8]
      ai_buffer buffer =
 8003de2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003de4:	900f      	str	r0, [sp, #60]	; 0x3c
          AI_BUFFER_INIT(
 8003de6:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8003dea:	f363 221f 	bfi	r2, r3, #8, #24
 8003dee:	9210      	str	r2, [sp, #64]	; 0x40
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	9311      	str	r3, [sp, #68]	; 0x44
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 8003df4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
      if (obs_ctx->no_data)
 8003df8:	7d22      	ldrb	r2, [r4, #20]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 8003dfa:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003dfc:	429e      	cmp	r6, r3
 8003dfe:	bf14      	ite	ne
 8003e00:	2304      	movne	r3, #4
 8003e02:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8003e06:	b10a      	cbz	r2, 8003e0c <aiOnExecNode_cb+0x15c>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003e0c:	e9cd 3500 	strd	r3, r5, [sp]
 8003e10:	eeb0 0a48 	vmov.f32	s0, s16
 8003e14:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003e18:	ab0b      	add	r3, sp, #44	; 0x2c
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f7ff ff0e 	bl	8003c3c <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7a1      	b.n	8003d68 <aiOnExecNode_cb+0xb8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003e24:	eeb0 8a68 	vmov.f32	s16, s17
 8003e28:	e7be      	b.n	8003da8 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0cb      	beq.n	8003dc6 <aiOnExecNode_cb+0x116>
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	2900      	cmp	r1, #0
 8003e32:	d0c8      	beq.n	8003dc6 <aiOnExecNode_cb+0x116>
 8003e34:	885b      	ldrh	r3, [r3, #2]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c5      	beq.n	8003dc6 <aiOnExecNode_cb+0x116>
 8003e3a:	684b      	ldr	r3, [r1, #4]
 8003e3c:	781d      	ldrb	r5, [r3, #0]
 8003e3e:	e7c2      	b.n	8003dc6 <aiOnExecNode_cb+0x116>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003e40:	461d      	mov	r5, r3
 8003e42:	e7c0      	b.n	8003dc6 <aiOnExecNode_cb+0x116>
 8003e44:	460d      	mov	r5, r1
 8003e46:	e7be      	b.n	8003dc6 <aiOnExecNode_cb+0x116>
 8003e48:	00000000 	.word	0x00000000

08003e4c <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e50:	4606      	mov	r6, r0
 8003e52:	b09c      	sub	sp, #112	; 0x70
 8003e54:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8003e56:	300c      	adds	r0, #12
 8003e58:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003e5c:	f7ff fec6 	bl	8003bec <aiExecCtx>
  if (ctx)
 8003e60:	4605      	mov	r5, r0
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f000 80a9 	beq.w	8003fba <aiPbCmdNNInfo+0x16e>
  resp->which_payload = respMsg_minfo_tag;
 8003e68:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 8003e6a:	f890 7091 	ldrb.w	r7, [r0, #145]	; 0x91
 8003e6e:	f890 8090 	ldrb.w	r8, [r0, #144]	; 0x90
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003e72:	6880      	ldr	r0, [r0, #8]
  resp->which_payload = respMsg_minfo_tag;
 8003e74:	80e3      	strh	r3, [r4, #6]
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	f104 0108 	add.w	r1, r4, #8
 8003e7c:	f7ff f8c2 	bl	8003004 <aiPbStrCopy>
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 8003e80:	2301      	movs	r3, #1
 8003e82:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8003e84:	68e8      	ldr	r0, [r5, #12]
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8003e8c:	f7ff f8ba 	bl	8003004 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8003e90:	6968      	ldr	r0, [r5, #20]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003e98:	f7ff f8b4 	bl	8003004 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 8003e9c:	69eb      	ldr	r3, [r5, #28]
  struct _encode_tensor_desc tensor_ins = {
 8003e9e:	484b      	ldr	r0, [pc, #300]	; (8003fcc <aiPbCmdNNInfo+0x180>)
 8003ea0:	9002      	str	r0, [sp, #8]
 8003ea2:	ba1b      	rev	r3, r3
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 8003ea4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003ea8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  struct _encode_tensor_desc tensor_outs = {
 8003eaa:	9005      	str	r0, [sp, #20]
 8003eac:	ba1b      	rev	r3, r3
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003eae:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003eb2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003eb6:	f1b8 0f00 	cmp.w	r8, #0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003eba:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003ebe:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003ec2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003ec4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003ec8:	f240 4301 	movw	r3, #1025	; 0x401
 8003ecc:	bf08      	it	eq
 8003ece:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003ed0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003ed4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _encode_tensor_desc tensor_ins = {
 8003ed8:	9203      	str	r2, [sp, #12]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003eda:	2300      	movs	r3, #0
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8003edc:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003ee0:	429f      	cmp	r7, r3
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003ee2:	aa02      	add	r2, sp, #8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003ee4:	6caf      	ldr	r7, [r5, #72]	; 0x48
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003ee6:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
  struct _encode_tensor_desc tensor_ins = {
 8003eea:	a914      	add	r1, sp, #80	; 0x50
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003eec:	f240 4202 	movw	r2, #1026	; 0x402
 8003ef0:	bf08      	it	eq
 8003ef2:	2202      	moveq	r2, #2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003ef4:	e9cd 7218 	strd	r7, r2, [sp, #96]	; 0x60
  struct _encode_tensor_desc tensor_ins = {
 8003ef8:	9104      	str	r1, [sp, #16]
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8003efa:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003efe:	4934      	ldr	r1, [pc, #208]	; (8003fd0 <aiPbCmdNNInfo+0x184>)
  struct _encode_tensor_desc tensor_outs = {
 8003f00:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8003f02:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003f06:	f04f 0c00 	mov.w	ip, #0
  struct _encode_tensor_desc tensor_outs = {
 8003f0a:	a818      	add	r0, sp, #96	; 0x60
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003f0c:	aa05      	add	r2, sp, #20
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003f0e:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8003f12:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003f14:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003f18:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8003f1c:	931b      	str	r3, [sp, #108]	; 0x6c
  struct _encode_tensor_desc tensor_outs = {
 8003f1e:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003f20:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 8003f24:	f8b5 705a 	ldrh.w	r7, [r5, #90]	; 0x5a
 8003f28:	2f00      	cmp	r7, #0
 8003f2a:	d042      	beq.n	8003fb2 <aiPbCmdNNInfo+0x166>
      size_acts += nn->map_activations.buffer[i].size;
 8003f2c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 8003f2e:	461a      	mov	r2, r3
      size_acts += nn->map_activations.buffer[i].size;
 8003f30:	3010      	adds	r0, #16
 8003f32:	f04f 0e1c 	mov.w	lr, #28
 8003f36:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8003f3a:	3201      	adds	r2, #1
      size_acts += nn->map_activations.buffer[i].size;
 8003f3c:	f850 c00c 	ldr.w	ip, [r0, ip]
    for (int i=0; i<nn->map_activations.size; i++)
 8003f40:	42ba      	cmp	r2, r7
      size_acts += nn->map_activations.buffer[i].size;
 8003f42:	4463      	add	r3, ip
    for (int i=0; i<nn->map_activations.size; i++)
 8003f44:	dbf7      	blt.n	8003f36 <aiPbCmdNNInfo+0xea>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003f46:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <aiPbCmdNNInfo+0x188>)
  struct _encode_tensor_desc tensor_acts = {
 8003f48:	4f23      	ldr	r7, [pc, #140]	; (8003fd8 <aiPbCmdNNInfo+0x18c>)
 8003f4a:	970b      	str	r7, [sp, #44]	; 0x2c
 8003f4c:	a808      	add	r0, sp, #32
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003f4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8003f52:	900d      	str	r0, [sp, #52]	; 0x34
 8003f54:	2201      	movs	r2, #1
  if (nn->map_weights.size) {
 8003f56:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003f5a:	920c      	str	r2, [sp, #48]	; 0x30
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003f5c:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003f60:	2300      	movs	r3, #0
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003f62:	aa0b      	add	r2, sp, #44	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003f64:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003f66:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 8003f6a:	b320      	cbz	r0, 8003fb6 <aiPbCmdNNInfo+0x16a>
      size_params += nn->map_weights.buffer[i].size;
 8003f6c:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8003f6e:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003f70:	3510      	adds	r5, #16
 8003f72:	f04f 0e1c 	mov.w	lr, #28
 8003f76:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_weights.size; i++)
 8003f7a:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 8003f7c:	f855 c00c 	ldr.w	ip, [r5, ip]
    for (int i=0; i<nn->map_weights.size; i++)
 8003f80:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 8003f82:	4463      	add	r3, ip
    for (int i=0; i<nn->map_weights.size; i++)
 8003f84:	dbf7      	blt.n	8003f76 <aiPbCmdNNInfo+0x12a>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <aiPbCmdNNInfo+0x190>)
 8003f88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 8003f8c:	2301      	movs	r3, #1
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 8003f8e:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  struct _encode_tensor_desc tensor_w = {
 8003f92:	a80e      	add	r0, sp, #56	; 0x38
 8003f94:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003f96:	ab11      	add	r3, sp, #68	; 0x44
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003f98:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8003f9a:	9013      	str	r0, [sp, #76]	; 0x4c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003f9c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  aiPbMgrSendResp(req, resp, state);
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8003fa4:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8003fa8:	f7ff f886 	bl	80030b8 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8003fac:	b01c      	add	sp, #112	; 0x70
 8003fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size_acts = 0;
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	e7c7      	b.n	8003f46 <aiPbCmdNNInfo+0xfa>
  ai_size size_params = 0;
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	e7e5      	b.n	8003f86 <aiPbCmdNNInfo+0x13a>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003fba:	2304      	movs	r3, #4
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff f8cc 	bl	8003160 <aiPbMgrSendAck>
}
 8003fc8:	e7f0      	b.n	8003fac <aiPbCmdNNInfo+0x160>
 8003fca:	bf00      	nop
 8003fcc:	08003b45 	.word	0x08003b45
 8003fd0:	08003051 	.word	0x08003051
 8003fd4:	0800d182 	.word	0x0800d182
 8003fd8:	08003a65 	.word	0x08003a65
 8003fdc:	0800d187 	.word	0x0800d187

08003fe0 <_print_debug>:
{
 8003fe0:	b40e      	push	{r1, r2, r3}
 8003fe2:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8003fe4:	b178      	cbz	r0, 8004006 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003fe6:	4c0f      	ldr	r4, [pc, #60]	; (8004024 <_print_debug+0x44>)
 8003fe8:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, fmt);
 8003fea:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003fec:	2150      	movs	r1, #80	; 0x50
 8003fee:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8003ff0:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003ff2:	f7ff fbc3 	bl	800377c <lc_vsnprint>
      _print_buffer[s] = 0;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	1823      	adds	r3, r4, r0
  while (s) {
 8003ffa:	b948      	cbnz	r0, 8004010 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <_print_debug+0x44>)
 8004000:	4608      	mov	r0, r1
 8004002:	f7ff f8cd 	bl	80031a0 <aiPbMgrSendLogV2>
}
 8004006:	b003      	add	sp, #12
 8004008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400c:	b003      	add	sp, #12
 800400e:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	2a0a      	cmp	r2, #10
 8004014:	d001      	beq.n	800401a <_print_debug+0x3a>
 8004016:	2a0d      	cmp	r2, #13
 8004018:	d100      	bne.n	800401c <_print_debug+0x3c>
      _print_buffer[s] = 0;
 800401a:	7019      	strb	r1, [r3, #0]
    s--;
 800401c:	3801      	subs	r0, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	e7eb      	b.n	8003ffa <_print_debug+0x1a>
 8004022:	bf00      	nop
 8004024:	20000a48 	.word	0x20000a48

08004028 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	ed2d 8b02 	vpush	{d8}
 8004030:	4605      	mov	r5, r0
 8004032:	b0a1      	sub	sp, #132	; 0x84
 8004034:	460e      	mov	r6, r1
  ai_buffer *ai_output;

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8004036:	300c      	adds	r0, #12
 8004038:	f04f 31ff 	mov.w	r1, #4294967295
 800403c:	f7ff fdd6 	bl	8003bec <aiExecCtx>
  if (!ctx) {
 8004040:	4604      	mov	r4, r0
 8004042:	b910      	cbnz	r0, 800404a <aiPbCmdNNRun+0x22>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004044:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	e098      	b.n	800417c <aiPbCmdNNRun+0x154>
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800404a:	68ab      	ldr	r3, [r5, #8]
  net_obs_ctx.no_data = true;
 800404c:	4a9d      	ldr	r2, [pc, #628]	; (80042c4 <aiPbCmdNNRun+0x29c>)
  ctx->obs_ctx = &net_obs_ctx;
 800404e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8004052:	075f      	lsls	r7, r3, #29
  net_obs_ctx.no_data = true;
 8004054:	f04f 0101 	mov.w	r1, #1
 8004058:	7511      	strb	r1, [r2, #20]
    net_obs_ctx.is_enabled = true;
 800405a:	bf4a      	itet	mi
 800405c:	7011      	strbmi	r1, [r2, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 800405e:	f3c3 0140 	ubfxpl	r1, r3, #1, #1
    net_obs_ctx.no_data = false;
 8004062:	2100      	movmi	r1, #0
  net_obs_ctx.tcom = 0ULL;
 8004064:	f04f 0800 	mov.w	r8, #0
 8004068:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 800406c:	f04f 0700 	mov.w	r7, #0
 8004070:	bf54      	ite	pl
 8004072:	7011      	strbpl	r1, [r2, #0]
    net_obs_ctx.no_data = false;
 8004074:	7511      	strbmi	r1, [r2, #20]
  net_obs_ctx.tcom = 0ULL;
 8004076:	e9c2 8906 	strd	r8, r9, [r2, #24]
  net_obs_ctx.tnodes = 0ULL;
 800407a:	e9c2 8908 	strd	r8, r9, [r2, #32]
  net_obs_ctx.n_cb_out = 0;
 800407e:	e9c2 7701 	strd	r7, r7, [r2, #4]
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 8004082:	f3c3 2240 	ubfx	r2, r3, #9, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8004086:	f3c3 2000 	ubfx	r0, r3, #8, #1
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 800408a:	9206      	str	r2, [sp, #24]
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 800408c:	f3c3 2280 	ubfx	r2, r3, #10, #1
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8004090:	498d      	ldr	r1, [pc, #564]	; (80042c8 <aiPbCmdNNRun+0x2a0>)
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8004092:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8004096:	9205      	str	r2, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8004098:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800409a:	f7ff ffa1 	bl	8003fe0 <_print_debug>
  ai_output = ctx->report.outputs;
 800409e:	e9d4 a311 	ldrd	sl, r3, [r4, #68]	; 0x44
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80040a2:	4650      	mov	r0, sl
  ai_output = ctx->report.outputs;
 80040a4:	9307      	str	r3, [sp, #28]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80040a6:	f7ff fd5e 	bl	8003b66 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80040aa:	9700      	str	r7, [sp, #0]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80040ac:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80040ae:	2201      	movs	r2, #1
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7ff f854 	bl	8003160 <aiPbMgrSendAck>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80040b8:	46d0      	mov	r8, sl
 80040ba:	f8b4 9040 	ldrh.w	r9, [r4, #64]	; 0x40
 80040be:	45b9      	cmp	r9, r7
 80040c0:	dc2b      	bgt.n	800411a <aiPbCmdNNRun+0xf2>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80040c2:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 80040c6:	783b      	ldrb	r3, [r7, #0]
 80040c8:	b18b      	cbz	r3, 80040ee <aiPbCmdNNRun+0xc6>
  if (ctx->handle == AI_HANDLE_NULL)
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	b178      	cbz	r0, 80040ee <aiPbCmdNNRun+0xc6>
  ai_mnetwork_get_private_handle(ctx->handle,
 80040ce:	a90e      	add	r1, sp, #56	; 0x38
  obs_ctx->cresp = cresp;
 80040d0:	e9c7 5603 	strd	r5, r6, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 80040d4:	aa12      	add	r2, sp, #72	; 0x48
 80040d6:	f000 fb2b 	bl	8004730 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80040da:	4b7c      	ldr	r3, [pc, #496]	; (80042cc <aiPbCmdNNRun+0x2a4>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80040dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80040e0:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80040e2:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80040e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80040ea:	f003 fc4f 	bl	800798c <ai_platform_observer_register_s>
  PB_LC_PRINT(ctx->debug, "RUN: processing\r\n");
 80040ee:	4978      	ldr	r1, [pc, #480]	; (80042d0 <aiPbCmdNNRun+0x2a8>)
 80040f0:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 80040f4:	f7ff ff74 	bl	8003fe0 <_print_debug>
  cyclesCounterStart();
 80040f8:	f7ff fd42 	bl	8003b80 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80040fc:	9a07      	ldr	r2, [sp, #28]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	4651      	mov	r1, sl
 8004102:	f000 fb04 	bl	800470e <ai_mnetwork_run>
  if (batch != 1) {
 8004106:	2801      	cmp	r0, #1
 8004108:	d073      	beq.n	80041f2 <aiPbCmdNNRun+0x1ca>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	f000 fad3 	bl	80046b6 <ai_mnetwork_get_error>
 8004110:	4970      	ldr	r1, [pc, #448]	; (80042d4 <aiPbCmdNNRun+0x2ac>)
 8004112:	f7ff f8f5 	bl	8003300 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004116:	230a      	movs	r3, #10
 8004118:	e795      	b.n	8004046 <aiPbCmdNNRun+0x1e>
    if ((i + 1) == ctx->report.n_inputs)
 800411a:	3701      	adds	r7, #1
      state = EnumState_S_PROCESSING;
 800411c:	454f      	cmp	r7, r9
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2302      	moveq	r3, #2
 8004124:	ee08 3a10 	vmov	s16, r3
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8004128:	4640      	mov	r0, r8
 800412a:	2300      	movs	r3, #0
 800412c:	9312      	str	r3, [sp, #72]	; 0x48
 800412e:	f7ff fd1a 	bl	8003b66 <_get_buffer_size>
 8004132:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004136:	9314      	str	r3, [sp, #80]	; 0x50
 8004138:	2300      	movs	r3, #0
 800413a:	9315      	str	r3, [sp, #84]	; 0x54
  if ((first_only) || (direct_write))
 800413c:	9b06      	ldr	r3, [sp, #24]
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 800413e:	9013      	str	r0, [sp, #76]	; 0x4c
  if ((first_only) || (direct_write))
 8004140:	b90b      	cbnz	r3, 8004146 <aiPbCmdNNRun+0x11e>
 8004142:	9b05      	ldr	r3, [sp, #20]
 8004144:	b183      	cbz	r3, 8004168 <aiPbCmdNNRun+0x140>
    data.size = _get_element_size(buffer);
 8004146:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 800414a:	4a63      	ldr	r2, [pc, #396]	; (80042d8 <aiPbCmdNNRun+0x2b0>)
 800414c:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8004150:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004154:	4293      	cmp	r3, r2
 8004156:	d01b      	beq.n	8004190 <aiPbCmdNNRun+0x168>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8004158:	2001      	movs	r0, #1
 800415a:	f002 f8d1 	bl	8006300 <ai_buffer_get_byte_size>
  if (direct_write)
 800415e:	9b05      	ldr	r3, [sp, #20]
    data.size = _get_element_size(buffer);
 8004160:	9013      	str	r0, [sp, #76]	; 0x4c
  if (direct_write)
 8004162:	b10b      	cbz	r3, 8004168 <aiPbCmdNNRun+0x140>
    data.addr = (uintptr_t)&temp;
 8004164:	ab0e      	add	r3, sp, #56	; 0x38
 8004166:	9314      	str	r3, [sp, #80]	; 0x50
  aiPbMgrReceiveData(&data);
 8004168:	a812      	add	r0, sp, #72	; 0x48
 800416a:	f7ff f851 	bl	8003210 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 800416e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004170:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8004174:	454b      	cmp	r3, r9
 8004176:	d00d      	beq.n	8004194 <aiPbCmdNNRun+0x16c>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004178:	2201      	movs	r2, #1
 800417a:	9200      	str	r2, [sp, #0]
 800417c:	2204      	movs	r2, #4
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	f7fe ffed 	bl	8003160 <aiPbMgrSendAck>
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
  }

  aiObserverUnbind(ctx);
}
 8004186:	b021      	add	sp, #132	; 0x84
 8004188:	ecbd 8b02 	vpop	{d8}
 800418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 4;
 8004190:	2004      	movs	r0, #4
 8004192:	e7e4      	b.n	800415e <aiPbCmdNNRun+0x136>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8004194:	9b06      	ldr	r3, [sp, #24]
 8004196:	b96b      	cbnz	r3, 80041b4 <aiPbCmdNNRun+0x18c>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8004198:	2300      	movs	r3, #0
 800419a:	ee18 2a10 	vmov	r2, s16
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4631      	mov	r1, r6
 80041a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041a4:	4628      	mov	r0, r5
 80041a6:	f7fe ffdb 	bl	8003160 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 80041aa:	f108 081c 	add.w	r8, r8, #28
 80041ae:	f7fe ffe1 	bl	8003174 <aiPbMgrWaitAck>
    if (res != true)
 80041b2:	e782      	b.n	80040ba <aiPbCmdNNRun+0x92>
  if ((first_only) && (!direct_write))/* broadcast the value */
 80041b4:	9b05      	ldr	r3, [sp, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <aiPbCmdNNRun+0x170>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 80041ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80041be:	f04f 0b01 	mov.w	fp, #1
      uintptr_t w_ptr = r_ptr + el_s;
 80041c2:	eb01 0309 	add.w	r3, r1, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80041c6:	4640      	mov	r0, r8
 80041c8:	e9cd 1308 	strd	r1, r3, [sp, #32]
 80041cc:	f7ff fccb 	bl	8003b66 <_get_buffer_size>
 80041d0:	fbb0 f0f9 	udiv	r0, r0, r9
 80041d4:	4583      	cmp	fp, r0
 80041d6:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 80041da:	d2dd      	bcs.n	8004198 <aiPbCmdNNRun+0x170>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 80041dc:	4618      	mov	r0, r3
 80041de:	464a      	mov	r2, r9
 80041e0:	9108      	str	r1, [sp, #32]
 80041e2:	f006 fe42 	bl	800ae6a <memcpy>
 80041e6:	4603      	mov	r3, r0
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80041e8:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 80041ea:	444b      	add	r3, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80041ec:	f10b 0b01 	add.w	fp, fp, #1
 80041f0:	e7e9      	b.n	80041c6 <aiPbCmdNNRun+0x19e>
  tend = cyclesCounterEnd();
 80041f2:	f7ff fcd5 	bl	8003ba0 <cyclesCounterEnd>
 80041f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 80041fa:	4938      	ldr	r1, [pc, #224]	; (80042dc <aiPbCmdNNRun+0x2b4>)
 80041fc:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8004200:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80042e0 <aiPbCmdNNRun+0x2b8>
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 8004204:	f7ff feec 	bl	8003fe0 <_print_debug>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004208:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 800420c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004214:	1880      	adds	r0, r0, r2
 8004216:	eb41 0103 	adc.w	r1, r1, r3
 800421a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800421c:	18c0      	adds	r0, r0, r3
 800421e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004220:	eb41 0103 	adc.w	r1, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8004228:	f7ff fb1c 	bl	8003864 <dwtCyclesToFloatMs>
 800422c:	ab0c      	add	r3, sp, #48	; 0x30
 800422e:	2700      	movs	r7, #0
 8004230:	9311      	str	r3, [sp, #68]	; 0x44
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8004232:	ab0e      	add	r3, sp, #56	; 0x38
 8004234:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8004238:	9700      	str	r7, [sp, #0]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 800423a:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800423c:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 800423e:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8004246:	e9cd 720f 	strd	r7, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800424a:	f7fe fffb 	bl	8003244 <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send output tensors\r\n");
 800424e:	4925      	ldr	r1, [pc, #148]	; (80042e4 <aiPbCmdNNRun+0x2bc>)
 8004250:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 8004254:	f7ff fec4 	bl	8003fe0 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004258:	f8dd 801c 	ldr.w	r8, [sp, #28]
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 800425c:	f240 2902 	movw	r9, #514	; 0x202
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004260:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8004264:	42ba      	cmp	r2, r7
 8004266:	dc0f      	bgt.n	8004288 <aiPbCmdNNRun+0x260>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004268:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 800426c:	782b      	ldrb	r3, [r5, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d089      	beq.n	8004186 <aiPbCmdNNRun+0x15e>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8004272:	a90b      	add	r1, sp, #44	; 0x2c
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	aa12      	add	r2, sp, #72	; 0x48
 8004278:	f000 fa5a 	bl	8004730 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 800427c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800427e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8004282:	f003 fc19 	bl	8007ab8 <ai_platform_observer_unregister_s>
  return 0;
 8004286:	e77e      	b.n	8004186 <aiPbCmdNNRun+0x15e>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8004288:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 800428a:	3701      	adds	r7, #1
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 800428c:	f013 0f08 	tst.w	r3, #8
 8004290:	bf0c      	ite	eq
 8004292:	2302      	moveq	r3, #2
 8004294:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8004296:	4297      	cmp	r7, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8004298:	bf08      	it	eq
 800429a:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	e9cd 3100 	strd	r3, r1, [sp]
      state = EnumState_S_DONE;
 80042a6:	bf08      	it	eq
 80042a8:	2203      	moveq	r2, #3
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80042aa:	4643      	mov	r3, r8
    EnumState state = EnumState_S_PROCESSING;
 80042ac:	bf18      	it	ne
 80042ae:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80042b0:	eeb0 0a48 	vmov.f32	s0, s16
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7ff fcc0 	bl	8003c3c <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80042bc:	f108 081c 	add.w	r8, r8, #28
 80042c0:	e7ce      	b.n	8004260 <aiPbCmdNNRun+0x238>
 80042c2:	bf00      	nop
 80042c4:	20000b30 	.word	0x20000b30
 80042c8:	0800d18e 	.word	0x0800d18e
 80042cc:	08003cb1 	.word	0x08003cb1
 80042d0:	0800d1b9 	.word	0x0800d1b9
 80042d4:	0800d1cb 	.word	0x0800d1cb
 80042d8:	000400c0 	.word	0x000400c0
 80042dc:	0800d1db 	.word	0x0800d1db
 80042e0:	00000000 	.word	0x00000000
 80042e4:	0800d1f2 	.word	0x0800d1f2

080042e8 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80042e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 80042ea:	4c20      	ldr	r4, [pc, #128]	; (800436c <aiValidationInit+0x84>)
  port_dwt_reset();
 80042ec:	4e20      	ldr	r6, [pc, #128]	; (8004370 <aiValidationInit+0x88>)
 80042ee:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 80042f2:	f7ff fa31 	bl	8003758 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80042f6:	2300      	movs	r3, #0
 80042f8:	f104 0191 	add.w	r1, r4, #145	; 0x91
 80042fc:	2207      	movs	r2, #7
 80042fe:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8004302:	f7ff fa29 	bl	8003758 <lc_print>
 8004306:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 8004308:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800430c:	f7ff fa24 	bl	8003758 <lc_print>

  systemSettingLog();
 8004310:	f7ff fafa 	bl	8003908 <systemSettingLog>

  crcIpInit();
 8004314:	f000 f924 	bl	8004560 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8004318:	f000 f932 	bl	8004580 <port_dwt_init_imp>
  port_dwt_reset();
 800431c:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 800431e:	2064      	movs	r0, #100	; 0x64
 8004320:	f7fd f91e 	bl	8001560 <HAL_Delay>
  st = port_dwt_get_cycles();
 8004324:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8004326:	466a      	mov	r2, sp
 8004328:	2664      	movs	r6, #100	; 0x64
 800432a:	4629      	mov	r1, r5
 800432c:	fbb0 f0f6 	udiv	r0, r0, r6
 8004330:	f7ff fa5c 	bl	80037ec <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8004334:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8004338:	9a03      	ldr	r2, [sp, #12]
 800433a:	fb06 3101 	mla	r1, r6, r1, r3
 800433e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004342:	f7ff fa09 	bl	8003758 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8004346:	466a      	mov	r2, sp
 8004348:	2100      	movs	r1, #0
 800434a:	f04f 30ff 	mov.w	r0, #4294967295
 800434e:	f7ff fa4d 	bl	80037ec <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8004352:	9a01      	ldr	r2, [sp, #4]
 8004354:	9b02      	ldr	r3, [sp, #8]
 8004356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800435a:	fb01 3302 	mla	r3, r1, r2, r3
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <aiValidationInit+0x8c>)
 8004360:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8004362:	f000 f90d 	bl	8004580 <port_dwt_init_imp>
  cyclesCounterInit();

  return 0;
}
 8004366:	4628      	mov	r0, r5
 8004368:	b004      	add	sp, #16
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	0800d182 	.word	0x0800d182
 8004370:	e0001000 	.word	0xe0001000
 8004374:	20000a20 	.word	0x20000a20

08004378 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800437c:	4c66      	ldr	r4, [pc, #408]	; (8004518 <aiValidationProcess+0x1a0>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800437e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004554 <aiValidationProcess+0x1dc>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004382:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004558 <aiValidationProcess+0x1e0>
  aiPlatformVersion();
 8004386:	f7fe ffa5 	bl	80032d4 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800438a:	2700      	movs	r7, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 800438c:	4863      	ldr	r0, [pc, #396]	; (800451c <aiValidationProcess+0x1a4>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800438e:	f844 7b08 	str.w	r7, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8004392:	f7ff f9e1 	bl	8003758 <lc_print>
  int res = -1;
 8004396:	f04f 35ff 	mov.w	r5, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 800439a:	4639      	mov	r1, r7
 800439c:	2000      	movs	r0, #0
 800439e:	f000 f92f 	bl	8004600 <ai_mnetwork_find>
    if (nn_name) {
 80043a2:	4606      	mov	r6, r0
 80043a4:	b1b0      	cbz	r0, 80043d4 <aiValidationProcess+0x5c>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80043a6:	4601      	mov	r1, r0
 80043a8:	4640      	mov	r0, r8
 80043aa:	f7ff f9d5 	bl	8003758 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80043ae:	485c      	ldr	r0, [pc, #368]	; (8004520 <aiValidationProcess+0x1a8>)
 80043b0:	4631      	mov	r1, r6
 80043b2:	f7ff f9d1 	bl	8003758 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80043b6:	2200      	movs	r2, #0
 80043b8:	f1a4 0108 	sub.w	r1, r4, #8
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 f92d 	bl	800461c <ai_mnetwork_create>
  if (err.type) {
 80043c2:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80043c6:	d016      	beq.n	80043f6 <aiValidationProcess+0x7e>
    aiLogErr(err, "ai_mnetwork_create");
 80043c8:	4956      	ldr	r1, [pc, #344]	; (8004524 <aiValidationProcess+0x1ac>)
 80043ca:	f7fe ff99 	bl	8003300 <aiLogErr>
        nn_name = NULL;
 80043ce:	2600      	movs	r6, #0
    return -1;
 80043d0:	f04f 35ff 	mov.w	r5, #4294967295
    idx++;
 80043d4:	3701      	adds	r7, #1
  } while (nn_name);
 80043d6:	3498      	adds	r4, #152	; 0x98
 80043d8:	2e00      	cmp	r6, #0
 80043da:	d1de      	bne.n	800439a <aiValidationProcess+0x22>
  int r;

  r = aiInit();
  if (r) {
 80043dc:	2d00      	cmp	r5, #0
 80043de:	d077      	beq.n	80044d0 <aiValidationProcess+0x158>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 80043e0:	4851      	ldr	r0, [pc, #324]	; (8004528 <aiValidationProcess+0x1b0>)
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7ff f9b8 	bl	8003758 <lc_print>
    port_hal_delay(2000);
 80043e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80043ec:	f7fd f8b8 	bl	8001560 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 80043f0:	4628      	mov	r0, r5
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LC_PRINT("Initializing the network\r\n");
 80043f6:	484d      	ldr	r0, [pc, #308]	; (800452c <aiValidationProcess+0x1b4>)
 80043f8:	f7ff f9ae 	bl	8003758 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80043fc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8004400:	4621      	mov	r1, r4
 8004402:	f000 f94d 	bl	80046a0 <ai_mnetwork_get_report>
 8004406:	4682      	mov	sl, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8004408:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 800440c:	f1ba 0f00 	cmp.w	sl, #0
 8004410:	d10e      	bne.n	8004430 <aiValidationProcess+0xb8>
    err = ai_mnetwork_get_error(ctx->handle);
 8004412:	f000 f950 	bl	80046b6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8004416:	4946      	ldr	r1, [pc, #280]	; (8004530 <aiValidationProcess+0x1b8>)
 8004418:	f7fe ff72 	bl	8003300 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800441c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8004420:	f000 f926 	bl	8004670 <ai_mnetwork_destroy>
        nn_name = NULL;
 8004424:	4656      	mov	r6, sl
    ctx->handle = AI_HANDLE_NULL;
 8004426:	f844 ac08 	str.w	sl, [r4, #-8]
    return -2;
 800442a:	f06f 0501 	mvn.w	r5, #1
 800442e:	e7d1      	b.n	80043d4 <aiValidationProcess+0x5c>
  if (!ai_mnetwork_init(ctx->handle)) {
 8004430:	f000 f94e 	bl	80046d0 <ai_mnetwork_init>
 8004434:	4682      	mov	sl, r0
 8004436:	b980      	cbnz	r0, 800445a <aiValidationProcess+0xe2>
    err = ai_mnetwork_get_error(ctx->handle);
 8004438:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800443c:	f000 f93b 	bl	80046b6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8004440:	493c      	ldr	r1, [pc, #240]	; (8004534 <aiValidationProcess+0x1bc>)
 8004442:	f7fe ff5d 	bl	8003300 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8004446:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800444a:	f000 f911 	bl	8004670 <ai_mnetwork_destroy>
        nn_name = NULL;
 800444e:	4656      	mov	r6, sl
    ctx->handle = AI_HANDLE_NULL;
 8004450:	f844 ac08 	str.w	sl, [r4, #-8]
    return -4;
 8004454:	f06f 0503 	mvn.w	r5, #3
 8004458:	e7bc      	b.n	80043d4 <aiValidationProcess+0x5c>
  if (ai_mnetwork_get_report(ctx->handle,
 800445a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800445e:	4621      	mov	r1, r4
 8004460:	f000 f91e 	bl	80046a0 <ai_mnetwork_get_report>
 8004464:	4682      	mov	sl, r0
 8004466:	b1b0      	cbz	r0, 8004496 <aiValidationProcess+0x11e>
    aiPrintNetworkInfo(&ctx->report);
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff f857 	bl	800351c <aiPrintNetworkInfo>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 800446e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800455c <aiValidationProcess+0x1e4>
  ctx->inputs_in_activations = false;
 8004472:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
  ctx->outputs_in_activations = false;
 8004476:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800447a:	462b      	mov	r3, r5
    if (!ctx->report.inputs[i].data)
 800447c:	201c      	movs	r0, #28
      ctx->inputs_in_activations = true;
 800447e:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004480:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8004482:	4293      	cmp	r3, r2
 8004484:	db0a      	blt.n	800449c <aiValidationProcess+0x124>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004486:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8004488:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 800448a:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800448c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800448e:	4293      	cmp	r3, r2
 8004490:	db11      	blt.n	80044b6 <aiValidationProcess+0x13e>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8004492:	2500      	movs	r5, #0
 8004494:	e79e      	b.n	80043d4 <aiValidationProcess+0x5c>
    err = ai_mnetwork_get_error(ctx->handle);
 8004496:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800449a:	e7ba      	b.n	8004412 <aiValidationProcess+0x9a>
    if (!ctx->report.inputs[i].data)
 800449c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800449e:	fb00 2203 	mla	r2, r0, r3, r2
 80044a2:	6851      	ldr	r1, [r2, #4]
 80044a4:	b921      	cbnz	r1, 80044b0 <aiValidationProcess+0x138>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 80044a6:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 80044aa:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80044ac:	3301      	adds	r3, #1
 80044ae:	e7e7      	b.n	8004480 <aiValidationProcess+0x108>
      ctx->inputs_in_activations = true;
 80044b0:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 80044b4:	e7fa      	b.n	80044ac <aiValidationProcess+0x134>
    if (!ctx->report.outputs[i].data)
 80044b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044b8:	fb00 2203 	mla	r2, r0, r3, r2
 80044bc:	6851      	ldr	r1, [r2, #4]
 80044be:	b921      	cbnz	r1, 80044ca <aiValidationProcess+0x152>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 80044c0:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80044c4:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80044c6:	3301      	adds	r3, #1
 80044c8:	e7e0      	b.n	800448c <aiValidationProcess+0x114>
      ctx->outputs_in_activations = true;
 80044ca:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80044ce:	e7fa      	b.n	80044c6 <aiValidationProcess+0x14e>
    LC_PRINT("\r\n");
 80044d0:	4819      	ldr	r0, [pc, #100]	; (8004538 <aiValidationProcess+0x1c0>)
 80044d2:	f7ff f941 	bl	8003758 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80044d6:	4819      	ldr	r0, [pc, #100]	; (800453c <aiValidationProcess+0x1c4>)
 80044d8:	f7ff f93e 	bl	8003758 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 80044dc:	4818      	ldr	r0, [pc, #96]	; (8004540 <aiValidationProcess+0x1c8>)
 80044de:	f7ff f93b 	bl	8003758 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80044e2:	4816      	ldr	r0, [pc, #88]	; (800453c <aiValidationProcess+0x1c4>)
 80044e4:	f7ff f938 	bl	8003758 <lc_print>
    LC_PRINT("\r\n");
 80044e8:	4813      	ldr	r0, [pc, #76]	; (8004538 <aiValidationProcess+0x1c0>)
 80044ea:	f7ff f935 	bl	8003758 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 80044ee:	4815      	ldr	r0, [pc, #84]	; (8004544 <aiValidationProcess+0x1cc>)
 80044f0:	f7ff f932 	bl	8003758 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 80044f4:	4814      	ldr	r0, [pc, #80]	; (8004548 <aiValidationProcess+0x1d0>)
 80044f6:	f7ff f92f 	bl	8003758 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 80044fa:	4814      	ldr	r0, [pc, #80]	; (800454c <aiValidationProcess+0x1d4>)
 80044fc:	462a      	mov	r2, r5
 80044fe:	2103      	movs	r1, #3
 8004500:	f7ff f92a 	bl	8003758 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8004504:	4812      	ldr	r0, [pc, #72]	; (8004550 <aiValidationProcess+0x1d8>)
 8004506:	f7fe fd43 	bl	8002f90 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 800450a:	f7fe fde7 	bl	80030dc <aiPbMgrWaitAndProcess>
  } while (r==0);
 800450e:	4605      	mov	r5, r0
 8004510:	2800      	cmp	r0, #0
 8004512:	d0fa      	beq.n	800450a <aiValidationProcess+0x192>
 8004514:	e76c      	b.n	80043f0 <aiValidationProcess+0x78>
 8004516:	bf00      	nop
 8004518:	20000a98 	.word	0x20000a98
 800451c:	0800d268 	.word	0x0800d268
 8004520:	0800d29f 	.word	0x0800d29f
 8004524:	0800d2bd 	.word	0x0800d2bd
 8004528:	0800d311 	.word	0x0800d311
 800452c:	0800d2d0 	.word	0x0800d2d0
 8004530:	0800d2eb 	.word	0x0800d2eb
 8004534:	0800d300 	.word	0x0800d300
 8004538:	0800d327 	.word	0x0800d327
 800453c:	0800d32a 	.word	0x0800d32a
 8004540:	0800d358 	.word	0x0800d358
 8004544:	0800d386 	.word	0x0800d386
 8004548:	0800d3cc 	.word	0x0800d3cc
 800454c:	0800d3fa 	.word	0x0800d3fa
 8004550:	20000010 	.word	0x20000010
 8004554:	0800d288 	.word	0x0800d288
 8004558:	20000054 	.word	0x20000054
 800455c:	20000050 	.word	0x20000050

08004560 <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <port_hal_crc_ip_init_imp+0x1c>)
 8004562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004568:	649a      	str	r2, [r3, #72]	; 0x48
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 800456c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800456e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8004576:	b002      	add	sp, #8
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000

08004580 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <port_dwt_init_imp+0x20>)
 8004582:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8004586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <port_dwt_init_imp+0x24>)
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	e0001000 	.word	0xe0001000

080045a8 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <ai_mnetwork_handle+0x18>)
 80045aa:	b120      	cbz	r0, 80045b6 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 80045ac:	4298      	cmp	r0, r3
 80045ae:	bf0c      	ite	eq
 80045b0:	4618      	moveq	r0, r3
 80045b2:	2000      	movne	r0, #0
 80045b4:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80045b6:	681a      	ldr	r2, [r3, #0]
            return inst;
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	bf08      	it	eq
 80045bc:	4618      	moveq	r0, r3
}
 80045be:	4770      	bx	lr
 80045c0:	20000b78 	.word	0x20000b78

080045c4 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 80045c4:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 80045c6:	4604      	mov	r4, r0
 80045c8:	b160      	cbz	r0, 80045e4 <ai_mnetwork_is_valid.constprop.0+0x20>
 80045ca:	f7fb fe51 	bl	8000270 <strlen>
 80045ce:	2807      	cmp	r0, #7
 80045d0:	4602      	mov	r2, r0
 80045d2:	d107      	bne.n	80045e4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 80045d6:	4621      	mov	r1, r4
 80045d8:	f006 fbad 	bl	800ad36 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80045dc:	fab0 f080 	clz	r0, r0
 80045e0:	0940      	lsrs	r0, r0, #5
}
 80045e2:	bd10      	pop	{r4, pc}
    return false;
 80045e4:	2000      	movs	r0, #0
 80045e6:	e7fc      	b.n	80045e2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80045e8:	0800d4fa 	.word	0x0800d4fa

080045ec <MX_X_CUBE_AI_Init>:
{
 80045ec:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80045ee:	f7fc fe49 	bl	8001284 <MX_USART2_UART_Init>
}
 80045f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 80045f6:	f7ff be77 	b.w	80042e8 <aiValidationInit>

080045fa <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 80045fa:	f7ff bebd 	b.w	8004378 <aiValidationProcess>
	...

08004600 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8004600:	b510      	push	{r4, lr}
 8004602:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8004604:	f7ff ffde 	bl	80045c4 <ai_mnetwork_is_valid.constprop.0>
 8004608:	b920      	cbnz	r0, 8004614 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 800460a:	2c00      	cmp	r4, #0
 800460c:	4802      	ldr	r0, [pc, #8]	; (8004618 <ai_mnetwork_find+0x18>)
 800460e:	bf18      	it	ne
 8004610:	2000      	movne	r0, #0
}
 8004612:	bd10      	pop	{r4, pc}
            return entry->name;
 8004614:	4800      	ldr	r0, [pc, #0]	; (8004618 <ai_mnetwork_find+0x18>)
 8004616:	e7fc      	b.n	8004612 <ai_mnetwork_find+0x12>
 8004618:	0800d4fa 	.word	0x0800d4fa

0800461c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800461c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800461e:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004620:	2000      	movs	r0, #0
{
 8004622:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004624:	f7ff ffc0 	bl	80045a8 <ai_mnetwork_handle>
{
 8004628:	460d      	mov	r5, r1

    if (!inst) {
 800462a:	4604      	mov	r4, r0
 800462c:	b1e0      	cbz	r0, 8004668 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 800462e:	4630      	mov	r0, r6
 8004630:	f7ff ffc8 	bl	80045c4 <ai_mnetwork_is_valid.constprop.0>
 8004634:	9901      	ldr	r1, [sp, #4]
 8004636:	b910      	cbnz	r0, 800463e <ai_mnetwork_create+0x22>
 8004638:	2214      	movs	r2, #20
 800463a:	2310      	movs	r3, #16
 800463c:	e00d      	b.n	800465a <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fbc8 	bl	8004dd4 <ai_network_create>
 8004644:	b2c2      	uxtb	r2, r0
 8004646:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800464a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 800464e:	d104      	bne.n	800465a <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8004650:	4906      	ldr	r1, [pc, #24]	; (800466c <ai_mnetwork_create+0x50>)
 8004652:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8004654:	6829      	ldr	r1, [r5, #0]
 8004656:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8004658:	602c      	str	r4, [r5, #0]
        return err;
 800465a:	2000      	movs	r0, #0
 800465c:	f362 0007 	bfi	r0, r2, #0, #8
 8004660:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8004664:	b002      	add	sp, #8
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	2231      	movs	r2, #49	; 0x31
 800466a:	e7e6      	b.n	800463a <ai_mnetwork_create+0x1e>
 800466c:	0800d504 	.word	0x0800d504

08004670 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004674:	f7ff ff98 	bl	80045a8 <ai_mnetwork_handle>
    if (inn) {
 8004678:	4605      	mov	r5, r0
 800467a:	b160      	cbz	r0, 8004696 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800467c:	6803      	ldr	r3, [r0, #0]
 800467e:	6840      	ldr	r0, [r0, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004684:	686b      	ldr	r3, [r5, #4]
 8004686:	4283      	cmp	r3, r0
 8004688:	d005      	beq.n	8004696 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 800468a:	4b04      	ldr	r3, [pc, #16]	; (800469c <ai_mnetwork_destroy+0x2c>)
 800468c:	429d      	cmp	r5, r3
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	d100      	bne.n	8004696 <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8004694:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8004696:	4620      	mov	r0, r4
 8004698:	bd38      	pop	{r3, r4, r5, pc}
 800469a:	bf00      	nop
 800469c:	20000b78 	.word	0x20000b78

080046a0 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80046a0:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80046a2:	f7ff ff81 	bl	80045a8 <ai_mnetwork_handle>
    if (inn)
 80046a6:	b128      	cbz	r0, 80046b4 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 80046a8:	6802      	ldr	r2, [r0, #0]
 80046aa:	6840      	ldr	r0, [r0, #4]
 80046ac:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 80046ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 80046b2:	4710      	bx	r2
}
 80046b4:	bd10      	pop	{r4, pc}

080046b6 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 80046b6:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80046b8:	f7ff ff76 	bl	80045a8 <ai_mnetwork_handle>
    if (inn)
 80046bc:	b128      	cbz	r0, 80046ca <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 80046be:	6803      	ldr	r3, [r0, #0]
 80046c0:	6840      	ldr	r0, [r0, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80046c8:	4718      	bx	r3
}
 80046ca:	f241 0014 	movw	r0, #4116	; 0x1014
 80046ce:	bd10      	pop	{r4, pc}

080046d0 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80046d0:	b530      	push	{r4, r5, lr}
 80046d2:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80046d4:	f7ff ff68 	bl	80045a8 <ai_mnetwork_handle>
    if (inn) {
 80046d8:	4604      	mov	r4, r0
 80046da:	b168      	cbz	r0, 80046f8 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80046dc:	6803      	ldr	r3, [r0, #0]
 80046de:	4668      	mov	r0, sp
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80046e4:	2500      	movs	r5, #0
 80046e6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80046ea:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80046ec:	42aa      	cmp	r2, r5
 80046ee:	dc05      	bgt.n	80046fc <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	6860      	ldr	r0, [r4, #4]
 80046f4:	4669      	mov	r1, sp
 80046f6:	4798      	blx	r3
    }
    else
        return false;
}
 80046f8:	b00f      	add	sp, #60	; 0x3c
 80046fa:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	4629      	mov	r1, r5
 8004700:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004704:	a803      	add	r0, sp, #12
 8004706:	f001 fe0d 	bl	8006324 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 800470a:	3501      	adds	r5, #1
 800470c:	e7eb      	b.n	80046e6 <ai_mnetwork_init+0x16>

0800470e <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800470e:	b513      	push	{r0, r1, r4, lr}
 8004710:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004712:	f7ff ff49 	bl	80045a8 <ai_mnetwork_handle>
    if (inn)
 8004716:	4603      	mov	r3, r0
 8004718:	b140      	cbz	r0, 800472c <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	9a01      	ldr	r2, [sp, #4]
 800471e:	6a04      	ldr	r4, [r0, #32]
 8004720:	6858      	ldr	r0, [r3, #4]
 8004722:	4623      	mov	r3, r4
    else
        return 0;
}
 8004724:	b002      	add	sp, #8
 8004726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 800472a:	4718      	bx	r3
}
 800472c:	b002      	add	sp, #8
 800472e:	bd10      	pop	{r4, pc}

08004730 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004734:	f7ff ff38 	bl	80045a8 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004738:	b188      	cbz	r0, 800475e <ai_mnetwork_get_private_handle+0x2e>
 800473a:	b181      	cbz	r1, 800475e <ai_mnetwork_get_private_handle+0x2e>
 800473c:	b17d      	cbz	r5, 800475e <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 800473e:	6843      	ldr	r3, [r0, #4]
 8004740:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004742:	f100 0408 	add.w	r4, r0, #8
 8004746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004756:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800475a:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 800475c:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	e7fb      	b.n	800475c <ai_mnetwork_get_private_handle+0x2c>

08004764 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004768:	6896      	ldr	r6, [r2, #8]
{
 800476a:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 800476c:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 800476e:	f016 0304 	ands.w	r3, r6, #4
{
 8004772:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004774:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004778:	d028      	beq.n	80047cc <_write_number+0x68>
    if ((int64_t)number < 0) {
 800477a:	42a9      	cmp	r1, r5
 800477c:	da07      	bge.n	800478e <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800477e:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004780:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004782:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8004786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800478a:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 800478c:	252d      	movs	r5, #45	; 0x2d
 800478e:	f016 0f08 	tst.w	r6, #8
 8004792:	bf14      	ite	ne
 8004794:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004798:	f04f 0861 	moveq.w	r8, #97	; 0x61
 800479c:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80047a0:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 80047a2:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80047a6:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 80047aa:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 80047ae:	f1ba 0f00 	cmp.w	sl, #0
 80047b2:	d033      	beq.n	800481c <_write_number+0xb8>
      chr = number & 0x0F;
 80047b4:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 80047b8:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80047ba:	2b09      	cmp	r3, #9
      t = number >> 4;
 80047bc:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80047c0:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80047c4:	d906      	bls.n	80047d4 <_write_number+0x70>
 80047c6:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e004      	b.n	80047d6 <_write_number+0x72>
  char sign_neg = 0;
 80047cc:	461d      	mov	r5, r3
 80047ce:	e7de      	b.n	800478e <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 80047d0:	4617      	mov	r7, r2
 80047d2:	e7ea      	b.n	80047aa <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80047d4:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 80047d6:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 80047da:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 80047de:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 80047e2:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 80047e6:	d1f3      	bne.n	80047d0 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 80047e8:	f006 0101 	and.w	r1, r6, #1
 80047ec:	b155      	cbz	r5, 8004804 <_write_number+0xa0>
 80047ee:	b949      	cbnz	r1, 8004804 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 80047f0:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80047f4:	eb0d 0203 	add.w	r2, sp, r3
 80047f8:	232d      	movs	r3, #45	; 0x2d
 80047fa:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 80047fe:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004802:	1eba      	subs	r2, r7, #2
 8004804:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	bf14      	ite	ne
 800480a:	2130      	movne	r1, #48	; 0x30
 800480c:	2120      	moveq	r1, #32
 800480e:	f006 0602 	and.w	r6, r6, #2
 8004812:	455b      	cmp	r3, fp
 8004814:	dd13      	ble.n	800483e <_write_number+0xda>
 8004816:	b166      	cbz	r6, 8004832 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004818:	b9a5      	cbnz	r5, 8004844 <_write_number+0xe0>
 800481a:	e01c      	b.n	8004856 <_write_number+0xf2>
      t = number / 10;
 800481c:	220a      	movs	r2, #10
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc fad0 	bl	8000dc4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004824:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8004828:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800482c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8004830:	e7ca      	b.n	80047c8 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004832:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004836:	f10b 0b01 	add.w	fp, fp, #1
 800483a:	3a01      	subs	r2, #1
 800483c:	e7e9      	b.n	8004812 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 800483e:	b155      	cbz	r5, 8004856 <_write_number+0xf2>
 8004840:	455b      	cmp	r3, fp
 8004842:	d108      	bne.n	8004856 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8004844:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004848:	446b      	add	r3, sp
 800484a:	212d      	movs	r1, #45	; 0x2d
 800484c:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8004850:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004854:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004856:	eb0d 0602 	add.w	r6, sp, r2
 800485a:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004862:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8004864:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004866:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004868:	45ab      	cmp	fp, r5
 800486a:	d1f7      	bne.n	800485c <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	079b      	lsls	r3, r3, #30
 8004870:	d408      	bmi.n	8004884 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004872:	4628      	mov	r0, r5
 8004874:	b011      	add	sp, #68	; 0x44
 8004876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	6920      	ldr	r0, [r4, #16]
 800487e:	2120      	movs	r1, #32
 8004880:	4798      	blx	r3
 8004882:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	42ab      	cmp	r3, r5
 8004888:	dcf7      	bgt.n	800487a <_write_number+0x116>
 800488a:	e7f2      	b.n	8004872 <_write_number+0x10e>

0800488c <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	4682      	mov	sl, r0
 8004892:	b09d      	sub	sp, #116	; 0x74
 8004894:	4688      	mov	r8, r1
 8004896:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004898:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 800489c:	4613      	mov	r3, r2
 800489e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80048a2:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80048a4:	b919      	cbnz	r1, 80048ae <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 80048a6:	4658      	mov	r0, fp
 80048a8:	b01d      	add	sp, #116	; 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 80048ae:	290a      	cmp	r1, #10
 80048b0:	d104      	bne.n	80048bc <vlc_print+0x30>
      putc_fct(user, c);
 80048b2:	4640      	mov	r0, r8
 80048b4:	47d0      	blx	sl
      count++;
 80048b6:	f10b 0b01 	add.w	fp, fp, #1
 80048ba:	e0fb      	b.n	8004ab4 <vlc_print+0x228>
    else if (c == '%')
 80048bc:	2925      	cmp	r1, #37	; 0x25
 80048be:	d1f8      	bne.n	80048b2 <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80048c0:	2300      	movs	r3, #0
 80048c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80048c6:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 80048ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80048ce:	461f      	mov	r7, r3
 80048d0:	4618      	mov	r0, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	461e      	mov	r6, r3
      bool long_type = false;
 80048d8:	469c      	mov	ip, r3
      bool has_precision = false;
 80048da:	469e      	mov	lr, r3
  return *(*fmtP)++;
 80048dc:	9904      	ldr	r1, [sp, #16]
 80048de:	f811 5b01 	ldrb.w	r5, [r1], #1
 80048e2:	9104      	str	r1, [sp, #16]
        if (!c)
 80048e4:	b32d      	cbz	r5, 8004932 <vlc_print+0xa6>
        else if (c == '0')
 80048e6:	2d39      	cmp	r5, #57	; 0x39
 80048e8:	d814      	bhi.n	8004914 <vlc_print+0x88>
 80048ea:	2d2c      	cmp	r5, #44	; 0x2c
 80048ec:	d91e      	bls.n	800492c <vlc_print+0xa0>
 80048ee:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 80048f2:	290c      	cmp	r1, #12
 80048f4:	d811      	bhi.n	800491a <vlc_print+0x8e>
 80048f6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80048fa:	0044      	.short	0x0044
 80048fc:	001001ff 	.word	0x001001ff
 8004900:	00470030 	.word	0x00470030
 8004904:	00470047 	.word	0x00470047
 8004908:	00470047 	.word	0x00470047
 800490c:	00470047 	.word	0x00470047
 8004910:	00470047 	.word	0x00470047
 8004914:	2d6c      	cmp	r5, #108	; 0x6c
 8004916:	f000 8202 	beq.w	8004d1e <vlc_print+0x492>
          switch(c)
 800491a:	2d78      	cmp	r5, #120	; 0x78
 800491c:	d809      	bhi.n	8004932 <vlc_print+0xa6>
 800491e:	2d62      	cmp	r5, #98	; 0x62
 8004920:	d83d      	bhi.n	800499e <vlc_print+0x112>
 8004922:	2d46      	cmp	r5, #70	; 0x46
 8004924:	f000 810c 	beq.w	8004b40 <vlc_print+0x2b4>
 8004928:	2d58      	cmp	r5, #88	; 0x58
 800492a:	d06b      	beq.n	8004a04 <vlc_print+0x178>
 800492c:	2d25      	cmp	r5, #37	; 0x25
 800492e:	f000 8088 	beq.w	8004a42 <vlc_print+0x1b6>
 8004932:	b103      	cbz	r3, 8004936 <vlc_print+0xaa>
 8004934:	9709      	str	r7, [sp, #36]	; 0x24
 8004936:	b100      	cbz	r0, 800493a <vlc_print+0xae>
 8004938:	9208      	str	r2, [sp, #32]
 800493a:	9b00      	ldr	r3, [sp, #0]
 800493c:	b103      	cbz	r3, 8004940 <vlc_print+0xb4>
 800493e:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 8004940:	213c      	movs	r1, #60	; 0x3c
 8004942:	4640      	mov	r0, r8
 8004944:	47d0      	blx	sl
        putc_fct(user, '!');
 8004946:	2121      	movs	r1, #33	; 0x21
 8004948:	4640      	mov	r0, r8
 800494a:	47d0      	blx	sl
        putc_fct(user, '>');
 800494c:	213e      	movs	r1, #62	; 0x3e
 800494e:	4640      	mov	r0, r8
 8004950:	47d0      	blx	sl
        va_arg(vl, signed long);
 8004952:	3404      	adds	r4, #4
        count += 3;
 8004954:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 8004958:	e0ac      	b.n	8004ab4 <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 800495a:	ea56 0502 	orrs.w	r5, r6, r2
 800495e:	d105      	bne.n	800496c <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004960:	f047 0701 	orr.w	r7, r7, #1
 8004964:	462a      	mov	r2, r5
 8004966:	462e      	mov	r6, r5
 8004968:	2301      	movs	r3, #1
 800496a:	e7b7      	b.n	80048dc <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800496c:	210a      	movs	r1, #10
          } else if (has_precision) {
 800496e:	f1be 0f00 	cmp.w	lr, #0
 8004972:	d002      	beq.n	800497a <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004974:	434a      	muls	r2, r1
 8004976:	4670      	mov	r0, lr
 8004978:	e7b0      	b.n	80048dc <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 800497a:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 800497c:	2101      	movs	r1, #1
 800497e:	9100      	str	r1, [sp, #0]
 8004980:	e7ac      	b.n	80048dc <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 8004982:	f047 0702 	orr.w	r7, r7, #2
 8004986:	e7ef      	b.n	8004968 <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004988:	3d30      	subs	r5, #48	; 0x30
 800498a:	210a      	movs	r1, #10
          if (has_precision) {
 800498c:	f1be 0f00 	cmp.w	lr, #0
 8004990:	d002      	beq.n	8004998 <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004992:	fb01 5202 	mla	r2, r1, r2, r5
 8004996:	e7ee      	b.n	8004976 <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 8004998:	fb01 5606 	mla	r6, r1, r6, r5
 800499c:	e7ee      	b.n	800497c <vlc_print+0xf0>
          switch(c)
 800499e:	3d63      	subs	r5, #99	; 0x63
 80049a0:	2d15      	cmp	r5, #21
 80049a2:	d8c6      	bhi.n	8004932 <vlc_print+0xa6>
 80049a4:	f20f 0e04 	addw	lr, pc, #4
 80049a8:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 80049ac:	08004a55 	.word	0x08004a55
 80049b0:	08004b09 	.word	0x08004b09
 80049b4:	08004933 	.word	0x08004933
 80049b8:	08004b41 	.word	0x08004b41
 80049bc:	08004933 	.word	0x08004933
 80049c0:	08004933 	.word	0x08004933
 80049c4:	08004b09 	.word	0x08004b09
 80049c8:	08004933 	.word	0x08004933
 80049cc:	08004933 	.word	0x08004933
 80049d0:	08004933 	.word	0x08004933
 80049d4:	08004933 	.word	0x08004933
 80049d8:	08004933 	.word	0x08004933
 80049dc:	08004933 	.word	0x08004933
 80049e0:	08004af3 	.word	0x08004af3
 80049e4:	08004933 	.word	0x08004933
 80049e8:	08004933 	.word	0x08004933
 80049ec:	08004a69 	.word	0x08004a69
 80049f0:	08004933 	.word	0x08004933
 80049f4:	08004cff 	.word	0x08004cff
 80049f8:	08004933 	.word	0x08004933
 80049fc:	08004933 	.word	0x08004933
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	b103      	cbz	r3, 8004a08 <vlc_print+0x17c>
 8004a06:	9709      	str	r7, [sp, #36]	; 0x24
 8004a08:	b100      	cbz	r0, 8004a0c <vlc_print+0x180>
 8004a0a:	9208      	str	r2, [sp, #32]
 8004a0c:	9b00      	ldr	r3, [sp, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <vlc_print+0x186>
 8004a10:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a14:	f043 0308 	orr.w	r3, r3, #8
 8004a18:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1a:	e006      	b.n	8004a2a <vlc_print+0x19e>
 8004a1c:	b103      	cbz	r3, 8004a20 <vlc_print+0x194>
 8004a1e:	9709      	str	r7, [sp, #36]	; 0x24
 8004a20:	b100      	cbz	r0, 8004a24 <vlc_print+0x198>
 8004a22:	9208      	str	r2, [sp, #32]
 8004a24:	9b00      	ldr	r3, [sp, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <vlc_print+0x19e>
 8004a28:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8004a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004a2c:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8004a30:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8004a34:	aa07      	add	r2, sp, #28
 8004a36:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004a38:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004a3a:	f7ff fe93 	bl	8004764 <_write_number>
 8004a3e:	4483      	add	fp, r0
            break;
 8004a40:	e038      	b.n	8004ab4 <vlc_print+0x228>
 8004a42:	b103      	cbz	r3, 8004a46 <vlc_print+0x1ba>
 8004a44:	9709      	str	r7, [sp, #36]	; 0x24
 8004a46:	b100      	cbz	r0, 8004a4a <vlc_print+0x1be>
 8004a48:	9208      	str	r2, [sp, #32]
 8004a4a:	9b00      	ldr	r3, [sp, #0]
 8004a4c:	b103      	cbz	r3, 8004a50 <vlc_print+0x1c4>
 8004a4e:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 8004a50:	2125      	movs	r1, #37	; 0x25
 8004a52:	e72e      	b.n	80048b2 <vlc_print+0x26>
 8004a54:	b103      	cbz	r3, 8004a58 <vlc_print+0x1cc>
 8004a56:	9709      	str	r7, [sp, #36]	; 0x24
 8004a58:	b100      	cbz	r0, 8004a5c <vlc_print+0x1d0>
 8004a5a:	9208      	str	r2, [sp, #32]
 8004a5c:	9b00      	ldr	r3, [sp, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <vlc_print+0x1d6>
 8004a60:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 8004a62:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004a66:	e724      	b.n	80048b2 <vlc_print+0x26>
 8004a68:	b103      	cbz	r3, 8004a6c <vlc_print+0x1e0>
 8004a6a:	9709      	str	r7, [sp, #36]	; 0x24
 8004a6c:	b100      	cbz	r0, 8004a70 <vlc_print+0x1e4>
 8004a6e:	9208      	str	r2, [sp, #32]
 8004a70:	9b00      	ldr	r3, [sp, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <vlc_print+0x1ea>
 8004a74:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 8004a76:	4bab      	ldr	r3, [pc, #684]	; (8004d24 <vlc_print+0x498>)
            str = va_arg(vl, char*);
 8004a78:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004a7c:	f1b9 0f00 	cmp.w	r9, #0
 8004a80:	bf08      	it	eq
 8004a82:	4699      	moveq	r9, r3
  int len = strlen(str);
 8004a84:	4648      	mov	r0, r9
 8004a86:	f7fb fbf3 	bl	8000270 <strlen>
  if (specifier->precision) {
 8004a8a:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004a8c:	4606      	mov	r6, r0
  if (specifier->precision) {
 8004a8e:	b113      	cbz	r3, 8004a96 <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8004a90:	4298      	cmp	r0, r3
 8004a92:	bfa8      	it	ge
 8004a94:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004a96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a98:	f017 0702 	ands.w	r7, r7, #2
 8004a9c:	d015      	beq.n	8004aca <vlc_print+0x23e>
  int count = 0;
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8004aa2:	eba2 0309 	sub.w	r3, r2, r9
 8004aa6:	429e      	cmp	r6, r3
 8004aa8:	dc11      	bgt.n	8004ace <vlc_print+0x242>
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	bfa8      	it	ge
 8004aae:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8004ab0:	b9ef      	cbnz	r7, 8004aee <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8004ab2:	44ab      	add	fp, r5
            break;
 8004ab4:	9a04      	ldr	r2, [sp, #16]
 8004ab6:	e6f1      	b.n	800489c <vlc_print+0x10>
      _WRITE_C(' ');
 8004ab8:	2120      	movs	r1, #32
 8004aba:	4640      	mov	r0, r8
 8004abc:	47d0      	blx	sl
 8004abe:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004ac0:	9a07      	ldr	r2, [sp, #28]
 8004ac2:	19ab      	adds	r3, r5, r6
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	dcf7      	bgt.n	8004ab8 <vlc_print+0x22c>
 8004ac8:	e7ea      	b.n	8004aa0 <vlc_print+0x214>
  int count = 0;
 8004aca:	463d      	mov	r5, r7
 8004acc:	e7f8      	b.n	8004ac0 <vlc_print+0x234>
    _WRITE_C(*str++);
 8004ace:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 8004ada:	e7e2      	b.n	8004aa2 <vlc_print+0x216>
      _WRITE_C(' ');
 8004adc:	2120      	movs	r1, #32
 8004ade:	4640      	mov	r0, r8
 8004ae0:	47d0      	blx	sl
 8004ae2:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004ae4:	9a07      	ldr	r2, [sp, #28]
 8004ae6:	1973      	adds	r3, r6, r5
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	dcf7      	bgt.n	8004adc <vlc_print+0x250>
 8004aec:	e7e1      	b.n	8004ab2 <vlc_print+0x226>
 8004aee:	1b76      	subs	r6, r6, r5
 8004af0:	e7f8      	b.n	8004ae4 <vlc_print+0x258>
 8004af2:	b103      	cbz	r3, 8004af6 <vlc_print+0x26a>
 8004af4:	9709      	str	r7, [sp, #36]	; 0x24
 8004af6:	b100      	cbz	r0, 8004afa <vlc_print+0x26e>
 8004af8:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8004b02:	2308      	movs	r3, #8
 8004b04:	9307      	str	r3, [sp, #28]
 8004b06:	e784      	b.n	8004a12 <vlc_print+0x186>
 8004b08:	b103      	cbz	r3, 8004b0c <vlc_print+0x280>
 8004b0a:	9709      	str	r7, [sp, #36]	; 0x24
 8004b0c:	b100      	cbz	r0, 8004b10 <vlc_print+0x284>
 8004b0e:	9208      	str	r2, [sp, #32]
 8004b10:	9b00      	ldr	r3, [sp, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <vlc_print+0x28a>
 8004b14:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8004b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b18:	f043 0304 	orr.w	r3, r3, #4
 8004b1c:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8004b1e:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8004b20:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 8004b22:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8004b24:	aa07      	add	r2, sp, #28
 8004b26:	f7ff fe1d 	bl	8004764 <_write_number>
            break;
 8004b2a:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 8004b2c:	4483      	add	fp, r0
            break;
 8004b2e:	e7c1      	b.n	8004ab4 <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 8004b30:	3407      	adds	r4, #7
 8004b32:	f024 0407 	bic.w	r4, r4, #7
 8004b36:	4625      	mov	r5, r4
 8004b38:	6861      	ldr	r1, [r4, #4]
 8004b3a:	f855 0b08 	ldr.w	r0, [r5], #8
 8004b3e:	e7f1      	b.n	8004b24 <vlc_print+0x298>
 8004b40:	b103      	cbz	r3, 8004b44 <vlc_print+0x2b8>
 8004b42:	9709      	str	r7, [sp, #36]	; 0x24
 8004b44:	b100      	cbz	r0, 8004b48 <vlc_print+0x2bc>
 8004b46:	9208      	str	r2, [sp, #32]
 8004b48:	9b00      	ldr	r3, [sp, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <vlc_print+0x2c2>
 8004b4c:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 8004b4e:	3407      	adds	r4, #7
 8004b50:	f024 0407 	bic.w	r4, r4, #7
 8004b54:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8004b58:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004b5a:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004b5e:	b90b      	cbnz	r3, 8004b64 <vlc_print+0x2d8>
              specifier.precision = 6;
 8004b60:	2306      	movs	r3, #6
 8004b62:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004b64:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 8004b66:	4f70      	ldr	r7, [pc, #448]	; (8004d28 <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 8004b68:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8004b6c:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8004b6e:	45a9      	cmp	r9, r5
    mul *= 10;
 8004b70:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004b74:	f2c0 80ac 	blt.w	8004cd0 <vlc_print+0x444>
  if (is_signed)
 8004b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f7fb ffad 	bl	8000adc <__aeabi_dcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f000 80ae 	beq.w	8004ce4 <vlc_print+0x458>
    number = -number;
 8004b88:	9b00      	ldr	r3, [sp, #0]
 8004b8a:	9302      	str	r3, [sp, #8]
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b92:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004b94:	4632      	mov	r2, r6
 8004b96:	463b      	mov	r3, r7
 8004b98:	4964      	ldr	r1, [pc, #400]	; (8004d2c <vlc_print+0x4a0>)
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fb fe56 	bl	800084c <__aeabi_ddiv>
 8004ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ba4:	f7fb fb72 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8004ba8:	4632      	mov	r2, r6
 8004baa:	463b      	mov	r3, r7
 8004bac:	f7fb fd24 	bl	80005f8 <__aeabi_dmul>
 8004bb0:	f7fc f920 	bl	8000df4 <__aeabi_d2ulz>
  uint32_t count = 0;
 8004bb4:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 8004bb6:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8004bb8:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 8004bba:	4691      	mov	r9, r2
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	220a      	movs	r2, #10
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	9105      	str	r1, [sp, #20]
 8004bc4:	f7fc f8fe 	bl	8000dc4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004bc8:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8004bcc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004bd0:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004bd2:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 8004bd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004bda:	446b      	add	r3, sp
 8004bdc:	f107 3cff 	add.w	ip, r7, #4294967295
 8004be0:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004be4:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 8004be6:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 8004be8:	bf01      	itttt	eq
 8004bea:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8004bee:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004bf2:	232e      	moveq	r3, #46	; 0x2e
 8004bf4:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8004bf8:	bf18      	it	ne
 8004bfa:	461e      	movne	r6, r3
  } while (val);
 8004bfc:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8004bfe:	bf06      	itte	eq
 8004c00:	3f02      	subeq	r7, #2
      count++;
 8004c02:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 8004c04:	4667      	movne	r7, ip
  } while (val);
 8004c06:	f1b9 0f0a 	cmp.w	r9, #10
 8004c0a:	f173 0900 	sbcs.w	r9, r3, #0
 8004c0e:	d2d4      	bcs.n	8004bba <vlc_print+0x32e>
    buf[idx--] = '0';
 8004c10:	42ae      	cmp	r6, r5
 8004c12:	f1c5 0001 	rsb	r0, r5, #1
 8004c16:	4430      	add	r0, r6
 8004c18:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004c1c:	bf88      	it	hi
 8004c1e:	2001      	movhi	r0, #1
 8004c20:	eba5 0906 	sub.w	r9, r5, r6
 8004c24:	eb0d 0301 	add.w	r3, sp, r1
 8004c28:	bf88      	it	hi
 8004c2a:	f04f 0900 	movhi.w	r9, #0
 8004c2e:	4438      	add	r0, r7
 8004c30:	4418      	add	r0, r3
 8004c32:	464a      	mov	r2, r9
 8004c34:	f006 f877 	bl	800ad26 <memset>
 8004c38:	1b73      	subs	r3, r6, r5
 8004c3a:	42ae      	cmp	r6, r5
 8004c3c:	bf88      	it	hi
 8004c3e:	2300      	movhi	r3, #0
 8004c40:	444e      	add	r6, r9
  if (count == specifier->precision) {
 8004c42:	42b5      	cmp	r5, r6
 8004c44:	441f      	add	r7, r3
 8004c46:	f105 0501 	add.w	r5, r5, #1
 8004c4a:	d107      	bne.n	8004c5c <vlc_print+0x3d0>
    buf[idx--] = '.';
 8004c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c50:	446b      	add	r3, sp
 8004c52:	222e      	movs	r2, #46	; 0x2e
 8004c54:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004c58:	462e      	mov	r6, r5
    buf[idx--] = '.';
 8004c5a:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 8004c5c:	42b5      	cmp	r5, r6
 8004c5e:	d107      	bne.n	8004c70 <vlc_print+0x3e4>
    buf[idx--] = '0';
 8004c60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c64:	446b      	add	r3, sp
 8004c66:	2230      	movs	r2, #48	; 0x30
 8004c68:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004c6c:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8004c6e:	3f01      	subs	r7, #1
  if (is_signed) {
 8004c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb ff30 	bl	8000adc <__aeabi_dcmplt>
 8004c7c:	b138      	cbz	r0, 8004c8e <vlc_print+0x402>
    buf[idx--] = '-';
 8004c7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c82:	446b      	add	r3, sp
 8004c84:	222d      	movs	r2, #45	; 0x2d
 8004c86:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004c8a:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8004c8c:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8004c8e:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8004c90:	42ae      	cmp	r6, r5
 8004c92:	f1c5 0001 	rsb	r0, r5, #1
 8004c96:	4430      	add	r0, r6
 8004c98:	bf88      	it	hi
 8004c9a:	2001      	movhi	r0, #1
 8004c9c:	eba5 0906 	sub.w	r9, r5, r6
 8004ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8004ca2:	bf88      	it	hi
 8004ca4:	f04f 0900 	movhi.w	r9, #0
 8004ca8:	4438      	add	r0, r7
 8004caa:	464a      	mov	r2, r9
 8004cac:	4418      	add	r0, r3
 8004cae:	2120      	movs	r1, #32
 8004cb0:	f006 f839 	bl	800ad26 <memset>
 8004cb4:	1b73      	subs	r3, r6, r5
 8004cb6:	42ae      	cmp	r6, r5
 8004cb8:	bf88      	it	hi
 8004cba:	2300      	movhi	r3, #0
 8004cbc:	443b      	add	r3, r7
 8004cbe:	aa0c      	add	r2, sp, #48	; 0x30
 8004cc0:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 8004cc2:	18d7      	adds	r7, r2, r3
 8004cc4:	4433      	add	r3, r6
 8004cc6:	189d      	adds	r5, r3, r2
 8004cc8:	42bd      	cmp	r5, r7
 8004cca:	d110      	bne.n	8004cee <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8004ccc:	44b3      	add	fp, r6
            break;
 8004cce:	e6f1      	b.n	8004ab4 <vlc_print+0x228>
    mul *= 10;
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	4639      	mov	r1, r7
 8004cd4:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <vlc_print+0x4a4>)
 8004cd6:	f7fb fc8f 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004cda:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 8004ce2:	e744      	b.n	8004b6e <vlc_print+0x2e2>
 8004ce4:	ed9d 7b00 	vldr	d7, [sp]
 8004ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004cec:	e752      	b.n	8004b94 <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004cee:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 8004cf6:	e7e7      	b.n	8004cc8 <vlc_print+0x43c>
        if (!c)
 8004cf8:	f04f 0e01 	mov.w	lr, #1
 8004cfc:	e5ee      	b.n	80048dc <vlc_print+0x50>
 8004cfe:	b103      	cbz	r3, 8004d02 <vlc_print+0x476>
 8004d00:	9709      	str	r7, [sp, #36]	; 0x24
 8004d02:	b100      	cbz	r0, 8004d06 <vlc_print+0x47a>
 8004d04:	9208      	str	r2, [sp, #32]
 8004d06:	9b00      	ldr	r3, [sp, #0]
 8004d08:	b103      	cbz	r3, 8004d0c <vlc_print+0x480>
 8004d0a:	9607      	str	r6, [sp, #28]
              if (long_type)
 8004d0c:	f1bc 0f00 	cmp.w	ip, #0
 8004d10:	f47f af0e 	bne.w	8004b30 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 8004d14:	4625      	mov	r5, r4
 8004d16:	4661      	mov	r1, ip
 8004d18:	f855 0b04 	ldr.w	r0, [r5], #4
 8004d1c:	e702      	b.n	8004b24 <vlc_print+0x298>
        if (!c)
 8004d1e:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 8004d22:	e5db      	b.n	80048dc <vlc_print+0x50>
 8004d24:	0800d530 	.word	0x0800d530
 8004d28:	3ff00000 	.word	0x3ff00000
 8004d2c:	3fe00000 	.word	0x3fe00000
 8004d30:	40240000 	.word	0x40240000

08004d34 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	b0a2      	sub	sp, #136	; 0x88
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004d3c:	f001 fd78 	bl	8006830 <ai_platform_context_acquire>
 8004d40:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	d035      	beq.n	8004db2 <ai_network_get_report+0x7e>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d030      	beq.n	8004dac <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8004d4a:	2278      	movs	r2, #120	; 0x78
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	a804      	add	r0, sp, #16
 8004d50:	f005 ffe9 	bl	800ad26 <memset>
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <ai_network_get_report+0x84>)
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <ai_network_get_report+0x88>)
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <ai_network_get_report+0x8c>)
 8004d5e:	9302      	str	r3, [sp, #8]
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <ai_network_get_report+0x90>)
 8004d62:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004d64:	f001 fc48 	bl	80065f8 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004d68:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004d6a:	f001 fc7d 	bl	8006668 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004d6e:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <ai_network_get_report+0x94>)
 8004d70:	9306      	str	r3, [sp, #24]
 8004d72:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004d76:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004d7a:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004d7c:	f001 fcc0 	bl	8006700 <ai_platform_api_get_version>
 8004d80:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004d82:	f001 fd09 	bl	8006798 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004d86:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004d90:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <ai_network_get_report+0x98>)
 8004d94:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004d96:	4669      	mov	r1, sp
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f001 fdfd 	bl	8006998 <ai_platform_api_get_network_report>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b120      	cbz	r0, 8004dac <ai_network_get_report+0x78>

    *report = r;
 8004da2:	2288      	movs	r2, #136	; 0x88
 8004da4:	4669      	mov	r1, sp
 8004da6:	4628      	mov	r0, r5
 8004da8:	f006 f85f 	bl	800ae6a <memcpy>
    return true;
  }
  return false;
}
 8004dac:	4620      	mov	r0, r4
 8004dae:	b022      	add	sp, #136	; 0x88
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004db2:	462c      	mov	r4, r5
 8004db4:	e7fa      	b.n	8004dac <ai_network_get_report+0x78>
 8004db6:	bf00      	nop
 8004db8:	0800d4fa 	.word	0x0800d4fa
 8004dbc:	0800d537 	.word	0x0800d537
 8004dc0:	0800d558 	.word	0x0800d558
 8004dc4:	0800d571 	.word	0x0800d571
 8004dc8:	08018829 	.word	0x08018829
 8004dcc:	a1facade 	.word	0xa1facade

08004dd0 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004dd0:	f001 bd6e 	b.w	80068b0 <ai_platform_network_get_error>

08004dd4 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004dd4:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004dd6:	2305      	movs	r3, #5
 8004dd8:	2200      	movs	r2, #0
 8004dda:	e9cd 3200 	strd	r3, r2, [sp]
 8004dde:	4a03      	ldr	r2, [pc, #12]	; (8004dec <ai_network_create+0x18>)
 8004de0:	2301      	movs	r3, #1
 8004de2:	f002 f897 	bl	8006f14 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004de6:	b003      	add	sp, #12
 8004de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dec:	20000368 	.word	0x20000368

08004df0 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004df0:	f002 b966 	b.w	80070c0 <ai_platform_network_destroy>

08004df4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df8:	4607      	mov	r7, r0
 8004dfa:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004dfc:	f002 f9cc 	bl	8007198 <ai_platform_network_init>
  if (!net_ctx) return false;
 8004e00:	4604      	mov	r4, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d064      	beq.n	8004ed0 <ai_network_init+0xdc>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004e06:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004f14 <ai_network_init+0x120>
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f001 fb28 	bl	8006464 <ai_platform_get_weights_map>
 8004e14:	4605      	mov	r5, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d05c      	beq.n	8004ed4 <ai_network_init+0xe0>
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004e1a:	4a34      	ldr	r2, [pc, #208]	; (8004eec <ai_network_init+0xf8>)
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e22:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004e24:	f8d8 3000 	ldr.w	r3, [r8]
    lstm_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004e28:	e9c2 3302 	strd	r3, r3, [r2, #8]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004e2c:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <ai_network_init+0xfc>)
 8004e2e:	6811      	ldr	r1, [r2, #0]
 8004e30:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e34:	6011      	str	r1, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 1600);
 8004e36:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
    lstm_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 1600);
 8004e3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <ai_network_init+0x100>)
 8004e40:	6811      	ldr	r1, [r2, #0]
 8004e42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e46:	6011      	str	r1, [r2, #0]
    lstm_peephole_array.data = AI_PTR(g_network_weights_map[0] + 41600);
 8004e48:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 8004e4c:	3180      	adds	r1, #128	; 0x80
    lstm_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 41600);
 8004e4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <ai_network_init+0x104>)
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e5a:	6011      	str	r1, [r2, #0]
    lstm_bias_array.data = AI_PTR(g_network_weights_map[0] + 42200);
 8004e5c:	f503 4124 	add.w	r1, r3, #41984	; 0xa400
 8004e60:	31d8      	adds	r1, #216	; 0xd8
    lstm_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 42200);
 8004e62:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e66:	4a25      	ldr	r2, [pc, #148]	; (8004efc <ai_network_init+0x108>)
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e6e:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 43000);
 8004e70:	f503 4127 	add.w	r1, r3, #42752	; 0xa700
 8004e74:	31f8      	adds	r1, #248	; 0xf8
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 43000);
 8004e76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e7a:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <ai_network_init+0x10c>)
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 43400);
 8004e7c:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e80:	6811      	ldr	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 43400);
 8004e82:	3388      	adds	r3, #136	; 0x88
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 43400);
 8004e84:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e88:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e8c:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004e8e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004f18 <ai_network_init+0x124>
 8004e92:	4632      	mov	r2, r6
 8004e94:	2101      	movs	r1, #1
 8004e96:	4640      	mov	r0, r8
 8004e98:	f001 fb38 	bl	800650c <ai_platform_get_activations_map>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	b1f8      	cbz	r0, 8004ee0 <ai_network_init+0xec>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea4:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <ai_network_init+0x110>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004ea6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    lstm_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <ai_network_init+0x114>)
 8004eac:	f103 0108 	add.w	r1, r3, #8
    lstm_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8004eb0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 1408);
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <ai_network_init+0x118>)
 8004eb6:	f503 61b0 	add.w	r1, r3, #1408	; 0x580
    lstm_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 1408);
 8004eba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004ebe:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <ai_network_init+0x11c>)
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004ec0:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f002 fa55 	bl	8007374 <ai_platform_network_post_init>
 8004eca:	4030      	ands	r0, r6
 8004ecc:	4005      	ands	r5, r0
 8004ece:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004ed4:	2212      	movs	r2, #18
 8004ed6:	2130      	movs	r1, #48	; 0x30
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f001 fd57 	bl	800698c <ai_platform_network_set_error>
  return false;
 8004ede:	e7d6      	b.n	8004e8e <ai_network_init+0x9a>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004ee0:	2213      	movs	r2, #19
 8004ee2:	2130      	movs	r1, #48	; 0x30
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f001 fd51 	bl	800698c <ai_platform_network_set_error>
  return false;
 8004eea:	e7eb      	b.n	8004ec4 <ai_network_init+0xd0>
 8004eec:	20000428 	.word	0x20000428
 8004ef0:	200004f0 	.word	0x200004f0
 8004ef4:	200004c4 	.word	0x200004c4
 8004ef8:	200003fc 	.word	0x200003fc
 8004efc:	20000358 	.word	0x20000358
 8004f00:	200002e4 	.word	0x200002e4
 8004f04:	200003d0 	.word	0x200003d0
 8004f08:	2000051c 	.word	0x2000051c
 8004f0c:	20000498 	.word	0x20000498
 8004f10:	2000032c 	.word	0x2000032c
 8004f14:	20001278 	.word	0x20001278
 8004f18:	20001274 	.word	0x20001274

08004f1c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004f1c:	f002 bab2 	b.w	8007484 <ai_platform_network_process>

08004f20 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8004f20:	2200      	movs	r2, #0
 8004f22:	f002 baaf 	b.w	8007484 <ai_platform_network_process>
	...

08004f28 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004f28:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004f2a:	4603      	mov	r3, r0
{
 8004f2c:	b085      	sub	sp, #20
  if (!params) return false;
 8004f2e:	b170      	cbz	r0, 8004f4e <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004f30:	4c08      	ldr	r4, [pc, #32]	; (8004f54 <ai_network_data_params_get+0x2c>)
 8004f32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f36:	466a      	mov	r2, sp
 8004f38:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004f3c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004f40:	ad02      	add	r5, sp, #8
 8004f42:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004f46:	4629      	mov	r1, r5
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fb33 	bl	80065b4 <ai_platform_bind_network_params>
}
 8004f4e:	b005      	add	sp, #20
 8004f50:	bd30      	pop	{r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	0800d478 	.word	0x0800d478

08004f58 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 8004f58:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 8004f5a:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pos = fields;
 8004f5e:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8004f62:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8004f66:	441a      	add	r2, r3
 8004f68:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004f6a:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 8004f6e:	441a      	add	r2, r3
 8004f70:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8004f72:	8808      	ldrh	r0, [r1, #0]
}
 8004f74:	3800      	subs	r0, #0
 8004f76:	bf18      	it	ne
 8004f78:	2001      	movne	r0, #1
 8004f7a:	4770      	bx	lr

08004f7c <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8004f7c:	6841      	ldr	r1, [r0, #4]

    if (prev_field->tag == 0)
 8004f7e:	880a      	ldrh	r2, [r1, #0]
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d038      	beq.n	8004ffa <pb_field_iter_next+0x7e>
        return false;
    }
    
    iter->pos++;
    
    if (iter->pos->tag == 0)
 8004f88:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 8004f8c:	f101 020f 	add.w	r2, r1, #15
 8004f90:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8004f92:	b92c      	cbnz	r4, 8004fa0 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8004f94:	68c2      	ldr	r2, [r0, #12]
 8004f96:	6801      	ldr	r1, [r0, #0]
 8004f98:	f7ff ffde 	bl	8004f58 <pb_field_iter_begin>
        return false;
 8004f9c:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004fa0:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8004fa2:	f8b1 2007 	ldrh.w	r2, [r1, #7]
            iter->pos->data_offset == PB_SIZE_MAX)
 8004fa6:	8a4c      	ldrh	r4, [r1, #18]
 8004fa8:	f000 0630 	and.w	r6, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004fac:	2e30      	cmp	r6, #48	; 0x30
 8004fae:	d10a      	bne.n	8004fc6 <pb_field_iter_next+0x4a>
 8004fb0:	7c4d      	ldrb	r5, [r1, #17]
 8004fb2:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8004fb6:	2d30      	cmp	r5, #48	; 0x30
 8004fb8:	d119      	bne.n	8004fee <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8004fba:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004fbe:	42ac      	cmp	r4, r5
 8004fc0:	d115      	bne.n	8004fee <pb_field_iter_next+0x72>
            return true;
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7eb      	b.n	8004f9e <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8004fc6:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8004fca:	2d20      	cmp	r5, #32
 8004fcc:	d10f      	bne.n	8004fee <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 8004fce:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 8004fd2:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8004fd4:	b916      	cbnz	r6, 8004fdc <pb_field_iter_next+0x60>
            iter->required_field_index++;
 8004fd6:	6898      	ldr	r0, [r3, #8]
 8004fd8:	3001      	adds	r0, #1
 8004fda:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004fdc:	4414      	add	r4, r2
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	4422      	add	r2, r4
 8004fe2:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004fe4:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8004fe8:	440a      	add	r2, r1
 8004fea:	615a      	str	r2, [r3, #20]
        return true;
 8004fec:	e7e9      	b.n	8004fc2 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8004fee:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 8004ff2:	2880      	cmp	r0, #128	; 0x80
 8004ff4:	bf08      	it	eq
 8004ff6:	2204      	moveq	r2, #4
 8004ff8:	e7ec      	b.n	8004fd4 <pb_field_iter_next+0x58>
        return false;
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	e7cf      	b.n	8004f9e <pb_field_iter_next+0x22>

08004ffe <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8004ffe:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 8005000:	6846      	ldr	r6, [r0, #4]
{
 8005002:	4604      	mov	r4, r0
 8005004:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	42aa      	cmp	r2, r5
 800500c:	d104      	bne.n	8005018 <pb_field_iter_find+0x1a>
 800500e:	789b      	ldrb	r3, [r3, #2]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	2b08      	cmp	r3, #8
 8005016:	d107      	bne.n	8005028 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff ffaf 	bl	8004f7c <pb_field_iter_next>
    } while (iter->pos != start);
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	42b3      	cmp	r3, r6
 8005022:	d1f0      	bne.n	8005006 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8005024:	2000      	movs	r0, #0
}
 8005026:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8005028:	2001      	movs	r0, #1
 800502a:	e7fc      	b.n	8005026 <pb_field_iter_find+0x28>

0800502c <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800502c:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800502e:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8005030:	18a3      	adds	r3, r4, r2
 8005032:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8005034:	b939      	cbnz	r1, 8005046 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8005036:	2001      	movs	r0, #1
 8005038:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800503a:	5ce0      	ldrb	r0, [r4, r3]
 800503c:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 800503e:	3301      	adds	r3, #1
 8005040:	4293      	cmp	r3, r2
 8005042:	d1fa      	bne.n	800503a <buf_read+0xe>
 8005044:	e7f7      	b.n	8005036 <buf_read+0xa>
 8005046:	2300      	movs	r3, #0
 8005048:	e7fa      	b.n	8005040 <buf_read+0x14>

0800504a <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800504a:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 800504c:	6845      	ldr	r5, [r0, #4]
 800504e:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005050:	f002 060f 	and.w	r6, r2, #15
 8005054:	2e08      	cmp	r6, #8
{
 8005056:	b086      	sub	sp, #24
 8005058:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800505a:	d11f      	bne.n	800509c <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800505c:	6903      	ldr	r3, [r0, #16]
 800505e:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8005060:	2600      	movs	r6, #0
        while (ext != NULL)
 8005062:	b90c      	cbnz	r4, 8005068 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8005064:	b006      	add	sp, #24
 8005066:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005068:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800506a:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800506c:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 800506e:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005070:	4629      	mov	r1, r5
 8005072:	4668      	mov	r0, sp
 8005074:	f7ff ff70 	bl	8004f58 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 800507c:	f104 030c 	add.w	r3, r4, #12
 8005080:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005082:	78ab      	ldrb	r3, [r5, #2]
 8005084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005088:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 800508a:	bf08      	it	eq
 800508c:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 800508e:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 8005090:	bf08      	it	eq
 8005092:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8005094:	f7ff ffd9 	bl	800504a <pb_field_set_to_default>
            ext = ext->next;
 8005098:	68a4      	ldr	r4, [r4, #8]
 800509a:	e7e2      	b.n	8005062 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800509c:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 80050a0:	d127      	bne.n	80050f2 <pb_field_set_to_default+0xa8>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 80050a2:	f002 0030 	and.w	r0, r2, #48	; 0x30
 80050a6:	2810      	cmp	r0, #16
 80050a8:	d110      	bne.n	80050cc <pb_field_set_to_default+0x82>
 80050aa:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 80050ae:	4282      	cmp	r2, r0
 80050b0:	d000      	beq.n	80050b4 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 80050b2:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80050b4:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80050b6:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80050ba:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80050bc:	d10b      	bne.n	80050d6 <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80050be:	4601      	mov	r1, r0
 80050c0:	4620      	mov	r0, r4
}
 80050c2:	b006      	add	sp, #24
 80050c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80050c8:	f000 b81b 	b.w	8005102 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80050cc:	0690      	lsls	r0, r2, #26
 80050ce:	d5f1      	bpl.n	80050b4 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	8019      	strh	r1, [r3, #0]
}
 80050d4:	e7c6      	b.n	8005064 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80050d6:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 80050da:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 80050dc:	b124      	cbz	r4, 80050e8 <pb_field_set_to_default+0x9e>
}
 80050de:	b006      	add	sp, #24
 80050e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80050e4:	f005 bec1 	b.w	800ae6a <memcpy>
}
 80050e8:	b006      	add	sp, #24
 80050ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 80050ee:	f005 be1a 	b.w	800ad26 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80050f2:	2980      	cmp	r1, #128	; 0x80
 80050f4:	d1b6      	bne.n	8005064 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 80050f6:	6900      	ldr	r0, [r0, #16]
 80050f8:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80050fa:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 80050fc:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80050fe:	d5b1      	bpl.n	8005064 <pb_field_set_to_default+0x1a>
 8005100:	e7e6      	b.n	80050d0 <pb_field_set_to_default+0x86>

08005102 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8005102:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005104:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8005106:	4601      	mov	r1, r0
 8005108:	4668      	mov	r0, sp
 800510a:	f7ff ff25 	bl	8004f58 <pb_field_iter_begin>
 800510e:	b130      	cbz	r0, 800511e <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8005110:	4668      	mov	r0, sp
 8005112:	f7ff ff9a 	bl	800504a <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8005116:	4668      	mov	r0, sp
 8005118:	f7ff ff30 	bl	8004f7c <pb_field_iter_next>
 800511c:	e7f7      	b.n	800510e <pb_message_set_to_defaults+0xc>
}
 800511e:	b007      	add	sp, #28
 8005120:	f85d fb04 	ldr.w	pc, [sp], #4

08005124 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8005124:	6883      	ldr	r3, [r0, #8]
{
 8005126:	b510      	push	{r4, lr}
 8005128:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 800512a:	b93b      	cbnz	r3, 800513c <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800512c:	68c2      	ldr	r2, [r0, #12]
 800512e:	490b      	ldr	r1, [pc, #44]	; (800515c <pb_readbyte+0x38>)
 8005130:	2a00      	cmp	r2, #0
 8005132:	bf08      	it	eq
 8005134:	460a      	moveq	r2, r1
 8005136:	60c2      	str	r2, [r0, #12]
 8005138:	4618      	mov	r0, r3
}
 800513a:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 800513c:	6803      	ldr	r3, [r0, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4798      	blx	r3
 8005142:	b930      	cbnz	r0, 8005152 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8005144:	68e3      	ldr	r3, [r4, #12]
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <pb_readbyte+0x3c>)
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf08      	it	eq
 800514c:	4613      	moveq	r3, r2
 800514e:	60e3      	str	r3, [r4, #12]
 8005150:	e7f3      	b.n	800513a <pb_readbyte+0x16>
    stream->bytes_left--;
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	3b01      	subs	r3, #1
 8005156:	60a3      	str	r3, [r4, #8]
    return true;    
 8005158:	e7ef      	b.n	800513a <pb_readbyte+0x16>
 800515a:	bf00      	nop
 800515c:	08017f30 	.word	0x08017f30
 8005160:	08017f3e 	.word	0x08017f3e

08005164 <pb_decode_varint32_eof>:
{
 8005164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005168:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 800516a:	f10d 0107 	add.w	r1, sp, #7
{
 800516e:	4605      	mov	r5, r0
 8005170:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8005172:	f7ff ffd7 	bl	8005124 <pb_readbyte>
 8005176:	4606      	mov	r6, r0
 8005178:	b958      	cbnz	r0, 8005192 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 800517a:	68ab      	ldr	r3, [r5, #8]
 800517c:	b10b      	cbz	r3, 8005182 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800517e:	2600      	movs	r6, #0
 8005180:	e003      	b.n	800518a <pb_decode_varint32_eof+0x26>
            if (eof)
 8005182:	2c00      	cmp	r4, #0
 8005184:	d0fb      	beq.n	800517e <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8005186:	2301      	movs	r3, #1
 8005188:	7023      	strb	r3, [r4, #0]
}
 800518a:	4630      	mov	r0, r6
 800518c:	b002      	add	sp, #8
 800518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 8005192:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005196:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	da2a      	bge.n	80051f4 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 800519e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 80051a2:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 80051a4:	f10d 0107 	add.w	r1, sp, #7
 80051a8:	4628      	mov	r0, r5
 80051aa:	f7ff ffbb 	bl	8005124 <pb_readbyte>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0e5      	beq.n	800517e <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80051b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 80051b6:	2f1f      	cmp	r7, #31
 80051b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051bc:	d90f      	bls.n	80051de <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80051be:	2f3f      	cmp	r7, #63	; 0x3f
 80051c0:	bf34      	ite	cc
 80051c2:	21ff      	movcc	r1, #255	; 0xff
 80051c4:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80051c6:	b162      	cbz	r2, 80051e2 <pb_decode_varint32_eof+0x7e>
 80051c8:	2c00      	cmp	r4, #0
 80051ca:	da01      	bge.n	80051d0 <pb_decode_varint32_eof+0x6c>
 80051cc:	4299      	cmp	r1, r3
 80051ce:	d008      	beq.n	80051e2 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80051d0:	68eb      	ldr	r3, [r5, #12]
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <pb_decode_varint32_eof+0x98>)
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf08      	it	eq
 80051d8:	4613      	moveq	r3, r2
 80051da:	60eb      	str	r3, [r5, #12]
 80051dc:	e7cf      	b.n	800517e <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80051de:	40ba      	lsls	r2, r7
 80051e0:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 80051e2:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 80051e4:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 80051e8:	d4dc      	bmi.n	80051a4 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 80051ea:	2f23      	cmp	r7, #35	; 0x23
 80051ec:	d102      	bne.n	80051f4 <pb_decode_varint32_eof+0x90>
 80051ee:	f013 0f70 	tst.w	r3, #112	; 0x70
 80051f2:	d1ed      	bne.n	80051d0 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 80051f4:	f8c8 4000 	str.w	r4, [r8]
   return true;
 80051f8:	e7c7      	b.n	800518a <pb_decode_varint32_eof+0x26>
 80051fa:	bf00      	nop
 80051fc:	08017f47 	.word	0x08017f47

08005200 <pb_read>:
{
 8005200:	b530      	push	{r4, r5, lr}
 8005202:	4604      	mov	r4, r0
 8005204:	b085      	sub	sp, #20
 8005206:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8005208:	b9a9      	cbnz	r1, 8005236 <pb_read+0x36>
 800520a:	6802      	ldr	r2, [r0, #0]
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <pb_read+0x6c>)
 800520e:	429a      	cmp	r2, r3
 8005210:	d011      	beq.n	8005236 <pb_read+0x36>
		while (count > 16)
 8005212:	2d10      	cmp	r5, #16
 8005214:	d806      	bhi.n	8005224 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8005216:	462a      	mov	r2, r5
 8005218:	4669      	mov	r1, sp
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff fff0 	bl	8005200 <pb_read>
}
 8005220:	b005      	add	sp, #20
 8005222:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8005224:	2210      	movs	r2, #16
 8005226:	4669      	mov	r1, sp
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff ffe9 	bl	8005200 <pb_read>
 800522e:	2800      	cmp	r0, #0
 8005230:	d0f6      	beq.n	8005220 <pb_read+0x20>
			count -= 16;
 8005232:	3d10      	subs	r5, #16
 8005234:	e7ed      	b.n	8005212 <pb_read+0x12>
    if (stream->bytes_left < count)
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	42ab      	cmp	r3, r5
 800523a:	d207      	bcs.n	800524c <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800523c:	68e3      	ldr	r3, [r4, #12]
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <pb_read+0x70>)
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf08      	it	eq
 8005244:	4613      	moveq	r3, r2
 8005246:	60e3      	str	r3, [r4, #12]
 8005248:	2000      	movs	r0, #0
 800524a:	e7e9      	b.n	8005220 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	462a      	mov	r2, r5
 8005250:	4620      	mov	r0, r4
 8005252:	4798      	blx	r3
 8005254:	b930      	cbnz	r0, 8005264 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <pb_read+0x74>)
 800525a:	2b00      	cmp	r3, #0
 800525c:	bf08      	it	eq
 800525e:	4613      	moveq	r3, r2
 8005260:	60e3      	str	r3, [r4, #12]
 8005262:	e7dd      	b.n	8005220 <pb_read+0x20>
    stream->bytes_left -= count;
 8005264:	68a3      	ldr	r3, [r4, #8]
 8005266:	1b5b      	subs	r3, r3, r5
 8005268:	60a3      	str	r3, [r4, #8]
    return true;
 800526a:	e7d9      	b.n	8005220 <pb_read+0x20>
 800526c:	0800502d 	.word	0x0800502d
 8005270:	08017f30 	.word	0x08017f30
 8005274:	08017f3e 	.word	0x08017f3e

08005278 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005278:	2200      	movs	r2, #0
 800527a:	f7ff bf73 	b.w	8005164 <pb_decode_varint32_eof>
	...

08005280 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8005280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005282:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8005284:	a901      	add	r1, sp, #4
{
 8005286:	4604      	mov	r4, r0
 8005288:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800528a:	f7ff fff5 	bl	8005278 <pb_decode_varint32>
 800528e:	4605      	mov	r5, r0
 8005290:	b188      	cbz	r0, 80052b6 <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8005292:	9901      	ldr	r1, [sp, #4]
 8005294:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005298:	d307      	bcc.n	80052aa <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <pb_dec_fixed_length_bytes+0x58>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf08      	it	eq
 80052a2:	4613      	moveq	r3, r2
 80052a4:	60e3      	str	r3, [r4, #12]
 80052a6:	2500      	movs	r5, #0
 80052a8:	e005      	b.n	80052b6 <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 80052aa:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 80052ae:	b929      	cbnz	r1, 80052bc <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 80052b0:	4630      	mov	r0, r6
 80052b2:	f005 fd38 	bl	800ad26 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 80052b6:	4628      	mov	r0, r5
 80052b8:	b003      	add	sp, #12
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 80052bc:	4291      	cmp	r1, r2
 80052be:	d002      	beq.n	80052c6 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80052c0:	68e3      	ldr	r3, [r4, #12]
 80052c2:	4a06      	ldr	r2, [pc, #24]	; (80052dc <pb_dec_fixed_length_bytes+0x5c>)
 80052c4:	e7eb      	b.n	800529e <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80052c6:	460a      	mov	r2, r1
 80052c8:	4620      	mov	r0, r4
 80052ca:	4631      	mov	r1, r6
}
 80052cc:	b003      	add	sp, #12
 80052ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80052d2:	f7ff bf95 	b.w	8005200 <pb_read>
 80052d6:	bf00      	nop
 80052d8:	08017f57 	.word	0x08017f57
 80052dc:	08017f66 	.word	0x08017f66

080052e0 <pb_dec_string>:
{
 80052e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052e4:	4688      	mov	r8, r1
    if (!pb_decode_varint32(stream, &size))
 80052e6:	a901      	add	r1, sp, #4
{
 80052e8:	4604      	mov	r4, r0
 80052ea:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 80052ec:	f7ff ffc4 	bl	8005278 <pb_decode_varint32>
 80052f0:	b1a0      	cbz	r0, 800531c <pb_dec_string+0x3c>
    alloc_size = size + 1;
 80052f2:	9d01      	ldr	r5, [sp, #4]
 80052f4:	1c6a      	adds	r2, r5, #1
 80052f6:	f04f 0700 	mov.w	r7, #0
 80052fa:	d208      	bcs.n	800530e <pb_dec_string+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80052fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005300:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d10c      	bne.n	8005322 <pb_dec_string+0x42>
        PB_RETURN_ERROR(stream, "no malloc support");
 8005308:	68e3      	ldr	r3, [r4, #12]
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <pb_dec_string+0x60>)
 800530c:	e001      	b.n	8005312 <pb_dec_string+0x32>
        PB_RETURN_ERROR(stream, "size too large");
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <pb_dec_string+0x64>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf08      	it	eq
 8005316:	4613      	moveq	r3, r2
 8005318:	60e3      	str	r3, [r4, #12]
 800531a:	4638      	mov	r0, r7
}
 800531c:	b002      	add	sp, #8
 800531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (alloc_size > field->data_size)
 8005322:	f8b8 3007 	ldrh.w	r3, [r8, #7]
 8005326:	4293      	cmp	r3, r2
 8005328:	d202      	bcs.n	8005330 <pb_dec_string+0x50>
            PB_RETURN_ERROR(stream, "string overflow");
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	4a06      	ldr	r2, [pc, #24]	; (8005348 <pb_dec_string+0x68>)
 800532e:	e7f0      	b.n	8005312 <pb_dec_string+0x32>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8005330:	462a      	mov	r2, r5
 8005332:	4631      	mov	r1, r6
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff ff63 	bl	8005200 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 800533a:	5577      	strb	r7, [r6, r5]
    return status;
 800533c:	e7ee      	b.n	800531c <pb_dec_string+0x3c>
 800533e:	bf00      	nop
 8005340:	08017f97 	.word	0x08017f97
 8005344:	08017f88 	.word	0x08017f88
 8005348:	08017fa9 	.word	0x08017fa9

0800534c <pb_dec_bytes>:
{
 800534c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800534e:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8005350:	a901      	add	r1, sp, #4
{
 8005352:	4604      	mov	r4, r0
 8005354:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8005356:	f7ff ff8f 	bl	8005278 <pb_decode_varint32>
 800535a:	b198      	cbz	r0, 8005384 <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 800535c:	9a01      	ldr	r2, [sp, #4]
 800535e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005362:	d302      	bcc.n	800536a <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8005364:	68e3      	ldr	r3, [r4, #12]
 8005366:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <pb_dec_bytes+0x58>)
 8005368:	e008      	b.n	800537c <pb_dec_bytes+0x30>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800536a:	78b3      	ldrb	r3, [r6, #2]
 800536c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005370:	2b80      	cmp	r3, #128	; 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8005372:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005376:	d108      	bne.n	800538a <pb_dec_bytes+0x3e>
        PB_RETURN_ERROR(stream, "no malloc support");
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <pb_dec_bytes+0x5c>)
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf08      	it	eq
 8005380:	4613      	moveq	r3, r2
 8005382:	60e3      	str	r3, [r4, #12]
}
 8005384:	2000      	movs	r0, #0
 8005386:	b002      	add	sp, #8
 8005388:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 800538a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800538e:	428b      	cmp	r3, r1
 8005390:	d3e8      	bcc.n	8005364 <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8005392:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8005394:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8005396:	f821 2b02 	strh.w	r2, [r1], #2
}
 800539a:	b002      	add	sp, #8
 800539c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 80053a0:	f7ff bf2e 	b.w	8005200 <pb_read>
 80053a4:	08017f57 	.word	0x08017f57
 80053a8:	08017f97 	.word	0x08017f97

080053ac <pb_decode_varint>:
{
 80053ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 80053b0:	2500      	movs	r5, #0
{
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
    uint64_t result = 0;
 80053b6:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 80053b8:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 80053ba:	f10d 0107 	add.w	r1, sp, #7
 80053be:	4630      	mov	r0, r6
 80053c0:	f7ff feb0 	bl	8005124 <pb_readbyte>
 80053c4:	b310      	cbz	r0, 800540c <pb_decode_varint+0x60>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80053c6:	f89d c007 	ldrb.w	ip, [sp, #7]
 80053ca:	f1a4 0320 	sub.w	r3, r4, #32
 80053ce:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
 80053d2:	f1c4 0120 	rsb	r1, r4, #32
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	fa22 f101 	lsr.w	r1, r2, r1
 80053de:	430b      	orrs	r3, r1
 80053e0:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 80053e2:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80053e6:	ea45 0502 	orr.w	r5, r5, r2
 80053ea:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 80053ee:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 80053f2:	d102      	bne.n	80053fa <pb_decode_varint+0x4e>
    *dest = result;
 80053f4:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 80053f8:	e008      	b.n	800540c <pb_decode_varint+0x60>
        if (bitpos >= 64)
 80053fa:	2c46      	cmp	r4, #70	; 0x46
 80053fc:	d1dd      	bne.n	80053ba <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 80053fe:	68f3      	ldr	r3, [r6, #12]
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <pb_decode_varint+0x68>)
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf08      	it	eq
 8005406:	4613      	moveq	r3, r2
 8005408:	60f3      	str	r3, [r6, #12]
 800540a:	2000      	movs	r0, #0
}
 800540c:	b002      	add	sp, #8
 800540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005412:	bf00      	nop
 8005414:	08017f47 	.word	0x08017f47

08005418 <pb_dec_uvarint>:
{
 8005418:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800541a:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 800541c:	4669      	mov	r1, sp
{
 800541e:	4604      	mov	r4, r0
 8005420:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8005422:	f7ff ffc3 	bl	80053ac <pb_decode_varint>
 8005426:	b138      	cbz	r0, 8005438 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8005428:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d105      	bne.n	800543c <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 8005430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005434:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005438:	b002      	add	sp, #8
 800543a:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 800543c:	2b04      	cmp	r3, #4
 800543e:	d10b      	bne.n	8005458 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8005440:	9b00      	ldr	r3, [sp, #0]
 8005442:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8005444:	e9dd 5100 	ldrd	r5, r1, [sp]
 8005448:	2200      	movs	r2, #0
 800544a:	4291      	cmp	r1, r2
 800544c:	bf08      	it	eq
 800544e:	429d      	cmpeq	r5, r3
 8005450:	d0f2      	beq.n	8005438 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	4a0b      	ldr	r2, [pc, #44]	; (8005484 <pb_dec_uvarint+0x6c>)
 8005456:	e00e      	b.n	8005476 <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 8005458:	2b02      	cmp	r3, #2
 800545a:	d103      	bne.n	8005464 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800545c:	9b00      	ldr	r3, [sp, #0]
 800545e:	802b      	strh	r3, [r5, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	e7ef      	b.n	8005444 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8005464:	2b01      	cmp	r3, #1
 8005466:	d104      	bne.n	8005472 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	702b      	strb	r3, [r5, #0]
 800546c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005470:	e7e8      	b.n	8005444 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf08      	it	eq
 800547a:	4613      	moveq	r3, r2
 800547c:	60e3      	str	r3, [r4, #12]
 800547e:	2000      	movs	r0, #0
 8005480:	e7da      	b.n	8005438 <pb_dec_uvarint+0x20>
 8005482:	bf00      	nop
 8005484:	08017fcb 	.word	0x08017fcb
 8005488:	08017fb9 	.word	0x08017fb9

0800548c <pb_dec_varint>:
{
 800548c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800548e:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8005490:	4669      	mov	r1, sp
{
 8005492:	4605      	mov	r5, r0
 8005494:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8005496:	f7ff ff89 	bl	80053ac <pb_decode_varint>
 800549a:	b138      	cbz	r0, 80054ac <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800549c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 80054a0:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 80054a2:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 80054a6:	d103      	bne.n	80054b0 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 80054a8:	e9c4 2100 	strd	r2, r1, [r4]
}
 80054ac:	b002      	add	sp, #8
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 80054b0:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 80054b2:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 80054b6:	d101      	bne.n	80054bc <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 80054b8:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 80054ba:	e7f7      	b.n	80054ac <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d109      	bne.n	80054d4 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 80054c0:	b213      	sxth	r3, r2
 80054c2:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80054c4:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 80054c6:	42b1      	cmp	r1, r6
 80054c8:	bf08      	it	eq
 80054ca:	4293      	cmpeq	r3, r2
 80054cc:	d0ee      	beq.n	80054ac <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 80054ce:	68eb      	ldr	r3, [r5, #12]
 80054d0:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <pb_dec_varint+0x64>)
 80054d2:	e006      	b.n	80054e2 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d102      	bne.n	80054de <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80054d8:	b253      	sxtb	r3, r2
 80054da:	7023      	strb	r3, [r4, #0]
 80054dc:	e7f2      	b.n	80054c4 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80054de:	68eb      	ldr	r3, [r5, #12]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf08      	it	eq
 80054e6:	4613      	moveq	r3, r2
 80054e8:	60eb      	str	r3, [r5, #12]
 80054ea:	2000      	movs	r0, #0
 80054ec:	e7de      	b.n	80054ac <pb_dec_varint+0x20>
 80054ee:	bf00      	nop
 80054f0:	08017fcb 	.word	0x08017fcb
 80054f4:	08017fb9 	.word	0x08017fb9

080054f8 <pb_decode_tag>:
{
 80054f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fa:	461d      	mov	r5, r3
    *eof = false;
 80054fc:	2300      	movs	r3, #0
 80054fe:	702b      	strb	r3, [r5, #0]
{
 8005500:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 8005502:	700b      	strb	r3, [r1, #0]
{
 8005504:	4617      	mov	r7, r2
    *tag = 0;
 8005506:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8005508:	a901      	add	r1, sp, #4
 800550a:	462a      	mov	r2, r5
 800550c:	f7ff fe2a 	bl	8005164 <pb_decode_varint32_eof>
 8005510:	b120      	cbz	r0, 800551c <pb_decode_tag+0x24>
    if (temp == 0)
 8005512:	9c01      	ldr	r4, [sp, #4]
 8005514:	b924      	cbnz	r4, 8005520 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8005516:	2301      	movs	r3, #1
 8005518:	702b      	strb	r3, [r5, #0]
        return false;
 800551a:	4620      	mov	r0, r4
}
 800551c:	b003      	add	sp, #12
 800551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8005520:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005522:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8005526:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005528:	7034      	strb	r4, [r6, #0]
    return true;
 800552a:	e7f7      	b.n	800551c <pb_decode_tag+0x24>

0800552c <pb_skip_field>:
{
 800552c:	b513      	push	{r0, r1, r4, lr}
 800552e:	4604      	mov	r4, r0
    switch (wire_type)
 8005530:	2905      	cmp	r1, #5
 8005532:	d821      	bhi.n	8005578 <pb_skip_field+0x4c>
 8005534:	e8df f001 	tbb	[pc, r1]
 8005538:	20170f03 	.word	0x20170f03
 800553c:	1e20      	.short	0x1e20
        if (!pb_read(stream, &byte, 1))
 800553e:	2201      	movs	r2, #1
 8005540:	a901      	add	r1, sp, #4
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fe5c 	bl	8005200 <pb_read>
 8005548:	b118      	cbz	r0, 8005552 <pb_skip_field+0x26>
    } while (byte & 0x80);
 800554a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	dbf5      	blt.n	800553e <pb_skip_field+0x12>
}
 8005552:	b002      	add	sp, #8
 8005554:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8005556:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005558:	2100      	movs	r1, #0
 800555a:	4620      	mov	r0, r4
}
 800555c:	b002      	add	sp, #8
 800555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005562:	f7ff be4d 	b.w	8005200 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8005566:	a901      	add	r1, sp, #4
 8005568:	f7ff fe86 	bl	8005278 <pb_decode_varint32>
 800556c:	2800      	cmp	r0, #0
 800556e:	d0f0      	beq.n	8005552 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8005570:	9a01      	ldr	r2, [sp, #4]
 8005572:	e7f1      	b.n	8005558 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005574:	2204      	movs	r2, #4
 8005576:	e7ef      	b.n	8005558 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005578:	68c3      	ldr	r3, [r0, #12]
 800557a:	4a03      	ldr	r2, [pc, #12]	; (8005588 <pb_skip_field+0x5c>)
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf08      	it	eq
 8005580:	4613      	moveq	r3, r2
 8005582:	60c3      	str	r3, [r0, #12]
 8005584:	2000      	movs	r0, #0
 8005586:	e7e4      	b.n	8005552 <pb_skip_field+0x26>
 8005588:	08017fdd 	.word	0x08017fdd

0800558c <pb_make_string_substream>:
{
 800558c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800558e:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8005590:	a901      	add	r1, sp, #4
{
 8005592:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8005594:	f7ff fe70 	bl	8005278 <pb_decode_varint32>
 8005598:	4606      	mov	r6, r0
 800559a:	b168      	cbz	r0, 80055b8 <pb_make_string_substream+0x2c>
    *substream = *stream;
 800559c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80055a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80055a4:	9901      	ldr	r1, [sp, #4]
 80055a6:	428a      	cmp	r2, r1
 80055a8:	d209      	bcs.n	80055be <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	4a06      	ldr	r2, [pc, #24]	; (80055c8 <pb_make_string_substream+0x3c>)
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bf08      	it	eq
 80055b2:	4613      	moveq	r3, r2
 80055b4:	60e3      	str	r3, [r4, #12]
 80055b6:	2600      	movs	r6, #0
}
 80055b8:	4630      	mov	r0, r6
 80055ba:	b002      	add	sp, #8
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 80055be:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	1a5b      	subs	r3, r3, r1
 80055c4:	60a3      	str	r3, [r4, #8]
    return true;
 80055c6:	e7f7      	b.n	80055b8 <pb_make_string_substream+0x2c>
 80055c8:	08017fef 	.word	0x08017fef

080055cc <pb_close_string_substream>:
    if (substream->bytes_left) {
 80055cc:	688a      	ldr	r2, [r1, #8]
{
 80055ce:	b538      	push	{r3, r4, r5, lr}
 80055d0:	4605      	mov	r5, r0
 80055d2:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 80055d4:	b92a      	cbnz	r2, 80055e2 <pb_close_string_substream+0x16>
    stream->state = substream->state;
 80055d6:	6863      	ldr	r3, [r4, #4]
 80055d8:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	60eb      	str	r3, [r5, #12]
    return true;
 80055de:	2001      	movs	r0, #1
}
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 80055e2:	2100      	movs	r1, #0
 80055e4:	4620      	mov	r0, r4
 80055e6:	f7ff fe0b 	bl	8005200 <pb_read>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1f3      	bne.n	80055d6 <pb_close_string_substream+0xa>
 80055ee:	e7f7      	b.n	80055e0 <pb_close_string_substream+0x14>

080055f0 <decode_field>:
{
 80055f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055f4:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 80055f6:	6851      	ldr	r1, [r2, #4]
{
 80055f8:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 80055fa:	788a      	ldrb	r2, [r1, #2]
 80055fc:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8005600:	2c40      	cmp	r4, #64	; 0x40
{
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8005606:	f000 8083 	beq.w	8005710 <decode_field+0x120>
 800560a:	2c80      	cmp	r4, #128	; 0x80
 800560c:	d07d      	beq.n	800570a <decode_field+0x11a>
 800560e:	b964      	cbnz	r4, 800562a <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8005610:	f002 0c0f 	and.w	ip, r2, #15
 8005614:	4f6f      	ldr	r7, [pc, #444]	; (80057d4 <decode_field+0x1e4>)
 8005616:	f002 0230 	and.w	r2, r2, #48	; 0x30
    switch (PB_HTYPE(type))
 800561a:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 800561c:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8005620:	d02b      	beq.n	800567a <decode_field+0x8a>
 8005622:	d805      	bhi.n	8005630 <decode_field+0x40>
 8005624:	b1da      	cbz	r2, 800565e <decode_field+0x6e>
 8005626:	2a10      	cmp	r2, #16
 8005628:	d01f      	beq.n	800566a <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 800562a:	68eb      	ldr	r3, [r5, #12]
 800562c:	4a6a      	ldr	r2, [pc, #424]	; (80057d8 <decode_field+0x1e8>)
 800562e:	e04c      	b.n	80056ca <decode_field+0xda>
    switch (PB_HTYPE(type))
 8005630:	2a30      	cmp	r2, #48	; 0x30
 8005632:	d1fa      	bne.n	800562a <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8005634:	6973      	ldr	r3, [r6, #20]
 8005636:	880a      	ldrh	r2, [r1, #0]
 8005638:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800563a:	f1bc 0f07 	cmp.w	ip, #7
 800563e:	d10b      	bne.n	8005658 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8005640:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005644:	6930      	ldr	r0, [r6, #16]
 8005646:	4621      	mov	r1, r4
 8005648:	f005 fb6d 	bl	800ad26 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800564c:	6873      	ldr	r3, [r6, #4]
 800564e:	6931      	ldr	r1, [r6, #16]
 8005650:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8005654:	f7ff fd55 	bl	8005102 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8005658:	6932      	ldr	r2, [r6, #16]
 800565a:	6871      	ldr	r1, [r6, #4]
 800565c:	e00b      	b.n	8005676 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 800565e:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 8005660:	463b      	mov	r3, r7
}
 8005662:	b009      	add	sp, #36	; 0x24
 8005664:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8005668:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 800566a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800566e:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8005670:	bf1c      	itt	ne
 8005672:	2001      	movne	r0, #1
 8005674:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8005676:	4628      	mov	r0, r5
 8005678:	e7f2      	b.n	8005660 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 800567a:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 800567c:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8005680:	d134      	bne.n	80056ec <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005682:	f1bc 0f04 	cmp.w	ip, #4
 8005686:	d831      	bhi.n	80056ec <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8005688:	a904      	add	r1, sp, #16
 800568a:	f7ff ff7f 	bl	800558c <pb_make_string_substream>
 800568e:	4604      	mov	r4, r0
 8005690:	b970      	cbnz	r0, 80056b0 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005692:	2400      	movs	r4, #0
 8005694:	e026      	b.n	80056e4 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005696:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 800569a:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 800569c:	fb03 2200 	mla	r2, r3, r0, r2
 80056a0:	a804      	add	r0, sp, #16
 80056a2:	47b8      	blx	r7
 80056a4:	b1b0      	cbz	r0, 80056d4 <decode_field+0xe4>
                    (*size)++;
 80056a6:	f8b8 3000 	ldrh.w	r3, [r8]
 80056aa:	3301      	adds	r3, #1
 80056ac:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 80056b0:	9b06      	ldr	r3, [sp, #24]
 80056b2:	b133      	cbz	r3, 80056c2 <decode_field+0xd2>
 80056b4:	6871      	ldr	r1, [r6, #4]
 80056b6:	f8b8 3000 	ldrh.w	r3, [r8]
 80056ba:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d8e9      	bhi.n	8005696 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 80056c2:	9b06      	ldr	r3, [sp, #24]
 80056c4:	b143      	cbz	r3, 80056d8 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 80056c6:	68eb      	ldr	r3, [r5, #12]
 80056c8:	4a44      	ldr	r2, [pc, #272]	; (80057dc <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf08      	it	eq
 80056ce:	4613      	moveq	r3, r2
 80056d0:	60eb      	str	r3, [r5, #12]
 80056d2:	e7de      	b.n	8005692 <decode_field+0xa2>
                        status = false;
 80056d4:	4604      	mov	r4, r0
 80056d6:	e7f4      	b.n	80056c2 <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 80056d8:	a904      	add	r1, sp, #16
 80056da:	4628      	mov	r0, r5
 80056dc:	f7ff ff76 	bl	80055cc <pb_close_string_substream>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d0d6      	beq.n	8005692 <decode_field+0xa2>
}
 80056e4:	4620      	mov	r0, r4
 80056e6:	b009      	add	sp, #36	; 0x24
 80056e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80056ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80056f0:	6932      	ldr	r2, [r6, #16]
 80056f2:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 80056f6:	1c5c      	adds	r4, r3, #1
 80056f8:	f8a8 4000 	strh.w	r4, [r8]
 80056fc:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8005700:	429c      	cmp	r4, r3
 8005702:	d9e0      	bls.n	80056c6 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 8005704:	fb03 2200 	mla	r2, r3, r0, r2
 8005708:	e7b5      	b.n	8005676 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 800570a:	68c3      	ldr	r3, [r0, #12]
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <decode_field+0x1f0>)
 800570e:	e7dc      	b.n	80056ca <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8005710:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8005712:	b10f      	cbz	r7, 8005718 <decode_field+0x128>
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	b932      	cbnz	r2, 8005726 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8005718:	4619      	mov	r1, r3
 800571a:	4628      	mov	r0, r5
}
 800571c:	b009      	add	sp, #36	; 0x24
 800571e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8005722:	f7ff bf03 	b.w	800552c <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8005726:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8005728:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 800572c:	d11c      	bne.n	8005768 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 800572e:	a904      	add	r1, sp, #16
 8005730:	f7ff ff2c 	bl	800558c <pb_make_string_substream>
 8005734:	4604      	mov	r4, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d0d4      	beq.n	80056e4 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6871      	ldr	r1, [r6, #4]
 800573e:	4642      	mov	r2, r8
 8005740:	a804      	add	r0, sp, #16
 8005742:	4798      	blx	r3
 8005744:	4604      	mov	r4, r0
 8005746:	b930      	cbnz	r0, 8005756 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 8005748:	68eb      	ldr	r3, [r5, #12]
 800574a:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <decode_field+0x1f4>)
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf08      	it	eq
 8005750:	4613      	moveq	r3, r2
 8005752:	60eb      	str	r3, [r5, #12]
 8005754:	e7c6      	b.n	80056e4 <decode_field+0xf4>
        } while (substream.bytes_left);
 8005756:	9b06      	ldr	r3, [sp, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ee      	bne.n	800573a <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 800575c:	a904      	add	r1, sp, #16
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff ff34 	bl	80055cc <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005764:	4604      	mov	r4, r0
 8005766:	e7bd      	b.n	80056e4 <decode_field+0xf4>
    switch (wire_type)
 8005768:	2b01      	cmp	r3, #1
 800576a:	d020      	beq.n	80057ae <decode_field+0x1be>
 800576c:	2b05      	cmp	r3, #5
 800576e:	d026      	beq.n	80057be <decode_field+0x1ce>
 8005770:	bb63      	cbnz	r3, 80057cc <decode_field+0x1dc>
 8005772:	461c      	mov	r4, r3
 8005774:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 8005778:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 800577a:	2c0b      	cmp	r4, #11
 800577c:	d089      	beq.n	8005692 <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 800577e:	2201      	movs	r2, #1
 8005780:	4649      	mov	r1, r9
 8005782:	4628      	mov	r0, r5
 8005784:	f7ff fd3c 	bl	8005200 <pb_read>
 8005788:	2800      	cmp	r0, #0
 800578a:	d082      	beq.n	8005692 <decode_field+0xa2>
            } while (*buf++ & 0x80);
 800578c:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	dbf1      	blt.n	8005778 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <decode_field+0x1f8>)
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	ab01      	add	r3, sp, #4
 800579a:	e9cd 3405 	strd	r3, r4, [sp, #20]
 800579e:	2300      	movs	r3, #0
 80057a0:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80057a2:	6871      	ldr	r1, [r6, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4642      	mov	r2, r8
 80057a8:	a804      	add	r0, sp, #16
 80057aa:	4798      	blx	r3
 80057ac:	e7da      	b.n	8005764 <decode_field+0x174>
            return pb_read(stream, buf, 8);
 80057ae:	2208      	movs	r2, #8
 80057b0:	a901      	add	r1, sp, #4
 80057b2:	f7ff fd25 	bl	8005200 <pb_read>
            *size = 8;
 80057b6:	2408      	movs	r4, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d1eb      	bne.n	8005794 <decode_field+0x1a4>
 80057bc:	e769      	b.n	8005692 <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 80057be:	2204      	movs	r2, #4
 80057c0:	eb0d 0102 	add.w	r1, sp, r2
 80057c4:	f7ff fd1c 	bl	8005200 <pb_read>
            *size = 4;
 80057c8:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 80057ca:	e7f5      	b.n	80057b8 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80057cc:	68c3      	ldr	r3, [r0, #12]
 80057ce:	4a07      	ldr	r2, [pc, #28]	; (80057ec <decode_field+0x1fc>)
 80057d0:	e77b      	b.n	80056ca <decode_field+0xda>
 80057d2:	bf00      	nop
 80057d4:	0801808c 	.word	0x0801808c
 80057d8:	08018016 	.word	0x08018016
 80057dc:	08018007 	.word	0x08018007
 80057e0:	08017f97 	.word	0x08017f97
 80057e4:	08018029 	.word	0x08018029
 80057e8:	0800502d 	.word	0x0800502d
 80057ec:	08017fdd 	.word	0x08017fdd

080057f0 <pb_decode_noinit>:
{
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b091      	sub	sp, #68	; 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 80057f6:	2500      	movs	r5, #0
{
 80057f8:	4604      	mov	r4, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 80057fa:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 80057fc:	e9cd 5502 	strd	r5, r5, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8005800:	f8ad 5002 	strh.w	r5, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005804:	f7ff fba8 	bl	8004f58 <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8005808:	46a8      	mov	r8, r5
    while (stream->bytes_left)
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	b9f3      	cbnz	r3, 800584c <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 800580e:	b135      	cbz	r5, 800581e <pb_decode_noinit+0x2e>
 8005810:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8005814:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005818:	429a      	cmp	r2, r3
 800581a:	f040 8094 	bne.w	8005946 <pb_decode_noinit+0x156>
            last_type = iter.pos->type;
 800581e:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
        } while (pb_field_iter_next(&iter));
 8005822:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8005824:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8005826:	f7ff fba9 	bl	8004f7c <pb_field_iter_next>
 800582a:	2800      	cmp	r0, #0
 800582c:	d1f7      	bne.n	800581e <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800582e:	f016 0f30 	tst.w	r6, #48	; 0x30
 8005832:	d103      	bne.n	800583c <pb_decode_noinit+0x4c>
 8005834:	9b05      	ldr	r3, [sp, #20]
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b103      	cbz	r3, 800583c <pb_decode_noinit+0x4c>
            req_field_count++;
 800583a:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800583c:	2d40      	cmp	r5, #64	; 0x40
 800583e:	f200 80ca 	bhi.w	80059d6 <pb_decode_noinit+0x1e6>
        if (req_field_count > 0)
 8005842:	2d00      	cmp	r5, #0
 8005844:	f040 80c8 	bne.w	80059d8 <pb_decode_noinit+0x1e8>
    return true;
 8005848:	2001      	movs	r0, #1
 800584a:	e00c      	b.n	8005866 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800584c:	f10d 0301 	add.w	r3, sp, #1
 8005850:	aa01      	add	r2, sp, #4
 8005852:	4669      	mov	r1, sp
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fe4f 	bl	80054f8 <pb_decode_tag>
 800585a:	b938      	cbnz	r0, 800586c <pb_decode_noinit+0x7c>
            if (eof)
 800585c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1d4      	bne.n	800580e <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005864:	2000      	movs	r0, #0
}
 8005866:	b011      	add	sp, #68	; 0x44
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 800586c:	9f01      	ldr	r7, [sp, #4]
 800586e:	a804      	add	r0, sp, #16
 8005870:	4639      	mov	r1, r7
 8005872:	f7ff fbc4 	bl	8004ffe <pb_field_iter_find>
 8005876:	2800      	cmp	r0, #0
 8005878:	d152      	bne.n	8005920 <pb_decode_noinit+0x130>
            if (tag >= extension_range_start)
 800587a:	4547      	cmp	r7, r8
 800587c:	f0c0 80b3 	bcc.w	80059e6 <pb_decode_noinit+0x1f6>
    const pb_field_t *start = iter->pos;
 8005880:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005882:	9a05      	ldr	r2, [sp, #20]
 8005884:	7893      	ldrb	r3, [r2, #2]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	2b08      	cmp	r3, #8
 800588c:	f000 80b4 	beq.w	80059f8 <pb_decode_noinit+0x208>
        (void)pb_field_iter_next(iter);
 8005890:	a804      	add	r0, sp, #16
 8005892:	f7ff fb73 	bl	8004f7c <pb_field_iter_next>
    } while (iter->pos != start);
 8005896:	9b05      	ldr	r3, [sp, #20]
 8005898:	429e      	cmp	r6, r3
 800589a:	d1f2      	bne.n	8005882 <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 800589c:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 80058a0:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 80058a2:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 80058a6:	f0c0 809e 	bcc.w	80059e6 <pb_decode_noinit+0x1f6>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 80058aa:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 80058ac:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 80058b0:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80058b2:	68a2      	ldr	r2, [r4, #8]
 80058b4:	2e00      	cmp	r6, #0
 80058b6:	f000 8093 	beq.w	80059e0 <pb_decode_noinit+0x1f0>
 80058ba:	4591      	cmp	r9, r2
 80058bc:	d1a5      	bne.n	800580a <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 80058be:	6832      	ldr	r2, [r6, #0]
 80058c0:	f8d2 a000 	ldr.w	sl, [r2]
 80058c4:	f1ba 0f00 	cmp.w	sl, #0
 80058c8:	d008      	beq.n	80058dc <pb_decode_noinit+0xec>
            status = extension->type->decode(stream, extension, tag, wire_type);
 80058ca:	465b      	mov	r3, fp
 80058cc:	463a      	mov	r2, r7
 80058ce:	4631      	mov	r1, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	47d0      	blx	sl
        if (!status)
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0c5      	beq.n	8005864 <pb_decode_noinit+0x74>
        extension = extension->next;
 80058d8:	68b6      	ldr	r6, [r6, #8]
 80058da:	e7ea      	b.n	80058b2 <pb_decode_noinit+0xc2>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80058dc:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 80058e0:	f8ba 2000 	ldrh.w	r2, [sl]
 80058e4:	4297      	cmp	r7, r2
 80058e6:	d1f7      	bne.n	80058d8 <pb_decode_noinit+0xe8>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80058e8:	6872      	ldr	r2, [r6, #4]
 80058ea:	4651      	mov	r1, sl
 80058ec:	a80a      	add	r0, sp, #40	; 0x28
 80058ee:	f7ff fb33 	bl	8004f58 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80058f2:	6872      	ldr	r2, [r6, #4]
 80058f4:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 80058f6:	f106 020c 	add.w	r2, r6, #12
 80058fa:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80058fc:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005900:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005904:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8005906:	bf08      	it	eq
 8005908:	1d32      	addeq	r2, r6, #4
    extension->found = true;
 800590a:	f04f 0301 	mov.w	r3, #1
        iter->pData = &extension->dest;
 800590e:	bf08      	it	eq
 8005910:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005912:	4659      	mov	r1, fp
    extension->found = true;
 8005914:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005916:	aa0a      	add	r2, sp, #40	; 0x28
 8005918:	4620      	mov	r0, r4
 800591a:	f7ff fe69 	bl	80055f0 <decode_field>
 800591e:	e7d9      	b.n	80058d4 <pb_decode_noinit+0xe4>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8005920:	9a05      	ldr	r2, [sp, #20]
 8005922:	7893      	ldrb	r3, [r2, #2]
 8005924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005928:	2b20      	cmp	r3, #32
 800592a:	d121      	bne.n	8005970 <pb_decode_noinit+0x180>
            && iter.pSize == iter.pData)
 800592c:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8005930:	4299      	cmp	r1, r3
 8005932:	d116      	bne.n	8005962 <pb_decode_noinit+0x172>
            if (fixed_count_field != iter.pos) {
 8005934:	42aa      	cmp	r2, r5
 8005936:	d010      	beq.n	800595a <pb_decode_noinit+0x16a>
                if (fixed_count_field != NULL &&
 8005938:	b165      	cbz	r5, 8005954 <pb_decode_noinit+0x164>
 800593a:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 800593e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005942:	4299      	cmp	r1, r3
 8005944:	d006      	beq.n	8005954 <pb_decode_noinit+0x164>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005946:	68e3      	ldr	r3, [r4, #12]
 8005948:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <pb_decode_noinit+0x210>)
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf08      	it	eq
 800594e:	4613      	moveq	r3, r2
 8005950:	60e3      	str	r3, [r4, #12]
 8005952:	e787      	b.n	8005864 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 800595a:	f10d 0302 	add.w	r3, sp, #2
 800595e:	9309      	str	r3, [sp, #36]	; 0x24
 8005960:	4615      	mov	r5, r2
        if (!decode_field(stream, wire_type, &iter))
 8005962:	f89d 1000 	ldrb.w	r1, [sp]
 8005966:	aa04      	add	r2, sp, #16
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff fe41 	bl	80055f0 <decode_field>
 800596e:	e03f      	b.n	80059f0 <pb_decode_noinit+0x200>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f6      	bne.n	8005962 <pb_decode_noinit+0x172>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8005974:	9a06      	ldr	r2, [sp, #24]
 8005976:	2a3f      	cmp	r2, #63	; 0x3f
 8005978:	d8f3      	bhi.n	8005962 <pb_decode_noinit+0x172>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800597a:	0951      	lsrs	r1, r2, #5
 800597c:	ab10      	add	r3, sp, #64	; 0x40
 800597e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005982:	f002 021f 	and.w	r2, r2, #31
 8005986:	2301      	movs	r3, #1
 8005988:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800598a:	f851 2c38 	ldr.w	r2, [r1, #-56]
 800598e:	4313      	orrs	r3, r2
 8005990:	f841 3c38 	str.w	r3, [r1, #-56]
 8005994:	e7e5      	b.n	8005962 <pb_decode_noinit+0x172>
                if (fields_seen[i] != allbits)
 8005996:	f851 6b04 	ldr.w	r6, [r1], #4
 800599a:	3601      	adds	r6, #1
 800599c:	d006      	beq.n	80059ac <pb_decode_noinit+0x1bc>
                    PB_RETURN_ERROR(stream, "missing required field");
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <pb_decode_noinit+0x214>)
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf08      	it	eq
 80059a6:	4613      	moveq	r3, r2
 80059a8:	60e3      	str	r3, [r4, #12]
 80059aa:	e75c      	b.n	8005866 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 80059ac:	3201      	adds	r2, #1
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d1f1      	bne.n	8005996 <pb_decode_noinit+0x1a6>
            if ((req_field_count & 31) != 0)
 80059b2:	f015 051f 	ands.w	r5, r5, #31
 80059b6:	f43f af47 	beq.w	8005848 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 80059ba:	aa10      	add	r2, sp, #64	; 0x40
 80059bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 80059c0:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 80059c4:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	40ea      	lsrs	r2, r5
                if (fields_seen[req_field_count >> 5] !=
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f43f af3a 	beq.w	8005848 <pb_decode_noinit+0x58>
 80059d4:	e7e3      	b.n	800599e <pb_decode_noinit+0x1ae>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 80059d6:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 80059d8:	096b      	lsrs	r3, r5, #5
 80059da:	a902      	add	r1, sp, #8
 80059dc:	2200      	movs	r2, #0
 80059de:	e7e6      	b.n	80059ae <pb_decode_noinit+0x1be>
                    if (pos != stream->bytes_left)
 80059e0:	4591      	cmp	r9, r2
 80059e2:	f47f af12 	bne.w	800580a <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 80059e6:	f89d 1000 	ldrb.w	r1, [sp]
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff fd9e 	bl	800552c <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f47f af0a 	bne.w	800580a <pb_decode_noinit+0x1a>
 80059f6:	e735      	b.n	8005864 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 80059f8:	f8b2 8000 	ldrh.w	r8, [r2]
 80059fc:	e750      	b.n	80058a0 <pb_decode_noinit+0xb0>
 80059fe:	bf00      	nop
 8005a00:	08018039 	.word	0x08018039
 8005a04:	0801805a 	.word	0x0801805a

08005a08 <pb_decode>:
{
 8005a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4620      	mov	r0, r4
 8005a12:	9201      	str	r2, [sp, #4]
 8005a14:	f7ff fb75 	bl	8005102 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4628      	mov	r0, r5
}
 8005a1e:	b003      	add	sp, #12
 8005a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005a24:	f7ff bee4 	b.w	80057f0 <pb_decode_noinit>

08005a28 <pb_dec_submessage>:
{
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	460e      	mov	r6, r1
 8005a2e:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005a30:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8005a34:	a902      	add	r1, sp, #8
{
 8005a36:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8005a38:	f7ff fda8 	bl	800558c <pb_make_string_substream>
 8005a3c:	b1e0      	cbz	r0, 8005a78 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 8005a3e:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8005a42:	9a01      	ldr	r2, [sp, #4]
 8005a44:	b944      	cbnz	r4, 8005a58 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005a46:	68eb      	ldr	r3, [r5, #12]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <pb_dec_submessage+0x5c>)
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf08      	it	eq
 8005a4e:	4613      	moveq	r3, r2
 8005a50:	60eb      	str	r3, [r5, #12]
}
 8005a52:	4620      	mov	r0, r4
 8005a54:	b007      	add	sp, #28
 8005a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005a58:	78b3      	ldrb	r3, [r6, #2]
 8005a5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a5e:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 8005a60:	4639      	mov	r1, r7
 8005a62:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005a64:	d10a      	bne.n	8005a7c <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 8005a66:	f7ff ffcf 	bl	8005a08 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005a6a:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005a6c:	a902      	add	r1, sp, #8
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7ff fdac 	bl	80055cc <pb_close_string_substream>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d1ec      	bne.n	8005a52 <pb_dec_submessage+0x2a>
        return false;
 8005a78:	2400      	movs	r4, #0
 8005a7a:	e7ea      	b.n	8005a52 <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005a7c:	f7ff feb8 	bl	80057f0 <pb_decode_noinit>
 8005a80:	e7f3      	b.n	8005a6a <pb_dec_submessage+0x42>
 8005a82:	bf00      	nop
 8005a84:	08018071 	.word	0x08018071

08005a88 <pb_decode_delimited>:
{
 8005a88:	b530      	push	{r4, r5, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8005a8e:	a902      	add	r1, sp, #8
{
 8005a90:	4605      	mov	r5, r0
 8005a92:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005a94:	f7ff fd7a 	bl	800558c <pb_make_string_substream>
 8005a98:	b150      	cbz	r0, 8005ab0 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	a802      	add	r0, sp, #8
 8005aa0:	f7ff ffb2 	bl	8005a08 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005aa4:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8005aa6:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff fd8f 	bl	80055cc <pb_close_string_substream>
 8005aae:	b900      	cbnz	r0, 8005ab2 <pb_decode_delimited+0x2a>
        return false;
 8005ab0:	2400      	movs	r4, #0
}
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	b007      	add	sp, #28
 8005ab6:	bd30      	pop	{r4, r5, pc}

08005ab8 <pb_decode_svarint>:
{
 8005ab8:	b513      	push	{r0, r1, r4, lr}
 8005aba:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005abc:	4669      	mov	r1, sp
 8005abe:	f7ff fc75 	bl	80053ac <pb_decode_varint>
 8005ac2:	b160      	cbz	r0, 8005ade <pb_decode_svarint+0x26>
    if (value & 1)
 8005ac4:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005ac8:	084a      	lsrs	r2, r1, #1
 8005aca:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8005ace:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005ad0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005ad4:	bf44      	itt	mi
 8005ad6:	43d2      	mvnmi	r2, r2
 8005ad8:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005ada:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd10      	pop	{r4, pc}
	...

08005ae4 <pb_dec_svarint>:
{
 8005ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ae6:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8005ae8:	4669      	mov	r1, sp
{
 8005aea:	4604      	mov	r4, r0
 8005aec:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 8005aee:	f7ff ffe3 	bl	8005ab8 <pb_decode_svarint>
 8005af2:	b138      	cbz	r0, 8005b04 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005af4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d105      	bne.n	8005b08 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8005afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b00:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005b04:	b002      	add	sp, #8
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d10b      	bne.n	8005b24 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8005b0c:	9b00      	ldr	r3, [sp, #0]
 8005b0e:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8005b10:	e9dd 5100 	ldrd	r5, r1, [sp]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005b14:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8005b16:	4291      	cmp	r1, r2
 8005b18:	bf08      	it	eq
 8005b1a:	429d      	cmpeq	r5, r3
 8005b1c:	d0f2      	beq.n	8005b04 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <pb_dec_svarint+0x68>)
 8005b22:	e00d      	b.n	8005b40 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d103      	bne.n	8005b30 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8005b28:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005b2c:	802b      	strh	r3, [r5, #0]
 8005b2e:	e7ef      	b.n	8005b10 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d103      	bne.n	8005b3c <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005b34:	f99d 3000 	ldrsb.w	r3, [sp]
 8005b38:	702b      	strb	r3, [r5, #0]
 8005b3a:	e7e9      	b.n	8005b10 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf08      	it	eq
 8005b44:	4613      	moveq	r3, r2
 8005b46:	60e3      	str	r3, [r4, #12]
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7db      	b.n	8005b04 <pb_dec_svarint+0x20>
 8005b4c:	08017fcb 	.word	0x08017fcb
 8005b50:	08017fb9 	.word	0x08017fb9

08005b54 <pb_decode_fixed32>:
{
 8005b54:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8005b56:	2204      	movs	r2, #4
{
 8005b58:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8005b5a:	eb0d 0102 	add.w	r1, sp, r2
 8005b5e:	f7ff fb4f 	bl	8005200 <pb_read>
 8005b62:	b108      	cbz	r0, 8005b68 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	6023      	str	r3, [r4, #0]
}
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd10      	pop	{r4, pc}

08005b6c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	f7ff bff1 	b.w	8005b54 <pb_decode_fixed32>

08005b72 <pb_decode_fixed64>:
{
 8005b72:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8005b74:	2208      	movs	r2, #8
{
 8005b76:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8005b78:	4669      	mov	r1, sp
 8005b7a:	f7ff fb41 	bl	8005200 <pb_read>
 8005b7e:	b118      	cbz	r0, 8005b88 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8005b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b84:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	f7ff bff0 	b.w	8005b72 <pb_decode_fixed64>

08005b92 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8005b92:	b510      	push	{r4, lr}
 8005b94:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8005b96:	7881      	ldrb	r1, [r0, #2]
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005b98:	f011 0330 	ands.w	r3, r1, #48	; 0x30
{
 8005b9c:	b086      	sub	sp, #24
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005b9e:	d042      	beq.n	8005c26 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005ba0:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005ba2:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005ba6:	d104      	bne.n	8005bb2 <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005ba8:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8005baa:	fab0 f080 	clz	r0, r0
 8005bae:	0940      	lsrs	r0, r0, #5
 8005bb0:	e007      	b.n	8005bc2 <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005bb2:	2b30      	cmp	r3, #48	; 0x30
 8005bb4:	d0f8      	beq.n	8005ba8 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d105      	bne.n	8005bc6 <pb_check_proto3_default_value+0x34>
 8005bba:	b124      	cbz	r4, 8005bc6 <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 8005bbc:	5d10      	ldrb	r0, [r2, r4]
 8005bbe:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005bc2:	b006      	add	sp, #24
 8005bc4:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005bc6:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8005bca:	d006      	beq.n	8005bda <pb_check_proto3_default_value+0x48>
 8005bcc:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8005bd0:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d123      	bne.n	8005c1e <pb_check_proto3_default_value+0x8c>
	    return true;
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	e7f3      	b.n	8005bc2 <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005bda:	f001 030f 	and.w	r3, r1, #15
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d101      	bne.n	8005be6 <pb_check_proto3_default_value+0x54>
            return bytes->size == 0;
 8005be2:	8810      	ldrh	r0, [r2, #0]
 8005be4:	e7e1      	b.n	8005baa <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d101      	bne.n	8005bee <pb_check_proto3_default_value+0x5c>
            return *(const char*)pData == '\0';
 8005bea:	7810      	ldrb	r0, [r2, #0]
 8005bec:	e7dd      	b.n	8005baa <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d102      	bne.n	8005bf8 <pb_check_proto3_default_value+0x66>
            return field->data_size == 0;
 8005bf2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8005bf6:	e7d8      	b.n	8005baa <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d1e7      	bne.n	8005bcc <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8005bfc:	f8d0 100b 	ldr.w	r1, [r0, #11]
 8005c00:	4668      	mov	r0, sp
 8005c02:	f7ff f9a9 	bl	8004f58 <pb_field_iter_begin>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0e5      	beq.n	8005bd6 <pb_check_proto3_default_value+0x44>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8005c0a:	9904      	ldr	r1, [sp, #16]
 8005c0c:	9801      	ldr	r0, [sp, #4]
 8005c0e:	f7ff ffc0 	bl	8005b92 <pb_check_proto3_default_value>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d0d5      	beq.n	8005bc2 <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 8005c16:	4668      	mov	r0, sp
 8005c18:	f7ff f9b0 	bl	8004f7c <pb_field_iter_next>
 8005c1c:	e7f3      	b.n	8005c06 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 8005c1e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d0d5      	beq.n	8005bd2 <pb_check_proto3_default_value+0x40>
        return false;
 8005c26:	2000      	movs	r0, #0
 8005c28:	e7cb      	b.n	8005bc2 <pb_check_proto3_default_value+0x30>
	...

08005c2c <pb_write>:
{
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8005c2e:	6806      	ldr	r6, [r0, #0]
        if (stream->bytes_written + count > stream->max_size)
 8005c30:	68c3      	ldr	r3, [r0, #12]
{
 8005c32:	4604      	mov	r4, r0
 8005c34:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8005c36:	b1a6      	cbz	r6, 8005c62 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8005c38:	6887      	ldr	r7, [r0, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	429f      	cmp	r7, r3
 8005c3e:	d207      	bcs.n	8005c50 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 8005c40:	6903      	ldr	r3, [r0, #16]
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <pb_write+0x40>)
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf08      	it	eq
 8005c48:	4613      	moveq	r3, r2
 8005c4a:	6103      	str	r3, [r0, #16]
 8005c4c:	2000      	movs	r0, #0
}
 8005c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8005c50:	47b0      	blx	r6
 8005c52:	b930      	cbnz	r0, 8005c62 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <pb_write+0x44>)
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf08      	it	eq
 8005c5c:	4613      	moveq	r3, r2
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	e7f5      	b.n	8005c4e <pb_write+0x22>
    stream->bytes_written += count;
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	442b      	add	r3, r5
 8005c66:	60e3      	str	r3, [r4, #12]
    return true;
 8005c68:	2001      	movs	r0, #1
 8005c6a:	e7f0      	b.n	8005c4e <pb_write+0x22>
 8005c6c:	080180b4 	.word	0x080180b4
 8005c70:	08017f3e 	.word	0x08017f3e

08005c74 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8005c76:	2a80      	cmp	r2, #128	; 0x80
 8005c78:	f173 0100 	sbcs.w	r1, r3, #0
{
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	4605      	mov	r5, r0
    if (value <= 0x7F)
 8005c80:	d207      	bcs.n	8005c92 <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 8005c82:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8005c86:	a901      	add	r1, sp, #4
 8005c88:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005c8a:	f7ff ffcf 	bl	8005c2c <pb_write>
}
 8005c8e:	b005      	add	sp, #20
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8005c94:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005c96:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005c9a:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8005c9e:	09d1      	lsrs	r1, r2, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005ca0:	b2d0      	uxtb	r0, r2
        value >>= 7;
 8005ca2:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005ca6:	09db      	lsrs	r3, r3, #7
    while (value)
 8005ca8:	ea52 0703 	orrs.w	r7, r2, r3
 8005cac:	4621      	mov	r1, r4
        i++;
 8005cae:	f104 0401 	add.w	r4, r4, #1
    while (value)
 8005cb2:	d1f0      	bne.n	8005c96 <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005cb4:	f101 0310 	add.w	r3, r1, #16
 8005cb8:	446b      	add	r3, sp
 8005cba:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8005cbe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005cc2:	a901      	add	r1, sp, #4
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	e7df      	b.n	8005c8a <pb_encode_varint+0x16>
	...

08005ccc <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005ccc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d104      	bne.n	8005cde <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 8005cd4:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 8005cd6:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005cd8:	460a      	mov	r2, r1
 8005cda:	f7ff bfcb 	b.w	8005c74 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d101      	bne.n	8005ce6 <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 8005ce2:	8811      	ldrh	r1, [r2, #0]
 8005ce4:	e7f7      	b.n	8005cd6 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d101      	bne.n	8005cee <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8005cea:	6811      	ldr	r1, [r2, #0]
 8005cec:	e7f3      	b.n	8005cd6 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d102      	bne.n	8005cf8 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 8005cf2:	e9d2 1300 	ldrd	r1, r3, [r2]
 8005cf6:	e7ef      	b.n	8005cd8 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005cf8:	6903      	ldr	r3, [r0, #16]
 8005cfa:	4a03      	ldr	r2, [pc, #12]	; (8005d08 <pb_enc_uvarint+0x3c>)
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf08      	it	eq
 8005d00:	4613      	moveq	r3, r2
 8005d02:	6103      	str	r3, [r0, #16]
}
 8005d04:	2000      	movs	r0, #0
 8005d06:	4770      	bx	lr
 8005d08:	08017fb9 	.word	0x08017fb9

08005d0c <pb_enc_varint>:
{
 8005d0c:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005d0e:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005d12:	2a01      	cmp	r2, #1
 8005d14:	d104      	bne.n	8005d20 <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 8005d16:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 8005d1a:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8005d1c:	f7ff bfaa 	b.w	8005c74 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8005d20:	2a02      	cmp	r2, #2
 8005d22:	d102      	bne.n	8005d2a <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 8005d24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005d28:	e7f7      	b.n	8005d1a <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8005d2a:	2a04      	cmp	r2, #4
 8005d2c:	d101      	bne.n	8005d32 <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	e7f3      	b.n	8005d1a <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8005d32:	2a08      	cmp	r2, #8
 8005d34:	d102      	bne.n	8005d3c <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	e7ef      	b.n	8005d1c <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d3c:	6903      	ldr	r3, [r0, #16]
 8005d3e:	4a03      	ldr	r2, [pc, #12]	; (8005d4c <pb_enc_varint+0x40>)
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf08      	it	eq
 8005d44:	4613      	moveq	r3, r2
 8005d46:	6103      	str	r3, [r0, #16]
}
 8005d48:	2000      	movs	r0, #0
 8005d4a:	4770      	bx	lr
 8005d4c:	08017fb9 	.word	0x08017fb9

08005d50 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8005d50:	1892      	adds	r2, r2, r2
 8005d52:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 8005d56:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 8005d5a:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 8005d5e:	f7ff bf89 	b.w	8005c74 <pb_encode_varint>
	...

08005d64 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005d64:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 8005d66:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005d6a:	2a01      	cmp	r2, #1
 8005d6c:	d104      	bne.n	8005d78 <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 8005d6e:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 8005d72:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8005d74:	f7ff bfec 	b.w	8005d50 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8005d78:	2a02      	cmp	r2, #2
 8005d7a:	d102      	bne.n	8005d82 <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 8005d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005d80:	e7f7      	b.n	8005d72 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8005d82:	2a04      	cmp	r2, #4
 8005d84:	d101      	bne.n	8005d8a <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	e7f3      	b.n	8005d72 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8005d8a:	2a08      	cmp	r2, #8
 8005d8c:	d102      	bne.n	8005d94 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	e7ef      	b.n	8005d74 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d94:	6903      	ldr	r3, [r0, #16]
 8005d96:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <pb_enc_svarint+0x40>)
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf08      	it	eq
 8005d9c:	4613      	moveq	r3, r2
 8005d9e:	6103      	str	r3, [r0, #16]
}
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr
 8005da4:	08017fb9 	.word	0x08017fb9

08005da8 <pb_encode_fixed32>:
{
 8005da8:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8005daa:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 8005db0:	eb0d 0102 	add.w	r1, sp, r2
 8005db4:	f7ff ff3a 	bl	8005c2c <pb_write>
}
 8005db8:	b003      	add	sp, #12
 8005dba:	f85d fb04 	ldr.w	pc, [sp], #4

08005dbe <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	f7ff bff2 	b.w	8005da8 <pb_encode_fixed32>

08005dc4 <pb_encode_fixed64>:
{
 8005dc4:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005dc6:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005dca:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005dcc:	0a1a      	lsrs	r2, r3, #8
 8005dce:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005dd2:	0c1a      	lsrs	r2, r3, #16
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005dd4:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005dd8:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005ddc:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 8005dde:	2208      	movs	r2, #8
 8005de0:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005de2:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005de6:	f7ff ff21 	bl	8005c2c <pb_write>
}
 8005dea:	b003      	add	sp, #12
 8005dec:	f85d fb04 	ldr.w	pc, [sp], #4

08005df0 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8005df0:	4611      	mov	r1, r2
 8005df2:	f7ff bfe7 	b.w	8005dc4 <pb_encode_fixed64>

08005df6 <pb_encode_tag>:
{
 8005df6:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005df8:	0f5b      	lsrs	r3, r3, #29
 8005dfa:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8005dfe:	f7ff bf39 	b.w	8005c74 <pb_encode_varint>
	...

08005e04 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005e04:	788b      	ldrb	r3, [r1, #2]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	2b09      	cmp	r3, #9
 8005e0c:	d811      	bhi.n	8005e32 <pb_encode_tag_for_field+0x2e>
 8005e0e:	e8df f003 	tbb	[pc, r3]
 8005e12:	0c0c      	.short	0x0c0c
 8005e14:	0a0e050c 	.word	0x0a0e050c
 8005e18:	0a100a0a 	.word	0x0a100a0a
 8005e1c:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8005e1e:	880a      	ldrh	r2, [r1, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f7ff bfe8 	b.w	8005df6 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 8005e26:	2302      	movs	r3, #2
            break;
 8005e28:	e7f9      	b.n	8005e1e <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e7f7      	b.n	8005e1e <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_64BIT;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e7f5      	b.n	8005e1e <pb_encode_tag_for_field+0x1a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005e32:	6903      	ldr	r3, [r0, #16]
 8005e34:	4a03      	ldr	r2, [pc, #12]	; (8005e44 <pb_encode_tag_for_field+0x40>)
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf08      	it	eq
 8005e3a:	4613      	moveq	r3, r2
 8005e3c:	6103      	str	r3, [r0, #16]
}
 8005e3e:	2000      	movs	r0, #0
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	08018016 	.word	0x08018016

08005e48 <encode_field>:
{
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 8005e4e:	788a      	ldrb	r2, [r1, #2]
 8005e50:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 8005e54:	2b40      	cmp	r3, #64	; 0x40
{
 8005e56:	b086      	sub	sp, #24
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8005e5c:	f000 80dd 	beq.w	800601a <encode_field+0x1d2>
 8005e60:	0653      	lsls	r3, r2, #25
 8005e62:	d41b      	bmi.n	8005e9c <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8005e64:	4b75      	ldr	r3, [pc, #468]	; (800603c <encode_field+0x1f4>)
 8005e66:	f002 010f 	and.w	r1, r2, #15
 8005e6a:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 8005e6e:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 8005e72:	b1b3      	cbz	r3, 8005ea2 <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 8005e74:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005e76:	78a2      	ldrb	r2, [r4, #2]
 8005e78:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8005e7c:	2880      	cmp	r0, #128	; 0x80
 8005e7e:	d105      	bne.n	8005e8c <encode_field+0x44>
        pData = *(const void* const*)pData;
 8005e80:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 8005e82:	1e31      	subs	r1, r6, #0
 8005e84:	bf18      	it	ne
 8005e86:	2101      	movne	r1, #1
 8005e88:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8005e8c:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8005e90:	2920      	cmp	r1, #32
 8005e92:	d03e      	beq.n	8005f12 <encode_field+0xca>
 8005e94:	d818      	bhi.n	8005ec8 <encode_field+0x80>
 8005e96:	b361      	cbz	r1, 8005ef2 <encode_field+0xaa>
 8005e98:	2910      	cmp	r1, #16
 8005e9a:	d033      	beq.n	8005f04 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005e9c:	692b      	ldr	r3, [r5, #16]
 8005e9e:	4a68      	ldr	r2, [pc, #416]	; (8006040 <encode_field+0x1f8>)
 8005ea0:	e02b      	b.n	8005efa <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005ea2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005ea6:	2a10      	cmp	r2, #16
 8005ea8:	d10a      	bne.n	8005ec0 <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7ff fe70 	bl	8005b92 <pb_check_proto3_default_value>
 8005eb2:	f080 0001 	eor.w	r0, r0, #1
 8005eb6:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 8005eba:	f10d 0303 	add.w	r3, sp, #3
 8005ebe:	e7da      	b.n	8005e76 <encode_field+0x2e>
        implicit_has = true;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f88d 3003 	strb.w	r3, [sp, #3]
 8005ec6:	e7f8      	b.n	8005eba <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 8005ec8:	2930      	cmp	r1, #48	; 0x30
 8005eca:	d1e7      	bne.n	8005e9c <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	8823      	ldrh	r3, [r4, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d11a      	bne.n	8005f0a <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7ff ff94 	bl	8005e04 <pb_encode_tag_for_field>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f000 8090 	beq.w	8006002 <encode_field+0x1ba>
                if (!func(stream, field, pData))
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	463b      	mov	r3, r7
}
 8005eea:	b006      	add	sp, #24
 8005eec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 8005ef0:	4718      	bx	r3
            if (!pData)
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d1ee      	bne.n	8005ed4 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 8005ef6:	692b      	ldr	r3, [r5, #16]
 8005ef8:	4a52      	ldr	r2, [pc, #328]	; (8006044 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf08      	it	eq
 8005efe:	4613      	moveq	r3, r2
 8005f00:	612b      	str	r3, [r5, #16]
 8005f02:	e07e      	b.n	8006002 <encode_field+0x1ba>
            if (*(const bool*)pSize)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e4      	bne.n	8005ed4 <encode_field+0x8c>
    return true;
 8005f0a:	2001      	movs	r0, #1
}
 8005f0c:	b006      	add	sp, #24
 8005f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 8005f12:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 8005f16:	b169      	cbz	r1, 8005f34 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 8005f18:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8005f1c:	f1b8 0f00 	cmp.w	r8, #0
 8005f20:	d0f3      	beq.n	8005f0a <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005f22:	2880      	cmp	r0, #128	; 0x80
 8005f24:	d009      	beq.n	8005f3a <encode_field+0xf2>
 8005f26:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8005f2a:	4598      	cmp	r8, r3
 8005f2c:	d905      	bls.n	8005f3a <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8005f2e:	692b      	ldr	r3, [r5, #16]
 8005f30:	4a45      	ldr	r2, [pc, #276]	; (8006048 <encode_field+0x200>)
 8005f32:	e7e2      	b.n	8005efa <encode_field+0xb2>
                count = field->array_size;
 8005f34:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 8005f38:	e7f0      	b.n	8005f1c <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005f3a:	f002 020f 	and.w	r2, r2, #15
 8005f3e:	2a04      	cmp	r2, #4
 8005f40:	d849      	bhi.n	8005fd6 <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005f42:	8822      	ldrh	r2, [r4, #0]
 8005f44:	2102      	movs	r1, #2
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7ff ff55 	bl	8005df6 <pb_encode_tag>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d058      	beq.n	8006002 <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8005f50:	78a3      	ldrb	r3, [r4, #2]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d111      	bne.n	8005f7e <encode_field+0x136>
            size = 4 * count;
 8005f5a:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005f5e:	464a      	mov	r2, r9
 8005f60:	2300      	movs	r3, #0
 8005f62:	4628      	mov	r0, r5
 8005f64:	f7ff fe86 	bl	8005c74 <pb_encode_varint>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d04a      	beq.n	8006002 <encode_field+0x1ba>
        if (stream->callback == NULL)
 8005f6c:	6829      	ldr	r1, [r5, #0]
 8005f6e:	bb19      	cbnz	r1, 8005fb8 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005f70:	464a      	mov	r2, r9
 8005f72:	4628      	mov	r0, r5
}
 8005f74:	b006      	add	sp, #24
 8005f76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005f7a:	f7ff be57 	b.w	8005c2c <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d102      	bne.n	8005f88 <encode_field+0x140>
            size = 8 * count;
 8005f82:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005f86:	e7ea      	b.n	8005f5e <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005f88:	2214      	movs	r2, #20
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	a801      	add	r0, sp, #4
 8005f8e:	f004 feca 	bl	800ad26 <memset>
 8005f92:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 8005f94:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	a801      	add	r0, sp, #4
 8005f9e:	47b8      	blx	r7
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d0b3      	beq.n	8005f0c <encode_field+0xc4>
                p = (const char*)p + field->data_size;
 8005fa4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8005fa8:	f109 0901 	add.w	r9, r9, #1
 8005fac:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 8005fae:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8005fb0:	d8f2      	bhi.n	8005f98 <encode_field+0x150>
            size = sizestream.bytes_written;
 8005fb2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005fb6:	e7d2      	b.n	8005f5e <encode_field+0x116>
        for (i = 0; i < count; i++)
 8005fb8:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	b1e8      	cbz	r0, 8006002 <encode_field+0x1ba>
            p = (const char*)p + field->data_size;
 8005fc6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005fca:	f109 0901 	add.w	r9, r9, #1
 8005fce:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8005fd0:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8005fd2:	d8f3      	bhi.n	8005fbc <encode_field+0x174>
 8005fd4:	e799      	b.n	8005f0a <encode_field+0xc2>
        for (i = 0; i < count; i++)
 8005fd6:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f7ff ff11 	bl	8005e04 <pb_encode_tag_for_field>
 8005fe2:	b170      	cbz	r0, 8006002 <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005fe4:	78a3      	ldrb	r3, [r4, #2]
 8005fe6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005fea:	2a80      	cmp	r2, #128	; 0x80
 8005fec:	d113      	bne.n	8006016 <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d80e      	bhi.n	8006016 <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 8005ff8:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	b908      	cbnz	r0, 8006006 <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 8006002:	2000      	movs	r0, #0
 8006004:	e782      	b.n	8005f0c <encode_field+0xc4>
            p = (const char*)p + field->data_size;
 8006006:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 800600a:	f109 0901 	add.w	r9, r9, #1
 800600e:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8006010:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8006012:	d8e2      	bhi.n	8005fda <encode_field+0x192>
 8006014:	e779      	b.n	8005f0a <encode_field+0xc2>
                if (!func(stream, field, p))
 8006016:	4632      	mov	r2, r6
 8006018:	e7ef      	b.n	8005ffa <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 800601a:	6833      	ldr	r3, [r6, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f43f af74 	beq.w	8005f0a <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 8006022:	1d32      	adds	r2, r6, #4
 8006024:	4798      	blx	r3
 8006026:	2800      	cmp	r0, #0
 8006028:	f47f af6f 	bne.w	8005f0a <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 800602c:	692b      	ldr	r3, [r5, #16]
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <encode_field+0x204>)
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf08      	it	eq
 8006034:	4613      	moveq	r3, r2
 8006036:	612b      	str	r3, [r5, #16]
 8006038:	e768      	b.n	8005f0c <encode_field+0xc4>
 800603a:	bf00      	nop
 800603c:	08018110 	.word	0x08018110
 8006040:	08018016 	.word	0x08018016
 8006044:	0801805a 	.word	0x0801805a
 8006048:	080180c0 	.word	0x080180c0
 800604c:	080180d8 	.word	0x080180d8

08006050 <pb_encode>:
{
 8006050:	b530      	push	{r4, r5, lr}
 8006052:	b087      	sub	sp, #28
 8006054:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8006056:	4668      	mov	r0, sp
 8006058:	f7fe ff7e 	bl	8004f58 <pb_field_iter_begin>
 800605c:	b910      	cbnz	r0, 8006064 <pb_encode+0x14>
        return true; /* Empty message type */
 800605e:	2001      	movs	r0, #1
}
 8006060:	b007      	add	sp, #28
 8006062:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006064:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8006066:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006068:	788b      	ldrb	r3, [r1, #2]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11c      	bne.n	80060ac <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8006072:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8006074:	b91c      	cbnz	r4, 800607e <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8006076:	4668      	mov	r0, sp
 8006078:	f7fe ff80 	bl	8004f7c <pb_field_iter_next>
 800607c:	e7ee      	b.n	800605c <pb_encode+0xc>
        if (extension->type->encode)
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	b12a      	cbz	r2, 8006090 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8006084:	4621      	mov	r1, r4
 8006086:	4628      	mov	r0, r5
 8006088:	4790      	blx	r2
        if (!status)
 800608a:	b968      	cbnz	r0, 80060a8 <pb_encode+0x58>
                return false;
 800608c:	2000      	movs	r0, #0
 800608e:	e7e7      	b.n	8006060 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006090:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006092:	788b      	ldrb	r3, [r1, #2]
 8006094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006098:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, extension->dest);
 800609a:	bf14      	ite	ne
 800609c:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 800609e:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7ff fed1 	bl	8005e48 <encode_field>
 80060a6:	e7f0      	b.n	800608a <pb_encode+0x3a>
        extension = extension->next;
 80060a8:	68a4      	ldr	r4, [r4, #8]
 80060aa:	e7e3      	b.n	8006074 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80060ac:	4628      	mov	r0, r5
 80060ae:	f7ff fecb 	bl	8005e48 <encode_field>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1df      	bne.n	8006076 <pb_encode+0x26>
 80060b6:	e7e9      	b.n	800608c <pb_encode+0x3c>

080060b8 <pb_encode_string>:
{
 80060b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80060ba:	2300      	movs	r3, #0
{
 80060bc:	4604      	mov	r4, r0
 80060be:	9101      	str	r1, [sp, #4]
 80060c0:	4615      	mov	r5, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80060c2:	f7ff fdd7 	bl	8005c74 <pb_encode_varint>
 80060c6:	b138      	cbz	r0, 80060d8 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 80060c8:	9901      	ldr	r1, [sp, #4]
 80060ca:	462a      	mov	r2, r5
 80060cc:	4620      	mov	r0, r4
}
 80060ce:	b003      	add	sp, #12
 80060d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 80060d4:	f7ff bdaa 	b.w	8005c2c <pb_write>
}
 80060d8:	b003      	add	sp, #12
 80060da:	bd30      	pop	{r4, r5, pc}

080060dc <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80060dc:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 80060de:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7ff bfe8 	b.w	80060b8 <pb_encode_string>

080060e8 <pb_enc_string>:
{
 80060e8:	b410      	push	{r4}
    size_t max_size = field->data_size;
 80060ea:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80060ee:	7889      	ldrb	r1, [r1, #2]
 80060f0:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 80060f4:	2980      	cmp	r1, #128	; 0x80
 80060f6:	bf08      	it	eq
 80060f8:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 80060fc:	4611      	mov	r1, r2
 80060fe:	b122      	cbz	r2, 800610a <pb_enc_string+0x22>
    size_t size = 0;
 8006100:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8006102:	429a      	cmp	r2, r3
 8006104:	d001      	beq.n	800610a <pb_enc_string+0x22>
 8006106:	5c8c      	ldrb	r4, [r1, r2]
 8006108:	b91c      	cbnz	r4, 8006112 <pb_enc_string+0x2a>
}
 800610a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800610e:	f7ff bfd3 	b.w	80060b8 <pb_encode_string>
            size++;
 8006112:	3201      	adds	r2, #1
            p++;
 8006114:	e7f5      	b.n	8006102 <pb_enc_string+0x1a>
	...

08006118 <pb_enc_bytes>:
{
 8006118:	b470      	push	{r4, r5, r6}
 800611a:	4603      	mov	r3, r0
 800611c:	460c      	mov	r4, r1
    if (src == NULL)
 800611e:	4611      	mov	r1, r2
 8006120:	b912      	cbnz	r2, 8006128 <pb_enc_bytes+0x10>
}
 8006122:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006124:	f7ff bfc8 	b.w	80060b8 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006128:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800612a:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800612c:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8006130:	d104      	bne.n	800613c <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8006132:	f8b4 6007 	ldrh.w	r6, [r4, #7]
 8006136:	1c95      	adds	r5, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006138:	42b5      	cmp	r5, r6
 800613a:	d802      	bhi.n	8006142 <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800613c:	3102      	adds	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	e7ef      	b.n	8006122 <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	4903      	ldr	r1, [pc, #12]	; (8006154 <pb_enc_bytes+0x3c>)
 8006146:	2a00      	cmp	r2, #0
 8006148:	bf08      	it	eq
 800614a:	460a      	moveq	r2, r1
}
 800614c:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800614e:	611a      	str	r2, [r3, #16]
}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	080180e7 	.word	0x080180e7

08006158 <pb_encode_submessage>:
{
 8006158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615c:	b086      	sub	sp, #24
 800615e:	460f      	mov	r7, r1
 8006160:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006162:	2100      	movs	r1, #0
 8006164:	2214      	movs	r2, #20
{
 8006166:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006168:	a801      	add	r0, sp, #4
 800616a:	f004 fddc 	bl	800ad26 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 800616e:	4642      	mov	r2, r8
 8006170:	4639      	mov	r1, r7
 8006172:	a801      	add	r0, sp, #4
 8006174:	f7ff ff6c 	bl	8006050 <pb_encode>
 8006178:	b910      	cbnz	r0, 8006180 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 800617a:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	e00d      	b.n	800619c <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8006180:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006182:	2500      	movs	r5, #0
 8006184:	4632      	mov	r2, r6
 8006186:	462b      	mov	r3, r5
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff fd73 	bl	8005c74 <pb_encode_varint>
 800618e:	b128      	cbz	r0, 800619c <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	b931      	cbnz	r1, 80061a2 <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8006194:	4632      	mov	r2, r6
 8006196:	4620      	mov	r0, r4
 8006198:	f7ff fd48 	bl	8005c2c <pb_write>
}
 800619c:	b006      	add	sp, #24
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	68a2      	ldr	r2, [r4, #8]
 80061a6:	4433      	add	r3, r6
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d907      	bls.n	80061bc <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf08      	it	eq
 80061b4:	4613      	moveq	r3, r2
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	4628      	mov	r0, r5
 80061ba:	e7ef      	b.n	800619c <pb_encode_submessage+0x44>
    substream.state = stream->state;
 80061bc:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 80061be:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 80061c0:	4642      	mov	r2, r8
 80061c2:	4639      	mov	r1, r7
 80061c4:	a801      	add	r0, sp, #4
    substream.max_size = size;
 80061c6:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 80061ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 80061ce:	f7ff ff3f 	bl	8006050 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80061d2:	9a04      	ldr	r2, [sp, #16]
 80061d4:	68e3      	ldr	r3, [r4, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 80061da:	42b2      	cmp	r2, r6
    stream->state = substream.state;
 80061dc:	9b02      	ldr	r3, [sp, #8]
 80061de:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 80061e0:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 80061e2:	d0cb      	beq.n	800617c <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80061e4:	4a01      	ldr	r2, [pc, #4]	; (80061ec <pb_encode_submessage+0x94>)
 80061e6:	e7e3      	b.n	80061b0 <pb_encode_submessage+0x58>
 80061e8:	080180b4 	.word	0x080180b4
 80061ec:	080180fb 	.word	0x080180fb

080061f0 <pb_enc_submessage>:
    if (field->ptr == NULL)
 80061f0:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 80061f4:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 80061f6:	b109      	cbz	r1, 80061fc <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 80061f8:	f7ff bfae 	b.w	8006158 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80061fc:	6902      	ldr	r2, [r0, #16]
 80061fe:	4803      	ldr	r0, [pc, #12]	; (800620c <pb_enc_submessage+0x1c>)
 8006200:	2a00      	cmp	r2, #0
 8006202:	bf08      	it	eq
 8006204:	4602      	moveq	r2, r0
 8006206:	611a      	str	r2, [r3, #16]
}
 8006208:	4608      	mov	r0, r1
 800620a:	4770      	bx	lr
 800620c:	08018071 	.word	0x08018071

08006210 <ai_version_get>:
 8006210:	0212      	lsls	r2, r2, #8
 8006212:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006216:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800621a:	4770      	bx	lr

0800621c <ai_platform_version_get>:
 800621c:	0e02      	lsrs	r2, r0, #24
 800621e:	2300      	movs	r3, #0
 8006220:	f362 0307 	bfi	r3, r2, #0, #8
 8006224:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8006228:	f362 230f 	bfi	r3, r2, #8, #8
 800622c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006230:	f360 4317 	bfi	r3, r0, #16, #8
 8006234:	b082      	sub	sp, #8
 8006236:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800623a:	b002      	add	sp, #8
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <get_tensor_size>:
 8006240:	b111      	cbz	r1, 8006248 <get_tensor_size+0x8>
 8006242:	6983      	ldr	r3, [r0, #24]
 8006244:	6858      	ldr	r0, [r3, #4]
 8006246:	4770      	bx	lr
 8006248:	6883      	ldr	r3, [r0, #8]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	d00a      	beq.n	8006264 <get_tensor_size+0x24>
 800624e:	68c1      	ldr	r1, [r0, #12]
 8006250:	2001      	movs	r0, #1
 8006252:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006256:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800625a:	4299      	cmp	r1, r3
 800625c:	fb02 f000 	mul.w	r0, r2, r0
 8006260:	d1f9      	bne.n	8006256 <get_tensor_size+0x16>
 8006262:	4770      	bx	lr
 8006264:	2001      	movs	r0, #1
 8006266:	4770      	bx	lr

08006268 <get_tensor_byte_size>:
 8006268:	b410      	push	{r4}
 800626a:	6983      	ldr	r3, [r0, #24]
 800626c:	68c4      	ldr	r4, [r0, #12]
 800626e:	6941      	ldr	r1, [r0, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68e0      	ldr	r0, [r4, #12]
 8006274:	4a07      	ldr	r2, [pc, #28]	; (8006294 <get_tensor_byte_size+0x2c>)
 8006276:	68c9      	ldr	r1, [r1, #12]
 8006278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800627c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006280:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006284:	fb01 f000 	mul.w	r0, r1, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	bf04      	itt	eq
 800628c:	3007      	addeq	r0, #7
 800628e:	08c0      	lsreq	r0, r0, #3
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	000400c0 	.word	0x000400c0

08006298 <ai_buffer_get_size>:
 8006298:	b378      	cbz	r0, 80062fa <ai_buffer_get_size+0x62>
 800629a:	b410      	push	{r4}
 800629c:	6803      	ldr	r3, [r0, #0]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <ai_buffer_get_size+0x64>)
 80062a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d01e      	beq.n	80062ea <ai_buffer_get_size+0x52>
 80062ac:	6984      	ldr	r4, [r0, #24]
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	7d03      	ldrb	r3, [r0, #20]
 80062b2:	6941      	ldr	r1, [r0, #20]
 80062b4:	f1a3 0301 	sub.w	r3, r3, #1
 80062b8:	fab3 f383 	clz	r3, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80062c2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80062c6:	da0b      	bge.n	80062e0 <ai_buffer_get_size+0x48>
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d102      	bne.n	80062d2 <ai_buffer_get_size+0x3a>
 80062cc:	2802      	cmp	r0, #2
 80062ce:	d007      	beq.n	80062e0 <ai_buffer_get_size+0x48>
 80062d0:	2302      	movs	r3, #2
 80062d2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80062d6:	3301      	adds	r3, #1
 80062d8:	4298      	cmp	r0, r3
 80062da:	fb01 f202 	mul.w	r2, r1, r2
 80062de:	d1f3      	bne.n	80062c8 <ai_buffer_get_size+0x30>
 80062e0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80062e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	2900      	cmp	r1, #0
 80062ec:	d0de      	beq.n	80062ac <ai_buffer_get_size+0x14>
 80062ee:	6984      	ldr	r4, [r0, #24]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	331f      	adds	r3, #31
 80062f4:	f023 021f 	bic.w	r2, r3, #31
 80062f8:	e7da      	b.n	80062b0 <ai_buffer_get_size+0x18>
 80062fa:	4770      	bx	lr
 80062fc:	000400c0 	.word	0x000400c0

08006300 <ai_buffer_get_byte_size>:
 8006300:	b128      	cbz	r0, 800630e <ai_buffer_get_byte_size+0xe>
 8006302:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8006306:	fb01 f000 	mul.w	r0, r1, r0
 800630a:	3007      	adds	r0, #7
 800630c:	08c0      	lsrs	r0, r0, #3
 800630e:	4770      	bx	lr

08006310 <ai_buffer_array_sane>:
 8006310:	b138      	cbz	r0, 8006322 <ai_buffer_array_sane+0x12>
 8006312:	6843      	ldr	r3, [r0, #4]
 8006314:	b123      	cbz	r3, 8006320 <ai_buffer_array_sane+0x10>
 8006316:	8840      	ldrh	r0, [r0, #2]
 8006318:	3800      	subs	r0, #0
 800631a:	bf18      	it	ne
 800631c:	2001      	movne	r0, #1
 800631e:	4770      	bx	lr
 8006320:	4618      	mov	r0, r3
 8006322:	4770      	bx	lr

08006324 <ai_buffer_array_item_set_address>:
 8006324:	b150      	cbz	r0, 800633c <ai_buffer_array_item_set_address+0x18>
 8006326:	6843      	ldr	r3, [r0, #4]
 8006328:	b14b      	cbz	r3, 800633e <ai_buffer_array_item_set_address+0x1a>
 800632a:	8840      	ldrh	r0, [r0, #2]
 800632c:	b900      	cbnz	r0, 8006330 <ai_buffer_array_item_set_address+0xc>
 800632e:	4770      	bx	lr
 8006330:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006334:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006338:	2001      	movs	r0, #1
 800633a:	604a      	str	r2, [r1, #4]
 800633c:	4770      	bx	lr
 800633e:	4618      	mov	r0, r3
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop

08006344 <_platform_observer_node_exec_cb>:
 8006344:	2a00      	cmp	r2, #0
 8006346:	d07d      	beq.n	8006444 <_platform_observer_node_exec_cb+0x100>
 8006348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800634c:	6815      	ldr	r5, [r2, #0]
 800634e:	b085      	sub	sp, #20
 8006350:	4614      	mov	r4, r2
 8006352:	2d00      	cmp	r5, #0
 8006354:	d078      	beq.n	8006448 <_platform_observer_node_exec_cb+0x104>
 8006356:	8992      	ldrh	r2, [r2, #12]
 8006358:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 800635c:	2a00      	cmp	r2, #0
 800635e:	460b      	mov	r3, r1
 8006360:	f240 3102 	movw	r1, #770	; 0x302
 8006364:	f240 2e02 	movw	lr, #514	; 0x202
 8006368:	bf08      	it	eq
 800636a:	460e      	moveq	r6, r1
 800636c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006370:	f240 2101 	movw	r1, #513	; 0x201
 8006374:	bf1c      	itt	ne
 8006376:	4676      	movne	r6, lr
 8006378:	f44f 7901 	movne.w	r9, #516	; 0x204
 800637c:	f240 3e01 	movw	lr, #769	; 0x301
 8006380:	bf0e      	itee	eq
 8006382:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8006386:	468e      	movne	lr, r1
 8006388:	f04f 0804 	movne.w	r8, #4
 800638c:	f240 1101 	movw	r1, #257	; 0x101
 8006390:	bf0d      	iteet	eq
 8006392:	f44f 7882 	moveq.w	r8, #260	; 0x104
 8006396:	2101      	movne	r1, #1
 8006398:	2702      	movne	r7, #2
 800639a:	f44f 7781 	moveq.w	r7, #258	; 0x102
 800639e:	4594      	cmp	ip, r2
 80063a0:	d034      	beq.n	800640c <_platform_observer_node_exec_cb+0xc8>
 80063a2:	b300      	cbz	r0, 80063e6 <_platform_observer_node_exec_cb+0xa2>
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d053      	beq.n	8006450 <_platform_observer_node_exec_cb+0x10c>
 80063a8:	2802      	cmp	r0, #2
 80063aa:	d035      	beq.n	8006418 <_platform_observer_node_exec_cb+0xd4>
 80063ac:	2803      	cmp	r0, #3
 80063ae:	d116      	bne.n	80063de <_platform_observer_node_exec_cb+0x9a>
 80063b0:	68a3      	ldr	r3, [r4, #8]
 80063b2:	075b      	lsls	r3, r3, #29
 80063b4:	d511      	bpl.n	80063da <_platform_observer_node_exec_cb+0x96>
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	f8ad 2000 	strh.w	r2, [sp]
 80063bc:	885a      	ldrh	r2, [r3, #2]
 80063be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	f8ad 2002 	strh.w	r2, [sp, #2]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	6860      	ldr	r0, [r4, #4]
 80063cc:	2300      	movs	r3, #0
 80063ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80063d2:	4641      	mov	r1, r8
 80063d4:	466a      	mov	r2, sp
 80063d6:	47a8      	blx	r5
 80063d8:	89a2      	ldrh	r2, [r4, #12]
 80063da:	3201      	adds	r2, #1
 80063dc:	81a2      	strh	r2, [r4, #12]
 80063de:	2000      	movs	r0, #0
 80063e0:	b005      	add	sp, #20
 80063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e6:	68a6      	ldr	r6, [r4, #8]
 80063e8:	07f6      	lsls	r6, r6, #31
 80063ea:	d5f6      	bpl.n	80063da <_platform_observer_node_exec_cb+0x96>
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	8858      	ldrh	r0, [r3, #2]
 80063f0:	f8ad 0004 	strh.w	r0, [sp, #4]
 80063f4:	8818      	ldrh	r0, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f8ad 2000 	strh.w	r2, [sp]
 80063fc:	f8ad 0002 	strh.w	r0, [sp, #2]
 8006400:	466a      	mov	r2, sp
 8006402:	6860      	ldr	r0, [r4, #4]
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	47a8      	blx	r5
 8006408:	89a2      	ldrh	r2, [r4, #12]
 800640a:	e7e6      	b.n	80063da <_platform_observer_node_exec_cb+0x96>
 800640c:	46c8      	mov	r8, r9
 800640e:	4637      	mov	r7, r6
 8006410:	4671      	mov	r1, lr
 8006412:	2800      	cmp	r0, #0
 8006414:	d1c6      	bne.n	80063a4 <_platform_observer_node_exec_cb+0x60>
 8006416:	e7e6      	b.n	80063e6 <_platform_observer_node_exec_cb+0xa2>
 8006418:	68a1      	ldr	r1, [r4, #8]
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	0789      	lsls	r1, r1, #30
 800641e:	d5de      	bpl.n	80063de <_platform_observer_node_exec_cb+0x9a>
 8006420:	f8ad 2000 	strh.w	r2, [sp]
 8006424:	885a      	ldrh	r2, [r3, #2]
 8006426:	f8ad 2004 	strh.w	r2, [sp, #4]
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	6860      	ldr	r0, [r4, #4]
 8006430:	f8ad 2002 	strh.w	r2, [sp, #2]
 8006434:	2400      	movs	r4, #0
 8006436:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800643a:	4639      	mov	r1, r7
 800643c:	466a      	mov	r2, sp
 800643e:	47a8      	blx	r5
 8006440:	4620      	mov	r0, r4
 8006442:	e7cd      	b.n	80063e0 <_platform_observer_node_exec_cb+0x9c>
 8006444:	2001      	movs	r0, #1
 8006446:	4770      	bx	lr
 8006448:	2001      	movs	r0, #1
 800644a:	b005      	add	sp, #20
 800644c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006450:	2000      	movs	r0, #0
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	81a0      	strh	r0, [r4, #12]
 8006456:	b005      	add	sp, #20
 8006458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800645c <_ai_platform_acquire_crc>:
 800645c:	2001      	movs	r0, #1
 800645e:	4770      	bx	lr

08006460 <_ai_platform_release_crc>:
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <ai_platform_get_weights_map>:
 8006464:	2a00      	cmp	r2, #0
 8006466:	d037      	beq.n	80064d8 <ai_platform_get_weights_map+0x74>
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	4604      	mov	r4, r0
 800646c:	b1a0      	cbz	r0, 8006498 <ai_platform_get_weights_map+0x34>
 800646e:	460f      	mov	r7, r1
 8006470:	b191      	cbz	r1, 8006498 <ai_platform_get_weights_map+0x34>
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <ai_platform_get_weights_map+0xa4>)
 8006474:	6810      	ldr	r0, [r2, #0]
 8006476:	4298      	cmp	r0, r3
 8006478:	4615      	mov	r5, r2
 800647a:	d00f      	beq.n	800649c <ai_platform_get_weights_map+0x38>
 800647c:	6855      	ldr	r5, [r2, #4]
 800647e:	b15d      	cbz	r5, 8006498 <ai_platform_get_weights_map+0x34>
 8006480:	682e      	ldr	r6, [r5, #0]
 8006482:	429e      	cmp	r6, r3
 8006484:	d02a      	beq.n	80064dc <ai_platform_get_weights_map+0x78>
 8006486:	f1a1 0001 	sub.w	r0, r1, #1
 800648a:	6025      	str	r5, [r4, #0]
 800648c:	fab0 f080 	clz	r0, r0
 8006490:	0940      	lsrs	r0, r0, #5
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006494:	42a7      	cmp	r7, r4
 8006496:	d034      	beq.n	8006502 <ai_platform_get_weights_map+0x9e>
 8006498:	2000      	movs	r0, #0
 800649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649c:	1d10      	adds	r0, r2, #4
 800649e:	f7ff ff37 	bl	8006310 <ai_buffer_array_sane>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d0f8      	beq.n	8006498 <ai_platform_get_weights_map+0x34>
 80064a6:	88eb      	ldrh	r3, [r5, #6]
 80064a8:	429f      	cmp	r7, r3
 80064aa:	d1f5      	bne.n	8006498 <ai_platform_get_weights_map+0x34>
 80064ac:	f04f 0e00 	mov.w	lr, #0
 80064b0:	1f23      	subs	r3, r4, #4
 80064b2:	4670      	mov	r0, lr
 80064b4:	68aa      	ldr	r2, [r5, #8]
 80064b6:	eb02 0c0e 	add.w	ip, r2, lr
 80064ba:	f10e 0e1c 	add.w	lr, lr, #28
 80064be:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80064c2:	b124      	cbz	r4, 80064ce <ai_platform_get_weights_map+0x6a>
 80064c4:	3001      	adds	r0, #1
 80064c6:	4287      	cmp	r7, r0
 80064c8:	f843 4f04 	str.w	r4, [r3, #4]!
 80064cc:	d1f2      	bne.n	80064b4 <ai_platform_get_weights_map+0x50>
 80064ce:	1a38      	subs	r0, r7, r0
 80064d0:	fab0 f080 	clz	r0, r0
 80064d4:	0940      	lsrs	r0, r0, #5
 80064d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d8:	2000      	movs	r0, #0
 80064da:	4770      	bx	lr
 80064dc:	1f23      	subs	r3, r4, #4
 80064de:	4628      	mov	r0, r5
 80064e0:	2400      	movs	r4, #0
 80064e2:	e000      	b.n	80064e6 <ai_platform_get_weights_map+0x82>
 80064e4:	4614      	mov	r4, r2
 80064e6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80064ea:	42b2      	cmp	r2, r6
 80064ec:	d0d2      	beq.n	8006494 <ai_platform_get_weights_map+0x30>
 80064ee:	f843 2f04 	str.w	r2, [r3, #4]!
 80064f2:	1c62      	adds	r2, r4, #1
 80064f4:	4297      	cmp	r7, r2
 80064f6:	d1f5      	bne.n	80064e4 <ai_platform_get_weights_map+0x80>
 80064f8:	3402      	adds	r4, #2
 80064fa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80064fe:	42b3      	cmp	r3, r6
 8006500:	d1ca      	bne.n	8006498 <ai_platform_get_weights_map+0x34>
 8006502:	2001      	movs	r0, #1
 8006504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006506:	bf00      	nop
 8006508:	a1facade 	.word	0xa1facade

0800650c <ai_platform_get_activations_map>:
 800650c:	2a00      	cmp	r2, #0
 800650e:	d038      	beq.n	8006582 <ai_platform_get_activations_map+0x76>
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	4604      	mov	r4, r0
 8006514:	b1a0      	cbz	r0, 8006540 <ai_platform_get_activations_map+0x34>
 8006516:	460f      	mov	r7, r1
 8006518:	b191      	cbz	r1, 8006540 <ai_platform_get_activations_map+0x34>
 800651a:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <ai_platform_get_activations_map+0xa4>)
 800651c:	6810      	ldr	r0, [r2, #0]
 800651e:	4298      	cmp	r0, r3
 8006520:	4615      	mov	r5, r2
 8006522:	d00f      	beq.n	8006544 <ai_platform_get_activations_map+0x38>
 8006524:	6a15      	ldr	r5, [r2, #32]
 8006526:	b15d      	cbz	r5, 8006540 <ai_platform_get_activations_map+0x34>
 8006528:	682e      	ldr	r6, [r5, #0]
 800652a:	429e      	cmp	r6, r3
 800652c:	d02b      	beq.n	8006586 <ai_platform_get_activations_map+0x7a>
 800652e:	f1a1 0001 	sub.w	r0, r1, #1
 8006532:	6025      	str	r5, [r4, #0]
 8006534:	fab0 f080 	clz	r0, r0
 8006538:	0940      	lsrs	r0, r0, #5
 800653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653c:	42a7      	cmp	r7, r4
 800653e:	d035      	beq.n	80065ac <ai_platform_get_activations_map+0xa0>
 8006540:	2000      	movs	r0, #0
 8006542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006544:	f102 000c 	add.w	r0, r2, #12
 8006548:	f7ff fee2 	bl	8006310 <ai_buffer_array_sane>
 800654c:	2800      	cmp	r0, #0
 800654e:	d0f7      	beq.n	8006540 <ai_platform_get_activations_map+0x34>
 8006550:	89eb      	ldrh	r3, [r5, #14]
 8006552:	429f      	cmp	r7, r3
 8006554:	d1f4      	bne.n	8006540 <ai_platform_get_activations_map+0x34>
 8006556:	f04f 0e00 	mov.w	lr, #0
 800655a:	1f23      	subs	r3, r4, #4
 800655c:	4670      	mov	r0, lr
 800655e:	692a      	ldr	r2, [r5, #16]
 8006560:	eb02 0c0e 	add.w	ip, r2, lr
 8006564:	f10e 0e1c 	add.w	lr, lr, #28
 8006568:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800656c:	b124      	cbz	r4, 8006578 <ai_platform_get_activations_map+0x6c>
 800656e:	3001      	adds	r0, #1
 8006570:	4287      	cmp	r7, r0
 8006572:	f843 4f04 	str.w	r4, [r3, #4]!
 8006576:	d1f2      	bne.n	800655e <ai_platform_get_activations_map+0x52>
 8006578:	1a38      	subs	r0, r7, r0
 800657a:	fab0 f080 	clz	r0, r0
 800657e:	0940      	lsrs	r0, r0, #5
 8006580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006582:	2000      	movs	r0, #0
 8006584:	4770      	bx	lr
 8006586:	1f23      	subs	r3, r4, #4
 8006588:	4628      	mov	r0, r5
 800658a:	2400      	movs	r4, #0
 800658c:	e000      	b.n	8006590 <ai_platform_get_activations_map+0x84>
 800658e:	4614      	mov	r4, r2
 8006590:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006594:	42b2      	cmp	r2, r6
 8006596:	d0d1      	beq.n	800653c <ai_platform_get_activations_map+0x30>
 8006598:	f843 2f04 	str.w	r2, [r3, #4]!
 800659c:	1c62      	adds	r2, r4, #1
 800659e:	4297      	cmp	r7, r2
 80065a0:	d1f5      	bne.n	800658e <ai_platform_get_activations_map+0x82>
 80065a2:	3402      	adds	r4, #2
 80065a4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	d1c9      	bne.n	8006540 <ai_platform_get_activations_map+0x34>
 80065ac:	2001      	movs	r0, #1
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b0:	a1facade 	.word	0xa1facade

080065b4 <ai_platform_bind_network_params>:
 80065b4:	b1a0      	cbz	r0, 80065e0 <ai_platform_bind_network_params+0x2c>
 80065b6:	b1b1      	cbz	r1, 80065e6 <ai_platform_bind_network_params+0x32>
 80065b8:	b1c2      	cbz	r2, 80065ec <ai_platform_bind_network_params+0x38>
 80065ba:	b410      	push	{r4}
 80065bc:	4603      	mov	r3, r0
 80065be:	4c0d      	ldr	r4, [pc, #52]	; (80065f4 <ai_platform_bind_network_params+0x40>)
 80065c0:	f843 4b04 	str.w	r4, [r3], #4
 80065c4:	f100 0c0c 	add.w	ip, r0, #12
 80065c8:	c903      	ldmia	r1, {r0, r1}
 80065ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80065ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80065d6:	2301      	movs	r3, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	4603      	mov	r3, r0
 80065e2:	4618      	mov	r0, r3
 80065e4:	4770      	bx	lr
 80065e6:	460b      	mov	r3, r1
 80065e8:	4618      	mov	r0, r3
 80065ea:	4770      	bx	lr
 80065ec:	4613      	mov	r3, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	a1facade 	.word	0xa1facade

080065f8 <ai_platform_runtime_get_revision>:
 80065f8:	b508      	push	{r3, lr}
 80065fa:	f7ff ff2f 	bl	800645c <_ai_platform_acquire_crc>
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <ai_platform_runtime_get_revision+0x58>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660a:	d010      	beq.n	800662e <ai_platform_runtime_get_revision+0x36>
 800660c:	4a11      	ldr	r2, [pc, #68]	; (8006654 <ai_platform_runtime_get_revision+0x5c>)
 800660e:	2301      	movs	r3, #1
 8006610:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006614:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1fb      	bne.n	8006614 <ai_platform_runtime_get_revision+0x1c>
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <ai_platform_runtime_get_revision+0x60>)
 800661e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006622:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006626:	4b0d      	ldr	r3, [pc, #52]	; (800665c <ai_platform_runtime_get_revision+0x64>)
 8006628:	429a      	cmp	r2, r3
 800662a:	d00c      	beq.n	8006646 <ai_platform_runtime_get_revision+0x4e>
 800662c:	e7fe      	b.n	800662c <ai_platform_runtime_get_revision+0x34>
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <ai_platform_runtime_get_revision+0x68>)
 8006630:	2301      	movs	r3, #1
 8006632:	6093      	str	r3, [r2, #8]
 8006634:	6893      	ldr	r3, [r2, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1fc      	bne.n	8006634 <ai_platform_runtime_get_revision+0x3c>
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <ai_platform_runtime_get_revision+0x60>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <ai_platform_runtime_get_revision+0x64>)
 8006642:	429a      	cmp	r2, r3
 8006644:	d103      	bne.n	800664e <ai_platform_runtime_get_revision+0x56>
 8006646:	f7ff ff0b 	bl	8006460 <_ai_platform_release_crc>
 800664a:	4806      	ldr	r0, [pc, #24]	; (8006664 <ai_platform_runtime_get_revision+0x6c>)
 800664c:	bd08      	pop	{r3, pc}
 800664e:	e7fe      	b.n	800664e <ai_platform_runtime_get_revision+0x56>
 8006650:	e0042000 	.word	0xe0042000
 8006654:	58024000 	.word	0x58024000
 8006658:	f407a5c2 	.word	0xf407a5c2
 800665c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006660:	40023000 	.word	0x40023000
 8006664:	080185bc 	.word	0x080185bc

08006668 <ai_platform_runtime_get_version>:
 8006668:	b500      	push	{lr}
 800666a:	b083      	sub	sp, #12
 800666c:	f7ff fef6 	bl	800645c <_ai_platform_acquire_crc>
 8006670:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <ai_platform_runtime_get_version+0x80>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d010      	beq.n	80066a0 <ai_platform_runtime_get_version+0x38>
 800667e:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <ai_platform_runtime_get_version+0x84>)
 8006680:	2301      	movs	r3, #1
 8006682:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006686:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1fb      	bne.n	8006686 <ai_platform_runtime_get_version+0x1e>
 800668e:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <ai_platform_runtime_get_version+0x88>)
 8006690:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006694:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006698:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <ai_platform_runtime_get_version+0x8c>)
 800669a:	429a      	cmp	r2, r3
 800669c:	d00c      	beq.n	80066b8 <ai_platform_runtime_get_version+0x50>
 800669e:	e7fe      	b.n	800669e <ai_platform_runtime_get_version+0x36>
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <ai_platform_runtime_get_version+0x90>)
 80066a2:	2301      	movs	r3, #1
 80066a4:	6093      	str	r3, [r2, #8]
 80066a6:	6893      	ldr	r3, [r2, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1fc      	bne.n	80066a6 <ai_platform_runtime_get_version+0x3e>
 80066ac:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <ai_platform_runtime_get_version+0x88>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <ai_platform_runtime_get_version+0x8c>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d115      	bne.n	80066e4 <ai_platform_runtime_get_version+0x7c>
 80066b8:	f7ff fed2 	bl	8006460 <_ai_platform_release_crc>
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <ai_platform_runtime_get_version+0x94>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2000      	movs	r0, #0
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	f362 0007 	bfi	r0, r2, #0, #8
 80066c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80066cc:	f362 200f 	bfi	r0, r2, #8, #8
 80066d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80066d4:	f362 4017 	bfi	r0, r2, #16, #8
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f363 601f 	bfi	r0, r3, #24, #8
 80066de:	b003      	add	sp, #12
 80066e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80066e4:	e7fe      	b.n	80066e4 <ai_platform_runtime_get_version+0x7c>
 80066e6:	bf00      	nop
 80066e8:	e0042000 	.word	0xe0042000
 80066ec:	58024000 	.word	0x58024000
 80066f0:	f407a5c2 	.word	0xf407a5c2
 80066f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80066f8:	40023000 	.word	0x40023000
 80066fc:	080185c0 	.word	0x080185c0

08006700 <ai_platform_api_get_version>:
 8006700:	b500      	push	{lr}
 8006702:	b083      	sub	sp, #12
 8006704:	f7ff feaa 	bl	800645c <_ai_platform_acquire_crc>
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <ai_platform_api_get_version+0x80>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d010      	beq.n	8006738 <ai_platform_api_get_version+0x38>
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <ai_platform_api_get_version+0x84>)
 8006718:	2301      	movs	r3, #1
 800671a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800671e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1fb      	bne.n	800671e <ai_platform_api_get_version+0x1e>
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <ai_platform_api_get_version+0x88>)
 8006728:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800672c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006730:	4b16      	ldr	r3, [pc, #88]	; (800678c <ai_platform_api_get_version+0x8c>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d00c      	beq.n	8006750 <ai_platform_api_get_version+0x50>
 8006736:	e7fe      	b.n	8006736 <ai_platform_api_get_version+0x36>
 8006738:	4a15      	ldr	r2, [pc, #84]	; (8006790 <ai_platform_api_get_version+0x90>)
 800673a:	2301      	movs	r3, #1
 800673c:	6093      	str	r3, [r2, #8]
 800673e:	6893      	ldr	r3, [r2, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1fc      	bne.n	800673e <ai_platform_api_get_version+0x3e>
 8006744:	4b10      	ldr	r3, [pc, #64]	; (8006788 <ai_platform_api_get_version+0x88>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	4b10      	ldr	r3, [pc, #64]	; (800678c <ai_platform_api_get_version+0x8c>)
 800674c:	429a      	cmp	r2, r3
 800674e:	d115      	bne.n	800677c <ai_platform_api_get_version+0x7c>
 8006750:	f7ff fe86 	bl	8006460 <_ai_platform_release_crc>
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <ai_platform_api_get_version+0x94>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2000      	movs	r0, #0
 800675a:	b2da      	uxtb	r2, r3
 800675c:	f362 0007 	bfi	r0, r2, #0, #8
 8006760:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006764:	f362 200f 	bfi	r0, r2, #8, #8
 8006768:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800676c:	f362 4017 	bfi	r0, r2, #16, #8
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	f363 601f 	bfi	r0, r3, #24, #8
 8006776:	b003      	add	sp, #12
 8006778:	f85d fb04 	ldr.w	pc, [sp], #4
 800677c:	e7fe      	b.n	800677c <ai_platform_api_get_version+0x7c>
 800677e:	bf00      	nop
 8006780:	e0042000 	.word	0xe0042000
 8006784:	58024000 	.word	0x58024000
 8006788:	f407a5c2 	.word	0xf407a5c2
 800678c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006790:	40023000 	.word	0x40023000
 8006794:	080185c4 	.word	0x080185c4

08006798 <ai_platform_interface_api_get_version>:
 8006798:	b500      	push	{lr}
 800679a:	b083      	sub	sp, #12
 800679c:	f7ff fe5e 	bl	800645c <_ai_platform_acquire_crc>
 80067a0:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <ai_platform_interface_api_get_version+0x80>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d010      	beq.n	80067d0 <ai_platform_interface_api_get_version+0x38>
 80067ae:	4a1b      	ldr	r2, [pc, #108]	; (800681c <ai_platform_interface_api_get_version+0x84>)
 80067b0:	2301      	movs	r3, #1
 80067b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1fb      	bne.n	80067b6 <ai_platform_interface_api_get_version+0x1e>
 80067be:	4b18      	ldr	r3, [pc, #96]	; (8006820 <ai_platform_interface_api_get_version+0x88>)
 80067c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <ai_platform_interface_api_get_version+0x8c>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d00c      	beq.n	80067e8 <ai_platform_interface_api_get_version+0x50>
 80067ce:	e7fe      	b.n	80067ce <ai_platform_interface_api_get_version+0x36>
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <ai_platform_interface_api_get_version+0x90>)
 80067d2:	2301      	movs	r3, #1
 80067d4:	6093      	str	r3, [r2, #8]
 80067d6:	6893      	ldr	r3, [r2, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1fc      	bne.n	80067d6 <ai_platform_interface_api_get_version+0x3e>
 80067dc:	4b10      	ldr	r3, [pc, #64]	; (8006820 <ai_platform_interface_api_get_version+0x88>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <ai_platform_interface_api_get_version+0x8c>)
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d115      	bne.n	8006814 <ai_platform_interface_api_get_version+0x7c>
 80067e8:	f7ff fe3a 	bl	8006460 <_ai_platform_release_crc>
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <ai_platform_interface_api_get_version+0x94>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2000      	movs	r0, #0
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	f362 0007 	bfi	r0, r2, #0, #8
 80067f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80067fc:	f362 200f 	bfi	r0, r2, #8, #8
 8006800:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006804:	f362 4017 	bfi	r0, r2, #16, #8
 8006808:	0e1b      	lsrs	r3, r3, #24
 800680a:	f363 601f 	bfi	r0, r3, #24, #8
 800680e:	b003      	add	sp, #12
 8006810:	f85d fb04 	ldr.w	pc, [sp], #4
 8006814:	e7fe      	b.n	8006814 <ai_platform_interface_api_get_version+0x7c>
 8006816:	bf00      	nop
 8006818:	e0042000 	.word	0xe0042000
 800681c:	58024000 	.word	0x58024000
 8006820:	f407a5c2 	.word	0xf407a5c2
 8006824:	b5e8b5cd 	.word	0xb5e8b5cd
 8006828:	40023000 	.word	0x40023000
 800682c:	080185c8 	.word	0x080185c8

08006830 <ai_platform_context_acquire>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4604      	mov	r4, r0
 8006834:	b120      	cbz	r0, 8006840 <ai_platform_context_acquire+0x10>
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <ai_platform_context_acquire+0x68>)
 8006838:	6802      	ldr	r2, [r0, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	bf18      	it	ne
 800683e:	2400      	movne	r4, #0
 8006840:	f7ff fe0c 	bl	800645c <_ai_platform_acquire_crc>
 8006844:	4b15      	ldr	r3, [pc, #84]	; (800689c <ai_platform_context_acquire+0x6c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d010      	beq.n	8006874 <ai_platform_context_acquire+0x44>
 8006852:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <ai_platform_context_acquire+0x70>)
 8006854:	2301      	movs	r3, #1
 8006856:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800685a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1fb      	bne.n	800685a <ai_platform_context_acquire+0x2a>
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <ai_platform_context_acquire+0x74>)
 8006864:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006868:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <ai_platform_context_acquire+0x78>)
 800686e:	429a      	cmp	r2, r3
 8006870:	d00c      	beq.n	800688c <ai_platform_context_acquire+0x5c>
 8006872:	e7fe      	b.n	8006872 <ai_platform_context_acquire+0x42>
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <ai_platform_context_acquire+0x7c>)
 8006876:	2301      	movs	r3, #1
 8006878:	6093      	str	r3, [r2, #8]
 800687a:	6893      	ldr	r3, [r2, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1fc      	bne.n	800687a <ai_platform_context_acquire+0x4a>
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <ai_platform_context_acquire+0x74>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	6812      	ldr	r2, [r2, #0]
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <ai_platform_context_acquire+0x78>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <ai_platform_context_acquire+0x64>
 800688c:	f7ff fde8 	bl	8006460 <_ai_platform_release_crc>
 8006890:	4620      	mov	r0, r4
 8006892:	bd10      	pop	{r4, pc}
 8006894:	e7fe      	b.n	8006894 <ai_platform_context_acquire+0x64>
 8006896:	bf00      	nop
 8006898:	a1c00100 	.word	0xa1c00100
 800689c:	e0042000 	.word	0xe0042000
 80068a0:	58024000 	.word	0x58024000
 80068a4:	f407a5c2 	.word	0xf407a5c2
 80068a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80068ac:	40023000 	.word	0x40023000

080068b0 <ai_platform_network_get_error>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	b1f0      	cbz	r0, 80068f2 <ai_platform_network_get_error+0x42>
 80068b4:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <ai_platform_network_get_error+0xc4>)
 80068b6:	6802      	ldr	r2, [r0, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	4604      	mov	r4, r0
 80068bc:	d119      	bne.n	80068f2 <ai_platform_network_get_error+0x42>
 80068be:	f7ff fdcd 	bl	800645c <_ai_platform_acquire_crc>
 80068c2:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <ai_platform_network_get_error+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ce:	d03c      	beq.n	800694a <ai_platform_network_get_error+0x9a>
 80068d0:	4a2a      	ldr	r2, [pc, #168]	; (800697c <ai_platform_network_get_error+0xcc>)
 80068d2:	2301      	movs	r3, #1
 80068d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1fb      	bne.n	80068d8 <ai_platform_network_get_error+0x28>
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <ai_platform_network_get_error+0xd0>)
 80068e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80068e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068ea:	4b26      	ldr	r3, [pc, #152]	; (8006984 <ai_platform_network_get_error+0xd4>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d038      	beq.n	8006962 <ai_platform_network_get_error+0xb2>
 80068f0:	e7fe      	b.n	80068f0 <ai_platform_network_get_error+0x40>
 80068f2:	f7ff fdb3 	bl	800645c <_ai_platform_acquire_crc>
 80068f6:	4b20      	ldr	r3, [pc, #128]	; (8006978 <ai_platform_network_get_error+0xc8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006902:	d010      	beq.n	8006926 <ai_platform_network_get_error+0x76>
 8006904:	4a1d      	ldr	r2, [pc, #116]	; (800697c <ai_platform_network_get_error+0xcc>)
 8006906:	2301      	movs	r3, #1
 8006908:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800690c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1fb      	bne.n	800690c <ai_platform_network_get_error+0x5c>
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <ai_platform_network_get_error+0xd0>)
 8006916:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800691a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800691e:	4b19      	ldr	r3, [pc, #100]	; (8006984 <ai_platform_network_get_error+0xd4>)
 8006920:	429a      	cmp	r2, r3
 8006922:	d00d      	beq.n	8006940 <ai_platform_network_get_error+0x90>
 8006924:	e7fe      	b.n	8006924 <ai_platform_network_get_error+0x74>
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <ai_platform_network_get_error+0xd8>)
 8006928:	2301      	movs	r3, #1
 800692a:	6093      	str	r3, [r2, #8]
 800692c:	6893      	ldr	r3, [r2, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1fc      	bne.n	800692c <ai_platform_network_get_error+0x7c>
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <ai_platform_network_get_error+0xd0>)
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <ai_platform_network_get_error+0xd4>)
 800693a:	429a      	cmp	r2, r3
 800693c:	d000      	beq.n	8006940 <ai_platform_network_get_error+0x90>
 800693e:	e7fe      	b.n	800693e <ai_platform_network_get_error+0x8e>
 8006940:	f7ff fd8e 	bl	8006460 <_ai_platform_release_crc>
 8006944:	f241 0010 	movw	r0, #4112	; 0x1010
 8006948:	bd10      	pop	{r4, pc}
 800694a:	4a0f      	ldr	r2, [pc, #60]	; (8006988 <ai_platform_network_get_error+0xd8>)
 800694c:	2301      	movs	r3, #1
 800694e:	6093      	str	r3, [r2, #8]
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1fc      	bne.n	8006950 <ai_platform_network_get_error+0xa0>
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <ai_platform_network_get_error+0xd0>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <ai_platform_network_get_error+0xd4>)
 800695e:	429a      	cmp	r2, r3
 8006960:	d107      	bne.n	8006972 <ai_platform_network_get_error+0xc2>
 8006962:	f7ff fd7d 	bl	8006460 <_ai_platform_release_crc>
 8006966:	f104 0010 	add.w	r0, r4, #16
 800696a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696e:	f001 b91b 	b.w	8007ba8 <core_get_error>
 8006972:	e7fe      	b.n	8006972 <ai_platform_network_get_error+0xc2>
 8006974:	a1c00100 	.word	0xa1c00100
 8006978:	e0042000 	.word	0xe0042000
 800697c:	58024000 	.word	0x58024000
 8006980:	f407a5c2 	.word	0xf407a5c2
 8006984:	b5e8b5cd 	.word	0xb5e8b5cd
 8006988:	40023000 	.word	0x40023000

0800698c <ai_platform_network_set_error>:
 800698c:	b110      	cbz	r0, 8006994 <ai_platform_network_set_error+0x8>
 800698e:	3010      	adds	r0, #16
 8006990:	f001 b910 	b.w	8007bb4 <core_set_error>
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop

08006998 <ai_platform_api_get_network_report>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	b087      	sub	sp, #28
 800699e:	b1f8      	cbz	r0, 80069e0 <ai_platform_api_get_network_report+0x48>
 80069a0:	4b95      	ldr	r3, [pc, #596]	; (8006bf8 <ai_platform_api_get_network_report+0x260>)
 80069a2:	6802      	ldr	r2, [r0, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	4607      	mov	r7, r0
 80069a8:	d11a      	bne.n	80069e0 <ai_platform_api_get_network_report+0x48>
 80069aa:	468b      	mov	fp, r1
 80069ac:	f7ff fd56 	bl	800645c <_ai_platform_acquire_crc>
 80069b0:	4b92      	ldr	r3, [pc, #584]	; (8006bfc <ai_platform_api_get_network_report+0x264>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d03e      	beq.n	8006a3c <ai_platform_api_get_network_report+0xa4>
 80069be:	4a90      	ldr	r2, [pc, #576]	; (8006c00 <ai_platform_api_get_network_report+0x268>)
 80069c0:	2301      	movs	r3, #1
 80069c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80069c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1fb      	bne.n	80069c6 <ai_platform_api_get_network_report+0x2e>
 80069ce:	4b8d      	ldr	r3, [pc, #564]	; (8006c04 <ai_platform_api_get_network_report+0x26c>)
 80069d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80069d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80069d8:	4b8b      	ldr	r3, [pc, #556]	; (8006c08 <ai_platform_api_get_network_report+0x270>)
 80069da:	429a      	cmp	r2, r3
 80069dc:	d03a      	beq.n	8006a54 <ai_platform_api_get_network_report+0xbc>
 80069de:	e7fe      	b.n	80069de <ai_platform_api_get_network_report+0x46>
 80069e0:	f7ff fd3c 	bl	800645c <_ai_platform_acquire_crc>
 80069e4:	4b85      	ldr	r3, [pc, #532]	; (8006bfc <ai_platform_api_get_network_report+0x264>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f0:	d010      	beq.n	8006a14 <ai_platform_api_get_network_report+0x7c>
 80069f2:	4a83      	ldr	r2, [pc, #524]	; (8006c00 <ai_platform_api_get_network_report+0x268>)
 80069f4:	2301      	movs	r3, #1
 80069f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80069fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1fb      	bne.n	80069fa <ai_platform_api_get_network_report+0x62>
 8006a02:	4b80      	ldr	r3, [pc, #512]	; (8006c04 <ai_platform_api_get_network_report+0x26c>)
 8006a04:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006a08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006a0c:	4b7e      	ldr	r3, [pc, #504]	; (8006c08 <ai_platform_api_get_network_report+0x270>)
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d00d      	beq.n	8006a2e <ai_platform_api_get_network_report+0x96>
 8006a12:	e7fe      	b.n	8006a12 <ai_platform_api_get_network_report+0x7a>
 8006a14:	4a7d      	ldr	r2, [pc, #500]	; (8006c0c <ai_platform_api_get_network_report+0x274>)
 8006a16:	2301      	movs	r3, #1
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	6893      	ldr	r3, [r2, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1fc      	bne.n	8006a1a <ai_platform_api_get_network_report+0x82>
 8006a20:	4b78      	ldr	r3, [pc, #480]	; (8006c04 <ai_platform_api_get_network_report+0x26c>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <ai_platform_api_get_network_report+0x270>)
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d000      	beq.n	8006a2e <ai_platform_api_get_network_report+0x96>
 8006a2c:	e7fe      	b.n	8006a2c <ai_platform_api_get_network_report+0x94>
 8006a2e:	f7ff fd17 	bl	8006460 <_ai_platform_release_crc>
 8006a32:	2400      	movs	r4, #0
 8006a34:	4620      	mov	r0, r4
 8006a36:	b007      	add	sp, #28
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	4a73      	ldr	r2, [pc, #460]	; (8006c0c <ai_platform_api_get_network_report+0x274>)
 8006a3e:	2301      	movs	r3, #1
 8006a40:	6093      	str	r3, [r2, #8]
 8006a42:	6893      	ldr	r3, [r2, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1fc      	bne.n	8006a42 <ai_platform_api_get_network_report+0xaa>
 8006a48:	4b6e      	ldr	r3, [pc, #440]	; (8006c04 <ai_platform_api_get_network_report+0x26c>)
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	4b6e      	ldr	r3, [pc, #440]	; (8006c08 <ai_platform_api_get_network_report+0x270>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d112      	bne.n	8006a7a <ai_platform_api_get_network_report+0xe2>
 8006a54:	f7ff fd04 	bl	8006460 <_ai_platform_release_crc>
 8006a58:	f1bb 0f00 	cmp.w	fp, #0
 8006a5c:	d0e9      	beq.n	8006a32 <ai_platform_api_get_network_report+0x9a>
 8006a5e:	2400      	movs	r4, #0
 8006a60:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	b14b      	cbz	r3, 8006a7c <ai_platform_api_get_network_report+0xe4>
 8006a68:	3401      	adds	r4, #1
 8006a6a:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d003      	beq.n	8006a7c <ai_platform_api_get_network_report+0xe4>
 8006a74:	b112      	cbz	r2, 8006a7c <ai_platform_api_get_network_report+0xe4>
 8006a76:	4613      	mov	r3, r2
 8006a78:	e7f5      	b.n	8006a66 <ai_platform_api_get_network_report+0xce>
 8006a7a:	e7fe      	b.n	8006a7a <ai_platform_api_get_network_report+0xe2>
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	f000 819e 	beq.w	8006dbe <ai_platform_api_get_network_report+0x426>
 8006a82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d04e      	beq.n	8006b26 <ai_platform_api_get_network_report+0x18e>
 8006a88:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	d049      	beq.n	8006b26 <ai_platform_api_get_network_report+0x18e>
 8006a92:	f04f 0a00 	mov.w	sl, #0
 8006a96:	e9cd 7b00 	strd	r7, fp, [sp]
 8006a9a:	4655      	mov	r5, sl
 8006a9c:	e016      	b.n	8006acc <ai_platform_api_get_network_report+0x134>
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	f847 100e 	str.w	r1, [r7, lr]
 8006aa4:	69b1      	ldr	r1, [r6, #24]
 8006aa6:	6849      	ldr	r1, [r1, #4]
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	f04f 0301 	mov.w	r3, #1
 8006aae:	7523      	strb	r3, [r4, #20]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60e3      	str	r3, [r4, #12]
 8006ab4:	6963      	ldr	r3, [r4, #20]
 8006ab6:	6121      	str	r1, [r4, #16]
 8006ab8:	e9c4 0200 	strd	r0, r2, [r4]
 8006abc:	f368 231f 	bfi	r3, r8, #8, #24
 8006ac0:	f8c4 b018 	str.w	fp, [r4, #24]
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	f10a 0a1c 	add.w	sl, sl, #28
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	f8b9 3000 	ldrh.w	r3, [r9]
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	b2aa      	uxth	r2, r5
 8006ad4:	d933      	bls.n	8006b3e <ai_platform_api_get_network_report+0x1a6>
 8006ad6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006ada:	b383      	cbz	r3, 8006b3e <ai_platform_api_get_network_report+0x1a6>
 8006adc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006ae0:	b36e      	cbz	r6, 8006b3e <ai_platform_api_get_network_report+0x1a6>
 8006ae2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006ae6:	69b2      	ldr	r2, [r6, #24]
 8006ae8:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8006aec:	6810      	ldr	r0, [r2, #0]
 8006aee:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006af2:	68b3      	ldr	r3, [r6, #8]
 8006af4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006af8:	f003 fa50 	bl	8009f9c <ai_array_to_buffer_fmt>
 8006afc:	69b1      	ldr	r1, [r6, #24]
 8006afe:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006b02:	688a      	ldr	r2, [r1, #8]
 8006b04:	4454      	add	r4, sl
 8006b06:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0cb      	beq.n	8006aa6 <ai_platform_api_get_network_report+0x10e>
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006b14:	6831      	ldr	r1, [r6, #0]
 8006b16:	6059      	str	r1, [r3, #4]
 8006b18:	b111      	cbz	r1, 8006b20 <ai_platform_api_get_network_report+0x188>
 8006b1a:	8849      	ldrh	r1, [r1, #2]
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d1be      	bne.n	8006a9e <ai_platform_api_get_network_report+0x106>
 8006b20:	69b1      	ldr	r1, [r6, #24]
 8006b22:	2300      	movs	r3, #0
 8006b24:	e7bf      	b.n	8006aa6 <ai_platform_api_get_network_report+0x10e>
 8006b26:	2400      	movs	r4, #0
 8006b28:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 8006b2c:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8006b30:	2218      	movs	r2, #24
 8006b32:	2112      	movs	r1, #18
 8006b34:	f107 0010 	add.w	r0, r7, #16
 8006b38:	f001 f83c 	bl	8007bb4 <core_set_error>
 8006b3c:	e77a      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006b3e:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8006b42:	2a00      	cmp	r2, #0
 8006b44:	d0ef      	beq.n	8006b26 <ai_platform_api_get_network_report+0x18e>
 8006b46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8006b50:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 8006b54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f240 8125 	bls.w	8006da6 <ai_platform_api_get_network_report+0x40e>
 8006b5c:	f04f 0a00 	mov.w	sl, #0
 8006b60:	e9cd 7b00 	strd	r7, fp, [sp]
 8006b64:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8006b68:	4655      	mov	r5, sl
 8006b6a:	e016      	b.n	8006b9a <ai_platform_api_get_network_report+0x202>
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	f847 100e 	str.w	r1, [r7, lr]
 8006b72:	69b1      	ldr	r1, [r6, #24]
 8006b74:	6849      	ldr	r1, [r1, #4]
 8006b76:	60a3      	str	r3, [r4, #8]
 8006b78:	f04f 0301 	mov.w	r3, #1
 8006b7c:	7523      	strb	r3, [r4, #20]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60e3      	str	r3, [r4, #12]
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	6121      	str	r1, [r4, #16]
 8006b86:	e9c4 0200 	strd	r0, r2, [r4]
 8006b8a:	f368 231f 	bfi	r3, r8, #8, #24
 8006b8e:	f8c4 b018 	str.w	fp, [r4, #24]
 8006b92:	3501      	adds	r5, #1
 8006b94:	f10a 0a1c 	add.w	sl, sl, #28
 8006b98:	6163      	str	r3, [r4, #20]
 8006b9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b9e:	42ab      	cmp	r3, r5
 8006ba0:	b2aa      	uxth	r2, r5
 8006ba2:	d935      	bls.n	8006c10 <ai_platform_api_get_network_report+0x278>
 8006ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d031      	beq.n	8006c10 <ai_platform_api_get_network_report+0x278>
 8006bac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006bb0:	b376      	cbz	r6, 8006c10 <ai_platform_api_get_network_report+0x278>
 8006bb2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006bb6:	69b2      	ldr	r2, [r6, #24]
 8006bb8:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8006bbc:	6810      	ldr	r0, [r2, #0]
 8006bbe:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006bc2:	68b3      	ldr	r3, [r6, #8]
 8006bc4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006bc8:	f003 f9e8 	bl	8009f9c <ai_array_to_buffer_fmt>
 8006bcc:	69b1      	ldr	r1, [r6, #24]
 8006bce:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006bd2:	688a      	ldr	r2, [r1, #8]
 8006bd4:	4454      	add	r4, sl
 8006bd6:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0ca      	beq.n	8006b74 <ai_platform_api_get_network_report+0x1dc>
 8006bde:	2100      	movs	r1, #0
 8006be0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006be4:	6831      	ldr	r1, [r6, #0]
 8006be6:	6059      	str	r1, [r3, #4]
 8006be8:	b111      	cbz	r1, 8006bf0 <ai_platform_api_get_network_report+0x258>
 8006bea:	8849      	ldrh	r1, [r1, #2]
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d1bd      	bne.n	8006b6c <ai_platform_api_get_network_report+0x1d4>
 8006bf0:	69b1      	ldr	r1, [r6, #24]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e7be      	b.n	8006b74 <ai_platform_api_get_network_report+0x1dc>
 8006bf6:	bf00      	nop
 8006bf8:	a1c00100 	.word	0xa1c00100
 8006bfc:	e0042000 	.word	0xe0042000
 8006c00:	58024000 	.word	0x58024000
 8006c04:	f407a5c2 	.word	0xf407a5c2
 8006c08:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c0c:	40023000 	.word	0x40023000
 8006c10:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	f000 80c6 	beq.w	8006da6 <ai_platform_api_get_network_report+0x40e>
 8006c1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006c1e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8006c28:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff fb6f 	bl	8006310 <ai_buffer_array_sane>
 8006c32:	4604      	mov	r4, r0
 8006c34:	b938      	cbnz	r0, 8006c46 <ai_platform_api_get_network_report+0x2ae>
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff fb6a 	bl	8006310 <ai_buffer_array_sane>
 8006c3c:	b118      	cbz	r0, 8006c46 <ai_platform_api_get_network_report+0x2ae>
 8006c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 80c5 	bne.w	8006dd0 <ai_platform_api_get_network_report+0x438>
 8006c46:	f107 081c 	add.w	r8, r7, #28
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f7ff fb60 	bl	8006310 <ai_buffer_array_sane>
 8006c50:	4604      	mov	r4, r0
 8006c52:	b938      	cbnz	r0, 8006c64 <ai_platform_api_get_network_report+0x2cc>
 8006c54:	4640      	mov	r0, r8
 8006c56:	f7ff fb5b 	bl	8006310 <ai_buffer_array_sane>
 8006c5a:	b118      	cbz	r0, 8006c64 <ai_platform_api_get_network_report+0x2cc>
 8006c5c:	8bfb      	ldrh	r3, [r7, #30]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 80bd 	bne.w	8006dde <ai_platform_api_get_network_report+0x446>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 8006c6a:	f7ff fbf7 	bl	800645c <_ai_platform_acquire_crc>
 8006c6e:	4ba0      	ldr	r3, [pc, #640]	; (8006ef0 <ai_platform_api_get_network_report+0x558>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7a:	d010      	beq.n	8006c9e <ai_platform_api_get_network_report+0x306>
 8006c7c:	4a9d      	ldr	r2, [pc, #628]	; (8006ef4 <ai_platform_api_get_network_report+0x55c>)
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006c84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1fb      	bne.n	8006c84 <ai_platform_api_get_network_report+0x2ec>
 8006c8c:	4b9a      	ldr	r3, [pc, #616]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006c8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006c92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c96:	4b99      	ldr	r3, [pc, #612]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d00d      	beq.n	8006cb8 <ai_platform_api_get_network_report+0x320>
 8006c9c:	e7fe      	b.n	8006c9c <ai_platform_api_get_network_report+0x304>
 8006c9e:	4a98      	ldr	r2, [pc, #608]	; (8006f00 <ai_platform_api_get_network_report+0x568>)
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	6093      	str	r3, [r2, #8]
 8006ca4:	6893      	ldr	r3, [r2, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1fc      	bne.n	8006ca4 <ai_platform_api_get_network_report+0x30c>
 8006caa:	4b93      	ldr	r3, [pc, #588]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	4b92      	ldr	r3, [pc, #584]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	f040 808a 	bne.w	8006dcc <ai_platform_api_get_network_report+0x434>
 8006cb8:	f7ff fbd2 	bl	8006460 <_ai_platform_release_crc>
 8006cbc:	4b91      	ldr	r3, [pc, #580]	; (8006f04 <ai_platform_api_get_network_report+0x56c>)
 8006cbe:	f8cb 3010 	str.w	r3, [fp, #16]
 8006cc2:	f7ff fbcb 	bl	800645c <_ai_platform_acquire_crc>
 8006cc6:	4b8a      	ldr	r3, [pc, #552]	; (8006ef0 <ai_platform_api_get_network_report+0x558>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d010      	beq.n	8006cf6 <ai_platform_api_get_network_report+0x35e>
 8006cd4:	4b87      	ldr	r3, [pc, #540]	; (8006ef4 <ai_platform_api_get_network_report+0x55c>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006cdc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d1fb      	bne.n	8006cdc <ai_platform_api_get_network_report+0x344>
 8006ce4:	4a84      	ldr	r2, [pc, #528]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006ce6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006cea:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006cee:	4b83      	ldr	r3, [pc, #524]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d00c      	beq.n	8006d0e <ai_platform_api_get_network_report+0x376>
 8006cf4:	e7fe      	b.n	8006cf4 <ai_platform_api_get_network_report+0x35c>
 8006cf6:	4b82      	ldr	r3, [pc, #520]	; (8006f00 <ai_platform_api_get_network_report+0x568>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	609a      	str	r2, [r3, #8]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d1fc      	bne.n	8006cfc <ai_platform_api_get_network_report+0x364>
 8006d02:	4a7d      	ldr	r2, [pc, #500]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b7c      	ldr	r3, [pc, #496]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d15f      	bne.n	8006dce <ai_platform_api_get_network_report+0x436>
 8006d0e:	f7ff fba7 	bl	8006460 <_ai_platform_release_crc>
 8006d12:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006d16:	f8cb 3014 	str.w	r3, [fp, #20]
 8006d1a:	f7ff fb9f 	bl	800645c <_ai_platform_acquire_crc>
 8006d1e:	4b74      	ldr	r3, [pc, #464]	; (8006ef0 <ai_platform_api_get_network_report+0x558>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2a:	d010      	beq.n	8006d4e <ai_platform_api_get_network_report+0x3b6>
 8006d2c:	4b71      	ldr	r3, [pc, #452]	; (8006ef4 <ai_platform_api_get_network_report+0x55c>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006d34:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d1fb      	bne.n	8006d34 <ai_platform_api_get_network_report+0x39c>
 8006d3c:	4a6e      	ldr	r2, [pc, #440]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006d3e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006d42:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006d46:	4b6d      	ldr	r3, [pc, #436]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d00c      	beq.n	8006d66 <ai_platform_api_get_network_report+0x3ce>
 8006d4c:	e7fe      	b.n	8006d4c <ai_platform_api_get_network_report+0x3b4>
 8006d4e:	4b6c      	ldr	r3, [pc, #432]	; (8006f00 <ai_platform_api_get_network_report+0x568>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	d1fc      	bne.n	8006d54 <ai_platform_api_get_network_report+0x3bc>
 8006d5a:	4a67      	ldr	r2, [pc, #412]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	4b66      	ldr	r3, [pc, #408]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d142      	bne.n	8006dec <ai_platform_api_get_network_report+0x454>
 8006d66:	f7ff fb7b 	bl	8006460 <_ai_platform_release_crc>
 8006d6a:	f240 2301 	movw	r3, #513	; 0x201
 8006d6e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8006d72:	f7ff fb73 	bl	800645c <_ai_platform_acquire_crc>
 8006d76:	4b5e      	ldr	r3, [pc, #376]	; (8006ef0 <ai_platform_api_get_network_report+0x558>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d82:	d034      	beq.n	8006dee <ai_platform_api_get_network_report+0x456>
 8006d84:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <ai_platform_api_get_network_report+0x55c>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006d8c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d1fb      	bne.n	8006d8c <ai_platform_api_get_network_report+0x3f4>
 8006d94:	4a58      	ldr	r2, [pc, #352]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006d96:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006d9a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006d9e:	4b57      	ldr	r3, [pc, #348]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d030      	beq.n	8006e06 <ai_platform_api_get_network_report+0x46e>
 8006da4:	e7fe      	b.n	8006da4 <ai_platform_api_get_network_report+0x40c>
 8006da6:	2400      	movs	r4, #0
 8006da8:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8006dac:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8006db0:	2218      	movs	r2, #24
 8006db2:	2113      	movs	r1, #19
 8006db4:	f107 0010 	add.w	r0, r7, #16
 8006db8:	f000 fefc 	bl	8007bb4 <core_set_error>
 8006dbc:	e63a      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006dbe:	2218      	movs	r2, #24
 8006dc0:	2111      	movs	r1, #17
 8006dc2:	f107 0010 	add.w	r0, r7, #16
 8006dc6:	f000 fef5 	bl	8007bb4 <core_set_error>
 8006dca:	e633      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006dcc:	e7fe      	b.n	8006dcc <ai_platform_api_get_network_report+0x434>
 8006dce:	e7fe      	b.n	8006dce <ai_platform_api_get_network_report+0x436>
 8006dd0:	2213      	movs	r2, #19
 8006dd2:	2111      	movs	r1, #17
 8006dd4:	f107 0010 	add.w	r0, r7, #16
 8006dd8:	f000 feec 	bl	8007bb4 <core_set_error>
 8006ddc:	e62a      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006dde:	2212      	movs	r2, #18
 8006de0:	2111      	movs	r1, #17
 8006de2:	f107 0010 	add.w	r0, r7, #16
 8006de6:	f000 fee5 	bl	8007bb4 <core_set_error>
 8006dea:	e623      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006dec:	e7fe      	b.n	8006dec <ai_platform_api_get_network_report+0x454>
 8006dee:	4b44      	ldr	r3, [pc, #272]	; (8006f00 <ai_platform_api_get_network_report+0x568>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d1fc      	bne.n	8006df4 <ai_platform_api_get_network_report+0x45c>
 8006dfa:	4a3f      	ldr	r2, [pc, #252]	; (8006ef8 <ai_platform_api_get_network_report+0x560>)
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <ai_platform_api_get_network_report+0x564>)
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d14a      	bne.n	8006e9c <ai_platform_api_get_network_report+0x504>
 8006e06:	f7ff fb2b 	bl	8006460 <_ai_platform_release_crc>
 8006e0a:	f240 5301 	movw	r3, #1281	; 0x501
 8006e0e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8006e12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006e14:	f7ff fa02 	bl	800621c <ai_platform_version_get>
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <ai_platform_api_get_network_report+0x570>)
 8006e1a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8006e1e:	f8cb 0020 	str.w	r0, [fp, #32]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d10d      	bne.n	8006e42 <ai_platform_api_get_network_report+0x4aa>
 8006e26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006e2a:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8006e2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e32:	e898 0003 	ldmia.w	r8, {r0, r1}
 8006e36:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 8006e3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e3e:	2401      	movs	r4, #1
 8006e40:	e5f8      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006e42:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <ai_platform_api_get_network_report+0x574>)
 8006e44:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <ai_platform_api_get_network_report+0x578>)
 8006e46:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f240 4201 	movw	r2, #1025	; 0x401
 8006e52:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8006e56:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 8006e5a:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 8006e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e60:	f10d 0908 	add.w	r9, sp, #8
 8006e64:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 8006e68:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 8006e6c:	46a6      	mov	lr, r4
 8006e6e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8006e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006e76:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 8006e7a:	46ac      	mov	ip, r5
 8006e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006e80:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006e84:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff fa41 	bl	8006310 <ai_buffer_array_sane>
 8006e8e:	b990      	cbnz	r0, 8006eb6 <ai_platform_api_get_network_report+0x51e>
 8006e90:	4640      	mov	r0, r8
 8006e92:	f7ff fa3d 	bl	8006310 <ai_buffer_array_sane>
 8006e96:	b910      	cbnz	r0, 8006e9e <ai_platform_api_get_network_report+0x506>
 8006e98:	2401      	movs	r4, #1
 8006e9a:	e5cb      	b.n	8006a34 <ai_platform_api_get_network_report+0x9c>
 8006e9c:	e7fe      	b.n	8006e9c <ai_platform_api_get_network_report+0x504>
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	f7ff fa36 	bl	8006310 <ai_buffer_array_sane>
 8006ea4:	b198      	cbz	r0, 8006ece <ai_platform_api_get_network_report+0x536>
 8006ea6:	6a3d      	ldr	r5, [r7, #32]
 8006ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006eb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006eb4:	e7f0      	b.n	8006e98 <ai_platform_api_get_network_report+0x500>
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff fa2a 	bl	8006310 <ai_buffer_array_sane>
 8006ebc:	b178      	cbz	r0, 8006ede <ai_platform_api_get_network_report+0x546>
 8006ebe:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8006ec0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ec4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006ec8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006ecc:	e7e0      	b.n	8006e90 <ai_platform_api_get_network_report+0x4f8>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006edc:	deff      	udf	#255	; 0xff
 8006ede:	4604      	mov	r4, r0
 8006ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ee4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006ee8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006eec:	deff      	udf	#255	; 0xff
 8006eee:	bf00      	nop
 8006ef0:	e0042000 	.word	0xe0042000
 8006ef4:	58024000 	.word	0x58024000
 8006ef8:	f407a5c2 	.word	0xf407a5c2
 8006efc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f00:	40023000 	.word	0x40023000
 8006f04:	080185bc 	.word	0x080185bc
 8006f08:	a1facade 	.word	0xa1facade
 8006f0c:	00040440 	.word	0x00040440
 8006f10:	0800d488 	.word	0x0800d488

08006f14 <ai_platform_network_create>:
 8006f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006f20:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006f24:	4615      	mov	r5, r2
 8006f26:	461f      	mov	r7, r3
 8006f28:	f7ff fa98 	bl	800645c <_ai_platform_acquire_crc>
 8006f2c:	b188      	cbz	r0, 8006f52 <ai_platform_network_create+0x3e>
 8006f2e:	4a5d      	ldr	r2, [pc, #372]	; (80070a4 <ai_platform_network_create+0x190>)
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006f36:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	d00e      	beq.n	8006f5c <ai_platform_network_create+0x48>
 8006f3e:	4a5a      	ldr	r2, [pc, #360]	; (80070a8 <ai_platform_network_create+0x194>)
 8006f40:	2118      	movs	r1, #24
 8006f42:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006f46:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006f4a:	2918      	cmp	r1, #24
 8006f4c:	d018      	beq.n	8006f80 <ai_platform_network_create+0x6c>
 8006f4e:	f7ff fa87 	bl	8006460 <_ai_platform_release_crc>
 8006f52:	f244 1033 	movw	r0, #16691	; 0x4133
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f5c:	4a53      	ldr	r2, [pc, #332]	; (80070ac <ai_platform_network_create+0x198>)
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6091      	str	r1, [r2, #8]
 8006f62:	2114      	movs	r1, #20
 8006f64:	e001      	b.n	8006f6a <ai_platform_network_create+0x56>
 8006f66:	3901      	subs	r1, #1
 8006f68:	d002      	beq.n	8006f70 <ai_platform_network_create+0x5c>
 8006f6a:	6894      	ldr	r4, [r2, #8]
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	d1fa      	bne.n	8006f66 <ai_platform_network_create+0x52>
 8006f70:	4a4e      	ldr	r2, [pc, #312]	; (80070ac <ai_platform_network_create+0x198>)
 8006f72:	6891      	ldr	r1, [r2, #8]
 8006f74:	b911      	cbnz	r1, 8006f7c <ai_platform_network_create+0x68>
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	3201      	adds	r2, #1
 8006f7a:	d008      	beq.n	8006f8e <ai_platform_network_create+0x7a>
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	e7e6      	b.n	8006f4e <ai_platform_network_create+0x3a>
 8006f80:	2101      	movs	r1, #1
 8006f82:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006f86:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d1fb      	bne.n	8006f86 <ai_platform_network_create+0x72>
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fa66 	bl	8006460 <_ai_platform_release_crc>
 8006f94:	f7ff fa62 	bl	800645c <_ai_platform_acquire_crc>
 8006f98:	4b42      	ldr	r3, [pc, #264]	; (80070a4 <ai_platform_network_create+0x190>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa4:	d010      	beq.n	8006fc8 <ai_platform_network_create+0xb4>
 8006fa6:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <ai_platform_network_create+0x194>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006fae:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	d1fb      	bne.n	8006fae <ai_platform_network_create+0x9a>
 8006fb6:	4a3e      	ldr	r2, [pc, #248]	; (80070b0 <ai_platform_network_create+0x19c>)
 8006fb8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006fbc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006fc0:	4b3c      	ldr	r3, [pc, #240]	; (80070b4 <ai_platform_network_create+0x1a0>)
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d00c      	beq.n	8006fe0 <ai_platform_network_create+0xcc>
 8006fc6:	e7fe      	b.n	8006fc6 <ai_platform_network_create+0xb2>
 8006fc8:	4a38      	ldr	r2, [pc, #224]	; (80070ac <ai_platform_network_create+0x198>)
 8006fca:	2301      	movs	r3, #1
 8006fcc:	6093      	str	r3, [r2, #8]
 8006fce:	6893      	ldr	r3, [r2, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1fc      	bne.n	8006fce <ai_platform_network_create+0xba>
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <ai_platform_network_create+0x19c>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	4b36      	ldr	r3, [pc, #216]	; (80070b4 <ai_platform_network_create+0x1a0>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d122      	bne.n	8007026 <ai_platform_network_create+0x112>
 8006fe0:	f7ff fa3e 	bl	8006460 <_ai_platform_release_crc>
 8006fe4:	b38e      	cbz	r6, 800704a <ai_platform_network_create+0x136>
 8006fe6:	4b34      	ldr	r3, [pc, #208]	; (80070b8 <ai_platform_network_create+0x1a4>)
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	6035      	str	r5, [r6, #0]
 8006fec:	f000 fdda 	bl	8007ba4 <core_init>
 8006ff0:	b1d0      	cbz	r0, 8007028 <ai_platform_network_create+0x114>
 8006ff2:	f7ff fa33 	bl	800645c <_ai_platform_acquire_crc>
 8006ff6:	4b2b      	ldr	r3, [pc, #172]	; (80070a4 <ai_platform_network_create+0x190>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007002:	d025      	beq.n	8007050 <ai_platform_network_create+0x13c>
 8007004:	4a28      	ldr	r2, [pc, #160]	; (80070a8 <ai_platform_network_create+0x194>)
 8007006:	2301      	movs	r3, #1
 8007008:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800700c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1fb      	bne.n	800700c <ai_platform_network_create+0xf8>
 8007014:	4b26      	ldr	r3, [pc, #152]	; (80070b0 <ai_platform_network_create+0x19c>)
 8007016:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800701a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800701e:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <ai_platform_network_create+0x1a0>)
 8007020:	429a      	cmp	r2, r3
 8007022:	d022      	beq.n	800706a <ai_platform_network_create+0x156>
 8007024:	e7fe      	b.n	8007024 <ai_platform_network_create+0x110>
 8007026:	e7fe      	b.n	8007026 <ai_platform_network_create+0x112>
 8007028:	2430      	movs	r4, #48	; 0x30
 800702a:	2300      	movs	r3, #0
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	2610      	movs	r6, #16
 8007030:	464a      	mov	r2, r9
 8007032:	4641      	mov	r1, r8
 8007034:	4638      	mov	r0, r7
 8007036:	f7ff f8eb 	bl	8006210 <ai_version_get>
 800703a:	4603      	mov	r3, r0
 800703c:	2000      	movs	r0, #0
 800703e:	f364 0007 	bfi	r0, r4, #0, #8
 8007042:	64ab      	str	r3, [r5, #72]	; 0x48
 8007044:	f366 201f 	bfi	r0, r6, #8, #24
 8007048:	e785      	b.n	8006f56 <ai_platform_network_create+0x42>
 800704a:	f241 0010 	movw	r0, #4112	; 0x1010
 800704e:	e782      	b.n	8006f56 <ai_platform_network_create+0x42>
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <ai_platform_network_create+0x198>)
 8007052:	2301      	movs	r3, #1
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	6893      	ldr	r3, [r2, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1fc      	bne.n	8007056 <ai_platform_network_create+0x142>
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <ai_platform_network_create+0x19c>)
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <ai_platform_network_create+0x1a0>)
 8007064:	429a      	cmp	r2, r3
 8007066:	d000      	beq.n	800706a <ai_platform_network_create+0x156>
 8007068:	e7fe      	b.n	8007068 <ai_platform_network_create+0x154>
 800706a:	f7ff f9f9 	bl	8006460 <_ai_platform_release_crc>
 800706e:	2200      	movs	r2, #0
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	f7ff f8cc 	bl	8006210 <ai_version_get>
 8007078:	2200      	movs	r2, #0
 800707a:	4604      	mov	r4, r0
 800707c:	2105      	movs	r1, #5
 800707e:	2001      	movs	r0, #1
 8007080:	f7ff f8c6 	bl	8006210 <ai_version_get>
 8007084:	4284      	cmp	r4, r0
 8007086:	d001      	beq.n	800708c <ai_platform_network_create+0x178>
 8007088:	2401      	movs	r4, #1
 800708a:	e7ce      	b.n	800702a <ai_platform_network_create+0x116>
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <ai_platform_network_create+0x1a8>)
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	a801      	add	r0, sp, #4
 8007092:	f000 fd9b 	bl	8007bcc <ai_check_custom_types>
 8007096:	b110      	cbz	r0, 800709e <ai_platform_network_create+0x18a>
 8007098:	2600      	movs	r6, #0
 800709a:	4634      	mov	r4, r6
 800709c:	e7c8      	b.n	8007030 <ai_platform_network_create+0x11c>
 800709e:	2402      	movs	r4, #2
 80070a0:	e7c3      	b.n	800702a <ai_platform_network_create+0x116>
 80070a2:	bf00      	nop
 80070a4:	e0042000 	.word	0xe0042000
 80070a8:	58024000 	.word	0x58024000
 80070ac:	40023000 	.word	0x40023000
 80070b0:	f407a5c2 	.word	0xf407a5c2
 80070b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80070b8:	a1c00100 	.word	0xa1c00100
 80070bc:	84048403 	.word	0x84048403

080070c0 <ai_platform_network_destroy>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	b1e8      	cbz	r0, 8007102 <ai_platform_network_destroy+0x42>
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <ai_platform_network_destroy+0xc0>)
 80070c8:	6802      	ldr	r2, [r0, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d119      	bne.n	8007102 <ai_platform_network_destroy+0x42>
 80070ce:	f7ff f9c5 	bl	800645c <_ai_platform_acquire_crc>
 80070d2:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <ai_platform_network_destroy+0xc4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070de:	d03b      	beq.n	8007158 <ai_platform_network_destroy+0x98>
 80070e0:	4a29      	ldr	r2, [pc, #164]	; (8007188 <ai_platform_network_destroy+0xc8>)
 80070e2:	2301      	movs	r3, #1
 80070e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1fb      	bne.n	80070e8 <ai_platform_network_destroy+0x28>
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <ai_platform_network_destroy+0xcc>)
 80070f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80070f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070fa:	4b25      	ldr	r3, [pc, #148]	; (8007190 <ai_platform_network_destroy+0xd0>)
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d037      	beq.n	8007170 <ai_platform_network_destroy+0xb0>
 8007100:	e7fe      	b.n	8007100 <ai_platform_network_destroy+0x40>
 8007102:	f7ff f9ab 	bl	800645c <_ai_platform_acquire_crc>
 8007106:	4b1f      	ldr	r3, [pc, #124]	; (8007184 <ai_platform_network_destroy+0xc4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800710e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007112:	d010      	beq.n	8007136 <ai_platform_network_destroy+0x76>
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <ai_platform_network_destroy+0xc8>)
 8007116:	2301      	movs	r3, #1
 8007118:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800711c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1fb      	bne.n	800711c <ai_platform_network_destroy+0x5c>
 8007124:	4b19      	ldr	r3, [pc, #100]	; (800718c <ai_platform_network_destroy+0xcc>)
 8007126:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800712a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800712e:	4b18      	ldr	r3, [pc, #96]	; (8007190 <ai_platform_network_destroy+0xd0>)
 8007130:	429a      	cmp	r2, r3
 8007132:	d00d      	beq.n	8007150 <ai_platform_network_destroy+0x90>
 8007134:	e7fe      	b.n	8007134 <ai_platform_network_destroy+0x74>
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <ai_platform_network_destroy+0xd4>)
 8007138:	2301      	movs	r3, #1
 800713a:	6093      	str	r3, [r2, #8]
 800713c:	6893      	ldr	r3, [r2, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1fc      	bne.n	800713c <ai_platform_network_destroy+0x7c>
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <ai_platform_network_destroy+0xcc>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <ai_platform_network_destroy+0xd0>)
 800714a:	429a      	cmp	r2, r3
 800714c:	d000      	beq.n	8007150 <ai_platform_network_destroy+0x90>
 800714e:	e7fe      	b.n	800714e <ai_platform_network_destroy+0x8e>
 8007150:	f7ff f986 	bl	8006460 <_ai_platform_release_crc>
 8007154:	4620      	mov	r0, r4
 8007156:	bd10      	pop	{r4, pc}
 8007158:	4a0e      	ldr	r2, [pc, #56]	; (8007194 <ai_platform_network_destroy+0xd4>)
 800715a:	2301      	movs	r3, #1
 800715c:	6093      	str	r3, [r2, #8]
 800715e:	6893      	ldr	r3, [r2, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1fc      	bne.n	800715e <ai_platform_network_destroy+0x9e>
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <ai_platform_network_destroy+0xcc>)
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	4b09      	ldr	r3, [pc, #36]	; (8007190 <ai_platform_network_destroy+0xd0>)
 800716c:	429a      	cmp	r2, r3
 800716e:	d106      	bne.n	800717e <ai_platform_network_destroy+0xbe>
 8007170:	f7ff f976 	bl	8006460 <_ai_platform_release_crc>
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fdbf 	bl	8007cf8 <ai_layers_destroy_all>
 800717a:	2000      	movs	r0, #0
 800717c:	bd10      	pop	{r4, pc}
 800717e:	e7fe      	b.n	800717e <ai_platform_network_destroy+0xbe>
 8007180:	a1c00100 	.word	0xa1c00100
 8007184:	e0042000 	.word	0xe0042000
 8007188:	58024000 	.word	0x58024000
 800718c:	f407a5c2 	.word	0xf407a5c2
 8007190:	b5e8b5cd 	.word	0xb5e8b5cd
 8007194:	40023000 	.word	0x40023000

08007198 <ai_platform_network_init>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	b1f8      	cbz	r0, 80071de <ai_platform_network_init+0x46>
 800719e:	4b6e      	ldr	r3, [pc, #440]	; (8007358 <ai_platform_network_init+0x1c0>)
 80071a0:	6802      	ldr	r2, [r0, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	4604      	mov	r4, r0
 80071a6:	d11a      	bne.n	80071de <ai_platform_network_init+0x46>
 80071a8:	460e      	mov	r6, r1
 80071aa:	f7ff f957 	bl	800645c <_ai_platform_acquire_crc>
 80071ae:	4b6b      	ldr	r3, [pc, #428]	; (800735c <ai_platform_network_init+0x1c4>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d03d      	beq.n	8007238 <ai_platform_network_init+0xa0>
 80071bc:	4a68      	ldr	r2, [pc, #416]	; (8007360 <ai_platform_network_init+0x1c8>)
 80071be:	2301      	movs	r3, #1
 80071c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80071c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1fb      	bne.n	80071c4 <ai_platform_network_init+0x2c>
 80071cc:	4b65      	ldr	r3, [pc, #404]	; (8007364 <ai_platform_network_init+0x1cc>)
 80071ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80071d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80071d6:	4b64      	ldr	r3, [pc, #400]	; (8007368 <ai_platform_network_init+0x1d0>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d039      	beq.n	8007250 <ai_platform_network_init+0xb8>
 80071dc:	e7fe      	b.n	80071dc <ai_platform_network_init+0x44>
 80071de:	f7ff f93d 	bl	800645c <_ai_platform_acquire_crc>
 80071e2:	4b5e      	ldr	r3, [pc, #376]	; (800735c <ai_platform_network_init+0x1c4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ee:	d010      	beq.n	8007212 <ai_platform_network_init+0x7a>
 80071f0:	4a5b      	ldr	r2, [pc, #364]	; (8007360 <ai_platform_network_init+0x1c8>)
 80071f2:	2301      	movs	r3, #1
 80071f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80071f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1fb      	bne.n	80071f8 <ai_platform_network_init+0x60>
 8007200:	4b58      	ldr	r3, [pc, #352]	; (8007364 <ai_platform_network_init+0x1cc>)
 8007202:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007206:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800720a:	4b57      	ldr	r3, [pc, #348]	; (8007368 <ai_platform_network_init+0x1d0>)
 800720c:	429a      	cmp	r2, r3
 800720e:	d00d      	beq.n	800722c <ai_platform_network_init+0x94>
 8007210:	e7fe      	b.n	8007210 <ai_platform_network_init+0x78>
 8007212:	4a56      	ldr	r2, [pc, #344]	; (800736c <ai_platform_network_init+0x1d4>)
 8007214:	2301      	movs	r3, #1
 8007216:	6093      	str	r3, [r2, #8]
 8007218:	6893      	ldr	r3, [r2, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1fc      	bne.n	8007218 <ai_platform_network_init+0x80>
 800721e:	4b51      	ldr	r3, [pc, #324]	; (8007364 <ai_platform_network_init+0x1cc>)
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	4b50      	ldr	r3, [pc, #320]	; (8007368 <ai_platform_network_init+0x1d0>)
 8007226:	429a      	cmp	r2, r3
 8007228:	d000      	beq.n	800722c <ai_platform_network_init+0x94>
 800722a:	e7fe      	b.n	800722a <ai_platform_network_init+0x92>
 800722c:	f7ff f918 	bl	8006460 <_ai_platform_release_crc>
 8007230:	2600      	movs	r6, #0
 8007232:	4630      	mov	r0, r6
 8007234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007238:	4a4c      	ldr	r2, [pc, #304]	; (800736c <ai_platform_network_init+0x1d4>)
 800723a:	2301      	movs	r3, #1
 800723c:	6093      	str	r3, [r2, #8]
 800723e:	6893      	ldr	r3, [r2, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1fc      	bne.n	800723e <ai_platform_network_init+0xa6>
 8007244:	4b47      	ldr	r3, [pc, #284]	; (8007364 <ai_platform_network_init+0x1cc>)
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	4b47      	ldr	r3, [pc, #284]	; (8007368 <ai_platform_network_init+0x1d0>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d11c      	bne.n	800728a <ai_platform_network_init+0xf2>
 8007250:	f7ff f906 	bl	8006460 <_ai_platform_release_crc>
 8007254:	2e00      	cmp	r6, #0
 8007256:	d06f      	beq.n	8007338 <ai_platform_network_init+0x1a0>
 8007258:	4b45      	ldr	r3, [pc, #276]	; (8007370 <ai_platform_network_init+0x1d8>)
 800725a:	6832      	ldr	r2, [r6, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d115      	bne.n	800728c <ai_platform_network_init+0xf4>
 8007260:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007264:	6933      	ldr	r3, [r6, #16]
 8007266:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800726a:	89f7      	ldrh	r7, [r6, #14]
 800726c:	62a3      	str	r3, [r4, #40]	; 0x28
 800726e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007272:	2303      	movs	r3, #3
 8007274:	84e7      	strh	r7, [r4, #38]	; 0x26
 8007276:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800727a:	60e3      	str	r3, [r4, #12]
 800727c:	4620      	mov	r0, r4
 800727e:	4626      	mov	r6, r4
 8007280:	f000 fcce 	bl	8007c20 <ai_layers_init_all>
 8007284:	4630      	mov	r0, r6
 8007286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728a:	e7fe      	b.n	800728a <ai_platform_network_init+0xf2>
 800728c:	2101      	movs	r1, #1
 800728e:	4630      	mov	r0, r6
 8007290:	4635      	mov	r5, r6
 8007292:	6876      	ldr	r6, [r6, #4]
 8007294:	f7ff f800 	bl	8006298 <ai_buffer_get_size>
 8007298:	f105 081c 	add.w	r8, r5, #28
 800729c:	4681      	mov	r9, r0
 800729e:	2101      	movs	r1, #1
 80072a0:	4640      	mov	r0, r8
 80072a2:	6a2f      	ldr	r7, [r5, #32]
 80072a4:	f7fe fff8 	bl	8006298 <ai_buffer_get_size>
 80072a8:	f1b9 0f00 	cmp.w	r9, #0
 80072ac:	d025      	beq.n	80072fa <ai_platform_network_init+0x162>
 80072ae:	2201      	movs	r2, #1
 80072b0:	4696      	mov	lr, r2
 80072b2:	bb30      	cbnz	r0, 8007302 <ai_platform_network_init+0x16a>
 80072b4:	4680      	mov	r8, r0
 80072b6:	4607      	mov	r7, r0
 80072b8:	b376      	cbz	r6, 8007318 <ai_platform_network_init+0x180>
 80072ba:	8be3      	ldrh	r3, [r4, #30]
 80072bc:	4573      	cmp	r3, lr
 80072be:	d323      	bcc.n	8007308 <ai_platform_network_init+0x170>
 80072c0:	b142      	cbz	r2, 80072d4 <ai_platform_network_init+0x13c>
 80072c2:	46ac      	mov	ip, r5
 80072c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072c8:	6a25      	ldr	r5, [r4, #32]
 80072ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80072d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80072d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80072d6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80072da:	2600      	movs	r6, #0
 80072dc:	42bb      	cmp	r3, r7
 80072de:	83a6      	strh	r6, [r4, #28]
 80072e0:	d323      	bcc.n	800732a <ai_platform_network_init+0x192>
 80072e2:	b37f      	cbz	r7, 8007344 <ai_platform_network_init+0x1ac>
 80072e4:	46c4      	mov	ip, r8
 80072e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80072ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80072f2:	46b6      	mov	lr, r6
 80072f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80072f8:	e7bb      	b.n	8007272 <ai_platform_network_init+0xda>
 80072fa:	464a      	mov	r2, r9
 80072fc:	46ce      	mov	lr, r9
 80072fe:	464d      	mov	r5, r9
 8007300:	e7d7      	b.n	80072b2 <ai_platform_network_init+0x11a>
 8007302:	b30f      	cbz	r7, 8007348 <ai_platform_network_init+0x1b0>
 8007304:	2701      	movs	r7, #1
 8007306:	e7d7      	b.n	80072b8 <ai_platform_network_init+0x120>
 8007308:	2212      	movs	r2, #18
 800730a:	2116      	movs	r1, #22
 800730c:	f104 0010 	add.w	r0, r4, #16
 8007310:	f000 fc50 	bl	8007bb4 <core_set_error>
 8007314:	2600      	movs	r6, #0
 8007316:	e78c      	b.n	8007232 <ai_platform_network_init+0x9a>
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	d0cd      	beq.n	80072ba <ai_platform_network_init+0x122>
 800731e:	2110      	movs	r1, #16
 8007320:	2212      	movs	r2, #18
 8007322:	1860      	adds	r0, r4, r1
 8007324:	f000 fc46 	bl	8007bb4 <core_set_error>
 8007328:	e783      	b.n	8007232 <ai_platform_network_init+0x9a>
 800732a:	2213      	movs	r2, #19
 800732c:	2116      	movs	r1, #22
 800732e:	f104 0010 	add.w	r0, r4, #16
 8007332:	f000 fc3f 	bl	8007bb4 <core_set_error>
 8007336:	e77c      	b.n	8007232 <ai_platform_network_init+0x9a>
 8007338:	2110      	movs	r1, #16
 800733a:	2211      	movs	r2, #17
 800733c:	1860      	adds	r0, r4, r1
 800733e:	f000 fc39 	bl	8007bb4 <core_set_error>
 8007342:	e776      	b.n	8007232 <ai_platform_network_init+0x9a>
 8007344:	46be      	mov	lr, r7
 8007346:	e794      	b.n	8007272 <ai_platform_network_init+0xda>
 8007348:	2110      	movs	r1, #16
 800734a:	2213      	movs	r2, #19
 800734c:	1860      	adds	r0, r4, r1
 800734e:	f000 fc31 	bl	8007bb4 <core_set_error>
 8007352:	463e      	mov	r6, r7
 8007354:	e76d      	b.n	8007232 <ai_platform_network_init+0x9a>
 8007356:	bf00      	nop
 8007358:	a1c00100 	.word	0xa1c00100
 800735c:	e0042000 	.word	0xe0042000
 8007360:	58024000 	.word	0x58024000
 8007364:	f407a5c2 	.word	0xf407a5c2
 8007368:	b5e8b5cd 	.word	0xb5e8b5cd
 800736c:	40023000 	.word	0x40023000
 8007370:	a1facade 	.word	0xa1facade

08007374 <ai_platform_network_post_init>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	b1f0      	cbz	r0, 80073b6 <ai_platform_network_post_init+0x42>
 8007378:	4b3c      	ldr	r3, [pc, #240]	; (800746c <ai_platform_network_post_init+0xf8>)
 800737a:	6802      	ldr	r2, [r0, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	4604      	mov	r4, r0
 8007380:	d119      	bne.n	80073b6 <ai_platform_network_post_init+0x42>
 8007382:	f7ff f86b 	bl	800645c <_ai_platform_acquire_crc>
 8007386:	4b3a      	ldr	r3, [pc, #232]	; (8007470 <ai_platform_network_post_init+0xfc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007392:	d03b      	beq.n	800740c <ai_platform_network_post_init+0x98>
 8007394:	4a37      	ldr	r2, [pc, #220]	; (8007474 <ai_platform_network_post_init+0x100>)
 8007396:	2301      	movs	r3, #1
 8007398:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800739c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1fb      	bne.n	800739c <ai_platform_network_post_init+0x28>
 80073a4:	4b34      	ldr	r3, [pc, #208]	; (8007478 <ai_platform_network_post_init+0x104>)
 80073a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073ae:	4b33      	ldr	r3, [pc, #204]	; (800747c <ai_platform_network_post_init+0x108>)
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d037      	beq.n	8007424 <ai_platform_network_post_init+0xb0>
 80073b4:	e7fe      	b.n	80073b4 <ai_platform_network_post_init+0x40>
 80073b6:	f7ff f851 	bl	800645c <_ai_platform_acquire_crc>
 80073ba:	4b2d      	ldr	r3, [pc, #180]	; (8007470 <ai_platform_network_post_init+0xfc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d010      	beq.n	80073ea <ai_platform_network_post_init+0x76>
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <ai_platform_network_post_init+0x100>)
 80073ca:	2301      	movs	r3, #1
 80073cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1fb      	bne.n	80073d0 <ai_platform_network_post_init+0x5c>
 80073d8:	4b27      	ldr	r3, [pc, #156]	; (8007478 <ai_platform_network_post_init+0x104>)
 80073da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073e2:	4b26      	ldr	r3, [pc, #152]	; (800747c <ai_platform_network_post_init+0x108>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d00d      	beq.n	8007404 <ai_platform_network_post_init+0x90>
 80073e8:	e7fe      	b.n	80073e8 <ai_platform_network_post_init+0x74>
 80073ea:	4a25      	ldr	r2, [pc, #148]	; (8007480 <ai_platform_network_post_init+0x10c>)
 80073ec:	2301      	movs	r3, #1
 80073ee:	6093      	str	r3, [r2, #8]
 80073f0:	6893      	ldr	r3, [r2, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1fc      	bne.n	80073f0 <ai_platform_network_post_init+0x7c>
 80073f6:	4b20      	ldr	r3, [pc, #128]	; (8007478 <ai_platform_network_post_init+0x104>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	4b1f      	ldr	r3, [pc, #124]	; (800747c <ai_platform_network_post_init+0x108>)
 80073fe:	429a      	cmp	r2, r3
 8007400:	d000      	beq.n	8007404 <ai_platform_network_post_init+0x90>
 8007402:	e7fe      	b.n	8007402 <ai_platform_network_post_init+0x8e>
 8007404:	f7ff f82c 	bl	8006460 <_ai_platform_release_crc>
 8007408:	2000      	movs	r0, #0
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <ai_platform_network_post_init+0x10c>)
 800740e:	2301      	movs	r3, #1
 8007410:	6093      	str	r3, [r2, #8]
 8007412:	6893      	ldr	r3, [r2, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1fc      	bne.n	8007412 <ai_platform_network_post_init+0x9e>
 8007418:	4b17      	ldr	r3, [pc, #92]	; (8007478 <ai_platform_network_post_init+0x104>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	4b17      	ldr	r3, [pc, #92]	; (800747c <ai_platform_network_post_init+0x108>)
 8007420:	429a      	cmp	r2, r3
 8007422:	d11a      	bne.n	800745a <ai_platform_network_post_init+0xe6>
 8007424:	f7ff f81c 	bl	8006460 <_ai_platform_release_crc>
 8007428:	68e3      	ldr	r3, [r4, #12]
 800742a:	f013 0502 	ands.w	r5, r3, #2
 800742e:	d015      	beq.n	800745c <ai_platform_network_post_init+0xe8>
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fc03 	bl	8007c3c <ai_layers_post_init_all>
 8007436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007438:	b16b      	cbz	r3, 8007456 <ai_platform_network_post_init+0xe2>
 800743a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800743c:	e007      	b.n	800744e <ai_platform_network_post_init+0xda>
 800743e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007442:	4798      	blx	r3
 8007444:	692b      	ldr	r3, [r5, #16]
 8007446:	42ab      	cmp	r3, r5
 8007448:	d005      	beq.n	8007456 <ai_platform_network_post_init+0xe2>
 800744a:	b123      	cbz	r3, 8007456 <ai_platform_network_post_init+0xe2>
 800744c:	461d      	mov	r5, r3
 800744e:	4629      	mov	r1, r5
 8007450:	2000      	movs	r0, #0
 8007452:	2d00      	cmp	r5, #0
 8007454:	d1f3      	bne.n	800743e <ai_platform_network_post_init+0xca>
 8007456:	2001      	movs	r0, #1
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	e7fe      	b.n	800745a <ai_platform_network_post_init+0xe6>
 800745c:	2210      	movs	r2, #16
 800745e:	2111      	movs	r1, #17
 8007460:	18a0      	adds	r0, r4, r2
 8007462:	f000 fba7 	bl	8007bb4 <core_set_error>
 8007466:	4628      	mov	r0, r5
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	a1c00100 	.word	0xa1c00100
 8007470:	e0042000 	.word	0xe0042000
 8007474:	58024000 	.word	0x58024000
 8007478:	f407a5c2 	.word	0xf407a5c2
 800747c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007480:	40023000 	.word	0x40023000

08007484 <ai_platform_network_process>:
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	460e      	mov	r6, r1
 800748a:	b085      	sub	sp, #20
 800748c:	4693      	mov	fp, r2
 800748e:	4605      	mov	r5, r0
 8007490:	b120      	cbz	r0, 800749c <ai_platform_network_process+0x18>
 8007492:	4bb8      	ldr	r3, [pc, #736]	; (8007774 <ai_platform_network_process+0x2f0>)
 8007494:	6802      	ldr	r2, [r0, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	bf18      	it	ne
 800749a:	2500      	movne	r5, #0
 800749c:	f7fe ffde 	bl	800645c <_ai_platform_acquire_crc>
 80074a0:	4bb5      	ldr	r3, [pc, #724]	; (8007778 <ai_platform_network_process+0x2f4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ac:	d010      	beq.n	80074d0 <ai_platform_network_process+0x4c>
 80074ae:	4ab3      	ldr	r2, [pc, #716]	; (800777c <ai_platform_network_process+0x2f8>)
 80074b0:	2301      	movs	r3, #1
 80074b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1fb      	bne.n	80074b6 <ai_platform_network_process+0x32>
 80074be:	4bb0      	ldr	r3, [pc, #704]	; (8007780 <ai_platform_network_process+0x2fc>)
 80074c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80074c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074c8:	4bae      	ldr	r3, [pc, #696]	; (8007784 <ai_platform_network_process+0x300>)
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d00d      	beq.n	80074ea <ai_platform_network_process+0x66>
 80074ce:	e7fe      	b.n	80074ce <ai_platform_network_process+0x4a>
 80074d0:	4aad      	ldr	r2, [pc, #692]	; (8007788 <ai_platform_network_process+0x304>)
 80074d2:	2301      	movs	r3, #1
 80074d4:	6093      	str	r3, [r2, #8]
 80074d6:	6893      	ldr	r3, [r2, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1fc      	bne.n	80074d6 <ai_platform_network_process+0x52>
 80074dc:	4ba8      	ldr	r3, [pc, #672]	; (8007780 <ai_platform_network_process+0x2fc>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	4ba8      	ldr	r3, [pc, #672]	; (8007784 <ai_platform_network_process+0x300>)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	f040 812c 	bne.w	8007742 <ai_platform_network_process+0x2be>
 80074ea:	f7fe ffb9 	bl	8006460 <_ai_platform_release_crc>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f000 8154 	beq.w	800779c <ai_platform_network_process+0x318>
 80074f4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8124 	beq.w	8007744 <ai_platform_network_process+0x2c0>
 80074fc:	68eb      	ldr	r3, [r5, #12]
 80074fe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2700      	movs	r7, #0
 8007508:	2b03      	cmp	r3, #3
 800750a:	616f      	str	r7, [r5, #20]
 800750c:	f040 813e 	bne.w	800778c <ai_platform_network_process+0x308>
 8007510:	2e00      	cmp	r6, #0
 8007512:	f000 811d 	beq.w	8007750 <ai_platform_network_process+0x2cc>
 8007516:	f1ba 0f00 	cmp.w	sl, #0
 800751a:	f000 8119 	beq.w	8007750 <ai_platform_network_process+0x2cc>
 800751e:	f8ba 3000 	ldrh.w	r3, [sl]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8114 	beq.w	8007750 <ai_platform_network_process+0x2cc>
 8007528:	69b3      	ldr	r3, [r6, #24]
 800752a:	f8cd b00c 	str.w	fp, [sp, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007534:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d072      	beq.n	8007622 <ai_platform_network_process+0x19e>
 800753c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007540:	2c00      	cmp	r4, #0
 8007542:	d06e      	beq.n	8007622 <ai_platform_network_process+0x19e>
 8007544:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007548:	f8d3 9000 	ldr.w	r9, [r3]
 800754c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007550:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007554:	f000 81de 	beq.w	8007914 <ai_platform_network_process+0x490>
 8007558:	69a3      	ldr	r3, [r4, #24]
 800755a:	2101      	movs	r1, #1
 800755c:	4630      	mov	r0, r6
 800755e:	685d      	ldr	r5, [r3, #4]
 8007560:	f7fe fe9a 	bl	8006298 <ai_buffer_get_size>
 8007564:	4285      	cmp	r5, r0
 8007566:	f0c0 811b 	bcc.w	80077a0 <ai_platform_network_process+0x31c>
 800756a:	68e0      	ldr	r0, [r4, #12]
 800756c:	69b1      	ldr	r1, [r6, #24]
 800756e:	68c2      	ldr	r2, [r0, #12]
 8007570:	68cb      	ldr	r3, [r1, #12]
 8007572:	429a      	cmp	r2, r3
 8007574:	f040 8114 	bne.w	80077a0 <ai_platform_network_process+0x31c>
 8007578:	6882      	ldr	r2, [r0, #8]
 800757a:	688b      	ldr	r3, [r1, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	f040 810f 	bne.w	80077a0 <ai_platform_network_process+0x31c>
 8007582:	6842      	ldr	r2, [r0, #4]
 8007584:	684b      	ldr	r3, [r1, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	f040 810a 	bne.w	80077a0 <ai_platform_network_process+0x31c>
 800758c:	69a3      	ldr	r3, [r4, #24]
 800758e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007592:	f002 fd97 	bl	800a0c4 <ai_array_get_data_byte_size>
 8007596:	4605      	mov	r5, r0
 8007598:	4620      	mov	r0, r4
 800759a:	f7fe fe65 	bl	8006268 <get_tensor_byte_size>
 800759e:	4285      	cmp	r5, r0
 80075a0:	f0c0 80fe 	bcc.w	80077a0 <ai_platform_network_process+0x31c>
 80075a4:	69a3      	ldr	r3, [r4, #24]
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	f002 fcf8 	bl	8009f9c <ai_array_to_buffer_fmt>
 80075ac:	6833      	ldr	r3, [r6, #0]
 80075ae:	4058      	eors	r0, r3
 80075b0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80075b4:	f040 81b9 	bne.w	800792a <ai_platform_network_process+0x4a6>
 80075b8:	6873      	ldr	r3, [r6, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 81ac 	beq.w	8007918 <ai_platform_network_process+0x494>
 80075c0:	69b3      	ldr	r3, [r6, #24]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 819c 	beq.w	8007902 <ai_platform_network_process+0x47e>
 80075ca:	9a01      	ldr	r2, [sp, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	bf38      	it	cc
 80075d0:	461a      	movcc	r2, r3
 80075d2:	4620      	mov	r0, r4
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	f7fe fe47 	bl	8006268 <get_tensor_byte_size>
 80075da:	f8c8 0008 	str.w	r0, [r8, #8]
 80075de:	69b3      	ldr	r3, [r6, #24]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	fb00 f303 	mul.w	r3, r0, r3
 80075e6:	f8c8 300c 	str.w	r3, [r8, #12]
 80075ea:	6871      	ldr	r1, [r6, #4]
 80075ec:	f8c8 1004 	str.w	r1, [r8, #4]
 80075f0:	440b      	add	r3, r1
 80075f2:	f849 300b 	str.w	r3, [r9, fp]
 80075f6:	69a0      	ldr	r0, [r4, #24]
 80075f8:	6803      	ldr	r3, [r0, #0]
 80075fa:	009a      	lsls	r2, r3, #2
 80075fc:	f107 0701 	add.w	r7, r7, #1
 8007600:	f106 061c 	add.w	r6, r6, #28
 8007604:	f100 80af 	bmi.w	8007766 <ai_platform_network_process+0x2e2>
 8007608:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	4419      	add	r1, r3
 8007610:	6081      	str	r1, [r0, #8]
 8007612:	69a3      	ldr	r3, [r4, #24]
 8007614:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	f8ba 3000 	ldrh.w	r3, [sl]
 800761e:	42bb      	cmp	r3, r7
 8007620:	d888      	bhi.n	8007534 <ai_platform_network_process+0xb0>
 8007622:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007626:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007628:	f1bb 0f00 	cmp.w	fp, #0
 800762c:	f000 8186 	beq.w	800793c <ai_platform_network_process+0x4b8>
 8007630:	2a01      	cmp	r2, #1
 8007632:	f240 815e 	bls.w	80078f2 <ai_platform_network_process+0x46e>
 8007636:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800763a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8157 	beq.w	80078f2 <ai_platform_network_process+0x46e>
 8007644:	465e      	mov	r6, fp
 8007646:	2700      	movs	r7, #0
 8007648:	462c      	mov	r4, r5
 800764a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80b4 	beq.w	80077bc <ai_platform_network_process+0x338>
 8007654:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007658:	2d00      	cmp	r5, #0
 800765a:	f000 80af 	beq.w	80077bc <ai_platform_network_process+0x338>
 800765e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007662:	f8d3 8000 	ldr.w	r8, [r3]
 8007666:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800766a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800766e:	f000 8171 	beq.w	8007954 <ai_platform_network_process+0x4d0>
 8007672:	69ab      	ldr	r3, [r5, #24]
 8007674:	2101      	movs	r1, #1
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	4630      	mov	r0, r6
 800767c:	f7fe fe0c 	bl	8006298 <ai_buffer_get_size>
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	4283      	cmp	r3, r0
 8007684:	f0c0 8134 	bcc.w	80078f0 <ai_platform_network_process+0x46c>
 8007688:	68e8      	ldr	r0, [r5, #12]
 800768a:	69b1      	ldr	r1, [r6, #24]
 800768c:	68c2      	ldr	r2, [r0, #12]
 800768e:	68cb      	ldr	r3, [r1, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	f040 812d 	bne.w	80078f0 <ai_platform_network_process+0x46c>
 8007696:	6882      	ldr	r2, [r0, #8]
 8007698:	688b      	ldr	r3, [r1, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	f040 8128 	bne.w	80078f0 <ai_platform_network_process+0x46c>
 80076a0:	6842      	ldr	r2, [r0, #4]
 80076a2:	684b      	ldr	r3, [r1, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	f040 8123 	bne.w	80078f0 <ai_platform_network_process+0x46c>
 80076aa:	69ab      	ldr	r3, [r5, #24]
 80076ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b0:	f002 fd08 	bl	800a0c4 <ai_array_get_data_byte_size>
 80076b4:	9002      	str	r0, [sp, #8]
 80076b6:	4628      	mov	r0, r5
 80076b8:	f7fe fdd6 	bl	8006268 <get_tensor_byte_size>
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	4283      	cmp	r3, r0
 80076c0:	f0c0 8116 	bcc.w	80078f0 <ai_platform_network_process+0x46c>
 80076c4:	69ab      	ldr	r3, [r5, #24]
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	f002 fc68 	bl	8009f9c <ai_array_to_buffer_fmt>
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	4058      	eors	r0, r3
 80076d0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80076d4:	f040 8136 	bne.w	8007944 <ai_platform_network_process+0x4c0>
 80076d8:	6873      	ldr	r3, [r6, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 814d 	beq.w	800797a <ai_platform_network_process+0x4f6>
 80076e0:	69b3      	ldr	r3, [r6, #24]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 813f 	beq.w	8007968 <ai_platform_network_process+0x4e4>
 80076ea:	9a01      	ldr	r2, [sp, #4]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bf38      	it	cc
 80076f0:	461a      	movcc	r2, r3
 80076f2:	4628      	mov	r0, r5
 80076f4:	9201      	str	r2, [sp, #4]
 80076f6:	f7fe fdb7 	bl	8006268 <get_tensor_byte_size>
 80076fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80076fe:	69b3      	ldr	r3, [r6, #24]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	fb00 f303 	mul.w	r3, r0, r3
 8007706:	f8ca 300c 	str.w	r3, [sl, #12]
 800770a:	6871      	ldr	r1, [r6, #4]
 800770c:	f8ca 1004 	str.w	r1, [sl, #4]
 8007710:	440b      	add	r3, r1
 8007712:	f848 300b 	str.w	r3, [r8, fp]
 8007716:	69a8      	ldr	r0, [r5, #24]
 8007718:	6803      	ldr	r3, [r0, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	f107 0701 	add.w	r7, r7, #1
 8007720:	f106 061c 	add.w	r6, r6, #28
 8007724:	d445      	bmi.n	80077b2 <ai_platform_network_process+0x32e>
 8007726:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	4419      	add	r1, r3
 800772e:	6081      	str	r1, [r0, #8]
 8007730:	69ab      	ldr	r3, [r5, #24]
 8007732:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007736:	60da      	str	r2, [r3, #12]
 8007738:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800773c:	429f      	cmp	r7, r3
 800773e:	d384      	bcc.n	800764a <ai_platform_network_process+0x1c6>
 8007740:	e03c      	b.n	80077bc <ai_platform_network_process+0x338>
 8007742:	e7fe      	b.n	8007742 <ai_platform_network_process+0x2be>
 8007744:	68ea      	ldr	r2, [r5, #12]
 8007746:	616b      	str	r3, [r5, #20]
 8007748:	f002 0203 	and.w	r2, r2, #3
 800774c:	2a03      	cmp	r2, #3
 800774e:	d11d      	bne.n	800778c <ai_platform_network_process+0x308>
 8007750:	2217      	movs	r2, #23
 8007752:	2112      	movs	r1, #18
 8007754:	f105 0010 	add.w	r0, r5, #16
 8007758:	f000 fa2c 	bl	8007bb4 <core_set_error>
 800775c:	2400      	movs	r4, #0
 800775e:	4620      	mov	r0, r4
 8007760:	b005      	add	sp, #20
 8007762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007766:	f8ba 3000 	ldrh.w	r3, [sl]
 800776a:	429f      	cmp	r7, r3
 800776c:	f4ff aee2 	bcc.w	8007534 <ai_platform_network_process+0xb0>
 8007770:	e757      	b.n	8007622 <ai_platform_network_process+0x19e>
 8007772:	bf00      	nop
 8007774:	a1c00100 	.word	0xa1c00100
 8007778:	e0042000 	.word	0xe0042000
 800777c:	58024000 	.word	0x58024000
 8007780:	f407a5c2 	.word	0xf407a5c2
 8007784:	b5e8b5cd 	.word	0xb5e8b5cd
 8007788:	40023000 	.word	0x40023000
 800778c:	2230      	movs	r2, #48	; 0x30
 800778e:	2111      	movs	r1, #17
 8007790:	f105 0010 	add.w	r0, r5, #16
 8007794:	f000 fa0e 	bl	8007bb4 <core_set_error>
 8007798:	2400      	movs	r4, #0
 800779a:	e7e0      	b.n	800775e <ai_platform_network_process+0x2da>
 800779c:	462c      	mov	r4, r5
 800779e:	e7de      	b.n	800775e <ai_platform_network_process+0x2da>
 80077a0:	9d02      	ldr	r5, [sp, #8]
 80077a2:	2218      	movs	r2, #24
 80077a4:	2112      	movs	r1, #18
 80077a6:	f105 0010 	add.w	r0, r5, #16
 80077aa:	f000 fa03 	bl	8007bb4 <core_set_error>
 80077ae:	2400      	movs	r4, #0
 80077b0:	e7d5      	b.n	800775e <ai_platform_network_process+0x2da>
 80077b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80077b6:	429f      	cmp	r7, r3
 80077b8:	f4ff af47 	bcc.w	800764a <ai_platform_network_process+0x1c6>
 80077bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80077c0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80077c2:	82a3      	strh	r3, [r4, #20]
 80077c4:	4625      	mov	r5, r4
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	f040 808c 	bne.w	80078e4 <ai_platform_network_process+0x460>
 80077cc:	4616      	mov	r6, r2
 80077ce:	4617      	mov	r7, r2
 80077d0:	8aec      	ldrh	r4, [r5, #22]
 80077d2:	429c      	cmp	r4, r3
 80077d4:	bf38      	it	cc
 80077d6:	46ab      	movcc	fp, r5
 80077d8:	d2c1      	bcs.n	800775e <ai_platform_network_process+0x2da>
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d030      	beq.n	8007840 <ai_platform_network_process+0x3bc>
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	e014      	b.n	800780e <ai_platform_network_process+0x38a>
 80077e4:	6882      	ldr	r2, [r0, #8]
 80077e6:	68c5      	ldr	r5, [r0, #12]
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	1b52      	subs	r2, r2, r5
 80077ec:	4413      	add	r3, r2
 80077ee:	6083      	str	r3, [r0, #8]
 80077f0:	698b      	ldr	r3, [r1, #24]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80077fa:	f859 200a 	ldr.w	r2, [r9, sl]
 80077fe:	440b      	add	r3, r1
 8007800:	4293      	cmp	r3, r2
 8007802:	bf24      	itt	cs
 8007804:	68e3      	ldrcs	r3, [r4, #12]
 8007806:	1ad3      	subcs	r3, r2, r3
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	8833      	ldrh	r3, [r6, #0]
 8007810:	4543      	cmp	r3, r8
 8007812:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007816:	d913      	bls.n	8007840 <ai_platform_network_process+0x3bc>
 8007818:	6873      	ldr	r3, [r6, #4]
 800781a:	b18b      	cbz	r3, 8007840 <ai_platform_network_process+0x3bc>
 800781c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007820:	b171      	cbz	r1, 8007840 <ai_platform_network_process+0x3bc>
 8007822:	6988      	ldr	r0, [r1, #24]
 8007824:	68b2      	ldr	r2, [r6, #8]
 8007826:	6803      	ldr	r3, [r0, #0]
 8007828:	f8d2 9000 	ldr.w	r9, [r2]
 800782c:	009d      	lsls	r5, r3, #2
 800782e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007832:	d5d7      	bpl.n	80077e4 <ai_platform_network_process+0x360>
 8007834:	6881      	ldr	r1, [r0, #8]
 8007836:	68a2      	ldr	r2, [r4, #8]
 8007838:	6860      	ldr	r0, [r4, #4]
 800783a:	f002 fb29 	bl	8009e90 <st_int8_copy>
 800783e:	e7da      	b.n	80077f6 <ai_platform_network_process+0x372>
 8007840:	4658      	mov	r0, fp
 8007842:	f000 fa0f 	bl	8007c64 <ai_layers_forward_all>
 8007846:	2f00      	cmp	r7, #0
 8007848:	d03d      	beq.n	80078c6 <ai_platform_network_process+0x442>
 800784a:	2400      	movs	r4, #0
 800784c:	e016      	b.n	800787c <ai_platform_network_process+0x3f8>
 800784e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007852:	f859 100a 	ldr.w	r1, [r9, sl]
 8007856:	4413      	add	r3, r2
 8007858:	428b      	cmp	r3, r1
 800785a:	bf24      	itt	cs
 800785c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007860:	1acb      	subcs	r3, r1, r3
 8007862:	f8c8 3004 	str.w	r3, [r8, #4]
 8007866:	6981      	ldr	r1, [r0, #24]
 8007868:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800786c:	1b52      	subs	r2, r2, r5
 800786e:	4413      	add	r3, r2
 8007870:	608b      	str	r3, [r1, #8]
 8007872:	6983      	ldr	r3, [r0, #24]
 8007874:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	3401      	adds	r4, #1
 800787c:	883b      	ldrh	r3, [r7, #0]
 800787e:	42a3      	cmp	r3, r4
 8007880:	d921      	bls.n	80078c6 <ai_platform_network_process+0x442>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	b1fb      	cbz	r3, 80078c6 <ai_platform_network_process+0x442>
 8007886:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800788a:	b1e0      	cbz	r0, 80078c6 <ai_platform_network_process+0x442>
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	6983      	ldr	r3, [r0, #24]
 8007890:	f8d2 9000 	ldr.w	r9, [r2]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	0092      	lsls	r2, r2, #2
 8007898:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800789c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80078a0:	d5d5      	bpl.n	800784e <ai_platform_network_process+0x3ca>
 80078a2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80078a6:	6898      	ldr	r0, [r3, #8]
 80078a8:	f002 faf2 	bl	8009e90 <st_int8_copy>
 80078ac:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80078b0:	f859 200a 	ldr.w	r2, [r9, sl]
 80078b4:	440b      	add	r3, r1
 80078b6:	4293      	cmp	r3, r2
 80078b8:	bf24      	itt	cs
 80078ba:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80078be:	1ad3      	subcs	r3, r2, r3
 80078c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80078c4:	e7d9      	b.n	800787a <ai_platform_network_process+0x3f6>
 80078c6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80078ca:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80078ce:	3401      	adds	r4, #1
 80078d0:	b2a4      	uxth	r4, r4
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	f8ab 4016 	strh.w	r4, [fp, #22]
 80078d8:	f63f af7f 	bhi.w	80077da <ai_platform_network_process+0x356>
 80078dc:	4620      	mov	r0, r4
 80078de:	b005      	add	sp, #20
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	2a01      	cmp	r2, #1
 80078e6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80078e8:	d03c      	beq.n	8007964 <ai_platform_network_process+0x4e0>
 80078ea:	f106 070c 	add.w	r7, r6, #12
 80078ee:	e76f      	b.n	80077d0 <ai_platform_network_process+0x34c>
 80078f0:	4625      	mov	r5, r4
 80078f2:	2218      	movs	r2, #24
 80078f4:	2113      	movs	r1, #19
 80078f6:	f105 0010 	add.w	r0, r5, #16
 80078fa:	f000 f95b 	bl	8007bb4 <core_set_error>
 80078fe:	2400      	movs	r4, #0
 8007900:	e72d      	b.n	800775e <ai_platform_network_process+0x2da>
 8007902:	9d02      	ldr	r5, [sp, #8]
 8007904:	4604      	mov	r4, r0
 8007906:	2221      	movs	r2, #33	; 0x21
 8007908:	2112      	movs	r1, #18
 800790a:	f105 0010 	add.w	r0, r5, #16
 800790e:	f000 f951 	bl	8007bb4 <core_set_error>
 8007912:	e724      	b.n	800775e <ai_platform_network_process+0x2da>
 8007914:	9d02      	ldr	r5, [sp, #8]
 8007916:	e71b      	b.n	8007750 <ai_platform_network_process+0x2cc>
 8007918:	9d02      	ldr	r5, [sp, #8]
 800791a:	4604      	mov	r4, r0
 800791c:	2217      	movs	r2, #23
 800791e:	2112      	movs	r1, #18
 8007920:	f105 0010 	add.w	r0, r5, #16
 8007924:	f000 f946 	bl	8007bb4 <core_set_error>
 8007928:	e719      	b.n	800775e <ai_platform_network_process+0x2da>
 800792a:	9d02      	ldr	r5, [sp, #8]
 800792c:	2219      	movs	r2, #25
 800792e:	2112      	movs	r1, #18
 8007930:	f105 0010 	add.w	r0, r5, #16
 8007934:	f000 f93e 	bl	8007bb4 <core_set_error>
 8007938:	2400      	movs	r4, #0
 800793a:	e710      	b.n	800775e <ai_platform_network_process+0x2da>
 800793c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007940:	82ab      	strh	r3, [r5, #20]
 8007942:	e740      	b.n	80077c6 <ai_platform_network_process+0x342>
 8007944:	f104 0010 	add.w	r0, r4, #16
 8007948:	2219      	movs	r2, #25
 800794a:	2113      	movs	r1, #19
 800794c:	f000 f932 	bl	8007bb4 <core_set_error>
 8007950:	2400      	movs	r4, #0
 8007952:	e704      	b.n	800775e <ai_platform_network_process+0x2da>
 8007954:	f104 0010 	add.w	r0, r4, #16
 8007958:	2217      	movs	r2, #23
 800795a:	2113      	movs	r1, #19
 800795c:	f000 f92a 	bl	8007bb4 <core_set_error>
 8007960:	4654      	mov	r4, sl
 8007962:	e6fc      	b.n	800775e <ai_platform_network_process+0x2da>
 8007964:	2700      	movs	r7, #0
 8007966:	e733      	b.n	80077d0 <ai_platform_network_process+0x34c>
 8007968:	4625      	mov	r5, r4
 800796a:	2221      	movs	r2, #33	; 0x21
 800796c:	4604      	mov	r4, r0
 800796e:	2113      	movs	r1, #19
 8007970:	f105 0010 	add.w	r0, r5, #16
 8007974:	f000 f91e 	bl	8007bb4 <core_set_error>
 8007978:	e6f1      	b.n	800775e <ai_platform_network_process+0x2da>
 800797a:	4625      	mov	r5, r4
 800797c:	2217      	movs	r2, #23
 800797e:	4604      	mov	r4, r0
 8007980:	2113      	movs	r1, #19
 8007982:	f105 0010 	add.w	r0, r5, #16
 8007986:	f000 f915 	bl	8007bb4 <core_set_error>
 800798a:	e6e8      	b.n	800775e <ai_platform_network_process+0x2da>

0800798c <ai_platform_observer_register_s>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	b1f8      	cbz	r0, 80079d0 <ai_platform_observer_register_s+0x44>
 8007990:	4b42      	ldr	r3, [pc, #264]	; (8007a9c <ai_platform_observer_register_s+0x110>)
 8007992:	6802      	ldr	r2, [r0, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	4604      	mov	r4, r0
 8007998:	d11a      	bne.n	80079d0 <ai_platform_observer_register_s+0x44>
 800799a:	460d      	mov	r5, r1
 800799c:	f7fe fd5e 	bl	800645c <_ai_platform_acquire_crc>
 80079a0:	4b3f      	ldr	r3, [pc, #252]	; (8007aa0 <ai_platform_observer_register_s+0x114>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ac:	d03b      	beq.n	8007a26 <ai_platform_observer_register_s+0x9a>
 80079ae:	4a3d      	ldr	r2, [pc, #244]	; (8007aa4 <ai_platform_observer_register_s+0x118>)
 80079b0:	2301      	movs	r3, #1
 80079b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80079b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1fb      	bne.n	80079b6 <ai_platform_observer_register_s+0x2a>
 80079be:	4b3a      	ldr	r3, [pc, #232]	; (8007aa8 <ai_platform_observer_register_s+0x11c>)
 80079c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80079c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80079c8:	4b38      	ldr	r3, [pc, #224]	; (8007aac <ai_platform_observer_register_s+0x120>)
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d037      	beq.n	8007a3e <ai_platform_observer_register_s+0xb2>
 80079ce:	e7fe      	b.n	80079ce <ai_platform_observer_register_s+0x42>
 80079d0:	f7fe fd44 	bl	800645c <_ai_platform_acquire_crc>
 80079d4:	4b32      	ldr	r3, [pc, #200]	; (8007aa0 <ai_platform_observer_register_s+0x114>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e0:	d010      	beq.n	8007a04 <ai_platform_observer_register_s+0x78>
 80079e2:	4a30      	ldr	r2, [pc, #192]	; (8007aa4 <ai_platform_observer_register_s+0x118>)
 80079e4:	2301      	movs	r3, #1
 80079e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80079ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1fb      	bne.n	80079ea <ai_platform_observer_register_s+0x5e>
 80079f2:	4b2d      	ldr	r3, [pc, #180]	; (8007aa8 <ai_platform_observer_register_s+0x11c>)
 80079f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80079f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80079fc:	4b2b      	ldr	r3, [pc, #172]	; (8007aac <ai_platform_observer_register_s+0x120>)
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d00d      	beq.n	8007a1e <ai_platform_observer_register_s+0x92>
 8007a02:	e7fe      	b.n	8007a02 <ai_platform_observer_register_s+0x76>
 8007a04:	4a2a      	ldr	r2, [pc, #168]	; (8007ab0 <ai_platform_observer_register_s+0x124>)
 8007a06:	2301      	movs	r3, #1
 8007a08:	6093      	str	r3, [r2, #8]
 8007a0a:	6893      	ldr	r3, [r2, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1fc      	bne.n	8007a0a <ai_platform_observer_register_s+0x7e>
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <ai_platform_observer_register_s+0x11c>)
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	4b25      	ldr	r3, [pc, #148]	; (8007aac <ai_platform_observer_register_s+0x120>)
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d000      	beq.n	8007a1e <ai_platform_observer_register_s+0x92>
 8007a1c:	e7fe      	b.n	8007a1c <ai_platform_observer_register_s+0x90>
 8007a1e:	f7fe fd1f 	bl	8006460 <_ai_platform_release_crc>
 8007a22:	2000      	movs	r0, #0
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <ai_platform_observer_register_s+0x124>)
 8007a28:	2301      	movs	r3, #1
 8007a2a:	6093      	str	r3, [r2, #8]
 8007a2c:	6893      	ldr	r3, [r2, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1fc      	bne.n	8007a2c <ai_platform_observer_register_s+0xa0>
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <ai_platform_observer_register_s+0x11c>)
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <ai_platform_observer_register_s+0x120>)
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d11d      	bne.n	8007a7a <ai_platform_observer_register_s+0xee>
 8007a3e:	f7fe fd0f 	bl	8006460 <_ai_platform_release_crc>
 8007a42:	b1dd      	cbz	r5, 8007a7c <ai_platform_observer_register_s+0xf0>
 8007a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a46:	bb03      	cbnz	r3, 8007a8a <ai_platform_observer_register_s+0xfe>
 8007a48:	81eb      	strh	r3, [r5, #14]
 8007a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	e006      	b.n	8007a5e <ai_platform_observer_register_s+0xd2>
 8007a50:	81e9      	strh	r1, [r5, #14]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	b281      	uxth	r1, r0
 8007a58:	d004      	beq.n	8007a64 <ai_platform_observer_register_s+0xd8>
 8007a5a:	b11a      	cbz	r2, 8007a64 <ai_platform_observer_register_s+0xd8>
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	1c48      	adds	r0, r1, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1f5      	bne.n	8007a50 <ai_platform_observer_register_s+0xc4>
 8007a64:	7a2b      	ldrb	r3, [r5, #8]
 8007a66:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <ai_platform_observer_register_s+0x128>)
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a6e:	81a9      	strh	r1, [r5, #12]
 8007a70:	60ab      	str	r3, [r5, #8]
 8007a72:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 8007a76:	2001      	movs	r0, #1
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	e7fe      	b.n	8007a7a <ai_platform_observer_register_s+0xee>
 8007a7c:	2110      	movs	r1, #16
 8007a7e:	2211      	movs	r2, #17
 8007a80:	1860      	adds	r0, r4, r1
 8007a82:	f000 f897 	bl	8007bb4 <core_set_error>
 8007a86:	4628      	mov	r0, r5
 8007a88:	bd38      	pop	{r3, r4, r5, pc}
 8007a8a:	2240      	movs	r2, #64	; 0x40
 8007a8c:	2111      	movs	r1, #17
 8007a8e:	f104 0010 	add.w	r0, r4, #16
 8007a92:	f000 f88f 	bl	8007bb4 <core_set_error>
 8007a96:	2000      	movs	r0, #0
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	a1c00100 	.word	0xa1c00100
 8007aa0:	e0042000 	.word	0xe0042000
 8007aa4:	58024000 	.word	0x58024000
 8007aa8:	f407a5c2 	.word	0xf407a5c2
 8007aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ab0:	40023000 	.word	0x40023000
 8007ab4:	08006345 	.word	0x08006345

08007ab8 <ai_platform_observer_unregister_s>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	b1f8      	cbz	r0, 8007afc <ai_platform_observer_unregister_s+0x44>
 8007abc:	4b33      	ldr	r3, [pc, #204]	; (8007b8c <ai_platform_observer_unregister_s+0xd4>)
 8007abe:	6802      	ldr	r2, [r0, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	d11a      	bne.n	8007afc <ai_platform_observer_unregister_s+0x44>
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	f7fe fcc8 	bl	800645c <_ai_platform_acquire_crc>
 8007acc:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <ai_platform_observer_unregister_s+0xd8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d03b      	beq.n	8007b52 <ai_platform_observer_unregister_s+0x9a>
 8007ada:	4a2e      	ldr	r2, [pc, #184]	; (8007b94 <ai_platform_observer_unregister_s+0xdc>)
 8007adc:	2301      	movs	r3, #1
 8007ade:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007ae2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1fb      	bne.n	8007ae2 <ai_platform_observer_unregister_s+0x2a>
 8007aea:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <ai_platform_observer_unregister_s+0xe0>)
 8007aec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007af0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007af4:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <ai_platform_observer_unregister_s+0xe4>)
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d037      	beq.n	8007b6a <ai_platform_observer_unregister_s+0xb2>
 8007afa:	e7fe      	b.n	8007afa <ai_platform_observer_unregister_s+0x42>
 8007afc:	f7fe fcae 	bl	800645c <_ai_platform_acquire_crc>
 8007b00:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <ai_platform_observer_unregister_s+0xd8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b0c:	d010      	beq.n	8007b30 <ai_platform_observer_unregister_s+0x78>
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <ai_platform_observer_unregister_s+0xdc>)
 8007b10:	2301      	movs	r3, #1
 8007b12:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b16:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1fb      	bne.n	8007b16 <ai_platform_observer_unregister_s+0x5e>
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <ai_platform_observer_unregister_s+0xe0>)
 8007b20:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007b24:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <ai_platform_observer_unregister_s+0xe4>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d00d      	beq.n	8007b4a <ai_platform_observer_unregister_s+0x92>
 8007b2e:	e7fe      	b.n	8007b2e <ai_platform_observer_unregister_s+0x76>
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <ai_platform_observer_unregister_s+0xe8>)
 8007b32:	2301      	movs	r3, #1
 8007b34:	6093      	str	r3, [r2, #8]
 8007b36:	6893      	ldr	r3, [r2, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1fc      	bne.n	8007b36 <ai_platform_observer_unregister_s+0x7e>
 8007b3c:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <ai_platform_observer_unregister_s+0xe0>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <ai_platform_observer_unregister_s+0xe4>)
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d000      	beq.n	8007b4a <ai_platform_observer_unregister_s+0x92>
 8007b48:	e7fe      	b.n	8007b48 <ai_platform_observer_unregister_s+0x90>
 8007b4a:	f7fe fc89 	bl	8006460 <_ai_platform_release_crc>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <ai_platform_observer_unregister_s+0xe8>)
 8007b54:	2301      	movs	r3, #1
 8007b56:	6093      	str	r3, [r2, #8]
 8007b58:	6893      	ldr	r3, [r2, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1fc      	bne.n	8007b58 <ai_platform_observer_unregister_s+0xa0>
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <ai_platform_observer_unregister_s+0xe0>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <ai_platform_observer_unregister_s+0xe4>)
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d107      	bne.n	8007b7a <ai_platform_observer_unregister_s+0xc2>
 8007b6a:	f7fe fc79 	bl	8006460 <_ai_platform_release_crc>
 8007b6e:	b12d      	cbz	r5, 8007b7c <ai_platform_observer_unregister_s+0xc4>
 8007b70:	2300      	movs	r3, #0
 8007b72:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8007b76:	2001      	movs	r0, #1
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	e7fe      	b.n	8007b7a <ai_platform_observer_unregister_s+0xc2>
 8007b7c:	2110      	movs	r1, #16
 8007b7e:	2211      	movs	r2, #17
 8007b80:	1860      	adds	r0, r4, r1
 8007b82:	f000 f817 	bl	8007bb4 <core_set_error>
 8007b86:	4628      	mov	r0, r5
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	bf00      	nop
 8007b8c:	a1c00100 	.word	0xa1c00100
 8007b90:	e0042000 	.word	0xe0042000
 8007b94:	58024000 	.word	0x58024000
 8007b98:	f407a5c2 	.word	0xf407a5c2
 8007b9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ba0:	40023000 	.word	0x40023000

08007ba4 <core_init>:
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	4770      	bx	lr

08007ba8 <core_get_error>:
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2200      	movs	r2, #0
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop

08007bb4 <core_set_error>:
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	7800      	ldrb	r0, [r0, #0]
 8007bb8:	b108      	cbz	r0, 8007bbe <core_set_error+0xa>
 8007bba:	2000      	movs	r0, #0
 8007bbc:	4770      	bx	lr
 8007bbe:	7019      	strb	r1, [r3, #0]
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	f362 211f 	bfi	r1, r2, #8, #24
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	6019      	str	r1, [r3, #0]
 8007bca:	4770      	bx	lr

08007bcc <ai_check_custom_types>:
 8007bcc:	b082      	sub	sp, #8
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <ai_check_custom_types+0x50>)
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	b118      	cbz	r0, 8007bdc <ai_check_custom_types+0x10>
 8007bd4:	7803      	ldrb	r3, [r0, #0]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d002      	beq.n	8007be0 <ai_check_custom_types+0x14>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	b002      	add	sp, #8
 8007bde:	4770      	bx	lr
 8007be0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d004      	beq.n	8007bf2 <ai_check_custom_types+0x26>
 8007be8:	2001      	movs	r0, #1
 8007bea:	f080 0001 	eor.w	r0, r0, #1
 8007bee:	b002      	add	sp, #8
 8007bf0:	4770      	bx	lr
 8007bf2:	7842      	ldrb	r2, [r0, #1]
 8007bf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	f100 0001 	add.w	r0, r0, #1
 8007bfe:	d1f3      	bne.n	8007be8 <ai_check_custom_types+0x1c>
 8007c00:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007c04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d1ed      	bne.n	8007be8 <ai_check_custom_types+0x1c>
 8007c0c:	7842      	ldrb	r2, [r0, #1]
 8007c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d1e8      	bne.n	8007be8 <ai_check_custom_types+0x1c>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e7e7      	b.n	8007bea <ai_check_custom_types+0x1e>
 8007c1a:	bf00      	nop
 8007c1c:	84048403 	.word	0x84048403

08007c20 <ai_layers_init_all>:
 8007c20:	4601      	mov	r1, r0
 8007c22:	2000      	movs	r0, #0
 8007c24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007c26:	b143      	cbz	r3, 8007c3a <ai_layers_init_all+0x1a>
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	60d9      	str	r1, [r3, #12]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	f100 0001 	add.w	r0, r0, #1
 8007c32:	d002      	beq.n	8007c3a <ai_layers_init_all+0x1a>
 8007c34:	b10a      	cbz	r2, 8007c3a <ai_layers_init_all+0x1a>
 8007c36:	4613      	mov	r3, r2
 8007c38:	e7f5      	b.n	8007c26 <ai_layers_init_all+0x6>
 8007c3a:	4770      	bx	lr

08007c3c <ai_layers_post_init_all>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007c40:	2500      	movs	r5, #0
 8007c42:	b16c      	cbz	r4, 8007c60 <ai_layers_post_init_all+0x24>
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d504      	bpl.n	8007c54 <ai_layers_post_init_all+0x18>
 8007c4a:	6a23      	ldr	r3, [r4, #32]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	b10b      	cbz	r3, 8007c54 <ai_layers_post_init_all+0x18>
 8007c50:	4798      	blx	r3
 8007c52:	3501      	adds	r5, #1
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	42a3      	cmp	r3, r4
 8007c58:	d002      	beq.n	8007c60 <ai_layers_post_init_all+0x24>
 8007c5a:	b10b      	cbz	r3, 8007c60 <ai_layers_post_init_all+0x24>
 8007c5c:	461c      	mov	r4, r3
 8007c5e:	e7f0      	b.n	8007c42 <ai_layers_post_init_all+0x6>
 8007c60:	4628      	mov	r0, r5
 8007c62:	bd38      	pop	{r3, r4, r5, pc}

08007c64 <ai_layers_forward_all>:
 8007c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c68:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	f1b8 0f00 	cmp.w	r8, #0
 8007c72:	d02b      	beq.n	8007ccc <ai_layers_forward_all+0x68>
 8007c74:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007c76:	6381      	str	r1, [r0, #56]	; 0x38
 8007c78:	b321      	cbz	r1, 8007cc4 <ai_layers_forward_all+0x60>
 8007c7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	47c0      	blx	r8
 8007c80:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007c82:	b1fe      	cbz	r6, 8007cc4 <ai_layers_forward_all+0x60>
 8007c84:	2700      	movs	r7, #0
 8007c86:	4631      	mov	r1, r6
 8007c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c8a:	2002      	movs	r0, #2
 8007c8c:	47c0      	blx	r8
 8007c8e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007c90:	4628      	mov	r0, r5
 8007c92:	696b      	ldr	r3, [r5, #20]
 8007c94:	4798      	blx	r3
 8007c96:	692e      	ldr	r6, [r5, #16]
 8007c98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c9c:	42b5      	cmp	r5, r6
 8007c9e:	f04f 0003 	mov.w	r0, #3
 8007ca2:	d007      	beq.n	8007cb4 <ai_layers_forward_all+0x50>
 8007ca4:	47c0      	blx	r8
 8007ca6:	3701      	adds	r7, #1
 8007ca8:	63a6      	str	r6, [r4, #56]	; 0x38
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d1eb      	bne.n	8007c86 <ai_layers_forward_all+0x22>
 8007cae:	4638      	mov	r0, r7
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	2003      	movs	r0, #3
 8007cb6:	47c0      	blx	r8
 8007cb8:	2300      	movs	r3, #0
 8007cba:	3701      	adds	r7, #1
 8007cbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	2700      	movs	r7, #0
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007cce:	6385      	str	r5, [r0, #56]	; 0x38
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	d0f7      	beq.n	8007cc4 <ai_layers_forward_all+0x60>
 8007cd4:	4647      	mov	r7, r8
 8007cd6:	696b      	ldr	r3, [r5, #20]
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4798      	blx	r3
 8007cdc:	462b      	mov	r3, r5
 8007cde:	692d      	ldr	r5, [r5, #16]
 8007ce0:	429d      	cmp	r5, r3
 8007ce2:	d004      	beq.n	8007cee <ai_layers_forward_all+0x8a>
 8007ce4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007ce6:	3701      	adds	r7, #1
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	d1f4      	bne.n	8007cd6 <ai_layers_forward_all+0x72>
 8007cec:	e7df      	b.n	8007cae <ai_layers_forward_all+0x4a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cf2:	3701      	adds	r7, #1
 8007cf4:	e7db      	b.n	8007cae <ai_layers_forward_all+0x4a>
 8007cf6:	bf00      	nop

08007cf8 <ai_layers_destroy_all>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	b16c      	cbz	r4, 8007d1c <ai_layers_destroy_all+0x24>
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	075b      	lsls	r3, r3, #29
 8007d04:	d504      	bpl.n	8007d10 <ai_layers_destroy_all+0x18>
 8007d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d08:	4620      	mov	r0, r4
 8007d0a:	b10b      	cbz	r3, 8007d10 <ai_layers_destroy_all+0x18>
 8007d0c:	4798      	blx	r3
 8007d0e:	3501      	adds	r5, #1
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	d002      	beq.n	8007d1c <ai_layers_destroy_all+0x24>
 8007d16:	b10b      	cbz	r3, 8007d1c <ai_layers_destroy_all+0x24>
 8007d18:	461c      	mov	r4, r3
 8007d1a:	e7f0      	b.n	8007cfe <ai_layers_destroy_all+0x6>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}

08007d20 <forward_dense>:
 8007d20:	6983      	ldr	r3, [r0, #24]
 8007d22:	881a      	ldrh	r2, [r3, #0]
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	f000 8181 	beq.w	800802c <forward_dense+0x30c>
 8007d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2e:	ed2d 8b02 	vpush	{d8}
 8007d32:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007d36:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007d3a:	b095      	sub	sp, #84	; 0x54
 8007d3c:	b105      	cbz	r5, 8007d40 <forward_dense+0x20>
 8007d3e:	682d      	ldr	r5, [r5, #0]
 8007d40:	2a01      	cmp	r2, #1
 8007d42:	f000 828f 	beq.w	8008264 <forward_dense+0x544>
 8007d46:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007d4a:	b106      	cbz	r6, 8007d4e <forward_dense+0x2e>
 8007d4c:	6836      	ldr	r6, [r6, #0]
 8007d4e:	2a02      	cmp	r2, #2
 8007d50:	f000 816e 	beq.w	8008030 <forward_dense+0x310>
 8007d54:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8274 	beq.w	8008248 <forward_dense+0x528>
 8007d60:	4619      	mov	r1, r3
 8007d62:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8007d66:	6809      	ldr	r1, [r1, #0]
 8007d68:	910d      	str	r1, [sp, #52]	; 0x34
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	f240 826e 	bls.w	800824c <forward_dense+0x52c>
 8007d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d76:	460b      	mov	r3, r1
 8007d78:	68e8      	ldr	r0, [r5, #12]
 8007d7a:	68f7      	ldr	r7, [r6, #12]
 8007d7c:	6840      	ldr	r0, [r0, #4]
 8007d7e:	6999      	ldr	r1, [r3, #24]
 8007d80:	9013      	str	r0, [sp, #76]	; 0x4c
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	680b      	ldr	r3, [r1, #0]
 8007d86:	9012      	str	r0, [sp, #72]	; 0x48
 8007d88:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007d8c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007d90:	fb00 f404 	mul.w	r4, r0, r4
 8007d94:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007d98:	fa4e f000 	asr.w	r0, lr, r0
 8007d9c:	2a03      	cmp	r2, #3
 8007d9e:	9010      	str	r0, [sp, #64]	; 0x40
 8007da0:	f000 825d 	beq.w	800825e <forward_dense+0x53e>
 8007da4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007da8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	f000 8246 	beq.w	800823e <forward_dense+0x51e>
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	f000 8242 	beq.w	800823e <forward_dense+0x51e>
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007dc0:	f000 822c 	beq.w	800821c <forward_dense+0x4fc>
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	f000 8229 	beq.w	800821c <forward_dense+0x4fc>
 8007dca:	f04f 0b00 	mov.w	fp, #0
 8007dce:	69b2      	ldr	r2, [r6, #24]
 8007dd0:	69ab      	ldr	r3, [r5, #24]
 8007dd2:	6891      	ldr	r1, [r2, #8]
 8007dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	6952      	ldr	r2, [r2, #20]
 8007dda:	9106      	str	r1, [sp, #24]
 8007ddc:	fb07 f404 	mul.w	r4, r7, r4
 8007de0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de6:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007dea:	4281      	cmp	r1, r0
 8007dec:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007df0:	900e      	str	r0, [sp, #56]	; 0x38
 8007df2:	940c      	str	r4, [sp, #48]	; 0x30
 8007df4:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007df8:	f080 8113 	bcs.w	8008022 <forward_dense+0x302>
 8007dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dfe:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800804c <forward_dense+0x32c>
 8007e02:	f021 0201 	bic.w	r2, r1, #1
 8007e06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007e0a:	9204      	str	r2, [sp, #16]
 8007e0c:	f001 0201 	and.w	r2, r1, #1
 8007e10:	08c8      	lsrs	r0, r1, #3
 8007e12:	9208      	str	r2, [sp, #32]
 8007e14:	008a      	lsls	r2, r1, #2
 8007e16:	f001 0a07 	and.w	sl, r1, #7
 8007e1a:	920f      	str	r2, [sp, #60]	; 0x3c
 8007e1c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007e20:	3320      	adds	r3, #32
 8007e22:	465c      	mov	r4, fp
 8007e24:	9007      	str	r0, [sp, #28]
 8007e26:	46cb      	mov	fp, r9
 8007e28:	9205      	str	r2, [sp, #20]
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	46c1      	mov	r9, r8
 8007e2e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	3b20      	subs	r3, #32
 8007e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e40:	b10b      	cbz	r3, 8007e46 <forward_dense+0x126>
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	f000 81da 	beq.w	8008200 <forward_dense+0x4e0>
 8007e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e4e:	2904      	cmp	r1, #4
 8007e50:	9906      	ldr	r1, [sp, #24]
 8007e52:	f000 80fd 	beq.w	8008050 <forward_dense+0x330>
 8007e56:	4549      	cmp	r1, r9
 8007e58:	f080 80d2 	bcs.w	8008000 <forward_dense+0x2e0>
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	9907      	ldr	r1, [sp, #28]
 8007e60:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007e64:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007e68:	1c4e      	adds	r6, r1, #1
 8007e6a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007e6e:	4694      	mov	ip, r2
 8007e70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e72:	468e      	mov	lr, r1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80de 	beq.w	8008036 <forward_dense+0x316>
 8007e7a:	ecf3 2a01 	vldmia	r3!, {s5}
 8007e7e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800804c <forward_dense+0x32c>
 8007e82:	f1be 0f00 	cmp.w	lr, #0
 8007e86:	f000 80de 	beq.w	8008046 <forward_dense+0x326>
 8007e8a:	f10c 0108 	add.w	r1, ip, #8
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007e94:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007e98:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007e9c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007ea0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007ea4:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007ea8:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007eac:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007eb0:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007eb4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eb8:	edd5 7a00 	vldr	s15, [r5]
 8007ebc:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007ec0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ec4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007ec8:	ed95 3a00 	vldr	s6, [r5]
 8007ecc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007ed0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007ed4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ed8:	3108      	adds	r1, #8
 8007eda:	edd5 3a00 	vldr	s7, [r5]
 8007ede:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007ee2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ee6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eea:	3020      	adds	r0, #32
 8007eec:	ed95 4a00 	vldr	s8, [r5]
 8007ef0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007ef4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007ef8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007efc:	edd5 4a00 	vldr	s9, [r5]
 8007f00:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007f04:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f0c:	ed95 5a00 	vldr	s10, [r5]
 8007f10:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007f14:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f1c:	edd5 5a00 	vldr	s11, [r5]
 8007f20:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007f24:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f2c:	428e      	cmp	r6, r1
 8007f2e:	ed95 6a00 	vldr	s12, [r5]
 8007f32:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f3a:	d1a9      	bne.n	8007e90 <forward_dense+0x170>
 8007f3c:	f1a6 0108 	sub.w	r1, r6, #8
 8007f40:	4650      	mov	r0, sl
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	d04a      	beq.n	8007fdc <forward_dense+0x2bc>
 8007f46:	780d      	ldrb	r5, [r1, #0]
 8007f48:	edd0 6a00 	vldr	s13, [r0]
 8007f4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f50:	edd5 7a00 	vldr	s15, [r5]
 8007f54:	2a01      	cmp	r2, #1
 8007f56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f5a:	d03f      	beq.n	8007fdc <forward_dense+0x2bc>
 8007f5c:	784d      	ldrb	r5, [r1, #1]
 8007f5e:	edd0 6a01 	vldr	s13, [r0, #4]
 8007f62:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f66:	edd5 7a00 	vldr	s15, [r5]
 8007f6a:	2a02      	cmp	r2, #2
 8007f6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f70:	d034      	beq.n	8007fdc <forward_dense+0x2bc>
 8007f72:	788d      	ldrb	r5, [r1, #2]
 8007f74:	edd0 6a02 	vldr	s13, [r0, #8]
 8007f78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f7c:	edd5 7a00 	vldr	s15, [r5]
 8007f80:	2a03      	cmp	r2, #3
 8007f82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f86:	d029      	beq.n	8007fdc <forward_dense+0x2bc>
 8007f88:	78cd      	ldrb	r5, [r1, #3]
 8007f8a:	edd0 6a03 	vldr	s13, [r0, #12]
 8007f8e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f92:	edd5 7a00 	vldr	s15, [r5]
 8007f96:	2a04      	cmp	r2, #4
 8007f98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f9c:	d01e      	beq.n	8007fdc <forward_dense+0x2bc>
 8007f9e:	790d      	ldrb	r5, [r1, #4]
 8007fa0:	edd0 6a04 	vldr	s13, [r0, #16]
 8007fa4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007fa8:	edd5 7a00 	vldr	s15, [r5]
 8007fac:	2a05      	cmp	r2, #5
 8007fae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fb2:	d013      	beq.n	8007fdc <forward_dense+0x2bc>
 8007fb4:	794d      	ldrb	r5, [r1, #5]
 8007fb6:	edd0 6a05 	vldr	s13, [r0, #20]
 8007fba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007fbe:	edd5 7a00 	vldr	s15, [r5]
 8007fc2:	2a06      	cmp	r2, #6
 8007fc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fc8:	d008      	beq.n	8007fdc <forward_dense+0x2bc>
 8007fca:	7989      	ldrb	r1, [r1, #6]
 8007fcc:	edd0 7a06 	vldr	s15, [r0, #24]
 8007fd0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007fd4:	edd1 6a00 	vldr	s13, [r1]
 8007fd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fdc:	44dc      	add	ip, fp
 8007fde:	445e      	add	r6, fp
 8007fe0:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007fe4:	eca7 7a01 	vstmia	r7!, {s14}
 8007fe8:	454f      	cmp	r7, r9
 8007fea:	f4ff af43 	bcc.w	8007e74 <forward_dense+0x154>
 8007fee:	9a06      	ldr	r2, [sp, #24]
 8007ff0:	eba9 0302 	sub.w	r3, r9, r2
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	18d3      	adds	r3, r2, r3
 8007ffe:	9306      	str	r3, [sp, #24]
 8008000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008002:	9a05      	ldr	r2, [sp, #20]
 8008004:	4499      	add	r9, r3
 8008006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008008:	441a      	add	r2, r3
 800800a:	9205      	str	r2, [sp, #20]
 800800c:	9a02      	ldr	r2, [sp, #8]
 800800e:	441a      	add	r2, r3
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	441a      	add	r2, r3
 8008016:	9204      	str	r2, [sp, #16]
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800801c:	4293      	cmp	r3, r2
 800801e:	f4ff af08 	bcc.w	8007e32 <forward_dense+0x112>
 8008022:	b015      	add	sp, #84	; 0x54
 8008024:	ecbd 8b02 	vpop	{d8}
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	6853      	ldr	r3, [r2, #4]
 800802e:	deff      	udf	#255	; 0xff
 8008030:	2300      	movs	r3, #0
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	deff      	udf	#255	; 0xff
 8008036:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800804c <forward_dense+0x32c>
 800803a:	eef0 2a48 	vmov.f32	s5, s16
 800803e:	f1be 0f00 	cmp.w	lr, #0
 8008042:	f47f af22 	bne.w	8007e8a <forward_dense+0x16a>
 8008046:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008048:	4661      	mov	r1, ip
 800804a:	e77a      	b.n	8007f42 <forward_dense+0x222>
 800804c:	00000000 	.word	0x00000000
 8008050:	4549      	cmp	r1, r9
 8008052:	d2d5      	bcs.n	8008000 <forward_dense+0x2e0>
 8008054:	9807      	ldr	r0, [sp, #28]
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	9904      	ldr	r1, [sp, #16]
 800805a:	f100 0c01 	add.w	ip, r0, #1
 800805e:	3901      	subs	r1, #1
 8008060:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8008064:	9109      	str	r1, [sp, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 80b2 	beq.w	80081d0 <forward_dense+0x4b0>
 800806c:	9907      	ldr	r1, [sp, #28]
 800806e:	ecf3 2a01 	vldmia	r3!, {s5}
 8008072:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800804c <forward_dense+0x32c>
 8008076:	2900      	cmp	r1, #0
 8008078:	f000 80b2 	beq.w	80081e0 <forward_dense+0x4c0>
 800807c:	9902      	ldr	r1, [sp, #8]
 800807e:	1d10      	adds	r0, r2, #4
 8008080:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8008084:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8008088:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800808c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8008090:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8008094:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8008098:	ed11 5a04 	vldr	s10, [r1, #-16]
 800809c:	ed51 5a03 	vldr	s11, [r1, #-12]
 80080a0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80080a4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80080a8:	f006 070f 	and.w	r7, r6, #15
 80080ac:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80080b0:	edd7 7a00 	vldr	s15, [r7]
 80080b4:	0936      	lsrs	r6, r6, #4
 80080b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80080ba:	ed96 3a00 	vldr	s6, [r6]
 80080be:	ee67 7a82 	vmul.f32	s15, s15, s4
 80080c2:	092e      	lsrs	r6, r5, #4
 80080c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80080c8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80080cc:	f005 050f 	and.w	r5, r5, #15
 80080d0:	edd6 3a00 	vldr	s7, [r6]
 80080d4:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80080d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80080dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80080e0:	0937      	lsrs	r7, r6, #4
 80080e2:	ed95 4a00 	vldr	s8, [r5]
 80080e6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80080ea:	eee4 7a24 	vfma.f32	s15, s8, s9
 80080ee:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80080f2:	f006 060f 	and.w	r6, r6, #15
 80080f6:	edd7 4a00 	vldr	s9, [r7]
 80080fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80080fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008102:	3004      	adds	r0, #4
 8008104:	ed96 5a00 	vldr	s10, [r6]
 8008108:	092e      	lsrs	r6, r5, #4
 800810a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800810e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008112:	f005 050f 	and.w	r5, r5, #15
 8008116:	edd6 5a00 	vldr	s11, [r6]
 800811a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800811e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008122:	4584      	cmp	ip, r0
 8008124:	ed95 6a00 	vldr	s12, [r5]
 8008128:	eee6 7a26 	vfma.f32	s15, s12, s13
 800812c:	f101 0120 	add.w	r1, r1, #32
 8008130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008134:	d1a4      	bne.n	8008080 <forward_dense+0x360>
 8008136:	f8dd e014 	ldr.w	lr, [sp, #20]
 800813a:	f1ac 0804 	sub.w	r8, ip, #4
 800813e:	9904      	ldr	r1, [sp, #16]
 8008140:	458e      	cmp	lr, r1
 8008142:	d22a      	bcs.n	800819a <forward_dense+0x47a>
 8008144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008146:	eba1 070e 	sub.w	r7, r1, lr
 800814a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800814e:	f10e 0008 	add.w	r0, lr, #8
 8008152:	f108 36ff 	add.w	r6, r8, #4294967295
 8008156:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800815a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800815e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008162:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008166:	f001 050f 	and.w	r5, r1, #15
 800816a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800816e:	edd5 7a00 	vldr	s15, [r5]
 8008172:	0909      	lsrs	r1, r1, #4
 8008174:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008178:	ed91 6a00 	vldr	s12, [r1]
 800817c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008180:	42b7      	cmp	r7, r6
 8008182:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008186:	f100 0008 	add.w	r0, r0, #8
 800818a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800818e:	d1e4      	bne.n	800815a <forward_dense+0x43a>
 8008190:	f10a 0a01 	add.w	sl, sl, #1
 8008194:	44d0      	add	r8, sl
 8008196:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800819a:	9908      	ldr	r1, [sp, #32]
 800819c:	b321      	cbz	r1, 80081e8 <forward_dense+0x4c8>
 800819e:	f898 1000 	ldrb.w	r1, [r8]
 80081a2:	edde 7a00 	vldr	s15, [lr]
 80081a6:	0909      	lsrs	r1, r1, #4
 80081a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80081ac:	edd1 6a00 	vldr	s13, [r1]
 80081b0:	9903      	ldr	r1, [sp, #12]
 80081b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081b6:	445a      	add	r2, fp
 80081b8:	44dc      	add	ip, fp
 80081ba:	ee72 2a87 	vadd.f32	s5, s5, s14
 80081be:	ece1 2a01 	vstmia	r1!, {s5}
 80081c2:	4589      	cmp	r9, r1
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	f67f af12 	bls.w	8007fee <forward_dense+0x2ce>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f47f af4e 	bne.w	800806c <forward_dense+0x34c>
 80081d0:	9907      	ldr	r1, [sp, #28]
 80081d2:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800804c <forward_dense+0x32c>
 80081d6:	eef0 2a48 	vmov.f32	s5, s16
 80081da:	2900      	cmp	r1, #0
 80081dc:	f47f af4e 	bne.w	800807c <forward_dense+0x35c>
 80081e0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80081e4:	4690      	mov	r8, r2
 80081e6:	e7aa      	b.n	800813e <forward_dense+0x41e>
 80081e8:	9903      	ldr	r1, [sp, #12]
 80081ea:	ee32 7a87 	vadd.f32	s14, s5, s14
 80081ee:	445a      	add	r2, fp
 80081f0:	eca1 7a01 	vstmia	r1!, {s14}
 80081f4:	4549      	cmp	r1, r9
 80081f6:	9103      	str	r1, [sp, #12]
 80081f8:	44dc      	add	ip, fp
 80081fa:	f4ff af34 	bcc.w	8008066 <forward_dense+0x346>
 80081fe:	e6f6      	b.n	8007fee <forward_dense+0x2ce>
 8008200:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008202:	9d06      	ldr	r5, [sp, #24]
 8008204:	9101      	str	r1, [sp, #4]
 8008206:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008208:	9100      	str	r1, [sp, #0]
 800820a:	4628      	mov	r0, r5
 800820c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800820e:	f001 fcbf 	bl	8009b90 <forward_lite_dense_if32of32wf32>
 8008212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008214:	462b      	mov	r3, r5
 8008216:	4413      	add	r3, r2
 8008218:	9306      	str	r3, [sp, #24]
 800821a:	e6f1      	b.n	8008000 <forward_dense+0x2e0>
 800821c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008220:	f1b9 0f00 	cmp.w	r9, #0
 8008224:	d016      	beq.n	8008254 <forward_dense+0x534>
 8008226:	e9d9 0100 	ldrd	r0, r1, [r9]
 800822a:	f001 ff23 	bl	800a074 <ai_array_get_byte_size>
 800822e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8008232:	4602      	mov	r2, r0
 8008234:	4659      	mov	r1, fp
 8008236:	4640      	mov	r0, r8
 8008238:	f001 fe2a 	bl	8009e90 <st_int8_copy>
 800823c:	e5c7      	b.n	8007dce <forward_dense+0xae>
 800823e:	2b04      	cmp	r3, #4
 8008240:	d00a      	beq.n	8008258 <forward_dense+0x538>
 8008242:	f04f 0900 	mov.w	r9, #0
 8008246:	e5bd      	b.n	8007dc4 <forward_dense+0xa4>
 8008248:	930d      	str	r3, [sp, #52]	; 0x34
 800824a:	e595      	b.n	8007d78 <forward_dense+0x58>
 800824c:	2300      	movs	r3, #0
 800824e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008250:	460b      	mov	r3, r1
 8008252:	e591      	b.n	8007d78 <forward_dense+0x58>
 8008254:	46c3      	mov	fp, r8
 8008256:	e5ba      	b.n	8007dce <forward_dense+0xae>
 8008258:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800825c:	e5b7      	b.n	8007dce <forward_dense+0xae>
 800825e:	2300      	movs	r3, #0
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	deff      	udf	#255	; 0xff
 8008264:	2300      	movs	r3, #0
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	deff      	udf	#255	; 0xff
 800826a:	bf00      	nop

0800826c <nl_func_sigmoid_array_f32>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	ed2d 8b02 	vpush	{d8}
 8008272:	698f      	ldr	r7, [r1, #24]
 8008274:	6980      	ldr	r0, [r0, #24]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	6886      	ldr	r6, [r0, #8]
 800827a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800827e:	3a01      	subs	r2, #1
 8008280:	0093      	lsls	r3, r2, #2
 8008282:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008286:	4291      	cmp	r1, r2
 8008288:	d815      	bhi.n	80082b6 <nl_func_sigmoid_array_f32+0x4a>
 800828a:	3304      	adds	r3, #4
 800828c:	1d14      	adds	r4, r2, #4
 800828e:	441e      	add	r6, r3
 8008290:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008294:	4625      	mov	r5, r4
 8008296:	ed34 0a01 	vldmdb	r4!, {s0}
 800829a:	eeb1 0a40 	vneg.f32	s0, s0
 800829e:	f004 fbf1 	bl	800ca84 <expf>
 80082a2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80082a6:	3d08      	subs	r5, #8
 80082a8:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80082ac:	ed66 7a01 	vstmdb	r6!, {s15}
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	42ab      	cmp	r3, r5
 80082b4:	d9ee      	bls.n	8008294 <nl_func_sigmoid_array_f32+0x28>
 80082b6:	ecbd 8b02 	vpop	{d8}
 80082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082bc <nl_func_relu_array_f32>:
 80082bc:	b430      	push	{r4, r5}
 80082be:	698c      	ldr	r4, [r1, #24]
 80082c0:	6981      	ldr	r1, [r0, #24]
 80082c2:	68a5      	ldr	r5, [r4, #8]
 80082c4:	6889      	ldr	r1, [r1, #8]
 80082c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80082ca:	3a01      	subs	r2, #1
 80082cc:	0093      	lsls	r3, r2, #2
 80082ce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80082d2:	4295      	cmp	r5, r2
 80082d4:	d814      	bhi.n	8008300 <nl_func_relu_array_f32+0x44>
 80082d6:	1d18      	adds	r0, r3, #4
 80082d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008304 <nl_func_relu_array_f32+0x48>
 80082dc:	1d13      	adds	r3, r2, #4
 80082de:	4401      	add	r1, r0
 80082e0:	461a      	mov	r2, r3
 80082e2:	ed73 7a01 	vldmdb	r3!, {s15}
 80082e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	bfb8      	it	lt
 80082f0:	eef0 7a47 	vmovlt.f32	s15, s14
 80082f4:	ed61 7a01 	vstmdb	r1!, {s15}
 80082f8:	68a0      	ldr	r0, [r4, #8]
 80082fa:	3a08      	subs	r2, #8
 80082fc:	4290      	cmp	r0, r2
 80082fe:	d9ef      	bls.n	80082e0 <nl_func_relu_array_f32+0x24>
 8008300:	bc30      	pop	{r4, r5}
 8008302:	4770      	bx	lr
 8008304:	00000000 	.word	0x00000000

08008308 <array_f32_identity>:
 8008308:	6980      	ldr	r0, [r0, #24]
 800830a:	698b      	ldr	r3, [r1, #24]
 800830c:	4298      	cmp	r0, r3
 800830e:	d004      	beq.n	800831a <array_f32_identity+0x12>
 8008310:	68c1      	ldr	r1, [r0, #12]
 8008312:	68d8      	ldr	r0, [r3, #12]
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	f001 bdbb 	b.w	8009e90 <st_int8_copy>
 800831a:	4770      	bx	lr

0800831c <forward_lstm>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	ed2d 8b06 	vpush	{d8-d10}
 8008324:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8008328:	6983      	ldr	r3, [r0, #24]
 800832a:	af00      	add	r7, sp, #0
 800832c:	881a      	ldrh	r2, [r3, #0]
 800832e:	60b8      	str	r0, [r7, #8]
 8008330:	2a00      	cmp	r2, #0
 8008332:	f001 842a 	beq.w	8009b8a <forward_lstm+0x186e>
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800833c:	2a01      	cmp	r2, #1
 800833e:	f001 8424 	beq.w	8009b8a <forward_lstm+0x186e>
 8008342:	2a02      	cmp	r2, #2
 8008344:	f001 8421 	beq.w	8009b8a <forward_lstm+0x186e>
 8008348:	69d8      	ldr	r0, [r3, #28]
 800834a:	2800      	cmp	r0, #0
 800834c:	f001 8414 	beq.w	8009b78 <forward_lstm+0x185c>
 8008350:	8b1b      	ldrh	r3, [r3, #24]
 8008352:	6801      	ldr	r1, [r0, #0]
 8008354:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8008358:	2b01      	cmp	r3, #1
 800835a:	6883      	ldr	r3, [r0, #8]
 800835c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008360:	bf88      	it	hi
 8008362:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8008366:	68c3      	ldr	r3, [r0, #12]
 8008368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800836c:	bf98      	it	ls
 800836e:	f04f 0b00 	movls.w	fp, #0
 8008372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800837a:	b10b      	cbz	r3, 8008380 <forward_lstm+0x64>
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008384:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008386:	899b      	ldrh	r3, [r3, #12]
 8008388:	68cd      	ldr	r5, [r1, #12]
 800838a:	0099      	lsls	r1, r3, #2
 800838c:	3107      	adds	r1, #7
 800838e:	08c9      	lsrs	r1, r1, #3
 8008390:	466c      	mov	r4, sp
 8008392:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 8008396:	46a5      	mov	sp, r4
 8008398:	1ddc      	adds	r4, r3, #7
 800839a:	466e      	mov	r6, sp
 800839c:	08e4      	lsrs	r4, r4, #3
 800839e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80083a2:	46a5      	mov	sp, r4
 80083a4:	68bc      	ldr	r4, [r7, #8]
 80083a6:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80083aa:	466c      	mov	r4, sp
 80083ac:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 80083b0:	46e5      	mov	sp, ip
 80083b2:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 80083b6:	f8c7 d010 	str.w	sp, [r7, #16]
 80083ba:	468d      	mov	sp, r1
 80083bc:	68e9      	ldr	r1, [r5, #12]
 80083be:	65b9      	str	r1, [r7, #88]	; 0x58
 80083c0:	6869      	ldr	r1, [r5, #4]
 80083c2:	6779      	str	r1, [r7, #116]	; 0x74
 80083c4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80083c8:	ee09 1a10 	vmov	s18, r1
 80083cc:	46ee      	mov	lr, sp
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f001 83c9 	beq.w	8009b66 <forward_lstm+0x184a>
 80083d4:	6945      	ldr	r5, [r0, #20]
 80083d6:	6901      	ldr	r1, [r0, #16]
 80083d8:	ee09 5a90 	vmov	s19, r5
 80083dc:	6985      	ldr	r5, [r0, #24]
 80083de:	ee0a 1a90 	vmov	s21, r1
 80083e2:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 80083e6:	ee0a 5a10 	vmov	s20, r5
 80083ea:	b119      	cbz	r1, 80083f4 <forward_lstm+0xd8>
 80083ec:	6989      	ldr	r1, [r1, #24]
 80083ee:	6889      	ldr	r1, [r1, #8]
 80083f0:	ee0a 1a90 	vmov	s21, r1
 80083f4:	ee19 1a90 	vmov	r1, s19
 80083f8:	b119      	cbz	r1, 8008402 <forward_lstm+0xe6>
 80083fa:	6989      	ldr	r1, [r1, #24]
 80083fc:	6889      	ldr	r1, [r1, #8]
 80083fe:	ee09 1a90 	vmov	s19, r1
 8008402:	ee1a 1a10 	vmov	r1, s20
 8008406:	b119      	cbz	r1, 8008410 <forward_lstm+0xf4>
 8008408:	6989      	ldr	r1, [r1, #24]
 800840a:	6889      	ldr	r1, [r1, #8]
 800840c:	ee0a 1a10 	vmov	s20, r1
 8008410:	f1b9 0f00 	cmp.w	r9, #0
 8008414:	d003      	beq.n	800841e <forward_lstm+0x102>
 8008416:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800841a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800841e:	b108      	cbz	r0, 8008424 <forward_lstm+0x108>
 8008420:	6981      	ldr	r1, [r0, #24]
 8008422:	6888      	ldr	r0, [r1, #8]
 8008424:	2a03      	cmp	r2, #3
 8008426:	f001 83b0 	beq.w	8009b8a <forward_lstm+0x186e>
 800842a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800842e:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8008432:	f1ba 0f00 	cmp.w	sl, #0
 8008436:	d001      	beq.n	800843c <forward_lstm+0x120>
 8008438:	f8da a000 	ldr.w	sl, [sl]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8008442:	4423      	add	r3, r4
 8008444:	4621      	mov	r1, r4
 8008446:	f1ae 0404 	sub.w	r4, lr, #4
 800844a:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 800844e:	60fc      	str	r4, [r7, #12]
 8008450:	3e04      	subs	r6, #4
 8008452:	f1ce 0e04 	rsb	lr, lr, #4
 8008456:	1f15      	subs	r5, r2, #4
 8008458:	4699      	mov	r9, r3
 800845a:	e016      	b.n	800848a <forward_lstm+0x16e>
 800845c:	4423      	add	r3, r4
 800845e:	f853 200e 	ldr.w	r2, [r3, lr]
 8008462:	b1c2      	cbz	r2, 8008496 <forward_lstm+0x17a>
 8008464:	68d3      	ldr	r3, [r2, #12]
 8008466:	f846 2f04 	str.w	r2, [r6, #4]!
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	6992      	ldr	r2, [r2, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	6893      	ldr	r3, [r2, #8]
 8008472:	f845 3f04 	str.w	r3, [r5, #4]!
 8008476:	bf8c      	ite	hi
 8008478:	2301      	movhi	r3, #1
 800847a:	2300      	movls	r3, #0
 800847c:	f801 3b01 	strb.w	r3, [r1], #1
 8008480:	bf8c      	ite	hi
 8008482:	4643      	movhi	r3, r8
 8008484:	2300      	movls	r3, #0
 8008486:	f844 3f04 	str.w	r3, [r4, #4]!
 800848a:	4549      	cmp	r1, r9
 800848c:	d003      	beq.n	8008496 <forward_lstm+0x17a>
 800848e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e2      	bne.n	800845c <forward_lstm+0x140>
 8008496:	f8da 3018 	ldr.w	r3, [sl, #24]
 800849a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800849e:	689d      	ldr	r5, [r3, #8]
 80084a0:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80084a4:	f8db 3018 	ldr.w	r3, [fp, #24]
 80084a8:	6989      	ldr	r1, [r1, #24]
 80084aa:	69a4      	ldr	r4, [r4, #24]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	667b      	str	r3, [r7, #100]	; 0x64
 80084b0:	688b      	ldr	r3, [r1, #8]
 80084b2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80084b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	663b      	str	r3, [r7, #96]	; 0x60
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6992      	ldr	r2, [r2, #24]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
 80084c4:	66ba      	str	r2, [r7, #104]	; 0x68
 80084c6:	ee19 1a10 	vmov	r1, s18
 80084ca:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 80084ce:	186a      	adds	r2, r5, r1
 80084d0:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 80084d4:	4421      	add	r1, r4
 80084d6:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 80084da:	673d      	str	r5, [r7, #112]	; 0x70
 80084dc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80084e0:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80084e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084e8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	f041 8264 	bne.w	80099ba <forward_lstm+0x169e>
 80084f2:	4629      	mov	r1, r5
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f001 826e 	beq.w	80099d6 <forward_lstm+0x16ba>
 80084fa:	ee19 2a10 	vmov	r2, s18
 80084fe:	f001 fcc7 	bl	8009e90 <st_int8_copy>
 8008502:	ee19 2a10 	vmov	r2, s18
 8008506:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800850a:	4648      	mov	r0, r9
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	f001 826f 	beq.w	80099f2 <forward_lstm+0x16d6>
 8008514:	f001 fcbc 	bl	8009e90 <st_int8_copy>
 8008518:	ee19 2a10 	vmov	r2, s18
 800851c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008520:	2000      	movs	r0, #0
 8008522:	f001 fc59 	bl	8009dd8 <st_int8_fill>
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4bab      	ldr	r3, [pc, #684]	; (80087d8 <forward_lstm+0x4bc>)
 800852a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800852c:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8008530:	2900      	cmp	r1, #0
 8008532:	bf08      	it	eq
 8008534:	4619      	moveq	r1, r3
 8008536:	6479      	str	r1, [r7, #68]	; 0x44
 8008538:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800853a:	2900      	cmp	r1, #0
 800853c:	bf08      	it	eq
 800853e:	4619      	moveq	r1, r3
 8008540:	67f9      	str	r1, [r7, #124]	; 0x7c
 8008542:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008544:	2900      	cmp	r1, #0
 8008546:	bf08      	it	eq
 8008548:	4619      	moveq	r1, r3
 800854a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800854e:	6439      	str	r1, [r7, #64]	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	f001 8301 	beq.w	8009b58 <forward_lstm+0x183c>
 8008556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008558:	3b01      	subs	r3, #1
 800855a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008564:	4613      	mov	r3, r2
 8008566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856a:	b1b3      	cbz	r3, 800859a <forward_lstm+0x27e>
 800856c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008570:	899d      	ldrh	r5, [r3, #12]
 8008572:	b195      	cbz	r5, 800859a <forward_lstm+0x27e>
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800857e:	1e5e      	subs	r6, r3, #1
 8008580:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	fb03 f406 	mul.w	r4, r3, r6
 800858a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800858e:	f842 1b04 	str.w	r1, [r2], #4
 8008592:	425b      	negs	r3, r3
 8008594:	4295      	cmp	r5, r2
 8008596:	6003      	str	r3, [r0, #0]
 8008598:	d1f2      	bne.n	8008580 <forward_lstm+0x264>
 800859a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800859c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800859e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80085a2:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 80087e0 <forward_lstm+0x4c4>
 80085a6:	b2a9      	uxth	r1, r5
 80085a8:	fa1f f288 	uxth.w	r2, r8
 80085ac:	f1a1 0310 	sub.w	r3, r1, #16
 80085b0:	0096      	lsls	r6, r2, #2
 80085b2:	091b      	lsrs	r3, r3, #4
 80085b4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80085b8:	3301      	adds	r3, #1
 80085ba:	fb06 f101 	mul.w	r1, r6, r1
 80085be:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 80085c2:	019b      	lsls	r3, r3, #6
 80085c4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80085c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085ce:	f1a2 0310 	sub.w	r3, r2, #16
 80085d2:	fb02 f202 	mul.w	r2, r2, r2
 80085d6:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 80085da:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 80085de:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80085e0:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80085e4:	091b      	lsrs	r3, r3, #4
 80085e6:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 80085ea:	1c5c      	adds	r4, r3, #1
 80085ec:	019b      	lsls	r3, r3, #6
 80085ee:	623b      	str	r3, [r7, #32]
 80085f0:	01a3      	lsls	r3, r4, #6
 80085f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f8:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 80085fc:	440b      	add	r3, r1
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008602:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8008606:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 800860a:	440b      	add	r3, r1
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
 800860e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008610:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
 8008616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008618:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800861c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800861e:	633b      	str	r3, [r7, #48]	; 0x30
 8008620:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008624:	4633      	mov	r3, r6
 8008626:	1996      	adds	r6, r2, r6
 8008628:	62fe      	str	r6, [r7, #44]	; 0x2c
 800862a:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800862c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8008630:	441e      	add	r6, r3
 8008632:	62be      	str	r6, [r7, #40]	; 0x28
 8008634:	18e6      	adds	r6, r4, r3
 8008636:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8008638:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800863c:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8008640:	ea04 0600 	and.w	r6, r4, r0
 8008644:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8008648:	ea08 0600 	and.w	r6, r8, r0
 800864c:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8008650:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008654:	0089      	lsls	r1, r1, #2
 8008656:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800865a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800865c:	00ad      	lsls	r5, r5, #2
 800865e:	fb05 f101 	mul.w	r1, r5, r1
 8008662:	61b9      	str	r1, [r7, #24]
 8008664:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008668:	fb05 f501 	mul.w	r5, r5, r1
 800866c:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8008670:	4661      	mov	r1, ip
 8008672:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8008676:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800867a:	61fd      	str	r5, [r7, #28]
 800867c:	4419      	add	r1, r3
 800867e:	6279      	str	r1, [r7, #36]	; 0x24
 8008680:	18d1      	adds	r1, r2, r3
 8008682:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008686:	f008 060f 	and.w	r6, r8, #15
 800868a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008696:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800869a:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800869e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80086a2:	4413      	add	r3, r2
 80086a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086ac:	4b4b      	ldr	r3, [pc, #300]	; (80087dc <forward_lstm+0x4c0>)
 80086ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086b2:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 80086b6:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 80086ba:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 80086be:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 80086c2:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 80086c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80086d4:	4403      	add	r3, r0
 80086d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086da:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80086de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086e2:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80086e6:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 80086ea:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 80086ee:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 80086f2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80086f6:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80086f8:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 80086fc:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8008700:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8008704:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8008708:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 800870c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008710:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8008714:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008718:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 800871c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008720:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8008724:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8008728:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 800872c:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8008730:	2a00      	cmp	r2, #0
 8008732:	f001 81a2 	beq.w	8009a7a <forward_lstm+0x175e>
 8008736:	6a38      	ldr	r0, [r7, #32]
 8008738:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800873c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008740:	46a9      	mov	r9, r5
 8008742:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8008744:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8008748:	3080      	adds	r0, #128	; 0x80
 800874a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800874c:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8008750:	4410      	add	r0, r2
 8008752:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8008754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008756:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800875a:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 800875e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008762:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8008766:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 800876a:	1955      	adds	r5, r2, r5
 800876c:	469e      	mov	lr, r3
 800876e:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8008772:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008776:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 800877a:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 800877e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008782:	442a      	add	r2, r5
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800878a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008792:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008796:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800879a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800879c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087a4:	f002 020f 	and.w	r2, r2, #15
 80087a8:	46a0      	mov	r8, r4
 80087aa:	468c      	mov	ip, r1
 80087ac:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80087b0:	469a      	mov	sl, r3
 80087b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80087e0 <forward_lstm+0x4c4>
 80087ba:	ecac 8a01 	vstmia	ip!, {s16}
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f001 8154 	beq.w	8009a6c <forward_lstm+0x1750>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80087cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80087d0:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 80087d4:	e006      	b.n	80087e4 <forward_lstm+0x4c8>
 80087d6:	bf00      	nop
 80087d8:	08008309 	.word	0x08008309
 80087dc:	01821040 	.word	0x01821040
 80087e0:	00000000 	.word	0x00000000
 80087e4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80087e8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80087ec:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80087f0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80087f4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80087f8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80087fc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008800:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008804:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008808:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800880c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008810:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008814:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008818:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800881c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008820:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008824:	3910      	subs	r1, #16
 8008826:	290f      	cmp	r1, #15
 8008828:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800882c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008830:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008834:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008838:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800883c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008840:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008844:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008848:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800884c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8008850:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008854:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008858:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800885c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008860:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008864:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8008868:	eee3 7a23 	vfma.f32	s15, s6, s7
 800886c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008870:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008874:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008878:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800887c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008880:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008884:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008888:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800888c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008890:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008894:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008898:	eee1 7a21 	vfma.f32	s15, s2, s3
 800889c:	eee2 7a22 	vfma.f32	s15, s4, s5
 80088a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088b4:	d896      	bhi.n	80087e4 <forward_lstm+0x4c8>
 80088b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088ba:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 80088be:	4453      	add	r3, sl
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	d076      	beq.n	80089b2 <forward_lstm+0x696>
 80088c4:	edd4 6a00 	vldr	s13, [r4]
 80088c8:	edd3 7a00 	vldr	s15, [r3]
 80088cc:	2d01      	cmp	r5, #1
 80088ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088d2:	d06e      	beq.n	80089b2 <forward_lstm+0x696>
 80088d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80088d8:	edd4 7a01 	vldr	s15, [r4, #4]
 80088dc:	2d02      	cmp	r5, #2
 80088de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088e2:	d066      	beq.n	80089b2 <forward_lstm+0x696>
 80088e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80088e8:	edd4 7a02 	vldr	s15, [r4, #8]
 80088ec:	2d03      	cmp	r5, #3
 80088ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088f2:	d05e      	beq.n	80089b2 <forward_lstm+0x696>
 80088f4:	edd3 6a03 	vldr	s13, [r3, #12]
 80088f8:	edd4 7a03 	vldr	s15, [r4, #12]
 80088fc:	2d04      	cmp	r5, #4
 80088fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008902:	d056      	beq.n	80089b2 <forward_lstm+0x696>
 8008904:	edd3 6a04 	vldr	s13, [r3, #16]
 8008908:	edd4 7a04 	vldr	s15, [r4, #16]
 800890c:	2d05      	cmp	r5, #5
 800890e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008912:	d04e      	beq.n	80089b2 <forward_lstm+0x696>
 8008914:	edd3 6a05 	vldr	s13, [r3, #20]
 8008918:	edd4 7a05 	vldr	s15, [r4, #20]
 800891c:	2d06      	cmp	r5, #6
 800891e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008922:	d046      	beq.n	80089b2 <forward_lstm+0x696>
 8008924:	edd3 6a06 	vldr	s13, [r3, #24]
 8008928:	edd4 7a06 	vldr	s15, [r4, #24]
 800892c:	2d07      	cmp	r5, #7
 800892e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008932:	d03e      	beq.n	80089b2 <forward_lstm+0x696>
 8008934:	edd3 6a07 	vldr	s13, [r3, #28]
 8008938:	edd4 7a07 	vldr	s15, [r4, #28]
 800893c:	2d08      	cmp	r5, #8
 800893e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008942:	d036      	beq.n	80089b2 <forward_lstm+0x696>
 8008944:	edd3 6a08 	vldr	s13, [r3, #32]
 8008948:	edd4 7a08 	vldr	s15, [r4, #32]
 800894c:	2d09      	cmp	r5, #9
 800894e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008952:	d02e      	beq.n	80089b2 <forward_lstm+0x696>
 8008954:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008958:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800895c:	2d0a      	cmp	r5, #10
 800895e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008962:	d026      	beq.n	80089b2 <forward_lstm+0x696>
 8008964:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8008968:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800896c:	2d0b      	cmp	r5, #11
 800896e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008972:	d01e      	beq.n	80089b2 <forward_lstm+0x696>
 8008974:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008978:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800897c:	2d0c      	cmp	r5, #12
 800897e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008982:	d016      	beq.n	80089b2 <forward_lstm+0x696>
 8008984:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8008988:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800898c:	f1b5 020d 	subs.w	r2, r5, #13
 8008990:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008994:	d00d      	beq.n	80089b2 <forward_lstm+0x696>
 8008996:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800899a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800899e:	2a01      	cmp	r2, #1
 80089a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089a4:	d005      	beq.n	80089b2 <forward_lstm+0x696>
 80089a6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80089aa:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80089ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089b6:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 80087e0 <forward_lstm+0x4c4>
 80089ba:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f001 804c 	beq.w	8009a5c <forward_lstm+0x1740>
 80089c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089c8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80089cc:	3340      	adds	r3, #64	; 0x40
 80089ce:	3240      	adds	r2, #64	; 0x40
 80089d0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80089d4:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80089d8:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80089dc:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80089e0:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80089e4:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80089e8:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80089ec:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80089f0:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80089f4:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80089f8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80089fc:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8008a00:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008a04:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008a08:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8008a0c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a10:	3340      	adds	r3, #64	; 0x40
 8008a12:	3240      	adds	r2, #64	; 0x40
 8008a14:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8008a18:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8008a1c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a20:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8008a24:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8008a28:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008a2c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008a30:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8008a34:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008a38:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8008a3c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008a40:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a44:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8008a48:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008a4c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008a50:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8008a54:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008a58:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008a5c:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8008a60:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008a64:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008a68:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8008a6c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008a70:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a74:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8008a78:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008a7c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008a80:	4298      	cmp	r0, r3
 8008a82:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008a86:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008a8a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008a8e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008a92:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008a9a:	d199      	bne.n	80089d0 <forward_lstm+0x6b4>
 8008a9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aa0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008aa4:	189a      	adds	r2, r3, r2
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d078      	beq.n	8008b9c <forward_lstm+0x880>
 8008aaa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008aae:	4633      	mov	r3, r6
 8008ab0:	ed91 6a00 	vldr	s12, [r1]
 8008ab4:	edd2 7a00 	vldr	s15, [r2]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008abe:	d06d      	beq.n	8008b9c <forward_lstm+0x880>
 8008ac0:	ed91 6a01 	vldr	s12, [r1, #4]
 8008ac4:	edd2 7a01 	vldr	s15, [r2, #4]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ace:	d065      	beq.n	8008b9c <forward_lstm+0x880>
 8008ad0:	ed91 6a02 	vldr	s12, [r1, #8]
 8008ad4:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ade:	d05d      	beq.n	8008b9c <forward_lstm+0x880>
 8008ae0:	ed91 6a03 	vldr	s12, [r1, #12]
 8008ae4:	edd2 7a03 	vldr	s15, [r2, #12]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008aee:	d055      	beq.n	8008b9c <forward_lstm+0x880>
 8008af0:	ed91 6a04 	vldr	s12, [r1, #16]
 8008af4:	edd2 7a04 	vldr	s15, [r2, #16]
 8008af8:	2b05      	cmp	r3, #5
 8008afa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008afe:	d04d      	beq.n	8008b9c <forward_lstm+0x880>
 8008b00:	ed91 6a05 	vldr	s12, [r1, #20]
 8008b04:	edd2 7a05 	vldr	s15, [r2, #20]
 8008b08:	2b06      	cmp	r3, #6
 8008b0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b0e:	d045      	beq.n	8008b9c <forward_lstm+0x880>
 8008b10:	ed91 6a06 	vldr	s12, [r1, #24]
 8008b14:	edd2 7a06 	vldr	s15, [r2, #24]
 8008b18:	2b07      	cmp	r3, #7
 8008b1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b1e:	d03d      	beq.n	8008b9c <forward_lstm+0x880>
 8008b20:	ed91 6a07 	vldr	s12, [r1, #28]
 8008b24:	edd2 7a07 	vldr	s15, [r2, #28]
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b2e:	d035      	beq.n	8008b9c <forward_lstm+0x880>
 8008b30:	ed91 6a08 	vldr	s12, [r1, #32]
 8008b34:	edd2 7a08 	vldr	s15, [r2, #32]
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b3e:	d02d      	beq.n	8008b9c <forward_lstm+0x880>
 8008b40:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8008b44:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008b48:	2b0a      	cmp	r3, #10
 8008b4a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b4e:	d025      	beq.n	8008b9c <forward_lstm+0x880>
 8008b50:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8008b54:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008b58:	2b0b      	cmp	r3, #11
 8008b5a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b5e:	d01d      	beq.n	8008b9c <forward_lstm+0x880>
 8008b60:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8008b64:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008b68:	2b0c      	cmp	r3, #12
 8008b6a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b6e:	d015      	beq.n	8008b9c <forward_lstm+0x880>
 8008b70:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8008b74:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008b78:	3b0d      	subs	r3, #13
 8008b7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b7e:	d00d      	beq.n	8008b9c <forward_lstm+0x880>
 8008b80:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8008b84:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b8e:	d005      	beq.n	8008b9c <forward_lstm+0x880>
 8008b90:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8008b94:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008b98:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ba0:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8008ba4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008ba8:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8008bac:	ecb3 6a01 	vldmia	r3!, {s12}
 8008bb0:	edd9 6a00 	vldr	s13, [r9]
 8008bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bbc:	ecf3 7a01 	vldmia	r3!, {s15}
 8008bc0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd0:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8008bd4:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8008ec4 <forward_lstm+0xba8>
 8008bd8:	ed88 8a00 	vstr	s16, [r8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8739 	beq.w	8009a54 <forward_lstm+0x1738>
 8008be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008bea:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bf2:	3340      	adds	r3, #64	; 0x40
 8008bf4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8008bf8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008bfc:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008c00:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008c04:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8008c08:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8008c0c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008c10:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008c14:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008c18:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008c1c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008c20:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008c24:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008c28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008c2c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008c30:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008c34:	3910      	subs	r1, #16
 8008c36:	290f      	cmp	r1, #15
 8008c38:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8008c3c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008c40:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008c44:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008c48:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008c4c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008c50:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008c54:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008c58:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8008c5c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8008c60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008c64:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008c68:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8008c6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008c70:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008c74:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8008c78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008c7c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008c80:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008c84:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008c88:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008c8c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008c90:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008c94:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008c98:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8008c9c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008ca0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008ca4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008ca8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008cac:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008cb0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008cb4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008cb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008cbc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cc4:	d896      	bhi.n	8008bf4 <forward_lstm+0x8d8>
 8008cc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008cce:	4413      	add	r3, r2
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d076      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008cd4:	edd4 6a00 	vldr	s13, [r4]
 8008cd8:	edd3 7a00 	vldr	s15, [r3]
 8008cdc:	2d01      	cmp	r5, #1
 8008cde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ce2:	d06e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008ce4:	edd4 6a01 	vldr	s13, [r4, #4]
 8008ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cec:	2d02      	cmp	r5, #2
 8008cee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cf2:	d066      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008cf4:	edd4 6a02 	vldr	s13, [r4, #8]
 8008cf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008cfc:	2d03      	cmp	r5, #3
 8008cfe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d02:	d05e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d04:	edd4 6a03 	vldr	s13, [r4, #12]
 8008d08:	edd3 7a03 	vldr	s15, [r3, #12]
 8008d0c:	2d04      	cmp	r5, #4
 8008d0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d12:	d056      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d14:	edd4 6a04 	vldr	s13, [r4, #16]
 8008d18:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d1c:	2d05      	cmp	r5, #5
 8008d1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d22:	d04e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d24:	edd4 6a05 	vldr	s13, [r4, #20]
 8008d28:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d2c:	2d06      	cmp	r5, #6
 8008d2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d32:	d046      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d34:	edd4 6a06 	vldr	s13, [r4, #24]
 8008d38:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d3c:	2d07      	cmp	r5, #7
 8008d3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d42:	d03e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d44:	edd4 6a07 	vldr	s13, [r4, #28]
 8008d48:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d4c:	2d08      	cmp	r5, #8
 8008d4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d52:	d036      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d54:	edd4 6a08 	vldr	s13, [r4, #32]
 8008d58:	edd3 7a08 	vldr	s15, [r3, #32]
 8008d5c:	2d09      	cmp	r5, #9
 8008d5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d62:	d02e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d64:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8008d68:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008d6c:	2d0a      	cmp	r5, #10
 8008d6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d72:	d026      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d74:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8008d78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008d7c:	2d0b      	cmp	r5, #11
 8008d7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d82:	d01e      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d84:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8008d88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008d8c:	2d0c      	cmp	r5, #12
 8008d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d92:	d016      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008d94:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8008d98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008d9c:	f1b5 020d 	subs.w	r2, r5, #13
 8008da0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008da4:	d00d      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008da6:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8008daa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008dae:	2a01      	cmp	r2, #1
 8008db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008db4:	d005      	beq.n	8008dc2 <forward_lstm+0xaa6>
 8008db6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8008dba:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008dbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dc6:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8008ec4 <forward_lstm+0xba8>
 8008dca:	ed88 7a00 	vstr	s14, [r8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8638 	beq.w	8009a44 <forward_lstm+0x1728>
 8008dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008ddc:	3340      	adds	r3, #64	; 0x40
 8008dde:	3240      	adds	r2, #64	; 0x40
 8008de0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8008de4:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8008de8:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8008dec:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008df0:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8008df4:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8008df8:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8008dfc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008e00:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8008e04:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8008e08:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008e0c:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8008e10:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008e14:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008e18:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8008e1c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008e20:	3340      	adds	r3, #64	; 0x40
 8008e22:	3240      	adds	r2, #64	; 0x40
 8008e24:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8008e28:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8008e2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008e30:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8008e34:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8008e38:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008e3c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008e40:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8008e44:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008e48:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8008e4c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008e50:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008e54:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8008e58:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008e5c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008e60:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8008e64:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008e68:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008e6c:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8008e70:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008e74:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008e78:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8008e7c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008e80:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008e84:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8008e88:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008e8c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008e90:	4283      	cmp	r3, r0
 8008e92:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008e96:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008e9a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008e9e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008ea2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008ea6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008eaa:	d199      	bne.n	8008de0 <forward_lstm+0xac4>
 8008eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008eb0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008eb4:	189a      	adds	r2, r3, r2
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d07c      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008eba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008ebe:	4633      	mov	r3, r6
 8008ec0:	e002      	b.n	8008ec8 <forward_lstm+0xbac>
 8008ec2:	bf00      	nop
 8008ec4:	00000000 	.word	0x00000000
 8008ec8:	ed91 6a00 	vldr	s12, [r1]
 8008ecc:	edd2 7a00 	vldr	s15, [r2]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ed6:	d06d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008ed8:	ed91 6a01 	vldr	s12, [r1, #4]
 8008edc:	edd2 7a01 	vldr	s15, [r2, #4]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ee6:	d065      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008ee8:	ed91 6a02 	vldr	s12, [r1, #8]
 8008eec:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ef6:	d05d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008ef8:	ed91 6a03 	vldr	s12, [r1, #12]
 8008efc:	edd2 7a03 	vldr	s15, [r2, #12]
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f06:	d055      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f08:	ed91 6a04 	vldr	s12, [r1, #16]
 8008f0c:	edd2 7a04 	vldr	s15, [r2, #16]
 8008f10:	2b05      	cmp	r3, #5
 8008f12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f16:	d04d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f18:	ed91 6a05 	vldr	s12, [r1, #20]
 8008f1c:	edd2 7a05 	vldr	s15, [r2, #20]
 8008f20:	2b06      	cmp	r3, #6
 8008f22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f26:	d045      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f28:	ed91 6a06 	vldr	s12, [r1, #24]
 8008f2c:	edd2 7a06 	vldr	s15, [r2, #24]
 8008f30:	2b07      	cmp	r3, #7
 8008f32:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f36:	d03d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f38:	ed91 6a07 	vldr	s12, [r1, #28]
 8008f3c:	edd2 7a07 	vldr	s15, [r2, #28]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f46:	d035      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f48:	ed91 6a08 	vldr	s12, [r1, #32]
 8008f4c:	edd2 7a08 	vldr	s15, [r2, #32]
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f56:	d02d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f58:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8008f5c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008f60:	2b0a      	cmp	r3, #10
 8008f62:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f66:	d025      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f68:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8008f6c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008f70:	2b0b      	cmp	r3, #11
 8008f72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f76:	d01d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f78:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8008f7c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008f80:	2b0c      	cmp	r3, #12
 8008f82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f86:	d015      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f88:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8008f8c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008f90:	3b0d      	subs	r3, #13
 8008f92:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008f96:	d00d      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008f98:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8008f9c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008fa6:	d005      	beq.n	8008fb4 <forward_lstm+0xc98>
 8008fa8:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8008fac:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008fb0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fb8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008fbc:	f109 0904 	add.w	r9, r9, #4
 8008fc0:	ed88 7a00 	vstr	s14, [r8]
 8008fc4:	edd3 7a00 	vldr	s15, [r3]
 8008fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fcc:	ecb3 6a01 	vldmia	r3!, {s12}
 8008fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fd8:	ecf3 6a01 	vldmia	r3!, {s13}
 8008fdc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008fec:	eca8 7a01 	vstmia	r8!, {s14}
 8008ff0:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8008ec4 <forward_lstm+0xba8>
 8008ff4:	ed8e 8a00 	vstr	s16, [lr]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 851f 	beq.w	8009a3c <forward_lstm+0x1720>
 8008ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009002:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009006:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	3340      	adds	r3, #64	; 0x40
 8009010:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8009014:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009018:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800901c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8009020:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8009024:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8009028:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800902c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8009030:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8009034:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8009038:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800903c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8009040:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8009044:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009048:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800904c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009050:	3910      	subs	r1, #16
 8009052:	290f      	cmp	r1, #15
 8009054:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8009058:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800905c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009060:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009064:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009068:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800906c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8009070:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009074:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8009078:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800907c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009080:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8009084:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8009088:	eee6 7a26 	vfma.f32	s15, s12, s13
 800908c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8009090:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8009094:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009098:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800909c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80090a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090a4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80090a8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80090ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80090b0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80090b4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80090b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80090bc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80090c0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80090c4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80090c8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80090cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80090d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80090d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80090dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090e0:	d896      	bhi.n	8009010 <forward_lstm+0xcf4>
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80090ea:	4413      	add	r3, r2
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d076      	beq.n	80091de <forward_lstm+0xec2>
 80090f0:	edd4 6a00 	vldr	s13, [r4]
 80090f4:	edd3 7a00 	vldr	s15, [r3]
 80090f8:	2d01      	cmp	r5, #1
 80090fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090fe:	d06e      	beq.n	80091de <forward_lstm+0xec2>
 8009100:	edd4 6a01 	vldr	s13, [r4, #4]
 8009104:	edd3 7a01 	vldr	s15, [r3, #4]
 8009108:	2d02      	cmp	r5, #2
 800910a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800910e:	d066      	beq.n	80091de <forward_lstm+0xec2>
 8009110:	edd4 6a02 	vldr	s13, [r4, #8]
 8009114:	edd3 7a02 	vldr	s15, [r3, #8]
 8009118:	2d03      	cmp	r5, #3
 800911a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800911e:	d05e      	beq.n	80091de <forward_lstm+0xec2>
 8009120:	edd4 6a03 	vldr	s13, [r4, #12]
 8009124:	edd3 7a03 	vldr	s15, [r3, #12]
 8009128:	2d04      	cmp	r5, #4
 800912a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800912e:	d056      	beq.n	80091de <forward_lstm+0xec2>
 8009130:	edd4 6a04 	vldr	s13, [r4, #16]
 8009134:	edd3 7a04 	vldr	s15, [r3, #16]
 8009138:	2d05      	cmp	r5, #5
 800913a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800913e:	d04e      	beq.n	80091de <forward_lstm+0xec2>
 8009140:	edd4 6a05 	vldr	s13, [r4, #20]
 8009144:	edd3 7a05 	vldr	s15, [r3, #20]
 8009148:	2d06      	cmp	r5, #6
 800914a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800914e:	d046      	beq.n	80091de <forward_lstm+0xec2>
 8009150:	edd4 6a06 	vldr	s13, [r4, #24]
 8009154:	edd3 7a06 	vldr	s15, [r3, #24]
 8009158:	2d07      	cmp	r5, #7
 800915a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800915e:	d03e      	beq.n	80091de <forward_lstm+0xec2>
 8009160:	edd4 6a07 	vldr	s13, [r4, #28]
 8009164:	edd3 7a07 	vldr	s15, [r3, #28]
 8009168:	2d08      	cmp	r5, #8
 800916a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800916e:	d036      	beq.n	80091de <forward_lstm+0xec2>
 8009170:	edd4 6a08 	vldr	s13, [r4, #32]
 8009174:	edd3 7a08 	vldr	s15, [r3, #32]
 8009178:	2d09      	cmp	r5, #9
 800917a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800917e:	d02e      	beq.n	80091de <forward_lstm+0xec2>
 8009180:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8009184:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009188:	2d0a      	cmp	r5, #10
 800918a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800918e:	d026      	beq.n	80091de <forward_lstm+0xec2>
 8009190:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8009194:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009198:	2d0b      	cmp	r5, #11
 800919a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800919e:	d01e      	beq.n	80091de <forward_lstm+0xec2>
 80091a0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80091a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80091a8:	2d0c      	cmp	r5, #12
 80091aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091ae:	d016      	beq.n	80091de <forward_lstm+0xec2>
 80091b0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80091b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80091b8:	f1b5 020d 	subs.w	r2, r5, #13
 80091bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091c0:	d00d      	beq.n	80091de <forward_lstm+0xec2>
 80091c2:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80091c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091d0:	d005      	beq.n	80091de <forward_lstm+0xec2>
 80091d2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80091d6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80091da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091e2:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8008ec4 <forward_lstm+0xba8>
 80091e6:	ed8e 7a00 	vstr	s14, [lr]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 8420 	beq.w	8009a30 <forward_lstm+0x1714>
 80091f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091f4:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 80091f8:	3340      	adds	r3, #64	; 0x40
 80091fa:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80091fe:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8009202:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8009206:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800920a:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 800920e:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8009212:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8009216:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800921a:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 800921e:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8009222:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8009226:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800922a:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800922e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009232:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8009236:	eee5 7a86 	vfma.f32	s15, s11, s12
 800923a:	3340      	adds	r3, #64	; 0x40
 800923c:	3240      	adds	r2, #64	; 0x40
 800923e:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8009242:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8009246:	eee5 7a25 	vfma.f32	s15, s10, s11
 800924a:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 800924e:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8009252:	eee4 7a06 	vfma.f32	s15, s8, s12
 8009256:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800925a:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 800925e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009262:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8009266:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800926a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800926e:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8009272:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8009276:	eee2 7a83 	vfma.f32	s15, s5, s6
 800927a:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800927e:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009282:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009286:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800928a:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800928e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009292:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8009296:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800929a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800929e:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80092a2:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80092a6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80092aa:	4283      	cmp	r3, r0
 80092ac:	eee1 7a82 	vfma.f32	s15, s3, s4
 80092b0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80092b4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80092b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80092bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80092c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80092c4:	d199      	bne.n	80091fa <forward_lstm+0xede>
 80092c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092ca:	eb0b 0203 	add.w	r2, fp, r3
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	d078      	beq.n	80093c4 <forward_lstm+0x10a8>
 80092d2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80092d6:	4633      	mov	r3, r6
 80092d8:	ed91 6a00 	vldr	s12, [r1]
 80092dc:	edd2 7a00 	vldr	s15, [r2]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80092e6:	d06d      	beq.n	80093c4 <forward_lstm+0x10a8>
 80092e8:	ed91 6a01 	vldr	s12, [r1, #4]
 80092ec:	edd2 7a01 	vldr	s15, [r2, #4]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80092f6:	d065      	beq.n	80093c4 <forward_lstm+0x10a8>
 80092f8:	ed91 6a02 	vldr	s12, [r1, #8]
 80092fc:	edd2 7a02 	vldr	s15, [r2, #8]
 8009300:	2b03      	cmp	r3, #3
 8009302:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009306:	d05d      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009308:	ed91 6a03 	vldr	s12, [r1, #12]
 800930c:	edd2 7a03 	vldr	s15, [r2, #12]
 8009310:	2b04      	cmp	r3, #4
 8009312:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009316:	d055      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009318:	ed91 6a04 	vldr	s12, [r1, #16]
 800931c:	edd2 7a04 	vldr	s15, [r2, #16]
 8009320:	2b05      	cmp	r3, #5
 8009322:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009326:	d04d      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009328:	ed91 6a05 	vldr	s12, [r1, #20]
 800932c:	edd2 7a05 	vldr	s15, [r2, #20]
 8009330:	2b06      	cmp	r3, #6
 8009332:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009336:	d045      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009338:	ed91 6a06 	vldr	s12, [r1, #24]
 800933c:	edd2 7a06 	vldr	s15, [r2, #24]
 8009340:	2b07      	cmp	r3, #7
 8009342:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009346:	d03d      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009348:	ed91 6a07 	vldr	s12, [r1, #28]
 800934c:	edd2 7a07 	vldr	s15, [r2, #28]
 8009350:	2b08      	cmp	r3, #8
 8009352:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009356:	d035      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009358:	ed91 6a08 	vldr	s12, [r1, #32]
 800935c:	edd2 7a08 	vldr	s15, [r2, #32]
 8009360:	2b09      	cmp	r3, #9
 8009362:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009366:	d02d      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009368:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800936c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009370:	2b0a      	cmp	r3, #10
 8009372:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009376:	d025      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009378:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800937c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009380:	2b0b      	cmp	r3, #11
 8009382:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009386:	d01d      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009388:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800938c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009390:	2b0c      	cmp	r3, #12
 8009392:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009396:	d015      	beq.n	80093c4 <forward_lstm+0x10a8>
 8009398:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800939c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80093a0:	3b0d      	subs	r3, #13
 80093a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093a6:	d00d      	beq.n	80093c4 <forward_lstm+0x10a8>
 80093a8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80093ac:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093b6:	d005      	beq.n	80093c4 <forward_lstm+0x10a8>
 80093b8:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80093bc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80093c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80093c8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80093cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80093d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80093d4:	449a      	add	sl, r3
 80093d6:	ed8e 7a00 	vstr	s14, [lr]
 80093da:	ecf2 7a01 	vldmia	r2!, {s15}
 80093de:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80093e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093e6:	4411      	add	r1, r2
 80093e8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80093ec:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80093f0:	4419      	add	r1, r3
 80093f2:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80093f6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80093fa:	4411      	add	r1, r2
 80093fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009400:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8009404:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009408:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800940c:	4419      	add	r1, r3
 800940e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009412:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8009416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941a:	bf88      	it	hi
 800941c:	eeb0 7a68 	vmovhi.f32	s14, s17
 8009420:	4563      	cmp	r3, ip
 8009422:	ecae 7a01 	vstmia	lr!, {s14}
 8009426:	4493      	add	fp, r2
 8009428:	f47f a9c3 	bne.w	80087b2 <forward_lstm+0x496>
 800942c:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8009430:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 8009434:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8009438:	4642      	mov	r2, r8
 800943a:	4608      	mov	r0, r1
 800943c:	ee19 3a90 	vmov	r3, s19
 8009440:	46a3      	mov	fp, r4
 8009442:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8009444:	47a0      	blx	r4
 8009446:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800944a:	4642      	mov	r2, r8
 800944c:	4608      	mov	r0, r1
 800944e:	ee19 3a90 	vmov	r3, s19
 8009452:	47a0      	blx	r4
 8009454:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8009458:	4642      	mov	r2, r8
 800945a:	4608      	mov	r0, r1
 800945c:	ee1a 3a90 	vmov	r3, s21
 8009460:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009462:	47a0      	blx	r4
 8009464:	1e6a      	subs	r2, r5, #1
 8009466:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800946a:	1eaa      	subs	r2, r5, #2
 800946c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8009470:	1eea      	subs	r2, r5, #3
 8009472:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009476:	1f2a      	subs	r2, r5, #4
 8009478:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800947c:	1f6a      	subs	r2, r5, #5
 800947e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009482:	1faa      	subs	r2, r5, #6
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800948a:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 800948e:	1fea      	subs	r2, r5, #7
 8009490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009494:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8009498:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 800949c:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 80094a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094a2:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 80094a6:	f1a5 0208 	sub.w	r2, r5, #8
 80094aa:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80094ae:	465c      	mov	r4, fp
 80094b0:	461e      	mov	r6, r3
 80094b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094b6:	ecf8 7a01 	vldmia	r8!, {s15}
 80094ba:	ecb3 6a01 	vldmia	r3!, {s12}
 80094be:	ed9a 7a00 	vldr	s14, [sl]
 80094c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80094c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094d6:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80097f4 <forward_lstm+0x14d8>
 80094da:	ecea 7a01 	vstmia	sl!, {s15}
 80094de:	eca1 8a01 	vstmia	r1!, {s16}
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 82a2 	beq.w	8009a2c <forward_lstm+0x1710>
 80094e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ec:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 80094f0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80094f4:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80094f8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80094fc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009500:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8009504:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8009508:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800950c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8009510:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8009514:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8009518:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800951c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8009520:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8009524:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8009528:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800952c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009530:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009534:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009538:	f1ab 0b10 	sub.w	fp, fp, #16
 800953c:	f1bb 0f0f 	cmp.w	fp, #15
 8009540:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8009544:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8009548:	eee5 7a86 	vfma.f32	s15, s11, s12
 800954c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009550:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009554:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8009558:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800955c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009560:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8009564:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8009568:	eee5 7a25 	vfma.f32	s15, s10, s11
 800956c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8009570:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8009574:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009578:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800957c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8009580:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009584:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009588:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800958c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009590:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009594:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8009598:	eee5 7a25 	vfma.f32	s15, s10, s11
 800959c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80095a0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80095a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80095a8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80095ac:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80095b0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80095b4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80095b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80095bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80095c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80095c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80095c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095cc:	d894      	bhi.n	80094f8 <forward_lstm+0x11dc>
 80095ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095d2:	18c3      	adds	r3, r0, r3
 80095d4:	2d00      	cmp	r5, #0
 80095d6:	f000 8085 	beq.w	80096e4 <forward_lstm+0x13c8>
 80095da:	edd4 6a00 	vldr	s13, [r4]
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80095e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	d07a      	beq.n	80096e4 <forward_lstm+0x13c8>
 80095ee:	edd4 6a01 	vldr	s13, [r4, #4]
 80095f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80095f6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80095fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095fe:	2a00      	cmp	r2, #0
 8009600:	d070      	beq.n	80096e4 <forward_lstm+0x13c8>
 8009602:	edd4 6a02 	vldr	s13, [r4, #8]
 8009606:	edd3 7a02 	vldr	s15, [r3, #8]
 800960a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800960e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009612:	2a00      	cmp	r2, #0
 8009614:	d066      	beq.n	80096e4 <forward_lstm+0x13c8>
 8009616:	edd4 6a03 	vldr	s13, [r4, #12]
 800961a:	edd3 7a03 	vldr	s15, [r3, #12]
 800961e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009622:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009626:	2a00      	cmp	r2, #0
 8009628:	d05c      	beq.n	80096e4 <forward_lstm+0x13c8>
 800962a:	edd4 6a04 	vldr	s13, [r4, #16]
 800962e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009636:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800963a:	2a00      	cmp	r2, #0
 800963c:	d052      	beq.n	80096e4 <forward_lstm+0x13c8>
 800963e:	edd4 6a05 	vldr	s13, [r4, #20]
 8009642:	edd3 7a05 	vldr	s15, [r3, #20]
 8009646:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800964a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800964e:	2a00      	cmp	r2, #0
 8009650:	d048      	beq.n	80096e4 <forward_lstm+0x13c8>
 8009652:	edd4 6a06 	vldr	s13, [r4, #24]
 8009656:	edd3 7a06 	vldr	s15, [r3, #24]
 800965a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800965e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009662:	b3fa      	cbz	r2, 80096e4 <forward_lstm+0x13c8>
 8009664:	edd4 6a07 	vldr	s13, [r4, #28]
 8009668:	edd3 7a07 	vldr	s15, [r3, #28]
 800966c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009670:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009674:	b3b2      	cbz	r2, 80096e4 <forward_lstm+0x13c8>
 8009676:	edd4 6a08 	vldr	s13, [r4, #32]
 800967a:	edd3 7a08 	vldr	s15, [r3, #32]
 800967e:	2d09      	cmp	r5, #9
 8009680:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009684:	d02e      	beq.n	80096e4 <forward_lstm+0x13c8>
 8009686:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800968a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800968e:	2d0a      	cmp	r5, #10
 8009690:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009694:	d026      	beq.n	80096e4 <forward_lstm+0x13c8>
 8009696:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800969a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800969e:	2d0b      	cmp	r5, #11
 80096a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096a4:	d01e      	beq.n	80096e4 <forward_lstm+0x13c8>
 80096a6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80096aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80096ae:	2d0c      	cmp	r5, #12
 80096b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096b4:	d016      	beq.n	80096e4 <forward_lstm+0x13c8>
 80096b6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80096ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80096be:	f1b5 020d 	subs.w	r2, r5, #13
 80096c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096c6:	d00d      	beq.n	80096e4 <forward_lstm+0x13c8>
 80096c8:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80096cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096d0:	2a01      	cmp	r2, #1
 80096d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096d6:	d005      	beq.n	80096e4 <forward_lstm+0x13c8>
 80096d8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80096dc:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80096e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096e8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80097f4 <forward_lstm+0x14d8>
 80096ec:	ed01 7a01 	vstr	s14, [r1, #-4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8195 	beq.w	8009a20 <forward_lstm+0x1704>
 80096f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096fa:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 80096fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009702:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8009706:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 800970a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800970e:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8009712:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8009716:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 800971a:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 800971e:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8009722:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8009726:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 800972a:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 800972e:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8009732:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8009736:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800973a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800973e:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8009742:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009746:	f1ab 0b10 	sub.w	fp, fp, #16
 800974a:	f1bb 0f0f 	cmp.w	fp, #15
 800974e:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8009752:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8009756:	eee5 7a25 	vfma.f32	s15, s10, s11
 800975a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800975e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009762:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8009766:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 800976a:	eee4 7a06 	vfma.f32	s15, s8, s12
 800976e:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8009772:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8009776:	eee4 7a85 	vfma.f32	s15, s9, s10
 800977a:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 800977e:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8009782:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009786:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 800978a:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 800978e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009792:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8009796:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800979a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800979e:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80097a2:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80097a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80097aa:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80097ae:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80097b2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80097b6:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 80097ba:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 80097be:	eee0 7a81 	vfma.f32	s15, s1, s2
 80097c2:	eee1 7a82 	vfma.f32	s15, s3, s4
 80097c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80097ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80097ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 80097d2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80097d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80097da:	d894      	bhi.n	8009706 <forward_lstm+0x13ea>
 80097dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097e0:	eb0c 0203 	add.w	r2, ip, r3
 80097e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d07b      	beq.n	80098e4 <forward_lstm+0x15c8>
 80097ec:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 80097f0:	e002      	b.n	80097f8 <forward_lstm+0x14dc>
 80097f2:	bf00      	nop
 80097f4:	00000000 	.word	0x00000000
 80097f8:	ed9b 6a00 	vldr	s12, [fp]
 80097fc:	edd2 7a00 	vldr	s15, [r2]
 8009800:	2b01      	cmp	r3, #1
 8009802:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009806:	d06d      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009808:	ed9b 6a01 	vldr	s12, [fp, #4]
 800980c:	edd2 7a01 	vldr	s15, [r2, #4]
 8009810:	2b02      	cmp	r3, #2
 8009812:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009816:	d065      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009818:	ed9b 6a02 	vldr	s12, [fp, #8]
 800981c:	edd2 7a02 	vldr	s15, [r2, #8]
 8009820:	2b03      	cmp	r3, #3
 8009822:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009826:	d05d      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009828:	ed9b 6a03 	vldr	s12, [fp, #12]
 800982c:	edd2 7a03 	vldr	s15, [r2, #12]
 8009830:	2b04      	cmp	r3, #4
 8009832:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009836:	d055      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009838:	ed9b 6a04 	vldr	s12, [fp, #16]
 800983c:	edd2 7a04 	vldr	s15, [r2, #16]
 8009840:	2b05      	cmp	r3, #5
 8009842:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009846:	d04d      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009848:	ed9b 6a05 	vldr	s12, [fp, #20]
 800984c:	edd2 7a05 	vldr	s15, [r2, #20]
 8009850:	2b06      	cmp	r3, #6
 8009852:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009856:	d045      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009858:	ed9b 6a06 	vldr	s12, [fp, #24]
 800985c:	edd2 7a06 	vldr	s15, [r2, #24]
 8009860:	2b07      	cmp	r3, #7
 8009862:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009866:	d03d      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009868:	ed9b 6a07 	vldr	s12, [fp, #28]
 800986c:	edd2 7a07 	vldr	s15, [r2, #28]
 8009870:	2b08      	cmp	r3, #8
 8009872:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009876:	d035      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009878:	ed9b 6a08 	vldr	s12, [fp, #32]
 800987c:	edd2 7a08 	vldr	s15, [r2, #32]
 8009880:	2b09      	cmp	r3, #9
 8009882:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009886:	d02d      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009888:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 800988c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009890:	2b0a      	cmp	r3, #10
 8009892:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009896:	d025      	beq.n	80098e4 <forward_lstm+0x15c8>
 8009898:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 800989c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80098a0:	2b0b      	cmp	r3, #11
 80098a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098a6:	d01d      	beq.n	80098e4 <forward_lstm+0x15c8>
 80098a8:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 80098ac:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80098b0:	2b0c      	cmp	r3, #12
 80098b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098b6:	d015      	beq.n	80098e4 <forward_lstm+0x15c8>
 80098b8:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 80098bc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80098c0:	3b0d      	subs	r3, #13
 80098c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098c6:	d00d      	beq.n	80098e4 <forward_lstm+0x15c8>
 80098c8:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 80098cc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098d6:	d005      	beq.n	80098e4 <forward_lstm+0x15c8>
 80098d8:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 80098dc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80098e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80098ec:	4418      	add	r0, r3
 80098ee:	ed01 7a01 	vstr	s14, [r1, #-4]
 80098f2:	ecb6 6a01 	vldmia	r6!, {s12}
 80098f6:	ecf9 7a01 	vldmia	r9!, {s15}
 80098fa:	ed5a 6a01 	vldr	s13, [sl, #-4]
 80098fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009902:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009906:	449c      	add	ip, r3
 8009908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009910:	459e      	cmp	lr, r3
 8009912:	ed01 7a01 	vstr	s14, [r1, #-4]
 8009916:	f47f adcc 	bne.w	80094b2 <forward_lstm+0x1196>
 800991a:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 800991e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8009920:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8009924:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8009928:	4608      	mov	r0, r1
 800992a:	ee19 3a90 	vmov	r3, s19
 800992e:	462a      	mov	r2, r5
 8009930:	47a0      	blx	r4
 8009932:	ee1a 3a10 	vmov	r3, s20
 8009936:	462a      	mov	r2, r5
 8009938:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 800993c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800993e:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8009942:	47a0      	blx	r4
 8009944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994c:	6979      	ldr	r1, [r7, #20]
 800994e:	ecf3 7a01 	vldmia	r3!, {s15}
 8009952:	ed92 7a00 	vldr	s14, [r2]
 8009956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800995a:	428b      	cmp	r3, r1
 800995c:	ece2 7a01 	vstmia	r2!, {s15}
 8009960:	d1f5      	bne.n	800994e <forward_lstm+0x1632>
 8009962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009966:	899b      	ldrh	r3, [r3, #12]
 8009968:	b163      	cbz	r3, 8009984 <forward_lstm+0x1668>
 800996a:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 800996e:	2400      	movs	r4, #0
 8009970:	46a8      	mov	r8, r5
 8009972:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8009976:	3401      	adds	r4, #1
 8009978:	2d00      	cmp	r5, #0
 800997a:	d13e      	bne.n	80099fa <forward_lstm+0x16de>
 800997c:	42a3      	cmp	r3, r4
 800997e:	f108 0804 	add.w	r8, r8, #4
 8009982:	dcf6      	bgt.n	8009972 <forward_lstm+0x1656>
 8009984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009986:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800998a:	428a      	cmp	r2, r1
 800998c:	f340 809d 	ble.w	8009aca <forward_lstm+0x17ae>
 8009990:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	440a      	add	r2, r1
 8009998:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800999c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	f2c0 8092 	blt.w	8009aca <forward_lstm+0x17ae>
 80099a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099ae:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80099b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099b6:	f7fe be6b 	b.w	8008690 <forward_lstm+0x374>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4629      	mov	r1, r5
 80099be:	69d8      	ldr	r0, [r3, #28]
 80099c0:	f000 fa66 	bl	8009e90 <st_int8_copy>
 80099c4:	ee19 2a10 	vmov	r2, s18
 80099c8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80099cc:	2000      	movs	r0, #0
 80099ce:	f000 fa03 	bl	8009dd8 <st_int8_fill>
 80099d2:	f7fe bda8 	b.w	8008526 <forward_lstm+0x20a>
 80099d6:	ee19 2a10 	vmov	r2, s18
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f9fc 	bl	8009dd8 <st_int8_fill>
 80099e0:	ee19 2a10 	vmov	r2, s18
 80099e4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80099e8:	4648      	mov	r0, r9
 80099ea:	f1b9 0f00 	cmp.w	r9, #0
 80099ee:	f47e ad91 	bne.w	8008514 <forward_lstm+0x1f8>
 80099f2:	f000 f9f1 	bl	8009dd8 <st_int8_fill>
 80099f6:	f7fe bd8f 	b.w	8008518 <forward_lstm+0x1fc>
 80099fa:	f8d8 a000 	ldr.w	sl, [r8]
 80099fe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8009a02:	ee19 2a10 	vmov	r2, s18
 8009a06:	4651      	mov	r1, sl
 8009a08:	f000 fa42 	bl	8009e90 <st_int8_copy>
 8009a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8009a16:	42a3      	cmp	r3, r4
 8009a18:	f848 5b04 	str.w	r5, [r8], #4
 8009a1c:	dca9      	bgt.n	8009972 <forward_lstm+0x1656>
 8009a1e:	e7b1      	b.n	8009984 <forward_lstm+0x1668>
 8009a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a24:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8009a28:	4662      	mov	r2, ip
 8009a2a:	e6e5      	b.n	80097f8 <forward_lstm+0x14dc>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	e5d1      	b.n	80095d4 <forward_lstm+0x12b8>
 8009a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a34:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8009a38:	465a      	mov	r2, fp
 8009a3a:	e44d      	b.n	80092d8 <forward_lstm+0xfbc>
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a40:	f7ff bb54 	b.w	80090ec <forward_lstm+0xdd0>
 8009a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a48:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8009a4c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009a50:	f7ff ba3a 	b.w	8008ec8 <forward_lstm+0xbac>
 8009a54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a58:	f7ff b93a 	b.w	8008cd0 <forward_lstm+0x9b4>
 8009a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a60:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8009a64:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009a68:	f7ff b822 	b.w	8008ab0 <forward_lstm+0x794>
 8009a6c:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8009a70:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8009a74:	4653      	mov	r3, sl
 8009a76:	f7fe bf23 	b.w	80088c0 <forward_lstm+0x5a4>
 8009a7a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8009a7e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8009a80:	ee19 3a90 	vmov	r3, s19
 8009a84:	4608      	mov	r0, r1
 8009a86:	4690      	mov	r8, r2
 8009a88:	47a0      	blx	r4
 8009a8a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8009a8e:	ee19 3a90 	vmov	r3, s19
 8009a92:	4642      	mov	r2, r8
 8009a94:	4608      	mov	r0, r1
 8009a96:	47a0      	blx	r4
 8009a98:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8009a9c:	ee1a 3a90 	vmov	r3, s21
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8009aa6:	47a8      	blx	r5
 8009aa8:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8009aac:	ee19 3a90 	vmov	r3, s19
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	47a0      	blx	r4
 8009ab6:	ee1a 3a10 	vmov	r3, s20
 8009aba:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009abc:	4642      	mov	r2, r8
 8009abe:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8009ac2:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8009ac6:	47a0      	blx	r4
 8009ac8:	e74b      	b.n	8009962 <forward_lstm+0x1646>
 8009aca:	b353      	cbz	r3, 8009b22 <forward_lstm+0x1806>
 8009acc:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8009ad0:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 8009ad4:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8009ad8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009adc:	ee19 ba10 	vmov	fp, s18
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	e00b      	b.n	8009afc <forward_lstm+0x17e0>
 8009ae4:	6821      	ldr	r1, [r4, #0]
 8009ae6:	465a      	mov	r2, fp
 8009ae8:	4648      	mov	r0, r9
 8009aea:	f000 f9d1 	bl	8009e90 <st_int8_copy>
 8009aee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009af2:	3601      	adds	r6, #1
 8009af4:	42b3      	cmp	r3, r6
 8009af6:	f104 0404 	add.w	r4, r4, #4
 8009afa:	dd12      	ble.n	8009b22 <forward_lstm+0x1806>
 8009afc:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d1f6      	bne.n	8009af2 <forward_lstm+0x17d6>
 8009b04:	3b01      	subs	r3, #1
 8009b06:	42b3      	cmp	r3, r6
 8009b08:	d1ec      	bne.n	8009ae4 <forward_lstm+0x17c8>
 8009b0a:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0e8      	beq.n	8009ae4 <forward_lstm+0x17c8>
 8009b12:	6821      	ldr	r1, [r4, #0]
 8009b14:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009b16:	465a      	mov	r2, fp
 8009b18:	f000 f9ba 	bl	8009e90 <st_int8_copy>
 8009b1c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009b20:	e7e7      	b.n	8009af2 <forward_lstm+0x17d6>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	b18b      	cbz	r3, 8009b4a <forward_lstm+0x182e>
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	69dc      	ldr	r4, [r3, #28]
 8009b2a:	b174      	cbz	r4, 8009b4a <forward_lstm+0x182e>
 8009b2c:	ee19 5a10 	vmov	r5, s18
 8009b30:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009b32:	ee19 2a10 	vmov	r2, s18
 8009b36:	4621      	mov	r1, r4
 8009b38:	f000 f9aa 	bl	8009e90 <st_int8_copy>
 8009b3c:	ee19 2a10 	vmov	r2, s18
 8009b40:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8009b44:	1961      	adds	r1, r4, r5
 8009b46:	f000 f9a3 	bl	8009e90 <st_int8_copy>
 8009b4a:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	ecbd 8b06 	vpop	{d8-d10}
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b60:	4613      	mov	r3, r2
 8009b62:	f7fe bd00 	b.w	8008566 <forward_lstm+0x24a>
 8009b66:	ee0a 0a10 	vmov	s20, r0
 8009b6a:	ee09 0a90 	vmov	s19, r0
 8009b6e:	ee0a 0a90 	vmov	s21, r0
 8009b72:	4681      	mov	r9, r0
 8009b74:	f7fe bc56 	b.w	8008424 <forward_lstm+0x108>
 8009b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8009b7c:	4683      	mov	fp, r0
 8009b7e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009b82:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8009b86:	f7fe bbf4 	b.w	8008372 <forward_lstm+0x56>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	deff      	udf	#255	; 0xff

08009b90 <forward_lite_dense_if32of32wf32>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8009b98:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8009b9c:	4287      	cmp	r7, r0
 8009b9e:	f240 8106 	bls.w	8009dae <forward_lite_dense_if32of32wf32+0x21e>
 8009ba2:	f1a6 0810 	sub.w	r8, r6, #16
 8009ba6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009baa:	f108 0801 	add.w	r8, r8, #1
 8009bae:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009bb2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8009bb6:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8009bba:	4605      	mov	r5, r0
 8009bbc:	f006 0a0f 	and.w	sl, r6, #15
 8009bc0:	2e0f      	cmp	r6, #15
 8009bc2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009dd4 <forward_lite_dense_if32of32wf32+0x244>
 8009bc6:	f240 8101 	bls.w	8009dcc <forward_lite_dense_if32of32wf32+0x23c>
 8009bca:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8009bce:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8009bd2:	46b6      	mov	lr, r6
 8009bd4:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8009bd8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8009bdc:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8009be0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8009be4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8009be8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8009bec:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8009bf0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8009bf4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8009bf8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8009bfc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8009c00:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8009c04:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8009c08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c0c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8009c10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009c14:	f1ae 0e10 	sub.w	lr, lr, #16
 8009c18:	f1be 0f0f 	cmp.w	lr, #15
 8009c1c:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8009c20:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8009c24:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009c28:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009c2c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009c30:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8009c34:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8009c38:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009c3c:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8009c40:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8009c44:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009c48:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8009c4c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8009c50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009c54:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8009c58:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8009c5c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009c60:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8009c64:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8009c68:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009c6c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8009c70:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8009c74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009c78:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8009c7c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8009c80:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009c84:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8009c88:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8009c8c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009c90:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009c94:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009c98:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009c9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009ca0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ca8:	d894      	bhi.n	8009bd4 <forward_lite_dense_if32of32wf32+0x44>
 8009caa:	eb02 0e0b 	add.w	lr, r2, fp
 8009cae:	4654      	mov	r4, sl
 8009cb0:	46c4      	mov	ip, r8
 8009cb2:	2c00      	cmp	r4, #0
 8009cb4:	d075      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009cb6:	eddc 6a00 	vldr	s13, [ip]
 8009cba:	edde 7a00 	vldr	s15, [lr]
 8009cbe:	2c01      	cmp	r4, #1
 8009cc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cc4:	d06d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009cc6:	eddc 6a01 	vldr	s13, [ip, #4]
 8009cca:	edde 7a01 	vldr	s15, [lr, #4]
 8009cce:	2c02      	cmp	r4, #2
 8009cd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cd4:	d065      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009cd6:	eddc 6a02 	vldr	s13, [ip, #8]
 8009cda:	edde 7a02 	vldr	s15, [lr, #8]
 8009cde:	2c03      	cmp	r4, #3
 8009ce0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ce4:	d05d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009ce6:	eddc 6a03 	vldr	s13, [ip, #12]
 8009cea:	edde 7a03 	vldr	s15, [lr, #12]
 8009cee:	2c04      	cmp	r4, #4
 8009cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cf4:	d055      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009cf6:	eddc 6a04 	vldr	s13, [ip, #16]
 8009cfa:	edde 7a04 	vldr	s15, [lr, #16]
 8009cfe:	2c05      	cmp	r4, #5
 8009d00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d04:	d04d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d06:	eddc 6a05 	vldr	s13, [ip, #20]
 8009d0a:	edde 7a05 	vldr	s15, [lr, #20]
 8009d0e:	2c06      	cmp	r4, #6
 8009d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d14:	d045      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d16:	eddc 6a06 	vldr	s13, [ip, #24]
 8009d1a:	edde 7a06 	vldr	s15, [lr, #24]
 8009d1e:	2c07      	cmp	r4, #7
 8009d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d24:	d03d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d26:	eddc 6a07 	vldr	s13, [ip, #28]
 8009d2a:	edde 7a07 	vldr	s15, [lr, #28]
 8009d2e:	2c08      	cmp	r4, #8
 8009d30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d34:	d035      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d36:	eddc 6a08 	vldr	s13, [ip, #32]
 8009d3a:	edde 7a08 	vldr	s15, [lr, #32]
 8009d3e:	2c09      	cmp	r4, #9
 8009d40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d44:	d02d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d46:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8009d4a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8009d4e:	2c0a      	cmp	r4, #10
 8009d50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d54:	d025      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d56:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8009d5a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8009d5e:	2c0b      	cmp	r4, #11
 8009d60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d64:	d01d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d66:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8009d6a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8009d6e:	2c0c      	cmp	r4, #12
 8009d70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d74:	d015      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d76:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8009d7a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8009d7e:	3c0d      	subs	r4, #13
 8009d80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d84:	d00d      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d86:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8009d8a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8009d8e:	2c01      	cmp	r4, #1
 8009d90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d94:	d005      	beq.n	8009da2 <forward_lite_dense_if32of32wf32+0x212>
 8009d96:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8009d9a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8009d9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009da2:	444a      	add	r2, r9
 8009da4:	eca5 7a01 	vstmia	r5!, {s14}
 8009da8:	42af      	cmp	r7, r5
 8009daa:	f63f af09 	bhi.w	8009bc0 <forward_lite_dense_if32of32wf32+0x30>
 8009dae:	b15b      	cbz	r3, 8009dc8 <forward_lite_dense_if32of32wf32+0x238>
 8009db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009db2:	b14a      	cbz	r2, 8009dc8 <forward_lite_dense_if32of32wf32+0x238>
 8009db4:	edd0 7a00 	vldr	s15, [r0]
 8009db8:	ecb3 7a01 	vldmia	r3!, {s14}
 8009dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dc0:	ece0 7a01 	vstmia	r0!, {s15}
 8009dc4:	4287      	cmp	r7, r0
 8009dc6:	d1f5      	bne.n	8009db4 <forward_lite_dense_if32of32wf32+0x224>
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dcc:	4634      	mov	r4, r6
 8009dce:	4696      	mov	lr, r2
 8009dd0:	468c      	mov	ip, r1
 8009dd2:	e76e      	b.n	8009cb2 <forward_lite_dense_if32of32wf32+0x122>
 8009dd4:	00000000 	.word	0x00000000

08009dd8 <st_int8_fill>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	b2c3      	uxtb	r3, r0
 8009ddc:	0204      	lsls	r4, r0, #8
 8009dde:	b2a4      	uxth	r4, r4
 8009de0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009de4:	4323      	orrs	r3, r4
 8009de6:	0404      	lsls	r4, r0, #16
 8009de8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8009dec:	431c      	orrs	r4, r3
 8009dee:	078b      	lsls	r3, r1, #30
 8009df0:	468c      	mov	ip, r1
 8009df2:	d007      	beq.n	8009e04 <st_int8_fill+0x2c>
 8009df4:	b3a2      	cbz	r2, 8009e60 <st_int8_fill+0x88>
 8009df6:	f80c 0b01 	strb.w	r0, [ip], #1
 8009dfa:	f01c 0f03 	tst.w	ip, #3
 8009dfe:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e02:	d1f7      	bne.n	8009df4 <st_int8_fill+0x1c>
 8009e04:	0911      	lsrs	r1, r2, #4
 8009e06:	d03e      	beq.n	8009e86 <st_int8_fill+0xae>
 8009e08:	1e4b      	subs	r3, r1, #1
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d929      	bls.n	8009e62 <st_int8_fill+0x8a>
 8009e0e:	f01c 0f07 	tst.w	ip, #7
 8009e12:	d126      	bne.n	8009e62 <st_int8_fill+0x8a>
 8009e14:	f10c 0310 	add.w	r3, ip, #16
 8009e18:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8009e1c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8009e20:	e943 4404 	strd	r4, r4, [r3, #-16]
 8009e24:	e943 4402 	strd	r4, r4, [r3, #-8]
 8009e28:	3310      	adds	r3, #16
 8009e2a:	428b      	cmp	r3, r1
 8009e2c:	d1f8      	bne.n	8009e20 <st_int8_fill+0x48>
 8009e2e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009e32:	44f4      	add	ip, lr
 8009e34:	f002 0203 	and.w	r2, r2, #3
 8009e38:	b15b      	cbz	r3, 8009e52 <st_int8_fill+0x7a>
 8009e3a:	1e59      	subs	r1, r3, #1
 8009e3c:	f8cc 4000 	str.w	r4, [ip]
 8009e40:	d005      	beq.n	8009e4e <st_int8_fill+0x76>
 8009e42:	2901      	cmp	r1, #1
 8009e44:	f8cc 4004 	str.w	r4, [ip, #4]
 8009e48:	bf18      	it	ne
 8009e4a:	f8cc 4008 	strne.w	r4, [ip, #8]
 8009e4e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8009e52:	b12a      	cbz	r2, 8009e60 <st_int8_fill+0x88>
 8009e54:	4601      	mov	r1, r0
 8009e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e5a:	4660      	mov	r0, ip
 8009e5c:	f000 bf63 	b.w	800ad26 <memset>
 8009e60:	bd10      	pop	{r4, pc}
 8009e62:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8009e66:	4663      	mov	r3, ip
 8009e68:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8009e6c:	601c      	str	r4, [r3, #0]
 8009e6e:	605c      	str	r4, [r3, #4]
 8009e70:	609c      	str	r4, [r3, #8]
 8009e72:	60dc      	str	r4, [r3, #12]
 8009e74:	3310      	adds	r3, #16
 8009e76:	4299      	cmp	r1, r3
 8009e78:	d1f8      	bne.n	8009e6c <st_int8_fill+0x94>
 8009e7a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009e7e:	44f4      	add	ip, lr
 8009e80:	f002 0203 	and.w	r2, r2, #3
 8009e84:	e7d8      	b.n	8009e38 <st_int8_fill+0x60>
 8009e86:	0893      	lsrs	r3, r2, #2
 8009e88:	f002 0203 	and.w	r2, r2, #3
 8009e8c:	e7d4      	b.n	8009e38 <st_int8_fill+0x60>
 8009e8e:	bf00      	nop

08009e90 <st_int8_copy>:
 8009e90:	4288      	cmp	r0, r1
 8009e92:	d057      	beq.n	8009f44 <st_int8_copy+0xb4>
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d055      	beq.n	8009f44 <st_int8_copy+0xb4>
 8009e98:	4288      	cmp	r0, r1
 8009e9a:	d354      	bcc.n	8009f46 <st_int8_copy+0xb6>
 8009e9c:	078b      	lsls	r3, r1, #30
 8009e9e:	d102      	bne.n	8009ea6 <st_int8_copy+0x16>
 8009ea0:	e009      	b.n	8009eb6 <st_int8_copy+0x26>
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d05c      	beq.n	8009f60 <st_int8_copy+0xd0>
 8009ea6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009eaa:	f801 3b01 	strb.w	r3, [r1], #1
 8009eae:	078b      	lsls	r3, r1, #30
 8009eb0:	f102 32ff 	add.w	r2, r2, #4294967295
 8009eb4:	d1f5      	bne.n	8009ea2 <st_int8_copy+0x12>
 8009eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eba:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009ebe:	d069      	beq.n	8009f94 <st_int8_copy+0x104>
 8009ec0:	ea41 0300 	orr.w	r3, r1, r0
 8009ec4:	075b      	lsls	r3, r3, #29
 8009ec6:	d14c      	bne.n	8009f62 <st_int8_copy+0xd2>
 8009ec8:	f10e 33ff 	add.w	r3, lr, #4294967295
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d948      	bls.n	8009f62 <st_int8_copy+0xd2>
 8009ed0:	f100 0310 	add.w	r3, r0, #16
 8009ed4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009ed8:	f101 0c10 	add.w	ip, r1, #16
 8009edc:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009ee0:	ed13 6b04 	vldr	d6, [r3, #-16]
 8009ee4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009ee8:	3310      	adds	r3, #16
 8009eea:	4573      	cmp	r3, lr
 8009eec:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8009ef0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8009ef4:	f10c 0c10 	add.w	ip, ip, #16
 8009ef8:	d1f2      	bne.n	8009ee0 <st_int8_copy+0x50>
 8009efa:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009efe:	4421      	add	r1, r4
 8009f00:	4420      	add	r0, r4
 8009f02:	f002 0203 	and.w	r2, r2, #3
 8009f06:	b16b      	cbz	r3, 8009f24 <st_int8_copy+0x94>
 8009f08:	6804      	ldr	r4, [r0, #0]
 8009f0a:	600c      	str	r4, [r1, #0]
 8009f0c:	1e5c      	subs	r4, r3, #1
 8009f0e:	d005      	beq.n	8009f1c <st_int8_copy+0x8c>
 8009f10:	6845      	ldr	r5, [r0, #4]
 8009f12:	604d      	str	r5, [r1, #4]
 8009f14:	2c01      	cmp	r4, #1
 8009f16:	bf1c      	itt	ne
 8009f18:	6884      	ldrne	r4, [r0, #8]
 8009f1a:	608c      	strne	r4, [r1, #8]
 8009f1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009f24:	b162      	cbz	r2, 8009f40 <st_int8_copy+0xb0>
 8009f26:	f990 3000 	ldrsb.w	r3, [r0]
 8009f2a:	700b      	strb	r3, [r1, #0]
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	d007      	beq.n	8009f40 <st_int8_copy+0xb0>
 8009f30:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009f34:	704b      	strb	r3, [r1, #1]
 8009f36:	2a01      	cmp	r2, #1
 8009f38:	bf1c      	itt	ne
 8009f3a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8009f3e:	708b      	strbne	r3, [r1, #2]
 8009f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f44:	4770      	bx	lr
 8009f46:	1883      	adds	r3, r0, r2
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	d9a7      	bls.n	8009e9c <st_int8_copy+0xc>
 8009f4c:	4283      	cmp	r3, r0
 8009f4e:	440a      	add	r2, r1
 8009f50:	d9f8      	bls.n	8009f44 <st_int8_copy+0xb4>
 8009f52:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8009f56:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009f5a:	4283      	cmp	r3, r0
 8009f5c:	d1f9      	bne.n	8009f52 <st_int8_copy+0xc2>
 8009f5e:	4770      	bx	lr
 8009f60:	4770      	bx	lr
 8009f62:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009f66:	460b      	mov	r3, r1
 8009f68:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8009f6c:	4684      	mov	ip, r0
 8009f6e:	f8dc 7000 	ldr.w	r7, [ip]
 8009f72:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009f76:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8009f7a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8009f7e:	f8c3 800c 	str.w	r8, [r3, #12]
 8009f82:	601f      	str	r7, [r3, #0]
 8009f84:	605e      	str	r6, [r3, #4]
 8009f86:	609d      	str	r5, [r3, #8]
 8009f88:	3310      	adds	r3, #16
 8009f8a:	459e      	cmp	lr, r3
 8009f8c:	f10c 0c10 	add.w	ip, ip, #16
 8009f90:	d1ed      	bne.n	8009f6e <st_int8_copy+0xde>
 8009f92:	e7b2      	b.n	8009efa <st_int8_copy+0x6a>
 8009f94:	0893      	lsrs	r3, r2, #2
 8009f96:	f002 0203 	and.w	r2, r2, #3
 8009f9a:	e7b4      	b.n	8009f06 <st_int8_copy+0x76>

08009f9c <ai_array_to_buffer_fmt>:
 8009f9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d050      	beq.n	800a046 <ai_array_to_buffer_fmt+0xaa>
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <ai_array_to_buffer_fmt+0xb4>)
 8009fa6:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d00b      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009fae:	dc1c      	bgt.n	8009fea <ai_array_to_buffer_fmt+0x4e>
 8009fb0:	4b28      	ldr	r3, [pc, #160]	; (800a054 <ai_array_to_buffer_fmt+0xb8>)
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d007      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009fb6:	dd0b      	ble.n	8009fd0 <ai_array_to_buffer_fmt+0x34>
 8009fb8:	4b27      	ldr	r3, [pc, #156]	; (800a058 <ai_array_to_buffer_fmt+0xbc>)
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d003      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009fbe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d131      	bne.n	800a02a <ai_array_to_buffer_fmt+0x8e>
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009fcc:	4318      	orrs	r0, r3
 8009fce:	4770      	bx	lr
 8009fd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d0f6      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009fd8:	dd2c      	ble.n	800a034 <ai_array_to_buffer_fmt+0x98>
 8009fda:	4b20      	ldr	r3, [pc, #128]	; (800a05c <ai_array_to_buffer_fmt+0xc0>)
 8009fdc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	bf18      	it	ne
 8009fe4:	2340      	movne	r3, #64	; 0x40
 8009fe6:	4318      	orrs	r0, r3
 8009fe8:	4770      	bx	lr
 8009fea:	4b1d      	ldr	r3, [pc, #116]	; (800a060 <ai_array_to_buffer_fmt+0xc4>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d0ea      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009ff0:	dd0e      	ble.n	800a010 <ai_array_to_buffer_fmt+0x74>
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <ai_array_to_buffer_fmt+0xc8>)
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d0e6      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 8009ff8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d0e2      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 800a000:	4b19      	ldr	r3, [pc, #100]	; (800a068 <ai_array_to_buffer_fmt+0xcc>)
 800a002:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a006:	429a      	cmp	r2, r3
 800a008:	bf18      	it	ne
 800a00a:	2340      	movne	r3, #64	; 0x40
 800a00c:	4318      	orrs	r0, r3
 800a00e:	4770      	bx	lr
 800a010:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a014:	429a      	cmp	r2, r3
 800a016:	d0d6      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 800a018:	3307      	adds	r3, #7
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d0d3      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 800a01e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800a022:	429a      	cmp	r2, r3
 800a024:	bf18      	it	ne
 800a026:	2340      	movne	r3, #64	; 0x40
 800a028:	e7ce      	b.n	8009fc8 <ai_array_to_buffer_fmt+0x2c>
 800a02a:	4b10      	ldr	r3, [pc, #64]	; (800a06c <ai_array_to_buffer_fmt+0xd0>)
 800a02c:	429a      	cmp	r2, r3
 800a02e:	bf18      	it	ne
 800a030:	2340      	movne	r3, #64	; 0x40
 800a032:	e7c9      	b.n	8009fc8 <ai_array_to_buffer_fmt+0x2c>
 800a034:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a038:	429a      	cmp	r2, r3
 800a03a:	d0c4      	beq.n	8009fc6 <ai_array_to_buffer_fmt+0x2a>
 800a03c:	3380      	adds	r3, #128	; 0x80
 800a03e:	429a      	cmp	r2, r3
 800a040:	bf18      	it	ne
 800a042:	2340      	movne	r3, #64	; 0x40
 800a044:	e7c0      	b.n	8009fc8 <ai_array_to_buffer_fmt+0x2c>
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <ai_array_to_buffer_fmt+0xd4>)
 800a048:	4003      	ands	r3, r0
 800a04a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a04e:	e7bb      	b.n	8009fc8 <ai_array_to_buffer_fmt+0x2c>
 800a050:	00840040 	.word	0x00840040
 800a054:	00040840 	.word	0x00040840
 800a058:	00041040 	.word	0x00041040
 800a05c:	00040447 	.word	0x00040447
 800a060:	00840840 	.word	0x00840840
 800a064:	00841040 	.word	0x00841040
 800a068:	0084084f 	.word	0x0084084f
 800a06c:	0004084f 	.word	0x0004084f
 800a070:	00803fff 	.word	0x00803fff

0800a074 <ai_array_get_byte_size>:
 800a074:	b319      	cbz	r1, 800a0be <ai_array_get_byte_size+0x4a>
 800a076:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a07a:	fb03 f101 	mul.w	r1, r3, r1
 800a07e:	3107      	adds	r1, #7
 800a080:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800a084:	f021 0307 	bic.w	r3, r1, #7
 800a088:	2a04      	cmp	r2, #4
 800a08a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800a08e:	fa23 f101 	lsr.w	r1, r3, r1
 800a092:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800a096:	d00b      	beq.n	800a0b0 <ai_array_get_byte_size+0x3c>
 800a098:	2a08      	cmp	r2, #8
 800a09a:	d002      	beq.n	800a0a2 <ai_array_get_byte_size+0x2e>
 800a09c:	3107      	adds	r1, #7
 800a09e:	08c8      	lsrs	r0, r1, #3
 800a0a0:	4770      	bx	lr
 800a0a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a0a6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a0aa:	3107      	adds	r1, #7
 800a0ac:	08c8      	lsrs	r0, r1, #3
 800a0ae:	4770      	bx	lr
 800a0b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a0b4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a0b8:	3107      	adds	r1, #7
 800a0ba:	08c8      	lsrs	r0, r1, #3
 800a0bc:	4770      	bx	lr
 800a0be:	4608      	mov	r0, r1
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <ai_array_get_data_byte_size>:
 800a0c4:	b169      	cbz	r1, 800a0e2 <ai_array_get_data_byte_size+0x1e>
 800a0c6:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800a0ca:	fb02 f101 	mul.w	r1, r2, r1
 800a0ce:	1dcb      	adds	r3, r1, #7
 800a0d0:	f023 0307 	bic.w	r3, r3, #7
 800a0d4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a0d8:	fa23 f000 	lsr.w	r0, r3, r0
 800a0dc:	3007      	adds	r0, #7
 800a0de:	08c0      	lsrs	r0, r0, #3
 800a0e0:	4770      	bx	lr
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop

0800a0e8 <malloc>:
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <malloc+0xc>)
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	f000 b823 	b.w	800a138 <_malloc_r>
 800a0f2:	bf00      	nop
 800a0f4:	200005dc 	.word	0x200005dc

0800a0f8 <sbrk_aligned>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	4e0e      	ldr	r6, [pc, #56]	; (800a134 <sbrk_aligned+0x3c>)
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	6831      	ldr	r1, [r6, #0]
 800a100:	4605      	mov	r5, r0
 800a102:	b911      	cbnz	r1, 800a10a <sbrk_aligned+0x12>
 800a104:	f000 fe62 	bl	800adcc <_sbrk_r>
 800a108:	6030      	str	r0, [r6, #0]
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 fe5d 	bl	800adcc <_sbrk_r>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d00a      	beq.n	800a12c <sbrk_aligned+0x34>
 800a116:	1cc4      	adds	r4, r0, #3
 800a118:	f024 0403 	bic.w	r4, r4, #3
 800a11c:	42a0      	cmp	r0, r4
 800a11e:	d007      	beq.n	800a130 <sbrk_aligned+0x38>
 800a120:	1a21      	subs	r1, r4, r0
 800a122:	4628      	mov	r0, r5
 800a124:	f000 fe52 	bl	800adcc <_sbrk_r>
 800a128:	3001      	adds	r0, #1
 800a12a:	d101      	bne.n	800a130 <sbrk_aligned+0x38>
 800a12c:	f04f 34ff 	mov.w	r4, #4294967295
 800a130:	4620      	mov	r0, r4
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	20001280 	.word	0x20001280

0800a138 <_malloc_r>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	1ccd      	adds	r5, r1, #3
 800a13e:	f025 0503 	bic.w	r5, r5, #3
 800a142:	3508      	adds	r5, #8
 800a144:	2d0c      	cmp	r5, #12
 800a146:	bf38      	it	cc
 800a148:	250c      	movcc	r5, #12
 800a14a:	2d00      	cmp	r5, #0
 800a14c:	4607      	mov	r7, r0
 800a14e:	db01      	blt.n	800a154 <_malloc_r+0x1c>
 800a150:	42a9      	cmp	r1, r5
 800a152:	d905      	bls.n	800a160 <_malloc_r+0x28>
 800a154:	230c      	movs	r3, #12
 800a156:	603b      	str	r3, [r7, #0]
 800a158:	2600      	movs	r6, #0
 800a15a:	4630      	mov	r0, r6
 800a15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a160:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a234 <_malloc_r+0xfc>
 800a164:	f000 f868 	bl	800a238 <__malloc_lock>
 800a168:	f8d8 3000 	ldr.w	r3, [r8]
 800a16c:	461c      	mov	r4, r3
 800a16e:	bb5c      	cbnz	r4, 800a1c8 <_malloc_r+0x90>
 800a170:	4629      	mov	r1, r5
 800a172:	4638      	mov	r0, r7
 800a174:	f7ff ffc0 	bl	800a0f8 <sbrk_aligned>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	4604      	mov	r4, r0
 800a17c:	d155      	bne.n	800a22a <_malloc_r+0xf2>
 800a17e:	f8d8 4000 	ldr.w	r4, [r8]
 800a182:	4626      	mov	r6, r4
 800a184:	2e00      	cmp	r6, #0
 800a186:	d145      	bne.n	800a214 <_malloc_r+0xdc>
 800a188:	2c00      	cmp	r4, #0
 800a18a:	d048      	beq.n	800a21e <_malloc_r+0xe6>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	4631      	mov	r1, r6
 800a190:	4638      	mov	r0, r7
 800a192:	eb04 0903 	add.w	r9, r4, r3
 800a196:	f000 fe19 	bl	800adcc <_sbrk_r>
 800a19a:	4581      	cmp	r9, r0
 800a19c:	d13f      	bne.n	800a21e <_malloc_r+0xe6>
 800a19e:	6821      	ldr	r1, [r4, #0]
 800a1a0:	1a6d      	subs	r5, r5, r1
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff ffa7 	bl	800a0f8 <sbrk_aligned>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d037      	beq.n	800a21e <_malloc_r+0xe6>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	442b      	add	r3, r5
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d038      	beq.n	800a22e <_malloc_r+0xf6>
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	42a2      	cmp	r2, r4
 800a1c0:	d12b      	bne.n	800a21a <_malloc_r+0xe2>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	605a      	str	r2, [r3, #4]
 800a1c6:	e00f      	b.n	800a1e8 <_malloc_r+0xb0>
 800a1c8:	6822      	ldr	r2, [r4, #0]
 800a1ca:	1b52      	subs	r2, r2, r5
 800a1cc:	d41f      	bmi.n	800a20e <_malloc_r+0xd6>
 800a1ce:	2a0b      	cmp	r2, #11
 800a1d0:	d917      	bls.n	800a202 <_malloc_r+0xca>
 800a1d2:	1961      	adds	r1, r4, r5
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	6025      	str	r5, [r4, #0]
 800a1d8:	bf18      	it	ne
 800a1da:	6059      	strne	r1, [r3, #4]
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	bf08      	it	eq
 800a1e0:	f8c8 1000 	streq.w	r1, [r8]
 800a1e4:	5162      	str	r2, [r4, r5]
 800a1e6:	604b      	str	r3, [r1, #4]
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f104 060b 	add.w	r6, r4, #11
 800a1ee:	f000 f829 	bl	800a244 <__malloc_unlock>
 800a1f2:	f026 0607 	bic.w	r6, r6, #7
 800a1f6:	1d23      	adds	r3, r4, #4
 800a1f8:	1af2      	subs	r2, r6, r3
 800a1fa:	d0ae      	beq.n	800a15a <_malloc_r+0x22>
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	50a3      	str	r3, [r4, r2]
 800a200:	e7ab      	b.n	800a15a <_malloc_r+0x22>
 800a202:	42a3      	cmp	r3, r4
 800a204:	6862      	ldr	r2, [r4, #4]
 800a206:	d1dd      	bne.n	800a1c4 <_malloc_r+0x8c>
 800a208:	f8c8 2000 	str.w	r2, [r8]
 800a20c:	e7ec      	b.n	800a1e8 <_malloc_r+0xb0>
 800a20e:	4623      	mov	r3, r4
 800a210:	6864      	ldr	r4, [r4, #4]
 800a212:	e7ac      	b.n	800a16e <_malloc_r+0x36>
 800a214:	4634      	mov	r4, r6
 800a216:	6876      	ldr	r6, [r6, #4]
 800a218:	e7b4      	b.n	800a184 <_malloc_r+0x4c>
 800a21a:	4613      	mov	r3, r2
 800a21c:	e7cc      	b.n	800a1b8 <_malloc_r+0x80>
 800a21e:	230c      	movs	r3, #12
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	4638      	mov	r0, r7
 800a224:	f000 f80e 	bl	800a244 <__malloc_unlock>
 800a228:	e797      	b.n	800a15a <_malloc_r+0x22>
 800a22a:	6025      	str	r5, [r4, #0]
 800a22c:	e7dc      	b.n	800a1e8 <_malloc_r+0xb0>
 800a22e:	605b      	str	r3, [r3, #4]
 800a230:	deff      	udf	#255	; 0xff
 800a232:	bf00      	nop
 800a234:	2000127c 	.word	0x2000127c

0800a238 <__malloc_lock>:
 800a238:	4801      	ldr	r0, [pc, #4]	; (800a240 <__malloc_lock+0x8>)
 800a23a:	f000 be14 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800a23e:	bf00      	nop
 800a240:	200013c4 	.word	0x200013c4

0800a244 <__malloc_unlock>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__malloc_unlock+0x8>)
 800a246:	f000 be0f 	b.w	800ae68 <__retarget_lock_release_recursive>
 800a24a:	bf00      	nop
 800a24c:	200013c4 	.word	0x200013c4

0800a250 <__cvt>:
 800a250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	ec55 4b10 	vmov	r4, r5, d0
 800a258:	2d00      	cmp	r5, #0
 800a25a:	460e      	mov	r6, r1
 800a25c:	4619      	mov	r1, r3
 800a25e:	462b      	mov	r3, r5
 800a260:	bfbb      	ittet	lt
 800a262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a266:	461d      	movlt	r5, r3
 800a268:	2300      	movge	r3, #0
 800a26a:	232d      	movlt	r3, #45	; 0x2d
 800a26c:	700b      	strb	r3, [r1, #0]
 800a26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a270:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a274:	4691      	mov	r9, r2
 800a276:	f023 0820 	bic.w	r8, r3, #32
 800a27a:	bfbc      	itt	lt
 800a27c:	4622      	movlt	r2, r4
 800a27e:	4614      	movlt	r4, r2
 800a280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a284:	d005      	beq.n	800a292 <__cvt+0x42>
 800a286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a28a:	d100      	bne.n	800a28e <__cvt+0x3e>
 800a28c:	3601      	adds	r6, #1
 800a28e:	2102      	movs	r1, #2
 800a290:	e000      	b.n	800a294 <__cvt+0x44>
 800a292:	2103      	movs	r1, #3
 800a294:	ab03      	add	r3, sp, #12
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	ab02      	add	r3, sp, #8
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	ec45 4b10 	vmov	d0, r4, r5
 800a2a0:	4653      	mov	r3, sl
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	f000 fe78 	bl	800af98 <_dtoa_r>
 800a2a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	d102      	bne.n	800a2b6 <__cvt+0x66>
 800a2b0:	f019 0f01 	tst.w	r9, #1
 800a2b4:	d022      	beq.n	800a2fc <__cvt+0xac>
 800a2b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2ba:	eb07 0906 	add.w	r9, r7, r6
 800a2be:	d110      	bne.n	800a2e2 <__cvt+0x92>
 800a2c0:	783b      	ldrb	r3, [r7, #0]
 800a2c2:	2b30      	cmp	r3, #48	; 0x30
 800a2c4:	d10a      	bne.n	800a2dc <__cvt+0x8c>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f6 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d2:	b918      	cbnz	r0, 800a2dc <__cvt+0x8c>
 800a2d4:	f1c6 0601 	rsb	r6, r6, #1
 800a2d8:	f8ca 6000 	str.w	r6, [sl]
 800a2dc:	f8da 3000 	ldr.w	r3, [sl]
 800a2e0:	4499      	add	r9, r3
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f6 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ee:	b108      	cbz	r0, 800a2f4 <__cvt+0xa4>
 800a2f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2f4:	2230      	movs	r2, #48	; 0x30
 800a2f6:	9b03      	ldr	r3, [sp, #12]
 800a2f8:	454b      	cmp	r3, r9
 800a2fa:	d307      	bcc.n	800a30c <__cvt+0xbc>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a300:	1bdb      	subs	r3, r3, r7
 800a302:	4638      	mov	r0, r7
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	b004      	add	sp, #16
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	1c59      	adds	r1, r3, #1
 800a30e:	9103      	str	r1, [sp, #12]
 800a310:	701a      	strb	r2, [r3, #0]
 800a312:	e7f0      	b.n	800a2f6 <__cvt+0xa6>

0800a314 <__exponent>:
 800a314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a316:	4603      	mov	r3, r0
 800a318:	2900      	cmp	r1, #0
 800a31a:	bfb8      	it	lt
 800a31c:	4249      	neglt	r1, r1
 800a31e:	f803 2b02 	strb.w	r2, [r3], #2
 800a322:	bfb4      	ite	lt
 800a324:	222d      	movlt	r2, #45	; 0x2d
 800a326:	222b      	movge	r2, #43	; 0x2b
 800a328:	2909      	cmp	r1, #9
 800a32a:	7042      	strb	r2, [r0, #1]
 800a32c:	dd2a      	ble.n	800a384 <__exponent+0x70>
 800a32e:	f10d 0207 	add.w	r2, sp, #7
 800a332:	4617      	mov	r7, r2
 800a334:	260a      	movs	r6, #10
 800a336:	4694      	mov	ip, r2
 800a338:	fb91 f5f6 	sdiv	r5, r1, r6
 800a33c:	fb06 1415 	mls	r4, r6, r5, r1
 800a340:	3430      	adds	r4, #48	; 0x30
 800a342:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a346:	460c      	mov	r4, r1
 800a348:	2c63      	cmp	r4, #99	; 0x63
 800a34a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a34e:	4629      	mov	r1, r5
 800a350:	dcf1      	bgt.n	800a336 <__exponent+0x22>
 800a352:	3130      	adds	r1, #48	; 0x30
 800a354:	f1ac 0402 	sub.w	r4, ip, #2
 800a358:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a35c:	1c41      	adds	r1, r0, #1
 800a35e:	4622      	mov	r2, r4
 800a360:	42ba      	cmp	r2, r7
 800a362:	d30a      	bcc.n	800a37a <__exponent+0x66>
 800a364:	f10d 0209 	add.w	r2, sp, #9
 800a368:	eba2 020c 	sub.w	r2, r2, ip
 800a36c:	42bc      	cmp	r4, r7
 800a36e:	bf88      	it	hi
 800a370:	2200      	movhi	r2, #0
 800a372:	4413      	add	r3, r2
 800a374:	1a18      	subs	r0, r3, r0
 800a376:	b003      	add	sp, #12
 800a378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a37a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a37e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a382:	e7ed      	b.n	800a360 <__exponent+0x4c>
 800a384:	2330      	movs	r3, #48	; 0x30
 800a386:	3130      	adds	r1, #48	; 0x30
 800a388:	7083      	strb	r3, [r0, #2]
 800a38a:	70c1      	strb	r1, [r0, #3]
 800a38c:	1d03      	adds	r3, r0, #4
 800a38e:	e7f1      	b.n	800a374 <__exponent+0x60>

0800a390 <_printf_float>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	ed2d 8b02 	vpush	{d8}
 800a398:	b08d      	sub	sp, #52	; 0x34
 800a39a:	460c      	mov	r4, r1
 800a39c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3a0:	4616      	mov	r6, r2
 800a3a2:	461f      	mov	r7, r3
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	f000 fcd9 	bl	800ad5c <_localeconv_r>
 800a3aa:	f8d0 a000 	ldr.w	sl, [r0]
 800a3ae:	4650      	mov	r0, sl
 800a3b0:	f7f5 ff5e 	bl	8000270 <strlen>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3c4:	3307      	adds	r3, #7
 800a3c6:	f023 0307 	bic.w	r3, r3, #7
 800a3ca:	f103 0208 	add.w	r2, r3, #8
 800a3ce:	f8c8 2000 	str.w	r2, [r8]
 800a3d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3e0:	ee08 0a10 	vmov	s16, r0
 800a3e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ec:	4b9e      	ldr	r3, [pc, #632]	; (800a668 <_printf_float+0x2d8>)
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	f7f6 fb9b 	bl	8000b2c <__aeabi_dcmpun>
 800a3f6:	bb88      	cbnz	r0, 800a45c <_printf_float+0xcc>
 800a3f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3fc:	4b9a      	ldr	r3, [pc, #616]	; (800a668 <_printf_float+0x2d8>)
 800a3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a402:	f7f6 fb75 	bl	8000af0 <__aeabi_dcmple>
 800a406:	bb48      	cbnz	r0, 800a45c <_printf_float+0xcc>
 800a408:	2200      	movs	r2, #0
 800a40a:	2300      	movs	r3, #0
 800a40c:	4640      	mov	r0, r8
 800a40e:	4649      	mov	r1, r9
 800a410:	f7f6 fb64 	bl	8000adc <__aeabi_dcmplt>
 800a414:	b110      	cbz	r0, 800a41c <_printf_float+0x8c>
 800a416:	232d      	movs	r3, #45	; 0x2d
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a41c:	4a93      	ldr	r2, [pc, #588]	; (800a66c <_printf_float+0x2dc>)
 800a41e:	4b94      	ldr	r3, [pc, #592]	; (800a670 <_printf_float+0x2e0>)
 800a420:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a424:	bf94      	ite	ls
 800a426:	4690      	movls	r8, r2
 800a428:	4698      	movhi	r8, r3
 800a42a:	2303      	movs	r3, #3
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	9b05      	ldr	r3, [sp, #20]
 800a430:	f023 0304 	bic.w	r3, r3, #4
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	f04f 0900 	mov.w	r9, #0
 800a43a:	9700      	str	r7, [sp, #0]
 800a43c:	4633      	mov	r3, r6
 800a43e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a440:	4621      	mov	r1, r4
 800a442:	4628      	mov	r0, r5
 800a444:	f000 f9da 	bl	800a7fc <_printf_common>
 800a448:	3001      	adds	r0, #1
 800a44a:	f040 8090 	bne.w	800a56e <_printf_float+0x1de>
 800a44e:	f04f 30ff 	mov.w	r0, #4294967295
 800a452:	b00d      	add	sp, #52	; 0x34
 800a454:	ecbd 8b02 	vpop	{d8}
 800a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	f7f6 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800a468:	b140      	cbz	r0, 800a47c <_printf_float+0xec>
 800a46a:	464b      	mov	r3, r9
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bfbc      	itt	lt
 800a470:	232d      	movlt	r3, #45	; 0x2d
 800a472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a476:	4a7f      	ldr	r2, [pc, #508]	; (800a674 <_printf_float+0x2e4>)
 800a478:	4b7f      	ldr	r3, [pc, #508]	; (800a678 <_printf_float+0x2e8>)
 800a47a:	e7d1      	b.n	800a420 <_printf_float+0x90>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a482:	9206      	str	r2, [sp, #24]
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	d13f      	bne.n	800a508 <_printf_float+0x178>
 800a488:	2306      	movs	r3, #6
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	6861      	ldr	r1, [r4, #4]
 800a490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a494:	2300      	movs	r3, #0
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	ab0a      	add	r3, sp, #40	; 0x28
 800a49a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a49e:	ab09      	add	r3, sp, #36	; 0x24
 800a4a0:	ec49 8b10 	vmov	d0, r8, r9
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	6022      	str	r2, [r4, #0]
 800a4a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7ff fecf 	bl	800a250 <__cvt>
 800a4b2:	9b06      	ldr	r3, [sp, #24]
 800a4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4b6:	2b47      	cmp	r3, #71	; 0x47
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	d108      	bne.n	800a4ce <_printf_float+0x13e>
 800a4bc:	1cc8      	adds	r0, r1, #3
 800a4be:	db02      	blt.n	800a4c6 <_printf_float+0x136>
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	4299      	cmp	r1, r3
 800a4c4:	dd41      	ble.n	800a54a <_printf_float+0x1ba>
 800a4c6:	f1ab 0302 	sub.w	r3, fp, #2
 800a4ca:	fa5f fb83 	uxtb.w	fp, r3
 800a4ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4d2:	d820      	bhi.n	800a516 <_printf_float+0x186>
 800a4d4:	3901      	subs	r1, #1
 800a4d6:	465a      	mov	r2, fp
 800a4d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a4de:	f7ff ff19 	bl	800a314 <__exponent>
 800a4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e4:	1813      	adds	r3, r2, r0
 800a4e6:	2a01      	cmp	r2, #1
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	dc02      	bgt.n	800a4f4 <_printf_float+0x164>
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	07d2      	lsls	r2, r2, #31
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_float+0x168>
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	6123      	str	r3, [r4, #16]
 800a4f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d09c      	beq.n	800a43a <_printf_float+0xaa>
 800a500:	232d      	movs	r3, #45	; 0x2d
 800a502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a506:	e798      	b.n	800a43a <_printf_float+0xaa>
 800a508:	9a06      	ldr	r2, [sp, #24]
 800a50a:	2a47      	cmp	r2, #71	; 0x47
 800a50c:	d1be      	bne.n	800a48c <_printf_float+0xfc>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1bc      	bne.n	800a48c <_printf_float+0xfc>
 800a512:	2301      	movs	r3, #1
 800a514:	e7b9      	b.n	800a48a <_printf_float+0xfa>
 800a516:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a51a:	d118      	bne.n	800a54e <_printf_float+0x1be>
 800a51c:	2900      	cmp	r1, #0
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	dd0b      	ble.n	800a53a <_printf_float+0x1aa>
 800a522:	6121      	str	r1, [r4, #16]
 800a524:	b913      	cbnz	r3, 800a52c <_printf_float+0x19c>
 800a526:	6822      	ldr	r2, [r4, #0]
 800a528:	07d0      	lsls	r0, r2, #31
 800a52a:	d502      	bpl.n	800a532 <_printf_float+0x1a2>
 800a52c:	3301      	adds	r3, #1
 800a52e:	440b      	add	r3, r1
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	65a1      	str	r1, [r4, #88]	; 0x58
 800a534:	f04f 0900 	mov.w	r9, #0
 800a538:	e7de      	b.n	800a4f8 <_printf_float+0x168>
 800a53a:	b913      	cbnz	r3, 800a542 <_printf_float+0x1b2>
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	07d2      	lsls	r2, r2, #31
 800a540:	d501      	bpl.n	800a546 <_printf_float+0x1b6>
 800a542:	3302      	adds	r3, #2
 800a544:	e7f4      	b.n	800a530 <_printf_float+0x1a0>
 800a546:	2301      	movs	r3, #1
 800a548:	e7f2      	b.n	800a530 <_printf_float+0x1a0>
 800a54a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a550:	4299      	cmp	r1, r3
 800a552:	db05      	blt.n	800a560 <_printf_float+0x1d0>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	6121      	str	r1, [r4, #16]
 800a558:	07d8      	lsls	r0, r3, #31
 800a55a:	d5ea      	bpl.n	800a532 <_printf_float+0x1a2>
 800a55c:	1c4b      	adds	r3, r1, #1
 800a55e:	e7e7      	b.n	800a530 <_printf_float+0x1a0>
 800a560:	2900      	cmp	r1, #0
 800a562:	bfd4      	ite	le
 800a564:	f1c1 0202 	rsble	r2, r1, #2
 800a568:	2201      	movgt	r2, #1
 800a56a:	4413      	add	r3, r2
 800a56c:	e7e0      	b.n	800a530 <_printf_float+0x1a0>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	055a      	lsls	r2, r3, #21
 800a572:	d407      	bmi.n	800a584 <_printf_float+0x1f4>
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	4642      	mov	r2, r8
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	d12c      	bne.n	800a5dc <_printf_float+0x24c>
 800a582:	e764      	b.n	800a44e <_printf_float+0xbe>
 800a584:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a588:	f240 80e0 	bls.w	800a74c <_printf_float+0x3bc>
 800a58c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	f7f6 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d034      	beq.n	800a606 <_printf_float+0x276>
 800a59c:	4a37      	ldr	r2, [pc, #220]	; (800a67c <_printf_float+0x2ec>)
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af51 	beq.w	800a44e <_printf_float+0xbe>
 800a5ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	db02      	blt.n	800a5ba <_printf_float+0x22a>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	07d8      	lsls	r0, r3, #31
 800a5b8:	d510      	bpl.n	800a5dc <_printf_float+0x24c>
 800a5ba:	ee18 3a10 	vmov	r3, s16
 800a5be:	4652      	mov	r2, sl
 800a5c0:	4631      	mov	r1, r6
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	f43f af41 	beq.w	800a44e <_printf_float+0xbe>
 800a5cc:	f04f 0800 	mov.w	r8, #0
 800a5d0:	f104 091a 	add.w	r9, r4, #26
 800a5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	4543      	cmp	r3, r8
 800a5da:	dc09      	bgt.n	800a5f0 <_printf_float+0x260>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	079b      	lsls	r3, r3, #30
 800a5e0:	f100 8107 	bmi.w	800a7f2 <_printf_float+0x462>
 800a5e4:	68e0      	ldr	r0, [r4, #12]
 800a5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e8:	4298      	cmp	r0, r3
 800a5ea:	bfb8      	it	lt
 800a5ec:	4618      	movlt	r0, r3
 800a5ee:	e730      	b.n	800a452 <_printf_float+0xc2>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	464a      	mov	r2, r9
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	47b8      	blx	r7
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	f43f af27 	beq.w	800a44e <_printf_float+0xbe>
 800a600:	f108 0801 	add.w	r8, r8, #1
 800a604:	e7e6      	b.n	800a5d4 <_printf_float+0x244>
 800a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	dc39      	bgt.n	800a680 <_printf_float+0x2f0>
 800a60c:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <_printf_float+0x2ec>)
 800a60e:	2301      	movs	r3, #1
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f af19 	beq.w	800a44e <_printf_float+0xbe>
 800a61c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a620:	4313      	orrs	r3, r2
 800a622:	d102      	bne.n	800a62a <_printf_float+0x29a>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	07d9      	lsls	r1, r3, #31
 800a628:	d5d8      	bpl.n	800a5dc <_printf_float+0x24c>
 800a62a:	ee18 3a10 	vmov	r3, s16
 800a62e:	4652      	mov	r2, sl
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f af09 	beq.w	800a44e <_printf_float+0xbe>
 800a63c:	f04f 0900 	mov.w	r9, #0
 800a640:	f104 0a1a 	add.w	sl, r4, #26
 800a644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a646:	425b      	negs	r3, r3
 800a648:	454b      	cmp	r3, r9
 800a64a:	dc01      	bgt.n	800a650 <_printf_float+0x2c0>
 800a64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64e:	e792      	b.n	800a576 <_printf_float+0x1e6>
 800a650:	2301      	movs	r3, #1
 800a652:	4652      	mov	r2, sl
 800a654:	4631      	mov	r1, r6
 800a656:	4628      	mov	r0, r5
 800a658:	47b8      	blx	r7
 800a65a:	3001      	adds	r0, #1
 800a65c:	f43f aef7 	beq.w	800a44e <_printf_float+0xbe>
 800a660:	f109 0901 	add.w	r9, r9, #1
 800a664:	e7ee      	b.n	800a644 <_printf_float+0x2b4>
 800a666:	bf00      	nop
 800a668:	7fefffff 	.word	0x7fefffff
 800a66c:	080185cc 	.word	0x080185cc
 800a670:	080185d0 	.word	0x080185d0
 800a674:	080185d4 	.word	0x080185d4
 800a678:	080185d8 	.word	0x080185d8
 800a67c:	080185dc 	.word	0x080185dc
 800a680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a684:	429a      	cmp	r2, r3
 800a686:	bfa8      	it	ge
 800a688:	461a      	movge	r2, r3
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	4691      	mov	r9, r2
 800a68e:	dc37      	bgt.n	800a700 <_printf_float+0x370>
 800a690:	f04f 0b00 	mov.w	fp, #0
 800a694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a698:	f104 021a 	add.w	r2, r4, #26
 800a69c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a69e:	9305      	str	r3, [sp, #20]
 800a6a0:	eba3 0309 	sub.w	r3, r3, r9
 800a6a4:	455b      	cmp	r3, fp
 800a6a6:	dc33      	bgt.n	800a710 <_printf_float+0x380>
 800a6a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	db3b      	blt.n	800a728 <_printf_float+0x398>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	07da      	lsls	r2, r3, #31
 800a6b4:	d438      	bmi.n	800a728 <_printf_float+0x398>
 800a6b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a6ba:	eba2 0903 	sub.w	r9, r2, r3
 800a6be:	9b05      	ldr	r3, [sp, #20]
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	4591      	cmp	r9, r2
 800a6c4:	bfa8      	it	ge
 800a6c6:	4691      	movge	r9, r2
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	dc35      	bgt.n	800a73a <_printf_float+0x3aa>
 800a6ce:	f04f 0800 	mov.w	r8, #0
 800a6d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6d6:	f104 0a1a 	add.w	sl, r4, #26
 800a6da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6de:	1a9b      	subs	r3, r3, r2
 800a6e0:	eba3 0309 	sub.w	r3, r3, r9
 800a6e4:	4543      	cmp	r3, r8
 800a6e6:	f77f af79 	ble.w	800a5dc <_printf_float+0x24c>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f aeaa 	beq.w	800a44e <_printf_float+0xbe>
 800a6fa:	f108 0801 	add.w	r8, r8, #1
 800a6fe:	e7ec      	b.n	800a6da <_printf_float+0x34a>
 800a700:	4613      	mov	r3, r2
 800a702:	4631      	mov	r1, r6
 800a704:	4642      	mov	r2, r8
 800a706:	4628      	mov	r0, r5
 800a708:	47b8      	blx	r7
 800a70a:	3001      	adds	r0, #1
 800a70c:	d1c0      	bne.n	800a690 <_printf_float+0x300>
 800a70e:	e69e      	b.n	800a44e <_printf_float+0xbe>
 800a710:	2301      	movs	r3, #1
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	9205      	str	r2, [sp, #20]
 800a718:	47b8      	blx	r7
 800a71a:	3001      	adds	r0, #1
 800a71c:	f43f ae97 	beq.w	800a44e <_printf_float+0xbe>
 800a720:	9a05      	ldr	r2, [sp, #20]
 800a722:	f10b 0b01 	add.w	fp, fp, #1
 800a726:	e7b9      	b.n	800a69c <_printf_float+0x30c>
 800a728:	ee18 3a10 	vmov	r3, s16
 800a72c:	4652      	mov	r2, sl
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	d1be      	bne.n	800a6b6 <_printf_float+0x326>
 800a738:	e689      	b.n	800a44e <_printf_float+0xbe>
 800a73a:	9a05      	ldr	r2, [sp, #20]
 800a73c:	464b      	mov	r3, r9
 800a73e:	4442      	add	r2, r8
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	d1c1      	bne.n	800a6ce <_printf_float+0x33e>
 800a74a:	e680      	b.n	800a44e <_printf_float+0xbe>
 800a74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a74e:	2a01      	cmp	r2, #1
 800a750:	dc01      	bgt.n	800a756 <_printf_float+0x3c6>
 800a752:	07db      	lsls	r3, r3, #31
 800a754:	d53a      	bpl.n	800a7cc <_printf_float+0x43c>
 800a756:	2301      	movs	r3, #1
 800a758:	4642      	mov	r2, r8
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f ae74 	beq.w	800a44e <_printf_float+0xbe>
 800a766:	ee18 3a10 	vmov	r3, s16
 800a76a:	4652      	mov	r2, sl
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	47b8      	blx	r7
 800a772:	3001      	adds	r0, #1
 800a774:	f43f ae6b 	beq.w	800a44e <_printf_float+0xbe>
 800a778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a784:	f7f6 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a788:	b9d8      	cbnz	r0, 800a7c2 <_printf_float+0x432>
 800a78a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a78e:	f108 0201 	add.w	r2, r8, #1
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	47b8      	blx	r7
 800a798:	3001      	adds	r0, #1
 800a79a:	d10e      	bne.n	800a7ba <_printf_float+0x42a>
 800a79c:	e657      	b.n	800a44e <_printf_float+0xbe>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b8      	blx	r7
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f43f ae50 	beq.w	800a44e <_printf_float+0xbe>
 800a7ae:	f108 0801 	add.w	r8, r8, #1
 800a7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	4543      	cmp	r3, r8
 800a7b8:	dcf1      	bgt.n	800a79e <_printf_float+0x40e>
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7c0:	e6da      	b.n	800a578 <_printf_float+0x1e8>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	f104 0a1a 	add.w	sl, r4, #26
 800a7ca:	e7f2      	b.n	800a7b2 <_printf_float+0x422>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	4642      	mov	r2, r8
 800a7d0:	e7df      	b.n	800a792 <_printf_float+0x402>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	464a      	mov	r2, r9
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f43f ae36 	beq.w	800a44e <_printf_float+0xbe>
 800a7e2:	f108 0801 	add.w	r8, r8, #1
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7ea:	1a5b      	subs	r3, r3, r1
 800a7ec:	4543      	cmp	r3, r8
 800a7ee:	dcf0      	bgt.n	800a7d2 <_printf_float+0x442>
 800a7f0:	e6f8      	b.n	800a5e4 <_printf_float+0x254>
 800a7f2:	f04f 0800 	mov.w	r8, #0
 800a7f6:	f104 0919 	add.w	r9, r4, #25
 800a7fa:	e7f4      	b.n	800a7e6 <_printf_float+0x456>

0800a7fc <_printf_common>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	4616      	mov	r6, r2
 800a802:	4699      	mov	r9, r3
 800a804:	688a      	ldr	r2, [r1, #8]
 800a806:	690b      	ldr	r3, [r1, #16]
 800a808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	bfb8      	it	lt
 800a810:	4613      	movlt	r3, r2
 800a812:	6033      	str	r3, [r6, #0]
 800a814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a818:	4607      	mov	r7, r0
 800a81a:	460c      	mov	r4, r1
 800a81c:	b10a      	cbz	r2, 800a822 <_printf_common+0x26>
 800a81e:	3301      	adds	r3, #1
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	0699      	lsls	r1, r3, #26
 800a826:	bf42      	ittt	mi
 800a828:	6833      	ldrmi	r3, [r6, #0]
 800a82a:	3302      	addmi	r3, #2
 800a82c:	6033      	strmi	r3, [r6, #0]
 800a82e:	6825      	ldr	r5, [r4, #0]
 800a830:	f015 0506 	ands.w	r5, r5, #6
 800a834:	d106      	bne.n	800a844 <_printf_common+0x48>
 800a836:	f104 0a19 	add.w	sl, r4, #25
 800a83a:	68e3      	ldr	r3, [r4, #12]
 800a83c:	6832      	ldr	r2, [r6, #0]
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	42ab      	cmp	r3, r5
 800a842:	dc26      	bgt.n	800a892 <_printf_common+0x96>
 800a844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a848:	1e13      	subs	r3, r2, #0
 800a84a:	6822      	ldr	r2, [r4, #0]
 800a84c:	bf18      	it	ne
 800a84e:	2301      	movne	r3, #1
 800a850:	0692      	lsls	r2, r2, #26
 800a852:	d42b      	bmi.n	800a8ac <_printf_common+0xb0>
 800a854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a858:	4649      	mov	r1, r9
 800a85a:	4638      	mov	r0, r7
 800a85c:	47c0      	blx	r8
 800a85e:	3001      	adds	r0, #1
 800a860:	d01e      	beq.n	800a8a0 <_printf_common+0xa4>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	f003 0306 	and.w	r3, r3, #6
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	bf02      	ittt	eq
 800a86e:	68e5      	ldreq	r5, [r4, #12]
 800a870:	6833      	ldreq	r3, [r6, #0]
 800a872:	1aed      	subeq	r5, r5, r3
 800a874:	68a3      	ldr	r3, [r4, #8]
 800a876:	bf0c      	ite	eq
 800a878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a87c:	2500      	movne	r5, #0
 800a87e:	4293      	cmp	r3, r2
 800a880:	bfc4      	itt	gt
 800a882:	1a9b      	subgt	r3, r3, r2
 800a884:	18ed      	addgt	r5, r5, r3
 800a886:	2600      	movs	r6, #0
 800a888:	341a      	adds	r4, #26
 800a88a:	42b5      	cmp	r5, r6
 800a88c:	d11a      	bne.n	800a8c4 <_printf_common+0xc8>
 800a88e:	2000      	movs	r0, #0
 800a890:	e008      	b.n	800a8a4 <_printf_common+0xa8>
 800a892:	2301      	movs	r3, #1
 800a894:	4652      	mov	r2, sl
 800a896:	4649      	mov	r1, r9
 800a898:	4638      	mov	r0, r7
 800a89a:	47c0      	blx	r8
 800a89c:	3001      	adds	r0, #1
 800a89e:	d103      	bne.n	800a8a8 <_printf_common+0xac>
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	e7c6      	b.n	800a83a <_printf_common+0x3e>
 800a8ac:	18e1      	adds	r1, r4, r3
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	2030      	movs	r0, #48	; 0x30
 800a8b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8b6:	4422      	add	r2, r4
 800a8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	e7c7      	b.n	800a854 <_printf_common+0x58>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	47c0      	blx	r8
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d0e6      	beq.n	800a8a0 <_printf_common+0xa4>
 800a8d2:	3601      	adds	r6, #1
 800a8d4:	e7d9      	b.n	800a88a <_printf_common+0x8e>
	...

0800a8d8 <_printf_i>:
 800a8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	7e0f      	ldrb	r7, [r1, #24]
 800a8de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8e0:	2f78      	cmp	r7, #120	; 0x78
 800a8e2:	4691      	mov	r9, r2
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	469a      	mov	sl, r3
 800a8ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ee:	d807      	bhi.n	800a900 <_printf_i+0x28>
 800a8f0:	2f62      	cmp	r7, #98	; 0x62
 800a8f2:	d80a      	bhi.n	800a90a <_printf_i+0x32>
 800a8f4:	2f00      	cmp	r7, #0
 800a8f6:	f000 80d4 	beq.w	800aaa2 <_printf_i+0x1ca>
 800a8fa:	2f58      	cmp	r7, #88	; 0x58
 800a8fc:	f000 80c0 	beq.w	800aa80 <_printf_i+0x1a8>
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a908:	e03a      	b.n	800a980 <_printf_i+0xa8>
 800a90a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a90e:	2b15      	cmp	r3, #21
 800a910:	d8f6      	bhi.n	800a900 <_printf_i+0x28>
 800a912:	a101      	add	r1, pc, #4	; (adr r1, 800a918 <_printf_i+0x40>)
 800a914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a918:	0800a971 	.word	0x0800a971
 800a91c:	0800a985 	.word	0x0800a985
 800a920:	0800a901 	.word	0x0800a901
 800a924:	0800a901 	.word	0x0800a901
 800a928:	0800a901 	.word	0x0800a901
 800a92c:	0800a901 	.word	0x0800a901
 800a930:	0800a985 	.word	0x0800a985
 800a934:	0800a901 	.word	0x0800a901
 800a938:	0800a901 	.word	0x0800a901
 800a93c:	0800a901 	.word	0x0800a901
 800a940:	0800a901 	.word	0x0800a901
 800a944:	0800aa89 	.word	0x0800aa89
 800a948:	0800a9b1 	.word	0x0800a9b1
 800a94c:	0800aa43 	.word	0x0800aa43
 800a950:	0800a901 	.word	0x0800a901
 800a954:	0800a901 	.word	0x0800a901
 800a958:	0800aaab 	.word	0x0800aaab
 800a95c:	0800a901 	.word	0x0800a901
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800a901 	.word	0x0800a901
 800a968:	0800a901 	.word	0x0800a901
 800a96c:	0800aa4b 	.word	0x0800aa4b
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	1d1a      	adds	r2, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	602a      	str	r2, [r5, #0]
 800a978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a980:	2301      	movs	r3, #1
 800a982:	e09f      	b.n	800aac4 <_printf_i+0x1ec>
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	0607      	lsls	r7, r0, #24
 800a98a:	f103 0104 	add.w	r1, r3, #4
 800a98e:	6029      	str	r1, [r5, #0]
 800a990:	d501      	bpl.n	800a996 <_printf_i+0xbe>
 800a992:	681e      	ldr	r6, [r3, #0]
 800a994:	e003      	b.n	800a99e <_printf_i+0xc6>
 800a996:	0646      	lsls	r6, r0, #25
 800a998:	d5fb      	bpl.n	800a992 <_printf_i+0xba>
 800a99a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a99e:	2e00      	cmp	r6, #0
 800a9a0:	da03      	bge.n	800a9aa <_printf_i+0xd2>
 800a9a2:	232d      	movs	r3, #45	; 0x2d
 800a9a4:	4276      	negs	r6, r6
 800a9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9aa:	485a      	ldr	r0, [pc, #360]	; (800ab14 <_printf_i+0x23c>)
 800a9ac:	230a      	movs	r3, #10
 800a9ae:	e012      	b.n	800a9d6 <_printf_i+0xfe>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	6820      	ldr	r0, [r4, #0]
 800a9b4:	1d19      	adds	r1, r3, #4
 800a9b6:	6029      	str	r1, [r5, #0]
 800a9b8:	0605      	lsls	r5, r0, #24
 800a9ba:	d501      	bpl.n	800a9c0 <_printf_i+0xe8>
 800a9bc:	681e      	ldr	r6, [r3, #0]
 800a9be:	e002      	b.n	800a9c6 <_printf_i+0xee>
 800a9c0:	0641      	lsls	r1, r0, #25
 800a9c2:	d5fb      	bpl.n	800a9bc <_printf_i+0xe4>
 800a9c4:	881e      	ldrh	r6, [r3, #0]
 800a9c6:	4853      	ldr	r0, [pc, #332]	; (800ab14 <_printf_i+0x23c>)
 800a9c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ca:	bf0c      	ite	eq
 800a9cc:	2308      	moveq	r3, #8
 800a9ce:	230a      	movne	r3, #10
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9d6:	6865      	ldr	r5, [r4, #4]
 800a9d8:	60a5      	str	r5, [r4, #8]
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	bfa2      	ittt	ge
 800a9de:	6821      	ldrge	r1, [r4, #0]
 800a9e0:	f021 0104 	bicge.w	r1, r1, #4
 800a9e4:	6021      	strge	r1, [r4, #0]
 800a9e6:	b90e      	cbnz	r6, 800a9ec <_printf_i+0x114>
 800a9e8:	2d00      	cmp	r5, #0
 800a9ea:	d04b      	beq.n	800aa84 <_printf_i+0x1ac>
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a9f6:	5dc7      	ldrb	r7, [r0, r7]
 800a9f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9fc:	4637      	mov	r7, r6
 800a9fe:	42bb      	cmp	r3, r7
 800aa00:	460e      	mov	r6, r1
 800aa02:	d9f4      	bls.n	800a9ee <_printf_i+0x116>
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d10b      	bne.n	800aa20 <_printf_i+0x148>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	07de      	lsls	r6, r3, #31
 800aa0c:	d508      	bpl.n	800aa20 <_printf_i+0x148>
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	6861      	ldr	r1, [r4, #4]
 800aa12:	4299      	cmp	r1, r3
 800aa14:	bfde      	ittt	le
 800aa16:	2330      	movle	r3, #48	; 0x30
 800aa18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa20:	1b52      	subs	r2, r2, r5
 800aa22:	6122      	str	r2, [r4, #16]
 800aa24:	f8cd a000 	str.w	sl, [sp]
 800aa28:	464b      	mov	r3, r9
 800aa2a:	aa03      	add	r2, sp, #12
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4640      	mov	r0, r8
 800aa30:	f7ff fee4 	bl	800a7fc <_printf_common>
 800aa34:	3001      	adds	r0, #1
 800aa36:	d14a      	bne.n	800aace <_printf_i+0x1f6>
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3c:	b004      	add	sp, #16
 800aa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f043 0320 	orr.w	r3, r3, #32
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	4833      	ldr	r0, [pc, #204]	; (800ab18 <_printf_i+0x240>)
 800aa4c:	2778      	movs	r7, #120	; 0x78
 800aa4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	6829      	ldr	r1, [r5, #0]
 800aa56:	061f      	lsls	r7, r3, #24
 800aa58:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa5c:	d402      	bmi.n	800aa64 <_printf_i+0x18c>
 800aa5e:	065f      	lsls	r7, r3, #25
 800aa60:	bf48      	it	mi
 800aa62:	b2b6      	uxthmi	r6, r6
 800aa64:	07df      	lsls	r7, r3, #31
 800aa66:	bf48      	it	mi
 800aa68:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6c:	6029      	str	r1, [r5, #0]
 800aa6e:	bf48      	it	mi
 800aa70:	6023      	strmi	r3, [r4, #0]
 800aa72:	b91e      	cbnz	r6, 800aa7c <_printf_i+0x1a4>
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	f023 0320 	bic.w	r3, r3, #32
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	e7a7      	b.n	800a9d0 <_printf_i+0xf8>
 800aa80:	4824      	ldr	r0, [pc, #144]	; (800ab14 <_printf_i+0x23c>)
 800aa82:	e7e4      	b.n	800aa4e <_printf_i+0x176>
 800aa84:	4615      	mov	r5, r2
 800aa86:	e7bd      	b.n	800aa04 <_printf_i+0x12c>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	6826      	ldr	r6, [r4, #0]
 800aa8c:	6961      	ldr	r1, [r4, #20]
 800aa8e:	1d18      	adds	r0, r3, #4
 800aa90:	6028      	str	r0, [r5, #0]
 800aa92:	0635      	lsls	r5, r6, #24
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	d501      	bpl.n	800aa9c <_printf_i+0x1c4>
 800aa98:	6019      	str	r1, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <_printf_i+0x1ca>
 800aa9c:	0670      	lsls	r0, r6, #25
 800aa9e:	d5fb      	bpl.n	800aa98 <_printf_i+0x1c0>
 800aaa0:	8019      	strh	r1, [r3, #0]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	4615      	mov	r5, r2
 800aaa8:	e7bc      	b.n	800aa24 <_printf_i+0x14c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	1d1a      	adds	r2, r3, #4
 800aaae:	602a      	str	r2, [r5, #0]
 800aab0:	681d      	ldr	r5, [r3, #0]
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	2100      	movs	r1, #0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f7f5 fb8a 	bl	80001d0 <memchr>
 800aabc:	b108      	cbz	r0, 800aac2 <_printf_i+0x1ea>
 800aabe:	1b40      	subs	r0, r0, r5
 800aac0:	6060      	str	r0, [r4, #4]
 800aac2:	6863      	ldr	r3, [r4, #4]
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	2300      	movs	r3, #0
 800aac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aacc:	e7aa      	b.n	800aa24 <_printf_i+0x14c>
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	462a      	mov	r2, r5
 800aad2:	4649      	mov	r1, r9
 800aad4:	4640      	mov	r0, r8
 800aad6:	47d0      	blx	sl
 800aad8:	3001      	adds	r0, #1
 800aada:	d0ad      	beq.n	800aa38 <_printf_i+0x160>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	079b      	lsls	r3, r3, #30
 800aae0:	d413      	bmi.n	800ab0a <_printf_i+0x232>
 800aae2:	68e0      	ldr	r0, [r4, #12]
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	4298      	cmp	r0, r3
 800aae8:	bfb8      	it	lt
 800aaea:	4618      	movlt	r0, r3
 800aaec:	e7a6      	b.n	800aa3c <_printf_i+0x164>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	47d0      	blx	sl
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d09d      	beq.n	800aa38 <_printf_i+0x160>
 800aafc:	3501      	adds	r5, #1
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	9903      	ldr	r1, [sp, #12]
 800ab02:	1a5b      	subs	r3, r3, r1
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dcf2      	bgt.n	800aaee <_printf_i+0x216>
 800ab08:	e7eb      	b.n	800aae2 <_printf_i+0x20a>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	f104 0619 	add.w	r6, r4, #25
 800ab10:	e7f5      	b.n	800aafe <_printf_i+0x226>
 800ab12:	bf00      	nop
 800ab14:	080185de 	.word	0x080185de
 800ab18:	080185ef 	.word	0x080185ef

0800ab1c <std>:
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	4604      	mov	r4, r0
 800ab22:	e9c0 3300 	strd	r3, r3, [r0]
 800ab26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab2a:	6083      	str	r3, [r0, #8]
 800ab2c:	8181      	strh	r1, [r0, #12]
 800ab2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab30:	81c2      	strh	r2, [r0, #14]
 800ab32:	6183      	str	r3, [r0, #24]
 800ab34:	4619      	mov	r1, r3
 800ab36:	2208      	movs	r2, #8
 800ab38:	305c      	adds	r0, #92	; 0x5c
 800ab3a:	f000 f8f4 	bl	800ad26 <memset>
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <std+0x58>)
 800ab40:	6263      	str	r3, [r4, #36]	; 0x24
 800ab42:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <std+0x5c>)
 800ab44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab46:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <std+0x60>)
 800ab48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <std+0x64>)
 800ab4c:	6323      	str	r3, [r4, #48]	; 0x30
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <std+0x68>)
 800ab50:	6224      	str	r4, [r4, #32]
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d006      	beq.n	800ab64 <std+0x48>
 800ab56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ab5a:	4294      	cmp	r4, r2
 800ab5c:	d002      	beq.n	800ab64 <std+0x48>
 800ab5e:	33d0      	adds	r3, #208	; 0xd0
 800ab60:	429c      	cmp	r4, r3
 800ab62:	d105      	bne.n	800ab70 <std+0x54>
 800ab64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab6c:	f000 b97a 	b.w	800ae64 <__retarget_lock_init_recursive>
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800aca1 	.word	0x0800aca1
 800ab78:	0800acc3 	.word	0x0800acc3
 800ab7c:	0800acfb 	.word	0x0800acfb
 800ab80:	0800ad1f 	.word	0x0800ad1f
 800ab84:	20001284 	.word	0x20001284

0800ab88 <stdio_exit_handler>:
 800ab88:	4a02      	ldr	r2, [pc, #8]	; (800ab94 <stdio_exit_handler+0xc>)
 800ab8a:	4903      	ldr	r1, [pc, #12]	; (800ab98 <stdio_exit_handler+0x10>)
 800ab8c:	4803      	ldr	r0, [pc, #12]	; (800ab9c <stdio_exit_handler+0x14>)
 800ab8e:	f000 b869 	b.w	800ac64 <_fwalk_sglue>
 800ab92:	bf00      	nop
 800ab94:	20000584 	.word	0x20000584
 800ab98:	0800c419 	.word	0x0800c419
 800ab9c:	20000590 	.word	0x20000590

0800aba0 <cleanup_stdio>:
 800aba0:	6841      	ldr	r1, [r0, #4]
 800aba2:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <cleanup_stdio+0x34>)
 800aba4:	4299      	cmp	r1, r3
 800aba6:	b510      	push	{r4, lr}
 800aba8:	4604      	mov	r4, r0
 800abaa:	d001      	beq.n	800abb0 <cleanup_stdio+0x10>
 800abac:	f001 fc34 	bl	800c418 <_fflush_r>
 800abb0:	68a1      	ldr	r1, [r4, #8]
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <cleanup_stdio+0x38>)
 800abb4:	4299      	cmp	r1, r3
 800abb6:	d002      	beq.n	800abbe <cleanup_stdio+0x1e>
 800abb8:	4620      	mov	r0, r4
 800abba:	f001 fc2d 	bl	800c418 <_fflush_r>
 800abbe:	68e1      	ldr	r1, [r4, #12]
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <cleanup_stdio+0x3c>)
 800abc2:	4299      	cmp	r1, r3
 800abc4:	d004      	beq.n	800abd0 <cleanup_stdio+0x30>
 800abc6:	4620      	mov	r0, r4
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abcc:	f001 bc24 	b.w	800c418 <_fflush_r>
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	bf00      	nop
 800abd4:	20001284 	.word	0x20001284
 800abd8:	200012ec 	.word	0x200012ec
 800abdc:	20001354 	.word	0x20001354

0800abe0 <global_stdio_init.part.0>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <global_stdio_init.part.0+0x30>)
 800abe4:	4c0b      	ldr	r4, [pc, #44]	; (800ac14 <global_stdio_init.part.0+0x34>)
 800abe6:	4a0c      	ldr	r2, [pc, #48]	; (800ac18 <global_stdio_init.part.0+0x38>)
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	4620      	mov	r0, r4
 800abec:	2200      	movs	r2, #0
 800abee:	2104      	movs	r1, #4
 800abf0:	f7ff ff94 	bl	800ab1c <std>
 800abf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800abf8:	2201      	movs	r2, #1
 800abfa:	2109      	movs	r1, #9
 800abfc:	f7ff ff8e 	bl	800ab1c <std>
 800ac00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ac04:	2202      	movs	r2, #2
 800ac06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac0a:	2112      	movs	r1, #18
 800ac0c:	f7ff bf86 	b.w	800ab1c <std>
 800ac10:	200013bc 	.word	0x200013bc
 800ac14:	20001284 	.word	0x20001284
 800ac18:	0800ab89 	.word	0x0800ab89

0800ac1c <__sfp_lock_acquire>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	; (800ac24 <__sfp_lock_acquire+0x8>)
 800ac1e:	f000 b922 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800ac22:	bf00      	nop
 800ac24:	200013c5 	.word	0x200013c5

0800ac28 <__sfp_lock_release>:
 800ac28:	4801      	ldr	r0, [pc, #4]	; (800ac30 <__sfp_lock_release+0x8>)
 800ac2a:	f000 b91d 	b.w	800ae68 <__retarget_lock_release_recursive>
 800ac2e:	bf00      	nop
 800ac30:	200013c5 	.word	0x200013c5

0800ac34 <__sinit>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	f7ff fff0 	bl	800ac1c <__sfp_lock_acquire>
 800ac3c:	6a23      	ldr	r3, [r4, #32]
 800ac3e:	b11b      	cbz	r3, 800ac48 <__sinit+0x14>
 800ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac44:	f7ff bff0 	b.w	800ac28 <__sfp_lock_release>
 800ac48:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <__sinit+0x28>)
 800ac4a:	6223      	str	r3, [r4, #32]
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <__sinit+0x2c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1f5      	bne.n	800ac40 <__sinit+0xc>
 800ac54:	f7ff ffc4 	bl	800abe0 <global_stdio_init.part.0>
 800ac58:	e7f2      	b.n	800ac40 <__sinit+0xc>
 800ac5a:	bf00      	nop
 800ac5c:	0800aba1 	.word	0x0800aba1
 800ac60:	200013bc 	.word	0x200013bc

0800ac64 <_fwalk_sglue>:
 800ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	4607      	mov	r7, r0
 800ac6a:	4688      	mov	r8, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	2600      	movs	r6, #0
 800ac70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac74:	f1b9 0901 	subs.w	r9, r9, #1
 800ac78:	d505      	bpl.n	800ac86 <_fwalk_sglue+0x22>
 800ac7a:	6824      	ldr	r4, [r4, #0]
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	d1f7      	bne.n	800ac70 <_fwalk_sglue+0xc>
 800ac80:	4630      	mov	r0, r6
 800ac82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d907      	bls.n	800ac9c <_fwalk_sglue+0x38>
 800ac8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac90:	3301      	adds	r3, #1
 800ac92:	d003      	beq.n	800ac9c <_fwalk_sglue+0x38>
 800ac94:	4629      	mov	r1, r5
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c0      	blx	r8
 800ac9a:	4306      	orrs	r6, r0
 800ac9c:	3568      	adds	r5, #104	; 0x68
 800ac9e:	e7e9      	b.n	800ac74 <_fwalk_sglue+0x10>

0800aca0 <__sread>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	f000 f87e 	bl	800ada8 <_read_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	bfab      	itete	ge
 800acb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acb2:	89a3      	ldrhlt	r3, [r4, #12]
 800acb4:	181b      	addge	r3, r3, r0
 800acb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acba:	bfac      	ite	ge
 800acbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acbe:	81a3      	strhlt	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__swrite>:
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	461f      	mov	r7, r3
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4616      	mov	r6, r2
 800acd2:	d505      	bpl.n	800ace0 <__swrite+0x1e>
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	2302      	movs	r3, #2
 800acda:	2200      	movs	r2, #0
 800acdc:	f000 f852 	bl	800ad84 <_lseek_r>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	f000 b879 	b.w	800adec <_write_r>

0800acfa <__sseek>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 f83f 	bl	800ad84 <_lseek_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	bf15      	itete	ne
 800ad0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad16:	81a3      	strheq	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	81a3      	strhne	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__sclose>:
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 b81f 	b.w	800ad64 <_close_r>

0800ad26 <memset>:
 800ad26:	4402      	add	r2, r0
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d100      	bne.n	800ad30 <memset+0xa>
 800ad2e:	4770      	bx	lr
 800ad30:	f803 1b01 	strb.w	r1, [r3], #1
 800ad34:	e7f9      	b.n	800ad2a <memset+0x4>

0800ad36 <strncmp>:
 800ad36:	b510      	push	{r4, lr}
 800ad38:	b16a      	cbz	r2, 800ad56 <strncmp+0x20>
 800ad3a:	3901      	subs	r1, #1
 800ad3c:	1884      	adds	r4, r0, r2
 800ad3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d103      	bne.n	800ad52 <strncmp+0x1c>
 800ad4a:	42a0      	cmp	r0, r4
 800ad4c:	d001      	beq.n	800ad52 <strncmp+0x1c>
 800ad4e:	2a00      	cmp	r2, #0
 800ad50:	d1f5      	bne.n	800ad3e <strncmp+0x8>
 800ad52:	1ad0      	subs	r0, r2, r3
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	4610      	mov	r0, r2
 800ad58:	e7fc      	b.n	800ad54 <strncmp+0x1e>
	...

0800ad5c <_localeconv_r>:
 800ad5c:	4800      	ldr	r0, [pc, #0]	; (800ad60 <_localeconv_r+0x4>)
 800ad5e:	4770      	bx	lr
 800ad60:	200006d0 	.word	0x200006d0

0800ad64 <_close_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	; (800ad80 <_close_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f6 fb48 	bl	8001404 <_close>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_close_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_close_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200013c0 	.word	0x200013c0

0800ad84 <_lseek_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	; (800ada4 <_lseek_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f6 fb40 	bl	8001418 <_lseek>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_lseek_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_lseek_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	200013c0 	.word	0x200013c0

0800ada8 <_read_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_read_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f6 fb16 	bl	80013e8 <_read>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_read_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_read_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	200013c0 	.word	0x200013c0

0800adcc <_sbrk_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_sbrk_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f6 fb20 	bl	800141c <_sbrk>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_sbrk_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_sbrk_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	200013c0 	.word	0x200013c0

0800adec <_write_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_write_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f8 fc8c 	bl	8003718 <_write>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_write_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_write_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	200013c0 	.word	0x200013c0

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	200005dc 	.word	0x200005dc

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4d0d      	ldr	r5, [pc, #52]	; (800ae54 <__libc_init_array+0x38>)
 800ae20:	4c0d      	ldr	r4, [pc, #52]	; (800ae58 <__libc_init_array+0x3c>)
 800ae22:	1b64      	subs	r4, r4, r5
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	2600      	movs	r6, #0
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	4d0b      	ldr	r5, [pc, #44]	; (800ae5c <__libc_init_array+0x40>)
 800ae2e:	4c0c      	ldr	r4, [pc, #48]	; (800ae60 <__libc_init_array+0x44>)
 800ae30:	f001 ff5c 	bl	800ccec <_init>
 800ae34:	1b64      	subs	r4, r4, r5
 800ae36:	10a4      	asrs	r4, r4, #2
 800ae38:	2600      	movs	r6, #0
 800ae3a:	42a6      	cmp	r6, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae44:	4798      	blx	r3
 800ae46:	3601      	adds	r6, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4e:	4798      	blx	r3
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	0801895c 	.word	0x0801895c
 800ae58:	0801895c 	.word	0x0801895c
 800ae5c:	0801895c 	.word	0x0801895c
 800ae60:	08018960 	.word	0x08018960

0800ae64 <__retarget_lock_init_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_acquire_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <__retarget_lock_release_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <memcpy>:
 800ae6a:	440a      	add	r2, r1
 800ae6c:	4291      	cmp	r1, r2
 800ae6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae72:	d100      	bne.n	800ae76 <memcpy+0xc>
 800ae74:	4770      	bx	lr
 800ae76:	b510      	push	{r4, lr}
 800ae78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae80:	4291      	cmp	r1, r2
 800ae82:	d1f9      	bne.n	800ae78 <memcpy+0xe>
 800ae84:	bd10      	pop	{r4, pc}

0800ae86 <quorem>:
 800ae86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8a:	6903      	ldr	r3, [r0, #16]
 800ae8c:	690c      	ldr	r4, [r1, #16]
 800ae8e:	42a3      	cmp	r3, r4
 800ae90:	4607      	mov	r7, r0
 800ae92:	db7e      	blt.n	800af92 <quorem+0x10c>
 800ae94:	3c01      	subs	r4, #1
 800ae96:	f101 0814 	add.w	r8, r1, #20
 800ae9a:	f100 0514 	add.w	r5, r0, #20
 800ae9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeac:	3301      	adds	r3, #1
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aeb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aeb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aebc:	d331      	bcc.n	800af22 <quorem+0x9c>
 800aebe:	f04f 0e00 	mov.w	lr, #0
 800aec2:	4640      	mov	r0, r8
 800aec4:	46ac      	mov	ip, r5
 800aec6:	46f2      	mov	sl, lr
 800aec8:	f850 2b04 	ldr.w	r2, [r0], #4
 800aecc:	b293      	uxth	r3, r2
 800aece:	fb06 e303 	mla	r3, r6, r3, lr
 800aed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aed6:	0c1a      	lsrs	r2, r3, #16
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	ebaa 0303 	sub.w	r3, sl, r3
 800aede:	f8dc a000 	ldr.w	sl, [ip]
 800aee2:	fa13 f38a 	uxtah	r3, r3, sl
 800aee6:	fb06 220e 	mla	r2, r6, lr, r2
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	9b00      	ldr	r3, [sp, #0]
 800aeee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aef2:	b292      	uxth	r2, r2
 800aef4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aefc:	f8bd 3000 	ldrh.w	r3, [sp]
 800af00:	4581      	cmp	r9, r0
 800af02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af06:	f84c 3b04 	str.w	r3, [ip], #4
 800af0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af0e:	d2db      	bcs.n	800aec8 <quorem+0x42>
 800af10:	f855 300b 	ldr.w	r3, [r5, fp]
 800af14:	b92b      	cbnz	r3, 800af22 <quorem+0x9c>
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	3b04      	subs	r3, #4
 800af1a:	429d      	cmp	r5, r3
 800af1c:	461a      	mov	r2, r3
 800af1e:	d32c      	bcc.n	800af7a <quorem+0xf4>
 800af20:	613c      	str	r4, [r7, #16]
 800af22:	4638      	mov	r0, r7
 800af24:	f001 f8f2 	bl	800c10c <__mcmp>
 800af28:	2800      	cmp	r0, #0
 800af2a:	db22      	blt.n	800af72 <quorem+0xec>
 800af2c:	3601      	adds	r6, #1
 800af2e:	4629      	mov	r1, r5
 800af30:	2000      	movs	r0, #0
 800af32:	f858 2b04 	ldr.w	r2, [r8], #4
 800af36:	f8d1 c000 	ldr.w	ip, [r1]
 800af3a:	b293      	uxth	r3, r2
 800af3c:	1ac3      	subs	r3, r0, r3
 800af3e:	0c12      	lsrs	r2, r2, #16
 800af40:	fa13 f38c 	uxtah	r3, r3, ip
 800af44:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800af48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af52:	45c1      	cmp	r9, r8
 800af54:	f841 3b04 	str.w	r3, [r1], #4
 800af58:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af5c:	d2e9      	bcs.n	800af32 <quorem+0xac>
 800af5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af66:	b922      	cbnz	r2, 800af72 <quorem+0xec>
 800af68:	3b04      	subs	r3, #4
 800af6a:	429d      	cmp	r5, r3
 800af6c:	461a      	mov	r2, r3
 800af6e:	d30a      	bcc.n	800af86 <quorem+0x100>
 800af70:	613c      	str	r4, [r7, #16]
 800af72:	4630      	mov	r0, r6
 800af74:	b003      	add	sp, #12
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	6812      	ldr	r2, [r2, #0]
 800af7c:	3b04      	subs	r3, #4
 800af7e:	2a00      	cmp	r2, #0
 800af80:	d1ce      	bne.n	800af20 <quorem+0x9a>
 800af82:	3c01      	subs	r4, #1
 800af84:	e7c9      	b.n	800af1a <quorem+0x94>
 800af86:	6812      	ldr	r2, [r2, #0]
 800af88:	3b04      	subs	r3, #4
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	d1f0      	bne.n	800af70 <quorem+0xea>
 800af8e:	3c01      	subs	r4, #1
 800af90:	e7eb      	b.n	800af6a <quorem+0xe4>
 800af92:	2000      	movs	r0, #0
 800af94:	e7ee      	b.n	800af74 <quorem+0xee>
	...

0800af98 <_dtoa_r>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	ed2d 8b04 	vpush	{d8-d9}
 800afa0:	69c5      	ldr	r5, [r0, #28]
 800afa2:	b093      	sub	sp, #76	; 0x4c
 800afa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afa8:	ec57 6b10 	vmov	r6, r7, d0
 800afac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afb0:	9107      	str	r1, [sp, #28]
 800afb2:	4604      	mov	r4, r0
 800afb4:	920a      	str	r2, [sp, #40]	; 0x28
 800afb6:	930d      	str	r3, [sp, #52]	; 0x34
 800afb8:	b975      	cbnz	r5, 800afd8 <_dtoa_r+0x40>
 800afba:	2010      	movs	r0, #16
 800afbc:	f7f8 fbee 	bl	800379c <__wrap_malloc>
 800afc0:	4602      	mov	r2, r0
 800afc2:	61e0      	str	r0, [r4, #28]
 800afc4:	b920      	cbnz	r0, 800afd0 <_dtoa_r+0x38>
 800afc6:	4bae      	ldr	r3, [pc, #696]	; (800b280 <_dtoa_r+0x2e8>)
 800afc8:	21ef      	movs	r1, #239	; 0xef
 800afca:	48ae      	ldr	r0, [pc, #696]	; (800b284 <_dtoa_r+0x2ec>)
 800afcc:	f001 fa4c 	bl	800c468 <__assert_func>
 800afd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afd4:	6005      	str	r5, [r0, #0]
 800afd6:	60c5      	str	r5, [r0, #12]
 800afd8:	69e3      	ldr	r3, [r4, #28]
 800afda:	6819      	ldr	r1, [r3, #0]
 800afdc:	b151      	cbz	r1, 800aff4 <_dtoa_r+0x5c>
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	604a      	str	r2, [r1, #4]
 800afe2:	2301      	movs	r3, #1
 800afe4:	4093      	lsls	r3, r2
 800afe6:	608b      	str	r3, [r1, #8]
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fe53 	bl	800bc94 <_Bfree>
 800afee:	69e3      	ldr	r3, [r4, #28]
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	1e3b      	subs	r3, r7, #0
 800aff6:	bfbb      	ittet	lt
 800aff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800affc:	9303      	strlt	r3, [sp, #12]
 800affe:	2300      	movge	r3, #0
 800b000:	2201      	movlt	r2, #1
 800b002:	bfac      	ite	ge
 800b004:	f8c8 3000 	strge.w	r3, [r8]
 800b008:	f8c8 2000 	strlt.w	r2, [r8]
 800b00c:	4b9e      	ldr	r3, [pc, #632]	; (800b288 <_dtoa_r+0x2f0>)
 800b00e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b012:	ea33 0308 	bics.w	r3, r3, r8
 800b016:	d11b      	bne.n	800b050 <_dtoa_r+0xb8>
 800b018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b01a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b024:	4333      	orrs	r3, r6
 800b026:	f000 8593 	beq.w	800bb50 <_dtoa_r+0xbb8>
 800b02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b02c:	b963      	cbnz	r3, 800b048 <_dtoa_r+0xb0>
 800b02e:	4b97      	ldr	r3, [pc, #604]	; (800b28c <_dtoa_r+0x2f4>)
 800b030:	e027      	b.n	800b082 <_dtoa_r+0xea>
 800b032:	4b97      	ldr	r3, [pc, #604]	; (800b290 <_dtoa_r+0x2f8>)
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	9800      	ldr	r0, [sp, #0]
 800b03e:	b013      	add	sp, #76	; 0x4c
 800b040:	ecbd 8b04 	vpop	{d8-d9}
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	4b90      	ldr	r3, [pc, #576]	; (800b28c <_dtoa_r+0x2f4>)
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	3303      	adds	r3, #3
 800b04e:	e7f3      	b.n	800b038 <_dtoa_r+0xa0>
 800b050:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b054:	2200      	movs	r2, #0
 800b056:	ec51 0b17 	vmov	r0, r1, d7
 800b05a:	eeb0 8a47 	vmov.f32	s16, s14
 800b05e:	eef0 8a67 	vmov.f32	s17, s15
 800b062:	2300      	movs	r3, #0
 800b064:	f7f5 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 800b068:	4681      	mov	r9, r0
 800b06a:	b160      	cbz	r0, 800b086 <_dtoa_r+0xee>
 800b06c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b06e:	2301      	movs	r3, #1
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8568 	beq.w	800bb4a <_dtoa_r+0xbb2>
 800b07a:	4b86      	ldr	r3, [pc, #536]	; (800b294 <_dtoa_r+0x2fc>)
 800b07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	3b01      	subs	r3, #1
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	e7da      	b.n	800b03c <_dtoa_r+0xa4>
 800b086:	aa10      	add	r2, sp, #64	; 0x40
 800b088:	a911      	add	r1, sp, #68	; 0x44
 800b08a:	4620      	mov	r0, r4
 800b08c:	eeb0 0a48 	vmov.f32	s0, s16
 800b090:	eef0 0a68 	vmov.f32	s1, s17
 800b094:	f001 f8e0 	bl	800c258 <__d2b>
 800b098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b09c:	4682      	mov	sl, r0
 800b09e:	2d00      	cmp	r5, #0
 800b0a0:	d07f      	beq.n	800b1a2 <_dtoa_r+0x20a>
 800b0a2:	ee18 3a90 	vmov	r3, s17
 800b0a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b0ae:	ec51 0b18 	vmov	r0, r1, d8
 800b0b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b0be:	4619      	mov	r1, r3
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4b75      	ldr	r3, [pc, #468]	; (800b298 <_dtoa_r+0x300>)
 800b0c4:	f7f5 f8e0 	bl	8000288 <__aeabi_dsub>
 800b0c8:	a367      	add	r3, pc, #412	; (adr r3, 800b268 <_dtoa_r+0x2d0>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	a367      	add	r3, pc, #412	; (adr r3, 800b270 <_dtoa_r+0x2d8>)
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f7f5 f8d8 	bl	800028c <__adddf3>
 800b0dc:	4606      	mov	r6, r0
 800b0de:	4628      	mov	r0, r5
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	f7f5 fa1f 	bl	8000524 <__aeabi_i2d>
 800b0e6:	a364      	add	r3, pc, #400	; (adr r3, 800b278 <_dtoa_r+0x2e0>)
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 f8c8 	bl	800028c <__adddf3>
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	f7f5 fd2a 	bl	8000b58 <__aeabi_d2iz>
 800b104:	2200      	movs	r2, #0
 800b106:	4683      	mov	fp, r0
 800b108:	2300      	movs	r3, #0
 800b10a:	4630      	mov	r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	f7f5 fce5 	bl	8000adc <__aeabi_dcmplt>
 800b112:	b148      	cbz	r0, 800b128 <_dtoa_r+0x190>
 800b114:	4658      	mov	r0, fp
 800b116:	f7f5 fa05 	bl	8000524 <__aeabi_i2d>
 800b11a:	4632      	mov	r2, r6
 800b11c:	463b      	mov	r3, r7
 800b11e:	f7f5 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b122:	b908      	cbnz	r0, 800b128 <_dtoa_r+0x190>
 800b124:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b128:	f1bb 0f16 	cmp.w	fp, #22
 800b12c:	d857      	bhi.n	800b1de <_dtoa_r+0x246>
 800b12e:	4b5b      	ldr	r3, [pc, #364]	; (800b29c <_dtoa_r+0x304>)
 800b130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	ec51 0b18 	vmov	r0, r1, d8
 800b13c:	f7f5 fcce 	bl	8000adc <__aeabi_dcmplt>
 800b140:	2800      	cmp	r0, #0
 800b142:	d04e      	beq.n	800b1e2 <_dtoa_r+0x24a>
 800b144:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b148:	2300      	movs	r3, #0
 800b14a:	930c      	str	r3, [sp, #48]	; 0x30
 800b14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b14e:	1b5b      	subs	r3, r3, r5
 800b150:	1e5a      	subs	r2, r3, #1
 800b152:	bf45      	ittet	mi
 800b154:	f1c3 0301 	rsbmi	r3, r3, #1
 800b158:	9305      	strmi	r3, [sp, #20]
 800b15a:	2300      	movpl	r3, #0
 800b15c:	2300      	movmi	r3, #0
 800b15e:	9206      	str	r2, [sp, #24]
 800b160:	bf54      	ite	pl
 800b162:	9305      	strpl	r3, [sp, #20]
 800b164:	9306      	strmi	r3, [sp, #24]
 800b166:	f1bb 0f00 	cmp.w	fp, #0
 800b16a:	db3c      	blt.n	800b1e6 <_dtoa_r+0x24e>
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b172:	445b      	add	r3, fp
 800b174:	9306      	str	r3, [sp, #24]
 800b176:	2300      	movs	r3, #0
 800b178:	9308      	str	r3, [sp, #32]
 800b17a:	9b07      	ldr	r3, [sp, #28]
 800b17c:	2b09      	cmp	r3, #9
 800b17e:	d868      	bhi.n	800b252 <_dtoa_r+0x2ba>
 800b180:	2b05      	cmp	r3, #5
 800b182:	bfc4      	itt	gt
 800b184:	3b04      	subgt	r3, #4
 800b186:	9307      	strgt	r3, [sp, #28]
 800b188:	9b07      	ldr	r3, [sp, #28]
 800b18a:	f1a3 0302 	sub.w	r3, r3, #2
 800b18e:	bfcc      	ite	gt
 800b190:	2500      	movgt	r5, #0
 800b192:	2501      	movle	r5, #1
 800b194:	2b03      	cmp	r3, #3
 800b196:	f200 8085 	bhi.w	800b2a4 <_dtoa_r+0x30c>
 800b19a:	e8df f003 	tbb	[pc, r3]
 800b19e:	3b2e      	.short	0x3b2e
 800b1a0:	5839      	.short	0x5839
 800b1a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1a6:	441d      	add	r5, r3
 800b1a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	bfc1      	itttt	gt
 800b1b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b1b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b1bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b1c0:	bfd6      	itet	le
 800b1c2:	f1c3 0320 	rsble	r3, r3, #32
 800b1c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b1ca:	fa06 f003 	lslle.w	r0, r6, r3
 800b1ce:	f7f5 f999 	bl	8000504 <__aeabi_ui2d>
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b1d8:	3d01      	subs	r5, #1
 800b1da:	920e      	str	r2, [sp, #56]	; 0x38
 800b1dc:	e76f      	b.n	800b0be <_dtoa_r+0x126>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7b3      	b.n	800b14a <_dtoa_r+0x1b2>
 800b1e2:	900c      	str	r0, [sp, #48]	; 0x30
 800b1e4:	e7b2      	b.n	800b14c <_dtoa_r+0x1b4>
 800b1e6:	9b05      	ldr	r3, [sp, #20]
 800b1e8:	eba3 030b 	sub.w	r3, r3, fp
 800b1ec:	9305      	str	r3, [sp, #20]
 800b1ee:	f1cb 0300 	rsb	r3, fp, #0
 800b1f2:	9308      	str	r3, [sp, #32]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1f8:	e7bf      	b.n	800b17a <_dtoa_r+0x1e2>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc52      	bgt.n	800b2aa <_dtoa_r+0x312>
 800b204:	2301      	movs	r3, #1
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	461a      	mov	r2, r3
 800b20c:	920a      	str	r2, [sp, #40]	; 0x28
 800b20e:	e00b      	b.n	800b228 <_dtoa_r+0x290>
 800b210:	2301      	movs	r3, #1
 800b212:	e7f3      	b.n	800b1fc <_dtoa_r+0x264>
 800b214:	2300      	movs	r3, #0
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21a:	445b      	add	r3, fp
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	3301      	adds	r3, #1
 800b220:	2b01      	cmp	r3, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	bfb8      	it	lt
 800b226:	2301      	movlt	r3, #1
 800b228:	69e0      	ldr	r0, [r4, #28]
 800b22a:	2100      	movs	r1, #0
 800b22c:	2204      	movs	r2, #4
 800b22e:	f102 0614 	add.w	r6, r2, #20
 800b232:	429e      	cmp	r6, r3
 800b234:	d93d      	bls.n	800b2b2 <_dtoa_r+0x31a>
 800b236:	6041      	str	r1, [r0, #4]
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fceb 	bl	800bc14 <_Balloc>
 800b23e:	9000      	str	r0, [sp, #0]
 800b240:	2800      	cmp	r0, #0
 800b242:	d139      	bne.n	800b2b8 <_dtoa_r+0x320>
 800b244:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <_dtoa_r+0x308>)
 800b246:	4602      	mov	r2, r0
 800b248:	f240 11af 	movw	r1, #431	; 0x1af
 800b24c:	e6bd      	b.n	800afca <_dtoa_r+0x32>
 800b24e:	2301      	movs	r3, #1
 800b250:	e7e1      	b.n	800b216 <_dtoa_r+0x27e>
 800b252:	2501      	movs	r5, #1
 800b254:	2300      	movs	r3, #0
 800b256:	9307      	str	r3, [sp, #28]
 800b258:	9509      	str	r5, [sp, #36]	; 0x24
 800b25a:	f04f 33ff 	mov.w	r3, #4294967295
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	2200      	movs	r2, #0
 800b264:	2312      	movs	r3, #18
 800b266:	e7d1      	b.n	800b20c <_dtoa_r+0x274>
 800b268:	636f4361 	.word	0x636f4361
 800b26c:	3fd287a7 	.word	0x3fd287a7
 800b270:	8b60c8b3 	.word	0x8b60c8b3
 800b274:	3fc68a28 	.word	0x3fc68a28
 800b278:	509f79fb 	.word	0x509f79fb
 800b27c:	3fd34413 	.word	0x3fd34413
 800b280:	0801860d 	.word	0x0801860d
 800b284:	08018624 	.word	0x08018624
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	08018609 	.word	0x08018609
 800b290:	08018600 	.word	0x08018600
 800b294:	080185dd 	.word	0x080185dd
 800b298:	3ff80000 	.word	0x3ff80000
 800b29c:	08018710 	.word	0x08018710
 800b2a0:	0801867c 	.word	0x0801867c
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a8:	e7d7      	b.n	800b25a <_dtoa_r+0x2c2>
 800b2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	e7ba      	b.n	800b228 <_dtoa_r+0x290>
 800b2b2:	3101      	adds	r1, #1
 800b2b4:	0052      	lsls	r2, r2, #1
 800b2b6:	e7ba      	b.n	800b22e <_dtoa_r+0x296>
 800b2b8:	69e3      	ldr	r3, [r4, #28]
 800b2ba:	9a00      	ldr	r2, [sp, #0]
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	9b04      	ldr	r3, [sp, #16]
 800b2c0:	2b0e      	cmp	r3, #14
 800b2c2:	f200 80a8 	bhi.w	800b416 <_dtoa_r+0x47e>
 800b2c6:	2d00      	cmp	r5, #0
 800b2c8:	f000 80a5 	beq.w	800b416 <_dtoa_r+0x47e>
 800b2cc:	f1bb 0f00 	cmp.w	fp, #0
 800b2d0:	dd38      	ble.n	800b344 <_dtoa_r+0x3ac>
 800b2d2:	4bc0      	ldr	r3, [pc, #768]	; (800b5d4 <_dtoa_r+0x63c>)
 800b2d4:	f00b 020f 	and.w	r2, fp, #15
 800b2d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b2e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b2e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b2e8:	d019      	beq.n	800b31e <_dtoa_r+0x386>
 800b2ea:	4bbb      	ldr	r3, [pc, #748]	; (800b5d8 <_dtoa_r+0x640>)
 800b2ec:	ec51 0b18 	vmov	r0, r1, d8
 800b2f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2f4:	f7f5 faaa 	bl	800084c <__aeabi_ddiv>
 800b2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2fc:	f008 080f 	and.w	r8, r8, #15
 800b300:	2503      	movs	r5, #3
 800b302:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b5d8 <_dtoa_r+0x640>
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	d10a      	bne.n	800b322 <_dtoa_r+0x38a>
 800b30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b310:	4632      	mov	r2, r6
 800b312:	463b      	mov	r3, r7
 800b314:	f7f5 fa9a 	bl	800084c <__aeabi_ddiv>
 800b318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b31c:	e02b      	b.n	800b376 <_dtoa_r+0x3de>
 800b31e:	2502      	movs	r5, #2
 800b320:	e7ef      	b.n	800b302 <_dtoa_r+0x36a>
 800b322:	f018 0f01 	tst.w	r8, #1
 800b326:	d008      	beq.n	800b33a <_dtoa_r+0x3a2>
 800b328:	4630      	mov	r0, r6
 800b32a:	4639      	mov	r1, r7
 800b32c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b330:	f7f5 f962 	bl	80005f8 <__aeabi_dmul>
 800b334:	3501      	adds	r5, #1
 800b336:	4606      	mov	r6, r0
 800b338:	460f      	mov	r7, r1
 800b33a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b33e:	f109 0908 	add.w	r9, r9, #8
 800b342:	e7e0      	b.n	800b306 <_dtoa_r+0x36e>
 800b344:	f000 809f 	beq.w	800b486 <_dtoa_r+0x4ee>
 800b348:	f1cb 0600 	rsb	r6, fp, #0
 800b34c:	4ba1      	ldr	r3, [pc, #644]	; (800b5d4 <_dtoa_r+0x63c>)
 800b34e:	4fa2      	ldr	r7, [pc, #648]	; (800b5d8 <_dtoa_r+0x640>)
 800b350:	f006 020f 	and.w	r2, r6, #15
 800b354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	ec51 0b18 	vmov	r0, r1, d8
 800b360:	f7f5 f94a 	bl	80005f8 <__aeabi_dmul>
 800b364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b368:	1136      	asrs	r6, r6, #4
 800b36a:	2300      	movs	r3, #0
 800b36c:	2502      	movs	r5, #2
 800b36e:	2e00      	cmp	r6, #0
 800b370:	d17e      	bne.n	800b470 <_dtoa_r+0x4d8>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1d0      	bne.n	800b318 <_dtoa_r+0x380>
 800b376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b378:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8084 	beq.w	800b48a <_dtoa_r+0x4f2>
 800b382:	4b96      	ldr	r3, [pc, #600]	; (800b5dc <_dtoa_r+0x644>)
 800b384:	2200      	movs	r2, #0
 800b386:	4640      	mov	r0, r8
 800b388:	4649      	mov	r1, r9
 800b38a:	f7f5 fba7 	bl	8000adc <__aeabi_dcmplt>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d07b      	beq.n	800b48a <_dtoa_r+0x4f2>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d078      	beq.n	800b48a <_dtoa_r+0x4f2>
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dd39      	ble.n	800b412 <_dtoa_r+0x47a>
 800b39e:	4b90      	ldr	r3, [pc, #576]	; (800b5e0 <_dtoa_r+0x648>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f5 f927 	bl	80005f8 <__aeabi_dmul>
 800b3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ae:	9e01      	ldr	r6, [sp, #4]
 800b3b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f7f5 f8b2 	bl	8000524 <__aeabi_i2d>
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	464b      	mov	r3, r9
 800b3c4:	f7f5 f918 	bl	80005f8 <__aeabi_dmul>
 800b3c8:	4b86      	ldr	r3, [pc, #536]	; (800b5e4 <_dtoa_r+0x64c>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f7f4 ff5e 	bl	800028c <__adddf3>
 800b3d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d8:	9303      	str	r3, [sp, #12]
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	d158      	bne.n	800b490 <_dtoa_r+0x4f8>
 800b3de:	4b82      	ldr	r3, [pc, #520]	; (800b5e8 <_dtoa_r+0x650>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	f7f4 ff4f 	bl	8000288 <__aeabi_dsub>
 800b3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	4689      	mov	r9, r1
 800b3f2:	f7f5 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f040 8296 	bne.w	800b928 <_dtoa_r+0x990>
 800b3fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b400:	4640      	mov	r0, r8
 800b402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b406:	4649      	mov	r1, r9
 800b408:	f7f5 fb68 	bl	8000adc <__aeabi_dcmplt>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f040 8289 	bne.w	800b924 <_dtoa_r+0x98c>
 800b412:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f2c0 814e 	blt.w	800b6ba <_dtoa_r+0x722>
 800b41e:	f1bb 0f0e 	cmp.w	fp, #14
 800b422:	f300 814a 	bgt.w	800b6ba <_dtoa_r+0x722>
 800b426:	4b6b      	ldr	r3, [pc, #428]	; (800b5d4 <_dtoa_r+0x63c>)
 800b428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b42c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b432:	2b00      	cmp	r3, #0
 800b434:	f280 80dc 	bge.w	800b5f0 <_dtoa_r+0x658>
 800b438:	9b04      	ldr	r3, [sp, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f300 80d8 	bgt.w	800b5f0 <_dtoa_r+0x658>
 800b440:	f040 826f 	bne.w	800b922 <_dtoa_r+0x98a>
 800b444:	4b68      	ldr	r3, [pc, #416]	; (800b5e8 <_dtoa_r+0x650>)
 800b446:	2200      	movs	r2, #0
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f5 f8d4 	bl	80005f8 <__aeabi_dmul>
 800b450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b454:	f7f5 fb56 	bl	8000b04 <__aeabi_dcmpge>
 800b458:	9e04      	ldr	r6, [sp, #16]
 800b45a:	4637      	mov	r7, r6
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f040 8245 	bne.w	800b8ec <_dtoa_r+0x954>
 800b462:	9d00      	ldr	r5, [sp, #0]
 800b464:	2331      	movs	r3, #49	; 0x31
 800b466:	f805 3b01 	strb.w	r3, [r5], #1
 800b46a:	f10b 0b01 	add.w	fp, fp, #1
 800b46e:	e241      	b.n	800b8f4 <_dtoa_r+0x95c>
 800b470:	07f2      	lsls	r2, r6, #31
 800b472:	d505      	bpl.n	800b480 <_dtoa_r+0x4e8>
 800b474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b478:	f7f5 f8be 	bl	80005f8 <__aeabi_dmul>
 800b47c:	3501      	adds	r5, #1
 800b47e:	2301      	movs	r3, #1
 800b480:	1076      	asrs	r6, r6, #1
 800b482:	3708      	adds	r7, #8
 800b484:	e773      	b.n	800b36e <_dtoa_r+0x3d6>
 800b486:	2502      	movs	r5, #2
 800b488:	e775      	b.n	800b376 <_dtoa_r+0x3de>
 800b48a:	9e04      	ldr	r6, [sp, #16]
 800b48c:	465f      	mov	r7, fp
 800b48e:	e792      	b.n	800b3b6 <_dtoa_r+0x41e>
 800b490:	9900      	ldr	r1, [sp, #0]
 800b492:	4b50      	ldr	r3, [pc, #320]	; (800b5d4 <_dtoa_r+0x63c>)
 800b494:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b498:	4431      	add	r1, r6
 800b49a:	9102      	str	r1, [sp, #8]
 800b49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b49e:	eeb0 9a47 	vmov.f32	s18, s14
 800b4a2:	eef0 9a67 	vmov.f32	s19, s15
 800b4a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	d044      	beq.n	800b53c <_dtoa_r+0x5a4>
 800b4b2:	494e      	ldr	r1, [pc, #312]	; (800b5ec <_dtoa_r+0x654>)
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f7f5 f9c9 	bl	800084c <__aeabi_ddiv>
 800b4ba:	ec53 2b19 	vmov	r2, r3, d9
 800b4be:	f7f4 fee3 	bl	8000288 <__aeabi_dsub>
 800b4c2:	9d00      	ldr	r5, [sp, #0]
 800b4c4:	ec41 0b19 	vmov	d9, r0, r1
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f7f5 fb44 	bl	8000b58 <__aeabi_d2iz>
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	f7f5 f827 	bl	8000524 <__aeabi_i2d>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4640      	mov	r0, r8
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f4 fed3 	bl	8000288 <__aeabi_dsub>
 800b4e2:	3630      	adds	r6, #48	; 0x30
 800b4e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b4e8:	ec53 2b19 	vmov	r2, r3, d9
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4689      	mov	r9, r1
 800b4f0:	f7f5 faf4 	bl	8000adc <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d164      	bne.n	800b5c2 <_dtoa_r+0x62a>
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	4937      	ldr	r1, [pc, #220]	; (800b5dc <_dtoa_r+0x644>)
 800b4fe:	2000      	movs	r0, #0
 800b500:	f7f4 fec2 	bl	8000288 <__aeabi_dsub>
 800b504:	ec53 2b19 	vmov	r2, r3, d9
 800b508:	f7f5 fae8 	bl	8000adc <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f040 80b6 	bne.w	800b67e <_dtoa_r+0x6e6>
 800b512:	9b02      	ldr	r3, [sp, #8]
 800b514:	429d      	cmp	r5, r3
 800b516:	f43f af7c 	beq.w	800b412 <_dtoa_r+0x47a>
 800b51a:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <_dtoa_r+0x648>)
 800b51c:	ec51 0b19 	vmov	r0, r1, d9
 800b520:	2200      	movs	r2, #0
 800b522:	f7f5 f869 	bl	80005f8 <__aeabi_dmul>
 800b526:	4b2e      	ldr	r3, [pc, #184]	; (800b5e0 <_dtoa_r+0x648>)
 800b528:	ec41 0b19 	vmov	d9, r0, r1
 800b52c:	2200      	movs	r2, #0
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f5 f861 	bl	80005f8 <__aeabi_dmul>
 800b536:	4680      	mov	r8, r0
 800b538:	4689      	mov	r9, r1
 800b53a:	e7c5      	b.n	800b4c8 <_dtoa_r+0x530>
 800b53c:	ec51 0b17 	vmov	r0, r1, d7
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	9b02      	ldr	r3, [sp, #8]
 800b546:	9d00      	ldr	r5, [sp, #0]
 800b548:	930f      	str	r3, [sp, #60]	; 0x3c
 800b54a:	ec41 0b19 	vmov	d9, r0, r1
 800b54e:	4649      	mov	r1, r9
 800b550:	4640      	mov	r0, r8
 800b552:	f7f5 fb01 	bl	8000b58 <__aeabi_d2iz>
 800b556:	4606      	mov	r6, r0
 800b558:	f7f4 ffe4 	bl	8000524 <__aeabi_i2d>
 800b55c:	3630      	adds	r6, #48	; 0x30
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	f7f4 fe8f 	bl	8000288 <__aeabi_dsub>
 800b56a:	f805 6b01 	strb.w	r6, [r5], #1
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	429d      	cmp	r5, r3
 800b572:	4680      	mov	r8, r0
 800b574:	4689      	mov	r9, r1
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	d124      	bne.n	800b5c6 <_dtoa_r+0x62e>
 800b57c:	4b1b      	ldr	r3, [pc, #108]	; (800b5ec <_dtoa_r+0x654>)
 800b57e:	ec51 0b19 	vmov	r0, r1, d9
 800b582:	f7f4 fe83 	bl	800028c <__adddf3>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f5 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 800b592:	2800      	cmp	r0, #0
 800b594:	d173      	bne.n	800b67e <_dtoa_r+0x6e6>
 800b596:	ec53 2b19 	vmov	r2, r3, d9
 800b59a:	4914      	ldr	r1, [pc, #80]	; (800b5ec <_dtoa_r+0x654>)
 800b59c:	2000      	movs	r0, #0
 800b59e:	f7f4 fe73 	bl	8000288 <__aeabi_dsub>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	f7f5 fa97 	bl	8000adc <__aeabi_dcmplt>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f43f af2f 	beq.w	800b412 <_dtoa_r+0x47a>
 800b5b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5b6:	1e6b      	subs	r3, r5, #1
 800b5b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5be:	2b30      	cmp	r3, #48	; 0x30
 800b5c0:	d0f8      	beq.n	800b5b4 <_dtoa_r+0x61c>
 800b5c2:	46bb      	mov	fp, r7
 800b5c4:	e04a      	b.n	800b65c <_dtoa_r+0x6c4>
 800b5c6:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <_dtoa_r+0x648>)
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	4689      	mov	r9, r1
 800b5d0:	e7bd      	b.n	800b54e <_dtoa_r+0x5b6>
 800b5d2:	bf00      	nop
 800b5d4:	08018710 	.word	0x08018710
 800b5d8:	080186e8 	.word	0x080186e8
 800b5dc:	3ff00000 	.word	0x3ff00000
 800b5e0:	40240000 	.word	0x40240000
 800b5e4:	401c0000 	.word	0x401c0000
 800b5e8:	40140000 	.word	0x40140000
 800b5ec:	3fe00000 	.word	0x3fe00000
 800b5f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5f4:	9d00      	ldr	r5, [sp, #0]
 800b5f6:	4642      	mov	r2, r8
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	f7f5 f925 	bl	800084c <__aeabi_ddiv>
 800b602:	f7f5 faa9 	bl	8000b58 <__aeabi_d2iz>
 800b606:	9001      	str	r0, [sp, #4]
 800b608:	f7f4 ff8c 	bl	8000524 <__aeabi_i2d>
 800b60c:	4642      	mov	r2, r8
 800b60e:	464b      	mov	r3, r9
 800b610:	f7f4 fff2 	bl	80005f8 <__aeabi_dmul>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	9e01      	ldr	r6, [sp, #4]
 800b622:	9f04      	ldr	r7, [sp, #16]
 800b624:	3630      	adds	r6, #48	; 0x30
 800b626:	f805 6b01 	strb.w	r6, [r5], #1
 800b62a:	9e00      	ldr	r6, [sp, #0]
 800b62c:	1bae      	subs	r6, r5, r6
 800b62e:	42b7      	cmp	r7, r6
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	d134      	bne.n	800b6a0 <_dtoa_r+0x708>
 800b636:	f7f4 fe29 	bl	800028c <__adddf3>
 800b63a:	4642      	mov	r2, r8
 800b63c:	464b      	mov	r3, r9
 800b63e:	4606      	mov	r6, r0
 800b640:	460f      	mov	r7, r1
 800b642:	f7f5 fa69 	bl	8000b18 <__aeabi_dcmpgt>
 800b646:	b9c8      	cbnz	r0, 800b67c <_dtoa_r+0x6e4>
 800b648:	4642      	mov	r2, r8
 800b64a:	464b      	mov	r3, r9
 800b64c:	4630      	mov	r0, r6
 800b64e:	4639      	mov	r1, r7
 800b650:	f7f5 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b654:	b110      	cbz	r0, 800b65c <_dtoa_r+0x6c4>
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	07db      	lsls	r3, r3, #31
 800b65a:	d40f      	bmi.n	800b67c <_dtoa_r+0x6e4>
 800b65c:	4651      	mov	r1, sl
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fb18 	bl	800bc94 <_Bfree>
 800b664:	2300      	movs	r3, #0
 800b666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b668:	702b      	strb	r3, [r5, #0]
 800b66a:	f10b 0301 	add.w	r3, fp, #1
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b672:	2b00      	cmp	r3, #0
 800b674:	f43f ace2 	beq.w	800b03c <_dtoa_r+0xa4>
 800b678:	601d      	str	r5, [r3, #0]
 800b67a:	e4df      	b.n	800b03c <_dtoa_r+0xa4>
 800b67c:	465f      	mov	r7, fp
 800b67e:	462b      	mov	r3, r5
 800b680:	461d      	mov	r5, r3
 800b682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b686:	2a39      	cmp	r2, #57	; 0x39
 800b688:	d106      	bne.n	800b698 <_dtoa_r+0x700>
 800b68a:	9a00      	ldr	r2, [sp, #0]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d1f7      	bne.n	800b680 <_dtoa_r+0x6e8>
 800b690:	9900      	ldr	r1, [sp, #0]
 800b692:	2230      	movs	r2, #48	; 0x30
 800b694:	3701      	adds	r7, #1
 800b696:	700a      	strb	r2, [r1, #0]
 800b698:	781a      	ldrb	r2, [r3, #0]
 800b69a:	3201      	adds	r2, #1
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e790      	b.n	800b5c2 <_dtoa_r+0x62a>
 800b6a0:	4ba3      	ldr	r3, [pc, #652]	; (800b930 <_dtoa_r+0x998>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 ffa8 	bl	80005f8 <__aeabi_dmul>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	f7f5 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d09e      	beq.n	800b5f6 <_dtoa_r+0x65e>
 800b6b8:	e7d0      	b.n	800b65c <_dtoa_r+0x6c4>
 800b6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	f000 80ca 	beq.w	800b856 <_dtoa_r+0x8be>
 800b6c2:	9a07      	ldr	r2, [sp, #28]
 800b6c4:	2a01      	cmp	r2, #1
 800b6c6:	f300 80ad 	bgt.w	800b824 <_dtoa_r+0x88c>
 800b6ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6cc:	2a00      	cmp	r2, #0
 800b6ce:	f000 80a5 	beq.w	800b81c <_dtoa_r+0x884>
 800b6d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6d6:	9e08      	ldr	r6, [sp, #32]
 800b6d8:	9d05      	ldr	r5, [sp, #20]
 800b6da:	9a05      	ldr	r2, [sp, #20]
 800b6dc:	441a      	add	r2, r3
 800b6de:	9205      	str	r2, [sp, #20]
 800b6e0:	9a06      	ldr	r2, [sp, #24]
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	441a      	add	r2, r3
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	9206      	str	r2, [sp, #24]
 800b6ea:	f000 fb89 	bl	800be00 <__i2b>
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	b165      	cbz	r5, 800b70c <_dtoa_r+0x774>
 800b6f2:	9b06      	ldr	r3, [sp, #24]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd09      	ble.n	800b70c <_dtoa_r+0x774>
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	9a05      	ldr	r2, [sp, #20]
 800b6fc:	bfa8      	it	ge
 800b6fe:	462b      	movge	r3, r5
 800b700:	1ad2      	subs	r2, r2, r3
 800b702:	9205      	str	r2, [sp, #20]
 800b704:	9a06      	ldr	r2, [sp, #24]
 800b706:	1aed      	subs	r5, r5, r3
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	9306      	str	r3, [sp, #24]
 800b70c:	9b08      	ldr	r3, [sp, #32]
 800b70e:	b1f3      	cbz	r3, 800b74e <_dtoa_r+0x7b6>
 800b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80a3 	beq.w	800b85e <_dtoa_r+0x8c6>
 800b718:	2e00      	cmp	r6, #0
 800b71a:	dd10      	ble.n	800b73e <_dtoa_r+0x7a6>
 800b71c:	4639      	mov	r1, r7
 800b71e:	4632      	mov	r2, r6
 800b720:	4620      	mov	r0, r4
 800b722:	f000 fc2d 	bl	800bf80 <__pow5mult>
 800b726:	4652      	mov	r2, sl
 800b728:	4601      	mov	r1, r0
 800b72a:	4607      	mov	r7, r0
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fb7d 	bl	800be2c <__multiply>
 800b732:	4651      	mov	r1, sl
 800b734:	4680      	mov	r8, r0
 800b736:	4620      	mov	r0, r4
 800b738:	f000 faac 	bl	800bc94 <_Bfree>
 800b73c:	46c2      	mov	sl, r8
 800b73e:	9b08      	ldr	r3, [sp, #32]
 800b740:	1b9a      	subs	r2, r3, r6
 800b742:	d004      	beq.n	800b74e <_dtoa_r+0x7b6>
 800b744:	4651      	mov	r1, sl
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fc1a 	bl	800bf80 <__pow5mult>
 800b74c:	4682      	mov	sl, r0
 800b74e:	2101      	movs	r1, #1
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fb55 	bl	800be00 <__i2b>
 800b756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	f340 8081 	ble.w	800b862 <_dtoa_r+0x8ca>
 800b760:	461a      	mov	r2, r3
 800b762:	4601      	mov	r1, r0
 800b764:	4620      	mov	r0, r4
 800b766:	f000 fc0b 	bl	800bf80 <__pow5mult>
 800b76a:	9b07      	ldr	r3, [sp, #28]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	4606      	mov	r6, r0
 800b770:	dd7a      	ble.n	800b868 <_dtoa_r+0x8d0>
 800b772:	f04f 0800 	mov.w	r8, #0
 800b776:	6933      	ldr	r3, [r6, #16]
 800b778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b77c:	6918      	ldr	r0, [r3, #16]
 800b77e:	f000 faf1 	bl	800bd64 <__hi0bits>
 800b782:	f1c0 0020 	rsb	r0, r0, #32
 800b786:	9b06      	ldr	r3, [sp, #24]
 800b788:	4418      	add	r0, r3
 800b78a:	f010 001f 	ands.w	r0, r0, #31
 800b78e:	f000 8094 	beq.w	800b8ba <_dtoa_r+0x922>
 800b792:	f1c0 0320 	rsb	r3, r0, #32
 800b796:	2b04      	cmp	r3, #4
 800b798:	f340 8085 	ble.w	800b8a6 <_dtoa_r+0x90e>
 800b79c:	9b05      	ldr	r3, [sp, #20]
 800b79e:	f1c0 001c 	rsb	r0, r0, #28
 800b7a2:	4403      	add	r3, r0
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	9b06      	ldr	r3, [sp, #24]
 800b7a8:	4403      	add	r3, r0
 800b7aa:	4405      	add	r5, r0
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	9b05      	ldr	r3, [sp, #20]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dd05      	ble.n	800b7c0 <_dtoa_r+0x828>
 800b7b4:	4651      	mov	r1, sl
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fc3b 	bl	800c034 <__lshift>
 800b7be:	4682      	mov	sl, r0
 800b7c0:	9b06      	ldr	r3, [sp, #24]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dd05      	ble.n	800b7d2 <_dtoa_r+0x83a>
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 fc32 	bl	800c034 <__lshift>
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d072      	beq.n	800b8be <_dtoa_r+0x926>
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4650      	mov	r0, sl
 800b7dc:	f000 fc96 	bl	800c10c <__mcmp>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	da6c      	bge.n	800b8be <_dtoa_r+0x926>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4651      	mov	r1, sl
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fa74 	bl	800bcd8 <__multadd>
 800b7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 81b0 	beq.w	800bb5e <_dtoa_r+0xbc6>
 800b7fe:	2300      	movs	r3, #0
 800b800:	4639      	mov	r1, r7
 800b802:	220a      	movs	r2, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fa67 	bl	800bcd8 <__multadd>
 800b80a:	9b01      	ldr	r3, [sp, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	4607      	mov	r7, r0
 800b810:	f300 8096 	bgt.w	800b940 <_dtoa_r+0x9a8>
 800b814:	9b07      	ldr	r3, [sp, #28]
 800b816:	2b02      	cmp	r3, #2
 800b818:	dc59      	bgt.n	800b8ce <_dtoa_r+0x936>
 800b81a:	e091      	b.n	800b940 <_dtoa_r+0x9a8>
 800b81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b81e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b822:	e758      	b.n	800b6d6 <_dtoa_r+0x73e>
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	1e5e      	subs	r6, r3, #1
 800b828:	9b08      	ldr	r3, [sp, #32]
 800b82a:	42b3      	cmp	r3, r6
 800b82c:	bfbf      	itttt	lt
 800b82e:	9b08      	ldrlt	r3, [sp, #32]
 800b830:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b832:	9608      	strlt	r6, [sp, #32]
 800b834:	1af3      	sublt	r3, r6, r3
 800b836:	bfb4      	ite	lt
 800b838:	18d2      	addlt	r2, r2, r3
 800b83a:	1b9e      	subge	r6, r3, r6
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	bfbc      	itt	lt
 800b840:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b842:	2600      	movlt	r6, #0
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfb7      	itett	lt
 800b848:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b84c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b850:	1a9d      	sublt	r5, r3, r2
 800b852:	2300      	movlt	r3, #0
 800b854:	e741      	b.n	800b6da <_dtoa_r+0x742>
 800b856:	9e08      	ldr	r6, [sp, #32]
 800b858:	9d05      	ldr	r5, [sp, #20]
 800b85a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b85c:	e748      	b.n	800b6f0 <_dtoa_r+0x758>
 800b85e:	9a08      	ldr	r2, [sp, #32]
 800b860:	e770      	b.n	800b744 <_dtoa_r+0x7ac>
 800b862:	9b07      	ldr	r3, [sp, #28]
 800b864:	2b01      	cmp	r3, #1
 800b866:	dc19      	bgt.n	800b89c <_dtoa_r+0x904>
 800b868:	9b02      	ldr	r3, [sp, #8]
 800b86a:	b9bb      	cbnz	r3, 800b89c <_dtoa_r+0x904>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b872:	b99b      	cbnz	r3, 800b89c <_dtoa_r+0x904>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b87a:	0d1b      	lsrs	r3, r3, #20
 800b87c:	051b      	lsls	r3, r3, #20
 800b87e:	b183      	cbz	r3, 800b8a2 <_dtoa_r+0x90a>
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	3301      	adds	r3, #1
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	9b06      	ldr	r3, [sp, #24]
 800b888:	3301      	adds	r3, #1
 800b88a:	9306      	str	r3, [sp, #24]
 800b88c:	f04f 0801 	mov.w	r8, #1
 800b890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b892:	2b00      	cmp	r3, #0
 800b894:	f47f af6f 	bne.w	800b776 <_dtoa_r+0x7de>
 800b898:	2001      	movs	r0, #1
 800b89a:	e774      	b.n	800b786 <_dtoa_r+0x7ee>
 800b89c:	f04f 0800 	mov.w	r8, #0
 800b8a0:	e7f6      	b.n	800b890 <_dtoa_r+0x8f8>
 800b8a2:	4698      	mov	r8, r3
 800b8a4:	e7f4      	b.n	800b890 <_dtoa_r+0x8f8>
 800b8a6:	d082      	beq.n	800b7ae <_dtoa_r+0x816>
 800b8a8:	9a05      	ldr	r2, [sp, #20]
 800b8aa:	331c      	adds	r3, #28
 800b8ac:	441a      	add	r2, r3
 800b8ae:	9205      	str	r2, [sp, #20]
 800b8b0:	9a06      	ldr	r2, [sp, #24]
 800b8b2:	441a      	add	r2, r3
 800b8b4:	441d      	add	r5, r3
 800b8b6:	9206      	str	r2, [sp, #24]
 800b8b8:	e779      	b.n	800b7ae <_dtoa_r+0x816>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	e7f4      	b.n	800b8a8 <_dtoa_r+0x910>
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	dc37      	bgt.n	800b934 <_dtoa_r+0x99c>
 800b8c4:	9b07      	ldr	r3, [sp, #28]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	dd34      	ble.n	800b934 <_dtoa_r+0x99c>
 800b8ca:	9b04      	ldr	r3, [sp, #16]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	b963      	cbnz	r3, 800b8ec <_dtoa_r+0x954>
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	2205      	movs	r2, #5
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f9fe 	bl	800bcd8 <__multadd>
 800b8dc:	4601      	mov	r1, r0
 800b8de:	4606      	mov	r6, r0
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	f000 fc13 	bl	800c10c <__mcmp>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f73f adbb 	bgt.w	800b462 <_dtoa_r+0x4ca>
 800b8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ee:	9d00      	ldr	r5, [sp, #0]
 800b8f0:	ea6f 0b03 	mvn.w	fp, r3
 800b8f4:	f04f 0800 	mov.w	r8, #0
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 f9ca 	bl	800bc94 <_Bfree>
 800b900:	2f00      	cmp	r7, #0
 800b902:	f43f aeab 	beq.w	800b65c <_dtoa_r+0x6c4>
 800b906:	f1b8 0f00 	cmp.w	r8, #0
 800b90a:	d005      	beq.n	800b918 <_dtoa_r+0x980>
 800b90c:	45b8      	cmp	r8, r7
 800b90e:	d003      	beq.n	800b918 <_dtoa_r+0x980>
 800b910:	4641      	mov	r1, r8
 800b912:	4620      	mov	r0, r4
 800b914:	f000 f9be 	bl	800bc94 <_Bfree>
 800b918:	4639      	mov	r1, r7
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 f9ba 	bl	800bc94 <_Bfree>
 800b920:	e69c      	b.n	800b65c <_dtoa_r+0x6c4>
 800b922:	2600      	movs	r6, #0
 800b924:	4637      	mov	r7, r6
 800b926:	e7e1      	b.n	800b8ec <_dtoa_r+0x954>
 800b928:	46bb      	mov	fp, r7
 800b92a:	4637      	mov	r7, r6
 800b92c:	e599      	b.n	800b462 <_dtoa_r+0x4ca>
 800b92e:	bf00      	nop
 800b930:	40240000 	.word	0x40240000
 800b934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80c8 	beq.w	800bacc <_dtoa_r+0xb34>
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	2d00      	cmp	r5, #0
 800b942:	dd05      	ble.n	800b950 <_dtoa_r+0x9b8>
 800b944:	4639      	mov	r1, r7
 800b946:	462a      	mov	r2, r5
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fb73 	bl	800c034 <__lshift>
 800b94e:	4607      	mov	r7, r0
 800b950:	f1b8 0f00 	cmp.w	r8, #0
 800b954:	d05b      	beq.n	800ba0e <_dtoa_r+0xa76>
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 f95b 	bl	800bc14 <_Balloc>
 800b95e:	4605      	mov	r5, r0
 800b960:	b928      	cbnz	r0, 800b96e <_dtoa_r+0x9d6>
 800b962:	4b83      	ldr	r3, [pc, #524]	; (800bb70 <_dtoa_r+0xbd8>)
 800b964:	4602      	mov	r2, r0
 800b966:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b96a:	f7ff bb2e 	b.w	800afca <_dtoa_r+0x32>
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	3202      	adds	r2, #2
 800b972:	0092      	lsls	r2, r2, #2
 800b974:	f107 010c 	add.w	r1, r7, #12
 800b978:	300c      	adds	r0, #12
 800b97a:	f7ff fa76 	bl	800ae6a <memcpy>
 800b97e:	2201      	movs	r2, #1
 800b980:	4629      	mov	r1, r5
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fb56 	bl	800c034 <__lshift>
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b992:	4413      	add	r3, r2
 800b994:	9308      	str	r3, [sp, #32]
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	46b8      	mov	r8, r7
 800b99e:	9306      	str	r3, [sp, #24]
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	f7ff fa6b 	bl	800ae86 <quorem>
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	9002      	str	r0, [sp, #8]
 800b9b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	f000 fba7 	bl	800c10c <__mcmp>
 800b9be:	463a      	mov	r2, r7
 800b9c0:	9005      	str	r0, [sp, #20]
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fbbd 	bl	800c144 <__mdiff>
 800b9ca:	68c2      	ldr	r2, [r0, #12]
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	bb02      	cbnz	r2, 800ba12 <_dtoa_r+0xa7a>
 800b9d0:	4601      	mov	r1, r0
 800b9d2:	4650      	mov	r0, sl
 800b9d4:	f000 fb9a 	bl	800c10c <__mcmp>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4620      	mov	r0, r4
 800b9de:	9209      	str	r2, [sp, #36]	; 0x24
 800b9e0:	f000 f958 	bl	800bc94 <_Bfree>
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e8:	9d04      	ldr	r5, [sp, #16]
 800b9ea:	ea43 0102 	orr.w	r1, r3, r2
 800b9ee:	9b06      	ldr	r3, [sp, #24]
 800b9f0:	4319      	orrs	r1, r3
 800b9f2:	d110      	bne.n	800ba16 <_dtoa_r+0xa7e>
 800b9f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9f8:	d029      	beq.n	800ba4e <_dtoa_r+0xab6>
 800b9fa:	9b05      	ldr	r3, [sp, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd02      	ble.n	800ba06 <_dtoa_r+0xa6e>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	f883 9000 	strb.w	r9, [r3]
 800ba0c:	e774      	b.n	800b8f8 <_dtoa_r+0x960>
 800ba0e:	4638      	mov	r0, r7
 800ba10:	e7ba      	b.n	800b988 <_dtoa_r+0x9f0>
 800ba12:	2201      	movs	r2, #1
 800ba14:	e7e1      	b.n	800b9da <_dtoa_r+0xa42>
 800ba16:	9b05      	ldr	r3, [sp, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	db04      	blt.n	800ba26 <_dtoa_r+0xa8e>
 800ba1c:	9907      	ldr	r1, [sp, #28]
 800ba1e:	430b      	orrs	r3, r1
 800ba20:	9906      	ldr	r1, [sp, #24]
 800ba22:	430b      	orrs	r3, r1
 800ba24:	d120      	bne.n	800ba68 <_dtoa_r+0xad0>
 800ba26:	2a00      	cmp	r2, #0
 800ba28:	dded      	ble.n	800ba06 <_dtoa_r+0xa6e>
 800ba2a:	4651      	mov	r1, sl
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fb00 	bl	800c034 <__lshift>
 800ba34:	4631      	mov	r1, r6
 800ba36:	4682      	mov	sl, r0
 800ba38:	f000 fb68 	bl	800c10c <__mcmp>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	dc03      	bgt.n	800ba48 <_dtoa_r+0xab0>
 800ba40:	d1e1      	bne.n	800ba06 <_dtoa_r+0xa6e>
 800ba42:	f019 0f01 	tst.w	r9, #1
 800ba46:	d0de      	beq.n	800ba06 <_dtoa_r+0xa6e>
 800ba48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba4c:	d1d8      	bne.n	800ba00 <_dtoa_r+0xa68>
 800ba4e:	9a01      	ldr	r2, [sp, #4]
 800ba50:	2339      	movs	r3, #57	; 0x39
 800ba52:	7013      	strb	r3, [r2, #0]
 800ba54:	462b      	mov	r3, r5
 800ba56:	461d      	mov	r5, r3
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba5e:	2a39      	cmp	r2, #57	; 0x39
 800ba60:	d06c      	beq.n	800bb3c <_dtoa_r+0xba4>
 800ba62:	3201      	adds	r2, #1
 800ba64:	701a      	strb	r2, [r3, #0]
 800ba66:	e747      	b.n	800b8f8 <_dtoa_r+0x960>
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	dd07      	ble.n	800ba7c <_dtoa_r+0xae4>
 800ba6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba70:	d0ed      	beq.n	800ba4e <_dtoa_r+0xab6>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	f109 0301 	add.w	r3, r9, #1
 800ba78:	7013      	strb	r3, [r2, #0]
 800ba7a:	e73d      	b.n	800b8f8 <_dtoa_r+0x960>
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	9a08      	ldr	r2, [sp, #32]
 800ba80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d043      	beq.n	800bb10 <_dtoa_r+0xb78>
 800ba88:	4651      	mov	r1, sl
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	220a      	movs	r2, #10
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 f922 	bl	800bcd8 <__multadd>
 800ba94:	45b8      	cmp	r8, r7
 800ba96:	4682      	mov	sl, r0
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	f04f 020a 	mov.w	r2, #10
 800baa0:	4641      	mov	r1, r8
 800baa2:	4620      	mov	r0, r4
 800baa4:	d107      	bne.n	800bab6 <_dtoa_r+0xb1e>
 800baa6:	f000 f917 	bl	800bcd8 <__multadd>
 800baaa:	4680      	mov	r8, r0
 800baac:	4607      	mov	r7, r0
 800baae:	9b04      	ldr	r3, [sp, #16]
 800bab0:	3301      	adds	r3, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	e775      	b.n	800b9a2 <_dtoa_r+0xa0a>
 800bab6:	f000 f90f 	bl	800bcd8 <__multadd>
 800baba:	4639      	mov	r1, r7
 800babc:	4680      	mov	r8, r0
 800babe:	2300      	movs	r3, #0
 800bac0:	220a      	movs	r2, #10
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 f908 	bl	800bcd8 <__multadd>
 800bac8:	4607      	mov	r7, r0
 800baca:	e7f0      	b.n	800baae <_dtoa_r+0xb16>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	9d00      	ldr	r5, [sp, #0]
 800bad2:	4631      	mov	r1, r6
 800bad4:	4650      	mov	r0, sl
 800bad6:	f7ff f9d6 	bl	800ae86 <quorem>
 800bada:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bade:	9b00      	ldr	r3, [sp, #0]
 800bae0:	f805 9b01 	strb.w	r9, [r5], #1
 800bae4:	1aea      	subs	r2, r5, r3
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	4293      	cmp	r3, r2
 800baea:	dd07      	ble.n	800bafc <_dtoa_r+0xb64>
 800baec:	4651      	mov	r1, sl
 800baee:	2300      	movs	r3, #0
 800baf0:	220a      	movs	r2, #10
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 f8f0 	bl	800bcd8 <__multadd>
 800baf8:	4682      	mov	sl, r0
 800bafa:	e7ea      	b.n	800bad2 <_dtoa_r+0xb3a>
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfc8      	it	gt
 800bb02:	461d      	movgt	r5, r3
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	bfd8      	it	le
 800bb08:	2501      	movle	r5, #1
 800bb0a:	441d      	add	r5, r3
 800bb0c:	f04f 0800 	mov.w	r8, #0
 800bb10:	4651      	mov	r1, sl
 800bb12:	2201      	movs	r2, #1
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fa8d 	bl	800c034 <__lshift>
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4682      	mov	sl, r0
 800bb1e:	f000 faf5 	bl	800c10c <__mcmp>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	dc96      	bgt.n	800ba54 <_dtoa_r+0xabc>
 800bb26:	d102      	bne.n	800bb2e <_dtoa_r+0xb96>
 800bb28:	f019 0f01 	tst.w	r9, #1
 800bb2c:	d192      	bne.n	800ba54 <_dtoa_r+0xabc>
 800bb2e:	462b      	mov	r3, r5
 800bb30:	461d      	mov	r5, r3
 800bb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb36:	2a30      	cmp	r2, #48	; 0x30
 800bb38:	d0fa      	beq.n	800bb30 <_dtoa_r+0xb98>
 800bb3a:	e6dd      	b.n	800b8f8 <_dtoa_r+0x960>
 800bb3c:	9a00      	ldr	r2, [sp, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d189      	bne.n	800ba56 <_dtoa_r+0xabe>
 800bb42:	f10b 0b01 	add.w	fp, fp, #1
 800bb46:	2331      	movs	r3, #49	; 0x31
 800bb48:	e796      	b.n	800ba78 <_dtoa_r+0xae0>
 800bb4a:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <_dtoa_r+0xbdc>)
 800bb4c:	f7ff ba99 	b.w	800b082 <_dtoa_r+0xea>
 800bb50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f47f aa6d 	bne.w	800b032 <_dtoa_r+0x9a>
 800bb58:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <_dtoa_r+0xbe0>)
 800bb5a:	f7ff ba92 	b.w	800b082 <_dtoa_r+0xea>
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dcb5      	bgt.n	800bad0 <_dtoa_r+0xb38>
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	f73f aeb1 	bgt.w	800b8ce <_dtoa_r+0x936>
 800bb6c:	e7b0      	b.n	800bad0 <_dtoa_r+0xb38>
 800bb6e:	bf00      	nop
 800bb70:	0801867c 	.word	0x0801867c
 800bb74:	080185dc 	.word	0x080185dc
 800bb78:	08018600 	.word	0x08018600

0800bb7c <_free_r>:
 800bb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d044      	beq.n	800bc0c <_free_r+0x90>
 800bb82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb86:	9001      	str	r0, [sp, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb8e:	bfb8      	it	lt
 800bb90:	18e4      	addlt	r4, r4, r3
 800bb92:	f7fe fb51 	bl	800a238 <__malloc_lock>
 800bb96:	4a1e      	ldr	r2, [pc, #120]	; (800bc10 <_free_r+0x94>)
 800bb98:	9801      	ldr	r0, [sp, #4]
 800bb9a:	6813      	ldr	r3, [r2, #0]
 800bb9c:	b933      	cbnz	r3, 800bbac <_free_r+0x30>
 800bb9e:	6063      	str	r3, [r4, #4]
 800bba0:	6014      	str	r4, [r2, #0]
 800bba2:	b003      	add	sp, #12
 800bba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bba8:	f7fe bb4c 	b.w	800a244 <__malloc_unlock>
 800bbac:	42a3      	cmp	r3, r4
 800bbae:	d908      	bls.n	800bbc2 <_free_r+0x46>
 800bbb0:	6825      	ldr	r5, [r4, #0]
 800bbb2:	1961      	adds	r1, r4, r5
 800bbb4:	428b      	cmp	r3, r1
 800bbb6:	bf01      	itttt	eq
 800bbb8:	6819      	ldreq	r1, [r3, #0]
 800bbba:	685b      	ldreq	r3, [r3, #4]
 800bbbc:	1949      	addeq	r1, r1, r5
 800bbbe:	6021      	streq	r1, [r4, #0]
 800bbc0:	e7ed      	b.n	800bb9e <_free_r+0x22>
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	b10b      	cbz	r3, 800bbcc <_free_r+0x50>
 800bbc8:	42a3      	cmp	r3, r4
 800bbca:	d9fa      	bls.n	800bbc2 <_free_r+0x46>
 800bbcc:	6811      	ldr	r1, [r2, #0]
 800bbce:	1855      	adds	r5, r2, r1
 800bbd0:	42a5      	cmp	r5, r4
 800bbd2:	d10b      	bne.n	800bbec <_free_r+0x70>
 800bbd4:	6824      	ldr	r4, [r4, #0]
 800bbd6:	4421      	add	r1, r4
 800bbd8:	1854      	adds	r4, r2, r1
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	6011      	str	r1, [r2, #0]
 800bbde:	d1e0      	bne.n	800bba2 <_free_r+0x26>
 800bbe0:	681c      	ldr	r4, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	6053      	str	r3, [r2, #4]
 800bbe6:	440c      	add	r4, r1
 800bbe8:	6014      	str	r4, [r2, #0]
 800bbea:	e7da      	b.n	800bba2 <_free_r+0x26>
 800bbec:	d902      	bls.n	800bbf4 <_free_r+0x78>
 800bbee:	230c      	movs	r3, #12
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	e7d6      	b.n	800bba2 <_free_r+0x26>
 800bbf4:	6825      	ldr	r5, [r4, #0]
 800bbf6:	1961      	adds	r1, r4, r5
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	bf04      	itt	eq
 800bbfc:	6819      	ldreq	r1, [r3, #0]
 800bbfe:	685b      	ldreq	r3, [r3, #4]
 800bc00:	6063      	str	r3, [r4, #4]
 800bc02:	bf04      	itt	eq
 800bc04:	1949      	addeq	r1, r1, r5
 800bc06:	6021      	streq	r1, [r4, #0]
 800bc08:	6054      	str	r4, [r2, #4]
 800bc0a:	e7ca      	b.n	800bba2 <_free_r+0x26>
 800bc0c:	b003      	add	sp, #12
 800bc0e:	bd30      	pop	{r4, r5, pc}
 800bc10:	2000127c 	.word	0x2000127c

0800bc14 <_Balloc>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	69c6      	ldr	r6, [r0, #28]
 800bc18:	4604      	mov	r4, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	b976      	cbnz	r6, 800bc3c <_Balloc+0x28>
 800bc1e:	2010      	movs	r0, #16
 800bc20:	f7f7 fdbc 	bl	800379c <__wrap_malloc>
 800bc24:	4602      	mov	r2, r0
 800bc26:	61e0      	str	r0, [r4, #28]
 800bc28:	b920      	cbnz	r0, 800bc34 <_Balloc+0x20>
 800bc2a:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <_Balloc+0x78>)
 800bc2c:	4818      	ldr	r0, [pc, #96]	; (800bc90 <_Balloc+0x7c>)
 800bc2e:	216b      	movs	r1, #107	; 0x6b
 800bc30:	f000 fc1a 	bl	800c468 <__assert_func>
 800bc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc38:	6006      	str	r6, [r0, #0]
 800bc3a:	60c6      	str	r6, [r0, #12]
 800bc3c:	69e6      	ldr	r6, [r4, #28]
 800bc3e:	68f3      	ldr	r3, [r6, #12]
 800bc40:	b183      	cbz	r3, 800bc64 <_Balloc+0x50>
 800bc42:	69e3      	ldr	r3, [r4, #28]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc4a:	b9b8      	cbnz	r0, 800bc7c <_Balloc+0x68>
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	fa01 f605 	lsl.w	r6, r1, r5
 800bc52:	1d72      	adds	r2, r6, #5
 800bc54:	0092      	lsls	r2, r2, #2
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 fc24 	bl	800c4a4 <_calloc_r>
 800bc5c:	b160      	cbz	r0, 800bc78 <_Balloc+0x64>
 800bc5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc62:	e00e      	b.n	800bc82 <_Balloc+0x6e>
 800bc64:	2221      	movs	r2, #33	; 0x21
 800bc66:	2104      	movs	r1, #4
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fc1b 	bl	800c4a4 <_calloc_r>
 800bc6e:	69e3      	ldr	r3, [r4, #28]
 800bc70:	60f0      	str	r0, [r6, #12]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1e4      	bne.n	800bc42 <_Balloc+0x2e>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}
 800bc7c:	6802      	ldr	r2, [r0, #0]
 800bc7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc82:	2300      	movs	r3, #0
 800bc84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc88:	e7f7      	b.n	800bc7a <_Balloc+0x66>
 800bc8a:	bf00      	nop
 800bc8c:	0801860d 	.word	0x0801860d
 800bc90:	0801868d 	.word	0x0801868d

0800bc94 <_Bfree>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	69c6      	ldr	r6, [r0, #28]
 800bc98:	4605      	mov	r5, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	b976      	cbnz	r6, 800bcbc <_Bfree+0x28>
 800bc9e:	2010      	movs	r0, #16
 800bca0:	f7f7 fd7c 	bl	800379c <__wrap_malloc>
 800bca4:	4602      	mov	r2, r0
 800bca6:	61e8      	str	r0, [r5, #28]
 800bca8:	b920      	cbnz	r0, 800bcb4 <_Bfree+0x20>
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <_Bfree+0x3c>)
 800bcac:	4809      	ldr	r0, [pc, #36]	; (800bcd4 <_Bfree+0x40>)
 800bcae:	218f      	movs	r1, #143	; 0x8f
 800bcb0:	f000 fbda 	bl	800c468 <__assert_func>
 800bcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcb8:	6006      	str	r6, [r0, #0]
 800bcba:	60c6      	str	r6, [r0, #12]
 800bcbc:	b13c      	cbz	r4, 800bcce <_Bfree+0x3a>
 800bcbe:	69eb      	ldr	r3, [r5, #28]
 800bcc0:	6862      	ldr	r2, [r4, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcc8:	6021      	str	r1, [r4, #0]
 800bcca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	0801860d 	.word	0x0801860d
 800bcd4:	0801868d 	.word	0x0801868d

0800bcd8 <__multadd>:
 800bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	690d      	ldr	r5, [r1, #16]
 800bcde:	4607      	mov	r7, r0
 800bce0:	460c      	mov	r4, r1
 800bce2:	461e      	mov	r6, r3
 800bce4:	f101 0c14 	add.w	ip, r1, #20
 800bce8:	2000      	movs	r0, #0
 800bcea:	f8dc 3000 	ldr.w	r3, [ip]
 800bcee:	b299      	uxth	r1, r3
 800bcf0:	fb02 6101 	mla	r1, r2, r1, r6
 800bcf4:	0c1e      	lsrs	r6, r3, #16
 800bcf6:	0c0b      	lsrs	r3, r1, #16
 800bcf8:	fb02 3306 	mla	r3, r2, r6, r3
 800bcfc:	b289      	uxth	r1, r1
 800bcfe:	3001      	adds	r0, #1
 800bd00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd04:	4285      	cmp	r5, r0
 800bd06:	f84c 1b04 	str.w	r1, [ip], #4
 800bd0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd0e:	dcec      	bgt.n	800bcea <__multadd+0x12>
 800bd10:	b30e      	cbz	r6, 800bd56 <__multadd+0x7e>
 800bd12:	68a3      	ldr	r3, [r4, #8]
 800bd14:	42ab      	cmp	r3, r5
 800bd16:	dc19      	bgt.n	800bd4c <__multadd+0x74>
 800bd18:	6861      	ldr	r1, [r4, #4]
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	3101      	adds	r1, #1
 800bd1e:	f7ff ff79 	bl	800bc14 <_Balloc>
 800bd22:	4680      	mov	r8, r0
 800bd24:	b928      	cbnz	r0, 800bd32 <__multadd+0x5a>
 800bd26:	4602      	mov	r2, r0
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <__multadd+0x84>)
 800bd2a:	480d      	ldr	r0, [pc, #52]	; (800bd60 <__multadd+0x88>)
 800bd2c:	21ba      	movs	r1, #186	; 0xba
 800bd2e:	f000 fb9b 	bl	800c468 <__assert_func>
 800bd32:	6922      	ldr	r2, [r4, #16]
 800bd34:	3202      	adds	r2, #2
 800bd36:	f104 010c 	add.w	r1, r4, #12
 800bd3a:	0092      	lsls	r2, r2, #2
 800bd3c:	300c      	adds	r0, #12
 800bd3e:	f7ff f894 	bl	800ae6a <memcpy>
 800bd42:	4621      	mov	r1, r4
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff ffa5 	bl	800bc94 <_Bfree>
 800bd4a:	4644      	mov	r4, r8
 800bd4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd50:	3501      	adds	r5, #1
 800bd52:	615e      	str	r6, [r3, #20]
 800bd54:	6125      	str	r5, [r4, #16]
 800bd56:	4620      	mov	r0, r4
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	0801867c 	.word	0x0801867c
 800bd60:	0801868d 	.word	0x0801868d

0800bd64 <__hi0bits>:
 800bd64:	0c03      	lsrs	r3, r0, #16
 800bd66:	041b      	lsls	r3, r3, #16
 800bd68:	b9d3      	cbnz	r3, 800bda0 <__hi0bits+0x3c>
 800bd6a:	0400      	lsls	r0, r0, #16
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd72:	bf04      	itt	eq
 800bd74:	0200      	lsleq	r0, r0, #8
 800bd76:	3308      	addeq	r3, #8
 800bd78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd7c:	bf04      	itt	eq
 800bd7e:	0100      	lsleq	r0, r0, #4
 800bd80:	3304      	addeq	r3, #4
 800bd82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd86:	bf04      	itt	eq
 800bd88:	0080      	lsleq	r0, r0, #2
 800bd8a:	3302      	addeq	r3, #2
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	db05      	blt.n	800bd9c <__hi0bits+0x38>
 800bd90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd94:	f103 0301 	add.w	r3, r3, #1
 800bd98:	bf08      	it	eq
 800bd9a:	2320      	moveq	r3, #32
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	4770      	bx	lr
 800bda0:	2300      	movs	r3, #0
 800bda2:	e7e4      	b.n	800bd6e <__hi0bits+0xa>

0800bda4 <__lo0bits>:
 800bda4:	6803      	ldr	r3, [r0, #0]
 800bda6:	f013 0207 	ands.w	r2, r3, #7
 800bdaa:	d00c      	beq.n	800bdc6 <__lo0bits+0x22>
 800bdac:	07d9      	lsls	r1, r3, #31
 800bdae:	d422      	bmi.n	800bdf6 <__lo0bits+0x52>
 800bdb0:	079a      	lsls	r2, r3, #30
 800bdb2:	bf49      	itett	mi
 800bdb4:	085b      	lsrmi	r3, r3, #1
 800bdb6:	089b      	lsrpl	r3, r3, #2
 800bdb8:	6003      	strmi	r3, [r0, #0]
 800bdba:	2201      	movmi	r2, #1
 800bdbc:	bf5c      	itt	pl
 800bdbe:	6003      	strpl	r3, [r0, #0]
 800bdc0:	2202      	movpl	r2, #2
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	4770      	bx	lr
 800bdc6:	b299      	uxth	r1, r3
 800bdc8:	b909      	cbnz	r1, 800bdce <__lo0bits+0x2a>
 800bdca:	0c1b      	lsrs	r3, r3, #16
 800bdcc:	2210      	movs	r2, #16
 800bdce:	b2d9      	uxtb	r1, r3
 800bdd0:	b909      	cbnz	r1, 800bdd6 <__lo0bits+0x32>
 800bdd2:	3208      	adds	r2, #8
 800bdd4:	0a1b      	lsrs	r3, r3, #8
 800bdd6:	0719      	lsls	r1, r3, #28
 800bdd8:	bf04      	itt	eq
 800bdda:	091b      	lsreq	r3, r3, #4
 800bddc:	3204      	addeq	r2, #4
 800bdde:	0799      	lsls	r1, r3, #30
 800bde0:	bf04      	itt	eq
 800bde2:	089b      	lsreq	r3, r3, #2
 800bde4:	3202      	addeq	r2, #2
 800bde6:	07d9      	lsls	r1, r3, #31
 800bde8:	d403      	bmi.n	800bdf2 <__lo0bits+0x4e>
 800bdea:	085b      	lsrs	r3, r3, #1
 800bdec:	f102 0201 	add.w	r2, r2, #1
 800bdf0:	d003      	beq.n	800bdfa <__lo0bits+0x56>
 800bdf2:	6003      	str	r3, [r0, #0]
 800bdf4:	e7e5      	b.n	800bdc2 <__lo0bits+0x1e>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	e7e3      	b.n	800bdc2 <__lo0bits+0x1e>
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	e7e1      	b.n	800bdc2 <__lo0bits+0x1e>
	...

0800be00 <__i2b>:
 800be00:	b510      	push	{r4, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	2101      	movs	r1, #1
 800be06:	f7ff ff05 	bl	800bc14 <_Balloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	b928      	cbnz	r0, 800be1a <__i2b+0x1a>
 800be0e:	4b05      	ldr	r3, [pc, #20]	; (800be24 <__i2b+0x24>)
 800be10:	4805      	ldr	r0, [pc, #20]	; (800be28 <__i2b+0x28>)
 800be12:	f240 1145 	movw	r1, #325	; 0x145
 800be16:	f000 fb27 	bl	800c468 <__assert_func>
 800be1a:	2301      	movs	r3, #1
 800be1c:	6144      	str	r4, [r0, #20]
 800be1e:	6103      	str	r3, [r0, #16]
 800be20:	bd10      	pop	{r4, pc}
 800be22:	bf00      	nop
 800be24:	0801867c 	.word	0x0801867c
 800be28:	0801868d 	.word	0x0801868d

0800be2c <__multiply>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	4691      	mov	r9, r2
 800be32:	690a      	ldr	r2, [r1, #16]
 800be34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be38:	429a      	cmp	r2, r3
 800be3a:	bfb8      	it	lt
 800be3c:	460b      	movlt	r3, r1
 800be3e:	460c      	mov	r4, r1
 800be40:	bfbc      	itt	lt
 800be42:	464c      	movlt	r4, r9
 800be44:	4699      	movlt	r9, r3
 800be46:	6927      	ldr	r7, [r4, #16]
 800be48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	6861      	ldr	r1, [r4, #4]
 800be50:	eb07 060a 	add.w	r6, r7, sl
 800be54:	42b3      	cmp	r3, r6
 800be56:	b085      	sub	sp, #20
 800be58:	bfb8      	it	lt
 800be5a:	3101      	addlt	r1, #1
 800be5c:	f7ff feda 	bl	800bc14 <_Balloc>
 800be60:	b930      	cbnz	r0, 800be70 <__multiply+0x44>
 800be62:	4602      	mov	r2, r0
 800be64:	4b44      	ldr	r3, [pc, #272]	; (800bf78 <__multiply+0x14c>)
 800be66:	4845      	ldr	r0, [pc, #276]	; (800bf7c <__multiply+0x150>)
 800be68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be6c:	f000 fafc 	bl	800c468 <__assert_func>
 800be70:	f100 0514 	add.w	r5, r0, #20
 800be74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be78:	462b      	mov	r3, r5
 800be7a:	2200      	movs	r2, #0
 800be7c:	4543      	cmp	r3, r8
 800be7e:	d321      	bcc.n	800bec4 <__multiply+0x98>
 800be80:	f104 0314 	add.w	r3, r4, #20
 800be84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be88:	f109 0314 	add.w	r3, r9, #20
 800be8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be90:	9202      	str	r2, [sp, #8]
 800be92:	1b3a      	subs	r2, r7, r4
 800be94:	3a15      	subs	r2, #21
 800be96:	f022 0203 	bic.w	r2, r2, #3
 800be9a:	3204      	adds	r2, #4
 800be9c:	f104 0115 	add.w	r1, r4, #21
 800bea0:	428f      	cmp	r7, r1
 800bea2:	bf38      	it	cc
 800bea4:	2204      	movcc	r2, #4
 800bea6:	9201      	str	r2, [sp, #4]
 800bea8:	9a02      	ldr	r2, [sp, #8]
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	429a      	cmp	r2, r3
 800beae:	d80c      	bhi.n	800beca <__multiply+0x9e>
 800beb0:	2e00      	cmp	r6, #0
 800beb2:	dd03      	ble.n	800bebc <__multiply+0x90>
 800beb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d05b      	beq.n	800bf74 <__multiply+0x148>
 800bebc:	6106      	str	r6, [r0, #16]
 800bebe:	b005      	add	sp, #20
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec4:	f843 2b04 	str.w	r2, [r3], #4
 800bec8:	e7d8      	b.n	800be7c <__multiply+0x50>
 800beca:	f8b3 a000 	ldrh.w	sl, [r3]
 800bece:	f1ba 0f00 	cmp.w	sl, #0
 800bed2:	d024      	beq.n	800bf1e <__multiply+0xf2>
 800bed4:	f104 0e14 	add.w	lr, r4, #20
 800bed8:	46a9      	mov	r9, r5
 800beda:	f04f 0c00 	mov.w	ip, #0
 800bede:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bee2:	f8d9 1000 	ldr.w	r1, [r9]
 800bee6:	fa1f fb82 	uxth.w	fp, r2
 800beea:	b289      	uxth	r1, r1
 800beec:	fb0a 110b 	mla	r1, sl, fp, r1
 800bef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bef4:	f8d9 2000 	ldr.w	r2, [r9]
 800bef8:	4461      	add	r1, ip
 800befa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800befe:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf06:	b289      	uxth	r1, r1
 800bf08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf0c:	4577      	cmp	r7, lr
 800bf0e:	f849 1b04 	str.w	r1, [r9], #4
 800bf12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf16:	d8e2      	bhi.n	800bede <__multiply+0xb2>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	f845 c002 	str.w	ip, [r5, r2]
 800bf1e:	9a03      	ldr	r2, [sp, #12]
 800bf20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf24:	3304      	adds	r3, #4
 800bf26:	f1b9 0f00 	cmp.w	r9, #0
 800bf2a:	d021      	beq.n	800bf70 <__multiply+0x144>
 800bf2c:	6829      	ldr	r1, [r5, #0]
 800bf2e:	f104 0c14 	add.w	ip, r4, #20
 800bf32:	46ae      	mov	lr, r5
 800bf34:	f04f 0a00 	mov.w	sl, #0
 800bf38:	f8bc b000 	ldrh.w	fp, [ip]
 800bf3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf40:	fb09 220b 	mla	r2, r9, fp, r2
 800bf44:	4452      	add	r2, sl
 800bf46:	b289      	uxth	r1, r1
 800bf48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf4c:	f84e 1b04 	str.w	r1, [lr], #4
 800bf50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf58:	f8be 1000 	ldrh.w	r1, [lr]
 800bf5c:	fb09 110a 	mla	r1, r9, sl, r1
 800bf60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf64:	4567      	cmp	r7, ip
 800bf66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf6a:	d8e5      	bhi.n	800bf38 <__multiply+0x10c>
 800bf6c:	9a01      	ldr	r2, [sp, #4]
 800bf6e:	50a9      	str	r1, [r5, r2]
 800bf70:	3504      	adds	r5, #4
 800bf72:	e799      	b.n	800bea8 <__multiply+0x7c>
 800bf74:	3e01      	subs	r6, #1
 800bf76:	e79b      	b.n	800beb0 <__multiply+0x84>
 800bf78:	0801867c 	.word	0x0801867c
 800bf7c:	0801868d 	.word	0x0801868d

0800bf80 <__pow5mult>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	4615      	mov	r5, r2
 800bf86:	f012 0203 	ands.w	r2, r2, #3
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	d007      	beq.n	800bfa0 <__pow5mult+0x20>
 800bf90:	4c25      	ldr	r4, [pc, #148]	; (800c028 <__pow5mult+0xa8>)
 800bf92:	3a01      	subs	r2, #1
 800bf94:	2300      	movs	r3, #0
 800bf96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf9a:	f7ff fe9d 	bl	800bcd8 <__multadd>
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	10ad      	asrs	r5, r5, #2
 800bfa2:	d03d      	beq.n	800c020 <__pow5mult+0xa0>
 800bfa4:	69f4      	ldr	r4, [r6, #28]
 800bfa6:	b97c      	cbnz	r4, 800bfc8 <__pow5mult+0x48>
 800bfa8:	2010      	movs	r0, #16
 800bfaa:	f7f7 fbf7 	bl	800379c <__wrap_malloc>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	61f0      	str	r0, [r6, #28]
 800bfb2:	b928      	cbnz	r0, 800bfc0 <__pow5mult+0x40>
 800bfb4:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <__pow5mult+0xac>)
 800bfb6:	481e      	ldr	r0, [pc, #120]	; (800c030 <__pow5mult+0xb0>)
 800bfb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bfbc:	f000 fa54 	bl	800c468 <__assert_func>
 800bfc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfc4:	6004      	str	r4, [r0, #0]
 800bfc6:	60c4      	str	r4, [r0, #12]
 800bfc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bfcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfd0:	b94c      	cbnz	r4, 800bfe6 <__pow5mult+0x66>
 800bfd2:	f240 2171 	movw	r1, #625	; 0x271
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ff12 	bl	800be00 <__i2b>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	f04f 0900 	mov.w	r9, #0
 800bfea:	07eb      	lsls	r3, r5, #31
 800bfec:	d50a      	bpl.n	800c004 <__pow5mult+0x84>
 800bfee:	4639      	mov	r1, r7
 800bff0:	4622      	mov	r2, r4
 800bff2:	4630      	mov	r0, r6
 800bff4:	f7ff ff1a 	bl	800be2c <__multiply>
 800bff8:	4639      	mov	r1, r7
 800bffa:	4680      	mov	r8, r0
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff fe49 	bl	800bc94 <_Bfree>
 800c002:	4647      	mov	r7, r8
 800c004:	106d      	asrs	r5, r5, #1
 800c006:	d00b      	beq.n	800c020 <__pow5mult+0xa0>
 800c008:	6820      	ldr	r0, [r4, #0]
 800c00a:	b938      	cbnz	r0, 800c01c <__pow5mult+0x9c>
 800c00c:	4622      	mov	r2, r4
 800c00e:	4621      	mov	r1, r4
 800c010:	4630      	mov	r0, r6
 800c012:	f7ff ff0b 	bl	800be2c <__multiply>
 800c016:	6020      	str	r0, [r4, #0]
 800c018:	f8c0 9000 	str.w	r9, [r0]
 800c01c:	4604      	mov	r4, r0
 800c01e:	e7e4      	b.n	800bfea <__pow5mult+0x6a>
 800c020:	4638      	mov	r0, r7
 800c022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c026:	bf00      	nop
 800c028:	080187d8 	.word	0x080187d8
 800c02c:	0801860d 	.word	0x0801860d
 800c030:	0801868d 	.word	0x0801868d

0800c034 <__lshift>:
 800c034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c038:	460c      	mov	r4, r1
 800c03a:	6849      	ldr	r1, [r1, #4]
 800c03c:	6923      	ldr	r3, [r4, #16]
 800c03e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c042:	68a3      	ldr	r3, [r4, #8]
 800c044:	4607      	mov	r7, r0
 800c046:	4691      	mov	r9, r2
 800c048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c04c:	f108 0601 	add.w	r6, r8, #1
 800c050:	42b3      	cmp	r3, r6
 800c052:	db0b      	blt.n	800c06c <__lshift+0x38>
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff fddd 	bl	800bc14 <_Balloc>
 800c05a:	4605      	mov	r5, r0
 800c05c:	b948      	cbnz	r0, 800c072 <__lshift+0x3e>
 800c05e:	4602      	mov	r2, r0
 800c060:	4b28      	ldr	r3, [pc, #160]	; (800c104 <__lshift+0xd0>)
 800c062:	4829      	ldr	r0, [pc, #164]	; (800c108 <__lshift+0xd4>)
 800c064:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c068:	f000 f9fe 	bl	800c468 <__assert_func>
 800c06c:	3101      	adds	r1, #1
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	e7ee      	b.n	800c050 <__lshift+0x1c>
 800c072:	2300      	movs	r3, #0
 800c074:	f100 0114 	add.w	r1, r0, #20
 800c078:	f100 0210 	add.w	r2, r0, #16
 800c07c:	4618      	mov	r0, r3
 800c07e:	4553      	cmp	r3, sl
 800c080:	db33      	blt.n	800c0ea <__lshift+0xb6>
 800c082:	6920      	ldr	r0, [r4, #16]
 800c084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c088:	f104 0314 	add.w	r3, r4, #20
 800c08c:	f019 091f 	ands.w	r9, r9, #31
 800c090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c094:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c098:	d02b      	beq.n	800c0f2 <__lshift+0xbe>
 800c09a:	f1c9 0e20 	rsb	lr, r9, #32
 800c09e:	468a      	mov	sl, r1
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	6818      	ldr	r0, [r3, #0]
 800c0a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c0a8:	4310      	orrs	r0, r2
 800c0aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b2:	459c      	cmp	ip, r3
 800c0b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0b8:	d8f3      	bhi.n	800c0a2 <__lshift+0x6e>
 800c0ba:	ebac 0304 	sub.w	r3, ip, r4
 800c0be:	3b15      	subs	r3, #21
 800c0c0:	f023 0303 	bic.w	r3, r3, #3
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	f104 0015 	add.w	r0, r4, #21
 800c0ca:	4584      	cmp	ip, r0
 800c0cc:	bf38      	it	cc
 800c0ce:	2304      	movcc	r3, #4
 800c0d0:	50ca      	str	r2, [r1, r3]
 800c0d2:	b10a      	cbz	r2, 800c0d8 <__lshift+0xa4>
 800c0d4:	f108 0602 	add.w	r6, r8, #2
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	4638      	mov	r0, r7
 800c0dc:	612e      	str	r6, [r5, #16]
 800c0de:	4621      	mov	r1, r4
 800c0e0:	f7ff fdd8 	bl	800bc94 <_Bfree>
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	e7c5      	b.n	800c07e <__lshift+0x4a>
 800c0f2:	3904      	subs	r1, #4
 800c0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0fc:	459c      	cmp	ip, r3
 800c0fe:	d8f9      	bhi.n	800c0f4 <__lshift+0xc0>
 800c100:	e7ea      	b.n	800c0d8 <__lshift+0xa4>
 800c102:	bf00      	nop
 800c104:	0801867c 	.word	0x0801867c
 800c108:	0801868d 	.word	0x0801868d

0800c10c <__mcmp>:
 800c10c:	b530      	push	{r4, r5, lr}
 800c10e:	6902      	ldr	r2, [r0, #16]
 800c110:	690c      	ldr	r4, [r1, #16]
 800c112:	1b12      	subs	r2, r2, r4
 800c114:	d10e      	bne.n	800c134 <__mcmp+0x28>
 800c116:	f100 0314 	add.w	r3, r0, #20
 800c11a:	3114      	adds	r1, #20
 800c11c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c120:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c124:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c128:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c12c:	42a5      	cmp	r5, r4
 800c12e:	d003      	beq.n	800c138 <__mcmp+0x2c>
 800c130:	d305      	bcc.n	800c13e <__mcmp+0x32>
 800c132:	2201      	movs	r2, #1
 800c134:	4610      	mov	r0, r2
 800c136:	bd30      	pop	{r4, r5, pc}
 800c138:	4283      	cmp	r3, r0
 800c13a:	d3f3      	bcc.n	800c124 <__mcmp+0x18>
 800c13c:	e7fa      	b.n	800c134 <__mcmp+0x28>
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295
 800c142:	e7f7      	b.n	800c134 <__mcmp+0x28>

0800c144 <__mdiff>:
 800c144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	4606      	mov	r6, r0
 800c14c:	4611      	mov	r1, r2
 800c14e:	4620      	mov	r0, r4
 800c150:	4690      	mov	r8, r2
 800c152:	f7ff ffdb 	bl	800c10c <__mcmp>
 800c156:	1e05      	subs	r5, r0, #0
 800c158:	d110      	bne.n	800c17c <__mdiff+0x38>
 800c15a:	4629      	mov	r1, r5
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff fd59 	bl	800bc14 <_Balloc>
 800c162:	b930      	cbnz	r0, 800c172 <__mdiff+0x2e>
 800c164:	4b3a      	ldr	r3, [pc, #232]	; (800c250 <__mdiff+0x10c>)
 800c166:	4602      	mov	r2, r0
 800c168:	f240 2137 	movw	r1, #567	; 0x237
 800c16c:	4839      	ldr	r0, [pc, #228]	; (800c254 <__mdiff+0x110>)
 800c16e:	f000 f97b 	bl	800c468 <__assert_func>
 800c172:	2301      	movs	r3, #1
 800c174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17c:	bfa4      	itt	ge
 800c17e:	4643      	movge	r3, r8
 800c180:	46a0      	movge	r8, r4
 800c182:	4630      	mov	r0, r6
 800c184:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c188:	bfa6      	itte	ge
 800c18a:	461c      	movge	r4, r3
 800c18c:	2500      	movge	r5, #0
 800c18e:	2501      	movlt	r5, #1
 800c190:	f7ff fd40 	bl	800bc14 <_Balloc>
 800c194:	b920      	cbnz	r0, 800c1a0 <__mdiff+0x5c>
 800c196:	4b2e      	ldr	r3, [pc, #184]	; (800c250 <__mdiff+0x10c>)
 800c198:	4602      	mov	r2, r0
 800c19a:	f240 2145 	movw	r1, #581	; 0x245
 800c19e:	e7e5      	b.n	800c16c <__mdiff+0x28>
 800c1a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1a4:	6926      	ldr	r6, [r4, #16]
 800c1a6:	60c5      	str	r5, [r0, #12]
 800c1a8:	f104 0914 	add.w	r9, r4, #20
 800c1ac:	f108 0514 	add.w	r5, r8, #20
 800c1b0:	f100 0e14 	add.w	lr, r0, #20
 800c1b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1bc:	f108 0210 	add.w	r2, r8, #16
 800c1c0:	46f2      	mov	sl, lr
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1cc:	fa11 f88b 	uxtah	r8, r1, fp
 800c1d0:	b299      	uxth	r1, r3
 800c1d2:	0c1b      	lsrs	r3, r3, #16
 800c1d4:	eba8 0801 	sub.w	r8, r8, r1
 800c1d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1e0:	fa1f f888 	uxth.w	r8, r8
 800c1e4:	1419      	asrs	r1, r3, #16
 800c1e6:	454e      	cmp	r6, r9
 800c1e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c1ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c1f0:	d8e8      	bhi.n	800c1c4 <__mdiff+0x80>
 800c1f2:	1b33      	subs	r3, r6, r4
 800c1f4:	3b15      	subs	r3, #21
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	3415      	adds	r4, #21
 800c1fe:	42a6      	cmp	r6, r4
 800c200:	bf38      	it	cc
 800c202:	2304      	movcc	r3, #4
 800c204:	441d      	add	r5, r3
 800c206:	4473      	add	r3, lr
 800c208:	469e      	mov	lr, r3
 800c20a:	462e      	mov	r6, r5
 800c20c:	4566      	cmp	r6, ip
 800c20e:	d30e      	bcc.n	800c22e <__mdiff+0xea>
 800c210:	f10c 0203 	add.w	r2, ip, #3
 800c214:	1b52      	subs	r2, r2, r5
 800c216:	f022 0203 	bic.w	r2, r2, #3
 800c21a:	3d03      	subs	r5, #3
 800c21c:	45ac      	cmp	ip, r5
 800c21e:	bf38      	it	cc
 800c220:	2200      	movcc	r2, #0
 800c222:	4413      	add	r3, r2
 800c224:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c228:	b17a      	cbz	r2, 800c24a <__mdiff+0x106>
 800c22a:	6107      	str	r7, [r0, #16]
 800c22c:	e7a4      	b.n	800c178 <__mdiff+0x34>
 800c22e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c232:	fa11 f288 	uxtah	r2, r1, r8
 800c236:	1414      	asrs	r4, r2, #16
 800c238:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c23c:	b292      	uxth	r2, r2
 800c23e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c242:	f84e 2b04 	str.w	r2, [lr], #4
 800c246:	1421      	asrs	r1, r4, #16
 800c248:	e7e0      	b.n	800c20c <__mdiff+0xc8>
 800c24a:	3f01      	subs	r7, #1
 800c24c:	e7ea      	b.n	800c224 <__mdiff+0xe0>
 800c24e:	bf00      	nop
 800c250:	0801867c 	.word	0x0801867c
 800c254:	0801868d 	.word	0x0801868d

0800c258 <__d2b>:
 800c258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	460f      	mov	r7, r1
 800c25e:	2101      	movs	r1, #1
 800c260:	ec59 8b10 	vmov	r8, r9, d0
 800c264:	4616      	mov	r6, r2
 800c266:	f7ff fcd5 	bl	800bc14 <_Balloc>
 800c26a:	4604      	mov	r4, r0
 800c26c:	b930      	cbnz	r0, 800c27c <__d2b+0x24>
 800c26e:	4602      	mov	r2, r0
 800c270:	4b24      	ldr	r3, [pc, #144]	; (800c304 <__d2b+0xac>)
 800c272:	4825      	ldr	r0, [pc, #148]	; (800c308 <__d2b+0xb0>)
 800c274:	f240 310f 	movw	r1, #783	; 0x30f
 800c278:	f000 f8f6 	bl	800c468 <__assert_func>
 800c27c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c284:	bb2d      	cbnz	r5, 800c2d2 <__d2b+0x7a>
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	f1b8 0300 	subs.w	r3, r8, #0
 800c28c:	d026      	beq.n	800c2dc <__d2b+0x84>
 800c28e:	4668      	mov	r0, sp
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	f7ff fd87 	bl	800bda4 <__lo0bits>
 800c296:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c29a:	b1e8      	cbz	r0, 800c2d8 <__d2b+0x80>
 800c29c:	f1c0 0320 	rsb	r3, r0, #32
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a4:	430b      	orrs	r3, r1
 800c2a6:	40c2      	lsrs	r2, r0
 800c2a8:	6163      	str	r3, [r4, #20]
 800c2aa:	9201      	str	r2, [sp, #4]
 800c2ac:	9b01      	ldr	r3, [sp, #4]
 800c2ae:	61a3      	str	r3, [r4, #24]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bf14      	ite	ne
 800c2b4:	2202      	movne	r2, #2
 800c2b6:	2201      	moveq	r2, #1
 800c2b8:	6122      	str	r2, [r4, #16]
 800c2ba:	b1bd      	cbz	r5, 800c2ec <__d2b+0x94>
 800c2bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2c0:	4405      	add	r5, r0
 800c2c2:	603d      	str	r5, [r7, #0]
 800c2c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2c8:	6030      	str	r0, [r6, #0]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	b003      	add	sp, #12
 800c2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2d6:	e7d6      	b.n	800c286 <__d2b+0x2e>
 800c2d8:	6161      	str	r1, [r4, #20]
 800c2da:	e7e7      	b.n	800c2ac <__d2b+0x54>
 800c2dc:	a801      	add	r0, sp, #4
 800c2de:	f7ff fd61 	bl	800bda4 <__lo0bits>
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	6163      	str	r3, [r4, #20]
 800c2e6:	3020      	adds	r0, #32
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	e7e5      	b.n	800c2b8 <__d2b+0x60>
 800c2ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2f4:	6038      	str	r0, [r7, #0]
 800c2f6:	6918      	ldr	r0, [r3, #16]
 800c2f8:	f7ff fd34 	bl	800bd64 <__hi0bits>
 800c2fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c300:	e7e2      	b.n	800c2c8 <__d2b+0x70>
 800c302:	bf00      	nop
 800c304:	0801867c 	.word	0x0801867c
 800c308:	0801868d 	.word	0x0801868d

0800c30c <__sflush_r>:
 800c30c:	898a      	ldrh	r2, [r1, #12]
 800c30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	0710      	lsls	r0, r2, #28
 800c316:	460c      	mov	r4, r1
 800c318:	d458      	bmi.n	800c3cc <__sflush_r+0xc0>
 800c31a:	684b      	ldr	r3, [r1, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dc05      	bgt.n	800c32c <__sflush_r+0x20>
 800c320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	dc02      	bgt.n	800c32c <__sflush_r+0x20>
 800c326:	2000      	movs	r0, #0
 800c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c32e:	2e00      	cmp	r6, #0
 800c330:	d0f9      	beq.n	800c326 <__sflush_r+0x1a>
 800c332:	2300      	movs	r3, #0
 800c334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c338:	682f      	ldr	r7, [r5, #0]
 800c33a:	6a21      	ldr	r1, [r4, #32]
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	d032      	beq.n	800c3a6 <__sflush_r+0x9a>
 800c340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	075a      	lsls	r2, r3, #29
 800c346:	d505      	bpl.n	800c354 <__sflush_r+0x48>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	1ac0      	subs	r0, r0, r3
 800c34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c34e:	b10b      	cbz	r3, 800c354 <__sflush_r+0x48>
 800c350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c352:	1ac0      	subs	r0, r0, r3
 800c354:	2300      	movs	r3, #0
 800c356:	4602      	mov	r2, r0
 800c358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b0      	blx	r6
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	d106      	bne.n	800c374 <__sflush_r+0x68>
 800c366:	6829      	ldr	r1, [r5, #0]
 800c368:	291d      	cmp	r1, #29
 800c36a:	d82b      	bhi.n	800c3c4 <__sflush_r+0xb8>
 800c36c:	4a29      	ldr	r2, [pc, #164]	; (800c414 <__sflush_r+0x108>)
 800c36e:	410a      	asrs	r2, r1
 800c370:	07d6      	lsls	r6, r2, #31
 800c372:	d427      	bmi.n	800c3c4 <__sflush_r+0xb8>
 800c374:	2200      	movs	r2, #0
 800c376:	6062      	str	r2, [r4, #4]
 800c378:	04d9      	lsls	r1, r3, #19
 800c37a:	6922      	ldr	r2, [r4, #16]
 800c37c:	6022      	str	r2, [r4, #0]
 800c37e:	d504      	bpl.n	800c38a <__sflush_r+0x7e>
 800c380:	1c42      	adds	r2, r0, #1
 800c382:	d101      	bne.n	800c388 <__sflush_r+0x7c>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b903      	cbnz	r3, 800c38a <__sflush_r+0x7e>
 800c388:	6560      	str	r0, [r4, #84]	; 0x54
 800c38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38c:	602f      	str	r7, [r5, #0]
 800c38e:	2900      	cmp	r1, #0
 800c390:	d0c9      	beq.n	800c326 <__sflush_r+0x1a>
 800c392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c396:	4299      	cmp	r1, r3
 800c398:	d002      	beq.n	800c3a0 <__sflush_r+0x94>
 800c39a:	4628      	mov	r0, r5
 800c39c:	f7ff fbee 	bl	800bb7c <_free_r>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a4:	e7c0      	b.n	800c328 <__sflush_r+0x1c>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b0      	blx	r6
 800c3ac:	1c41      	adds	r1, r0, #1
 800c3ae:	d1c8      	bne.n	800c342 <__sflush_r+0x36>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0c5      	beq.n	800c342 <__sflush_r+0x36>
 800c3b6:	2b1d      	cmp	r3, #29
 800c3b8:	d001      	beq.n	800c3be <__sflush_r+0xb2>
 800c3ba:	2b16      	cmp	r3, #22
 800c3bc:	d101      	bne.n	800c3c2 <__sflush_r+0xb6>
 800c3be:	602f      	str	r7, [r5, #0]
 800c3c0:	e7b1      	b.n	800c326 <__sflush_r+0x1a>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	e7ad      	b.n	800c328 <__sflush_r+0x1c>
 800c3cc:	690f      	ldr	r7, [r1, #16]
 800c3ce:	2f00      	cmp	r7, #0
 800c3d0:	d0a9      	beq.n	800c326 <__sflush_r+0x1a>
 800c3d2:	0793      	lsls	r3, r2, #30
 800c3d4:	680e      	ldr	r6, [r1, #0]
 800c3d6:	bf08      	it	eq
 800c3d8:	694b      	ldreq	r3, [r1, #20]
 800c3da:	600f      	str	r7, [r1, #0]
 800c3dc:	bf18      	it	ne
 800c3de:	2300      	movne	r3, #0
 800c3e0:	eba6 0807 	sub.w	r8, r6, r7
 800c3e4:	608b      	str	r3, [r1, #8]
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	dd9c      	ble.n	800c326 <__sflush_r+0x1a>
 800c3ec:	6a21      	ldr	r1, [r4, #32]
 800c3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3f0:	4643      	mov	r3, r8
 800c3f2:	463a      	mov	r2, r7
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b0      	blx	r6
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dc06      	bgt.n	800c40a <__sflush_r+0xfe>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	f04f 30ff 	mov.w	r0, #4294967295
 800c408:	e78e      	b.n	800c328 <__sflush_r+0x1c>
 800c40a:	4407      	add	r7, r0
 800c40c:	eba8 0800 	sub.w	r8, r8, r0
 800c410:	e7e9      	b.n	800c3e6 <__sflush_r+0xda>
 800c412:	bf00      	nop
 800c414:	dfbffffe 	.word	0xdfbffffe

0800c418 <_fflush_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	690b      	ldr	r3, [r1, #16]
 800c41c:	4605      	mov	r5, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	b913      	cbnz	r3, 800c428 <_fflush_r+0x10>
 800c422:	2500      	movs	r5, #0
 800c424:	4628      	mov	r0, r5
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	b118      	cbz	r0, 800c432 <_fflush_r+0x1a>
 800c42a:	6a03      	ldr	r3, [r0, #32]
 800c42c:	b90b      	cbnz	r3, 800c432 <_fflush_r+0x1a>
 800c42e:	f7fe fc01 	bl	800ac34 <__sinit>
 800c432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d0f3      	beq.n	800c422 <_fflush_r+0xa>
 800c43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c43c:	07d0      	lsls	r0, r2, #31
 800c43e:	d404      	bmi.n	800c44a <_fflush_r+0x32>
 800c440:	0599      	lsls	r1, r3, #22
 800c442:	d402      	bmi.n	800c44a <_fflush_r+0x32>
 800c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c446:	f7fe fd0e 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800c44a:	4628      	mov	r0, r5
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7ff ff5d 	bl	800c30c <__sflush_r>
 800c452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c454:	07da      	lsls	r2, r3, #31
 800c456:	4605      	mov	r5, r0
 800c458:	d4e4      	bmi.n	800c424 <_fflush_r+0xc>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	059b      	lsls	r3, r3, #22
 800c45e:	d4e1      	bmi.n	800c424 <_fflush_r+0xc>
 800c460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c462:	f7fe fd01 	bl	800ae68 <__retarget_lock_release_recursive>
 800c466:	e7dd      	b.n	800c424 <_fflush_r+0xc>

0800c468 <__assert_func>:
 800c468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c46a:	4614      	mov	r4, r2
 800c46c:	461a      	mov	r2, r3
 800c46e:	4b09      	ldr	r3, [pc, #36]	; (800c494 <__assert_func+0x2c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4605      	mov	r5, r0
 800c474:	68d8      	ldr	r0, [r3, #12]
 800c476:	b14c      	cbz	r4, 800c48c <__assert_func+0x24>
 800c478:	4b07      	ldr	r3, [pc, #28]	; (800c498 <__assert_func+0x30>)
 800c47a:	9100      	str	r1, [sp, #0]
 800c47c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c480:	4906      	ldr	r1, [pc, #24]	; (800c49c <__assert_func+0x34>)
 800c482:	462b      	mov	r3, r5
 800c484:	f000 f844 	bl	800c510 <fiprintf>
 800c488:	f000 f854 	bl	800c534 <abort>
 800c48c:	4b04      	ldr	r3, [pc, #16]	; (800c4a0 <__assert_func+0x38>)
 800c48e:	461c      	mov	r4, r3
 800c490:	e7f3      	b.n	800c47a <__assert_func+0x12>
 800c492:	bf00      	nop
 800c494:	200005dc 	.word	0x200005dc
 800c498:	080187ee 	.word	0x080187ee
 800c49c:	080187fb 	.word	0x080187fb
 800c4a0:	08018829 	.word	0x08018829

0800c4a4 <_calloc_r>:
 800c4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4a6:	fba1 2402 	umull	r2, r4, r1, r2
 800c4aa:	b94c      	cbnz	r4, 800c4c0 <_calloc_r+0x1c>
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	9201      	str	r2, [sp, #4]
 800c4b0:	f7fd fe42 	bl	800a138 <_malloc_r>
 800c4b4:	9a01      	ldr	r2, [sp, #4]
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	b930      	cbnz	r0, 800c4c8 <_calloc_r+0x24>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	b003      	add	sp, #12
 800c4be:	bd30      	pop	{r4, r5, pc}
 800c4c0:	220c      	movs	r2, #12
 800c4c2:	6002      	str	r2, [r0, #0]
 800c4c4:	2500      	movs	r5, #0
 800c4c6:	e7f8      	b.n	800c4ba <_calloc_r+0x16>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	f7fe fc2c 	bl	800ad26 <memset>
 800c4ce:	e7f4      	b.n	800c4ba <_calloc_r+0x16>

0800c4d0 <__ascii_mbtowc>:
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	b901      	cbnz	r1, 800c4d6 <__ascii_mbtowc+0x6>
 800c4d4:	a901      	add	r1, sp, #4
 800c4d6:	b142      	cbz	r2, 800c4ea <__ascii_mbtowc+0x1a>
 800c4d8:	b14b      	cbz	r3, 800c4ee <__ascii_mbtowc+0x1e>
 800c4da:	7813      	ldrb	r3, [r2, #0]
 800c4dc:	600b      	str	r3, [r1, #0]
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	1e10      	subs	r0, r2, #0
 800c4e2:	bf18      	it	ne
 800c4e4:	2001      	movne	r0, #1
 800c4e6:	b002      	add	sp, #8
 800c4e8:	4770      	bx	lr
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	e7fb      	b.n	800c4e6 <__ascii_mbtowc+0x16>
 800c4ee:	f06f 0001 	mvn.w	r0, #1
 800c4f2:	e7f8      	b.n	800c4e6 <__ascii_mbtowc+0x16>

0800c4f4 <__ascii_wctomb>:
 800c4f4:	b149      	cbz	r1, 800c50a <__ascii_wctomb+0x16>
 800c4f6:	2aff      	cmp	r2, #255	; 0xff
 800c4f8:	bf85      	ittet	hi
 800c4fa:	238a      	movhi	r3, #138	; 0x8a
 800c4fc:	6003      	strhi	r3, [r0, #0]
 800c4fe:	700a      	strbls	r2, [r1, #0]
 800c500:	f04f 30ff 	movhi.w	r0, #4294967295
 800c504:	bf98      	it	ls
 800c506:	2001      	movls	r0, #1
 800c508:	4770      	bx	lr
 800c50a:	4608      	mov	r0, r1
 800c50c:	4770      	bx	lr
	...

0800c510 <fiprintf>:
 800c510:	b40e      	push	{r1, r2, r3}
 800c512:	b503      	push	{r0, r1, lr}
 800c514:	4601      	mov	r1, r0
 800c516:	ab03      	add	r3, sp, #12
 800c518:	4805      	ldr	r0, [pc, #20]	; (800c530 <fiprintf+0x20>)
 800c51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51e:	6800      	ldr	r0, [r0, #0]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	f000 f837 	bl	800c594 <_vfiprintf_r>
 800c526:	b002      	add	sp, #8
 800c528:	f85d eb04 	ldr.w	lr, [sp], #4
 800c52c:	b003      	add	sp, #12
 800c52e:	4770      	bx	lr
 800c530:	200005dc 	.word	0x200005dc

0800c534 <abort>:
 800c534:	b508      	push	{r3, lr}
 800c536:	2006      	movs	r0, #6
 800c538:	f000 fa04 	bl	800c944 <raise>
 800c53c:	2001      	movs	r0, #1
 800c53e:	f7f4 ff4d 	bl	80013dc <_exit>

0800c542 <__sfputc_r>:
 800c542:	6893      	ldr	r3, [r2, #8]
 800c544:	3b01      	subs	r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	b410      	push	{r4}
 800c54a:	6093      	str	r3, [r2, #8]
 800c54c:	da08      	bge.n	800c560 <__sfputc_r+0x1e>
 800c54e:	6994      	ldr	r4, [r2, #24]
 800c550:	42a3      	cmp	r3, r4
 800c552:	db01      	blt.n	800c558 <__sfputc_r+0x16>
 800c554:	290a      	cmp	r1, #10
 800c556:	d103      	bne.n	800c560 <__sfputc_r+0x1e>
 800c558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55c:	f000 b934 	b.w	800c7c8 <__swbuf_r>
 800c560:	6813      	ldr	r3, [r2, #0]
 800c562:	1c58      	adds	r0, r3, #1
 800c564:	6010      	str	r0, [r2, #0]
 800c566:	7019      	strb	r1, [r3, #0]
 800c568:	4608      	mov	r0, r1
 800c56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <__sfputs_r>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	4606      	mov	r6, r0
 800c574:	460f      	mov	r7, r1
 800c576:	4614      	mov	r4, r2
 800c578:	18d5      	adds	r5, r2, r3
 800c57a:	42ac      	cmp	r4, r5
 800c57c:	d101      	bne.n	800c582 <__sfputs_r+0x12>
 800c57e:	2000      	movs	r0, #0
 800c580:	e007      	b.n	800c592 <__sfputs_r+0x22>
 800c582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c586:	463a      	mov	r2, r7
 800c588:	4630      	mov	r0, r6
 800c58a:	f7ff ffda 	bl	800c542 <__sfputc_r>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d1f3      	bne.n	800c57a <__sfputs_r+0xa>
 800c592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c594 <_vfiprintf_r>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	460d      	mov	r5, r1
 800c59a:	b09d      	sub	sp, #116	; 0x74
 800c59c:	4614      	mov	r4, r2
 800c59e:	4698      	mov	r8, r3
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	b118      	cbz	r0, 800c5ac <_vfiprintf_r+0x18>
 800c5a4:	6a03      	ldr	r3, [r0, #32]
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x18>
 800c5a8:	f7fe fb44 	bl	800ac34 <__sinit>
 800c5ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ae:	07d9      	lsls	r1, r3, #31
 800c5b0:	d405      	bmi.n	800c5be <_vfiprintf_r+0x2a>
 800c5b2:	89ab      	ldrh	r3, [r5, #12]
 800c5b4:	059a      	lsls	r2, r3, #22
 800c5b6:	d402      	bmi.n	800c5be <_vfiprintf_r+0x2a>
 800c5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ba:	f7fe fc54 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800c5be:	89ab      	ldrh	r3, [r5, #12]
 800c5c0:	071b      	lsls	r3, r3, #28
 800c5c2:	d501      	bpl.n	800c5c8 <_vfiprintf_r+0x34>
 800c5c4:	692b      	ldr	r3, [r5, #16]
 800c5c6:	b99b      	cbnz	r3, 800c5f0 <_vfiprintf_r+0x5c>
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 f93a 	bl	800c844 <__swsetup_r>
 800c5d0:	b170      	cbz	r0, 800c5f0 <_vfiprintf_r+0x5c>
 800c5d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d4:	07dc      	lsls	r4, r3, #31
 800c5d6:	d504      	bpl.n	800c5e2 <_vfiprintf_r+0x4e>
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	b01d      	add	sp, #116	; 0x74
 800c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	0598      	lsls	r0, r3, #22
 800c5e6:	d4f7      	bmi.n	800c5d8 <_vfiprintf_r+0x44>
 800c5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ea:	f7fe fc3d 	bl	800ae68 <__retarget_lock_release_recursive>
 800c5ee:	e7f3      	b.n	800c5d8 <_vfiprintf_r+0x44>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fe:	2330      	movs	r3, #48	; 0x30
 800c600:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7b4 <_vfiprintf_r+0x220>
 800c604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c608:	f04f 0901 	mov.w	r9, #1
 800c60c:	4623      	mov	r3, r4
 800c60e:	469a      	mov	sl, r3
 800c610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c614:	b10a      	cbz	r2, 800c61a <_vfiprintf_r+0x86>
 800c616:	2a25      	cmp	r2, #37	; 0x25
 800c618:	d1f9      	bne.n	800c60e <_vfiprintf_r+0x7a>
 800c61a:	ebba 0b04 	subs.w	fp, sl, r4
 800c61e:	d00b      	beq.n	800c638 <_vfiprintf_r+0xa4>
 800c620:	465b      	mov	r3, fp
 800c622:	4622      	mov	r2, r4
 800c624:	4629      	mov	r1, r5
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff ffa2 	bl	800c570 <__sfputs_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	f000 80a9 	beq.w	800c784 <_vfiprintf_r+0x1f0>
 800c632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c634:	445a      	add	r2, fp
 800c636:	9209      	str	r2, [sp, #36]	; 0x24
 800c638:	f89a 3000 	ldrb.w	r3, [sl]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80a1 	beq.w	800c784 <_vfiprintf_r+0x1f0>
 800c642:	2300      	movs	r3, #0
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64c:	f10a 0a01 	add.w	sl, sl, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	9307      	str	r3, [sp, #28]
 800c654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c658:	931a      	str	r3, [sp, #104]	; 0x68
 800c65a:	4654      	mov	r4, sl
 800c65c:	2205      	movs	r2, #5
 800c65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c662:	4854      	ldr	r0, [pc, #336]	; (800c7b4 <_vfiprintf_r+0x220>)
 800c664:	f7f3 fdb4 	bl	80001d0 <memchr>
 800c668:	9a04      	ldr	r2, [sp, #16]
 800c66a:	b9d8      	cbnz	r0, 800c6a4 <_vfiprintf_r+0x110>
 800c66c:	06d1      	lsls	r1, r2, #27
 800c66e:	bf44      	itt	mi
 800c670:	2320      	movmi	r3, #32
 800c672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c676:	0713      	lsls	r3, r2, #28
 800c678:	bf44      	itt	mi
 800c67a:	232b      	movmi	r3, #43	; 0x2b
 800c67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c680:	f89a 3000 	ldrb.w	r3, [sl]
 800c684:	2b2a      	cmp	r3, #42	; 0x2a
 800c686:	d015      	beq.n	800c6b4 <_vfiprintf_r+0x120>
 800c688:	9a07      	ldr	r2, [sp, #28]
 800c68a:	4654      	mov	r4, sl
 800c68c:	2000      	movs	r0, #0
 800c68e:	f04f 0c0a 	mov.w	ip, #10
 800c692:	4621      	mov	r1, r4
 800c694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c698:	3b30      	subs	r3, #48	; 0x30
 800c69a:	2b09      	cmp	r3, #9
 800c69c:	d94d      	bls.n	800c73a <_vfiprintf_r+0x1a6>
 800c69e:	b1b0      	cbz	r0, 800c6ce <_vfiprintf_r+0x13a>
 800c6a0:	9207      	str	r2, [sp, #28]
 800c6a2:	e014      	b.n	800c6ce <_vfiprintf_r+0x13a>
 800c6a4:	eba0 0308 	sub.w	r3, r0, r8
 800c6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	46a2      	mov	sl, r4
 800c6b2:	e7d2      	b.n	800c65a <_vfiprintf_r+0xc6>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	1d19      	adds	r1, r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	9103      	str	r1, [sp, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfbb      	ittet	lt
 800c6c0:	425b      	neglt	r3, r3
 800c6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c6:	9307      	strge	r3, [sp, #28]
 800c6c8:	9307      	strlt	r3, [sp, #28]
 800c6ca:	bfb8      	it	lt
 800c6cc:	9204      	strlt	r2, [sp, #16]
 800c6ce:	7823      	ldrb	r3, [r4, #0]
 800c6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d2:	d10c      	bne.n	800c6ee <_vfiprintf_r+0x15a>
 800c6d4:	7863      	ldrb	r3, [r4, #1]
 800c6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d8:	d134      	bne.n	800c744 <_vfiprintf_r+0x1b0>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	9203      	str	r2, [sp, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ea:	3402      	adds	r4, #2
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7c4 <_vfiprintf_r+0x230>
 800c6f2:	7821      	ldrb	r1, [r4, #0]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7f3 fd6a 	bl	80001d0 <memchr>
 800c6fc:	b138      	cbz	r0, 800c70e <_vfiprintf_r+0x17a>
 800c6fe:	9b04      	ldr	r3, [sp, #16]
 800c700:	eba0 000a 	sub.w	r0, r0, sl
 800c704:	2240      	movs	r2, #64	; 0x40
 800c706:	4082      	lsls	r2, r0
 800c708:	4313      	orrs	r3, r2
 800c70a:	3401      	adds	r4, #1
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c712:	4829      	ldr	r0, [pc, #164]	; (800c7b8 <_vfiprintf_r+0x224>)
 800c714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c718:	2206      	movs	r2, #6
 800c71a:	f7f3 fd59 	bl	80001d0 <memchr>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d03f      	beq.n	800c7a2 <_vfiprintf_r+0x20e>
 800c722:	4b26      	ldr	r3, [pc, #152]	; (800c7bc <_vfiprintf_r+0x228>)
 800c724:	bb1b      	cbnz	r3, 800c76e <_vfiprintf_r+0x1da>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	3307      	adds	r3, #7
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	3308      	adds	r3, #8
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c734:	443b      	add	r3, r7
 800c736:	9309      	str	r3, [sp, #36]	; 0x24
 800c738:	e768      	b.n	800c60c <_vfiprintf_r+0x78>
 800c73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73e:	460c      	mov	r4, r1
 800c740:	2001      	movs	r0, #1
 800c742:	e7a6      	b.n	800c692 <_vfiprintf_r+0xfe>
 800c744:	2300      	movs	r3, #0
 800c746:	3401      	adds	r4, #1
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4619      	mov	r1, r3
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	4620      	mov	r0, r4
 800c752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c756:	3a30      	subs	r2, #48	; 0x30
 800c758:	2a09      	cmp	r2, #9
 800c75a:	d903      	bls.n	800c764 <_vfiprintf_r+0x1d0>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c6      	beq.n	800c6ee <_vfiprintf_r+0x15a>
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	e7c4      	b.n	800c6ee <_vfiprintf_r+0x15a>
 800c764:	fb0c 2101 	mla	r1, ip, r1, r2
 800c768:	4604      	mov	r4, r0
 800c76a:	2301      	movs	r3, #1
 800c76c:	e7f0      	b.n	800c750 <_vfiprintf_r+0x1bc>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b12      	ldr	r3, [pc, #72]	; (800c7c0 <_vfiprintf_r+0x22c>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4630      	mov	r0, r6
 800c77a:	f7fd fe09 	bl	800a390 <_printf_float>
 800c77e:	4607      	mov	r7, r0
 800c780:	1c78      	adds	r0, r7, #1
 800c782:	d1d6      	bne.n	800c732 <_vfiprintf_r+0x19e>
 800c784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c786:	07d9      	lsls	r1, r3, #31
 800c788:	d405      	bmi.n	800c796 <_vfiprintf_r+0x202>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	059a      	lsls	r2, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_vfiprintf_r+0x202>
 800c790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c792:	f7fe fb69 	bl	800ae68 <__retarget_lock_release_recursive>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	065b      	lsls	r3, r3, #25
 800c79a:	f53f af1d 	bmi.w	800c5d8 <_vfiprintf_r+0x44>
 800c79e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7a0:	e71c      	b.n	800c5dc <_vfiprintf_r+0x48>
 800c7a2:	ab03      	add	r3, sp, #12
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <_vfiprintf_r+0x22c>)
 800c7aa:	a904      	add	r1, sp, #16
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7fe f893 	bl	800a8d8 <_printf_i>
 800c7b2:	e7e4      	b.n	800c77e <_vfiprintf_r+0x1ea>
 800c7b4:	0801892b 	.word	0x0801892b
 800c7b8:	08018935 	.word	0x08018935
 800c7bc:	0800a391 	.word	0x0800a391
 800c7c0:	0800c571 	.word	0x0800c571
 800c7c4:	08018931 	.word	0x08018931

0800c7c8 <__swbuf_r>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b118      	cbz	r0, 800c7da <__swbuf_r+0x12>
 800c7d2:	6a03      	ldr	r3, [r0, #32]
 800c7d4:	b90b      	cbnz	r3, 800c7da <__swbuf_r+0x12>
 800c7d6:	f7fe fa2d 	bl	800ac34 <__sinit>
 800c7da:	69a3      	ldr	r3, [r4, #24]
 800c7dc:	60a3      	str	r3, [r4, #8]
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	071a      	lsls	r2, r3, #28
 800c7e2:	d525      	bpl.n	800c830 <__swbuf_r+0x68>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	b31b      	cbz	r3, 800c830 <__swbuf_r+0x68>
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	6922      	ldr	r2, [r4, #16]
 800c7ec:	1a98      	subs	r0, r3, r2
 800c7ee:	6963      	ldr	r3, [r4, #20]
 800c7f0:	b2f6      	uxtb	r6, r6
 800c7f2:	4283      	cmp	r3, r0
 800c7f4:	4637      	mov	r7, r6
 800c7f6:	dc04      	bgt.n	800c802 <__swbuf_r+0x3a>
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7ff fe0c 	bl	800c418 <_fflush_r>
 800c800:	b9e0      	cbnz	r0, 800c83c <__swbuf_r+0x74>
 800c802:	68a3      	ldr	r3, [r4, #8]
 800c804:	3b01      	subs	r3, #1
 800c806:	60a3      	str	r3, [r4, #8]
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	6022      	str	r2, [r4, #0]
 800c80e:	701e      	strb	r6, [r3, #0]
 800c810:	6962      	ldr	r2, [r4, #20]
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	429a      	cmp	r2, r3
 800c816:	d004      	beq.n	800c822 <__swbuf_r+0x5a>
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	07db      	lsls	r3, r3, #31
 800c81c:	d506      	bpl.n	800c82c <__swbuf_r+0x64>
 800c81e:	2e0a      	cmp	r6, #10
 800c820:	d104      	bne.n	800c82c <__swbuf_r+0x64>
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	f7ff fdf7 	bl	800c418 <_fflush_r>
 800c82a:	b938      	cbnz	r0, 800c83c <__swbuf_r+0x74>
 800c82c:	4638      	mov	r0, r7
 800c82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f806 	bl	800c844 <__swsetup_r>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d0d5      	beq.n	800c7e8 <__swbuf_r+0x20>
 800c83c:	f04f 37ff 	mov.w	r7, #4294967295
 800c840:	e7f4      	b.n	800c82c <__swbuf_r+0x64>
	...

0800c844 <__swsetup_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	4b2a      	ldr	r3, [pc, #168]	; (800c8f0 <__swsetup_r+0xac>)
 800c848:	4605      	mov	r5, r0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	460c      	mov	r4, r1
 800c84e:	b118      	cbz	r0, 800c858 <__swsetup_r+0x14>
 800c850:	6a03      	ldr	r3, [r0, #32]
 800c852:	b90b      	cbnz	r3, 800c858 <__swsetup_r+0x14>
 800c854:	f7fe f9ee 	bl	800ac34 <__sinit>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c85e:	0718      	lsls	r0, r3, #28
 800c860:	d422      	bmi.n	800c8a8 <__swsetup_r+0x64>
 800c862:	06d9      	lsls	r1, r3, #27
 800c864:	d407      	bmi.n	800c876 <__swsetup_r+0x32>
 800c866:	2309      	movs	r3, #9
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c86e:	81a3      	strh	r3, [r4, #12]
 800c870:	f04f 30ff 	mov.w	r0, #4294967295
 800c874:	e034      	b.n	800c8e0 <__swsetup_r+0x9c>
 800c876:	0758      	lsls	r0, r3, #29
 800c878:	d512      	bpl.n	800c8a0 <__swsetup_r+0x5c>
 800c87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c87c:	b141      	cbz	r1, 800c890 <__swsetup_r+0x4c>
 800c87e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c882:	4299      	cmp	r1, r3
 800c884:	d002      	beq.n	800c88c <__swsetup_r+0x48>
 800c886:	4628      	mov	r0, r5
 800c888:	f7ff f978 	bl	800bb7c <_free_r>
 800c88c:	2300      	movs	r3, #0
 800c88e:	6363      	str	r3, [r4, #52]	; 0x34
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	2300      	movs	r3, #0
 800c89a:	6063      	str	r3, [r4, #4]
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	89a3      	ldrh	r3, [r4, #12]
 800c8a2:	f043 0308 	orr.w	r3, r3, #8
 800c8a6:	81a3      	strh	r3, [r4, #12]
 800c8a8:	6923      	ldr	r3, [r4, #16]
 800c8aa:	b94b      	cbnz	r3, 800c8c0 <__swsetup_r+0x7c>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8b6:	d003      	beq.n	800c8c0 <__swsetup_r+0x7c>
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 f884 	bl	800c9c8 <__smakebuf_r>
 800c8c0:	89a0      	ldrh	r0, [r4, #12]
 800c8c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8c6:	f010 0301 	ands.w	r3, r0, #1
 800c8ca:	d00a      	beq.n	800c8e2 <__swsetup_r+0x9e>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60a3      	str	r3, [r4, #8]
 800c8d0:	6963      	ldr	r3, [r4, #20]
 800c8d2:	425b      	negs	r3, r3
 800c8d4:	61a3      	str	r3, [r4, #24]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	b943      	cbnz	r3, 800c8ec <__swsetup_r+0xa8>
 800c8da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8de:	d1c4      	bne.n	800c86a <__swsetup_r+0x26>
 800c8e0:	bd38      	pop	{r3, r4, r5, pc}
 800c8e2:	0781      	lsls	r1, r0, #30
 800c8e4:	bf58      	it	pl
 800c8e6:	6963      	ldrpl	r3, [r4, #20]
 800c8e8:	60a3      	str	r3, [r4, #8]
 800c8ea:	e7f4      	b.n	800c8d6 <__swsetup_r+0x92>
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	e7f7      	b.n	800c8e0 <__swsetup_r+0x9c>
 800c8f0:	200005dc 	.word	0x200005dc

0800c8f4 <_raise_r>:
 800c8f4:	291f      	cmp	r1, #31
 800c8f6:	b538      	push	{r3, r4, r5, lr}
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	d904      	bls.n	800c908 <_raise_r+0x14>
 800c8fe:	2316      	movs	r3, #22
 800c900:	6003      	str	r3, [r0, #0]
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c90a:	b112      	cbz	r2, 800c912 <_raise_r+0x1e>
 800c90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c910:	b94b      	cbnz	r3, 800c926 <_raise_r+0x32>
 800c912:	4620      	mov	r0, r4
 800c914:	f000 f830 	bl	800c978 <_getpid_r>
 800c918:	462a      	mov	r2, r5
 800c91a:	4601      	mov	r1, r0
 800c91c:	4620      	mov	r0, r4
 800c91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c922:	f000 b817 	b.w	800c954 <_kill_r>
 800c926:	2b01      	cmp	r3, #1
 800c928:	d00a      	beq.n	800c940 <_raise_r+0x4c>
 800c92a:	1c59      	adds	r1, r3, #1
 800c92c:	d103      	bne.n	800c936 <_raise_r+0x42>
 800c92e:	2316      	movs	r3, #22
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	2001      	movs	r0, #1
 800c934:	e7e7      	b.n	800c906 <_raise_r+0x12>
 800c936:	2400      	movs	r4, #0
 800c938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c93c:	4628      	mov	r0, r5
 800c93e:	4798      	blx	r3
 800c940:	2000      	movs	r0, #0
 800c942:	e7e0      	b.n	800c906 <_raise_r+0x12>

0800c944 <raise>:
 800c944:	4b02      	ldr	r3, [pc, #8]	; (800c950 <raise+0xc>)
 800c946:	4601      	mov	r1, r0
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	f7ff bfd3 	b.w	800c8f4 <_raise_r>
 800c94e:	bf00      	nop
 800c950:	200005dc 	.word	0x200005dc

0800c954 <_kill_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d07      	ldr	r5, [pc, #28]	; (800c974 <_kill_r+0x20>)
 800c958:	2300      	movs	r3, #0
 800c95a:	4604      	mov	r4, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	f7f4 fd33 	bl	80013cc <_kill>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d102      	bne.n	800c970 <_kill_r+0x1c>
 800c96a:	682b      	ldr	r3, [r5, #0]
 800c96c:	b103      	cbz	r3, 800c970 <_kill_r+0x1c>
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	bd38      	pop	{r3, r4, r5, pc}
 800c972:	bf00      	nop
 800c974:	200013c0 	.word	0x200013c0

0800c978 <_getpid_r>:
 800c978:	f7f4 bd26 	b.w	80013c8 <_getpid>

0800c97c <__swhatbuf_r>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	460c      	mov	r4, r1
 800c980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c984:	2900      	cmp	r1, #0
 800c986:	b096      	sub	sp, #88	; 0x58
 800c988:	4615      	mov	r5, r2
 800c98a:	461e      	mov	r6, r3
 800c98c:	da0d      	bge.n	800c9aa <__swhatbuf_r+0x2e>
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c994:	f04f 0100 	mov.w	r1, #0
 800c998:	bf0c      	ite	eq
 800c99a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c99e:	2340      	movne	r3, #64	; 0x40
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	6031      	str	r1, [r6, #0]
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	b016      	add	sp, #88	; 0x58
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
 800c9aa:	466a      	mov	r2, sp
 800c9ac:	f000 f848 	bl	800ca40 <_fstat_r>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	dbec      	blt.n	800c98e <__swhatbuf_r+0x12>
 800c9b4:	9901      	ldr	r1, [sp, #4]
 800c9b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c9ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9be:	4259      	negs	r1, r3
 800c9c0:	4159      	adcs	r1, r3
 800c9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9c6:	e7eb      	b.n	800c9a0 <__swhatbuf_r+0x24>

0800c9c8 <__smakebuf_r>:
 800c9c8:	898b      	ldrh	r3, [r1, #12]
 800c9ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9cc:	079d      	lsls	r5, r3, #30
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	d507      	bpl.n	800c9e4 <__smakebuf_r+0x1c>
 800c9d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	6123      	str	r3, [r4, #16]
 800c9dc:	2301      	movs	r3, #1
 800c9de:	6163      	str	r3, [r4, #20]
 800c9e0:	b002      	add	sp, #8
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}
 800c9e4:	ab01      	add	r3, sp, #4
 800c9e6:	466a      	mov	r2, sp
 800c9e8:	f7ff ffc8 	bl	800c97c <__swhatbuf_r>
 800c9ec:	9900      	ldr	r1, [sp, #0]
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f7fd fba1 	bl	800a138 <_malloc_r>
 800c9f6:	b948      	cbnz	r0, 800ca0c <__smakebuf_r+0x44>
 800c9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fc:	059a      	lsls	r2, r3, #22
 800c9fe:	d4ef      	bmi.n	800c9e0 <__smakebuf_r+0x18>
 800ca00:	f023 0303 	bic.w	r3, r3, #3
 800ca04:	f043 0302 	orr.w	r3, r3, #2
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	e7e3      	b.n	800c9d4 <__smakebuf_r+0xc>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	6020      	str	r0, [r4, #0]
 800ca10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca14:	81a3      	strh	r3, [r4, #12]
 800ca16:	9b00      	ldr	r3, [sp, #0]
 800ca18:	6163      	str	r3, [r4, #20]
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	6120      	str	r0, [r4, #16]
 800ca1e:	b15b      	cbz	r3, 800ca38 <__smakebuf_r+0x70>
 800ca20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca24:	4630      	mov	r0, r6
 800ca26:	f000 f81d 	bl	800ca64 <_isatty_r>
 800ca2a:	b128      	cbz	r0, 800ca38 <__smakebuf_r+0x70>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f023 0303 	bic.w	r3, r3, #3
 800ca32:	f043 0301 	orr.w	r3, r3, #1
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	431d      	orrs	r5, r3
 800ca3c:	81a5      	strh	r5, [r4, #12]
 800ca3e:	e7cf      	b.n	800c9e0 <__smakebuf_r+0x18>

0800ca40 <_fstat_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d07      	ldr	r5, [pc, #28]	; (800ca60 <_fstat_r+0x20>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	602b      	str	r3, [r5, #0]
 800ca4e:	f7f4 fcdc 	bl	800140a <_fstat>
 800ca52:	1c43      	adds	r3, r0, #1
 800ca54:	d102      	bne.n	800ca5c <_fstat_r+0x1c>
 800ca56:	682b      	ldr	r3, [r5, #0]
 800ca58:	b103      	cbz	r3, 800ca5c <_fstat_r+0x1c>
 800ca5a:	6023      	str	r3, [r4, #0]
 800ca5c:	bd38      	pop	{r3, r4, r5, pc}
 800ca5e:	bf00      	nop
 800ca60:	200013c0 	.word	0x200013c0

0800ca64 <_isatty_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d06      	ldr	r5, [pc, #24]	; (800ca80 <_isatty_r+0x1c>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	602b      	str	r3, [r5, #0]
 800ca70:	f7f4 fcd0 	bl	8001414 <_isatty>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_isatty_r+0x1a>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_isatty_r+0x1a>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	200013c0 	.word	0x200013c0

0800ca84 <expf>:
 800ca84:	b508      	push	{r3, lr}
 800ca86:	ed2d 8b02 	vpush	{d8}
 800ca8a:	eef0 8a40 	vmov.f32	s17, s0
 800ca8e:	f000 f85f 	bl	800cb50 <__ieee754_expf>
 800ca92:	eeb0 8a40 	vmov.f32	s16, s0
 800ca96:	eeb0 0a68 	vmov.f32	s0, s17
 800ca9a:	f000 f829 	bl	800caf0 <finitef>
 800ca9e:	b160      	cbz	r0, 800caba <expf+0x36>
 800caa0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cae0 <expf+0x5c>
 800caa4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800caa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caac:	dd0a      	ble.n	800cac4 <expf+0x40>
 800caae:	f7fe f9af 	bl	800ae10 <__errno>
 800cab2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800cae4 <expf+0x60>
 800cab6:	2322      	movs	r3, #34	; 0x22
 800cab8:	6003      	str	r3, [r0, #0]
 800caba:	eeb0 0a48 	vmov.f32	s0, s16
 800cabe:	ecbd 8b02 	vpop	{d8}
 800cac2:	bd08      	pop	{r3, pc}
 800cac4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cae8 <expf+0x64>
 800cac8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	d5f3      	bpl.n	800caba <expf+0x36>
 800cad2:	f7fe f99d 	bl	800ae10 <__errno>
 800cad6:	2322      	movs	r3, #34	; 0x22
 800cad8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800caec <expf+0x68>
 800cadc:	6003      	str	r3, [r0, #0]
 800cade:	e7ec      	b.n	800caba <expf+0x36>
 800cae0:	42b17217 	.word	0x42b17217
 800cae4:	7f800000 	.word	0x7f800000
 800cae8:	c2cff1b5 	.word	0xc2cff1b5
 800caec:	00000000 	.word	0x00000000

0800caf0 <finitef>:
 800caf0:	b082      	sub	sp, #8
 800caf2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800caf6:	9801      	ldr	r0, [sp, #4]
 800caf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cafc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cb00:	bfac      	ite	ge
 800cb02:	2000      	movge	r0, #0
 800cb04:	2001      	movlt	r0, #1
 800cb06:	b002      	add	sp, #8
 800cb08:	4770      	bx	lr

0800cb0a <with_errnof>:
 800cb0a:	b513      	push	{r0, r1, r4, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cb12:	f7fe f97d 	bl	800ae10 <__errno>
 800cb16:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cb1a:	6004      	str	r4, [r0, #0]
 800cb1c:	b002      	add	sp, #8
 800cb1e:	bd10      	pop	{r4, pc}

0800cb20 <xflowf>:
 800cb20:	b130      	cbz	r0, 800cb30 <xflowf+0x10>
 800cb22:	eef1 7a40 	vneg.f32	s15, s0
 800cb26:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb2a:	2022      	movs	r0, #34	; 0x22
 800cb2c:	f7ff bfed 	b.w	800cb0a <with_errnof>
 800cb30:	eef0 7a40 	vmov.f32	s15, s0
 800cb34:	e7f7      	b.n	800cb26 <xflowf+0x6>
	...

0800cb38 <__math_uflowf>:
 800cb38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb40 <__math_uflowf+0x8>
 800cb3c:	f7ff bff0 	b.w	800cb20 <xflowf>
 800cb40:	10000000 	.word	0x10000000

0800cb44 <__math_oflowf>:
 800cb44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb4c <__math_oflowf+0x8>
 800cb48:	f7ff bfea 	b.w	800cb20 <xflowf>
 800cb4c:	70000000 	.word	0x70000000

0800cb50 <__ieee754_expf>:
 800cb50:	ee10 2a10 	vmov	r2, s0
 800cb54:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800cb58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb5c:	d902      	bls.n	800cb64 <__ieee754_expf+0x14>
 800cb5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb62:	4770      	bx	lr
 800cb64:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800cb68:	d106      	bne.n	800cb78 <__ieee754_expf+0x28>
 800cb6a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800cca4 <__ieee754_expf+0x154>
 800cb6e:	2900      	cmp	r1, #0
 800cb70:	bf18      	it	ne
 800cb72:	eeb0 0a67 	vmovne.f32	s0, s15
 800cb76:	4770      	bx	lr
 800cb78:	484b      	ldr	r0, [pc, #300]	; (800cca8 <__ieee754_expf+0x158>)
 800cb7a:	4282      	cmp	r2, r0
 800cb7c:	dd02      	ble.n	800cb84 <__ieee754_expf+0x34>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	f7ff bfe0 	b.w	800cb44 <__math_oflowf>
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	da05      	bge.n	800cb94 <__ieee754_expf+0x44>
 800cb88:	4a48      	ldr	r2, [pc, #288]	; (800ccac <__ieee754_expf+0x15c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d902      	bls.n	800cb94 <__ieee754_expf+0x44>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f7ff bfd2 	b.w	800cb38 <__math_uflowf>
 800cb94:	4a46      	ldr	r2, [pc, #280]	; (800ccb0 <__ieee754_expf+0x160>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cb9c:	d952      	bls.n	800cc44 <__ieee754_expf+0xf4>
 800cb9e:	4a45      	ldr	r2, [pc, #276]	; (800ccb4 <__ieee754_expf+0x164>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800cba6:	d834      	bhi.n	800cc12 <__ieee754_expf+0xc2>
 800cba8:	4b43      	ldr	r3, [pc, #268]	; (800ccb8 <__ieee754_expf+0x168>)
 800cbaa:	4413      	add	r3, r2
 800cbac:	ed93 7a00 	vldr	s14, [r3]
 800cbb0:	4b42      	ldr	r3, [pc, #264]	; (800ccbc <__ieee754_expf+0x16c>)
 800cbb2:	4413      	add	r3, r2
 800cbb4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800cbb8:	f1c1 0201 	rsb	r2, r1, #1
 800cbbc:	edd3 7a00 	vldr	s15, [r3]
 800cbc0:	1a52      	subs	r2, r2, r1
 800cbc2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cbc6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800cbca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ccc0 <__ieee754_expf+0x170>
 800cbce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccc4 <__ieee754_expf+0x174>
 800cbd2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800cbd6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ccc8 <__ieee754_expf+0x178>
 800cbda:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cbde:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cccc <__ieee754_expf+0x17c>
 800cbe2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800cbe6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800ccd0 <__ieee754_expf+0x180>
 800cbea:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cbee:	eef0 6a40 	vmov.f32	s13, s0
 800cbf2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800cbf6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800cbfa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800cbfe:	bb92      	cbnz	r2, 800cc66 <__ieee754_expf+0x116>
 800cc00:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800cc04:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800cc08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc0c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800cc10:	4770      	bx	lr
 800cc12:	4b30      	ldr	r3, [pc, #192]	; (800ccd4 <__ieee754_expf+0x184>)
 800cc14:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ccd8 <__ieee754_expf+0x188>
 800cc18:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ccdc <__ieee754_expf+0x18c>
 800cc1c:	4413      	add	r3, r2
 800cc1e:	edd3 7a00 	vldr	s15, [r3]
 800cc22:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cc26:	eeb0 7a40 	vmov.f32	s14, s0
 800cc2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc2e:	ee17 2a90 	vmov	r2, s15
 800cc32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc36:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cc3a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cce0 <__ieee754_expf+0x190>
 800cc3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc42:	e7be      	b.n	800cbc2 <__ieee754_expf+0x72>
 800cc44:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800cc48:	d20b      	bcs.n	800cc62 <__ieee754_expf+0x112>
 800cc4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cce4 <__ieee754_expf+0x194>
 800cc4e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800cc52:	eef4 6ae5 	vcmpe.f32	s13, s11
 800cc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5a:	dd02      	ble.n	800cc62 <__ieee754_expf+0x112>
 800cc5c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800cc60:	4770      	bx	lr
 800cc62:	2200      	movs	r2, #0
 800cc64:	e7af      	b.n	800cbc6 <__ieee754_expf+0x76>
 800cc66:	ee36 6a66 	vsub.f32	s12, s12, s13
 800cc6a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800cc6e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800cc72:	bfb8      	it	lt
 800cc74:	3264      	addlt	r2, #100	; 0x64
 800cc76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc7e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cc82:	ee17 3a90 	vmov	r3, s15
 800cc86:	bfab      	itete	ge
 800cc88:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cc8c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cc90:	ee00 3a10 	vmovge	s0, r3
 800cc94:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800cce8 <__ieee754_expf+0x198>
 800cc98:	bfbc      	itt	lt
 800cc9a:	ee00 3a10 	vmovlt	s0, r3
 800cc9e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cca2:	4770      	bx	lr
 800cca4:	00000000 	.word	0x00000000
 800cca8:	42b17217 	.word	0x42b17217
 800ccac:	42cff1b5 	.word	0x42cff1b5
 800ccb0:	3eb17218 	.word	0x3eb17218
 800ccb4:	3f851591 	.word	0x3f851591
 800ccb8:	08018944 	.word	0x08018944
 800ccbc:	0801894c 	.word	0x0801894c
 800ccc0:	3331bb4c 	.word	0x3331bb4c
 800ccc4:	b5ddea0e 	.word	0xb5ddea0e
 800ccc8:	388ab355 	.word	0x388ab355
 800cccc:	bb360b61 	.word	0xbb360b61
 800ccd0:	3e2aaaab 	.word	0x3e2aaaab
 800ccd4:	0801893c 	.word	0x0801893c
 800ccd8:	3fb8aa3b 	.word	0x3fb8aa3b
 800ccdc:	3f317180 	.word	0x3f317180
 800cce0:	3717f7d1 	.word	0x3717f7d1
 800cce4:	7149f2ca 	.word	0x7149f2ca
 800cce8:	0d800000 	.word	0x0d800000

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
