
Nucleo-F446RE_contactorLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005924  08005924  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800592c  0800592c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  08005990  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005990  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb6b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002136  00000000  00000000  0002cc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f5a  00000000  00000000  0002ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da5f  00000000  00000000  00052eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d820e  00000000  00000000  00060929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e78  00000000  00000000  00138b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0013b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800583c 	.word	0x0800583c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800583c 	.word	0x0800583c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <getCellFaults>:
} CellFault;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint16_t getCellFaults(Cell* cell){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    uint16_t result = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	81fb      	strh	r3, [r7, #14]

    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	031b      	lsls	r3, r3, #12
 80005be:	b21a      	sxth	r2, r3
 80005c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	81fb      	strh	r3, [r7, #14]
    result |= (cell->cell & 0x0F) << 8;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21b      	sxth	r3, r3
 80005e0:	81fb      	strh	r3, [r7, #14]

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7f1b      	ldrb	r3, [r3, #28]
 80005e6:	01db      	lsls	r3, r3, #7
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->comm & 0x01) << 6;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7f5b      	ldrb	r3, [r3, #29]
 80005fc:	019b      	lsls	r3, r3, #6
 80005fe:	b21b      	sxth	r3, r3
 8000600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000604:	b21a      	sxth	r2, r3
 8000606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_voltage & 0x01) << 5;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7f9b      	ldrb	r3, [r3, #30]
 8000614:	015b      	lsls	r3, r3, #5
 8000616:	b21b      	sxth	r3, r3
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	b21a      	sxth	r2, r3
 800061e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_voltage & 0x01) << 4;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7fdb      	ldrb	r3, [r3, #31]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	b21b      	sxth	r3, r3
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	b21a      	sxth	r2, r3
 8000636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800063a:	4313      	orrs	r3, r2
 800063c:	b21b      	sxth	r3, r3
 800063e:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_temp & 0x01) << 3;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	b21b      	sxth	r3, r3
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	b21a      	sxth	r2, r3
 8000650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_temp & 0x01) << 2;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	b21b      	sxth	r3, r3
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	b21a      	sxth	r2, r3
 800066a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_current & 0x01) << 1;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b21b      	sxth	r3, r3
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_current & 0x01);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000694:	b21b      	sxth	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b21a      	sxth	r2, r3
 800069c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	81fb      	strh	r3, [r7, #14]

    return result;
 80006a6:	89fb      	ldrh	r3, [r7, #14]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <setCellFaults>:

void setCellFaults(Cell* cell, CellFault value) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    // Extract the boolean values
    if (value & POWER_RAIL_FAULT) cell->power_rail = true;
 80006c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da02      	bge.n	80006ce <setCellFaults+0x1a>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	771a      	strb	r2, [r3, #28]
    if (value & COMM_FAULT) cell->comm = true;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <setCellFaults+0x2a>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	775a      	strb	r2, [r3, #29]
    if (value & OVER_VOLTAGE_FAULT) cell->over_voltage = true;
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <setCellFaults+0x3a>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	779a      	strb	r2, [r3, #30]
    if (value & UNDER_VOLTAGE_FAULT) cell->under_voltage = true;
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <setCellFaults+0x4a>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	77da      	strb	r2, [r3, #31]
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <setCellFaults+0x5c>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
    if (value & UNDER_TEMP_FAULT) cell->under_temp = true;
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <setCellFaults+0x6e>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <setCellFaults+0x80>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    if (value & UNDER_CURRENT_FAULT) cell->under_current = true;
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <setCellFaults+0x92>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <clearCellFault>:

void clearCellFault(Cell* cell, CellFault fault) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
    // Clear the corresponding fault
    switch (fault) {
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b80      	cmp	r3, #128	; 0x80
 8000764:	d04f      	beq.n	8000806 <clearCellFault+0xb2>
 8000766:	2b80      	cmp	r3, #128	; 0x80
 8000768:	dc71      	bgt.n	800084e <clearCellFault+0xfa>
 800076a:	2b20      	cmp	r3, #32
 800076c:	dc48      	bgt.n	8000800 <clearCellFault+0xac>
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd6d      	ble.n	800084e <clearCellFault+0xfa>
 8000772:	3b01      	subs	r3, #1
 8000774:	2b1f      	cmp	r3, #31
 8000776:	d86a      	bhi.n	800084e <clearCellFault+0xfa>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <clearCellFault+0x2c>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000845 	.word	0x08000845
 8000784:	0800083b 	.word	0x0800083b
 8000788:	0800084f 	.word	0x0800084f
 800078c:	08000831 	.word	0x08000831
 8000790:	0800084f 	.word	0x0800084f
 8000794:	0800084f 	.word	0x0800084f
 8000798:	0800084f 	.word	0x0800084f
 800079c:	08000827 	.word	0x08000827
 80007a0:	0800084f 	.word	0x0800084f
 80007a4:	0800084f 	.word	0x0800084f
 80007a8:	0800084f 	.word	0x0800084f
 80007ac:	0800084f 	.word	0x0800084f
 80007b0:	0800084f 	.word	0x0800084f
 80007b4:	0800084f 	.word	0x0800084f
 80007b8:	0800084f 	.word	0x0800084f
 80007bc:	0800081f 	.word	0x0800081f
 80007c0:	0800084f 	.word	0x0800084f
 80007c4:	0800084f 	.word	0x0800084f
 80007c8:	0800084f 	.word	0x0800084f
 80007cc:	0800084f 	.word	0x0800084f
 80007d0:	0800084f 	.word	0x0800084f
 80007d4:	0800084f 	.word	0x0800084f
 80007d8:	0800084f 	.word	0x0800084f
 80007dc:	0800084f 	.word	0x0800084f
 80007e0:	0800084f 	.word	0x0800084f
 80007e4:	0800084f 	.word	0x0800084f
 80007e8:	0800084f 	.word	0x0800084f
 80007ec:	0800084f 	.word	0x0800084f
 80007f0:	0800084f 	.word	0x0800084f
 80007f4:	0800084f 	.word	0x0800084f
 80007f8:	0800084f 	.word	0x0800084f
 80007fc:	08000817 	.word	0x08000817
 8000800:	2b40      	cmp	r3, #64	; 0x40
 8000802:	d004      	beq.n	800080e <clearCellFault+0xba>
            break;
        case UNDER_CURRENT_FAULT:
            cell->under_current = false;
            break;
    }
}
 8000804:	e023      	b.n	800084e <clearCellFault+0xfa>
            cell->power_rail = false;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	771a      	strb	r2, [r3, #28]
            break;
 800080c:	e01f      	b.n	800084e <clearCellFault+0xfa>
            cell->comm = false;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
            break;
 8000814:	e01b      	b.n	800084e <clearCellFault+0xfa>
            cell->over_voltage = false;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	779a      	strb	r2, [r3, #30]
            break;
 800081c:	e017      	b.n	800084e <clearCellFault+0xfa>
            cell->under_voltage = false;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	77da      	strb	r2, [r3, #31]
            break;
 8000824:	e013      	b.n	800084e <clearCellFault+0xfa>
            cell->over_temp = false;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 800082e:	e00e      	b.n	800084e <clearCellFault+0xfa>
            cell->under_temp = false;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8000838:	e009      	b.n	800084e <clearCellFault+0xfa>
            cell->over_current = false;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            break;
 8000842:	e004      	b.n	800084e <clearCellFault+0xfa>
            cell->under_current = false;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            break;
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <startupSequence>:
float thermistor_resistance; // Calculated unknown resistance from checkVIT
float cell_vref; 			 // measurement voltage for vref
float soc; 					 // State of Charge
float sop; 					 // State of Power

int startupSequence(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
	//
	// Negative Contactor Enable
	//

	// Send high Signal to NEG_LSD_OUTPUT
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4884      	ldr	r0, [pc, #528]	; (8000a7c <startupSequence+0x220>)
 800086a:	f003 f8e5 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read NEG_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	4882      	ldr	r0, [pc, #520]	; (8000a7c <startupSequence+0x220>)
 8000874:	f003 f8c8 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <startupSequence+0x28>
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e0f6      	b.n	8000a72 <startupSequence+0x216>


	// Send high Signal to NEG_HSD_OUTPUT
	HAL_GPIO_WritePin(NEG_HSD_OUTPUT_GPIO, NEG_HSD_OUTPUT_PIN, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088a:	487d      	ldr	r0, [pc, #500]	; (8000a80 <startupSequence+0x224>)
 800088c:	f003 f8d4 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read NEG_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4879      	ldr	r0, [pc, #484]	; (8000a7c <startupSequence+0x220>)
 8000896:	f003 f8b7 	bl	8003a08 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <startupSequence+0x4a>
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	e0e5      	b.n	8000a72 <startupSequence+0x216>

	// Read NEG_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(NEG_CON_INPUT_GPIO, NEG_CON_INPUT_PIN)){ return -1; }
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4876      	ldr	r0, [pc, #472]	; (8000a84 <startupSequence+0x228>)
 80008ac:	f003 f8ac 	bl	8003a08 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <startupSequence+0x60>
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e0da      	b.n	8000a72 <startupSequence+0x216>
	//
	// Pre Charge Contactor Enable
	//

	// Send high Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	486e      	ldr	r0, [pc, #440]	; (8000a7c <startupSequence+0x220>)
 80008c4:	f003 f8b8 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 80008c8:	2104      	movs	r1, #4
 80008ca:	486f      	ldr	r0, [pc, #444]	; (8000a88 <startupSequence+0x22c>)
 80008cc:	f003 f89c 	bl	8003a08 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <startupSequence+0x80>
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e0ca      	b.n	8000a72 <startupSequence+0x216>

	// Send high Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	4867      	ldr	r0, [pc, #412]	; (8000a80 <startupSequence+0x224>)
 80008e2:	f003 f8a9 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80008e6:	2110      	movs	r1, #16
 80008e8:	4865      	ldr	r0, [pc, #404]	; (8000a80 <startupSequence+0x224>)
 80008ea:	f003 f88d 	bl	8003a08 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <startupSequence+0x9e>
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	e0bb      	b.n	8000a72 <startupSequence+0x216>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	485f      	ldr	r0, [pc, #380]	; (8000a7c <startupSequence+0x220>)
 8000900:	f003 f882 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d054      	beq.n	80009b4 <startupSequence+0x158>
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e0b0      	b.n	8000a72 <startupSequence+0x216>

	// Read voltage at ANALOG_INPUT
		// If 90% of pack voltage after time t proceed, else EPO/return -1
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
		    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8000910:	2203      	movs	r2, #3
 8000912:	495e      	ldr	r1, [pc, #376]	; (8000a8c <startupSequence+0x230>)
 8000914:	485e      	ldr	r0, [pc, #376]	; (8000a90 <startupSequence+0x234>)
 8000916:	f001 f933 	bl	8001b80 <HAL_ADC_Start_DMA>
		    HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 800091a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800091e:	485c      	ldr	r0, [pc, #368]	; (8000a90 <startupSequence+0x234>)
 8000920:	f001 f8a3 	bl	8001a6a <HAL_ADC_PollForConversion>
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 8000924:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <startupSequence+0x230>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000930:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000a94 <startupSequence+0x238>
 8000934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <startupSequence+0x23c>)
 800093a:	edc3 7a00 	vstr	s15, [r3]

		    // Convert the integer part to a hexadecimal string
		    uint16_t intPart = (uint16_t)pre_charge_voltage;
 800093e:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <startupSequence+0x23c>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000948:	ee17 3a90 	vmov	r3, s15
 800094c:	82fb      	strh	r3, [r7, #22]
		    char IntPartStr[3];
		    sprintf(IntPartStr, "%02X", intPart);
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4951      	ldr	r1, [pc, #324]	; (8000a9c <startupSequence+0x240>)
 8000956:	4618      	mov	r0, r3
 8000958:	f004 facc 	bl	8004ef4 <siprintf>

		    // Convert the fractional part to a hexadecimal string
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 800095c:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <startupSequence+0x23c>)
 800095e:	ed93 7a00 	vldr	s14, [r3]
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000970:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000aa0 <startupSequence+0x244>
 8000974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	82bb      	strh	r3, [r7, #20]
		    char FracPartStr[3];
		    sprintf(FracPartStr, "%02X", fracPart);
 8000982:	8aba      	ldrh	r2, [r7, #20]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4944      	ldr	r1, [pc, #272]	; (8000a9c <startupSequence+0x240>)
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fab2 	bl	8004ef4 <siprintf>

		    // Write to UART Over Temp Fault in the desired format
		    char ResultStr[8];
		    sprintf(ResultStr, "%s.%s\r\n", IntPartStr, FracPartStr);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	1d38      	adds	r0, r7, #4
 800099a:	4942      	ldr	r1, [pc, #264]	; (8000aa4 <startupSequence+0x248>)
 800099c:	f004 faaa 	bl	8004ef4 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80009a0:	1d39      	adds	r1, r7, #4
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2208      	movs	r2, #8
 80009a6:	4840      	ldr	r0, [pc, #256]	; (8000aa8 <startupSequence+0x24c>)
 80009a8:	f003 fee8 	bl	800477c <HAL_UART_Transmit>


		    // Delay for debug
		    HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f000 fff4 	bl	800199c <HAL_Delay>
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 80009b4:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8000aac <startupSequence+0x250>
 80009b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <startupSequence+0x23c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	dca1      	bgt.n	8000910 <startupSequence+0xb4>
	//
	// Positive Contactor Enable
	//

	// Send high Signal to POS_LSD_OUTPUT
	HAL_GPIO_WritePin(POS_LSD_OUTPUT_GPIO, POS_LSD_OUTPUT_PIN, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	482b      	ldr	r0, [pc, #172]	; (8000a80 <startupSequence+0x224>)
 80009d2:	f003 f831 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read POS_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_LSD_INPUT_GPIO, POS_LSD_INPUT_PIN)){ return -1; }
 80009d6:	2102      	movs	r1, #2
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <startupSequence+0x220>)
 80009da:	f003 f815 	bl	8003a08 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <startupSequence+0x18e>
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e043      	b.n	8000a72 <startupSequence+0x216>

	// Send high Signal to POS_HSD_OUTPUT
	HAL_GPIO_WritePin(POS_HSD_OUTPUT_GPIO, POS_HSD_OUTPUT_PIN, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2108      	movs	r1, #8
 80009ee:	4823      	ldr	r0, [pc, #140]	; (8000a7c <startupSequence+0x220>)
 80009f0:	f003 f822 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read POS_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_HSD_INPUT_GPIO, POS_HSD_INPUT_PIN)){ return -1; }
 80009f4:	2104      	movs	r1, #4
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <startupSequence+0x220>)
 80009f8:	f003 f806 	bl	8003a08 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <startupSequence+0x1ac>
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e034      	b.n	8000a72 <startupSequence+0x216>

	// Read POS_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(POS_CON_INPUT_GPIO, POS_CON_INPUT_PIN)){ return -1; }
 8000a08:	2101      	movs	r1, #1
 8000a0a:	481c      	ldr	r0, [pc, #112]	; (8000a7c <startupSequence+0x220>)
 8000a0c:	f002 fffc 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <startupSequence+0x1c0>
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e02a      	b.n	8000a72 <startupSequence+0x216>
	//
	// Pre Charge Contactor Disable
	//

	// Send low Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <startupSequence+0x224>)
 8000a22:	f003 f809 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 8000a26:	2110      	movs	r1, #16
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <startupSequence+0x224>)
 8000a2a:	f002 ffed 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <startupSequence+0x1de>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e01b      	b.n	8000a72 <startupSequence+0x216>

	// Send low Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <startupSequence+0x220>)
 8000a42:	f002 fff9 	bl	8003a38 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 8000a46:	2104      	movs	r1, #4
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <startupSequence+0x22c>)
 8000a4a:	f002 ffdd 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <startupSequence+0x1fe>
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	e00b      	b.n	8000a72 <startupSequence+0x216>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 8000a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <startupSequence+0x220>)
 8000a60:	f002 ffd2 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <startupSequence+0x214>
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e000      	b.n	8000a72 <startupSequence+0x216>

	// Start-up Sequence Concluded Successfully
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	200001ac 	.word	0x200001ac
 8000a90:	20000078 	.word	0x20000078
 8000a94:	447a0000 	.word	0x447a0000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	08005854 	.word	0x08005854
 8000aa0:	42c80000 	.word	0x42c80000
 8000aa4:	0800585c 	.word	0x0800585c
 8000aa8:	20000148 	.word	0x20000148
 8000aac:	00000003 	.word	0x00000003

08000ab0 <checkStatusTransmit>:

void checkStatusTransmit(Cell* cell){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b092      	sub	sp, #72	; 0x48
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]

	// append id, mod and cell number to sensor reading
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8000ab8:	2203      	movs	r2, #3
 8000aba:	49cf      	ldr	r1, [pc, #828]	; (8000df8 <checkStatusTransmit+0x348>)
 8000abc:	48cf      	ldr	r0, [pc, #828]	; (8000dfc <checkStatusTransmit+0x34c>)
 8000abe:	f001 f85f 	bl	8001b80 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 8000ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac6:	48cd      	ldr	r0, [pc, #820]	; (8000dfc <checkStatusTransmit+0x34c>)
 8000ac8:	f000 ffcf 	bl	8001a6a <HAL_ADC_PollForConversion>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8000acc:	4bca      	ldr	r3, [pc, #808]	; (8000df8 <checkStatusTransmit+0x348>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ad8:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8000e00 <checkStatusTransmit+0x350>
 8000adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae0:	4bc8      	ldr	r3, [pc, #800]	; (8000e04 <checkStatusTransmit+0x354>)
 8000ae2:	edc3 7a00 	vstr	s15, [r3]
	cell_vref = (float)cell_analog_values[2]/1000;
 8000ae6:	4bc4      	ldr	r3, [pc, #784]	; (8000df8 <checkStatusTransmit+0x348>)
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000af2:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8000e00 <checkStatusTransmit+0x350>
 8000af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afa:	4bc3      	ldr	r3, [pc, #780]	; (8000e08 <checkStatusTransmit+0x358>)
 8000afc:	edc3 7a00 	vstr	s15, [r3]

	// calculate I = cell_voltage / known R
	cell_current = cell_voltage / known_resistance;
 8000b00:	4bc0      	ldr	r3, [pc, #768]	; (8000e04 <checkStatusTransmit+0x354>)
 8000b02:	ed93 7a00 	vldr	s14, [r3]
 8000b06:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8000e0c <checkStatusTransmit+0x35c>
 8000b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0e:	4bc0      	ldr	r3, [pc, #768]	; (8000e10 <checkStatusTransmit+0x360>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]

	// calculate thermistor R = (Vref - V) /I
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8000b14:	4bbc      	ldr	r3, [pc, #752]	; (8000e08 <checkStatusTransmit+0x358>)
 8000b16:	ed93 7a00 	vldr	s14, [r3]
 8000b1a:	4bba      	ldr	r3, [pc, #744]	; (8000e04 <checkStatusTransmit+0x354>)
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b24:	4bba      	ldr	r3, [pc, #744]	; (8000e10 <checkStatusTransmit+0x360>)
 8000b26:	ed93 7a00 	vldr	s14, [r3]
 8000b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b2e:	4bb9      	ldr	r3, [pc, #740]	; (8000e14 <checkStatusTransmit+0x364>)
 8000b30:	edc3 7a00 	vstr	s15, [r3]

	// Convert module number to hex
	uint16_t mod_num = (uint16_t)cell->module;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
	char mod_numStr[2];
	sprintf(mod_numStr, "%1X", mod_num);
 8000b3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b40:	49b5      	ldr	r1, [pc, #724]	; (8000e18 <checkStatusTransmit+0x368>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 f9d6 	bl	8004ef4 <siprintf>

	// Convert cell number to hex
	uint16_t cell_num = (uint16_t)cell->cell;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	char cell_numStr[2];
	sprintf(cell_numStr, "%1X", cell_num);
 8000b4e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b54:	49b0      	ldr	r1, [pc, #704]	; (8000e18 <checkStatusTransmit+0x368>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 f9cc 	bl	8004ef4 <siprintf>

    // Get the Cell Faults
	uint16_t Fault;
    Fault = getCellFaults(cell);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fd25 	bl	80005ac <getCellFaults>
 8000b62:	4603      	mov	r3, r0
 8000b64:	877b      	strh	r3, [r7, #58]	; 0x3a

    // Convert the result to a hexadecimal string
    char FaultStr[5]; // Buffer to hold the result string
    sprintf(FaultStr, "%04X", Fault);
 8000b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	49ab      	ldr	r1, [pc, #684]	; (8000e1c <checkStatusTransmit+0x36c>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 f9c0 	bl	8004ef4 <siprintf>

	// Write to UART
	char FaultResultStr[7];
	sprintf(FaultResultStr, "7%s\r\n", FaultStr);
 8000b74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	49a8      	ldr	r1, [pc, #672]	; (8000e20 <checkStatusTransmit+0x370>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 f9b8 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)FaultResultStr, sizeof(FaultResultStr), 100);
 8000b84:	f107 0120 	add.w	r1, r7, #32
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	48a5      	ldr	r0, [pc, #660]	; (8000e24 <checkStatusTransmit+0x374>)
 8000b8e:	f003 fdf5 	bl	800477c <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	uint16_t intPart = (uint16_t)cell_voltage;
 8000b92:	4b9c      	ldr	r3, [pc, #624]	; (8000e04 <checkStatusTransmit+0x354>)
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9c:	ee17 3a90 	vmov	r3, s15
 8000ba0:	873b      	strh	r3, [r7, #56]	; 0x38
	char IntPartStr[3];
	sprintf(IntPartStr, "%02X", intPart);
 8000ba2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	499f      	ldr	r1, [pc, #636]	; (8000e28 <checkStatusTransmit+0x378>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f9a2 	bl	8004ef4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 8000bb0:	4b94      	ldr	r3, [pc, #592]	; (8000e04 <checkStatusTransmit+0x354>)
 8000bb2:	ed93 7a00 	vldr	s14, [r3]
 8000bb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc4:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8000e2c <checkStatusTransmit+0x37c>
 8000bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd0:	ee17 3a90 	vmov	r3, s15
 8000bd4:	86fb      	strh	r3, [r7, #54]	; 0x36
	char FracPartStr[3];
	sprintf(FracPartStr, "%02X", fracPart);
 8000bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4992      	ldr	r1, [pc, #584]	; (8000e28 <checkStatusTransmit+0x378>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f988 	bl	8004ef4 <siprintf>

	// Write to UART
	char ResultStr[11];
	sprintf(ResultStr, "1%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000be4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000be8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	498c      	ldr	r1, [pc, #560]	; (8000e30 <checkStatusTransmit+0x380>)
 8000c00:	f004 f978 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c04:	f107 010c 	add.w	r1, r7, #12
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	220b      	movs	r2, #11
 8000c0c:	4885      	ldr	r0, [pc, #532]	; (8000e24 <checkStatusTransmit+0x374>)
 8000c0e:	f003 fdb5 	bl	800477c <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)cell_current;
 8000c12:	4b7f      	ldr	r3, [pc, #508]	; (8000e10 <checkStatusTransmit+0x360>)
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c1c:	ee17 3a90 	vmov	r3, s15
 8000c20:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000c22:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	497f      	ldr	r1, [pc, #508]	; (8000e28 <checkStatusTransmit+0x378>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 f962 	bl	8004ef4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 8000c30:	4b77      	ldr	r3, [pc, #476]	; (8000e10 <checkStatusTransmit+0x360>)
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c44:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000e2c <checkStatusTransmit+0x37c>
 8000c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	ee17 3a90 	vmov	r3, s15
 8000c54:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000c56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4972      	ldr	r1, [pc, #456]	; (8000e28 <checkStatusTransmit+0x378>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 f948 	bl	8004ef4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "2%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000c64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c6c:	f107 000c 	add.w	r0, r7, #12
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	496d      	ldr	r1, [pc, #436]	; (8000e34 <checkStatusTransmit+0x384>)
 8000c80:	f004 f938 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c84:	f107 010c 	add.w	r1, r7, #12
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	220b      	movs	r2, #11
 8000c8c:	4865      	ldr	r0, [pc, #404]	; (8000e24 <checkStatusTransmit+0x374>)
 8000c8e:	f003 fd75 	bl	800477c <HAL_UART_Transmit>

	// TODO: determine temp based off linear eq of degrees vs ohms
	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)thermistor_resistance;
 8000c92:	4b60      	ldr	r3, [pc, #384]	; (8000e14 <checkStatusTransmit+0x364>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c9c:	ee17 3a90 	vmov	r3, s15
 8000ca0:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000ca2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	495f      	ldr	r1, [pc, #380]	; (8000e28 <checkStatusTransmit+0x378>)
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 f922 	bl	8004ef4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8000cb0:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <checkStatusTransmit+0x364>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000e2c <checkStatusTransmit+0x37c>
 8000cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd0:	ee17 3a90 	vmov	r3, s15
 8000cd4:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000cd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4952      	ldr	r1, [pc, #328]	; (8000e28 <checkStatusTransmit+0x378>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f908 	bl	8004ef4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "3%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000ce4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ce8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000cec:	f107 000c 	add.w	r0, r7, #12
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	494e      	ldr	r1, [pc, #312]	; (8000e38 <checkStatusTransmit+0x388>)
 8000d00:	f004 f8f8 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	220b      	movs	r2, #11
 8000d0c:	4845      	ldr	r0, [pc, #276]	; (8000e24 <checkStatusTransmit+0x374>)
 8000d0e:	f003 fd35 	bl	800477c <HAL_UART_Transmit>

	// TODO: send V and I to the model to get (5) SOC and (6) SOP
	// TODO: Transfer inference functions here to get SOC

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)soc;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <checkStatusTransmit+0x38c>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1c:	ee17 3a90 	vmov	r3, s15
 8000d20:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000d22:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	493f      	ldr	r1, [pc, #252]	; (8000e28 <checkStatusTransmit+0x378>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 f8e2 	bl	8004ef4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((soc - intPart) * 100);
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <checkStatusTransmit+0x38c>)
 8000d32:	ed93 7a00 	vldr	s14, [r3]
 8000d36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000e2c <checkStatusTransmit+0x37c>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d50:	ee17 3a90 	vmov	r3, s15
 8000d54:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000d56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	4932      	ldr	r1, [pc, #200]	; (8000e28 <checkStatusTransmit+0x378>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 f8c8 	bl	8004ef4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "5%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000d64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d6c:	f107 000c 	add.w	r0, r7, #12
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4930      	ldr	r1, [pc, #192]	; (8000e40 <checkStatusTransmit+0x390>)
 8000d80:	f004 f8b8 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000d84:	f107 010c 	add.w	r1, r7, #12
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	220b      	movs	r2, #11
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <checkStatusTransmit+0x374>)
 8000d8e:	f003 fcf5 	bl	800477c <HAL_UART_Transmit>

	// TODO: Figure out how to calculate SOP

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)sop;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <checkStatusTransmit+0x394>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d9c:	ee17 3a90 	vmov	r3, s15
 8000da0:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000da2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	491f      	ldr	r1, [pc, #124]	; (8000e28 <checkStatusTransmit+0x378>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 f8a2 	bl	8004ef4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((sop - intPart) * 100);
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <checkStatusTransmit+0x394>)
 8000db2:	ed93 7a00 	vldr	s14, [r3]
 8000db6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000e2c <checkStatusTransmit+0x37c>
 8000dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000dd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4912      	ldr	r1, [pc, #72]	; (8000e28 <checkStatusTransmit+0x378>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 f888 	bl	8004ef4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "6%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000de4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000de8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000dec:	f107 000c 	add.w	r0, r7, #12
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	e027      	b.n	8000e48 <checkStatusTransmit+0x398>
 8000df8:	200001ac 	.word	0x200001ac
 8000dfc:	20000078 	.word	0x20000078
 8000e00:	447a0000 	.word	0x447a0000
 8000e04:	200001b8 	.word	0x200001b8
 8000e08:	200001c4 	.word	0x200001c4
 8000e0c:	435c0000 	.word	0x435c0000
 8000e10:	200001bc 	.word	0x200001bc
 8000e14:	200001c0 	.word	0x200001c0
 8000e18:	08005864 	.word	0x08005864
 8000e1c:	08005868 	.word	0x08005868
 8000e20:	08005870 	.word	0x08005870
 8000e24:	20000148 	.word	0x20000148
 8000e28:	08005854 	.word	0x08005854
 8000e2c:	42c80000 	.word	0x42c80000
 8000e30:	08005878 	.word	0x08005878
 8000e34:	08005888 	.word	0x08005888
 8000e38:	08005898 	.word	0x08005898
 8000e3c:	200001c8 	.word	0x200001c8
 8000e40:	080058a8 	.word	0x080058a8
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4908      	ldr	r1, [pc, #32]	; (8000e74 <checkStatusTransmit+0x3c4>)
 8000e52:	f004 f84f 	bl	8004ef4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	220b      	movs	r2, #11
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <checkStatusTransmit+0x3c8>)
 8000e60:	f003 fc8c 	bl	800477c <HAL_UART_Transmit>

	// Delay for debug
	HAL_Delay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f000 fd98 	bl	800199c <HAL_Delay>

	return 0;
 8000e6c:	bf00      	nop
}
 8000e6e:	3740      	adds	r7, #64	; 0x40
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	080058b8 	.word	0x080058b8
 8000e78:	20000148 	.word	0x20000148

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	; 0x40
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fd19 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */
  // Fault
  uint16_t Fault;

	// Define the Cell
  Cell cell0 = {
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2224      	movs	r2, #36	; 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 f850 	bl	8004f34 <memset>
 8000e94:	2301      	movs	r3, #1
 8000e96:	753b      	strb	r3, [r7, #20]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	757b      	strb	r3, [r7, #21]
	};

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f8c2 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 fa3e 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea4:	f000 fa1c 	bl	80012e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 f9f0 	bl	800128c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eac:	f000 f92c 	bl	8001108 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000eb0:	f000 f998 	bl	80011e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000eb4:	4856      	ldr	r0, [pc, #344]	; (8001010 <main+0x194>)
 8000eb6:	f001 fc1d 	bl	80026f4 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4854      	ldr	r0, [pc, #336]	; (8001010 <main+0x194>)
 8000ebe:	f001 fd2d 	bl	800291c <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 8000ec2:	4b54      	ldr	r3, [pc, #336]	; (8001014 <main+0x198>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <main+0x198>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ece:	4b51      	ldr	r3, [pc, #324]	; (8001014 <main+0x198>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 8000ed4:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <main+0x198>)
 8000ed6:	f240 4246 	movw	r2, #1094	; 0x446
 8000eda:	601a      	str	r2, [r3, #0]

  // Initializing
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	484d      	ldr	r0, [pc, #308]	; (8001018 <main+0x19c>)
 8000ee2:	f002 fda9 	bl	8003a38 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 fd57 	bl	800199c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4849      	ldr	r0, [pc, #292]	; (8001018 <main+0x19c>)
 8000ef4:	f002 fda0 	bl	8003a38 <HAL_GPIO_WritePin>

  int success;
  success = startupSequence();
 8000ef8:	f7ff fcb0 	bl	800085c <startupSequence>
 8000efc:	63f8      	str	r0, [r7, #60]	; 0x3c

  if (success == -1) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); }
 8000efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d104      	bne.n	8000f10 <main+0x94>
 8000f06:	2201      	movs	r2, #1
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4843      	ldr	r0, [pc, #268]	; (8001018 <main+0x19c>)
 8000f0c:	f002 fd94 	bl	8003a38 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // TODO: loop through every cell in the pack for every module
	  checkStatusTransmit(&cell0);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdcb 	bl	8000ab0 <checkStatusTransmit>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	483e      	ldr	r0, [pc, #248]	; (8001018 <main+0x19c>)
 8000f20:	f002 fd72 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d035      	beq.n	8000f96 <main+0x11a>
 8000f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2e:	483a      	ldr	r0, [pc, #232]	; (8001018 <main+0x19c>)
 8000f30:	f002 fd6a 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d12d      	bne.n	8000f96 <main+0x11a>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	4836      	ldr	r0, [pc, #216]	; (8001018 <main+0x19c>)
 8000f40:	f002 fd7a 	bl	8003a38 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f000 fd29 	bl	800199c <HAL_Delay>

		  // Set the Cell Over Temp Fault
		  setCellFaults(&cell0, OVER_TEMP_FAULT);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fbaf 	bl	80006b4 <setCellFaults>

		  // Get the Cell Over Temp Fault
		  Fault = getCellFaults(&cell0);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb26 	bl	80005ac <getCellFaults>
 8000f60:	4603      	mov	r3, r0
 8000f62:	877b      	strh	r3, [r7, #58]	; 0x3a

		  // Convert the result to a hexadecimal string
		  char FaultStr[6]; // Buffer to hold the result string
		  sprintf(FaultStr, "%05X", Fault);
 8000f64:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	492c      	ldr	r1, [pc, #176]	; (800101c <main+0x1a0>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 ffc1 	bl	8004ef4 <siprintf>

		  // Write to CAN Over Temp Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <main+0x1a4>)
 8000f78:	4926      	ldr	r1, [pc, #152]	; (8001014 <main+0x198>)
 8000f7a:	4825      	ldr	r0, [pc, #148]	; (8001010 <main+0x194>)
 8000f7c:	f001 fbfe 	bl	800277c <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Current Fault
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fbe4 	bl	8000754 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	4821      	ldr	r0, [pc, #132]	; (8001018 <main+0x19c>)
 8000f92:	f002 fd51 	bl	8003a38 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	481f      	ldr	r0, [pc, #124]	; (8001018 <main+0x19c>)
 8000f9c:	f002 fd34 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0b4      	beq.n	8000f10 <main+0x94>
 8000fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000faa:	481b      	ldr	r0, [pc, #108]	; (8001018 <main+0x19c>)
 8000fac:	f002 fd2c 	bl	8003a08 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1ac      	bne.n	8000f10 <main+0x94>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	4817      	ldr	r0, [pc, #92]	; (8001018 <main+0x19c>)
 8000fbc:	f002 fd3c 	bl	8003a38 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f000 fceb 	bl	800199c <HAL_Delay>

		  // Set the Cell Over Current Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fb71 	bl	80006b4 <setCellFaults>

		  // Get the Cell Over Current Fault
		  Fault = getCellFaults(&cell0);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fae8 	bl	80005ac <getCellFaults>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	877b      	strh	r3, [r7, #58]	; 0x3a

		  // Convert the result to a hexadecimal string
		  char FaultStr[6]; // Buffer to hold the result string
		  sprintf(FaultStr, "%05X", Fault);
 8000fe0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	490d      	ldr	r1, [pc, #52]	; (800101c <main+0x1a0>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 ff84 	bl	8004ef4 <siprintf>

		  // Write to CAN Over Current Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000fec:	1d3a      	adds	r2, r7, #4
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <main+0x1a4>)
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <main+0x198>)
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <main+0x194>)
 8000ff4:	f001 fbc2 	bl	800277c <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Temp Fault
		  clearCellFault(&cell0, OVER_TEMP_FAULT);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fba8 	bl	8000754 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <main+0x19c>)
 800100a:	f002 fd15 	bl	8003a38 <HAL_GPIO_WritePin>
	  checkStatusTransmit(&cell0);
 800100e:	e77f      	b.n	8000f10 <main+0x94>
 8001010:	20000120 	.word	0x20000120
 8001014:	20000190 	.word	0x20000190
 8001018:	40020000 	.word	0x40020000
 800101c:	080058c8 	.word	0x080058c8
 8001020:	200001a8 	.word	0x200001a8

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	; 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2234      	movs	r2, #52	; 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 ff7e 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <SystemClock_Config+0xdc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <SystemClock_Config+0xdc>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <SystemClock_Config+0xdc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <SystemClock_Config+0xe0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	; (8001104 <SystemClock_Config+0xe0>)
 800106e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <SystemClock_Config+0xe0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001088:	2310      	movs	r3, #16
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001098:	23b4      	movs	r3, #180	; 0xb4
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f877 	bl	80041a0 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010b8:	f000 fa10 	bl	80014dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010bc:	f002 fcd6 	bl	8003a6c <HAL_PWREx_EnableOverDrive>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 fa09 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2105      	movs	r1, #5
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fd0f 	bl	8003b0c <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010f4:	f000 f9f2 	bl	80014dc <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	; 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800111c:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <MX_ADC1_Init+0xd4>)
 800111e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001126:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001130:	2201      	movs	r2, #1
 8001132:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <MX_ADC1_Init+0xd8>)
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001156:	2203      	movs	r2, #3
 8001158:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_ADC1_Init+0xd0>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001168:	481b      	ldr	r0, [pc, #108]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800116a:	f000 fc3b 	bl	80019e4 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001174:	f000 f9b2 	bl	80014dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_ADC1_Init+0xd0>)
 800118a:	f000 fe27 	bl	8001ddc <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 f9a2 	bl	80014dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001198:	2301      	movs	r3, #1
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_ADC1_Init+0xd0>)
 80011a6:	f000 fe19 	bl	8001ddc <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011b0:	f000 f994 	bl	80014dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011b8:	2303      	movs	r3, #3
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_ADC1_Init+0xd0>)
 80011c2:	f000 fe0b 	bl	8001ddc <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011cc:	f000 f986 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000078 	.word	0x20000078
 80011dc:	40012000 	.word	0x40012000
 80011e0:	0f000001 	.word	0x0f000001

080011e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_CAN1_Init+0xa0>)
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <MX_CAN1_Init+0xa4>)
 80011ee:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_CAN1_Init+0xa0>)
 80011f2:	2212      	movs	r2, #18
 80011f4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_CAN1_Init+0xa0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_CAN1_Init+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001204:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001208:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_CAN1_Init+0xa0>)
 800120c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001210:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_CAN1_Init+0xa0>)
 800121a:	2200      	movs	r2, #0
 800121c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001220:	2200      	movs	r2, #0
 8001222:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001226:	2200      	movs	r2, #0
 8001228:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_CAN1_Init+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001232:	2200      	movs	r2, #0
 8001234:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001238:	f001 f880 	bl	800233c <HAL_CAN_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001242:	f000 f94b 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800124a:	2312      	movs	r3, #18
 800124c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 8001252:	f242 0360 	movw	r3, #8288	; 0x2060
 8001256:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 800125c:	f242 0360 	movw	r3, #8288	; 0x2060
 8001260:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800126a:	2301      	movs	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800126e:	2314      	movs	r3, #20
 8001270:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <MX_CAN1_Init+0xa0>)
 8001278:	f001 f95c 	bl	8002534 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000120 	.word	0x20000120
 8001288:	40006400 	.word	0x40006400

0800128c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_USART2_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 8001298:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800129c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f003 fa0a 	bl	80046dc <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f905 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000148 	.word	0x20000148
 80012dc:	40004400 	.word	0x40004400

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_DMA_Init+0x3c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <MX_DMA_Init+0x3c>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_DMA_Init+0x3c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2038      	movs	r0, #56	; 0x38
 8001308:	f001 fe43 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130c:	2038      	movs	r0, #56	; 0x38
 800130e:	f001 fe5c 	bl	8002fca <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b5c      	ldr	r3, [pc, #368]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a54      	ldr	r2, [pc, #336]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <MX_GPIO_Init+0x1a8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f641 0108 	movw	r1, #6152	; 0x1808
 80013c8:	4840      	ldr	r0, [pc, #256]	; (80014cc <MX_GPIO_Init+0x1ac>)
 80013ca:	f002 fb35 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	21e0      	movs	r1, #224	; 0xe0
 80013d2:	483f      	ldr	r0, [pc, #252]	; (80014d0 <MX_GPIO_Init+0x1b0>)
 80013d4:	f002 fb30 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f240 1121 	movw	r1, #289	; 0x121
 80013de:	483d      	ldr	r0, [pc, #244]	; (80014d4 <MX_GPIO_Init+0x1b4>)
 80013e0:	f002 fb2a 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <MX_GPIO_Init+0x1ac>)
 80013fc:	f002 f970 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9
 8001400:	f240 6307 	movw	r3, #1543	; 0x607
 8001404:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_GPIO_Init+0x1ac>)
 8001416:	f002 f963 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 800141a:	f641 0308 	movw	r3, #6152	; 0x1808
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4826      	ldr	r0, [pc, #152]	; (80014cc <MX_GPIO_Init+0x1ac>)
 8001434:	f002 f954 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001438:	23e0      	movs	r3, #224	; 0xe0
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4820      	ldr	r0, [pc, #128]	; (80014d0 <MX_GPIO_Init+0x1b0>)
 8001450:	f002 f946 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8;
 8001454:	f240 1321 	movw	r3, #289	; 0x121
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <MX_GPIO_Init+0x1b4>)
 800146e:	f002 f937 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001472:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_GPIO_Init+0x1b0>)
 8001488:	f002 f92a 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148c:	2304      	movs	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MX_GPIO_Init+0x1b8>)
 80014a0:	f002 f91e 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80014a4:	f44f 7304 	mov.w	r3, #528	; 0x210
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_GPIO_Init+0x1b4>)
 80014ba:	f002 f911 	bl	80036e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020c00 	.word	0x40020c00

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
 8001528:	f001 fd28 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_ADC_MspInit+0xdc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d157      	bne.n	800160a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_ADC_MspInit+0xe0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001592:	2313      	movs	r3, #19
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	481d      	ldr	r0, [pc, #116]	; (800161c <HAL_ADC_MspInit+0xe4>)
 80015a6:	f002 f89b 	bl	80036e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_ADC_MspInit+0xec>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015f0:	f001 fd06 	bl	8003000 <HAL_DMA_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015fa:	f7ff ff6f 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40012000 	.word	0x40012000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	200000c0 	.word	0x200000c0
 8001624:	40026410 	.word	0x40026410

08001628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_CAN_MspInit+0x94>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d134      	bne.n	80016b4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 8001654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_CAN_MspInit+0x98>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001694:	2309      	movs	r3, #9
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_CAN_MspInit+0x9c>)
 80016a0:	f002 f81e 	bl	80036e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2014      	movs	r0, #20
 80016aa:	f001 fc72 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016ae:	2014      	movs	r0, #20
 80016b0:	f001 fc8b 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40006400 	.word	0x40006400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_UART_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_UART_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x88>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_UART_MspInit+0x88>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001722:	230c      	movs	r3, #12
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_MspInit+0x8c>)
 800173e:	f001 ffcf 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40004400 	.word	0x40004400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f8da 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <CAN1_RX0_IRQHandler+0x10>)
 80017b2:	f001 f8d9 	bl	8002968 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000120 	.word	0x20000120

080017c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA2_Stream0_IRQHandler+0x10>)
 80017c6:	f001 fd21 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000c0 	.word	0x200000c0

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f003 fb9e 	bl	8004f44 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20020000 	.word	0x20020000
 8001834:	00000400 	.word	0x00000400
 8001838:	200001d0 	.word	0x200001d0
 800183c:	20000320 	.word	0x20000320

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001868:	f7ff ffea 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	; (80018a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	; (80018b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001892:	f003 fb5d 	bl	8004f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff faf1 	bl	8000e7c <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018a8:	08005934 	.word	0x08005934
  ldr r2, =_sbss
 80018ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018b0:	20000320 	.word	0x20000320

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f001 fb4b 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fdfc 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fb63 	bl	8002fe6 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f001 fb2b 	bl	8002f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000000 	.word	0x20000000
 8001954:	20000008 	.word	0x20000008
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008
 8001980:	200001d4 	.word	0x200001d4

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200001d4 	.word	0x200001d4

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008

080019e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e033      	b.n	8001a62 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fd98 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	f043 0202 	orr.w	r2, r3, #2
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fb02 	bl	8002040 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
 8001a52:	e001      	b.n	8001a58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d113      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a96:	d10b      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e063      	b.n	8001b78 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab0:	f7ff ff68 	bl	8001984 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab6:	e021      	b.n	8001afc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d01d      	beq.n	8001afc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x6c>
 8001ac6:	f7ff ff5d 	bl	8001984 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d212      	bcs.n	8001afc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d00b      	beq.n	8001afc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03d      	b.n	8001b78 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d1d6      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0212 	mvn.w	r2, #18
 8001b12:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d123      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11f      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d111      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Start_DMA+0x1e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e0e9      	b.n	8001d72 <HAL_ADC_Start_DMA+0x1f2>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d018      	beq.n	8001be6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_ADC_Start_DMA+0x1fc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6d      	ldr	r2, [pc, #436]	; (8001d80 <HAL_ADC_Start_DMA+0x200>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9a      	lsrs	r2, r3, #18
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf4:	d107      	bne.n	8001c06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 80a1 	bne.w	8001d58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c54:	d106      	bne.n	8001c64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f023 0206 	bic.w	r2, r3, #6
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
 8001c62:	e002      	b.n	8001c6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_ADC_Start_DMA+0x204>)
 8001c74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	4a43      	ldr	r2, [pc, #268]	; (8001d88 <HAL_ADC_Start_DMA+0x208>)
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <HAL_ADC_Start_DMA+0x20c>)
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	4a41      	ldr	r2, [pc, #260]	; (8001d90 <HAL_ADC_Start_DMA+0x210>)
 8001c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ca6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	334c      	adds	r3, #76	; 0x4c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f001 fa48 	bl	800315c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d12a      	bne.n	8001d2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_ADC_Start_DMA+0x214>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d015      	beq.n	8001d0e <HAL_ADC_Start_DMA+0x18e>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <HAL_ADC_Start_DMA+0x218>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_Start_DMA+0x178>
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_ADC_Start_DMA+0x204>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00a      	beq.n	8001d0e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_ADC_Start_DMA+0x21c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d136      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_ADC_Start_DMA+0x204>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d130      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d129      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e020      	b.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_ADC_Start_DMA+0x214>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d11b      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d114      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e00b      	b.n	8001d70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f043 0210 	orr.w	r2, r3, #16
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	431bde83 	.word	0x431bde83
 8001d84:	40012300 	.word	0x40012300
 8001d88:	08002239 	.word	0x08002239
 8001d8c:	080022f3 	.word	0x080022f3
 8001d90:	0800230f 	.word	0x0800230f
 8001d94:	40012000 	.word	0x40012000
 8001d98:	40012100 	.word	0x40012100
 8001d9c:	40012200 	.word	0x40012200

08001da0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1c>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e113      	b.n	8002020 <HAL_ADC_ConfigChannel+0x244>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d925      	bls.n	8001e54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b1e      	subs	r3, #30
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68d9      	ldr	r1, [r3, #12]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4403      	add	r3, r0
 8001e46:	3b1e      	subs	r3, #30
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	e022      	b.n	8001e9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	2207      	movs	r2, #7
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4403      	add	r3, r0
 8001e90:	409a      	lsls	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d824      	bhi.n	8001eec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b05      	subs	r3, #5
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b05      	subs	r3, #5
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e04c      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d824      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b23      	subs	r3, #35	; 0x23
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b23      	subs	r3, #35	; 0x23
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3c:	e023      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b41      	subs	r3, #65	; 0x41
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b41      	subs	r3, #65	; 0x41
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_ADC_ConfigChannel+0x250>)
 8001f88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10f      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d122      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x260>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9a      	lsrs	r2, r3, #18
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002008:	e002      	b.n	8002010 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012300 	.word	0x40012300
 8002030:	40012000 	.word	0x40012000
 8002034:	10000012 	.word	0x10000012
 8002038:	20000000 	.word	0x20000000
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <ADC_Init+0x1f0>)
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	021a      	lsls	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <ADC_Init+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e00f      	b.n	800213e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0202 	bic.w	r2, r2, #2
 800214c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
 8002158:	005a      	lsls	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	035a      	lsls	r2, r3, #13
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e007      	b.n	80021b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f6:	025a      	lsls	r2, r3, #9
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	029a      	lsls	r2, r3, #10
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	0f000001 	.word	0x0f000001

08002238 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13c      	bne.n	80022cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12b      	bne.n	80022c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d127      	bne.n	80022c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228c:	2b00      	cmp	r3, #0
 800228e:	d119      	bne.n	80022c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0220 	bic.w	r2, r2, #32
 800229e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fd6b 	bl	8001da0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022ca:	e00e      	b.n	80022ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fd75 	bl	8001dc8 <HAL_ADC_ErrorCallback>
}
 80022de:	e004      	b.n	80022ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fd57 	bl	8001db4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff fd4a 	bl	8001dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0ed      	b.n	800252a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff f964 	bl	8001628 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002370:	f7ff fb08 	bl	8001984 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002376:	e012      	b.n	800239e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002378:	f7ff fb04 	bl	8001984 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b0a      	cmp	r3, #10
 8002384:	d90b      	bls.n	800239e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2205      	movs	r2, #5
 8002396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0c5      	b.n	800252a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0e5      	beq.n	8002378 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0202 	bic.w	r2, r2, #2
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff fae2 	bl	8001984 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c2:	e012      	b.n	80023ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c4:	f7ff fade 	bl	8001984 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	d90b      	bls.n	80023ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2205      	movs	r2, #5
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e09f      	b.n	800252a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7e5b      	ldrb	r3, [r3, #25]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e007      	b.n	800244c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e9b      	ldrb	r3, [r3, #26]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e007      	b.n	8002476 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0220 	bic.w	r2, r2, #32
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7edb      	ldrb	r3, [r3, #27]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0210 	bic.w	r2, r2, #16
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e007      	b.n	80024a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0210 	orr.w	r2, r2, #16
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7f1b      	ldrb	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e007      	b.n	80024ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7f5b      	ldrb	r3, [r3, #29]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0204 	orr.w	r2, r2, #4
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	ea42 0103 	orr.w	r1, r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <HAL_CAN_ConfigFilter+0x26>
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 80be 	bne.w	80026d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800255c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002574:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d123      	bne.n	8002604 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3248      	adds	r2, #72	; 0x48
 80025e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025fa:	6979      	ldr	r1, [r7, #20]
 80025fc:	3348      	adds	r3, #72	; 0x48
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d122      	bne.n	8002652 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	431a      	orrs	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800262c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3248      	adds	r2, #72	; 0x48
 8002632:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002646:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002648:	6979      	ldr	r1, [r7, #20]
 800264a:	3348      	adds	r3, #72	; 0x48
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	401a      	ands	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800266c:	e007      	b.n	800267e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	431a      	orrs	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	401a      	ands	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002698:	e007      	b.n	80026aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026c8:	f023 0201 	bic.w	r2, r3, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e006      	b.n	80026e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40006400 	.word	0x40006400

080026f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d12e      	bne.n	8002766 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002720:	f7ff f930 	bl	8001984 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002726:	e012      	b.n	800274e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002728:	f7ff f92c 	bl	8001984 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b0a      	cmp	r3, #10
 8002734:	d90b      	bls.n	800274e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2205      	movs	r2, #5
 8002746:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e012      	b.n	8002774 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e5      	bne.n	8002728 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e006      	b.n	8002774 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002790:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d003      	beq.n	80027a8 <HAL_CAN_AddTxMessage+0x2c>
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f040 80ad 	bne.w	8002902 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8095 	beq.w	80028f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	0e1b      	lsrs	r3, r3, #24
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	6809      	ldr	r1, [r1, #0]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3318      	adds	r3, #24
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	440b      	add	r3, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800280a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002814:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3318      	adds	r3, #24
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3318      	adds	r3, #24
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	440b      	add	r3, r1
 8002830:	3304      	adds	r3, #4
 8002832:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	7d1b      	ldrb	r3, [r3, #20]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d111      	bne.n	8002860 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3318      	adds	r3, #24
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6811      	ldr	r1, [r2, #0]
 8002850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3318      	adds	r3, #24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3307      	adds	r3, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	061a      	lsls	r2, r3, #24
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3306      	adds	r3, #6
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3305      	adds	r3, #5
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4313      	orrs	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	3204      	adds	r2, #4
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	4610      	mov	r0, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6811      	ldr	r1, [r2, #0]
 8002888:	ea43 0200 	orr.w	r2, r3, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	440b      	add	r3, r1
 8002892:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002896:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3303      	adds	r3, #3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	061a      	lsls	r2, r3, #24
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3302      	adds	r3, #2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	4313      	orrs	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4610      	mov	r0, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	6811      	ldr	r1, [r2, #0]
 80028be:	ea43 0200 	orr.w	r2, r3, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3318      	adds	r3, #24
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	6811      	ldr	r1, [r2, #0]
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3318      	adds	r3, #24
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	440b      	add	r3, r1
 80028ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e00e      	b.n	8002910 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e006      	b.n	8002910 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3724      	adds	r7, #36	; 0x24
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d002      	beq.n	800293a <HAL_CAN_ActivateNotification+0x1e>
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d109      	bne.n	800294e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6959      	ldr	r1, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e006      	b.n	800295c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07c      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2201      	movs	r2, #1
 80029be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f983 	bl	8002cd6 <HAL_CAN_TxMailbox0CompleteCallback>
 80029d0:	e016      	b.n	8002a00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e00c      	b.n	8002a00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e002      	b.n	8002a00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f989 	bl	8002d12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d024      	beq.n	8002a54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f963 	bl	8002cea <HAL_CAN_TxMailbox1CompleteCallback>
 8002a24:	e016      	b.n	8002a54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e00c      	b.n	8002a54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	e002      	b.n	8002a54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f969 	bl	8002d26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d024      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f943 	bl	8002cfe <HAL_CAN_TxMailbox2CompleteCallback>
 8002a78:	e016      	b.n	8002aa8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	e00c      	b.n	8002aa8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	e002      	b.n	8002aa8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f949 	bl	8002d3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f93a 	bl	8002d62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f921 	bl	8002d4e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f91c 	bl	8002d8a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f903 	bl	8002d76 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f906 	bl	8002d9e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2208      	movs	r2, #8
 8002bac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8ff 	bl	8002db2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07b      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d072      	beq.n	8002cae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d043      	beq.n	8002cae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03e      	beq.n	8002cae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c36:	2b60      	cmp	r3, #96	; 0x60
 8002c38:	d02b      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x32a>
 8002c3a:	2b60      	cmp	r3, #96	; 0x60
 8002c3c:	d82e      	bhi.n	8002c9c <HAL_CAN_IRQHandler+0x334>
 8002c3e:	2b50      	cmp	r3, #80	; 0x50
 8002c40:	d022      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x320>
 8002c42:	2b50      	cmp	r3, #80	; 0x50
 8002c44:	d82a      	bhi.n	8002c9c <HAL_CAN_IRQHandler+0x334>
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d019      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x316>
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d826      	bhi.n	8002c9c <HAL_CAN_IRQHandler+0x334>
 8002c4e:	2b30      	cmp	r3, #48	; 0x30
 8002c50:	d010      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x30c>
 8002c52:	2b30      	cmp	r3, #48	; 0x30
 8002c54:	d822      	bhi.n	8002c9c <HAL_CAN_IRQHandler+0x334>
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d002      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x2f8>
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d005      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c5e:	e01d      	b.n	8002c9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c68:	e019      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c72:	e014      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c7c:	e00f      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c86:	e00a      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c90:	e005      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c9a:	e000      	b.n	8002c9e <HAL_CAN_IRQHandler+0x336>
            break;
 8002c9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f87c 	bl	8002dc6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7fe fcba 	bl	8001984 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e099      	b.n	8003150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303c:	e00f      	b.n	800305e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303e:	f7fe fca1 	bl	8001984 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d908      	bls.n	800305e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e078      	b.n	8003150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e8      	bne.n	800303e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_DMA_Init+0x158>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d107      	bne.n	80030c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d117      	bne.n	8003122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fa6f 	bl	80035e8 <DMA_CheckFifoParam>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800311e:	2301      	movs	r3, #1
 8003120:	e016      	b.n	8003150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa26 	bl	800357c <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	223f      	movs	r2, #63	; 0x3f
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	f010803f 	.word	0xf010803f

0800315c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Start_IT+0x26>
 800317e:	2302      	movs	r3, #2
 8003180:	e040      	b.n	8003204 <HAL_DMA_Start_IT+0xa8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12f      	bne.n	80031f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f9b8 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0216 	orr.w	r2, r2, #22
 80031ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_DMA_IRQHandler+0x248>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8e      	ldr	r2, [pc, #568]	; (8003458 <HAL_DMA_IRQHandler+0x24c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808f 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8087 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07e      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e079      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01d      	beq.n	800346e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d031      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02c      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000
 8003458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e01e      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d032      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d022      	beq.n	8003506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2205      	movs	r2, #5
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d307      	bcc.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x2cc>
 80034f2:	e000      	b.n	80034f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
 8003516:	e000      	b.n	800351a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003518:	bf00      	nop
    }
  }
}
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d909      	bls.n	80035be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	; 0x58
 80035bc:	e007      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	080058e8 	.word	0x080058e8

080035e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d856      	bhi.n	80036b6 <DMA_CheckFifoParam+0xce>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <DMA_CheckFifoParam+0x28>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036b7 	.word	0x080036b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d046      	beq.n	80036ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e043      	b.n	80036ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363a:	d140      	bne.n	80036be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e03d      	b.n	80036be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d121      	bne.n	8003690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d837      	bhi.n	80036c2 <DMA_CheckFifoParam+0xda>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <DMA_CheckFifoParam+0x70>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	0800366f 	.word	0x0800366f
 8003660:	08003669 	.word	0x08003669
 8003664:	08003681 	.word	0x08003681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e030      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d025      	beq.n	80036c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e022      	b.n	80036c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003688:	d11f      	bne.n	80036ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368e:	e01c      	b.n	80036ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d903      	bls.n	800369e <DMA_CheckFifoParam+0xb6>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d003      	beq.n	80036a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369c:	e018      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e015      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e00b      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036b6:	bf00      	nop
 80036b8:	e00a      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e008      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e006      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
    }
  } 
  
  return status; 
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e165      	b.n	80039c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8154 	bne.w	80039c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ae 	beq.w	80039c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_GPIO_Init+0x300>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_GPIO_Init+0x300>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b5a      	ldr	r3, [pc, #360]	; (80039e0 <HAL_GPIO_Init+0x300>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4f      	ldr	r2, [pc, #316]	; (80039e8 <HAL_GPIO_Init+0x308>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x21a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4e      	ldr	r2, [pc, #312]	; (80039ec <HAL_GPIO_Init+0x30c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x216>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_GPIO_Init+0x310>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x212>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <HAL_GPIO_Init+0x314>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x20e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_GPIO_Init+0x318>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x20a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <HAL_GPIO_Init+0x31c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x206>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a49      	ldr	r2, [pc, #292]	; (8003a00 <HAL_GPIO_Init+0x320>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x202>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00c      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00a      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003968:	4a26      	ldr	r2, [pc, #152]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_GPIO_Init+0x324>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f ae96 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e001      	b.n	8003a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a54:	e003      	b.n	8003a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	041a      	lsls	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a98:	f7fd ff74 	bl	8001984 <HAL_GetTick>
 8003a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a9e:	e009      	b.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa0:	f7fd ff70 	bl	8001984 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e01f      	b.n	8003af4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac8:	f7fd ff5c 	bl	8001984 <HAL_GetTick>
 8003acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ace:	e009      	b.n	8003ae4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ad0:	f7fd ff58 	bl	8001984 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ade:	d901      	bls.n	8003ae4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e007      	b.n	8003af4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	420e0040 	.word	0x420e0040
 8003b04:	40007000 	.word	0x40007000
 8003b08:	420e0044 	.word	0x420e0044

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fec2 	bl	8001984 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fd febe 	bl	8001984 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f855 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fe22 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	080058d0 	.word	0x080058d0
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	080058e0 	.word	0x080058e0

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	080058e0 	.word	0x080058e0

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b0ae      	sub	sp, #184	; 0xb8
 8003d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d66:	4bcb      	ldr	r3, [pc, #812]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	f200 8206 	bhi.w	8004180 <HAL_RCC_GetSysClockFreq+0x440>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08004181 	.word	0x08004181
 8003d84:	08004181 	.word	0x08004181
 8003d88:	08004181 	.word	0x08004181
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08004181 	.word	0x08004181
 8003d94:	08004181 	.word	0x08004181
 8003d98:	08004181 	.word	0x08004181
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08004181 	.word	0x08004181
 8003da4:	08004181 	.word	0x08004181
 8003da8:	08004181 	.word	0x08004181
 8003dac:	08003fb1 	.word	0x08003fb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4bb9      	ldr	r3, [pc, #740]	; (8004098 <HAL_RCC_GetSysClockFreq+0x358>)
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003db6:	e1e7      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4bb8      	ldr	r3, [pc, #736]	; (800409c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dbe:	e1e3      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4bb4      	ldr	r3, [pc, #720]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dcc:	4bb1      	ldr	r3, [pc, #708]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d071      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd8:	4bae      	ldr	r3, [pc, #696]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003de4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	0159      	lsls	r1, r3, #5
 8003e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e10:	0150      	lsls	r0, r2, #5
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4621      	mov	r1, r4
 8003e18:	1a51      	subs	r1, r2, r1
 8003e1a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e30:	4649      	mov	r1, r9
 8003e32:	018b      	lsls	r3, r1, #6
 8003e34:	4641      	mov	r1, r8
 8003e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3a:	4641      	mov	r1, r8
 8003e3c:	018a      	lsls	r2, r1, #6
 8003e3e:	4641      	mov	r1, r8
 8003e40:	1a51      	subs	r1, r2, r1
 8003e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e44:	4649      	mov	r1, r9
 8003e46:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e58:	4649      	mov	r1, r9
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4641      	mov	r1, r8
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	462b      	mov	r3, r5
 8003e74:	460a      	mov	r2, r1
 8003e76:	eb42 0303 	adc.w	r3, r2, r3
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e88:	4629      	mov	r1, r5
 8003e8a:	024b      	lsls	r3, r1, #9
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e92:	4621      	mov	r1, r4
 8003e94:	024a      	lsls	r2, r1, #9
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ea8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003eac:	f7fc fa00 	bl	80002b0 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eba:	e067      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	62b9      	str	r1, [r7, #40]	; 0x28
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f10:	4649      	mov	r1, r9
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4641      	mov	r1, r8
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4641      	mov	r1, r8
 8003f20:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f24:	4649      	mov	r1, r9
 8003f26:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f3e:	4692      	mov	sl, r2
 8003f40:	469b      	mov	fp, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb1a 0303 	adds.w	r3, sl, r3
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	028b      	lsls	r3, r1, #10
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f68:	4621      	mov	r1, r4
 8003f6a:	028a      	lsls	r2, r1, #10
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f74:	2200      	movs	r2, #0
 8003f76:	673b      	str	r3, [r7, #112]	; 0x70
 8003f78:	677a      	str	r2, [r7, #116]	; 0x74
 8003f7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f7e:	f7fc f997 	bl	80002b0 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4613      	mov	r3, r2
 8003f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	3301      	adds	r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fae:	e0eb      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d06b      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc8:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	2200      	movs	r2, #0
 8003fd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	663b      	str	r3, [r7, #96]	; 0x60
 8003fdc:	2300      	movs	r3, #0
 8003fde:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	462b      	mov	r3, r5
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	1a51      	subs	r1, r2, r1
 8004000:	61b9      	str	r1, [r7, #24]
 8004002:	4629      	mov	r1, r5
 8004004:	eb63 0301 	sbc.w	r3, r3, r1
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004016:	4659      	mov	r1, fp
 8004018:	018b      	lsls	r3, r1, #6
 800401a:	4651      	mov	r1, sl
 800401c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004020:	4651      	mov	r1, sl
 8004022:	018a      	lsls	r2, r1, #6
 8004024:	4651      	mov	r1, sl
 8004026:	ebb2 0801 	subs.w	r8, r2, r1
 800402a:	4659      	mov	r1, fp
 800402c:	eb63 0901 	sbc.w	r9, r3, r1
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004044:	4690      	mov	r8, r2
 8004046:	4699      	mov	r9, r3
 8004048:	4623      	mov	r3, r4
 800404a:	eb18 0303 	adds.w	r3, r8, r3
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	462b      	mov	r3, r5
 8004052:	eb49 0303 	adc.w	r3, r9, r3
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004064:	4629      	mov	r1, r5
 8004066:	024b      	lsls	r3, r1, #9
 8004068:	4621      	mov	r1, r4
 800406a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800406e:	4621      	mov	r1, r4
 8004070:	024a      	lsls	r2, r1, #9
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800407a:	2200      	movs	r2, #0
 800407c:	65bb      	str	r3, [r7, #88]	; 0x58
 800407e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004080:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004084:	f7fc f914 	bl	80002b0 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004092:	e065      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x420>
 8004094:	40023800 	.word	0x40023800
 8004098:	00f42400 	.word	0x00f42400
 800409c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_GetSysClockFreq+0x458>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	2200      	movs	r2, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	4611      	mov	r1, r2
 80040ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b0:	653b      	str	r3, [r7, #80]	; 0x50
 80040b2:	2300      	movs	r3, #0
 80040b4:	657b      	str	r3, [r7, #84]	; 0x54
 80040b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040ba:	4642      	mov	r2, r8
 80040bc:	464b      	mov	r3, r9
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	0159      	lsls	r1, r3, #5
 80040c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040cc:	0150      	lsls	r0, r2, #5
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4641      	mov	r1, r8
 80040d4:	1a51      	subs	r1, r2, r1
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	4649      	mov	r1, r9
 80040da:	eb63 0301 	sbc.w	r3, r3, r1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040ec:	4659      	mov	r1, fp
 80040ee:	018b      	lsls	r3, r1, #6
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f6:	4651      	mov	r1, sl
 80040f8:	018a      	lsls	r2, r1, #6
 80040fa:	4651      	mov	r1, sl
 80040fc:	1a54      	subs	r4, r2, r1
 80040fe:	4659      	mov	r1, fp
 8004100:	eb63 0501 	sbc.w	r5, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	464b      	mov	r3, r9
 8004120:	eb45 0303 	adc.w	r3, r5, r3
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004132:	4629      	mov	r1, r5
 8004134:	028b      	lsls	r3, r1, #10
 8004136:	4621      	mov	r1, r4
 8004138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800413c:	4621      	mov	r1, r4
 800413e:	028a      	lsls	r2, r1, #10
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004148:	2200      	movs	r2, #0
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
 800414c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800414e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004152:	f7fc f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4613      	mov	r3, r2
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCC_GetSysClockFreq+0x458>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0f1b      	lsrs	r3, r3, #28
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800416e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800417e:	e003      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004186:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800418c:	4618      	mov	r0, r3
 800418e:	37b8      	adds	r7, #184	; 0xb8
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400

080041a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e28d      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8083 	beq.w	80042c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041c0:	4b94      	ldr	r3, [pc, #592]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d019      	beq.n	8004200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041cc:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041d8:	4b8e      	ldr	r3, [pc, #568]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e4:	d00c      	beq.n	8004200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d112      	bne.n	8004218 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fe:	d10b      	bne.n	8004218 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05b      	beq.n	80042c4 <HAL_RCC_OscConfig+0x124>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d157      	bne.n	80042c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e25a      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d106      	bne.n	8004230 <HAL_RCC_OscConfig+0x90>
 8004222:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7b      	ldr	r2, [pc, #492]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e01d      	b.n	800426c <HAL_RCC_OscConfig+0xcc>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0xb4>
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b73      	ldr	r3, [pc, #460]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a72      	ldr	r2, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0xcc>
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6b      	ldr	r2, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fb86 	bl	8001984 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fb82 	bl	8001984 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e21f      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0xdc>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fb72 	bl	8001984 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd fb6e 	bl	8001984 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e20b      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x104>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d06f      	beq.n	80043b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d017      	beq.n	800430e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042de:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d105      	bne.n	80042f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d11c      	bne.n	800433c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_RCC_OscConfig+0x186>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e1d3      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4937      	ldr	r1, [pc, #220]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	e03a      	b.n	80043b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <HAL_RCC_OscConfig+0x278>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd fb1b 	bl	8001984 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd fb17 	bl	8001984 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1b4      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4925      	ldr	r1, [pc, #148]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x278>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd fafa 	bl	8001984 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd faf6 	bl	8001984 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e193      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d036      	beq.n	800442c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_RCC_OscConfig+0x27c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd fada 	bl	8001984 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fd fad6 	bl	8001984 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e173      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x234>
 80043f2:	e01b      	b.n	800442c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x27c>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd fac3 	bl	8001984 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004400:	e00e      	b.n	8004420 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004402:	f7fd fabf 	bl	8001984 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d907      	bls.n	8004420 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e15c      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
 8004414:	40023800 	.word	0x40023800
 8004418:	42470000 	.word	0x42470000
 800441c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	4b8a      	ldr	r3, [pc, #552]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ea      	bne.n	8004402 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8097 	beq.w	8004568 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443e:	4b83      	ldr	r3, [pc, #524]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a7e      	ldr	r2, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b7c      	ldr	r3, [pc, #496]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <HAL_RCC_OscConfig+0x4b0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x4b0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x4b0>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd fa7f 	bl	8001984 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fd fa7b 	bl	8001984 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e118      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x4b0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x31e>
 80044b0:	4b66      	ldr	r3, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a65      	ldr	r2, [pc, #404]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	e01c      	b.n	80044f8 <HAL_RCC_OscConfig+0x358>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x340>
 80044c6:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a60      	ldr	r2, [pc, #384]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
 80044d2:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a5d      	ldr	r2, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0x358>
 80044e0:	4b5a      	ldr	r3, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a59      	ldr	r2, [pc, #356]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	4b57      	ldr	r3, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4a56      	ldr	r2, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	f023 0304 	bic.w	r3, r3, #4
 80044f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fa40 	bl	8001984 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd fa3c 	bl	8001984 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0d7      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RCC_OscConfig+0x368>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fa2a 	bl	8001984 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fa26 	bl	8001984 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0c1      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454a:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ee      	bne.n	8004534 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4a3a      	ldr	r2, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80ad 	beq.w	80046cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004572:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b08      	cmp	r3, #8
 800457c:	d060      	beq.n	8004640 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d145      	bne.n	8004612 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004586:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x4b4>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd f9fa 	bl	8001984 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd f9f6 	bl	8001984 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e093      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	3b01      	subs	r3, #1
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	491b      	ldr	r1, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4b4>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd f9cb 	bl	8001984 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd f9c7 	bl	8001984 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e064      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x452>
 8004610:	e05c      	b.n	80046cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x4b4>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd f9b4 	bl	8001984 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd f9b0 	bl	8001984 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04d      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_OscConfig+0x4ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x480>
 800463e:	e045      	b.n	80046cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e040      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
 800464c:	40023800 	.word	0x40023800
 8004650:	40007000 	.word	0x40007000
 8004654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCC_OscConfig+0x538>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d030      	beq.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d129      	bne.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d122      	bne.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004690:	4293      	cmp	r3, r2
 8004692:	d119      	bne.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	3b01      	subs	r3, #1
 80046a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d10f      	bne.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800

080046dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e042      	b.n	8004774 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc ffe0 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800471e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f973 	bl	8004a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b20      	cmp	r3, #32
 800479a:	d175      	bne.n	8004888 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_UART_Transmit+0x2c>
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e06e      	b.n	800488a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ba:	f7fd f8e3 	bl	8001984 <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x6c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047f0:	e02e      	b.n	8004850 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2180      	movs	r1, #128	; 0x80
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f848 	bl	8004892 <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e03a      	b.n	800488a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cb      	bne.n	80047f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f814 	bl	8004892 <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e006      	b.n	800488a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a2:	e03b      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d037      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fd f86a 	bl	8001984 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e03a      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d020      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d01d      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d116      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f81d 	bl	8004944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2208      	movs	r2, #8
 800490e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e00f      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	d0b4      	beq.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b095      	sub	sp, #84	; 0x54
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496c:	643a      	str	r2, [r7, #64]	; 0x40
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d119      	bne.n	80049f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0310 	bic.w	r3, r3, #16
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049dc:	61ba      	str	r2, [r7, #24]
 80049de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049fe:	bf00      	nop
 8004a00:	3754      	adds	r7, #84	; 0x54
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b0c0      	sub	sp, #256	; 0x100
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	ea40 0301 	orr.w	r3, r0, r1
 8004a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a64:	f021 010c 	bic.w	r1, r1, #12
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	6999      	ldr	r1, [r3, #24]
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	ea40 0301 	orr.w	r3, r0, r1
 8004a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b8f      	ldr	r3, [pc, #572]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d005      	beq.n	8004aac <UART_SetConfig+0xa0>
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b8d      	ldr	r3, [pc, #564]	; (8004cdc <UART_SetConfig+0x2d0>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d104      	bne.n	8004ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7ff f934 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ab4:	e003      	b.n	8004abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ab6:	f7ff f91b 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8004aba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	f040 810c 	bne.w	8004ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	1891      	adds	r1, r2, r2
 8004ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aee:	4621      	mov	r1, r4
 8004af0:	eb12 0801 	adds.w	r8, r2, r1
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb43 0901 	adc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	eb49 0303 	adc.w	r3, r9, r3
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	18db      	adds	r3, r3, r3
 8004b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b40:	4613      	mov	r3, r2
 8004b42:	eb42 0303 	adc.w	r3, r2, r3
 8004b46:	657b      	str	r3, [r7, #84]	; 0x54
 8004b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b50:	f7fb fbae 	bl	80002b0 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	011c      	lsls	r4, r3, #4
 8004b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b84:	4641      	mov	r1, r8
 8004b86:	eb12 0a01 	adds.w	sl, r2, r1
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba4:	4692      	mov	sl, r2
 8004ba6:	469b      	mov	fp, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	eb1a 0303 	adds.w	r3, sl, r3
 8004bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	18db      	adds	r3, r3, r3
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	eb42 0303 	adc.w	r3, r2, r3
 8004bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004be6:	f7fb fb63 	bl	80002b0 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2264      	movs	r2, #100	; 0x64
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	1acb      	subs	r3, r1, r3
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004c08:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c14:	441c      	add	r4, r3
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c30:	415b      	adcs	r3, r3
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ca2:	f7fb fb05 	bl	80002b0 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	; 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3332      	adds	r3, #50	; 0x32
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 0207 	and.w	r2, r3, #7
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4422      	add	r2, r4
 8004cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cd4:	e106      	b.n	8004ee4 <UART_SetConfig+0x4d8>
 8004cd6:	bf00      	nop
 8004cd8:	40011000 	.word	0x40011000
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	1891      	adds	r1, r2, r2
 8004cfc:	6239      	str	r1, [r7, #32]
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d06:	4641      	mov	r1, r8
 8004d08:	1854      	adds	r4, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb43 0501 	adc.w	r5, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	00eb      	lsls	r3, r5, #3
 8004d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1e:	00e2      	lsls	r2, r4, #3
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	18e3      	adds	r3, r4, r3
 8004d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	eb45 0303 	adc.w	r3, r5, r3
 8004d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d52:	4629      	mov	r1, r5
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	008a      	lsls	r2, r1, #2
 8004d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d64:	f7fb faa4 	bl	80002b0 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	61b9      	str	r1, [r7, #24]
 8004d90:	415b      	adcs	r3, r3
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	4641      	mov	r1, r8
 8004d9a:	1851      	adds	r1, r2, r1
 8004d9c:	6139      	str	r1, [r7, #16]
 8004d9e:	4649      	mov	r1, r9
 8004da0:	414b      	adcs	r3, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db0:	4659      	mov	r1, fp
 8004db2:	00cb      	lsls	r3, r1, #3
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dba:	4651      	mov	r1, sl
 8004dbc:	00ca      	lsls	r2, r1, #3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dcc:	464b      	mov	r3, r9
 8004dce:	460a      	mov	r2, r1
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e02:	f7fb fa55 	bl	80002b0 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2264      	movs	r2, #100	; 0x64
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	1acb      	subs	r3, r1, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	; 0x32
 8004e20:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2c:	441c      	add	r4, r3
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	673b      	str	r3, [r7, #112]	; 0x70
 8004e36:	677a      	str	r2, [r7, #116]	; 0x74
 8004e38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	415b      	adcs	r3, r3
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7e:	464b      	mov	r3, r9
 8004e80:	460a      	mov	r2, r1
 8004e82:	eb42 0303 	adc.w	r3, r2, r3
 8004e86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60
 8004e92:	667a      	str	r2, [r7, #100]	; 0x64
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	008b      	lsls	r3, r1, #2
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eaa:	4641      	mov	r1, r8
 8004eac:	008a      	lsls	r2, r1, #2
 8004eae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004eb2:	f7fb f9fd 	bl	80002b0 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	3332      	adds	r3, #50	; 0x32
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4422      	add	r2, r4
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef0:	51eb851f 	.word	0x51eb851f

08004ef4 <siprintf>:
 8004ef4:	b40e      	push	{r1, r2, r3}
 8004ef6:	b500      	push	{lr}
 8004ef8:	b09c      	sub	sp, #112	; 0x70
 8004efa:	ab1d      	add	r3, sp, #116	; 0x74
 8004efc:	9002      	str	r0, [sp, #8]
 8004efe:	9006      	str	r0, [sp, #24]
 8004f00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f04:	4809      	ldr	r0, [pc, #36]	; (8004f2c <siprintf+0x38>)
 8004f06:	9107      	str	r1, [sp, #28]
 8004f08:	9104      	str	r1, [sp, #16]
 8004f0a:	4909      	ldr	r1, [pc, #36]	; (8004f30 <siprintf+0x3c>)
 8004f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f10:	9105      	str	r1, [sp, #20]
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	a902      	add	r1, sp, #8
 8004f18:	f000 f992 	bl	8005240 <_svfiprintf_r>
 8004f1c:	9b02      	ldr	r3, [sp, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	b01c      	add	sp, #112	; 0x70
 8004f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f28:	b003      	add	sp, #12
 8004f2a:	4770      	bx	lr
 8004f2c:	20000058 	.word	0x20000058
 8004f30:	ffff0208 	.word	0xffff0208

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <__errno>:
 8004f44:	4b01      	ldr	r3, [pc, #4]	; (8004f4c <__errno+0x8>)
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000058 	.word	0x20000058

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4d0d      	ldr	r5, [pc, #52]	; (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	; (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	42a6      	cmp	r6, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4d0b      	ldr	r5, [pc, #44]	; (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x44>)
 8004f64:	f000 fc6a 	bl	800583c <_init>
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	42a6      	cmp	r6, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f78:	4798      	blx	r3
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f82:	4798      	blx	r3
 8004f84:	3601      	adds	r6, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	0800592c 	.word	0x0800592c
 8004f8c:	0800592c 	.word	0x0800592c
 8004f90:	0800592c 	.word	0x0800592c
 8004f94:	08005930 	.word	0x08005930

08004f98 <__retarget_lock_acquire_recursive>:
 8004f98:	4770      	bx	lr

08004f9a <__retarget_lock_release_recursive>:
 8004f9a:	4770      	bx	lr

08004f9c <_free_r>:
 8004f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d044      	beq.n	800502c <_free_r+0x90>
 8004fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa6:	9001      	str	r0, [sp, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f1a1 0404 	sub.w	r4, r1, #4
 8004fae:	bfb8      	it	lt
 8004fb0:	18e4      	addlt	r4, r4, r3
 8004fb2:	f000 f8df 	bl	8005174 <__malloc_lock>
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <_free_r+0x94>)
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	b933      	cbnz	r3, 8004fcc <_free_r+0x30>
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	6014      	str	r4, [r2, #0]
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc8:	f000 b8da 	b.w	8005180 <__malloc_unlock>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x46>
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	1961      	adds	r1, r4, r5
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf01      	itttt	eq
 8004fd8:	6819      	ldreq	r1, [r3, #0]
 8004fda:	685b      	ldreq	r3, [r3, #4]
 8004fdc:	1949      	addeq	r1, r1, r5
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	e7ed      	b.n	8004fbe <_free_r+0x22>
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b10b      	cbz	r3, 8004fec <_free_r+0x50>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d9fa      	bls.n	8004fe2 <_free_r+0x46>
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	1855      	adds	r5, r2, r1
 8004ff0:	42a5      	cmp	r5, r4
 8004ff2:	d10b      	bne.n	800500c <_free_r+0x70>
 8004ff4:	6824      	ldr	r4, [r4, #0]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	1854      	adds	r4, r2, r1
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	d1e0      	bne.n	8004fc2 <_free_r+0x26>
 8005000:	681c      	ldr	r4, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	440c      	add	r4, r1
 8005008:	6014      	str	r4, [r2, #0]
 800500a:	e7da      	b.n	8004fc2 <_free_r+0x26>
 800500c:	d902      	bls.n	8005014 <_free_r+0x78>
 800500e:	230c      	movs	r3, #12
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	e7d6      	b.n	8004fc2 <_free_r+0x26>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf04      	itt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	bf04      	itt	eq
 8005024:	1949      	addeq	r1, r1, r5
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7ca      	b.n	8004fc2 <_free_r+0x26>
 800502c:	b003      	add	sp, #12
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	20000318 	.word	0x20000318

08005034 <sbrk_aligned>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4e0e      	ldr	r6, [pc, #56]	; (8005070 <sbrk_aligned+0x3c>)
 8005038:	460c      	mov	r4, r1
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	4605      	mov	r5, r0
 800503e:	b911      	cbnz	r1, 8005046 <sbrk_aligned+0x12>
 8005040:	f000 fba6 	bl	8005790 <_sbrk_r>
 8005044:	6030      	str	r0, [r6, #0]
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 fba1 	bl	8005790 <_sbrk_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d00a      	beq.n	8005068 <sbrk_aligned+0x34>
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d007      	beq.n	800506c <sbrk_aligned+0x38>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fb96 	bl	8005790 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d101      	bne.n	800506c <sbrk_aligned+0x38>
 8005068:	f04f 34ff 	mov.w	r4, #4294967295
 800506c:	4620      	mov	r0, r4
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	2000031c 	.word	0x2000031c

08005074 <_malloc_r>:
 8005074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005078:	1ccd      	adds	r5, r1, #3
 800507a:	f025 0503 	bic.w	r5, r5, #3
 800507e:	3508      	adds	r5, #8
 8005080:	2d0c      	cmp	r5, #12
 8005082:	bf38      	it	cc
 8005084:	250c      	movcc	r5, #12
 8005086:	2d00      	cmp	r5, #0
 8005088:	4607      	mov	r7, r0
 800508a:	db01      	blt.n	8005090 <_malloc_r+0x1c>
 800508c:	42a9      	cmp	r1, r5
 800508e:	d905      	bls.n	800509c <_malloc_r+0x28>
 8005090:	230c      	movs	r3, #12
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	2600      	movs	r6, #0
 8005096:	4630      	mov	r0, r6
 8005098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005170 <_malloc_r+0xfc>
 80050a0:	f000 f868 	bl	8005174 <__malloc_lock>
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	461c      	mov	r4, r3
 80050aa:	bb5c      	cbnz	r4, 8005104 <_malloc_r+0x90>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ffc0 	bl	8005034 <sbrk_aligned>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	4604      	mov	r4, r0
 80050b8:	d155      	bne.n	8005166 <_malloc_r+0xf2>
 80050ba:	f8d8 4000 	ldr.w	r4, [r8]
 80050be:	4626      	mov	r6, r4
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	d145      	bne.n	8005150 <_malloc_r+0xdc>
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	d048      	beq.n	800515a <_malloc_r+0xe6>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4631      	mov	r1, r6
 80050cc:	4638      	mov	r0, r7
 80050ce:	eb04 0903 	add.w	r9, r4, r3
 80050d2:	f000 fb5d 	bl	8005790 <_sbrk_r>
 80050d6:	4581      	cmp	r9, r0
 80050d8:	d13f      	bne.n	800515a <_malloc_r+0xe6>
 80050da:	6821      	ldr	r1, [r4, #0]
 80050dc:	1a6d      	subs	r5, r5, r1
 80050de:	4629      	mov	r1, r5
 80050e0:	4638      	mov	r0, r7
 80050e2:	f7ff ffa7 	bl	8005034 <sbrk_aligned>
 80050e6:	3001      	adds	r0, #1
 80050e8:	d037      	beq.n	800515a <_malloc_r+0xe6>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	442b      	add	r3, r5
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	f8d8 3000 	ldr.w	r3, [r8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d038      	beq.n	800516a <_malloc_r+0xf6>
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	42a2      	cmp	r2, r4
 80050fc:	d12b      	bne.n	8005156 <_malloc_r+0xe2>
 80050fe:	2200      	movs	r2, #0
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	e00f      	b.n	8005124 <_malloc_r+0xb0>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	1b52      	subs	r2, r2, r5
 8005108:	d41f      	bmi.n	800514a <_malloc_r+0xd6>
 800510a:	2a0b      	cmp	r2, #11
 800510c:	d917      	bls.n	800513e <_malloc_r+0xca>
 800510e:	1961      	adds	r1, r4, r5
 8005110:	42a3      	cmp	r3, r4
 8005112:	6025      	str	r5, [r4, #0]
 8005114:	bf18      	it	ne
 8005116:	6059      	strne	r1, [r3, #4]
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	bf08      	it	eq
 800511c:	f8c8 1000 	streq.w	r1, [r8]
 8005120:	5162      	str	r2, [r4, r5]
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	4638      	mov	r0, r7
 8005126:	f104 060b 	add.w	r6, r4, #11
 800512a:	f000 f829 	bl	8005180 <__malloc_unlock>
 800512e:	f026 0607 	bic.w	r6, r6, #7
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	1af2      	subs	r2, r6, r3
 8005136:	d0ae      	beq.n	8005096 <_malloc_r+0x22>
 8005138:	1b9b      	subs	r3, r3, r6
 800513a:	50a3      	str	r3, [r4, r2]
 800513c:	e7ab      	b.n	8005096 <_malloc_r+0x22>
 800513e:	42a3      	cmp	r3, r4
 8005140:	6862      	ldr	r2, [r4, #4]
 8005142:	d1dd      	bne.n	8005100 <_malloc_r+0x8c>
 8005144:	f8c8 2000 	str.w	r2, [r8]
 8005148:	e7ec      	b.n	8005124 <_malloc_r+0xb0>
 800514a:	4623      	mov	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7ac      	b.n	80050aa <_malloc_r+0x36>
 8005150:	4634      	mov	r4, r6
 8005152:	6876      	ldr	r6, [r6, #4]
 8005154:	e7b4      	b.n	80050c0 <_malloc_r+0x4c>
 8005156:	4613      	mov	r3, r2
 8005158:	e7cc      	b.n	80050f4 <_malloc_r+0x80>
 800515a:	230c      	movs	r3, #12
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4638      	mov	r0, r7
 8005160:	f000 f80e 	bl	8005180 <__malloc_unlock>
 8005164:	e797      	b.n	8005096 <_malloc_r+0x22>
 8005166:	6025      	str	r5, [r4, #0]
 8005168:	e7dc      	b.n	8005124 <_malloc_r+0xb0>
 800516a:	605b      	str	r3, [r3, #4]
 800516c:	deff      	udf	#255	; 0xff
 800516e:	bf00      	nop
 8005170:	20000318 	.word	0x20000318

08005174 <__malloc_lock>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__malloc_lock+0x8>)
 8005176:	f7ff bf0f 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 800517a:	bf00      	nop
 800517c:	20000314 	.word	0x20000314

08005180 <__malloc_unlock>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__malloc_unlock+0x8>)
 8005182:	f7ff bf0a 	b.w	8004f9a <__retarget_lock_release_recursive>
 8005186:	bf00      	nop
 8005188:	20000314 	.word	0x20000314

0800518c <__ssputs_r>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	688e      	ldr	r6, [r1, #8]
 8005192:	461f      	mov	r7, r3
 8005194:	42be      	cmp	r6, r7
 8005196:	680b      	ldr	r3, [r1, #0]
 8005198:	4682      	mov	sl, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4690      	mov	r8, r2
 800519e:	d82c      	bhi.n	80051fa <__ssputs_r+0x6e>
 80051a0:	898a      	ldrh	r2, [r1, #12]
 80051a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051a6:	d026      	beq.n	80051f6 <__ssputs_r+0x6a>
 80051a8:	6965      	ldr	r5, [r4, #20]
 80051aa:	6909      	ldr	r1, [r1, #16]
 80051ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b0:	eba3 0901 	sub.w	r9, r3, r1
 80051b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051b8:	1c7b      	adds	r3, r7, #1
 80051ba:	444b      	add	r3, r9
 80051bc:	106d      	asrs	r5, r5, #1
 80051be:	429d      	cmp	r5, r3
 80051c0:	bf38      	it	cc
 80051c2:	461d      	movcc	r5, r3
 80051c4:	0553      	lsls	r3, r2, #21
 80051c6:	d527      	bpl.n	8005218 <__ssputs_r+0x8c>
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7ff ff53 	bl	8005074 <_malloc_r>
 80051ce:	4606      	mov	r6, r0
 80051d0:	b360      	cbz	r0, 800522c <__ssputs_r+0xa0>
 80051d2:	6921      	ldr	r1, [r4, #16]
 80051d4:	464a      	mov	r2, r9
 80051d6:	f000 faeb 	bl	80057b0 <memcpy>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6126      	str	r6, [r4, #16]
 80051e8:	6165      	str	r5, [r4, #20]
 80051ea:	444e      	add	r6, r9
 80051ec:	eba5 0509 	sub.w	r5, r5, r9
 80051f0:	6026      	str	r6, [r4, #0]
 80051f2:	60a5      	str	r5, [r4, #8]
 80051f4:	463e      	mov	r6, r7
 80051f6:	42be      	cmp	r6, r7
 80051f8:	d900      	bls.n	80051fc <__ssputs_r+0x70>
 80051fa:	463e      	mov	r6, r7
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	4632      	mov	r2, r6
 8005200:	4641      	mov	r1, r8
 8005202:	f000 faab 	bl	800575c <memmove>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	1b9b      	subs	r3, r3, r6
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	4433      	add	r3, r6
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	2000      	movs	r0, #0
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	462a      	mov	r2, r5
 800521a:	f000 fad7 	bl	80057cc <_realloc_r>
 800521e:	4606      	mov	r6, r0
 8005220:	2800      	cmp	r0, #0
 8005222:	d1e0      	bne.n	80051e6 <__ssputs_r+0x5a>
 8005224:	6921      	ldr	r1, [r4, #16]
 8005226:	4650      	mov	r0, sl
 8005228:	f7ff feb8 	bl	8004f9c <_free_r>
 800522c:	230c      	movs	r3, #12
 800522e:	f8ca 3000 	str.w	r3, [sl]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	f04f 30ff 	mov.w	r0, #4294967295
 800523e:	e7e9      	b.n	8005214 <__ssputs_r+0x88>

08005240 <_svfiprintf_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4698      	mov	r8, r3
 8005246:	898b      	ldrh	r3, [r1, #12]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	b09d      	sub	sp, #116	; 0x74
 800524c:	4607      	mov	r7, r0
 800524e:	460d      	mov	r5, r1
 8005250:	4614      	mov	r4, r2
 8005252:	d50e      	bpl.n	8005272 <_svfiprintf_r+0x32>
 8005254:	690b      	ldr	r3, [r1, #16]
 8005256:	b963      	cbnz	r3, 8005272 <_svfiprintf_r+0x32>
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	f7ff ff0b 	bl	8005074 <_malloc_r>
 800525e:	6028      	str	r0, [r5, #0]
 8005260:	6128      	str	r0, [r5, #16]
 8005262:	b920      	cbnz	r0, 800526e <_svfiprintf_r+0x2e>
 8005264:	230c      	movs	r3, #12
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e0d0      	b.n	8005410 <_svfiprintf_r+0x1d0>
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	616b      	str	r3, [r5, #20]
 8005272:	2300      	movs	r3, #0
 8005274:	9309      	str	r3, [sp, #36]	; 0x24
 8005276:	2320      	movs	r3, #32
 8005278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800527c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005280:	2330      	movs	r3, #48	; 0x30
 8005282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005428 <_svfiprintf_r+0x1e8>
 8005286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528a:	f04f 0901 	mov.w	r9, #1
 800528e:	4623      	mov	r3, r4
 8005290:	469a      	mov	sl, r3
 8005292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005296:	b10a      	cbz	r2, 800529c <_svfiprintf_r+0x5c>
 8005298:	2a25      	cmp	r2, #37	; 0x25
 800529a:	d1f9      	bne.n	8005290 <_svfiprintf_r+0x50>
 800529c:	ebba 0b04 	subs.w	fp, sl, r4
 80052a0:	d00b      	beq.n	80052ba <_svfiprintf_r+0x7a>
 80052a2:	465b      	mov	r3, fp
 80052a4:	4622      	mov	r2, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7ff ff6f 	bl	800518c <__ssputs_r>
 80052ae:	3001      	adds	r0, #1
 80052b0:	f000 80a9 	beq.w	8005406 <_svfiprintf_r+0x1c6>
 80052b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b6:	445a      	add	r2, fp
 80052b8:	9209      	str	r2, [sp, #36]	; 0x24
 80052ba:	f89a 3000 	ldrb.w	r3, [sl]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80a1 	beq.w	8005406 <_svfiprintf_r+0x1c6>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ce:	f10a 0a01 	add.w	sl, sl, #1
 80052d2:	9304      	str	r3, [sp, #16]
 80052d4:	9307      	str	r3, [sp, #28]
 80052d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052da:	931a      	str	r3, [sp, #104]	; 0x68
 80052dc:	4654      	mov	r4, sl
 80052de:	2205      	movs	r2, #5
 80052e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e4:	4850      	ldr	r0, [pc, #320]	; (8005428 <_svfiprintf_r+0x1e8>)
 80052e6:	f7fa ff93 	bl	8000210 <memchr>
 80052ea:	9a04      	ldr	r2, [sp, #16]
 80052ec:	b9d8      	cbnz	r0, 8005326 <_svfiprintf_r+0xe6>
 80052ee:	06d0      	lsls	r0, r2, #27
 80052f0:	bf44      	itt	mi
 80052f2:	2320      	movmi	r3, #32
 80052f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f8:	0711      	lsls	r1, r2, #28
 80052fa:	bf44      	itt	mi
 80052fc:	232b      	movmi	r3, #43	; 0x2b
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005302:	f89a 3000 	ldrb.w	r3, [sl]
 8005306:	2b2a      	cmp	r3, #42	; 0x2a
 8005308:	d015      	beq.n	8005336 <_svfiprintf_r+0xf6>
 800530a:	9a07      	ldr	r2, [sp, #28]
 800530c:	4654      	mov	r4, sl
 800530e:	2000      	movs	r0, #0
 8005310:	f04f 0c0a 	mov.w	ip, #10
 8005314:	4621      	mov	r1, r4
 8005316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531a:	3b30      	subs	r3, #48	; 0x30
 800531c:	2b09      	cmp	r3, #9
 800531e:	d94d      	bls.n	80053bc <_svfiprintf_r+0x17c>
 8005320:	b1b0      	cbz	r0, 8005350 <_svfiprintf_r+0x110>
 8005322:	9207      	str	r2, [sp, #28]
 8005324:	e014      	b.n	8005350 <_svfiprintf_r+0x110>
 8005326:	eba0 0308 	sub.w	r3, r0, r8
 800532a:	fa09 f303 	lsl.w	r3, r9, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	46a2      	mov	sl, r4
 8005334:	e7d2      	b.n	80052dc <_svfiprintf_r+0x9c>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	1d19      	adds	r1, r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	9103      	str	r1, [sp, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	bfbb      	ittet	lt
 8005342:	425b      	neglt	r3, r3
 8005344:	f042 0202 	orrlt.w	r2, r2, #2
 8005348:	9307      	strge	r3, [sp, #28]
 800534a:	9307      	strlt	r3, [sp, #28]
 800534c:	bfb8      	it	lt
 800534e:	9204      	strlt	r2, [sp, #16]
 8005350:	7823      	ldrb	r3, [r4, #0]
 8005352:	2b2e      	cmp	r3, #46	; 0x2e
 8005354:	d10c      	bne.n	8005370 <_svfiprintf_r+0x130>
 8005356:	7863      	ldrb	r3, [r4, #1]
 8005358:	2b2a      	cmp	r3, #42	; 0x2a
 800535a:	d134      	bne.n	80053c6 <_svfiprintf_r+0x186>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9203      	str	r2, [sp, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfb8      	it	lt
 8005368:	f04f 33ff 	movlt.w	r3, #4294967295
 800536c:	3402      	adds	r4, #2
 800536e:	9305      	str	r3, [sp, #20]
 8005370:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005438 <_svfiprintf_r+0x1f8>
 8005374:	7821      	ldrb	r1, [r4, #0]
 8005376:	2203      	movs	r2, #3
 8005378:	4650      	mov	r0, sl
 800537a:	f7fa ff49 	bl	8000210 <memchr>
 800537e:	b138      	cbz	r0, 8005390 <_svfiprintf_r+0x150>
 8005380:	9b04      	ldr	r3, [sp, #16]
 8005382:	eba0 000a 	sub.w	r0, r0, sl
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	4082      	lsls	r2, r0
 800538a:	4313      	orrs	r3, r2
 800538c:	3401      	adds	r4, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005394:	4825      	ldr	r0, [pc, #148]	; (800542c <_svfiprintf_r+0x1ec>)
 8005396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800539a:	2206      	movs	r2, #6
 800539c:	f7fa ff38 	bl	8000210 <memchr>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d038      	beq.n	8005416 <_svfiprintf_r+0x1d6>
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <_svfiprintf_r+0x1f0>)
 80053a6:	bb1b      	cbnz	r3, 80053f0 <_svfiprintf_r+0x1b0>
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	3307      	adds	r3, #7
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	3308      	adds	r3, #8
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b6:	4433      	add	r3, r6
 80053b8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ba:	e768      	b.n	800528e <_svfiprintf_r+0x4e>
 80053bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c0:	460c      	mov	r4, r1
 80053c2:	2001      	movs	r0, #1
 80053c4:	e7a6      	b.n	8005314 <_svfiprintf_r+0xd4>
 80053c6:	2300      	movs	r3, #0
 80053c8:	3401      	adds	r4, #1
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f04f 0c0a 	mov.w	ip, #10
 80053d2:	4620      	mov	r0, r4
 80053d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d8:	3a30      	subs	r2, #48	; 0x30
 80053da:	2a09      	cmp	r2, #9
 80053dc:	d903      	bls.n	80053e6 <_svfiprintf_r+0x1a6>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0c6      	beq.n	8005370 <_svfiprintf_r+0x130>
 80053e2:	9105      	str	r1, [sp, #20]
 80053e4:	e7c4      	b.n	8005370 <_svfiprintf_r+0x130>
 80053e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ea:	4604      	mov	r4, r0
 80053ec:	2301      	movs	r3, #1
 80053ee:	e7f0      	b.n	80053d2 <_svfiprintf_r+0x192>
 80053f0:	ab03      	add	r3, sp, #12
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	462a      	mov	r2, r5
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <_svfiprintf_r+0x1f4>)
 80053f8:	a904      	add	r1, sp, #16
 80053fa:	4638      	mov	r0, r7
 80053fc:	f3af 8000 	nop.w
 8005400:	1c42      	adds	r2, r0, #1
 8005402:	4606      	mov	r6, r0
 8005404:	d1d6      	bne.n	80053b4 <_svfiprintf_r+0x174>
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	065b      	lsls	r3, r3, #25
 800540a:	f53f af2d 	bmi.w	8005268 <_svfiprintf_r+0x28>
 800540e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005410:	b01d      	add	sp, #116	; 0x74
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <_svfiprintf_r+0x1f4>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4638      	mov	r0, r7
 8005422:	f000 f879 	bl	8005518 <_printf_i>
 8005426:	e7eb      	b.n	8005400 <_svfiprintf_r+0x1c0>
 8005428:	080058f0 	.word	0x080058f0
 800542c:	080058fa 	.word	0x080058fa
 8005430:	00000000 	.word	0x00000000
 8005434:	0800518d 	.word	0x0800518d
 8005438:	080058f6 	.word	0x080058f6

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4699      	mov	r9, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005488:	1e13      	subs	r3, r2, #0
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005498:	4649      	mov	r1, r9
 800549a:	4638      	mov	r0, r7
 800549c:	47c0      	blx	r8
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf02      	ittt	eq
 80054ae:	68e5      	ldreq	r5, [r4, #12]
 80054b0:	6833      	ldreq	r3, [r6, #0]
 80054b2:	1aed      	subeq	r5, r5, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4649      	mov	r1, r9
 80054d8:	4638      	mov	r0, r7
 80054da:	47c0      	blx	r8
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	; 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4649      	mov	r1, r9
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005520:	2f78      	cmp	r7, #120	; 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	; 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d4 	beq.w	80056e2 <_printf_i+0x1ca>
 800553a:	2f58      	cmp	r7, #88	; 0x58
 800553c:	f000 80c0 	beq.w	80056c0 <_printf_i+0x1a8>
 8005540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	; (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056c9 	.word	0x080056c9
 8005588:	080055f1 	.word	0x080055f1
 800558c:	08005683 	.word	0x08005683
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056eb 	.word	0x080056eb
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	0800568b 	.word	0x0800568b
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	602a      	str	r2, [r5, #0]
 80055b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e09f      	b.n	8005704 <_printf_i+0x1ec>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	0607      	lsls	r7, r0, #24
 80055ca:	f103 0104 	add.w	r1, r3, #4
 80055ce:	6029      	str	r1, [r5, #0]
 80055d0:	d501      	bpl.n	80055d6 <_printf_i+0xbe>
 80055d2:	681e      	ldr	r6, [r3, #0]
 80055d4:	e003      	b.n	80055de <_printf_i+0xc6>
 80055d6:	0646      	lsls	r6, r0, #25
 80055d8:	d5fb      	bpl.n	80055d2 <_printf_i+0xba>
 80055da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055de:	2e00      	cmp	r6, #0
 80055e0:	da03      	bge.n	80055ea <_printf_i+0xd2>
 80055e2:	232d      	movs	r3, #45	; 0x2d
 80055e4:	4276      	negs	r6, r6
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	485a      	ldr	r0, [pc, #360]	; (8005754 <_printf_i+0x23c>)
 80055ec:	230a      	movs	r3, #10
 80055ee:	e012      	b.n	8005616 <_printf_i+0xfe>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	1d19      	adds	r1, r3, #4
 80055f6:	6029      	str	r1, [r5, #0]
 80055f8:	0605      	lsls	r5, r0, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0xe8>
 80055fc:	681e      	ldr	r6, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0xee>
 8005600:	0641      	lsls	r1, r0, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0xe4>
 8005604:	881e      	ldrh	r6, [r3, #0]
 8005606:	4853      	ldr	r0, [pc, #332]	; (8005754 <_printf_i+0x23c>)
 8005608:	2f6f      	cmp	r7, #111	; 0x6f
 800560a:	bf0c      	ite	eq
 800560c:	2308      	moveq	r3, #8
 800560e:	230a      	movne	r3, #10
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005616:	6865      	ldr	r5, [r4, #4]
 8005618:	60a5      	str	r5, [r4, #8]
 800561a:	2d00      	cmp	r5, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90e      	cbnz	r6, 800562c <_printf_i+0x114>
 8005628:	2d00      	cmp	r5, #0
 800562a:	d04b      	beq.n	80056c4 <_printf_i+0x1ac>
 800562c:	4615      	mov	r5, r2
 800562e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005632:	fb03 6711 	mls	r7, r3, r1, r6
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800563c:	4637      	mov	r7, r6
 800563e:	42bb      	cmp	r3, r7
 8005640:	460e      	mov	r6, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x116>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x148>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07de      	lsls	r6, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x148>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	; 0x30
 8005658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800565c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005660:	1b52      	subs	r2, r2, r5
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee4 	bl	800543c <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14a      	bne.n	800570e <_printf_i+0x1f6>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	4833      	ldr	r0, [pc, #204]	; (8005758 <_printf_i+0x240>)
 800568c:	2778      	movs	r7, #120	; 0x78
 800568e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	6829      	ldr	r1, [r5, #0]
 8005696:	061f      	lsls	r7, r3, #24
 8005698:	f851 6b04 	ldr.w	r6, [r1], #4
 800569c:	d402      	bmi.n	80056a4 <_printf_i+0x18c>
 800569e:	065f      	lsls	r7, r3, #25
 80056a0:	bf48      	it	mi
 80056a2:	b2b6      	uxthmi	r6, r6
 80056a4:	07df      	lsls	r7, r3, #31
 80056a6:	bf48      	it	mi
 80056a8:	f043 0320 	orrmi.w	r3, r3, #32
 80056ac:	6029      	str	r1, [r5, #0]
 80056ae:	bf48      	it	mi
 80056b0:	6023      	strmi	r3, [r4, #0]
 80056b2:	b91e      	cbnz	r6, 80056bc <_printf_i+0x1a4>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	2310      	movs	r3, #16
 80056be:	e7a7      	b.n	8005610 <_printf_i+0xf8>
 80056c0:	4824      	ldr	r0, [pc, #144]	; (8005754 <_printf_i+0x23c>)
 80056c2:	e7e4      	b.n	800568e <_printf_i+0x176>
 80056c4:	4615      	mov	r5, r2
 80056c6:	e7bd      	b.n	8005644 <_printf_i+0x12c>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	6826      	ldr	r6, [r4, #0]
 80056cc:	6961      	ldr	r1, [r4, #20]
 80056ce:	1d18      	adds	r0, r3, #4
 80056d0:	6028      	str	r0, [r5, #0]
 80056d2:	0635      	lsls	r5, r6, #24
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0x1c4>
 80056d8:	6019      	str	r1, [r3, #0]
 80056da:	e002      	b.n	80056e2 <_printf_i+0x1ca>
 80056dc:	0670      	lsls	r0, r6, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0x1c0>
 80056e0:	8019      	strh	r1, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	4615      	mov	r5, r2
 80056e8:	e7bc      	b.n	8005664 <_printf_i+0x14c>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	602a      	str	r2, [r5, #0]
 80056f0:	681d      	ldr	r5, [r3, #0]
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fa fd8a 	bl	8000210 <memchr>
 80056fc:	b108      	cbz	r0, 8005702 <_printf_i+0x1ea>
 80056fe:	1b40      	subs	r0, r0, r5
 8005700:	6060      	str	r0, [r4, #4]
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	2300      	movs	r3, #0
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570c:	e7aa      	b.n	8005664 <_printf_i+0x14c>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	462a      	mov	r2, r5
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d0ad      	beq.n	8005678 <_printf_i+0x160>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	079b      	lsls	r3, r3, #30
 8005720:	d413      	bmi.n	800574a <_printf_i+0x232>
 8005722:	68e0      	ldr	r0, [r4, #12]
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	4298      	cmp	r0, r3
 8005728:	bfb8      	it	lt
 800572a:	4618      	movlt	r0, r3
 800572c:	e7a6      	b.n	800567c <_printf_i+0x164>
 800572e:	2301      	movs	r3, #1
 8005730:	4632      	mov	r2, r6
 8005732:	4649      	mov	r1, r9
 8005734:	4640      	mov	r0, r8
 8005736:	47d0      	blx	sl
 8005738:	3001      	adds	r0, #1
 800573a:	d09d      	beq.n	8005678 <_printf_i+0x160>
 800573c:	3501      	adds	r5, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	9903      	ldr	r1, [sp, #12]
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	42ab      	cmp	r3, r5
 8005746:	dcf2      	bgt.n	800572e <_printf_i+0x216>
 8005748:	e7eb      	b.n	8005722 <_printf_i+0x20a>
 800574a:	2500      	movs	r5, #0
 800574c:	f104 0619 	add.w	r6, r4, #25
 8005750:	e7f5      	b.n	800573e <_printf_i+0x226>
 8005752:	bf00      	nop
 8005754:	08005901 	.word	0x08005901
 8005758:	08005912 	.word	0x08005912

0800575c <memmove>:
 800575c:	4288      	cmp	r0, r1
 800575e:	b510      	push	{r4, lr}
 8005760:	eb01 0402 	add.w	r4, r1, r2
 8005764:	d902      	bls.n	800576c <memmove+0x10>
 8005766:	4284      	cmp	r4, r0
 8005768:	4623      	mov	r3, r4
 800576a:	d807      	bhi.n	800577c <memmove+0x20>
 800576c:	1e43      	subs	r3, r0, #1
 800576e:	42a1      	cmp	r1, r4
 8005770:	d008      	beq.n	8005784 <memmove+0x28>
 8005772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800577a:	e7f8      	b.n	800576e <memmove+0x12>
 800577c:	4402      	add	r2, r0
 800577e:	4601      	mov	r1, r0
 8005780:	428a      	cmp	r2, r1
 8005782:	d100      	bne.n	8005786 <memmove+0x2a>
 8005784:	bd10      	pop	{r4, pc}
 8005786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800578a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800578e:	e7f7      	b.n	8005780 <memmove+0x24>

08005790 <_sbrk_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d06      	ldr	r5, [pc, #24]	; (80057ac <_sbrk_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fc f81a 	bl	80017d4 <_sbrk>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_sbrk_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_sbrk_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000310 	.word	0x20000310

080057b0 <memcpy>:
 80057b0:	440a      	add	r2, r1
 80057b2:	4291      	cmp	r1, r2
 80057b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b8:	d100      	bne.n	80057bc <memcpy+0xc>
 80057ba:	4770      	bx	lr
 80057bc:	b510      	push	{r4, lr}
 80057be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c6:	4291      	cmp	r1, r2
 80057c8:	d1f9      	bne.n	80057be <memcpy+0xe>
 80057ca:	bd10      	pop	{r4, pc}

080057cc <_realloc_r>:
 80057cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d0:	4680      	mov	r8, r0
 80057d2:	4614      	mov	r4, r2
 80057d4:	460e      	mov	r6, r1
 80057d6:	b921      	cbnz	r1, 80057e2 <_realloc_r+0x16>
 80057d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057dc:	4611      	mov	r1, r2
 80057de:	f7ff bc49 	b.w	8005074 <_malloc_r>
 80057e2:	b92a      	cbnz	r2, 80057f0 <_realloc_r+0x24>
 80057e4:	f7ff fbda 	bl	8004f9c <_free_r>
 80057e8:	4625      	mov	r5, r4
 80057ea:	4628      	mov	r0, r5
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	f000 f81b 	bl	800582a <_malloc_usable_size_r>
 80057f4:	4284      	cmp	r4, r0
 80057f6:	4607      	mov	r7, r0
 80057f8:	d802      	bhi.n	8005800 <_realloc_r+0x34>
 80057fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057fe:	d812      	bhi.n	8005826 <_realloc_r+0x5a>
 8005800:	4621      	mov	r1, r4
 8005802:	4640      	mov	r0, r8
 8005804:	f7ff fc36 	bl	8005074 <_malloc_r>
 8005808:	4605      	mov	r5, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d0ed      	beq.n	80057ea <_realloc_r+0x1e>
 800580e:	42bc      	cmp	r4, r7
 8005810:	4622      	mov	r2, r4
 8005812:	4631      	mov	r1, r6
 8005814:	bf28      	it	cs
 8005816:	463a      	movcs	r2, r7
 8005818:	f7ff ffca 	bl	80057b0 <memcpy>
 800581c:	4631      	mov	r1, r6
 800581e:	4640      	mov	r0, r8
 8005820:	f7ff fbbc 	bl	8004f9c <_free_r>
 8005824:	e7e1      	b.n	80057ea <_realloc_r+0x1e>
 8005826:	4635      	mov	r5, r6
 8005828:	e7df      	b.n	80057ea <_realloc_r+0x1e>

0800582a <_malloc_usable_size_r>:
 800582a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582e:	1f18      	subs	r0, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	bfbc      	itt	lt
 8005834:	580b      	ldrlt	r3, [r1, r0]
 8005836:	18c0      	addlt	r0, r0, r3
 8005838:	4770      	bx	lr
	...

0800583c <_init>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr

08005848 <_fini>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr
