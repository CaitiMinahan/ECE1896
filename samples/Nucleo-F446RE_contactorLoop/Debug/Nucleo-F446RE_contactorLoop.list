
Nucleo-F446RE_contactorLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f4  080057f4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08005858  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005858  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb4a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002135  00000000  00000000  0002cc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f5a  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da2f  00000000  00000000  00052eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8204  00000000  00000000  000608d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e78  00000000  00000000  00138ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0013b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005724 	.word	0x08005724

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005724 	.word	0x08005724

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <getCellFaults>:
} CellFault;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint16_t getCellFaults(Cell* cell){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    uint16_t result = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	81fb      	strh	r3, [r7, #14]

    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	031b      	lsls	r3, r3, #12
 80005be:	b21a      	sxth	r2, r3
 80005c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	81fb      	strh	r3, [r7, #14]
    result |= (cell->cell & 0x0F) << 8;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21b      	sxth	r3, r3
 80005e0:	81fb      	strh	r3, [r7, #14]

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7f1b      	ldrb	r3, [r3, #28]
 80005e6:	01db      	lsls	r3, r3, #7
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->comm & 0x01) << 6;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7f5b      	ldrb	r3, [r3, #29]
 80005fc:	019b      	lsls	r3, r3, #6
 80005fe:	b21b      	sxth	r3, r3
 8000600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000604:	b21a      	sxth	r2, r3
 8000606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_voltage & 0x01) << 5;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7f9b      	ldrb	r3, [r3, #30]
 8000614:	015b      	lsls	r3, r3, #5
 8000616:	b21b      	sxth	r3, r3
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	b21a      	sxth	r2, r3
 800061e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_voltage & 0x01) << 4;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7fdb      	ldrb	r3, [r3, #31]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	b21b      	sxth	r3, r3
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	b21a      	sxth	r2, r3
 8000636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800063a:	4313      	orrs	r3, r2
 800063c:	b21b      	sxth	r3, r3
 800063e:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_temp & 0x01) << 3;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	b21b      	sxth	r3, r3
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	b21a      	sxth	r2, r3
 8000650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_temp & 0x01) << 2;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	b21b      	sxth	r3, r3
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	b21a      	sxth	r2, r3
 800066a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_current & 0x01) << 1;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b21b      	sxth	r3, r3
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_current & 0x01);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000694:	b21b      	sxth	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b21a      	sxth	r2, r3
 800069c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	81fb      	strh	r3, [r7, #14]

    return result;
 80006a6:	89fb      	ldrh	r3, [r7, #14]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <setCellFaults>:

void setCellFaults(Cell* cell, CellFault value) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    // Extract the boolean values
    if (value & POWER_RAIL_FAULT) cell->power_rail = true;
 80006c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da02      	bge.n	80006ce <setCellFaults+0x1a>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	771a      	strb	r2, [r3, #28]
    if (value & COMM_FAULT) cell->comm = true;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <setCellFaults+0x2a>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	775a      	strb	r2, [r3, #29]
    if (value & OVER_VOLTAGE_FAULT) cell->over_voltage = true;
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <setCellFaults+0x3a>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	779a      	strb	r2, [r3, #30]
    if (value & UNDER_VOLTAGE_FAULT) cell->under_voltage = true;
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <setCellFaults+0x4a>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	77da      	strb	r2, [r3, #31]
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <setCellFaults+0x5c>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
    if (value & UNDER_TEMP_FAULT) cell->under_temp = true;
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <setCellFaults+0x6e>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <setCellFaults+0x80>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    if (value & UNDER_CURRENT_FAULT) cell->under_current = true;
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <setCellFaults+0x92>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <clearCellFault>:

void clearCellFault(Cell* cell, CellFault fault) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
    // Clear the corresponding fault
    switch (fault) {
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b80      	cmp	r3, #128	; 0x80
 8000764:	d04f      	beq.n	8000806 <clearCellFault+0xb2>
 8000766:	2b80      	cmp	r3, #128	; 0x80
 8000768:	dc71      	bgt.n	800084e <clearCellFault+0xfa>
 800076a:	2b20      	cmp	r3, #32
 800076c:	dc48      	bgt.n	8000800 <clearCellFault+0xac>
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd6d      	ble.n	800084e <clearCellFault+0xfa>
 8000772:	3b01      	subs	r3, #1
 8000774:	2b1f      	cmp	r3, #31
 8000776:	d86a      	bhi.n	800084e <clearCellFault+0xfa>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <clearCellFault+0x2c>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000845 	.word	0x08000845
 8000784:	0800083b 	.word	0x0800083b
 8000788:	0800084f 	.word	0x0800084f
 800078c:	08000831 	.word	0x08000831
 8000790:	0800084f 	.word	0x0800084f
 8000794:	0800084f 	.word	0x0800084f
 8000798:	0800084f 	.word	0x0800084f
 800079c:	08000827 	.word	0x08000827
 80007a0:	0800084f 	.word	0x0800084f
 80007a4:	0800084f 	.word	0x0800084f
 80007a8:	0800084f 	.word	0x0800084f
 80007ac:	0800084f 	.word	0x0800084f
 80007b0:	0800084f 	.word	0x0800084f
 80007b4:	0800084f 	.word	0x0800084f
 80007b8:	0800084f 	.word	0x0800084f
 80007bc:	0800081f 	.word	0x0800081f
 80007c0:	0800084f 	.word	0x0800084f
 80007c4:	0800084f 	.word	0x0800084f
 80007c8:	0800084f 	.word	0x0800084f
 80007cc:	0800084f 	.word	0x0800084f
 80007d0:	0800084f 	.word	0x0800084f
 80007d4:	0800084f 	.word	0x0800084f
 80007d8:	0800084f 	.word	0x0800084f
 80007dc:	0800084f 	.word	0x0800084f
 80007e0:	0800084f 	.word	0x0800084f
 80007e4:	0800084f 	.word	0x0800084f
 80007e8:	0800084f 	.word	0x0800084f
 80007ec:	0800084f 	.word	0x0800084f
 80007f0:	0800084f 	.word	0x0800084f
 80007f4:	0800084f 	.word	0x0800084f
 80007f8:	0800084f 	.word	0x0800084f
 80007fc:	08000817 	.word	0x08000817
 8000800:	2b40      	cmp	r3, #64	; 0x40
 8000802:	d004      	beq.n	800080e <clearCellFault+0xba>
            break;
        case UNDER_CURRENT_FAULT:
            cell->under_current = false;
            break;
    }
}
 8000804:	e023      	b.n	800084e <clearCellFault+0xfa>
            cell->power_rail = false;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	771a      	strb	r2, [r3, #28]
            break;
 800080c:	e01f      	b.n	800084e <clearCellFault+0xfa>
            cell->comm = false;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
            break;
 8000814:	e01b      	b.n	800084e <clearCellFault+0xfa>
            cell->over_voltage = false;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	779a      	strb	r2, [r3, #30]
            break;
 800081c:	e017      	b.n	800084e <clearCellFault+0xfa>
            cell->under_voltage = false;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	77da      	strb	r2, [r3, #31]
            break;
 8000824:	e013      	b.n	800084e <clearCellFault+0xfa>
            cell->over_temp = false;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 800082e:	e00e      	b.n	800084e <clearCellFault+0xfa>
            cell->under_temp = false;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8000838:	e009      	b.n	800084e <clearCellFault+0xfa>
            cell->over_current = false;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            break;
 8000842:	e004      	b.n	800084e <clearCellFault+0xfa>
            cell->under_current = false;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            break;
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <startupSequence>:
float cell_voltage; 	  	 // Measurement for checkVIT
float cell_current; 	  	 // Calculated current from checkVIT
float thermistor_resistance; // Calculated unknown resistance from checkVIT
float cell_vref; 			 // measurement voltage for vref

int startupSequence(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
	//
	// Negative Contactor Enable
	//

	// Send high Signal to NEG_LSD_OUTPUT
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4884      	ldr	r0, [pc, #528]	; (8000a7c <startupSequence+0x220>)
 800086a:	f003 f859 	bl	8003920 <HAL_GPIO_WritePin>

	// Read NEG_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	4882      	ldr	r0, [pc, #520]	; (8000a7c <startupSequence+0x220>)
 8000874:	f003 f83c 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <startupSequence+0x28>
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e0f6      	b.n	8000a72 <startupSequence+0x216>


	// Send high Signal to NEG_HSD_OUTPUT
	HAL_GPIO_WritePin(NEG_HSD_OUTPUT_GPIO, NEG_HSD_OUTPUT_PIN, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088a:	487d      	ldr	r0, [pc, #500]	; (8000a80 <startupSequence+0x224>)
 800088c:	f003 f848 	bl	8003920 <HAL_GPIO_WritePin>

	// Read NEG_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4879      	ldr	r0, [pc, #484]	; (8000a7c <startupSequence+0x220>)
 8000896:	f003 f82b 	bl	80038f0 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <startupSequence+0x4a>
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	e0e5      	b.n	8000a72 <startupSequence+0x216>

	// Read NEG_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(NEG_CON_INPUT_GPIO, NEG_CON_INPUT_PIN)){ return -1; }
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4876      	ldr	r0, [pc, #472]	; (8000a84 <startupSequence+0x228>)
 80008ac:	f003 f820 	bl	80038f0 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <startupSequence+0x60>
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e0da      	b.n	8000a72 <startupSequence+0x216>
	//
	// Pre Charge Contactor Enable
	//

	// Send high Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	486e      	ldr	r0, [pc, #440]	; (8000a7c <startupSequence+0x220>)
 80008c4:	f003 f82c 	bl	8003920 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 80008c8:	2104      	movs	r1, #4
 80008ca:	486f      	ldr	r0, [pc, #444]	; (8000a88 <startupSequence+0x22c>)
 80008cc:	f003 f810 	bl	80038f0 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <startupSequence+0x80>
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e0ca      	b.n	8000a72 <startupSequence+0x216>

	// Send high Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	4867      	ldr	r0, [pc, #412]	; (8000a80 <startupSequence+0x224>)
 80008e2:	f003 f81d 	bl	8003920 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80008e6:	2110      	movs	r1, #16
 80008e8:	4865      	ldr	r0, [pc, #404]	; (8000a80 <startupSequence+0x224>)
 80008ea:	f003 f801 	bl	80038f0 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <startupSequence+0x9e>
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	e0bb      	b.n	8000a72 <startupSequence+0x216>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	485f      	ldr	r0, [pc, #380]	; (8000a7c <startupSequence+0x220>)
 8000900:	f002 fff6 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d054      	beq.n	80009b4 <startupSequence+0x158>
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e0b0      	b.n	8000a72 <startupSequence+0x216>

	// Read voltage at ANALOG_INPUT
		// If 90% of pack voltage after time t proceed, else EPO/return -1
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
		    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8000910:	2203      	movs	r2, #3
 8000912:	495e      	ldr	r1, [pc, #376]	; (8000a8c <startupSequence+0x230>)
 8000914:	485e      	ldr	r0, [pc, #376]	; (8000a90 <startupSequence+0x234>)
 8000916:	f001 f8a7 	bl	8001a68 <HAL_ADC_Start_DMA>
		    HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 800091a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800091e:	485c      	ldr	r0, [pc, #368]	; (8000a90 <startupSequence+0x234>)
 8000920:	f001 f817 	bl	8001952 <HAL_ADC_PollForConversion>
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 8000924:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <startupSequence+0x230>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000930:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000a94 <startupSequence+0x238>
 8000934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <startupSequence+0x23c>)
 800093a:	edc3 7a00 	vstr	s15, [r3]

		    // Convert the integer part to a hexadecimal string
		    uint16_t intPart = (uint16_t)pre_charge_voltage;
 800093e:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <startupSequence+0x23c>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000948:	ee17 3a90 	vmov	r3, s15
 800094c:	82fb      	strh	r3, [r7, #22]
		    char IntPartStr[3];
		    sprintf(IntPartStr, "%02X", intPart);
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4951      	ldr	r1, [pc, #324]	; (8000a9c <startupSequence+0x240>)
 8000956:	4618      	mov	r0, r3
 8000958:	f004 fa40 	bl	8004ddc <siprintf>

		    // Convert the fractional part to a hexadecimal string
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 800095c:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <startupSequence+0x23c>)
 800095e:	ed93 7a00 	vldr	s14, [r3]
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000970:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000aa0 <startupSequence+0x244>
 8000974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	82bb      	strh	r3, [r7, #20]
		    char FracPartStr[3];
		    sprintf(FracPartStr, "%02X", fracPart);
 8000982:	8aba      	ldrh	r2, [r7, #20]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4944      	ldr	r1, [pc, #272]	; (8000a9c <startupSequence+0x240>)
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fa26 	bl	8004ddc <siprintf>

		    // Write to UART Over Temp Fault in the desired format
		    char ResultStr[8];
		    sprintf(ResultStr, "%s.%s\r\n", IntPartStr, FracPartStr);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	1d38      	adds	r0, r7, #4
 800099a:	4942      	ldr	r1, [pc, #264]	; (8000aa4 <startupSequence+0x248>)
 800099c:	f004 fa1e 	bl	8004ddc <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 80009a0:	1d39      	adds	r1, r7, #4
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2208      	movs	r2, #8
 80009a6:	4840      	ldr	r0, [pc, #256]	; (8000aa8 <startupSequence+0x24c>)
 80009a8:	f003 fe5c 	bl	8004664 <HAL_UART_Transmit>


		    // Delay for debug
		    HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f000 ff68 	bl	8001884 <HAL_Delay>
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 80009b4:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8000aac <startupSequence+0x250>
 80009b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <startupSequence+0x23c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	dca1      	bgt.n	8000910 <startupSequence+0xb4>
	//
	// Positive Contactor Enable
	//

	// Send high Signal to POS_LSD_OUTPUT
	HAL_GPIO_WritePin(POS_LSD_OUTPUT_GPIO, POS_LSD_OUTPUT_PIN, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	482b      	ldr	r0, [pc, #172]	; (8000a80 <startupSequence+0x224>)
 80009d2:	f002 ffa5 	bl	8003920 <HAL_GPIO_WritePin>

	// Read POS_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_LSD_INPUT_GPIO, POS_LSD_INPUT_PIN)){ return -1; }
 80009d6:	2102      	movs	r1, #2
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <startupSequence+0x220>)
 80009da:	f002 ff89 	bl	80038f0 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <startupSequence+0x18e>
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e043      	b.n	8000a72 <startupSequence+0x216>

	// Send high Signal to POS_HSD_OUTPUT
	HAL_GPIO_WritePin(POS_HSD_OUTPUT_GPIO, POS_HSD_OUTPUT_PIN, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2108      	movs	r1, #8
 80009ee:	4823      	ldr	r0, [pc, #140]	; (8000a7c <startupSequence+0x220>)
 80009f0:	f002 ff96 	bl	8003920 <HAL_GPIO_WritePin>

	// Read POS_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_HSD_INPUT_GPIO, POS_HSD_INPUT_PIN)){ return -1; }
 80009f4:	2104      	movs	r1, #4
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <startupSequence+0x220>)
 80009f8:	f002 ff7a 	bl	80038f0 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <startupSequence+0x1ac>
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e034      	b.n	8000a72 <startupSequence+0x216>

	// Read POS_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(POS_CON_INPUT_GPIO, POS_CON_INPUT_PIN)){ return -1; }
 8000a08:	2101      	movs	r1, #1
 8000a0a:	481c      	ldr	r0, [pc, #112]	; (8000a7c <startupSequence+0x220>)
 8000a0c:	f002 ff70 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <startupSequence+0x1c0>
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e02a      	b.n	8000a72 <startupSequence+0x216>
	//
	// Pre Charge Contactor Disable
	//

	// Send low Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <startupSequence+0x224>)
 8000a22:	f002 ff7d 	bl	8003920 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 8000a26:	2110      	movs	r1, #16
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <startupSequence+0x224>)
 8000a2a:	f002 ff61 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <startupSequence+0x1de>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e01b      	b.n	8000a72 <startupSequence+0x216>

	// Send low Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <startupSequence+0x220>)
 8000a42:	f002 ff6d 	bl	8003920 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 8000a46:	2104      	movs	r1, #4
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <startupSequence+0x22c>)
 8000a4a:	f002 ff51 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <startupSequence+0x1fe>
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	e00b      	b.n	8000a72 <startupSequence+0x216>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 8000a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <startupSequence+0x220>)
 8000a60:	f002 ff46 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <startupSequence+0x214>
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e000      	b.n	8000a72 <startupSequence+0x216>

	// Start-up Sequence Concluded Successfully
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	200001ac 	.word	0x200001ac
 8000a90:	20000078 	.word	0x20000078
 8000a94:	447a0000 	.word	0x447a0000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	0800573c 	.word	0x0800573c
 8000aa0:	42c80000 	.word	0x42c80000
 8000aa4:	08005744 	.word	0x08005744
 8000aa8:	20000148 	.word	0x20000148
 8000aac:	00000003 	.word	0x00000003

08000ab0 <checkVITF>:

void checkVITF(Cell* cell){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b092      	sub	sp, #72	; 0x48
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]

	// append id, mod and cell number to sensor reading
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8000ab8:	2203      	movs	r2, #3
 8000aba:	499a      	ldr	r1, [pc, #616]	; (8000d24 <checkVITF+0x274>)
 8000abc:	489a      	ldr	r0, [pc, #616]	; (8000d28 <checkVITF+0x278>)
 8000abe:	f000 ffd3 	bl	8001a68 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 8000ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac6:	4898      	ldr	r0, [pc, #608]	; (8000d28 <checkVITF+0x278>)
 8000ac8:	f000 ff43 	bl	8001952 <HAL_ADC_PollForConversion>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8000acc:	4b95      	ldr	r3, [pc, #596]	; (8000d24 <checkVITF+0x274>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ad8:	eddf 6a94 	vldr	s13, [pc, #592]	; 8000d2c <checkVITF+0x27c>
 8000adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae0:	4b93      	ldr	r3, [pc, #588]	; (8000d30 <checkVITF+0x280>)
 8000ae2:	edc3 7a00 	vstr	s15, [r3]
	cell_vref = (float)cell_analog_values[2]/1000;
 8000ae6:	4b8f      	ldr	r3, [pc, #572]	; (8000d24 <checkVITF+0x274>)
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000af2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8000d2c <checkVITF+0x27c>
 8000af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afa:	4b8e      	ldr	r3, [pc, #568]	; (8000d34 <checkVITF+0x284>)
 8000afc:	edc3 7a00 	vstr	s15, [r3]

	// calculate I = cell_voltage / known R
	cell_current = cell_voltage / known_resistance;
 8000b00:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <checkVITF+0x280>)
 8000b02:	ed93 7a00 	vldr	s14, [r3]
 8000b06:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8000d38 <checkVITF+0x288>
 8000b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0e:	4b8b      	ldr	r3, [pc, #556]	; (8000d3c <checkVITF+0x28c>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]

	// calculate thermistor R = (Vref - V) /I
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8000b14:	4b87      	ldr	r3, [pc, #540]	; (8000d34 <checkVITF+0x284>)
 8000b16:	ed93 7a00 	vldr	s14, [r3]
 8000b1a:	4b85      	ldr	r3, [pc, #532]	; (8000d30 <checkVITF+0x280>)
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b24:	4b85      	ldr	r3, [pc, #532]	; (8000d3c <checkVITF+0x28c>)
 8000b26:	ed93 7a00 	vldr	s14, [r3]
 8000b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b2e:	4b84      	ldr	r3, [pc, #528]	; (8000d40 <checkVITF+0x290>)
 8000b30:	edc3 7a00 	vstr	s15, [r3]

	// Convert module number to hex
	uint16_t mod_num = (uint16_t)cell->module;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
	char mod_numStr[2];
	sprintf(mod_numStr, "%1X", mod_num);
 8000b3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b40:	4980      	ldr	r1, [pc, #512]	; (8000d44 <checkVITF+0x294>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 f94a 	bl	8004ddc <siprintf>

	// Convert cell number to hex
	uint16_t cell_num = (uint16_t)cell->cell;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	char cell_numStr[2];
	sprintf(cell_numStr, "%1X", cell_num);
 8000b4e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b54:	497b      	ldr	r1, [pc, #492]	; (8000d44 <checkVITF+0x294>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 f940 	bl	8004ddc <siprintf>

    // Get the Cell Faults
	uint16_t Fault;
    Fault = getCellFaults(cell);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fd25 	bl	80005ac <getCellFaults>
 8000b62:	4603      	mov	r3, r0
 8000b64:	877b      	strh	r3, [r7, #58]	; 0x3a

    // Convert the result to a hexadecimal string
    char FaultStr[5]; // Buffer to hold the result string
    sprintf(FaultStr, "%04X", Fault);
 8000b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	4976      	ldr	r1, [pc, #472]	; (8000d48 <checkVITF+0x298>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 f934 	bl	8004ddc <siprintf>

	// Write to UART
	char FaultResultStr[7];
	sprintf(FaultResultStr, "7%s\r\n", FaultStr);
 8000b74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4973      	ldr	r1, [pc, #460]	; (8000d4c <checkVITF+0x29c>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 f92c 	bl	8004ddc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)FaultResultStr, sizeof(FaultResultStr), 100);
 8000b84:	f107 0120 	add.w	r1, r7, #32
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	4870      	ldr	r0, [pc, #448]	; (8000d50 <checkVITF+0x2a0>)
 8000b8e:	f003 fd69 	bl	8004664 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	uint16_t intPart = (uint16_t)cell_voltage;
 8000b92:	4b67      	ldr	r3, [pc, #412]	; (8000d30 <checkVITF+0x280>)
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9c:	ee17 3a90 	vmov	r3, s15
 8000ba0:	873b      	strh	r3, [r7, #56]	; 0x38
	char IntPartStr[3];
	sprintf(IntPartStr, "%02X", intPart);
 8000ba2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	496a      	ldr	r1, [pc, #424]	; (8000d54 <checkVITF+0x2a4>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f916 	bl	8004ddc <siprintf>

	// Convert the fractional part to a hexadecimal string
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <checkVITF+0x280>)
 8000bb2:	ed93 7a00 	vldr	s14, [r3]
 8000bb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000d58 <checkVITF+0x2a8>
 8000bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd0:	ee17 3a90 	vmov	r3, s15
 8000bd4:	86fb      	strh	r3, [r7, #54]	; 0x36
	char FracPartStr[3];
	sprintf(FracPartStr, "%02X", fracPart);
 8000bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	495d      	ldr	r1, [pc, #372]	; (8000d54 <checkVITF+0x2a4>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f8fc 	bl	8004ddc <siprintf>

	// Write to UART
	char ResultStr[11];
	sprintf(ResultStr, "1%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000be4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000be8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4957      	ldr	r1, [pc, #348]	; (8000d5c <checkVITF+0x2ac>)
 8000c00:	f004 f8ec 	bl	8004ddc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c04:	f107 010c 	add.w	r1, r7, #12
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	220b      	movs	r2, #11
 8000c0c:	4850      	ldr	r0, [pc, #320]	; (8000d50 <checkVITF+0x2a0>)
 8000c0e:	f003 fd29 	bl	8004664 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)cell_current;
 8000c12:	4b4a      	ldr	r3, [pc, #296]	; (8000d3c <checkVITF+0x28c>)
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c1c:	ee17 3a90 	vmov	r3, s15
 8000c20:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000c22:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	494a      	ldr	r1, [pc, #296]	; (8000d54 <checkVITF+0x2a4>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 f8d6 	bl	8004ddc <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 8000c30:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <checkVITF+0x28c>)
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c44:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000d58 <checkVITF+0x2a8>
 8000c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	ee17 3a90 	vmov	r3, s15
 8000c54:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000c56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	493d      	ldr	r1, [pc, #244]	; (8000d54 <checkVITF+0x2a4>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 f8bc 	bl	8004ddc <siprintf>

	// Write to UART
	sprintf(ResultStr, "2%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000c64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c6c:	f107 000c 	add.w	r0, r7, #12
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4938      	ldr	r1, [pc, #224]	; (8000d60 <checkVITF+0x2b0>)
 8000c80:	f004 f8ac 	bl	8004ddc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c84:	f107 010c 	add.w	r1, r7, #12
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	220b      	movs	r2, #11
 8000c8c:	4830      	ldr	r0, [pc, #192]	; (8000d50 <checkVITF+0x2a0>)
 8000c8e:	f003 fce9 	bl	8004664 <HAL_UART_Transmit>

	// TODO: determine temp based off linear eq of degrees vs ohms
	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)thermistor_resistance;
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <checkVITF+0x290>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c9c:	ee17 3a90 	vmov	r3, s15
 8000ca0:	873b      	strh	r3, [r7, #56]	; 0x38
	sprintf(IntPartStr, "%02X", intPart);
 8000ca2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	492a      	ldr	r1, [pc, #168]	; (8000d54 <checkVITF+0x2a4>)
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 f896 	bl	8004ddc <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <checkVITF+0x290>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000d58 <checkVITF+0x2a8>
 8000cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd0:	ee17 3a90 	vmov	r3, s15
 8000cd4:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(FracPartStr, "%02X", fracPart);
 8000cd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	491d      	ldr	r1, [pc, #116]	; (8000d54 <checkVITF+0x2a4>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f87c 	bl	8004ddc <siprintf>

	// Write to UART
	sprintf(ResultStr, "3%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000ce4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ce8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000cec:	f107 000c 	add.w	r0, r7, #12
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4919      	ldr	r1, [pc, #100]	; (8000d64 <checkVITF+0x2b4>)
 8000d00:	f004 f86c 	bl	8004ddc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	220b      	movs	r2, #11
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <checkVITF+0x2a0>)
 8000d0e:	f003 fca9 	bl	8004664 <HAL_UART_Transmit>

	// Delay for debug
	HAL_Delay(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f000 fdb5 	bl	8001884 <HAL_Delay>

	// TODO: send V and I to the model to get SOH, SOC and SOP

	return 0;
 8000d1a:	bf00      	nop
}
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001ac 	.word	0x200001ac
 8000d28:	20000078 	.word	0x20000078
 8000d2c:	447a0000 	.word	0x447a0000
 8000d30:	200001b8 	.word	0x200001b8
 8000d34:	200001c4 	.word	0x200001c4
 8000d38:	435c0000 	.word	0x435c0000
 8000d3c:	200001bc 	.word	0x200001bc
 8000d40:	200001c0 	.word	0x200001c0
 8000d44:	0800574c 	.word	0x0800574c
 8000d48:	08005750 	.word	0x08005750
 8000d4c:	08005758 	.word	0x08005758
 8000d50:	20000148 	.word	0x20000148
 8000d54:	0800573c 	.word	0x0800573c
 8000d58:	42c80000 	.word	0x42c80000
 8000d5c:	08005760 	.word	0x08005760
 8000d60:	08005770 	.word	0x08005770
 8000d64:	08005780 	.word	0x08005780

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f000 fd17 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */
  // Fault
  uint16_t Fault;

	// Define the Cell
  Cell cell0 = {
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2224      	movs	r2, #36	; 0x24
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 f84e 	bl	8004e1c <memset>
 8000d80:	2301      	movs	r3, #1
 8000d82:	753b      	strb	r3, [r7, #20]
 8000d84:	2302      	movs	r3, #2
 8000d86:	757b      	strb	r3, [r7, #21]
	};

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f8c2 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f000 fa3c 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d90:	f000 fa1a 	bl	80011c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d94:	f000 f9ee 	bl	8001174 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d98:	f000 f92c 	bl	8000ff4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000d9c:	f000 f998 	bl	80010d0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000da0:	4856      	ldr	r0, [pc, #344]	; (8000efc <main+0x194>)
 8000da2:	f001 fc1b 	bl	80025dc <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000da6:	2102      	movs	r1, #2
 8000da8:	4854      	ldr	r0, [pc, #336]	; (8000efc <main+0x194>)
 8000daa:	f001 fd2b 	bl	8002804 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 8000dae:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <main+0x198>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000db4:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <main+0x198>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <main+0x198>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <main+0x198>)
 8000dc2:	f240 4246 	movw	r2, #1094	; 0x446
 8000dc6:	601a      	str	r2, [r3, #0]

  // Initializing
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2120      	movs	r1, #32
 8000dcc:	484d      	ldr	r0, [pc, #308]	; (8000f04 <main+0x19c>)
 8000dce:	f002 fda7 	bl	8003920 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd6:	f000 fd55 	bl	8001884 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	4849      	ldr	r0, [pc, #292]	; (8000f04 <main+0x19c>)
 8000de0:	f002 fd9e 	bl	8003920 <HAL_GPIO_WritePin>

  int success;
  success = startupSequence();
 8000de4:	f7ff fd3a 	bl	800085c <startupSequence>
 8000de8:	63f8      	str	r0, [r7, #60]	; 0x3c

  if (success == -1) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); }
 8000dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d104      	bne.n	8000dfc <main+0x94>
 8000df2:	2201      	movs	r2, #1
 8000df4:	2120      	movs	r1, #32
 8000df6:	4843      	ldr	r0, [pc, #268]	; (8000f04 <main+0x19c>)
 8000df8:	f002 fd92 	bl	8003920 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // TODO: loop through every cell in the pack for every module
	  checkVITF(&cell0);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe55 	bl	8000ab0 <checkVITF>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0a:	483e      	ldr	r0, [pc, #248]	; (8000f04 <main+0x19c>)
 8000e0c:	f002 fd70 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d035      	beq.n	8000e82 <main+0x11a>
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	483a      	ldr	r0, [pc, #232]	; (8000f04 <main+0x19c>)
 8000e1c:	f002 fd68 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d12d      	bne.n	8000e82 <main+0x11a>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	4836      	ldr	r0, [pc, #216]	; (8000f04 <main+0x19c>)
 8000e2c:	f002 fd78 	bl	8003920 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f000 fd27 	bl	8001884 <HAL_Delay>

		  // Set the Cell Over Temp Fault
		  setCellFaults(&cell0, OVER_TEMP_FAULT);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc39 	bl	80006b4 <setCellFaults>

		  // Get the Cell Over Temp Fault
		  Fault = getCellFaults(&cell0);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fbb0 	bl	80005ac <getCellFaults>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	877b      	strh	r3, [r7, #58]	; 0x3a

		  // Convert the result to a hexadecimal string
		  char FaultStr[6]; // Buffer to hold the result string
		  sprintf(FaultStr, "%05X", Fault);
 8000e50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	492c      	ldr	r1, [pc, #176]	; (8000f08 <main+0x1a0>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 ffbf 	bl	8004ddc <siprintf>

		  // Write to CAN Over Temp Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <main+0x1a4>)
 8000e64:	4926      	ldr	r1, [pc, #152]	; (8000f00 <main+0x198>)
 8000e66:	4825      	ldr	r0, [pc, #148]	; (8000efc <main+0x194>)
 8000e68:	f001 fbfc 	bl	8002664 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Current Fault
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc6e 	bl	8000754 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4821      	ldr	r0, [pc, #132]	; (8000f04 <main+0x19c>)
 8000e7e:	f002 fd4f 	bl	8003920 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <main+0x19c>)
 8000e88:	f002 fd32 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0b4      	beq.n	8000dfc <main+0x94>
 8000e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e96:	481b      	ldr	r0, [pc, #108]	; (8000f04 <main+0x19c>)
 8000e98:	f002 fd2a 	bl	80038f0 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1ac      	bne.n	8000dfc <main+0x94>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	4817      	ldr	r0, [pc, #92]	; (8000f04 <main+0x19c>)
 8000ea8:	f002 fd3a 	bl	8003920 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f000 fce9 	bl	8001884 <HAL_Delay>

		  // Set the Cell Over Current Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fbfb 	bl	80006b4 <setCellFaults>

		  // Get the Cell Over Current Fault
		  Fault = getCellFaults(&cell0);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fb72 	bl	80005ac <getCellFaults>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	877b      	strh	r3, [r7, #58]	; 0x3a

		  // Convert the result to a hexadecimal string
		  char FaultStr[6]; // Buffer to hold the result string
		  sprintf(FaultStr, "%05X", Fault);
 8000ecc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <main+0x1a0>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 ff82 	bl	8004ddc <siprintf>

		  // Write to CAN Over Current Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000ed8:	1d3a      	adds	r2, r7, #4
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <main+0x1a4>)
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <main+0x198>)
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <main+0x194>)
 8000ee0:	f001 fbc0 	bl	8002664 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Temp Fault
		  clearCellFault(&cell0, OVER_TEMP_FAULT);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc32 	bl	8000754 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <main+0x19c>)
 8000ef6:	f002 fd13 	bl	8003920 <HAL_GPIO_WritePin>
	  checkVITF(&cell0);
 8000efa:	e77f      	b.n	8000dfc <main+0x94>
 8000efc:	20000120 	.word	0x20000120
 8000f00:	20000190 	.word	0x20000190
 8000f04:	40020000 	.word	0x40020000
 8000f08:	08005790 	.word	0x08005790
 8000f0c:	200001a8 	.word	0x200001a8

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	2234      	movs	r2, #52	; 0x34
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 ff7c 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <SystemClock_Config+0xdc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a2b      	ldr	r2, [pc, #172]	; (8000fec <SystemClock_Config+0xdc>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <SystemClock_Config+0xdc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <SystemClock_Config+0xe0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <SystemClock_Config+0xe0>)
 8000f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SystemClock_Config+0xe0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f80:	2308      	movs	r3, #8
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f84:	23b4      	movs	r3, #180	; 0xb4
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f875 	bl	8004088 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa4:	f000 fa0e 	bl	80013c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fa8:	f002 fcd4 	bl	8003954 <HAL_PWREx_EnableOverDrive>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb2:	f000 fa07 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fd0d 	bl	80039f4 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe0:	f000 f9f0 	bl	80013c4 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	; 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <MX_ADC1_Init+0xd4>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_ADC1_Init+0xd0>)
 800100e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_ADC1_Init+0xd0>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001036:	4a25      	ldr	r2, [pc, #148]	; (80010cc <MX_ADC1_Init+0xd8>)
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_ADC1_Init+0xd0>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001042:	2203      	movs	r2, #3
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	481b      	ldr	r0, [pc, #108]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001056:	f000 fc39 	bl	80018cc <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 f9b0 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001076:	f000 fe25 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001080:	f000 f9a0 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001084:	2301      	movs	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_ADC1_Init+0xd0>)
 8001092:	f000 fe17 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800109c:	f000 f992 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a4:	2303      	movs	r3, #3
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0xd0>)
 80010ae:	f000 fe09 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010b8:	f000 f984 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000078 	.word	0x20000078
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <MX_CAN1_Init+0x9c>)
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <MX_CAN1_Init+0xa0>)
 80010da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_CAN1_Init+0x9c>)
 80010de:	221e      	movs	r2, #30
 80010e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_CAN1_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_CAN1_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_CAN1_Init+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_CAN1_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_CAN1_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_CAN1_Init+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_CAN1_Init+0x9c>)
 8001108:	2200      	movs	r2, #0
 800110a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_CAN1_Init+0x9c>)
 800110e:	2200      	movs	r2, #0
 8001110:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_CAN1_Init+0x9c>)
 8001114:	2200      	movs	r2, #0
 8001116:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_CAN1_Init+0x9c>)
 800111a:	2200      	movs	r2, #0
 800111c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800111e:	4813      	ldr	r0, [pc, #76]	; (800116c <MX_CAN1_Init+0x9c>)
 8001120:	f001 f880 	bl	8002224 <HAL_CAN_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800112a:	f000 f94b 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001132:	2312      	movs	r3, #18
 8001134:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 800113a:	f242 0360 	movw	r3, #8288	; 0x2060
 800113e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001144:	f242 0360 	movw	r3, #8288	; 0x2060
 8001148:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001152:	2301      	movs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001156:	2314      	movs	r3, #20
 8001158:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_CAN1_Init+0x9c>)
 8001160:	f001 f95c 	bl	800241c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000120 	.word	0x20000120
 8001170:	40006400 	.word	0x40006400

08001174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART2_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011ac:	f003 fa0a 	bl	80045c4 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f000 f905 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000148 	.word	0x20000148
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_DMA_Init+0x3c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	; 0x38
 80011f0:	f001 fe43 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	; 0x38
 80011f6:	f001 fe5c 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a62      	ldr	r2, [pc, #392]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a54      	ldr	r2, [pc, #336]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <MX_GPIO_Init+0x1a8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f641 0108 	movw	r1, #6152	; 0x1808
 80012b0:	4840      	ldr	r0, [pc, #256]	; (80013b4 <MX_GPIO_Init+0x1ac>)
 80012b2:	f002 fb35 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	21e0      	movs	r1, #224	; 0xe0
 80012ba:	483f      	ldr	r0, [pc, #252]	; (80013b8 <MX_GPIO_Init+0x1b0>)
 80012bc:	f002 fb30 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f240 1121 	movw	r1, #289	; 0x121
 80012c6:	483d      	ldr	r0, [pc, #244]	; (80013bc <MX_GPIO_Init+0x1b4>)
 80012c8:	f002 fb2a 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4834      	ldr	r0, [pc, #208]	; (80013b4 <MX_GPIO_Init+0x1ac>)
 80012e4:	f002 f970 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9
 80012e8:	f240 6307 	movw	r3, #1543	; 0x607
 80012ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_GPIO_Init+0x1ac>)
 80012fe:	f002 f963 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 8001302:	f641 0308 	movw	r3, #6152	; 0x1808
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4826      	ldr	r0, [pc, #152]	; (80013b4 <MX_GPIO_Init+0x1ac>)
 800131c:	f002 f954 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001320:	23e0      	movs	r3, #224	; 0xe0
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <MX_GPIO_Init+0x1b0>)
 8001338:	f002 f946 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8;
 800133c:	f240 1321 	movw	r3, #289	; 0x121
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <MX_GPIO_Init+0x1b4>)
 8001356:	f002 f937 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 800135a:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_GPIO_Init+0x1b0>)
 8001370:	f002 f92a 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_GPIO_Init+0x1b8>)
 8001388:	f002 f91e 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 800138c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x1b4>)
 80013a2:	f002 f911 	bl	80035c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140e:	2007      	movs	r0, #7
 8001410:	f001 fd28 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_ADC_MspInit+0xdc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d157      	bne.n	80014f2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_ADC_MspInit+0xe0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800147a:	2313      	movs	r3, #19
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	481d      	ldr	r0, [pc, #116]	; (8001504 <HAL_ADC_MspInit+0xe4>)
 800148e:	f002 f89b 	bl	80035c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_ADC_MspInit+0xec>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014d8:	f001 fd06 	bl	8002ee8 <HAL_DMA_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80014e2:	f7ff ff6f 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_ADC_MspInit+0xe8>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012000 	.word	0x40012000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000
 8001508:	200000c0 	.word	0x200000c0
 800150c:	40026410 	.word	0x40026410

08001510 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_CAN_MspInit+0x94>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d134      	bne.n	800159c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_CAN_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800156a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800157c:	2309      	movs	r3, #9
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_CAN_MspInit+0x9c>)
 8001588:	f002 f81e 	bl	80035c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2014      	movs	r0, #20
 8001592:	f001 fc72 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001596:	2014      	movs	r0, #20
 8001598:	f001 fc8b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40006400 	.word	0x40006400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_UART_MspInit+0x8c>)
 8001626:	f001 ffcf 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f8da 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <CAN1_RX0_IRQHandler+0x10>)
 800169a:	f001 f8d9 	bl	8002850 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000120 	.word	0x20000120

080016a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA2_Stream0_IRQHandler+0x10>)
 80016ae:	f001 fd21 	bl	80030f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000c0 	.word	0x200000c0

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f003 fb9e 	bl	8004e2c <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20020000 	.word	0x20020000
 800171c:	00000400 	.word	0x00000400
 8001720:	200001c8 	.word	0x200001c8
 8001724:	20000318 	.word	0x20000318

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001750:	f7ff ffea 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800177a:	f003 fb5d 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff faf3 	bl	8000d68 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001790:	080057fc 	.word	0x080057fc
  ldr r2, =_sbss
 8001794:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001798:	20000318 	.word	0x20000318

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f001 fb4b 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fdfc 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fb63 	bl	8002ece <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f001 fb2b 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000000 	.word	0x20000000
 800183c:	20000008 	.word	0x20000008
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008
 8001868:	200001cc 	.word	0x200001cc

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200001cc 	.word	0x200001cc

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008

080018cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e033      	b.n	800194a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fd98 	bl	8001420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001912:	f023 0302 	bic.w	r3, r3, #2
 8001916:	f043 0202 	orr.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fb02 	bl	8001f28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
 800193a:	e001      	b.n	8001940 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	d113      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800197a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e063      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff ff68 	bl	800186c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199e:	e021      	b.n	80019e4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a6:	d01d      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_PollForConversion+0x6c>
 80019ae:	f7ff ff5d 	bl	800186c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d212      	bcs.n	80019e4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d00b      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e03d      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d1d6      	bne.n	80019a0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0212 	mvn.w	r2, #18
 80019fa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Start_DMA+0x1e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e0e9      	b.n	8001c5a <HAL_ADC_Start_DMA+0x1f2>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d018      	beq.n	8001ace <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aac:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <HAL_ADC_Start_DMA+0x1fc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6d      	ldr	r2, [pc, #436]	; (8001c68 <HAL_ADC_Start_DMA+0x200>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0c9a      	lsrs	r2, r3, #18
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001adc:	d107      	bne.n	8001aee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 80a1 	bne.w	8001c40 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3c:	d106      	bne.n	8001b4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f023 0206 	bic.w	r2, r3, #6
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
 8001b4a:	e002      	b.n	8001b52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_ADC_Start_DMA+0x204>)
 8001b5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_ADC_Start_DMA+0x208>)
 8001b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_ADC_Start_DMA+0x20c>)
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	4a41      	ldr	r2, [pc, #260]	; (8001c78 <HAL_ADC_Start_DMA+0x210>)
 8001b74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b8e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b9e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	334c      	adds	r3, #76	; 0x4c
 8001baa:	4619      	mov	r1, r3
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f001 fa48 	bl	8003044 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d12a      	bne.n	8001c16 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <HAL_ADC_Start_DMA+0x214>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d015      	beq.n	8001bf6 <HAL_ADC_Start_DMA+0x18e>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <HAL_ADC_Start_DMA+0x218>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d105      	bne.n	8001be0 <HAL_ADC_Start_DMA+0x178>
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_ADC_Start_DMA+0x204>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_ADC_Start_DMA+0x21c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d136      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_ADC_Start_DMA+0x204>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d130      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d129      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e020      	b.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_ADC_Start_DMA+0x214>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d11b      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d114      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	e00b      	b.n	8001c58 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f043 0210 	orr.w	r2, r3, #16
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	08002121 	.word	0x08002121
 8001c74:	080021db 	.word	0x080021db
 8001c78:	080021f7 	.word	0x080021f7
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	40012100 	.word	0x40012100
 8001c84:	40012200 	.word	0x40012200

08001c88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e113      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x244>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d925      	bls.n	8001d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68d9      	ldr	r1, [r3, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	400a      	ands	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3b1e      	subs	r3, #30
 8001d30:	409a      	lsls	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	e022      	b.n	8001d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6919      	ldr	r1, [r3, #16]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	2207      	movs	r2, #7
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4403      	add	r3, r0
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d824      	bhi.n	8001dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b05      	subs	r3, #5
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd2:	e04c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d824      	bhi.n	8001e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b23      	subs	r3, #35	; 0x23
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b23      	subs	r3, #35	; 0x23
 8001e18:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
 8001e24:	e023      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b41      	subs	r3, #65	; 0x41
 8001e38:	221f      	movs	r2, #31
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b41      	subs	r3, #65	; 0x41
 8001e62:	fa00 f203 	lsl.w	r2, r0, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_ADC_ConfigChannel+0x250>)
 8001e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <HAL_ADC_ConfigChannel+0x254>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d8>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b12      	cmp	r3, #18
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_ADC_ConfigChannel+0x254>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_ADC_ConfigChannel+0x258>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x1f4>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d122      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_ADC_ConfigChannel+0x258>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_ADC_ConfigChannel+0x25c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_ADC_ConfigChannel+0x260>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9a      	lsrs	r2, r3, #18
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40012300 	.word	0x40012300
 8001f18:	40012000 	.word	0x40012000
 8001f1c:	10000012 	.word	0x10000012
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f30:	4b79      	ldr	r3, [pc, #484]	; (8002118 <ADC_Init+0x1f0>)
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	4a58      	ldr	r2, [pc, #352]	; (800211c <ADC_Init+0x1f4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e00f      	b.n	8002026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0202 	bic.w	r2, r2, #2
 8002034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e1b      	ldrb	r3, [r3, #24]
 8002040:	005a      	lsls	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002062:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	3b01      	subs	r3, #1
 8002080:	035a      	lsls	r2, r3, #13
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e007      	b.n	800209c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	051a      	lsls	r2, r3, #20
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6899      	ldr	r1, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	025a      	lsls	r2, r3, #9
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	029a      	lsls	r2, r3, #10
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	0f000001 	.word	0x0f000001

08002120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002136:	2b00      	cmp	r3, #0
 8002138:	d13c      	bne.n	80021b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12b      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d127      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	d119      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0220 	bic.w	r2, r2, #32
 8002186:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fd6b 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021b2:	e00e      	b.n	80021d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fd75 	bl	8001cb0 <HAL_ADC_ErrorCallback>
}
 80021c6:	e004      	b.n	80021d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fd57 	bl	8001c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fd4a 	bl	8001cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0ed      	b.n	8002412 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff f964 	bl	8001510 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7ff fb08 	bl	800186c <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7ff fb04 	bl	800186c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0c5      	b.n	8002412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0e5      	beq.n	8002260 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0202 	bic.w	r2, r2, #2
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7ff fae2 	bl	800186c <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022aa:	e012      	b.n	80022d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ac:	f7ff fade 	bl	800186c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b0a      	cmp	r3, #10
 80022b8:	d90b      	bls.n	80022d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e09f      	b.n	8002412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e5      	bne.n	80022ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e5b      	ldrb	r3, [r3, #25]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d108      	bne.n	8002324 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e9b      	ldrb	r3, [r3, #26]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d108      	bne.n	800234e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e007      	b.n	800235e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0220 	bic.w	r2, r2, #32
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7edb      	ldrb	r3, [r3, #27]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d108      	bne.n	8002378 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0210 	bic.w	r2, r2, #16
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e007      	b.n	8002388 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0210 	orr.w	r2, r2, #16
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7f1b      	ldrb	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e007      	b.n	80023b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7f5b      	ldrb	r3, [r3, #29]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	ea42 0103 	orr.w	r1, r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002432:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d003      	beq.n	8002442 <HAL_CAN_ConfigFilter+0x26>
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f040 80be 	bne.w	80025be <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002442:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002444:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800245c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	431a      	orrs	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2201      	movs	r2, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	401a      	ands	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d123      	bne.n	80024ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3248      	adds	r2, #72	; 0x48
 80024cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024e2:	6979      	ldr	r1, [r7, #20]
 80024e4:	3348      	adds	r3, #72	; 0x48
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d122      	bne.n	800253a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002514:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3248      	adds	r2, #72	; 0x48
 800251a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800252e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	3348      	adds	r3, #72	; 0x48
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002554:	e007      	b.n	8002566 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	431a      	orrs	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	401a      	ands	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002580:	e007      	b.n	8002592 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025b0:	f023 0201 	bic.w	r2, r3, #1
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e006      	b.n	80025cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40006400 	.word	0x40006400

080025dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d12e      	bne.n	800264e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff f930 	bl	800186c <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800260e:	e012      	b.n	8002636 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002610:	f7ff f92c 	bl	800186c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d90b      	bls.n	8002636 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2205      	movs	r2, #5
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e012      	b.n	800265c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e006      	b.n	800265c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d003      	beq.n	8002690 <HAL_CAN_AddTxMessage+0x2c>
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	2b02      	cmp	r3, #2
 800268c:	f040 80ad 	bne.w	80027ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8095 	beq.w	80027da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	0e1b      	lsrs	r3, r3, #24
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026d6:	68f9      	ldr	r1, [r7, #12]
 80026d8:	6809      	ldr	r1, [r1, #0]
 80026da:	431a      	orrs	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3318      	adds	r3, #24
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00f      	b.n	8002708 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3318      	adds	r3, #24
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	440b      	add	r3, r1
 8002706:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3318      	adds	r3, #24
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	440b      	add	r3, r1
 8002718:	3304      	adds	r3, #4
 800271a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	7d1b      	ldrb	r3, [r3, #20]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d111      	bne.n	8002748 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3318      	adds	r3, #24
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	6811      	ldr	r1, [r2, #0]
 8002738:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3318      	adds	r3, #24
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	440b      	add	r3, r1
 8002744:	3304      	adds	r3, #4
 8002746:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3307      	adds	r3, #7
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	061a      	lsls	r2, r3, #24
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3306      	adds	r3, #6
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3305      	adds	r3, #5
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	4313      	orrs	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	3204      	adds	r2, #4
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	4610      	mov	r0, r2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6811      	ldr	r1, [r2, #0]
 8002770:	ea43 0200 	orr.w	r2, r3, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	440b      	add	r3, r1
 800277a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800277e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3303      	adds	r3, #3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	061a      	lsls	r2, r3, #24
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3302      	adds	r3, #2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3301      	adds	r3, #1
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	4313      	orrs	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	4610      	mov	r0, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6811      	ldr	r1, [r2, #0]
 80027a6:	ea43 0200 	orr.w	r2, r3, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3318      	adds	r3, #24
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3318      	adds	r3, #24
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	440b      	add	r3, r1
 80027d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e00e      	b.n	80027f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e006      	b.n	80027f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3724      	adds	r7, #36	; 0x24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002814:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d002      	beq.n	8002822 <HAL_CAN_ActivateNotification+0x1e>
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d109      	bne.n	8002836 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e006      	b.n	8002844 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07c      	beq.n	8002990 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d023      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f983 	bl	8002bbe <HAL_CAN_TxMailbox0CompleteCallback>
 80028b8:	e016      	b.n	80028e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	e00c      	b.n	80028e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e002      	b.n	80028e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f989 	bl	8002bfa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d024      	beq.n	800293c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f963 	bl	8002bd2 <HAL_CAN_TxMailbox1CompleteCallback>
 800290c:	e016      	b.n	800293c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	e00c      	b.n	800293c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e002      	b.n	800293c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f969 	bl	8002c0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f943 	bl	8002be6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002960:	e016      	b.n	8002990 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e00c      	b.n	8002990 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e002      	b.n	8002990 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f949 	bl	8002c22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2210      	movs	r2, #16
 80029b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f93a 	bl	8002c4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f921 	bl	8002c36 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2208      	movs	r2, #8
 8002a32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f91c 	bl	8002c72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f903 	bl	8002c5e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2210      	movs	r2, #16
 8002a72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f906 	bl	8002c86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2208      	movs	r2, #8
 8002a94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8ff 	bl	8002c9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d07b      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d072      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d043      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d03e      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1e:	2b60      	cmp	r3, #96	; 0x60
 8002b20:	d02b      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x32a>
 8002b22:	2b60      	cmp	r3, #96	; 0x60
 8002b24:	d82e      	bhi.n	8002b84 <HAL_CAN_IRQHandler+0x334>
 8002b26:	2b50      	cmp	r3, #80	; 0x50
 8002b28:	d022      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x320>
 8002b2a:	2b50      	cmp	r3, #80	; 0x50
 8002b2c:	d82a      	bhi.n	8002b84 <HAL_CAN_IRQHandler+0x334>
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d019      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x316>
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d826      	bhi.n	8002b84 <HAL_CAN_IRQHandler+0x334>
 8002b36:	2b30      	cmp	r3, #48	; 0x30
 8002b38:	d010      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x30c>
 8002b3a:	2b30      	cmp	r3, #48	; 0x30
 8002b3c:	d822      	bhi.n	8002b84 <HAL_CAN_IRQHandler+0x334>
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d002      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x2f8>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d005      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b46:	e01d      	b.n	8002b84 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f043 0308 	orr.w	r3, r3, #8
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b50:	e019      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b5a:	e014      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b64:	e00f      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b6e:	e00a      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b78:	e005      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b82:	e000      	b.n	8002b86 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f87c 	bl	8002cae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7fe fcba 	bl	800186c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e099      	b.n	8003038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e00f      	b.n	8002f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7fe fca1 	bl	800186c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d908      	bls.n	8002f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e078      	b.n	8003038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	; (8003040 <HAL_DMA_Init+0x158>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d117      	bne.n	800300a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa6f 	bl	80034d0 <DMA_CheckFifoParam>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003006:	2301      	movs	r3, #1
 8003008:	e016      	b.n	8003038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa26 	bl	8003464 <DMA_CalcBaseAndBitshift>
 8003018:	4603      	mov	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	f010803f 	.word	0xf010803f

08003044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_DMA_Start_IT+0x26>
 8003066:	2302      	movs	r3, #2
 8003068:	e040      	b.n	80030ec <HAL_DMA_Start_IT+0xa8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12f      	bne.n	80030de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f9b8 	bl	8003408 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	223f      	movs	r2, #63	; 0x3f
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0216 	orr.w	r2, r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e005      	b.n	80030ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
 80030e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003100:	4b8e      	ldr	r3, [pc, #568]	; (800333c <HAL_DMA_IRQHandler+0x248>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a8e      	ldr	r2, [pc, #568]	; (8003340 <HAL_DMA_IRQHandler+0x24c>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2208      	movs	r2, #8
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0204 	bic.w	r2, r2, #4
 8003146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	2208      	movs	r2, #8
 800314e:	409a      	lsls	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2201      	movs	r2, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f043 0202 	orr.w	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	2204      	movs	r2, #4
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2204      	movs	r2, #4
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2210      	movs	r2, #16
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d043      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03c      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2210      	movs	r2, #16
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e01f      	b.n	8003264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
 8003234:	e016      	b.n	8003264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0208 	bic.w	r2, r2, #8
 8003252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	2220      	movs	r2, #32
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 808f 	beq.w	8003394 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8087 	beq.w	8003394 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2220      	movs	r2, #32
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d136      	bne.n	800330c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0216 	bic.w	r2, r2, #22
 80032ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_DMA_IRQHandler+0x1da>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0208 	bic.w	r2, r2, #8
 80032dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	223f      	movs	r2, #63	; 0x3f
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07e      	beq.n	8003400 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
        }
        return;
 800330a:	e079      	b.n	8003400 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e02c      	b.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000
 8003340:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e01e      	b.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0210 	bic.w	r2, r2, #16
 8003372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	2b00      	cmp	r3, #0
 800339a:	d032      	beq.n	8003402 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2205      	movs	r2, #5
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d307      	bcc.n	80033dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f2      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x2cc>
 80033da:	e000      	b.n	80033de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
 80033fe:	e000      	b.n	8003402 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003400:	bf00      	nop
    }
  }
}
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003424:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d108      	bne.n	8003448 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003446:	e007      	b.n	8003458 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3b10      	subs	r3, #16
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <DMA_CalcBaseAndBitshift+0x68>)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d909      	bls.n	80034a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	1d1a      	adds	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	659a      	str	r2, [r3, #88]	; 0x58
 80034a4:	e007      	b.n	80034b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	aaaaaaab 	.word	0xaaaaaaab
 80034cc:	080057b0 	.word	0x080057b0

080034d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11f      	bne.n	800352a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d856      	bhi.n	800359e <DMA_CheckFifoParam+0xce>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <DMA_CheckFifoParam+0x28>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	08003509 	.word	0x08003509
 80034fc:	0800351b 	.word	0x0800351b
 8003500:	08003509 	.word	0x08003509
 8003504:	0800359f 	.word	0x0800359f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d046      	beq.n	80035a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e043      	b.n	80035a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003522:	d140      	bne.n	80035a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003528:	e03d      	b.n	80035a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	d121      	bne.n	8003578 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d837      	bhi.n	80035aa <DMA_CheckFifoParam+0xda>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <DMA_CheckFifoParam+0x70>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	08003557 	.word	0x08003557
 8003548:	08003551 	.word	0x08003551
 800354c:	08003569 	.word	0x08003569
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e030      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d025      	beq.n	80035ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003566:	e022      	b.n	80035ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003570:	d11f      	bne.n	80035b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003576:	e01c      	b.n	80035b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d903      	bls.n	8003586 <DMA_CheckFifoParam+0xb6>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d003      	beq.n	800358c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003584:	e018      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      break;
 800358a:	e015      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e00b      	b.n	80035b6 <DMA_CheckFifoParam+0xe6>
      break;
 800359e:	bf00      	nop
 80035a0:	e00a      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e008      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e006      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
 80035ac:	e004      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035b6:	bf00      	nop
    }
  } 
  
  return status; 
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e165      	b.n	80038b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e4:	2201      	movs	r2, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f040 8154 	bne.w	80038aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d005      	beq.n	800361a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003616:	2b02      	cmp	r3, #2
 8003618:	d130      	bne.n	800367c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 0201 	and.w	r2, r3, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d017      	beq.n	80036b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d123      	bne.n	800370c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	08da      	lsrs	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3208      	adds	r2, #8
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0203 	and.w	r2, r3, #3
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80ae 	beq.w	80038aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_GPIO_Init+0x300>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a5c      	ldr	r2, [pc, #368]	; (80038c8 <HAL_GPIO_Init+0x300>)
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_GPIO_Init+0x300>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376a:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_GPIO_Init+0x304>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_GPIO_Init+0x308>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d025      	beq.n	80037e2 <HAL_GPIO_Init+0x21a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_GPIO_Init+0x30c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <HAL_GPIO_Init+0x216>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_GPIO_Init+0x310>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d019      	beq.n	80037da <HAL_GPIO_Init+0x212>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_GPIO_Init+0x314>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_GPIO_Init+0x318>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x20a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <HAL_GPIO_Init+0x31c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x206>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <HAL_GPIO_Init+0x320>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x202>
 80037c6:	2306      	movs	r3, #6
 80037c8:	e00c      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037ca:	2307      	movs	r3, #7
 80037cc:	e00a      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037ce:	2305      	movs	r3, #5
 80037d0:	e008      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037d2:	2304      	movs	r3, #4
 80037d4:	e006      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037d6:	2303      	movs	r3, #3
 80037d8:	e004      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037da:	2302      	movs	r3, #2
 80037dc:	e002      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_GPIO_Init+0x21c>
 80037e2:	2300      	movs	r3, #0
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	f002 0203 	and.w	r2, r2, #3
 80037ea:	0092      	lsls	r2, r2, #2
 80037ec:	4093      	lsls	r3, r2
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037f4:	4935      	ldr	r1, [pc, #212]	; (80038cc <HAL_GPIO_Init+0x304>)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	3302      	adds	r3, #2
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003802:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003826:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_GPIO_Init+0x324>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800387a:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_GPIO_Init+0x324>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_GPIO_Init+0x324>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	f67f ae96 	bls.w	80035e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40013800 	.word	0x40013800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40021400 	.word	0x40021400
 80038e8:	40021800 	.word	0x40021800
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e001      	b.n	8003912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	787b      	ldrb	r3, [r7, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800393c:	e003      	b.n	8003946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	041a      	lsls	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	619a      	str	r2, [r3, #24]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003980:	f7fd ff74 	bl	800186c <HAL_GetTick>
 8003984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003986:	e009      	b.n	800399c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003988:	f7fd ff70 	bl	800186c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003996:	d901      	bls.n	800399c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e01f      	b.n	80039dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_PWREx_EnableOverDrive+0x98>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d1ee      	bne.n	8003988 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b0:	f7fd ff5c 	bl	800186c <HAL_GetTick>
 80039b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039b6:	e009      	b.n	80039cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b8:	f7fd ff58 	bl	800186c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c6:	d901      	bls.n	80039cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e007      	b.n	80039dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_PWREx_EnableOverDrive+0x98>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d8:	d1ee      	bne.n	80039b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	420e0040 	.word	0x420e0040
 80039ec:	40007000 	.word	0x40007000
 80039f0:	420e0044 	.word	0x420e0044

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0cc      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d90c      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e067      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4934      	ldr	r1, [pc, #208]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fec2 	bl	800186c <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fd febe 	bl	800186c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d20c      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f855 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fe22 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	08005798 	.word	0x08005798
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	080057a8 	.word	0x080057a8

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	080057a8 	.word	0x080057a8

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b0ae      	sub	sp, #184	; 0xb8
 8003c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c4e:	4bcb      	ldr	r3, [pc, #812]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	f200 8206 	bhi.w	8004068 <HAL_RCC_GetSysClockFreq+0x440>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c99 	.word	0x08003c99
 8003c68:	08004069 	.word	0x08004069
 8003c6c:	08004069 	.word	0x08004069
 8003c70:	08004069 	.word	0x08004069
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08004069 	.word	0x08004069
 8003c7c:	08004069 	.word	0x08004069
 8003c80:	08004069 	.word	0x08004069
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08004069 	.word	0x08004069
 8003c8c:	08004069 	.word	0x08004069
 8003c90:	08004069 	.word	0x08004069
 8003c94:	08003e99 	.word	0x08003e99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4bb9      	ldr	r3, [pc, #740]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c9e:	e1e7      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca0:	4bb8      	ldr	r3, [pc, #736]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ca6:	e1e3      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca8:	4bb4      	ldr	r3, [pc, #720]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb4:	4bb1      	ldr	r3, [pc, #708]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d071      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4bae      	ldr	r3, [pc, #696]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ccc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6439      	str	r1, [r7, #64]	; 0x40
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d18:	4649      	mov	r1, r9
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4641      	mov	r1, r8
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4641      	mov	r1, r8
 8003d28:	1a51      	subs	r1, r2, r1
 8003d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d40:	4649      	mov	r1, r9
 8003d42:	00cb      	lsls	r3, r1, #3
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	00ca      	lsls	r2, r1, #3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	4622      	mov	r2, r4
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	eb42 0303 	adc.w	r3, r2, r3
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d70:	4629      	mov	r1, r5
 8003d72:	024b      	lsls	r3, r1, #9
 8003d74:	4621      	mov	r1, r4
 8003d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	024a      	lsls	r2, r1, #9
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d94:	f7fc fa8c 	bl	80002b0 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da2:	e067      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4621      	mov	r1, r4
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003df8:	4649      	mov	r1, r9
 8003dfa:	018b      	lsls	r3, r1, #6
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e02:	4641      	mov	r1, r8
 8003e04:	018a      	lsls	r2, r1, #6
 8003e06:	4641      	mov	r1, r8
 8003e08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e26:	4692      	mov	sl, r2
 8003e28:	469b      	mov	fp, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	462b      	mov	r3, r5
 8003e34:	eb4b 0303 	adc.w	r3, fp, r3
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e46:	4629      	mov	r1, r5
 8003e48:	028b      	lsls	r3, r1, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e50:	4621      	mov	r1, r4
 8003e52:	028a      	lsls	r2, r1, #10
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e60:	677a      	str	r2, [r7, #116]	; 0x74
 8003e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e66:	f7fc fa23 	bl	80002b0 <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4613      	mov	r3, r2
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e96:	e0eb      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d06b      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ecc:	4622      	mov	r2, r4
 8003ece:	462b      	mov	r3, r5
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ede:	0150      	lsls	r0, r2, #5
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	1a51      	subs	r1, r2, r1
 8003ee8:	61b9      	str	r1, [r7, #24]
 8003eea:	4629      	mov	r1, r5
 8003eec:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003efe:	4659      	mov	r1, fp
 8003f00:	018b      	lsls	r3, r1, #6
 8003f02:	4651      	mov	r1, sl
 8003f04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f08:	4651      	mov	r1, sl
 8003f0a:	018a      	lsls	r2, r1, #6
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f12:	4659      	mov	r1, fp
 8003f14:	eb63 0901 	sbc.w	r9, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2c:	4690      	mov	r8, r2
 8003f2e:	4699      	mov	r9, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	eb18 0303 	adds.w	r3, r8, r3
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	462b      	mov	r3, r5
 8003f3a:	eb49 0303 	adc.w	r3, r9, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	024b      	lsls	r3, r1, #9
 8003f50:	4621      	mov	r1, r4
 8003f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f56:	4621      	mov	r1, r4
 8003f58:	024a      	lsls	r2, r1, #9
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f62:	2200      	movs	r2, #0
 8003f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f6c:	f7fc f9a0 	bl	80002b0 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f7a:	e065      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x420>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	4611      	mov	r1, r2
 8003f94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f98:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb4:	0150      	lsls	r0, r2, #5
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4641      	mov	r1, r8
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	018b      	lsls	r3, r1, #6
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fde:	4651      	mov	r1, sl
 8003fe0:	018a      	lsls	r2, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	1a54      	subs	r4, r2, r1
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	eb63 0501 	sbc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	464b      	mov	r3, r9
 8004008:	eb45 0303 	adc.w	r3, r5, r3
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004030:	2200      	movs	r2, #0
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
 8004034:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004036:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403a:	f7fc f939 	bl	80002b0 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4613      	mov	r3, r2
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <HAL_RCC_GetSysClockFreq+0x458>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0f1b      	lsrs	r3, r3, #28
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004066:	e003      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_GetSysClockFreq+0x45c>)
 800406a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800406e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004074:	4618      	mov	r0, r3
 8004076:	37b8      	adds	r7, #184	; 0xb8
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400

08004088 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e28d      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8083 	beq.w	80041ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a8:	4b94      	ldr	r3, [pc, #592]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d019      	beq.n	80040e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040b4:	4b91      	ldr	r3, [pc, #580]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b8b      	ldr	r3, [pc, #556]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b88      	ldr	r3, [pc, #544]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x124>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e25a      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x90>
 800410a:	4b7c      	ldr	r3, [pc, #496]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7b      	ldr	r2, [pc, #492]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xcc>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0xb4>
 8004122:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a75      	ldr	r2, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b73      	ldr	r3, [pc, #460]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a72      	ldr	r2, [pc, #456]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xcc>
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6e      	ldr	r2, [pc, #440]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6b      	ldr	r2, [pc, #428]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fb86 	bl	800186c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fd fb82 	bl	800186c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e21f      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b61      	ldr	r3, [pc, #388]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xdc>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd fb72 	bl	800186c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd fb6e 	bl	800186c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e20b      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b57      	ldr	r3, [pc, #348]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x104>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d06f      	beq.n	800429a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ba:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041c6:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041d2:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d11c      	bne.n	8004224 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b44      	ldr	r3, [pc, #272]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d116      	bne.n	8004224 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_RCC_OscConfig+0x186>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e1d3      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4937      	ldr	r1, [pc, #220]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	e03a      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_RCC_OscConfig+0x278>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd fb1b 	bl	800186c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423a:	f7fd fb17 	bl	800186c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1b4      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4925      	ldr	r1, [pc, #148]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]
 800426c:	e015      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x278>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fafa 	bl	800186c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427c:	f7fd faf6 	bl	800186c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e193      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d036      	beq.n	8004314 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b4:	f7fd fada 	bl	800186c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fd fad6 	bl	800186c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e173      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x234>
 80042da:	e01b      	b.n	8004314 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_OscConfig+0x27c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fac3 	bl	800186c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e8:	e00e      	b.n	8004308 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fd fabf 	bl	800186c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d907      	bls.n	8004308 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e15c      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
 80042fc:	40023800 	.word	0x40023800
 8004300:	42470000 	.word	0x42470000
 8004304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b8a      	ldr	r3, [pc, #552]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ea      	bne.n	80042ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8097 	beq.w	8004450 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b83      	ldr	r3, [pc, #524]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	4b7f      	ldr	r3, [pc, #508]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a7e      	ldr	r2, [pc, #504]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b7c      	ldr	r3, [pc, #496]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b79      	ldr	r3, [pc, #484]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435e:	4b76      	ldr	r3, [pc, #472]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a75      	ldr	r2, [pc, #468]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7fd fa7f 	bl	800186c <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7fd fa7b 	bl	800186c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e118      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b6c      	ldr	r3, [pc, #432]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x31e>
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a65      	ldr	r2, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	e01c      	b.n	80043e0 <HAL_RCC_OscConfig+0x358>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x340>
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a60      	ldr	r2, [pc, #384]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a5d      	ldr	r2, [pc, #372]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0x358>
 80043c8:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a59      	ldr	r2, [pc, #356]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a56      	ldr	r2, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd fa40 	bl	800186c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd fa3c 	bl	800186c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e0d7      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ee      	beq.n	80043f0 <HAL_RCC_OscConfig+0x368>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fd fa2a 	bl	800186c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fd fa26 	bl	800186c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0c1      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004432:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ee      	bne.n	800441c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80ad 	beq.w	80045b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b08      	cmp	r3, #8
 8004464:	d060      	beq.n	8004528 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d145      	bne.n	80044fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd f9fa 	bl	800186c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fd f9f6 	bl	800186c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e093      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b29      	ldr	r3, [pc, #164]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	3b01      	subs	r3, #1
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	491b      	ldr	r1, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fd f9cb 	bl	800186c <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd f9c7 	bl	800186c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e064      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x452>
 80044f8:	e05c      	b.n	80045b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd f9b4 	bl	800186c <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fd f9b0 	bl	800186c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e04d      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x480>
 8004526:	e045      	b.n	80045b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e040      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
 8004534:	40023800 	.word	0x40023800
 8004538:	40007000 	.word	0x40007000
 800453c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004540:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <HAL_RCC_OscConfig+0x538>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d030      	beq.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d129      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d122      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004578:	4293      	cmp	r3, r2
 800457a:	d119      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d10f      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc ffe0 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f973 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	d175      	bne.n	8004770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_UART_Transmit+0x2c>
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e06e      	b.n	8004772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2221      	movs	r2, #33	; 0x21
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a2:	f7fd f8e3 	bl	800186c <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	88fa      	ldrh	r2, [r7, #6]
 80046b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d108      	bne.n	80046d0 <HAL_UART_Transmit+0x6c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e003      	b.n	80046d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d8:	e02e      	b.n	8004738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f848 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e03a      	b.n	8004772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3302      	adds	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e007      	b.n	800472a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3301      	adds	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1cb      	bne.n	80046da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	; 0x40
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f814 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478a:	e03b      	b.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d037      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fd f86a 	bl	800186c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <UART_WaitOnFlagUntilTimeout+0x30>
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e03a      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d023      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d020      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d01d      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d116      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f81d 	bl	800482c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2208      	movs	r2, #8
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e00f      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	d0b4      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b095      	sub	sp, #84	; 0x54
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004854:	643a      	str	r2, [r7, #64]	; 0x40
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3314      	adds	r3, #20
 800486e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	61fb      	str	r3, [r7, #28]
   return(result);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d119      	bne.n	80048d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0310 	bic.w	r3, r3, #16
 80048ba:	647b      	str	r3, [r7, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c4:	61ba      	str	r2, [r7, #24]
 80048c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6979      	ldr	r1, [r7, #20]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	613b      	str	r3, [r7, #16]
   return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048e6:	bf00      	nop
 80048e8:	3754      	adds	r7, #84	; 0x54
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f8:	b0c0      	sub	sp, #256	; 0x100
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	68d9      	ldr	r1, [r3, #12]
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	ea40 0301 	orr.w	r3, r0, r1
 800491c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	431a      	orrs	r2, r3
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	431a      	orrs	r2, r3
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800494c:	f021 010c 	bic.w	r1, r1, #12
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	6999      	ldr	r1, [r3, #24]
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	ea40 0301 	orr.w	r3, r0, r1
 800497a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b8f      	ldr	r3, [pc, #572]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d005      	beq.n	8004994 <UART_SetConfig+0xa0>
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b8d      	ldr	r3, [pc, #564]	; (8004bc4 <UART_SetConfig+0x2d0>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d104      	bne.n	800499e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7ff f934 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8004998:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800499c:	e003      	b.n	80049a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800499e:	f7ff f91b 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80049a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	f040 810c 	bne.w	8004bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ce:	415b      	adcs	r3, r3
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049d6:	4621      	mov	r1, r4
 80049d8:	eb12 0801 	adds.w	r8, r2, r1
 80049dc:	4629      	mov	r1, r5
 80049de:	eb43 0901 	adc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a04:	462b      	mov	r3, r5
 8004a06:	eb49 0303 	adc.w	r3, r9, r3
 8004a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a22:	460b      	mov	r3, r1
 8004a24:	18db      	adds	r3, r3, r3
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50
 8004a28:	4613      	mov	r3, r2
 8004a2a:	eb42 0303 	adc.w	r3, r2, r3
 8004a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a38:	f7fb fc3a 	bl	80002b0 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	011c      	lsls	r4, r3, #4
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a64:	415b      	adcs	r3, r3
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a72:	4649      	mov	r1, r9
 8004a74:	eb43 0b01 	adc.w	fp, r3, r1
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a8c:	4692      	mov	sl, r2
 8004a8e:	469b      	mov	fp, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	eb1a 0303 	adds.w	r3, sl, r3
 8004a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	18db      	adds	r3, r3, r3
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
 8004abe:	4613      	mov	r3, r2
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ace:	f7fb fbef 	bl	80002b0 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004af0:	fba3 2302 	umull	r2, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004afc:	441c      	add	r4, r3
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b20:	4641      	mov	r1, r8
 8004b22:	1851      	adds	r1, r2, r1
 8004b24:	6339      	str	r1, [r7, #48]	; 0x30
 8004b26:	4649      	mov	r1, r9
 8004b28:	414b      	adcs	r3, r1
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b38:	4659      	mov	r1, fp
 8004b3a:	00cb      	lsls	r3, r1, #3
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b42:	4651      	mov	r1, sl
 8004b44:	00ca      	lsls	r2, r1, #3
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b54:	464b      	mov	r3, r9
 8004b56:	460a      	mov	r2, r1
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b8a:	f7fb fb91 	bl	80002b0 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	; 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4422      	add	r2, r4
 8004bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bbc:	e106      	b.n	8004dcc <UART_SetConfig+0x4d8>
 8004bbe:	bf00      	nop
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	6239      	str	r1, [r7, #32]
 8004be6:	415b      	adcs	r3, r3
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bee:	4641      	mov	r1, r8
 8004bf0:	1854      	adds	r4, r2, r1
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	eb43 0501 	adc.w	r5, r3, r1
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c14:	464b      	mov	r3, r9
 8004c16:	eb45 0303 	adc.w	r3, r5, r3
 8004c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	008b      	lsls	r3, r1, #2
 8004c3e:	4621      	mov	r1, r4
 8004c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c44:	4621      	mov	r1, r4
 8004c46:	008a      	lsls	r2, r1, #2
 8004c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c4c:	f7fb fb30 	bl	80002b0 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4b60      	ldr	r3, [pc, #384]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004c56:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	011c      	lsls	r4, r3, #4
 8004c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	1891      	adds	r1, r2, r2
 8004c76:	61b9      	str	r1, [r7, #24]
 8004c78:	415b      	adcs	r3, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c80:	4641      	mov	r1, r8
 8004c82:	1851      	adds	r1, r2, r1
 8004c84:	6139      	str	r1, [r7, #16]
 8004c86:	4649      	mov	r1, r9
 8004c88:	414b      	adcs	r3, r1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c98:	4659      	mov	r1, fp
 8004c9a:	00cb      	lsls	r3, r1, #3
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	00ca      	lsls	r2, r1, #3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	4642      	mov	r2, r8
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	eb42 0303 	adc.w	r3, r2, r3
 8004cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cea:	f7fb fae1 	bl	80002b0 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2264      	movs	r2, #100	; 0x64
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	1acb      	subs	r3, r1, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a33      	ldr	r2, [pc, #204]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d14:	441c      	add	r4, r3
 8004d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d1e:	677a      	str	r2, [r7, #116]	; 0x74
 8004d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	1891      	adds	r1, r2, r2
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	415b      	adcs	r3, r3
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d34:	4641      	mov	r1, r8
 8004d36:	1851      	adds	r1, r2, r1
 8004d38:	6039      	str	r1, [r7, #0]
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	414b      	adcs	r3, r1
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	00cb      	lsls	r3, r1, #3
 8004d50:	4651      	mov	r1, sl
 8004d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d56:	4651      	mov	r1, sl
 8004d58:	00ca      	lsls	r2, r1, #3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4642      	mov	r2, r8
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d66:	464b      	mov	r3, r9
 8004d68:	460a      	mov	r2, r1
 8004d6a:	eb42 0303 	adc.w	r3, r2, r3
 8004d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7a:	667a      	str	r2, [r7, #100]	; 0x64
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d88:	4649      	mov	r1, r9
 8004d8a:	008b      	lsls	r3, r1, #2
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d92:	4641      	mov	r1, r8
 8004d94:	008a      	lsls	r2, r1, #2
 8004d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d9a:	f7fb fa89 	bl	80002b0 <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004da4:	fba3 1302 	umull	r1, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	2164      	movs	r1, #100	; 0x64
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	3332      	adds	r3, #50	; 0x32
 8004db6:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4422      	add	r2, r4
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <siprintf>:
 8004ddc:	b40e      	push	{r1, r2, r3}
 8004dde:	b500      	push	{lr}
 8004de0:	b09c      	sub	sp, #112	; 0x70
 8004de2:	ab1d      	add	r3, sp, #116	; 0x74
 8004de4:	9002      	str	r0, [sp, #8]
 8004de6:	9006      	str	r0, [sp, #24]
 8004de8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dec:	4809      	ldr	r0, [pc, #36]	; (8004e14 <siprintf+0x38>)
 8004dee:	9107      	str	r1, [sp, #28]
 8004df0:	9104      	str	r1, [sp, #16]
 8004df2:	4909      	ldr	r1, [pc, #36]	; (8004e18 <siprintf+0x3c>)
 8004df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df8:	9105      	str	r1, [sp, #20]
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	a902      	add	r1, sp, #8
 8004e00:	f000 f992 	bl	8005128 <_svfiprintf_r>
 8004e04:	9b02      	ldr	r3, [sp, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	b01c      	add	sp, #112	; 0x70
 8004e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e10:	b003      	add	sp, #12
 8004e12:	4770      	bx	lr
 8004e14:	20000058 	.word	0x20000058
 8004e18:	ffff0208 	.word	0xffff0208

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000058 	.word	0x20000058

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	; (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	; (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	; (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	; (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f000 fc6a 	bl	8005724 <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	080057f4 	.word	0x080057f4
 8004e74:	080057f4 	.word	0x080057f4
 8004e78:	080057f4 	.word	0x080057f4
 8004e7c:	080057f8 	.word	0x080057f8

08004e80 <__retarget_lock_acquire_recursive>:
 8004e80:	4770      	bx	lr

08004e82 <__retarget_lock_release_recursive>:
 8004e82:	4770      	bx	lr

08004e84 <_free_r>:
 8004e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d044      	beq.n	8004f14 <_free_r+0x90>
 8004e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8e:	9001      	str	r0, [sp, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f1a1 0404 	sub.w	r4, r1, #4
 8004e96:	bfb8      	it	lt
 8004e98:	18e4      	addlt	r4, r4, r3
 8004e9a:	f000 f8df 	bl	800505c <__malloc_lock>
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <_free_r+0x94>)
 8004ea0:	9801      	ldr	r0, [sp, #4]
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	b933      	cbnz	r3, 8004eb4 <_free_r+0x30>
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	6014      	str	r4, [r2, #0]
 8004eaa:	b003      	add	sp, #12
 8004eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb0:	f000 b8da 	b.w	8005068 <__malloc_unlock>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d908      	bls.n	8004eca <_free_r+0x46>
 8004eb8:	6825      	ldr	r5, [r4, #0]
 8004eba:	1961      	adds	r1, r4, r5
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	bf01      	itttt	eq
 8004ec0:	6819      	ldreq	r1, [r3, #0]
 8004ec2:	685b      	ldreq	r3, [r3, #4]
 8004ec4:	1949      	addeq	r1, r1, r5
 8004ec6:	6021      	streq	r1, [r4, #0]
 8004ec8:	e7ed      	b.n	8004ea6 <_free_r+0x22>
 8004eca:	461a      	mov	r2, r3
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b10b      	cbz	r3, 8004ed4 <_free_r+0x50>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d9fa      	bls.n	8004eca <_free_r+0x46>
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	1855      	adds	r5, r2, r1
 8004ed8:	42a5      	cmp	r5, r4
 8004eda:	d10b      	bne.n	8004ef4 <_free_r+0x70>
 8004edc:	6824      	ldr	r4, [r4, #0]
 8004ede:	4421      	add	r1, r4
 8004ee0:	1854      	adds	r4, r2, r1
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	d1e0      	bne.n	8004eaa <_free_r+0x26>
 8004ee8:	681c      	ldr	r4, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	6053      	str	r3, [r2, #4]
 8004eee:	440c      	add	r4, r1
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	e7da      	b.n	8004eaa <_free_r+0x26>
 8004ef4:	d902      	bls.n	8004efc <_free_r+0x78>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	6003      	str	r3, [r0, #0]
 8004efa:	e7d6      	b.n	8004eaa <_free_r+0x26>
 8004efc:	6825      	ldr	r5, [r4, #0]
 8004efe:	1961      	adds	r1, r4, r5
 8004f00:	428b      	cmp	r3, r1
 8004f02:	bf04      	itt	eq
 8004f04:	6819      	ldreq	r1, [r3, #0]
 8004f06:	685b      	ldreq	r3, [r3, #4]
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	bf04      	itt	eq
 8004f0c:	1949      	addeq	r1, r1, r5
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	6054      	str	r4, [r2, #4]
 8004f12:	e7ca      	b.n	8004eaa <_free_r+0x26>
 8004f14:	b003      	add	sp, #12
 8004f16:	bd30      	pop	{r4, r5, pc}
 8004f18:	20000310 	.word	0x20000310

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0e      	ldr	r6, [pc, #56]	; (8004f58 <sbrk_aligned+0x3c>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f000 fba6 	bl	8005678 <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 fba1 	bl	8005678 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d00a      	beq.n	8004f50 <sbrk_aligned+0x34>
 8004f3a:	1cc4      	adds	r4, r0, #3
 8004f3c:	f024 0403 	bic.w	r4, r4, #3
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d007      	beq.n	8004f54 <sbrk_aligned+0x38>
 8004f44:	1a21      	subs	r1, r4, r0
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 fb96 	bl	8005678 <_sbrk_r>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d101      	bne.n	8004f54 <sbrk_aligned+0x38>
 8004f50:	f04f 34ff 	mov.w	r4, #4294967295
 8004f54:	4620      	mov	r0, r4
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	20000314 	.word	0x20000314

08004f5c <_malloc_r>:
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	1ccd      	adds	r5, r1, #3
 8004f62:	f025 0503 	bic.w	r5, r5, #3
 8004f66:	3508      	adds	r5, #8
 8004f68:	2d0c      	cmp	r5, #12
 8004f6a:	bf38      	it	cc
 8004f6c:	250c      	movcc	r5, #12
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	4607      	mov	r7, r0
 8004f72:	db01      	blt.n	8004f78 <_malloc_r+0x1c>
 8004f74:	42a9      	cmp	r1, r5
 8004f76:	d905      	bls.n	8004f84 <_malloc_r+0x28>
 8004f78:	230c      	movs	r3, #12
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005058 <_malloc_r+0xfc>
 8004f88:	f000 f868 	bl	800505c <__malloc_lock>
 8004f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f90:	461c      	mov	r4, r3
 8004f92:	bb5c      	cbnz	r4, 8004fec <_malloc_r+0x90>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ffc0 	bl	8004f1c <sbrk_aligned>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	d155      	bne.n	800504e <_malloc_r+0xf2>
 8004fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa6:	4626      	mov	r6, r4
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	d145      	bne.n	8005038 <_malloc_r+0xdc>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d048      	beq.n	8005042 <_malloc_r+0xe6>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	eb04 0903 	add.w	r9, r4, r3
 8004fba:	f000 fb5d 	bl	8005678 <_sbrk_r>
 8004fbe:	4581      	cmp	r9, r0
 8004fc0:	d13f      	bne.n	8005042 <_malloc_r+0xe6>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1a6d      	subs	r5, r5, r1
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ffa7 	bl	8004f1c <sbrk_aligned>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d037      	beq.n	8005042 <_malloc_r+0xe6>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	442b      	add	r3, r5
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d038      	beq.n	8005052 <_malloc_r+0xf6>
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	42a2      	cmp	r2, r4
 8004fe4:	d12b      	bne.n	800503e <_malloc_r+0xe2>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e00f      	b.n	800500c <_malloc_r+0xb0>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	1b52      	subs	r2, r2, r5
 8004ff0:	d41f      	bmi.n	8005032 <_malloc_r+0xd6>
 8004ff2:	2a0b      	cmp	r2, #11
 8004ff4:	d917      	bls.n	8005026 <_malloc_r+0xca>
 8004ff6:	1961      	adds	r1, r4, r5
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	bf18      	it	ne
 8004ffe:	6059      	strne	r1, [r3, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	bf08      	it	eq
 8005004:	f8c8 1000 	streq.w	r1, [r8]
 8005008:	5162      	str	r2, [r4, r5]
 800500a:	604b      	str	r3, [r1, #4]
 800500c:	4638      	mov	r0, r7
 800500e:	f104 060b 	add.w	r6, r4, #11
 8005012:	f000 f829 	bl	8005068 <__malloc_unlock>
 8005016:	f026 0607 	bic.w	r6, r6, #7
 800501a:	1d23      	adds	r3, r4, #4
 800501c:	1af2      	subs	r2, r6, r3
 800501e:	d0ae      	beq.n	8004f7e <_malloc_r+0x22>
 8005020:	1b9b      	subs	r3, r3, r6
 8005022:	50a3      	str	r3, [r4, r2]
 8005024:	e7ab      	b.n	8004f7e <_malloc_r+0x22>
 8005026:	42a3      	cmp	r3, r4
 8005028:	6862      	ldr	r2, [r4, #4]
 800502a:	d1dd      	bne.n	8004fe8 <_malloc_r+0x8c>
 800502c:	f8c8 2000 	str.w	r2, [r8]
 8005030:	e7ec      	b.n	800500c <_malloc_r+0xb0>
 8005032:	4623      	mov	r3, r4
 8005034:	6864      	ldr	r4, [r4, #4]
 8005036:	e7ac      	b.n	8004f92 <_malloc_r+0x36>
 8005038:	4634      	mov	r4, r6
 800503a:	6876      	ldr	r6, [r6, #4]
 800503c:	e7b4      	b.n	8004fa8 <_malloc_r+0x4c>
 800503e:	4613      	mov	r3, r2
 8005040:	e7cc      	b.n	8004fdc <_malloc_r+0x80>
 8005042:	230c      	movs	r3, #12
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4638      	mov	r0, r7
 8005048:	f000 f80e 	bl	8005068 <__malloc_unlock>
 800504c:	e797      	b.n	8004f7e <_malloc_r+0x22>
 800504e:	6025      	str	r5, [r4, #0]
 8005050:	e7dc      	b.n	800500c <_malloc_r+0xb0>
 8005052:	605b      	str	r3, [r3, #4]
 8005054:	deff      	udf	#255	; 0xff
 8005056:	bf00      	nop
 8005058:	20000310 	.word	0x20000310

0800505c <__malloc_lock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_lock+0x8>)
 800505e:	f7ff bf0f 	b.w	8004e80 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	2000030c 	.word	0x2000030c

08005068 <__malloc_unlock>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__malloc_unlock+0x8>)
 800506a:	f7ff bf0a 	b.w	8004e82 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	2000030c 	.word	0x2000030c

08005074 <__ssputs_r>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	688e      	ldr	r6, [r1, #8]
 800507a:	461f      	mov	r7, r3
 800507c:	42be      	cmp	r6, r7
 800507e:	680b      	ldr	r3, [r1, #0]
 8005080:	4682      	mov	sl, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4690      	mov	r8, r2
 8005086:	d82c      	bhi.n	80050e2 <__ssputs_r+0x6e>
 8005088:	898a      	ldrh	r2, [r1, #12]
 800508a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800508e:	d026      	beq.n	80050de <__ssputs_r+0x6a>
 8005090:	6965      	ldr	r5, [r4, #20]
 8005092:	6909      	ldr	r1, [r1, #16]
 8005094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005098:	eba3 0901 	sub.w	r9, r3, r1
 800509c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050a0:	1c7b      	adds	r3, r7, #1
 80050a2:	444b      	add	r3, r9
 80050a4:	106d      	asrs	r5, r5, #1
 80050a6:	429d      	cmp	r5, r3
 80050a8:	bf38      	it	cc
 80050aa:	461d      	movcc	r5, r3
 80050ac:	0553      	lsls	r3, r2, #21
 80050ae:	d527      	bpl.n	8005100 <__ssputs_r+0x8c>
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7ff ff53 	bl	8004f5c <_malloc_r>
 80050b6:	4606      	mov	r6, r0
 80050b8:	b360      	cbz	r0, 8005114 <__ssputs_r+0xa0>
 80050ba:	6921      	ldr	r1, [r4, #16]
 80050bc:	464a      	mov	r2, r9
 80050be:	f000 faeb 	bl	8005698 <memcpy>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	6126      	str	r6, [r4, #16]
 80050d0:	6165      	str	r5, [r4, #20]
 80050d2:	444e      	add	r6, r9
 80050d4:	eba5 0509 	sub.w	r5, r5, r9
 80050d8:	6026      	str	r6, [r4, #0]
 80050da:	60a5      	str	r5, [r4, #8]
 80050dc:	463e      	mov	r6, r7
 80050de:	42be      	cmp	r6, r7
 80050e0:	d900      	bls.n	80050e4 <__ssputs_r+0x70>
 80050e2:	463e      	mov	r6, r7
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	4632      	mov	r2, r6
 80050e8:	4641      	mov	r1, r8
 80050ea:	f000 faab 	bl	8005644 <memmove>
 80050ee:	68a3      	ldr	r3, [r4, #8]
 80050f0:	1b9b      	subs	r3, r3, r6
 80050f2:	60a3      	str	r3, [r4, #8]
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	4433      	add	r3, r6
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	2000      	movs	r0, #0
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	462a      	mov	r2, r5
 8005102:	f000 fad7 	bl	80056b4 <_realloc_r>
 8005106:	4606      	mov	r6, r0
 8005108:	2800      	cmp	r0, #0
 800510a:	d1e0      	bne.n	80050ce <__ssputs_r+0x5a>
 800510c:	6921      	ldr	r1, [r4, #16]
 800510e:	4650      	mov	r0, sl
 8005110:	f7ff feb8 	bl	8004e84 <_free_r>
 8005114:	230c      	movs	r3, #12
 8005116:	f8ca 3000 	str.w	r3, [sl]
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	e7e9      	b.n	80050fc <__ssputs_r+0x88>

08005128 <_svfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	4698      	mov	r8, r3
 800512e:	898b      	ldrh	r3, [r1, #12]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	b09d      	sub	sp, #116	; 0x74
 8005134:	4607      	mov	r7, r0
 8005136:	460d      	mov	r5, r1
 8005138:	4614      	mov	r4, r2
 800513a:	d50e      	bpl.n	800515a <_svfiprintf_r+0x32>
 800513c:	690b      	ldr	r3, [r1, #16]
 800513e:	b963      	cbnz	r3, 800515a <_svfiprintf_r+0x32>
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	f7ff ff0b 	bl	8004f5c <_malloc_r>
 8005146:	6028      	str	r0, [r5, #0]
 8005148:	6128      	str	r0, [r5, #16]
 800514a:	b920      	cbnz	r0, 8005156 <_svfiprintf_r+0x2e>
 800514c:	230c      	movs	r3, #12
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e0d0      	b.n	80052f8 <_svfiprintf_r+0x1d0>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	616b      	str	r3, [r5, #20]
 800515a:	2300      	movs	r3, #0
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	2320      	movs	r3, #32
 8005160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005164:	f8cd 800c 	str.w	r8, [sp, #12]
 8005168:	2330      	movs	r3, #48	; 0x30
 800516a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005310 <_svfiprintf_r+0x1e8>
 800516e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005172:	f04f 0901 	mov.w	r9, #1
 8005176:	4623      	mov	r3, r4
 8005178:	469a      	mov	sl, r3
 800517a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517e:	b10a      	cbz	r2, 8005184 <_svfiprintf_r+0x5c>
 8005180:	2a25      	cmp	r2, #37	; 0x25
 8005182:	d1f9      	bne.n	8005178 <_svfiprintf_r+0x50>
 8005184:	ebba 0b04 	subs.w	fp, sl, r4
 8005188:	d00b      	beq.n	80051a2 <_svfiprintf_r+0x7a>
 800518a:	465b      	mov	r3, fp
 800518c:	4622      	mov	r2, r4
 800518e:	4629      	mov	r1, r5
 8005190:	4638      	mov	r0, r7
 8005192:	f7ff ff6f 	bl	8005074 <__ssputs_r>
 8005196:	3001      	adds	r0, #1
 8005198:	f000 80a9 	beq.w	80052ee <_svfiprintf_r+0x1c6>
 800519c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800519e:	445a      	add	r2, fp
 80051a0:	9209      	str	r2, [sp, #36]	; 0x24
 80051a2:	f89a 3000 	ldrb.w	r3, [sl]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80a1 	beq.w	80052ee <_svfiprintf_r+0x1c6>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295
 80051b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b6:	f10a 0a01 	add.w	sl, sl, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c2:	931a      	str	r3, [sp, #104]	; 0x68
 80051c4:	4654      	mov	r4, sl
 80051c6:	2205      	movs	r2, #5
 80051c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051cc:	4850      	ldr	r0, [pc, #320]	; (8005310 <_svfiprintf_r+0x1e8>)
 80051ce:	f7fb f81f 	bl	8000210 <memchr>
 80051d2:	9a04      	ldr	r2, [sp, #16]
 80051d4:	b9d8      	cbnz	r0, 800520e <_svfiprintf_r+0xe6>
 80051d6:	06d0      	lsls	r0, r2, #27
 80051d8:	bf44      	itt	mi
 80051da:	2320      	movmi	r3, #32
 80051dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e0:	0711      	lsls	r1, r2, #28
 80051e2:	bf44      	itt	mi
 80051e4:	232b      	movmi	r3, #43	; 0x2b
 80051e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ea:	f89a 3000 	ldrb.w	r3, [sl]
 80051ee:	2b2a      	cmp	r3, #42	; 0x2a
 80051f0:	d015      	beq.n	800521e <_svfiprintf_r+0xf6>
 80051f2:	9a07      	ldr	r2, [sp, #28]
 80051f4:	4654      	mov	r4, sl
 80051f6:	2000      	movs	r0, #0
 80051f8:	f04f 0c0a 	mov.w	ip, #10
 80051fc:	4621      	mov	r1, r4
 80051fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005202:	3b30      	subs	r3, #48	; 0x30
 8005204:	2b09      	cmp	r3, #9
 8005206:	d94d      	bls.n	80052a4 <_svfiprintf_r+0x17c>
 8005208:	b1b0      	cbz	r0, 8005238 <_svfiprintf_r+0x110>
 800520a:	9207      	str	r2, [sp, #28]
 800520c:	e014      	b.n	8005238 <_svfiprintf_r+0x110>
 800520e:	eba0 0308 	sub.w	r3, r0, r8
 8005212:	fa09 f303 	lsl.w	r3, r9, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	46a2      	mov	sl, r4
 800521c:	e7d2      	b.n	80051c4 <_svfiprintf_r+0x9c>
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	9103      	str	r1, [sp, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfbb      	ittet	lt
 800522a:	425b      	neglt	r3, r3
 800522c:	f042 0202 	orrlt.w	r2, r2, #2
 8005230:	9307      	strge	r3, [sp, #28]
 8005232:	9307      	strlt	r3, [sp, #28]
 8005234:	bfb8      	it	lt
 8005236:	9204      	strlt	r2, [sp, #16]
 8005238:	7823      	ldrb	r3, [r4, #0]
 800523a:	2b2e      	cmp	r3, #46	; 0x2e
 800523c:	d10c      	bne.n	8005258 <_svfiprintf_r+0x130>
 800523e:	7863      	ldrb	r3, [r4, #1]
 8005240:	2b2a      	cmp	r3, #42	; 0x2a
 8005242:	d134      	bne.n	80052ae <_svfiprintf_r+0x186>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	1d1a      	adds	r2, r3, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	9203      	str	r2, [sp, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	bfb8      	it	lt
 8005250:	f04f 33ff 	movlt.w	r3, #4294967295
 8005254:	3402      	adds	r4, #2
 8005256:	9305      	str	r3, [sp, #20]
 8005258:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005320 <_svfiprintf_r+0x1f8>
 800525c:	7821      	ldrb	r1, [r4, #0]
 800525e:	2203      	movs	r2, #3
 8005260:	4650      	mov	r0, sl
 8005262:	f7fa ffd5 	bl	8000210 <memchr>
 8005266:	b138      	cbz	r0, 8005278 <_svfiprintf_r+0x150>
 8005268:	9b04      	ldr	r3, [sp, #16]
 800526a:	eba0 000a 	sub.w	r0, r0, sl
 800526e:	2240      	movs	r2, #64	; 0x40
 8005270:	4082      	lsls	r2, r0
 8005272:	4313      	orrs	r3, r2
 8005274:	3401      	adds	r4, #1
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527c:	4825      	ldr	r0, [pc, #148]	; (8005314 <_svfiprintf_r+0x1ec>)
 800527e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005282:	2206      	movs	r2, #6
 8005284:	f7fa ffc4 	bl	8000210 <memchr>
 8005288:	2800      	cmp	r0, #0
 800528a:	d038      	beq.n	80052fe <_svfiprintf_r+0x1d6>
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <_svfiprintf_r+0x1f0>)
 800528e:	bb1b      	cbnz	r3, 80052d8 <_svfiprintf_r+0x1b0>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	3307      	adds	r3, #7
 8005294:	f023 0307 	bic.w	r3, r3, #7
 8005298:	3308      	adds	r3, #8
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	4433      	add	r3, r6
 80052a0:	9309      	str	r3, [sp, #36]	; 0x24
 80052a2:	e768      	b.n	8005176 <_svfiprintf_r+0x4e>
 80052a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a8:	460c      	mov	r4, r1
 80052aa:	2001      	movs	r0, #1
 80052ac:	e7a6      	b.n	80051fc <_svfiprintf_r+0xd4>
 80052ae:	2300      	movs	r3, #0
 80052b0:	3401      	adds	r4, #1
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	4619      	mov	r1, r3
 80052b6:	f04f 0c0a 	mov.w	ip, #10
 80052ba:	4620      	mov	r0, r4
 80052bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c0:	3a30      	subs	r2, #48	; 0x30
 80052c2:	2a09      	cmp	r2, #9
 80052c4:	d903      	bls.n	80052ce <_svfiprintf_r+0x1a6>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0c6      	beq.n	8005258 <_svfiprintf_r+0x130>
 80052ca:	9105      	str	r1, [sp, #20]
 80052cc:	e7c4      	b.n	8005258 <_svfiprintf_r+0x130>
 80052ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d2:	4604      	mov	r4, r0
 80052d4:	2301      	movs	r3, #1
 80052d6:	e7f0      	b.n	80052ba <_svfiprintf_r+0x192>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	462a      	mov	r2, r5
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <_svfiprintf_r+0x1f4>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4638      	mov	r0, r7
 80052e4:	f3af 8000 	nop.w
 80052e8:	1c42      	adds	r2, r0, #1
 80052ea:	4606      	mov	r6, r0
 80052ec:	d1d6      	bne.n	800529c <_svfiprintf_r+0x174>
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	065b      	lsls	r3, r3, #25
 80052f2:	f53f af2d 	bmi.w	8005150 <_svfiprintf_r+0x28>
 80052f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f8:	b01d      	add	sp, #116	; 0x74
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	ab03      	add	r3, sp, #12
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	462a      	mov	r2, r5
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <_svfiprintf_r+0x1f4>)
 8005306:	a904      	add	r1, sp, #16
 8005308:	4638      	mov	r0, r7
 800530a:	f000 f879 	bl	8005400 <_printf_i>
 800530e:	e7eb      	b.n	80052e8 <_svfiprintf_r+0x1c0>
 8005310:	080057b8 	.word	0x080057b8
 8005314:	080057c2 	.word	0x080057c2
 8005318:	00000000 	.word	0x00000000
 800531c:	08005075 	.word	0x08005075
 8005320:	080057be 	.word	0x080057be

08005324 <_printf_common>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	4616      	mov	r6, r2
 800532a:	4699      	mov	r9, r3
 800532c:	688a      	ldr	r2, [r1, #8]
 800532e:	690b      	ldr	r3, [r1, #16]
 8005330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005334:	4293      	cmp	r3, r2
 8005336:	bfb8      	it	lt
 8005338:	4613      	movlt	r3, r2
 800533a:	6033      	str	r3, [r6, #0]
 800533c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005340:	4607      	mov	r7, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b10a      	cbz	r2, 800534a <_printf_common+0x26>
 8005346:	3301      	adds	r3, #1
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	0699      	lsls	r1, r3, #26
 800534e:	bf42      	ittt	mi
 8005350:	6833      	ldrmi	r3, [r6, #0]
 8005352:	3302      	addmi	r3, #2
 8005354:	6033      	strmi	r3, [r6, #0]
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	f015 0506 	ands.w	r5, r5, #6
 800535c:	d106      	bne.n	800536c <_printf_common+0x48>
 800535e:	f104 0a19 	add.w	sl, r4, #25
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	6832      	ldr	r2, [r6, #0]
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	42ab      	cmp	r3, r5
 800536a:	dc26      	bgt.n	80053ba <_printf_common+0x96>
 800536c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005370:	1e13      	subs	r3, r2, #0
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	bf18      	it	ne
 8005376:	2301      	movne	r3, #1
 8005378:	0692      	lsls	r2, r2, #26
 800537a:	d42b      	bmi.n	80053d4 <_printf_common+0xb0>
 800537c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005380:	4649      	mov	r1, r9
 8005382:	4638      	mov	r0, r7
 8005384:	47c0      	blx	r8
 8005386:	3001      	adds	r0, #1
 8005388:	d01e      	beq.n	80053c8 <_printf_common+0xa4>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	f003 0306 	and.w	r3, r3, #6
 8005392:	2b04      	cmp	r3, #4
 8005394:	bf02      	ittt	eq
 8005396:	68e5      	ldreq	r5, [r4, #12]
 8005398:	6833      	ldreq	r3, [r6, #0]
 800539a:	1aed      	subeq	r5, r5, r3
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	bf0c      	ite	eq
 80053a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a4:	2500      	movne	r5, #0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	bfc4      	itt	gt
 80053aa:	1a9b      	subgt	r3, r3, r2
 80053ac:	18ed      	addgt	r5, r5, r3
 80053ae:	2600      	movs	r6, #0
 80053b0:	341a      	adds	r4, #26
 80053b2:	42b5      	cmp	r5, r6
 80053b4:	d11a      	bne.n	80053ec <_printf_common+0xc8>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e008      	b.n	80053cc <_printf_common+0xa8>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4652      	mov	r2, sl
 80053be:	4649      	mov	r1, r9
 80053c0:	4638      	mov	r0, r7
 80053c2:	47c0      	blx	r8
 80053c4:	3001      	adds	r0, #1
 80053c6:	d103      	bne.n	80053d0 <_printf_common+0xac>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	3501      	adds	r5, #1
 80053d2:	e7c6      	b.n	8005362 <_printf_common+0x3e>
 80053d4:	18e1      	adds	r1, r4, r3
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	2030      	movs	r0, #48	; 0x30
 80053da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053de:	4422      	add	r2, r4
 80053e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e8:	3302      	adds	r3, #2
 80053ea:	e7c7      	b.n	800537c <_printf_common+0x58>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4622      	mov	r2, r4
 80053f0:	4649      	mov	r1, r9
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d0e6      	beq.n	80053c8 <_printf_common+0xa4>
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7d9      	b.n	80053b2 <_printf_common+0x8e>
	...

08005400 <_printf_i>:
 8005400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	7e0f      	ldrb	r7, [r1, #24]
 8005406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005408:	2f78      	cmp	r7, #120	; 0x78
 800540a:	4691      	mov	r9, r2
 800540c:	4680      	mov	r8, r0
 800540e:	460c      	mov	r4, r1
 8005410:	469a      	mov	sl, r3
 8005412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005416:	d807      	bhi.n	8005428 <_printf_i+0x28>
 8005418:	2f62      	cmp	r7, #98	; 0x62
 800541a:	d80a      	bhi.n	8005432 <_printf_i+0x32>
 800541c:	2f00      	cmp	r7, #0
 800541e:	f000 80d4 	beq.w	80055ca <_printf_i+0x1ca>
 8005422:	2f58      	cmp	r7, #88	; 0x58
 8005424:	f000 80c0 	beq.w	80055a8 <_printf_i+0x1a8>
 8005428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800542c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005430:	e03a      	b.n	80054a8 <_printf_i+0xa8>
 8005432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005436:	2b15      	cmp	r3, #21
 8005438:	d8f6      	bhi.n	8005428 <_printf_i+0x28>
 800543a:	a101      	add	r1, pc, #4	; (adr r1, 8005440 <_printf_i+0x40>)
 800543c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005440:	08005499 	.word	0x08005499
 8005444:	080054ad 	.word	0x080054ad
 8005448:	08005429 	.word	0x08005429
 800544c:	08005429 	.word	0x08005429
 8005450:	08005429 	.word	0x08005429
 8005454:	08005429 	.word	0x08005429
 8005458:	080054ad 	.word	0x080054ad
 800545c:	08005429 	.word	0x08005429
 8005460:	08005429 	.word	0x08005429
 8005464:	08005429 	.word	0x08005429
 8005468:	08005429 	.word	0x08005429
 800546c:	080055b1 	.word	0x080055b1
 8005470:	080054d9 	.word	0x080054d9
 8005474:	0800556b 	.word	0x0800556b
 8005478:	08005429 	.word	0x08005429
 800547c:	08005429 	.word	0x08005429
 8005480:	080055d3 	.word	0x080055d3
 8005484:	08005429 	.word	0x08005429
 8005488:	080054d9 	.word	0x080054d9
 800548c:	08005429 	.word	0x08005429
 8005490:	08005429 	.word	0x08005429
 8005494:	08005573 	.word	0x08005573
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	602a      	str	r2, [r5, #0]
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a8:	2301      	movs	r3, #1
 80054aa:	e09f      	b.n	80055ec <_printf_i+0x1ec>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	0607      	lsls	r7, r0, #24
 80054b2:	f103 0104 	add.w	r1, r3, #4
 80054b6:	6029      	str	r1, [r5, #0]
 80054b8:	d501      	bpl.n	80054be <_printf_i+0xbe>
 80054ba:	681e      	ldr	r6, [r3, #0]
 80054bc:	e003      	b.n	80054c6 <_printf_i+0xc6>
 80054be:	0646      	lsls	r6, r0, #25
 80054c0:	d5fb      	bpl.n	80054ba <_printf_i+0xba>
 80054c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054c6:	2e00      	cmp	r6, #0
 80054c8:	da03      	bge.n	80054d2 <_printf_i+0xd2>
 80054ca:	232d      	movs	r3, #45	; 0x2d
 80054cc:	4276      	negs	r6, r6
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d2:	485a      	ldr	r0, [pc, #360]	; (800563c <_printf_i+0x23c>)
 80054d4:	230a      	movs	r3, #10
 80054d6:	e012      	b.n	80054fe <_printf_i+0xfe>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	6820      	ldr	r0, [r4, #0]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	6029      	str	r1, [r5, #0]
 80054e0:	0605      	lsls	r5, r0, #24
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0xe8>
 80054e4:	681e      	ldr	r6, [r3, #0]
 80054e6:	e002      	b.n	80054ee <_printf_i+0xee>
 80054e8:	0641      	lsls	r1, r0, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0xe4>
 80054ec:	881e      	ldrh	r6, [r3, #0]
 80054ee:	4853      	ldr	r0, [pc, #332]	; (800563c <_printf_i+0x23c>)
 80054f0:	2f6f      	cmp	r7, #111	; 0x6f
 80054f2:	bf0c      	ite	eq
 80054f4:	2308      	moveq	r3, #8
 80054f6:	230a      	movne	r3, #10
 80054f8:	2100      	movs	r1, #0
 80054fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fe:	6865      	ldr	r5, [r4, #4]
 8005500:	60a5      	str	r5, [r4, #8]
 8005502:	2d00      	cmp	r5, #0
 8005504:	bfa2      	ittt	ge
 8005506:	6821      	ldrge	r1, [r4, #0]
 8005508:	f021 0104 	bicge.w	r1, r1, #4
 800550c:	6021      	strge	r1, [r4, #0]
 800550e:	b90e      	cbnz	r6, 8005514 <_printf_i+0x114>
 8005510:	2d00      	cmp	r5, #0
 8005512:	d04b      	beq.n	80055ac <_printf_i+0x1ac>
 8005514:	4615      	mov	r5, r2
 8005516:	fbb6 f1f3 	udiv	r1, r6, r3
 800551a:	fb03 6711 	mls	r7, r3, r1, r6
 800551e:	5dc7      	ldrb	r7, [r0, r7]
 8005520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005524:	4637      	mov	r7, r6
 8005526:	42bb      	cmp	r3, r7
 8005528:	460e      	mov	r6, r1
 800552a:	d9f4      	bls.n	8005516 <_printf_i+0x116>
 800552c:	2b08      	cmp	r3, #8
 800552e:	d10b      	bne.n	8005548 <_printf_i+0x148>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	07de      	lsls	r6, r3, #31
 8005534:	d508      	bpl.n	8005548 <_printf_i+0x148>
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	6861      	ldr	r1, [r4, #4]
 800553a:	4299      	cmp	r1, r3
 800553c:	bfde      	ittt	le
 800553e:	2330      	movle	r3, #48	; 0x30
 8005540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005548:	1b52      	subs	r2, r2, r5
 800554a:	6122      	str	r2, [r4, #16]
 800554c:	f8cd a000 	str.w	sl, [sp]
 8005550:	464b      	mov	r3, r9
 8005552:	aa03      	add	r2, sp, #12
 8005554:	4621      	mov	r1, r4
 8005556:	4640      	mov	r0, r8
 8005558:	f7ff fee4 	bl	8005324 <_printf_common>
 800555c:	3001      	adds	r0, #1
 800555e:	d14a      	bne.n	80055f6 <_printf_i+0x1f6>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	b004      	add	sp, #16
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f043 0320 	orr.w	r3, r3, #32
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	4833      	ldr	r0, [pc, #204]	; (8005640 <_printf_i+0x240>)
 8005574:	2778      	movs	r7, #120	; 0x78
 8005576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	6829      	ldr	r1, [r5, #0]
 800557e:	061f      	lsls	r7, r3, #24
 8005580:	f851 6b04 	ldr.w	r6, [r1], #4
 8005584:	d402      	bmi.n	800558c <_printf_i+0x18c>
 8005586:	065f      	lsls	r7, r3, #25
 8005588:	bf48      	it	mi
 800558a:	b2b6      	uxthmi	r6, r6
 800558c:	07df      	lsls	r7, r3, #31
 800558e:	bf48      	it	mi
 8005590:	f043 0320 	orrmi.w	r3, r3, #32
 8005594:	6029      	str	r1, [r5, #0]
 8005596:	bf48      	it	mi
 8005598:	6023      	strmi	r3, [r4, #0]
 800559a:	b91e      	cbnz	r6, 80055a4 <_printf_i+0x1a4>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f023 0320 	bic.w	r3, r3, #32
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	2310      	movs	r3, #16
 80055a6:	e7a7      	b.n	80054f8 <_printf_i+0xf8>
 80055a8:	4824      	ldr	r0, [pc, #144]	; (800563c <_printf_i+0x23c>)
 80055aa:	e7e4      	b.n	8005576 <_printf_i+0x176>
 80055ac:	4615      	mov	r5, r2
 80055ae:	e7bd      	b.n	800552c <_printf_i+0x12c>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	6826      	ldr	r6, [r4, #0]
 80055b4:	6961      	ldr	r1, [r4, #20]
 80055b6:	1d18      	adds	r0, r3, #4
 80055b8:	6028      	str	r0, [r5, #0]
 80055ba:	0635      	lsls	r5, r6, #24
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0x1c4>
 80055c0:	6019      	str	r1, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0x1ca>
 80055c4:	0670      	lsls	r0, r6, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0x1c0>
 80055c8:	8019      	strh	r1, [r3, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	4615      	mov	r5, r2
 80055d0:	e7bc      	b.n	800554c <_printf_i+0x14c>
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	602a      	str	r2, [r5, #0]
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	2100      	movs	r1, #0
 80055de:	4628      	mov	r0, r5
 80055e0:	f7fa fe16 	bl	8000210 <memchr>
 80055e4:	b108      	cbz	r0, 80055ea <_printf_i+0x1ea>
 80055e6:	1b40      	subs	r0, r0, r5
 80055e8:	6060      	str	r0, [r4, #4]
 80055ea:	6863      	ldr	r3, [r4, #4]
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	2300      	movs	r3, #0
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f4:	e7aa      	b.n	800554c <_printf_i+0x14c>
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	462a      	mov	r2, r5
 80055fa:	4649      	mov	r1, r9
 80055fc:	4640      	mov	r0, r8
 80055fe:	47d0      	blx	sl
 8005600:	3001      	adds	r0, #1
 8005602:	d0ad      	beq.n	8005560 <_printf_i+0x160>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	079b      	lsls	r3, r3, #30
 8005608:	d413      	bmi.n	8005632 <_printf_i+0x232>
 800560a:	68e0      	ldr	r0, [r4, #12]
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	4298      	cmp	r0, r3
 8005610:	bfb8      	it	lt
 8005612:	4618      	movlt	r0, r3
 8005614:	e7a6      	b.n	8005564 <_printf_i+0x164>
 8005616:	2301      	movs	r3, #1
 8005618:	4632      	mov	r2, r6
 800561a:	4649      	mov	r1, r9
 800561c:	4640      	mov	r0, r8
 800561e:	47d0      	blx	sl
 8005620:	3001      	adds	r0, #1
 8005622:	d09d      	beq.n	8005560 <_printf_i+0x160>
 8005624:	3501      	adds	r5, #1
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	9903      	ldr	r1, [sp, #12]
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	42ab      	cmp	r3, r5
 800562e:	dcf2      	bgt.n	8005616 <_printf_i+0x216>
 8005630:	e7eb      	b.n	800560a <_printf_i+0x20a>
 8005632:	2500      	movs	r5, #0
 8005634:	f104 0619 	add.w	r6, r4, #25
 8005638:	e7f5      	b.n	8005626 <_printf_i+0x226>
 800563a:	bf00      	nop
 800563c:	080057c9 	.word	0x080057c9
 8005640:	080057da 	.word	0x080057da

08005644 <memmove>:
 8005644:	4288      	cmp	r0, r1
 8005646:	b510      	push	{r4, lr}
 8005648:	eb01 0402 	add.w	r4, r1, r2
 800564c:	d902      	bls.n	8005654 <memmove+0x10>
 800564e:	4284      	cmp	r4, r0
 8005650:	4623      	mov	r3, r4
 8005652:	d807      	bhi.n	8005664 <memmove+0x20>
 8005654:	1e43      	subs	r3, r0, #1
 8005656:	42a1      	cmp	r1, r4
 8005658:	d008      	beq.n	800566c <memmove+0x28>
 800565a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005662:	e7f8      	b.n	8005656 <memmove+0x12>
 8005664:	4402      	add	r2, r0
 8005666:	4601      	mov	r1, r0
 8005668:	428a      	cmp	r2, r1
 800566a:	d100      	bne.n	800566e <memmove+0x2a>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005676:	e7f7      	b.n	8005668 <memmove+0x24>

08005678 <_sbrk_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d06      	ldr	r5, [pc, #24]	; (8005694 <_sbrk_r+0x1c>)
 800567c:	2300      	movs	r3, #0
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	f7fc f81a 	bl	80016bc <_sbrk>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_sbrk_r+0x1a>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_sbrk_r+0x1a>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	20000308 	.word	0x20000308

08005698 <memcpy>:
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a0:	d100      	bne.n	80056a4 <memcpy+0xc>
 80056a2:	4770      	bx	lr
 80056a4:	b510      	push	{r4, lr}
 80056a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ae:	4291      	cmp	r1, r2
 80056b0:	d1f9      	bne.n	80056a6 <memcpy+0xe>
 80056b2:	bd10      	pop	{r4, pc}

080056b4 <_realloc_r>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	4680      	mov	r8, r0
 80056ba:	4614      	mov	r4, r2
 80056bc:	460e      	mov	r6, r1
 80056be:	b921      	cbnz	r1, 80056ca <_realloc_r+0x16>
 80056c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	4611      	mov	r1, r2
 80056c6:	f7ff bc49 	b.w	8004f5c <_malloc_r>
 80056ca:	b92a      	cbnz	r2, 80056d8 <_realloc_r+0x24>
 80056cc:	f7ff fbda 	bl	8004e84 <_free_r>
 80056d0:	4625      	mov	r5, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d8:	f000 f81b 	bl	8005712 <_malloc_usable_size_r>
 80056dc:	4284      	cmp	r4, r0
 80056de:	4607      	mov	r7, r0
 80056e0:	d802      	bhi.n	80056e8 <_realloc_r+0x34>
 80056e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056e6:	d812      	bhi.n	800570e <_realloc_r+0x5a>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fc36 	bl	8004f5c <_malloc_r>
 80056f0:	4605      	mov	r5, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0ed      	beq.n	80056d2 <_realloc_r+0x1e>
 80056f6:	42bc      	cmp	r4, r7
 80056f8:	4622      	mov	r2, r4
 80056fa:	4631      	mov	r1, r6
 80056fc:	bf28      	it	cs
 80056fe:	463a      	movcs	r2, r7
 8005700:	f7ff ffca 	bl	8005698 <memcpy>
 8005704:	4631      	mov	r1, r6
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fbbc 	bl	8004e84 <_free_r>
 800570c:	e7e1      	b.n	80056d2 <_realloc_r+0x1e>
 800570e:	4635      	mov	r5, r6
 8005710:	e7df      	b.n	80056d2 <_realloc_r+0x1e>

08005712 <_malloc_usable_size_r>:
 8005712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005716:	1f18      	subs	r0, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfbc      	itt	lt
 800571c:	580b      	ldrlt	r3, [r1, r0]
 800571e:	18c0      	addlt	r0, r0, r3
 8005720:	4770      	bx	lr
	...

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
