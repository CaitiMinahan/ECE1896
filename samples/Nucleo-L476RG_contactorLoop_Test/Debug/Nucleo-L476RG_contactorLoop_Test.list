
Nucleo-L476RG_contactorLoop_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  08004e74  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004e74  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c658  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c60  00000000  00000000  0002c727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002e388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fde  00000000  00000000  0002f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c277  00000000  00000000  00055554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea1b7  00000000  00000000  000617cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e54  00000000  00000000  0014b984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0014e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d10 	.word	0x08004d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004d10 	.word	0x08004d10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <getCellFaults>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

uint16_t getCellFaults(Cell* cell){
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    uint16_t result = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	81fb      	strh	r3, [r7, #14]

    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	031b      	lsls	r3, r3, #12
 800057e:	b21a      	sxth	r2, r3
 8000580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000584:	4313      	orrs	r3, r2
 8000586:	b21b      	sxth	r3, r3
 8000588:	81fb      	strh	r3, [r7, #14]
    result |= (cell->cell & 0x0F) << 8;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21b      	sxth	r3, r3
 8000592:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000596:	b21a      	sxth	r2, r3
 8000598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	81fb      	strh	r3, [r7, #14]

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7f1b      	ldrb	r3, [r3, #28]
 80005a6:	01db      	lsls	r3, r3, #7
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->comm & 0x01) << 6;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7f5b      	ldrb	r3, [r3, #29]
 80005bc:	019b      	lsls	r3, r3, #6
 80005be:	b21b      	sxth	r3, r3
 80005c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_voltage & 0x01) << 5;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7f9b      	ldrb	r3, [r3, #30]
 80005d4:	015b      	lsls	r3, r3, #5
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	b21a      	sxth	r2, r3
 80005de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_voltage & 0x01) << 4;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7fdb      	ldrb	r3, [r3, #31]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_temp & 0x01) << 3;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	b21b      	sxth	r3, r3
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	b21a      	sxth	r2, r3
 8000610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000614:	4313      	orrs	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_temp & 0x01) << 2;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	b21b      	sxth	r3, r3
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b21a      	sxth	r2, r3
 800062a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800062e:	4313      	orrs	r3, r2
 8000630:	b21b      	sxth	r3, r3
 8000632:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_current & 0x01) << 1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b21b      	sxth	r3, r3
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	b21a      	sxth	r2, r3
 8000644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_current & 0x01);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000654:	b21b      	sxth	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b21a      	sxth	r2, r3
 800065c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000660:	4313      	orrs	r3, r2
 8000662:	b21b      	sxth	r3, r3
 8000664:	81fb      	strh	r3, [r7, #14]

    return result;
 8000666:	89fb      	ldrh	r3, [r7, #14]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <setCellFaults>:

void setCellFaults(Cell* cell, CellFault value) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
    // Extract the boolean values
    if (value & POWER_RAIL_FAULT) cell->power_rail = true;
 8000680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000684:	2b00      	cmp	r3, #0
 8000686:	da02      	bge.n	800068e <setCellFaults+0x1a>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	771a      	strb	r2, [r3, #28]
    if (value & COMM_FAULT) cell->comm = true;
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <setCellFaults+0x2a>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	775a      	strb	r2, [r3, #29]
    if (value & OVER_VOLTAGE_FAULT) cell->over_voltage = true;
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <setCellFaults+0x3a>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2201      	movs	r2, #1
 80006ac:	779a      	strb	r2, [r3, #30]
    if (value & UNDER_VOLTAGE_FAULT) cell->under_voltage = true;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <setCellFaults+0x4a>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	77da      	strb	r2, [r3, #31]
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <setCellFaults+0x5c>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
    if (value & UNDER_TEMP_FAULT) cell->under_temp = true;
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <setCellFaults+0x6e>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <setCellFaults+0x80>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    if (value & UNDER_CURRENT_FAULT) cell->under_current = true;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <setCellFaults+0x92>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <clearCellFault>:

void clearCellFault(Cell* cell, CellFault fault) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
    // Clear the corresponding fault
    switch (fault) {
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	d04f      	beq.n	80007c6 <clearCellFault+0xb2>
 8000726:	2b80      	cmp	r3, #128	; 0x80
 8000728:	dc71      	bgt.n	800080e <clearCellFault+0xfa>
 800072a:	2b20      	cmp	r3, #32
 800072c:	dc48      	bgt.n	80007c0 <clearCellFault+0xac>
 800072e:	2b00      	cmp	r3, #0
 8000730:	dd6d      	ble.n	800080e <clearCellFault+0xfa>
 8000732:	3b01      	subs	r3, #1
 8000734:	2b1f      	cmp	r3, #31
 8000736:	d86a      	bhi.n	800080e <clearCellFault+0xfa>
 8000738:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <clearCellFault+0x2c>)
 800073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073e:	bf00      	nop
 8000740:	08000805 	.word	0x08000805
 8000744:	080007fb 	.word	0x080007fb
 8000748:	0800080f 	.word	0x0800080f
 800074c:	080007f1 	.word	0x080007f1
 8000750:	0800080f 	.word	0x0800080f
 8000754:	0800080f 	.word	0x0800080f
 8000758:	0800080f 	.word	0x0800080f
 800075c:	080007e7 	.word	0x080007e7
 8000760:	0800080f 	.word	0x0800080f
 8000764:	0800080f 	.word	0x0800080f
 8000768:	0800080f 	.word	0x0800080f
 800076c:	0800080f 	.word	0x0800080f
 8000770:	0800080f 	.word	0x0800080f
 8000774:	0800080f 	.word	0x0800080f
 8000778:	0800080f 	.word	0x0800080f
 800077c:	080007df 	.word	0x080007df
 8000780:	0800080f 	.word	0x0800080f
 8000784:	0800080f 	.word	0x0800080f
 8000788:	0800080f 	.word	0x0800080f
 800078c:	0800080f 	.word	0x0800080f
 8000790:	0800080f 	.word	0x0800080f
 8000794:	0800080f 	.word	0x0800080f
 8000798:	0800080f 	.word	0x0800080f
 800079c:	0800080f 	.word	0x0800080f
 80007a0:	0800080f 	.word	0x0800080f
 80007a4:	0800080f 	.word	0x0800080f
 80007a8:	0800080f 	.word	0x0800080f
 80007ac:	0800080f 	.word	0x0800080f
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	0800080f 	.word	0x0800080f
 80007b8:	0800080f 	.word	0x0800080f
 80007bc:	080007d7 	.word	0x080007d7
 80007c0:	2b40      	cmp	r3, #64	; 0x40
 80007c2:	d004      	beq.n	80007ce <clearCellFault+0xba>
            break;
        case UNDER_CURRENT_FAULT:
            cell->under_current = false;
            break;
    }
}
 80007c4:	e023      	b.n	800080e <clearCellFault+0xfa>
            cell->power_rail = false;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]
            break;
 80007cc:	e01f      	b.n	800080e <clearCellFault+0xfa>
            cell->comm = false;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	775a      	strb	r2, [r3, #29]
            break;
 80007d4:	e01b      	b.n	800080e <clearCellFault+0xfa>
            cell->over_voltage = false;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	779a      	strb	r2, [r3, #30]
            break;
 80007dc:	e017      	b.n	800080e <clearCellFault+0xfa>
            cell->under_voltage = false;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	77da      	strb	r2, [r3, #31]
            break;
 80007e4:	e013      	b.n	800080e <clearCellFault+0xfa>
            cell->over_temp = false;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80007ee:	e00e      	b.n	800080e <clearCellFault+0xfa>
            cell->under_temp = false;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80007f8:	e009      	b.n	800080e <clearCellFault+0xfa>
            cell->over_current = false;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            break;
 8000802:	e004      	b.n	800080e <clearCellFault+0xfa>
            cell->under_current = false;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            break;
 800080c:	bf00      	nop
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b5b0      	push	{r4, r5, r7, lr}
 800081e:	b0a8      	sub	sp, #160	; 0xa0
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fc47 	bl	80010b4 <HAL_Init>

  // Fault
  uint16_t Fault;

  // Define the Cell
  Cell cell0 = {
 8000826:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800082a:	2224      	movs	r2, #36	; 0x24
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fdea 	bl	8004408 <memset>
 8000834:	2301      	movs	r3, #1
 8000836:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800083a:	2302      	movs	r3, #2
 800083c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
  };

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f976 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 fa4a 	bl	8000cdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000848:	f000 fa18 	bl	8000c7c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800084c:	f000 f9c2 	bl	8000bd4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000850:	48af      	ldr	r0, [pc, #700]	; (8000b10 <main+0x2f4>)
 8000852:	f000 fe94 	bl	800157e <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000856:	2102      	movs	r1, #2
 8000858:	48ad      	ldr	r0, [pc, #692]	; (8000b10 <main+0x2f4>)
 800085a:	f000 ffa4 	bl	80017a6 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 800085e:	4bad      	ldr	r3, [pc, #692]	; (8000b14 <main+0x2f8>)
 8000860:	2202      	movs	r2, #2
 8000862:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000864:	4bab      	ldr	r3, [pc, #684]	; (8000b14 <main+0x2f8>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800086a:	4baa      	ldr	r3, [pc, #680]	; (8000b14 <main+0x2f8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 8000870:	4ba8      	ldr	r3, [pc, #672]	; (8000b14 <main+0x2f8>)
 8000872:	f240 4246 	movw	r2, #1094	; 0x446
 8000876:	601a      	str	r2, [r3, #0]

//  TxData[0] = 200; // ms Delay
//  TxData[1] = 20;  // loop rep

  // Initializing
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	2120      	movs	r1, #32
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f001 fcc4 	bl	800220c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fc90 	bl	80011ac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2120      	movs	r1, #32
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 fcba 	bl	800220c <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */


	/* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f001 fc9c 	bl	80021dc <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d057      	beq.n	800095a <main+0x13e>
 80008aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f001 fc93 	bl	80021dc <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14e      	bne.n	800095a <main+0x13e>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f001 fca2 	bl	800220c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f000 fc6f 	bl	80011ac <HAL_Delay>

		  // Set the Cell Over Temp Fault
		  setCellFaults(&cell0, OVER_TEMP_FAULT);
 80008ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008d2:	2108      	movs	r1, #8
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fecd 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Temp Fault
		  Fault = getCellFaults(&cell0);
 80008da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe44 	bl	800056c <getCellFaults>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 80008ea:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80008ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008f2:	4989      	ldr	r1, [pc, #548]	; (8000b18 <main+0x2fc>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fd67 	bl	80043c8 <siprintf>

		  // Write to UART Over Temp Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 80008fa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	2205      	movs	r2, #5
 8000902:	4886      	ldr	r0, [pc, #536]	; (8000b1c <main+0x300>)
 8000904:	f003 f808 	bl	8003918 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " OVER_TEMP_FAULT\r\n"; //Data to send
 8000908:	4b85      	ldr	r3, [pc, #532]	; (8000b20 <main+0x304>)
 800090a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	8022      	strh	r2, [r4, #0]
 800091a:	3402      	adds	r4, #2
 800091c:	0c1b      	lsrs	r3, r3, #16
 800091e:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 8000920:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	2213      	movs	r2, #19
 8000928:	487c      	ldr	r0, [pc, #496]	; (8000b1c <main+0x300>)
 800092a:	f002 fff5 	bl	8003918 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f000 fc3c 	bl	80011ac <HAL_Delay>

		  // Write to CAN Over Temp Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000934:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000938:	4b7a      	ldr	r3, [pc, #488]	; (8000b24 <main+0x308>)
 800093a:	4976      	ldr	r1, [pc, #472]	; (8000b14 <main+0x2f8>)
 800093c:	4874      	ldr	r0, [pc, #464]	; (8000b10 <main+0x2f4>)
 800093e:	f000 fe62 	bl	8001606 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Temp Fault
		  clearCellFault(&cell0, OVER_TEMP_FAULT);
 8000942:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000946:	2108      	movs	r1, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fee3 	bl	8000714 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f001 fc59 	bl	800220c <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 800095a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 fc3b 	bl	80021dc <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d056      	beq.n	8000a1a <main+0x1fe>
 800096c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f001 fc32 	bl	80021dc <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d14d      	bne.n	8000a1a <main+0x1fe>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f001 fc41 	bl	800220c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f000 fc0e 	bl	80011ac <HAL_Delay>

		  // Set the Cell Over Current Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000990:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe6c 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Current Fault
		  Fault = getCellFaults(&cell0);
 800099c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fde3 	bl	800056c <getCellFaults>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 80009ac:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80009b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b4:	4958      	ldr	r1, [pc, #352]	; (8000b18 <main+0x2fc>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fd06 	bl	80043c8 <siprintf>

		  // Write to UART Over Current Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 80009bc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	2205      	movs	r2, #5
 80009c4:	4855      	ldr	r0, [pc, #340]	; (8000b1c <main+0x300>)
 80009c6:	f002 ffa7 	bl	8003918 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " OVER_CURRENT_FAULT\r\n"; //Data to send
 80009ca:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <main+0x30c>)
 80009cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009da:	6020      	str	r0, [r4, #0]
 80009dc:	3404      	adds	r4, #4
 80009de:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 80009e0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	2216      	movs	r2, #22
 80009e8:	484c      	ldr	r0, [pc, #304]	; (8000b1c <main+0x300>)
 80009ea:	f002 ff95 	bl	8003918 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f000 fbdc 	bl	80011ac <HAL_Delay>

		  // Write to CAN Over Current Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 80009f4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80009f8:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <main+0x308>)
 80009fa:	4946      	ldr	r1, [pc, #280]	; (8000b14 <main+0x2f8>)
 80009fc:	4844      	ldr	r0, [pc, #272]	; (8000b10 <main+0x2f4>)
 80009fe:	f000 fe02 	bl	8001606 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Current Fault
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000a02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe83 	bl	8000714 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f001 fbf9 	bl	800220c <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 fbdb 	bl	80021dc <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f43f af35 	beq.w	8000898 <main+0x7c>
 8000a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 fbd1 	bl	80021dc <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af2b 	beq.w	8000898 <main+0x7c>
		  // Turn ON LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f001 fbdf 	bl	800220c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f001 fbd9 	bl	800220c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f000 fba6 	bl	80011ac <HAL_Delay>

		  // Set the Cell Over Voltage Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000a60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fe04 	bl	8000674 <setCellFaults>
		  setCellFaults(&cell0, UNDER_VOLTAGE_FAULT);
 8000a6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a70:	2110      	movs	r1, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdfe 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Voltage Fault
		  Fault = getCellFaults(&cell0);
 8000a78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd75 	bl	800056c <getCellFaults>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 8000a88:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8000a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a90:	4921      	ldr	r1, [pc, #132]	; (8000b18 <main+0x2fc>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fc98 	bl	80043c8 <siprintf>

		  // Write to UART Over Voltage Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 8000a98:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <main+0x300>)
 8000aa2:	f002 ff39 	bl	8003918 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " UNDER_VOLTAGE_FAULT and OVER_CURRENT_FAULT\r\n"; //Data to send
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <main+0x310>)
 8000aa8:	1d3c      	adds	r4, r7, #4
 8000aaa:	461d      	mov	r5, r3
 8000aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ab8:	c407      	stmia	r4!, {r0, r1, r2}
 8000aba:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 8000abc:	1d39      	adds	r1, r7, #4
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	222e      	movs	r2, #46	; 0x2e
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <main+0x300>)
 8000ac4:	f002 ff28 	bl	8003918 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000ac8:	2064      	movs	r0, #100	; 0x64
 8000aca:	f000 fb6f 	bl	80011ac <HAL_Delay>

		  // Write to CAN Over Voltage Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000ace:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <main+0x308>)
 8000ad4:	490f      	ldr	r1, [pc, #60]	; (8000b14 <main+0x2f8>)
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <main+0x2f4>)
 8000ad8:	f000 fd95 	bl	8001606 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Voltage Fault
		  clearCellFault(&cell0, UNDER_VOLTAGE_FAULT);
 8000adc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe16 	bl	8000714 <clearCellFault>
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000ae8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe10 	bl	8000714 <clearCellFault>

		  // Turn OFF LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f001 fb86 	bl	800220c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 fb80 	bl	800220c <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000b0c:	e6c4      	b.n	8000898 <main+0x7c>
 8000b0e:	bf00      	nop
 8000b10:	20000078 	.word	0x20000078
 8000b14:	20000128 	.word	0x20000128
 8000b18:	08004d28 	.word	0x08004d28
 8000b1c:	200000a0 	.word	0x200000a0
 8000b20:	08004d30 	.word	0x08004d30
 8000b24:	20000140 	.word	0x20000140
 8000b28:	08004d44 	.word	0x08004d44
 8000b2c:	08004d5c 	.word	0x08004d5c

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b096      	sub	sp, #88	; 0x58
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2244      	movs	r2, #68	; 0x44
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc62 	bl	8004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b56:	f001 fb7f 	bl	8002258 <HAL_PWREx_ControlVoltageScaling>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b60:	f000 f930 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b76:	2302      	movs	r3, #2
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b82:	2307      	movs	r3, #7
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fbb6 	bl	8002304 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b9e:	f000 f911 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 ff7e 	bl	8002abc <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bc6:	f000 f8fd 	bl	8000dc4 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3758      	adds	r7, #88	; 0x58
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <MX_CAN1_Init+0xa4>)
 8000bde:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000be2:	2220      	movs	r2, #32
 8000be4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000bf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bf8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000bfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c00:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c28:	f000 fae4 	bl	80011f4 <HAL_CAN_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000c32:	f000 f8c7 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 8000c42:	f242 0360 	movw	r3, #8288	; 0x2060
 8000c46:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8000c4c:	f242 0360 	movw	r3, #8288	; 0x2060
 8000c50:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000c5e:	2314      	movs	r3, #20
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <MX_CAN1_Init+0xa0>)
 8000c68:	f000 fbbf 	bl	80013ea <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000078 	.word	0x20000078
 8000c78:	40006400 	.word	0x40006400

08000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <MX_USART2_UART_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cc0:	f002 fddc 	bl	800387c <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 f87b 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000a0 	.word	0x200000a0
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_GPIO_Init+0xe0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	21e0      	movs	r1, #224	; 0xe0
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 fa57 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d76:	f001 f887 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23e0      	movs	r3, #224	; 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 f878 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f001 f86a 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000800 	.word	0x48000800

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_MspInit+0x44>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6613      	str	r3, [r2, #96]	; 0x60
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_CAN_MspInit+0x90>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d131      	bne.n	8000e9e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_CAN_MspInit+0x94>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f000 fffd 	bl	8001e88 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2014      	movs	r0, #20
 8000e94:	f000 ffc1 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 ffda 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40006400 	.word	0x40006400
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ac      	sub	sp, #176	; 0xb0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2288      	movs	r2, #136	; 0x88
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fa99 	bl	8004408 <memset>
  if(huart->Instance==USART2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <HAL_UART_MspInit+0xb0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13b      	bne.n	8000f58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f809 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f7ff ff64 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6593      	str	r3, [r2, #88]	; 0x58
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 ff98 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	37b0      	adds	r7, #176	; 0xb0
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8da 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <CAN1_RX0_IRQHandler+0x10>)
 8000fc2:	f000 fc16 	bl	80017f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000078 	.word	0x20000078

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f003 fa0a 	bl	8004418 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20018000 	.word	0x20018000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000144 	.word	0x20000144
 8001038:	20000298 	.word	0x20000298

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f003 f9c9 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001092:	f7ff fbc3 	bl	800081c <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001098:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010a4:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 80010a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010ac:	20000294 	.word	0x20000294

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_Init+0x3c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_Init+0x3c>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f000 fe9a 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 f80f 	bl	80010f4 <HAL_InitTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	e001      	b.n	80010e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e2:	f7ff fe75 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d023      	beq.n	8001150 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_InitTick+0x70>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fea5 	bl	8001e6e <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d809      	bhi.n	8001144 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fe6f 	bl	8001e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_InitTick+0x74>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e007      	b.n	8001154 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e004      	b.n	8001154 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e001      	b.n	8001154 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000000 	.word	0x20000000
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000148 	.word	0x20000148

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000148 	.word	0x20000148

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0ed      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe00 	bl	8000e18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff ffb4 	bl	8001194 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800122e:	e012      	b.n	8001256 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001230:	f7ff ffb0 	bl	8001194 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d90b      	bls.n	8001256 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0c5      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0e5      	beq.n	8001230 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0202 	bic.w	r2, r2, #2
 8001272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001274:	f7ff ff8e 	bl	8001194 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127a:	e012      	b.n	80012a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800127c:	f7ff ff8a 	bl	8001194 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b0a      	cmp	r3, #10
 8001288:	d90b      	bls.n	80012a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2205      	movs	r2, #5
 800129a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e09f      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e5      	bne.n	800127c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e5b      	ldrb	r3, [r3, #25]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e9b      	ldrb	r3, [r3, #26]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0220 	bic.w	r2, r2, #32
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7edb      	ldrb	r3, [r3, #27]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0210 	bic.w	r2, r2, #16
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0210 	orr.w	r2, r2, #16
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7f1b      	ldrb	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7f5b      	ldrb	r3, [r3, #29]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0204 	orr.w	r2, r2, #4
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e007      	b.n	80013ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0204 	bic.w	r2, r2, #4
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	ea42 0103 	orr.w	r1, r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b087      	sub	sp, #28
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d003      	beq.n	8001410 <HAL_CAN_ConfigFilter+0x26>
 8001408:	7cfb      	ldrb	r3, [r7, #19]
 800140a:	2b02      	cmp	r3, #2
 800140c:	f040 80aa 	bne.w	8001564 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001416:	f043 0201 	orr.w	r2, r3, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2201      	movs	r2, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d123      	bne.n	8001492 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3248      	adds	r2, #72	; 0x48
 8001472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001488:	6979      	ldr	r1, [r7, #20]
 800148a:	3348      	adds	r3, #72	; 0x48
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d122      	bne.n	80014e0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3248      	adds	r2, #72	; 0x48
 80014c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d6:	6979      	ldr	r1, [r7, #20]
 80014d8:	3348      	adds	r3, #72	; 0x48
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014fa:	e007      	b.n	800150c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001526:	e007      	b.n	8001538 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001556:	f023 0201 	bic.w	r2, r3, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e006      	b.n	8001572 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d12e      	bne.n	80015f0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015aa:	f7ff fdf3 	bl	8001194 <HAL_GetTick>
 80015ae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015b0:	e012      	b.n	80015d8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b2:	f7ff fdef 	bl	8001194 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d90b      	bls.n	80015d8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e5      	bne.n	80015b2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e006      	b.n	80015fe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001606:	b480      	push	{r7}
 8001608:	b089      	sub	sp, #36	; 0x24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d003      	beq.n	8001632 <HAL_CAN_AddTxMessage+0x2c>
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 80ad 	bne.w	800178c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10a      	bne.n	8001652 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8095 	beq.w	800177c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	0e1b      	lsrs	r3, r3, #24
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800165c:	2201      	movs	r2, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	409a      	lsls	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3318      	adds	r3, #24
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e00f      	b.n	80016aa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001694:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800169e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3318      	adds	r3, #24
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	440b      	add	r3, r1
 80016a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3318      	adds	r3, #24
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	7d1b      	ldrb	r3, [r3, #20]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d111      	bne.n	80016ea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3318      	adds	r3, #24
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	3304      	adds	r3, #4
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6811      	ldr	r1, [r2, #0]
 80016da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3318      	adds	r3, #24
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3307      	adds	r3, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3306      	adds	r3, #6
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3305      	adds	r3, #5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	3204      	adds	r2, #4
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	4610      	mov	r0, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6811      	ldr	r1, [r2, #0]
 8001712:	ea43 0200 	orr.w	r2, r3, r0
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	440b      	add	r3, r1
 800171c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001720:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3303      	adds	r3, #3
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	061a      	lsls	r2, r3, #24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3302      	adds	r3, #2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4313      	orrs	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4610      	mov	r0, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	ea43 0200 	orr.w	r2, r3, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001756:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3318      	adds	r3, #24
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6811      	ldr	r1, [r2, #0]
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3318      	adds	r3, #24
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	440b      	add	r3, r1
 8001776:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e00e      	b.n	800179a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e006      	b.n	800179a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d002      	beq.n	80017c4 <HAL_CAN_ActivateNotification+0x1e>
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d109      	bne.n	80017d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6959      	ldr	r1, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e006      	b.n	80017e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
  }
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b08a      	sub	sp, #40	; 0x28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d07c      	beq.n	8001932 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d023      	beq.n	800188a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f983 	bl	8001b60 <HAL_CAN_TxMailbox0CompleteCallback>
 800185a:	e016      	b.n	800188a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	e00c      	b.n	800188a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	e002      	b.n	800188a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f989 	bl	8001b9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d024      	beq.n	80018de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f963 	bl	8001b74 <HAL_CAN_TxMailbox1CompleteCallback>
 80018ae:	e016      	b.n	80018de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	e00c      	b.n	80018de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	e002      	b.n	80018de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f969 	bl	8001bb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d024      	beq.n	8001932 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f943 	bl	8001b88 <HAL_CAN_TxMailbox2CompleteCallback>
 8001902:	e016      	b.n	8001932 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	e00c      	b.n	8001932 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e002      	b.n	8001932 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f949 	bl	8001bc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2210      	movs	r2, #16
 8001954:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2208      	movs	r2, #8
 8001970:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f93a 	bl	8001bec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f921 	bl	8001bd8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00b      	beq.n	80019dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2208      	movs	r2, #8
 80019d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f91c 	bl	8001c14 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f903 	bl	8001c00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00b      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f906 	bl	8001c28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2208      	movs	r2, #8
 8001a36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f8ff 	bl	8001c3c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d07b      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d072      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d043      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d03e      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac0:	2b60      	cmp	r3, #96	; 0x60
 8001ac2:	d02b      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x32a>
 8001ac4:	2b60      	cmp	r3, #96	; 0x60
 8001ac6:	d82e      	bhi.n	8001b26 <HAL_CAN_IRQHandler+0x334>
 8001ac8:	2b50      	cmp	r3, #80	; 0x50
 8001aca:	d022      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x320>
 8001acc:	2b50      	cmp	r3, #80	; 0x50
 8001ace:	d82a      	bhi.n	8001b26 <HAL_CAN_IRQHandler+0x334>
 8001ad0:	2b40      	cmp	r3, #64	; 0x40
 8001ad2:	d019      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x316>
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d826      	bhi.n	8001b26 <HAL_CAN_IRQHandler+0x334>
 8001ad8:	2b30      	cmp	r3, #48	; 0x30
 8001ada:	d010      	beq.n	8001afe <HAL_CAN_IRQHandler+0x30c>
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d822      	bhi.n	8001b26 <HAL_CAN_IRQHandler+0x334>
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d002      	beq.n	8001aea <HAL_CAN_IRQHandler+0x2f8>
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d005      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ae8:	e01d      	b.n	8001b26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af2:	e019      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afc:	e014      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b06:	e00f      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b10:	e00a      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b1a:	e005      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b24:	e000      	b.n	8001b28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f87c 	bl	8001c50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff3e 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff31 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e17f      	b.n	8002198 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8171 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d118      	bne.n	8001f68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80ac 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_GPIO_Init+0x330>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	; 0x60
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002052:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <HAL_GPIO_Init+0x334>)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x242>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x338>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x23e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x33c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x23a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x340>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x236>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x344>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x232>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x348>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x22e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x34c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x22a>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ca:	2300      	movs	r3, #0
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_GPIO_Init+0x334>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_GPIO_Init+0x350>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f47f ae78 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800
 80021c8:	48000c00 	.word	0x48000c00
 80021cc:	48001000 	.word	0x48001000
 80021d0:	48001400 	.word	0x48001400
 80021d4:	48001800 	.word	0x48001800
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002228:	e002      	b.n	8002230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_PWREx_GetVoltageRange+0x18>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007000 	.word	0x40007000

08002258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002266:	d130      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002274:	d038      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2232      	movs	r2, #50	; 0x32
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229c:	e002      	b.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d102      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f2      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d110      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d007      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000
 80022fc:	20000000 	.word	0x20000000
 8002300:	431bde83 	.word	0x431bde83

08002304 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e3ca      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002316:	4b97      	ldr	r3, [pc, #604]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002320:	4b94      	ldr	r3, [pc, #592]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80e4 	beq.w	8002500 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_RCC_OscConfig+0x4a>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b0c      	cmp	r3, #12
 8002342:	f040 808b 	bne.w	800245c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 8087 	bne.w	800245c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x62>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3a2      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1a      	ldr	r2, [r3, #32]
 800236a:	4b82      	ldr	r3, [pc, #520]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_RCC_OscConfig+0x7c>
 8002376:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237e:	e005      	b.n	800238c <HAL_RCC_OscConfig+0x88>
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	4293      	cmp	r3, r2
 800238e:	d223      	bcs.n	80023d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fd55 	bl	8002e44 <RCC_SetFlashLatencyFromMSIRange>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e383      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b73      	ldr	r3, [pc, #460]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a72      	ldr	r2, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b70      	ldr	r3, [pc, #448]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	496d      	ldr	r1, [pc, #436]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4968      	ldr	r1, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
 80023d6:	e025      	b.n	8002424 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4960      	ldr	r1, [pc, #384]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	495b      	ldr	r1, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd15 	bl	8002e44 <RCC_SetFlashLatencyFromMSIRange>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e343      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002424:	f000 fc4a 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b52      	ldr	r3, [pc, #328]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	4950      	ldr	r1, [pc, #320]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	4a4e      	ldr	r2, [pc, #312]	; (800257c <HAL_RCC_OscConfig+0x278>)
 8002442:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <HAL_RCC_OscConfig+0x27c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe53 	bl	80010f4 <HAL_InitTick>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d052      	beq.n	80024fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	e327      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d032      	beq.n	80024ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002470:	f7fe fe90 	bl	8001194 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002478:	f7fe fe8c 	bl	8001194 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e310      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002496:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a36      	ldr	r2, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4931      	ldr	r1, [pc, #196]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	492c      	ldr	r1, [pc, #176]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
 80024c8:	e01a      	b.n	8002500 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe5d 	bl	8001194 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024de:	f7fe fe59 	bl	8001194 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e2dd      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x1da>
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d074      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x21a>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d10e      	bne.n	8002536 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d10b      	bne.n	8002536 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d064      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d160      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e2ba      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x24a>
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e026      	b.n	800259c <HAL_RCC_OscConfig+0x298>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002556:	d115      	bne.n	8002584 <HAL_RCC_OscConfig+0x280>
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800255e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x298>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	08004d8c 	.word	0x08004d8c
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004
 8002584:	4ba0      	ldr	r3, [pc, #640]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a9f      	ldr	r2, [pc, #636]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b9d      	ldr	r3, [pc, #628]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a9c      	ldr	r2, [pc, #624]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fdf6 	bl	8001194 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7fe fdf2 	bl	8001194 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e276      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	4b92      	ldr	r3, [pc, #584]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x2a8>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fde2 	bl	8001194 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fdde 	bl	8001194 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e262      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e6:	4b88      	ldr	r3, [pc, #544]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2d0>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d060      	beq.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x310>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d119      	bne.n	8002642 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d116      	bne.n	8002642 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	4b7c      	ldr	r3, [pc, #496]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x328>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e23f      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4973      	ldr	r1, [pc, #460]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002640:	e040      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d023      	beq.n	8002692 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fd9d 	bl	8001194 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fd99 	bl	8001194 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e21d      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b62      	ldr	r3, [pc, #392]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	495f      	ldr	r1, [pc, #380]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e018      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fd79 	bl	8001194 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fd75 	bl	8001194 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1f9      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d03c      	beq.n	800274a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01c      	beq.n	8002712 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026de:	4a4a      	ldr	r2, [pc, #296]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fd54 	bl	8001194 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7fe fd50 	bl	8001194 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1d4      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3ec>
 8002710:	e01b      	b.n	800274a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002718:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fd37 	bl	8001194 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fd33 	bl	8001194 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1b7      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a6 	beq.w	80028a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	; 0x58
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002780:	2301      	movs	r3, #1
 8002782:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_RCC_OscConfig+0x508>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d118      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_OscConfig+0x508>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x508>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279c:	f7fe fcfa 	bl	8001194 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe fcf6 	bl	8001194 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e17a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x508>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_RCC_OscConfig+0x4d8>
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027da:	e029      	b.n	8002830 <HAL_RCC_OscConfig+0x52c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d115      	bne.n	8002810 <HAL_RCC_OscConfig+0x50c>
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x52c>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
 8002810:	4b9c      	ldr	r3, [pc, #624]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	4a9b      	ldr	r2, [pc, #620]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002820:	4b98      	ldr	r3, [pc, #608]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	4a97      	ldr	r2, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d016      	beq.n	8002866 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fcac 	bl	8001194 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fca8 	bl	8001194 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e12a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ed      	beq.n	8002840 <HAL_RCC_OscConfig+0x53c>
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fc95 	bl	8001194 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fc91 	bl	8001194 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e113      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002884:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ed      	bne.n	800286e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a79      	ldr	r2, [pc, #484]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80fe 	beq.w	8002aaa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	f040 80d0 	bne.w	8002a58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b8:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d130      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	3b01      	subs	r3, #1
 80028d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d127      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11f      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f8:	2a07      	cmp	r2, #7
 80028fa:	bf14      	ite	ne
 80028fc:	2201      	movne	r2, #1
 80028fe:	2200      	moveq	r2, #0
 8002900:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d109      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d06e      	beq.n	8002a0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d069      	beq.n	8002a08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0ad      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a4b      	ldr	r2, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800295c:	f7fe fc1a 	bl	8001194 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fc16 	bl	8001194 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e09a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x784>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002992:	3a01      	subs	r2, #1
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800299c:	0212      	lsls	r2, r2, #8
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a4:	0852      	lsrs	r2, r2, #1
 80029a6:	3a01      	subs	r2, #1
 80029a8:	0552      	lsls	r2, r2, #21
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029b0:	0852      	lsrs	r2, r2, #1
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0652      	lsls	r2, r2, #25
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029bc:	0912      	lsrs	r2, r2, #4
 80029be:	0452      	lsls	r2, r2, #17
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4930      	ldr	r1, [pc, #192]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2d      	ldr	r2, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e0:	f7fe fbd8 	bl	8001194 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fbd4 	bl	8001194 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e058      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a06:	e050      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04f      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d148      	bne.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a30:	f7fe fbb0 	bl	8001194 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fbac 	bl	8001194 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e030      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x734>
 8002a56:	e028      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d023      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fb93 	bl	8001194 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a70:	e00c      	b.n	8002a8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fb8f 	bl	8001194 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d905      	bls.n	8002a8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ec      	bne.n	8002a72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4905      	ldr	r1, [pc, #20]	; (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x7b4>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e001      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	feeefffc 	.word	0xfeeefffc

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0e7      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4970      	ldr	r1, [pc, #448]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cf      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b66      	ldr	r3, [pc, #408]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4960      	ldr	r1, [pc, #384]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04c      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0a6      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09a      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e086      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4943      	ldr	r1, [pc, #268]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe faf6 	bl	8001194 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe faf2 	bl	8001194 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e06e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	492b      	ldr	r1, [pc, #172]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d210      	bcs.n	8002c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4923      	ldr	r1, [pc, #140]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e036      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4918      	ldr	r1, [pc, #96]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4910      	ldr	r1, [pc, #64]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c70:	f000 f824 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	490b      	ldr	r1, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fa2d 	bl	80010f4 <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08004d8c 	.word	0x08004d8c
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d121      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11e      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d18:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e004      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d134      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0xac>
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d64:	617b      	str	r3, [r7, #20]
      break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6a:	617b      	str	r3, [r7, #20]
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	617b      	str	r3, [r7, #20]
      break;
 8002d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	3301      	adds	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	fb03 f202 	mul.w	r2, r3, r2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	0e5b      	lsrs	r3, r3, #25
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db4:	69bb      	ldr	r3, [r7, #24]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08004da4 	.word	0x08004da4
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200

08002dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4904      	ldr	r1, [pc, #16]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08004d9c 	.word	0x08004d9c

08002e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e1c:	f7ff ffda 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0adb      	lsrs	r3, r3, #11
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08004d9c 	.word	0x08004d9c

08002e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e5c:	f7ff f9ee 	bl	800223c <HAL_PWREx_GetVoltageRange>
 8002e60:	6178      	str	r0, [r7, #20]
 8002e62:	e014      	b.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e7c:	f7ff f9de 	bl	800223c <HAL_PWREx_GetVoltageRange>
 8002e80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d10b      	bne.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d919      	bls.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2ba0      	cmp	r3, #160	; 0xa0
 8002ea0:	d902      	bls.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e013      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e010      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d902      	bls.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e00a      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d102      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e004      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d101      	bne.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ecc:	2301      	movs	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 0207 	bic.w	r2, r3, #7
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40022000 	.word	0x40022000

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d041      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f28:	d02a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f2e:	d824      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f3a:	d81e      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f44:	d010      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f46:	e018      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f48:	4b86      	ldr	r3, [pc, #536]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a85      	ldr	r2, [pc, #532]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f54:	e015      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fabb 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f66:	e00c      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3320      	adds	r3, #32
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fba6 	bl	80036c0 <RCCEx_PLLSAI2_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f88:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f96:	4973      	ldr	r1, [pc, #460]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d041      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fb8:	d02a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fbe:	d824      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fca:	d81e      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fd6:	e018      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd8:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a61      	ldr	r2, [pc, #388]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fe4:	e015      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fa73 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff6:	e00c      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb5e 	bl	80036c0 <RCCEx_PLLSAI2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003008:	e003      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	74fb      	strb	r3, [r7, #19]
      break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003018:	4b52      	ldr	r3, [pc, #328]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003026:	494f      	ldr	r1, [pc, #316]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800302e:	e001      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a0 	beq.w	8003182 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	4a40      	ldr	r2, [pc, #256]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	6593      	str	r3, [r2, #88]	; 0x58
 8003068:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003074:	2301      	movs	r3, #1
 8003076:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003082:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003084:	f7fe f886 	bl	8001194 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800308a:	e009      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7fe f882 	bl	8001194 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	74fb      	strb	r3, [r7, #19]
        break;
 800309e:	e005      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ef      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d15c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01f      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d019      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe f841 	bl	8001194 <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003114:	e00b      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fe f83d 	bl	8001194 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d902      	bls.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	74fb      	strb	r3, [r7, #19]
            break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ec      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800315a:	e009      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
 8003160:	e006      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003170:	7c7b      	ldrb	r3, [r7, #17]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	4a9d      	ldr	r2, [pc, #628]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318e:	4b98      	ldr	r3, [pc, #608]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f023 0203 	bic.w	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	4994      	ldr	r1, [pc, #592]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 020c 	bic.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	498c      	ldr	r1, [pc, #560]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d2:	4b87      	ldr	r3, [pc, #540]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4983      	ldr	r1, [pc, #524]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031f4:	4b7e      	ldr	r3, [pc, #504]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	497b      	ldr	r1, [pc, #492]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	4972      	ldr	r1, [pc, #456]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003238:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	496a      	ldr	r1, [pc, #424]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	4961      	ldr	r1, [pc, #388]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800327c:	4b5c      	ldr	r3, [pc, #368]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4959      	ldr	r1, [pc, #356]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ac:	4950      	ldr	r1, [pc, #320]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032c0:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	4948      	ldr	r1, [pc, #288]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	493f      	ldr	r1, [pc, #252]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d028      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003304:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003312:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003322:	d106      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a31      	ldr	r2, [pc, #196]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332e:	60d3      	str	r3, [r2, #12]
 8003330:	e011      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800333a:	d10c      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f8c8 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d028      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	491f      	ldr	r1, [pc, #124]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003380:	d106      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338c:	60d3      	str	r3, [r2, #12]
 800338e:	e011      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f899 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02b      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d109      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a02      	ldr	r2, [pc, #8]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e014      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f867 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d02f      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003432:	4928      	ldr	r1, [pc, #160]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003442:	d10d      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2102      	movs	r1, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f844 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	74bb      	strb	r3, [r7, #18]
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3320      	adds	r3, #32
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f925 	bl	80036c0 <RCCEx_PLLSAI2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000

080034d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034e6:	4b75      	ldr	r3, [pc, #468]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034f2:	4b72      	ldr	r3, [pc, #456]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d10d      	bne.n	800351e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
       ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800350a:	4b6c      	ldr	r3, [pc, #432]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
       ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d047      	beq.n	80035ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e044      	b.n	80035ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d018      	beq.n	800355e <RCCEx_PLLSAI1_Config+0x86>
 800352c:	2b03      	cmp	r3, #3
 800352e:	d825      	bhi.n	800357c <RCCEx_PLLSAI1_Config+0xa4>
 8003530:	2b01      	cmp	r3, #1
 8003532:	d002      	beq.n	800353a <RCCEx_PLLSAI1_Config+0x62>
 8003534:	2b02      	cmp	r3, #2
 8003536:	d009      	beq.n	800354c <RCCEx_PLLSAI1_Config+0x74>
 8003538:	e020      	b.n	800357c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800353a:	4b60      	ldr	r3, [pc, #384]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11d      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354a:	e01a      	b.n	8003582 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800354c:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d116      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355c:	e013      	b.n	8003586 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800355e:	4b57      	ldr	r3, [pc, #348]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800357a:	e006      	b.n	800358a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e004      	b.n	800358c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358a:	bf00      	nop
    }

    if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	430b      	orrs	r3, r1
 80035a8:	4944      	ldr	r1, [pc, #272]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d17d      	bne.n	80036b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035b4:	4b41      	ldr	r3, [pc, #260]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a40      	ldr	r2, [pc, #256]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd fde8 	bl	8001194 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035c6:	e009      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c8:	f7fd fde4 	bl	8001194 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	73fb      	strb	r3, [r7, #15]
        break;
 80035da:	e005      	b.n	80035e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035dc:	4b37      	ldr	r3, [pc, #220]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ef      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d160      	bne.n	80036b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0211      	lsls	r1, r2, #8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	0912      	lsrs	r2, r2, #4
 800360c:	0452      	lsls	r2, r2, #17
 800360e:	430a      	orrs	r2, r1
 8003610:	492a      	ldr	r1, [pc, #168]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	610b      	str	r3, [r1, #16]
 8003616:	e027      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d112      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003626:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6892      	ldr	r2, [r2, #8]
 800362e:	0211      	lsls	r1, r2, #8
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6912      	ldr	r2, [r2, #16]
 8003634:	0852      	lsrs	r2, r2, #1
 8003636:	3a01      	subs	r2, #1
 8003638:	0552      	lsls	r2, r2, #21
 800363a:	430a      	orrs	r2, r1
 800363c:	491f      	ldr	r1, [pc, #124]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	610b      	str	r3, [r1, #16]
 8003642:	e011      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800364c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	0211      	lsls	r1, r2, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6952      	ldr	r2, [r2, #20]
 800365a:	0852      	lsrs	r2, r2, #1
 800365c:	3a01      	subs	r2, #1
 800365e:	0652      	lsls	r2, r2, #25
 8003660:	430a      	orrs	r2, r1
 8003662:	4916      	ldr	r1, [pc, #88]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a13      	ldr	r2, [pc, #76]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fd fd8e 	bl	8001194 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800367a:	e009      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367c:	f7fd fd8a 	bl	8001194 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	73fb      	strb	r3, [r7, #15]
          break;
 800368e:	e005      	b.n	800369c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ef      	beq.n	800367c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	4904      	ldr	r1, [pc, #16]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000

080036c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ce:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d018      	beq.n	800370c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0203 	and.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d10d      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
       ||
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036f2:	4b61      	ldr	r3, [pc, #388]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
       ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d047      	beq.n	8003796 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e044      	b.n	8003796 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d018      	beq.n	8003746 <RCCEx_PLLSAI2_Config+0x86>
 8003714:	2b03      	cmp	r3, #3
 8003716:	d825      	bhi.n	8003764 <RCCEx_PLLSAI2_Config+0xa4>
 8003718:	2b01      	cmp	r3, #1
 800371a:	d002      	beq.n	8003722 <RCCEx_PLLSAI2_Config+0x62>
 800371c:	2b02      	cmp	r3, #2
 800371e:	d009      	beq.n	8003734 <RCCEx_PLLSAI2_Config+0x74>
 8003720:	e020      	b.n	8003764 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003722:	4b55      	ldr	r3, [pc, #340]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11d      	bne.n	800376a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003732:	e01a      	b.n	800376a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003744:	e013      	b.n	800376e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003746:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003752:	4b49      	ldr	r3, [pc, #292]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003762:	e006      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e004      	b.n	8003774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003772:	bf00      	nop
    }

    if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	430b      	orrs	r3, r1
 8003790:	4939      	ldr	r1, [pc, #228]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d167      	bne.n	800386c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd fcf4 	bl	8001194 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ae:	e009      	b.n	80037c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b0:	f7fd fcf0 	bl	8001194 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d902      	bls.n	80037c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	73fb      	strb	r3, [r7, #15]
        break;
 80037c2:	e005      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ef      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d14a      	bne.n	800386c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
 80037ec:	0211      	lsls	r1, r2, #8
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	0912      	lsrs	r2, r2, #4
 80037f4:	0452      	lsls	r2, r2, #17
 80037f6:	430a      	orrs	r2, r1
 80037f8:	491f      	ldr	r1, [pc, #124]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	614b      	str	r3, [r1, #20]
 80037fe:	e011      	b.n	8003824 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003808:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6892      	ldr	r2, [r2, #8]
 8003810:	0211      	lsls	r1, r2, #8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6912      	ldr	r2, [r2, #16]
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0652      	lsls	r2, r2, #25
 800381c:	430a      	orrs	r2, r1
 800381e:	4916      	ldr	r1, [pc, #88]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd fcb0 	bl	8001194 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003838:	f7fd fcac 	bl	8001194 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
          break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e040      	b.n	8003910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fb06 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fb6a 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8af 	bl	8003a2c <UART_SetConfig>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e01b      	b.n	8003910 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fbe9 	bl	80040e0 <UART_CheckIdleState>
 800390e:	4603      	mov	r3, r0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392c:	2b20      	cmp	r3, #32
 800392e:	d178      	bne.n	8003a22 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_UART_Transmit+0x24>
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e071      	b.n	8003a24 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394e:	f7fd fc21 	bl	8001194 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x68>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003988:	e030      	b.n	80039ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fc4b 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e03c      	b.n	8003a24 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039bc:	b292      	uxth	r2, r2
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	3302      	adds	r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e008      	b.n	80039da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b292      	uxth	r2, r2
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1c8      	bne.n	800398a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fc14 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e005      	b.n	8003a24 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b08a      	sub	sp, #40	; 0x28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4ba4      	ldr	r3, [pc, #656]	; (8003cec <UART_SetConfig+0x2c0>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a99      	ldr	r2, [pc, #612]	; (8003cf0 <UART_SetConfig+0x2c4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	4313      	orrs	r3, r2
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a90      	ldr	r2, [pc, #576]	; (8003cf4 <UART_SetConfig+0x2c8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d126      	bne.n	8003b04 <UART_SetConfig+0xd8>
 8003ab6:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d81b      	bhi.n	8003afc <UART_SetConfig+0xd0>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <UART_SetConfig+0xa0>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af5 	.word	0x08003af5
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e116      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e112      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e10e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e10a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e106      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <UART_SetConfig+0x2d0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d138      	bne.n	8003b80 <UART_SetConfig+0x154>
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d82d      	bhi.n	8003b78 <UART_SetConfig+0x14c>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0xf8>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b79 	.word	0x08003b79
 8003b2c:	08003b79 	.word	0x08003b79
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e0d8      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e0d4      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e0d0      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e0cc      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e0c8      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <UART_SetConfig+0x2d4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d125      	bne.n	8003bd6 <UART_SetConfig+0x1aa>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b94:	2b30      	cmp	r3, #48	; 0x30
 8003b96:	d016      	beq.n	8003bc6 <UART_SetConfig+0x19a>
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d818      	bhi.n	8003bce <UART_SetConfig+0x1a2>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d00a      	beq.n	8003bb6 <UART_SetConfig+0x18a>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d814      	bhi.n	8003bce <UART_SetConfig+0x1a2>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <UART_SetConfig+0x182>
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d008      	beq.n	8003bbe <UART_SetConfig+0x192>
 8003bac:	e00f      	b.n	8003bce <UART_SetConfig+0x1a2>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb4:	e0ad      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbc:	e0a9      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc4:	e0a5      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bcc:	e0a1      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e09d      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <UART_SetConfig+0x2d8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <UART_SetConfig+0x200>
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bea:	2bc0      	cmp	r3, #192	; 0xc0
 8003bec:	d016      	beq.n	8003c1c <UART_SetConfig+0x1f0>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d818      	bhi.n	8003c24 <UART_SetConfig+0x1f8>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d00a      	beq.n	8003c0c <UART_SetConfig+0x1e0>
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d814      	bhi.n	8003c24 <UART_SetConfig+0x1f8>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1d8>
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d008      	beq.n	8003c14 <UART_SetConfig+0x1e8>
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x1f8>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e082      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e07e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e07a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e076      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e072      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <UART_SetConfig+0x2dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12a      	bne.n	8003c8c <UART_SetConfig+0x260>
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c44:	d01a      	beq.n	8003c7c <UART_SetConfig+0x250>
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0x258>
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c50:	d00c      	beq.n	8003c6c <UART_SetConfig+0x240>
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d815      	bhi.n	8003c84 <UART_SetConfig+0x258>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <UART_SetConfig+0x238>
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d008      	beq.n	8003c74 <UART_SetConfig+0x248>
 8003c62:	e00f      	b.n	8003c84 <UART_SetConfig+0x258>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e052      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e04e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7a:	e04a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e046      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e042      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <UART_SetConfig+0x2c4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d13a      	bne.n	8003d0c <UART_SetConfig+0x2e0>
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca4:	d01a      	beq.n	8003cdc <UART_SetConfig+0x2b0>
 8003ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003caa:	d81b      	bhi.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb0:	d00c      	beq.n	8003ccc <UART_SetConfig+0x2a0>
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb6:	d815      	bhi.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <UART_SetConfig+0x298>
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc0:	d008      	beq.n	8003cd4 <UART_SetConfig+0x2a8>
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e022      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd2:	e01e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cda:	e01a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e016      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e012      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cec:	efff69f3 	.word	0xefff69f3
 8003cf0:	40008000 	.word	0x40008000
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40004400 	.word	0x40004400
 8003d00:	40004800 	.word	0x40004800
 8003d04:	40004c00 	.word	0x40004c00
 8003d08:	40005000 	.word	0x40005000
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a9f      	ldr	r2, [pc, #636]	; (8003f94 <UART_SetConfig+0x568>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d17a      	bne.n	8003e12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d824      	bhi.n	8003d6e <UART_SetConfig+0x342>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0x300>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d5f 	.word	0x08003d5f
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff f84c 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003d54:	61f8      	str	r0, [r7, #28]
        break;
 8003d56:	e010      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d58:	4b8f      	ldr	r3, [pc, #572]	; (8003f98 <UART_SetConfig+0x56c>)
 8003d5a:	61fb      	str	r3, [r7, #28]
        break;
 8003d5c:	e00d      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7fe ffad 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8003d62:	61f8      	str	r0, [r7, #28]
        break;
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6a:	61fb      	str	r3, [r7, #28]
        break;
 8003d6c:	e005      	b.n	8003d7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80fb 	beq.w	8003f78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d305      	bcc.n	8003d9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d903      	bls.n	8003da6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da4:	e0e8      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2200      	movs	r2, #0
 8003daa:	461c      	mov	r4, r3
 8003dac:	4615      	mov	r5, r2
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	022b      	lsls	r3, r5, #8
 8003db8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dbc:	0222      	lsls	r2, r4, #8
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	6849      	ldr	r1, [r1, #4]
 8003dc2:	0849      	lsrs	r1, r1, #1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4681      	mov	r9, r0
 8003dca:	eb12 0a08 	adds.w	sl, r2, r8
 8003dce:	eb43 0b09 	adc.w	fp, r3, r9
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de0:	4650      	mov	r0, sl
 8003de2:	4659      	mov	r1, fp
 8003de4:	f7fc fa44 	bl	8000270 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df6:	d308      	bcc.n	8003e0a <UART_SetConfig+0x3de>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d204      	bcs.n	8003e0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e0b6      	b.n	8003f78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e10:	e0b2      	b.n	8003f78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d15e      	bne.n	8003eda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d828      	bhi.n	8003e76 <UART_SetConfig+0x44a>
 8003e24:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <UART_SetConfig+0x400>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe ffcc 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003e54:	61f8      	str	r0, [r7, #28]
        break;
 8003e56:	e014      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe ffde 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <UART_SetConfig+0x56c>)
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe ff29 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8003e6a:	61f8      	str	r0, [r7, #28]
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d077      	beq.n	8003f78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	d916      	bls.n	8003ed2 <UART_SetConfig+0x4a6>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d212      	bcs.n	8003ed2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f023 030f 	bic.w	r3, r3, #15
 8003eb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	8afb      	ldrh	r3, [r7, #22]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	8afa      	ldrh	r2, [r7, #22]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e052      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ed8:	e04e      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d827      	bhi.n	8003f32 <UART_SetConfig+0x506>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <UART_SetConfig+0x4bc>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe ff6e 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003f10:	61f8      	str	r0, [r7, #28]
        break;
 8003f12:	e014      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe ff80 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
        break;
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <UART_SetConfig+0x56c>)
 8003f1e:	61fb      	str	r3, [r7, #28]
        break;
 8003f20:	e00d      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe fecb 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8003f26:	61f8      	str	r0, [r7, #28]
        break;
 8003f28:	e009      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	61fb      	str	r3, [r7, #28]
        break;
 8003f30:	e005      	b.n	8003f3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	085a      	lsrs	r2, r3, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d909      	bls.n	8003f72 <UART_SetConfig+0x546>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d205      	bcs.n	8003f72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e002      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f92:	bf00      	nop
 8003f94:	40008000 	.word	0x40008000
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b098      	sub	sp, #96	; 0x60
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fd f850 	bl	8001194 <HAL_GetTick>
 80040f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d12e      	bne.n	8004162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f88c 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800412c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	647b      	str	r3, [r7, #68]	; 0x44
 800413e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800414a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e062      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d149      	bne.n	8004204 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f856 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03c      	beq.n	8004204 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	623b      	str	r3, [r7, #32]
   return(result);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
 80041aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041dc:	61fa      	str	r2, [r7, #28]
 80041de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e011      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3758      	adds	r7, #88	; 0x58
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	e049      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d045      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc ffa3 	bl	8001194 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x30>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e048      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d031      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b08      	cmp	r3, #8
 800427e:	d110      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f838 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2208      	movs	r2, #8
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e029      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d111      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f81e 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0a6      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fe:	b480      	push	{r7}
 8004300:	b095      	sub	sp, #84	; 0x54
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	643b      	str	r3, [r7, #64]	; 0x40
 8004326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800432a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	61fb      	str	r3, [r7, #28]
   return(result);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	60bb      	str	r3, [r7, #8]
   return(result);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f023 0310 	bic.w	r3, r3, #16
 8004388:	647b      	str	r3, [r7, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043ba:	bf00      	nop
 80043bc:	3754      	adds	r7, #84	; 0x54
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <siprintf>:
 80043c8:	b40e      	push	{r1, r2, r3}
 80043ca:	b500      	push	{lr}
 80043cc:	b09c      	sub	sp, #112	; 0x70
 80043ce:	ab1d      	add	r3, sp, #116	; 0x74
 80043d0:	9002      	str	r0, [sp, #8]
 80043d2:	9006      	str	r0, [sp, #24]
 80043d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <siprintf+0x38>)
 80043da:	9107      	str	r1, [sp, #28]
 80043dc:	9104      	str	r1, [sp, #16]
 80043de:	4909      	ldr	r1, [pc, #36]	; (8004404 <siprintf+0x3c>)
 80043e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	6800      	ldr	r0, [r0, #0]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	a902      	add	r1, sp, #8
 80043ec:	f000 f992 	bl	8004714 <_svfiprintf_r>
 80043f0:	9b02      	ldr	r3, [sp, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	b01c      	add	sp, #112	; 0x70
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b003      	add	sp, #12
 80043fe:	4770      	bx	lr
 8004400:	20000058 	.word	0x20000058
 8004404:	ffff0208 	.word	0xffff0208

08004408 <memset>:
 8004408:	4402      	add	r2, r0
 800440a:	4603      	mov	r3, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <__errno>:
 8004418:	4b01      	ldr	r3, [pc, #4]	; (8004420 <__errno+0x8>)
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000058 	.word	0x20000058

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	4d0d      	ldr	r5, [pc, #52]	; (800445c <__libc_init_array+0x38>)
 8004428:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442a:	1b64      	subs	r4, r4, r5
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	2600      	movs	r6, #0
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	4d0b      	ldr	r5, [pc, #44]	; (8004464 <__libc_init_array+0x40>)
 8004436:	4c0c      	ldr	r4, [pc, #48]	; (8004468 <__libc_init_array+0x44>)
 8004438:	f000 fc6a 	bl	8004d10 <_init>
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	2600      	movs	r6, #0
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f855 3b04 	ldr.w	r3, [r5], #4
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f855 3b04 	ldr.w	r3, [r5], #4
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	08004e10 	.word	0x08004e10
 8004460:	08004e10 	.word	0x08004e10
 8004464:	08004e10 	.word	0x08004e10
 8004468:	08004e14 	.word	0x08004e14

0800446c <__retarget_lock_acquire_recursive>:
 800446c:	4770      	bx	lr

0800446e <__retarget_lock_release_recursive>:
 800446e:	4770      	bx	lr

08004470 <_free_r>:
 8004470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004472:	2900      	cmp	r1, #0
 8004474:	d044      	beq.n	8004500 <_free_r+0x90>
 8004476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447a:	9001      	str	r0, [sp, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f1a1 0404 	sub.w	r4, r1, #4
 8004482:	bfb8      	it	lt
 8004484:	18e4      	addlt	r4, r4, r3
 8004486:	f000 f8df 	bl	8004648 <__malloc_lock>
 800448a:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <_free_r+0x94>)
 800448c:	9801      	ldr	r0, [sp, #4]
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	b933      	cbnz	r3, 80044a0 <_free_r+0x30>
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	6014      	str	r4, [r2, #0]
 8004496:	b003      	add	sp, #12
 8004498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800449c:	f000 b8da 	b.w	8004654 <__malloc_unlock>
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d908      	bls.n	80044b6 <_free_r+0x46>
 80044a4:	6825      	ldr	r5, [r4, #0]
 80044a6:	1961      	adds	r1, r4, r5
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf01      	itttt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	e7ed      	b.n	8004492 <_free_r+0x22>
 80044b6:	461a      	mov	r2, r3
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b10b      	cbz	r3, 80044c0 <_free_r+0x50>
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d9fa      	bls.n	80044b6 <_free_r+0x46>
 80044c0:	6811      	ldr	r1, [r2, #0]
 80044c2:	1855      	adds	r5, r2, r1
 80044c4:	42a5      	cmp	r5, r4
 80044c6:	d10b      	bne.n	80044e0 <_free_r+0x70>
 80044c8:	6824      	ldr	r4, [r4, #0]
 80044ca:	4421      	add	r1, r4
 80044cc:	1854      	adds	r4, r2, r1
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	d1e0      	bne.n	8004496 <_free_r+0x26>
 80044d4:	681c      	ldr	r4, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6053      	str	r3, [r2, #4]
 80044da:	440c      	add	r4, r1
 80044dc:	6014      	str	r4, [r2, #0]
 80044de:	e7da      	b.n	8004496 <_free_r+0x26>
 80044e0:	d902      	bls.n	80044e8 <_free_r+0x78>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6003      	str	r3, [r0, #0]
 80044e6:	e7d6      	b.n	8004496 <_free_r+0x26>
 80044e8:	6825      	ldr	r5, [r4, #0]
 80044ea:	1961      	adds	r1, r4, r5
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf04      	itt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	bf04      	itt	eq
 80044f8:	1949      	addeq	r1, r1, r5
 80044fa:	6021      	streq	r1, [r4, #0]
 80044fc:	6054      	str	r4, [r2, #4]
 80044fe:	e7ca      	b.n	8004496 <_free_r+0x26>
 8004500:	b003      	add	sp, #12
 8004502:	bd30      	pop	{r4, r5, pc}
 8004504:	2000028c 	.word	0x2000028c

08004508 <sbrk_aligned>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4e0e      	ldr	r6, [pc, #56]	; (8004544 <sbrk_aligned+0x3c>)
 800450c:	460c      	mov	r4, r1
 800450e:	6831      	ldr	r1, [r6, #0]
 8004510:	4605      	mov	r5, r0
 8004512:	b911      	cbnz	r1, 800451a <sbrk_aligned+0x12>
 8004514:	f000 fba6 	bl	8004c64 <_sbrk_r>
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4621      	mov	r1, r4
 800451c:	4628      	mov	r0, r5
 800451e:	f000 fba1 	bl	8004c64 <_sbrk_r>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	d00a      	beq.n	800453c <sbrk_aligned+0x34>
 8004526:	1cc4      	adds	r4, r0, #3
 8004528:	f024 0403 	bic.w	r4, r4, #3
 800452c:	42a0      	cmp	r0, r4
 800452e:	d007      	beq.n	8004540 <sbrk_aligned+0x38>
 8004530:	1a21      	subs	r1, r4, r0
 8004532:	4628      	mov	r0, r5
 8004534:	f000 fb96 	bl	8004c64 <_sbrk_r>
 8004538:	3001      	adds	r0, #1
 800453a:	d101      	bne.n	8004540 <sbrk_aligned+0x38>
 800453c:	f04f 34ff 	mov.w	r4, #4294967295
 8004540:	4620      	mov	r0, r4
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	20000290 	.word	0x20000290

08004548 <_malloc_r>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	1ccd      	adds	r5, r1, #3
 800454e:	f025 0503 	bic.w	r5, r5, #3
 8004552:	3508      	adds	r5, #8
 8004554:	2d0c      	cmp	r5, #12
 8004556:	bf38      	it	cc
 8004558:	250c      	movcc	r5, #12
 800455a:	2d00      	cmp	r5, #0
 800455c:	4607      	mov	r7, r0
 800455e:	db01      	blt.n	8004564 <_malloc_r+0x1c>
 8004560:	42a9      	cmp	r1, r5
 8004562:	d905      	bls.n	8004570 <_malloc_r+0x28>
 8004564:	230c      	movs	r3, #12
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	2600      	movs	r6, #0
 800456a:	4630      	mov	r0, r6
 800456c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004644 <_malloc_r+0xfc>
 8004574:	f000 f868 	bl	8004648 <__malloc_lock>
 8004578:	f8d8 3000 	ldr.w	r3, [r8]
 800457c:	461c      	mov	r4, r3
 800457e:	bb5c      	cbnz	r4, 80045d8 <_malloc_r+0x90>
 8004580:	4629      	mov	r1, r5
 8004582:	4638      	mov	r0, r7
 8004584:	f7ff ffc0 	bl	8004508 <sbrk_aligned>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	4604      	mov	r4, r0
 800458c:	d155      	bne.n	800463a <_malloc_r+0xf2>
 800458e:	f8d8 4000 	ldr.w	r4, [r8]
 8004592:	4626      	mov	r6, r4
 8004594:	2e00      	cmp	r6, #0
 8004596:	d145      	bne.n	8004624 <_malloc_r+0xdc>
 8004598:	2c00      	cmp	r4, #0
 800459a:	d048      	beq.n	800462e <_malloc_r+0xe6>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	4631      	mov	r1, r6
 80045a0:	4638      	mov	r0, r7
 80045a2:	eb04 0903 	add.w	r9, r4, r3
 80045a6:	f000 fb5d 	bl	8004c64 <_sbrk_r>
 80045aa:	4581      	cmp	r9, r0
 80045ac:	d13f      	bne.n	800462e <_malloc_r+0xe6>
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	1a6d      	subs	r5, r5, r1
 80045b2:	4629      	mov	r1, r5
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff ffa7 	bl	8004508 <sbrk_aligned>
 80045ba:	3001      	adds	r0, #1
 80045bc:	d037      	beq.n	800462e <_malloc_r+0xe6>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	442b      	add	r3, r5
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	f8d8 3000 	ldr.w	r3, [r8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d038      	beq.n	800463e <_malloc_r+0xf6>
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	42a2      	cmp	r2, r4
 80045d0:	d12b      	bne.n	800462a <_malloc_r+0xe2>
 80045d2:	2200      	movs	r2, #0
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	e00f      	b.n	80045f8 <_malloc_r+0xb0>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	1b52      	subs	r2, r2, r5
 80045dc:	d41f      	bmi.n	800461e <_malloc_r+0xd6>
 80045de:	2a0b      	cmp	r2, #11
 80045e0:	d917      	bls.n	8004612 <_malloc_r+0xca>
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	6025      	str	r5, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	6059      	strne	r1, [r3, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	bf08      	it	eq
 80045f0:	f8c8 1000 	streq.w	r1, [r8]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4638      	mov	r0, r7
 80045fa:	f104 060b 	add.w	r6, r4, #11
 80045fe:	f000 f829 	bl	8004654 <__malloc_unlock>
 8004602:	f026 0607 	bic.w	r6, r6, #7
 8004606:	1d23      	adds	r3, r4, #4
 8004608:	1af2      	subs	r2, r6, r3
 800460a:	d0ae      	beq.n	800456a <_malloc_r+0x22>
 800460c:	1b9b      	subs	r3, r3, r6
 800460e:	50a3      	str	r3, [r4, r2]
 8004610:	e7ab      	b.n	800456a <_malloc_r+0x22>
 8004612:	42a3      	cmp	r3, r4
 8004614:	6862      	ldr	r2, [r4, #4]
 8004616:	d1dd      	bne.n	80045d4 <_malloc_r+0x8c>
 8004618:	f8c8 2000 	str.w	r2, [r8]
 800461c:	e7ec      	b.n	80045f8 <_malloc_r+0xb0>
 800461e:	4623      	mov	r3, r4
 8004620:	6864      	ldr	r4, [r4, #4]
 8004622:	e7ac      	b.n	800457e <_malloc_r+0x36>
 8004624:	4634      	mov	r4, r6
 8004626:	6876      	ldr	r6, [r6, #4]
 8004628:	e7b4      	b.n	8004594 <_malloc_r+0x4c>
 800462a:	4613      	mov	r3, r2
 800462c:	e7cc      	b.n	80045c8 <_malloc_r+0x80>
 800462e:	230c      	movs	r3, #12
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4638      	mov	r0, r7
 8004634:	f000 f80e 	bl	8004654 <__malloc_unlock>
 8004638:	e797      	b.n	800456a <_malloc_r+0x22>
 800463a:	6025      	str	r5, [r4, #0]
 800463c:	e7dc      	b.n	80045f8 <_malloc_r+0xb0>
 800463e:	605b      	str	r3, [r3, #4]
 8004640:	deff      	udf	#255	; 0xff
 8004642:	bf00      	nop
 8004644:	2000028c 	.word	0x2000028c

08004648 <__malloc_lock>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__malloc_lock+0x8>)
 800464a:	f7ff bf0f 	b.w	800446c <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	20000288 	.word	0x20000288

08004654 <__malloc_unlock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_unlock+0x8>)
 8004656:	f7ff bf0a 	b.w	800446e <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	20000288 	.word	0x20000288

08004660 <__ssputs_r>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	688e      	ldr	r6, [r1, #8]
 8004666:	461f      	mov	r7, r3
 8004668:	42be      	cmp	r6, r7
 800466a:	680b      	ldr	r3, [r1, #0]
 800466c:	4682      	mov	sl, r0
 800466e:	460c      	mov	r4, r1
 8004670:	4690      	mov	r8, r2
 8004672:	d82c      	bhi.n	80046ce <__ssputs_r+0x6e>
 8004674:	898a      	ldrh	r2, [r1, #12]
 8004676:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800467a:	d026      	beq.n	80046ca <__ssputs_r+0x6a>
 800467c:	6965      	ldr	r5, [r4, #20]
 800467e:	6909      	ldr	r1, [r1, #16]
 8004680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004684:	eba3 0901 	sub.w	r9, r3, r1
 8004688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800468c:	1c7b      	adds	r3, r7, #1
 800468e:	444b      	add	r3, r9
 8004690:	106d      	asrs	r5, r5, #1
 8004692:	429d      	cmp	r5, r3
 8004694:	bf38      	it	cc
 8004696:	461d      	movcc	r5, r3
 8004698:	0553      	lsls	r3, r2, #21
 800469a:	d527      	bpl.n	80046ec <__ssputs_r+0x8c>
 800469c:	4629      	mov	r1, r5
 800469e:	f7ff ff53 	bl	8004548 <_malloc_r>
 80046a2:	4606      	mov	r6, r0
 80046a4:	b360      	cbz	r0, 8004700 <__ssputs_r+0xa0>
 80046a6:	6921      	ldr	r1, [r4, #16]
 80046a8:	464a      	mov	r2, r9
 80046aa:	f000 faeb 	bl	8004c84 <memcpy>
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	6126      	str	r6, [r4, #16]
 80046bc:	6165      	str	r5, [r4, #20]
 80046be:	444e      	add	r6, r9
 80046c0:	eba5 0509 	sub.w	r5, r5, r9
 80046c4:	6026      	str	r6, [r4, #0]
 80046c6:	60a5      	str	r5, [r4, #8]
 80046c8:	463e      	mov	r6, r7
 80046ca:	42be      	cmp	r6, r7
 80046cc:	d900      	bls.n	80046d0 <__ssputs_r+0x70>
 80046ce:	463e      	mov	r6, r7
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	4632      	mov	r2, r6
 80046d4:	4641      	mov	r1, r8
 80046d6:	f000 faab 	bl	8004c30 <memmove>
 80046da:	68a3      	ldr	r3, [r4, #8]
 80046dc:	1b9b      	subs	r3, r3, r6
 80046de:	60a3      	str	r3, [r4, #8]
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	4433      	add	r3, r6
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	2000      	movs	r0, #0
 80046e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ec:	462a      	mov	r2, r5
 80046ee:	f000 fad7 	bl	8004ca0 <_realloc_r>
 80046f2:	4606      	mov	r6, r0
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d1e0      	bne.n	80046ba <__ssputs_r+0x5a>
 80046f8:	6921      	ldr	r1, [r4, #16]
 80046fa:	4650      	mov	r0, sl
 80046fc:	f7ff feb8 	bl	8004470 <_free_r>
 8004700:	230c      	movs	r3, #12
 8004702:	f8ca 3000 	str.w	r3, [sl]
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	f04f 30ff 	mov.w	r0, #4294967295
 8004712:	e7e9      	b.n	80046e8 <__ssputs_r+0x88>

08004714 <_svfiprintf_r>:
 8004714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	4698      	mov	r8, r3
 800471a:	898b      	ldrh	r3, [r1, #12]
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	b09d      	sub	sp, #116	; 0x74
 8004720:	4607      	mov	r7, r0
 8004722:	460d      	mov	r5, r1
 8004724:	4614      	mov	r4, r2
 8004726:	d50e      	bpl.n	8004746 <_svfiprintf_r+0x32>
 8004728:	690b      	ldr	r3, [r1, #16]
 800472a:	b963      	cbnz	r3, 8004746 <_svfiprintf_r+0x32>
 800472c:	2140      	movs	r1, #64	; 0x40
 800472e:	f7ff ff0b 	bl	8004548 <_malloc_r>
 8004732:	6028      	str	r0, [r5, #0]
 8004734:	6128      	str	r0, [r5, #16]
 8004736:	b920      	cbnz	r0, 8004742 <_svfiprintf_r+0x2e>
 8004738:	230c      	movs	r3, #12
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	e0d0      	b.n	80048e4 <_svfiprintf_r+0x1d0>
 8004742:	2340      	movs	r3, #64	; 0x40
 8004744:	616b      	str	r3, [r5, #20]
 8004746:	2300      	movs	r3, #0
 8004748:	9309      	str	r3, [sp, #36]	; 0x24
 800474a:	2320      	movs	r3, #32
 800474c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004750:	f8cd 800c 	str.w	r8, [sp, #12]
 8004754:	2330      	movs	r3, #48	; 0x30
 8004756:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048fc <_svfiprintf_r+0x1e8>
 800475a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800475e:	f04f 0901 	mov.w	r9, #1
 8004762:	4623      	mov	r3, r4
 8004764:	469a      	mov	sl, r3
 8004766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800476a:	b10a      	cbz	r2, 8004770 <_svfiprintf_r+0x5c>
 800476c:	2a25      	cmp	r2, #37	; 0x25
 800476e:	d1f9      	bne.n	8004764 <_svfiprintf_r+0x50>
 8004770:	ebba 0b04 	subs.w	fp, sl, r4
 8004774:	d00b      	beq.n	800478e <_svfiprintf_r+0x7a>
 8004776:	465b      	mov	r3, fp
 8004778:	4622      	mov	r2, r4
 800477a:	4629      	mov	r1, r5
 800477c:	4638      	mov	r0, r7
 800477e:	f7ff ff6f 	bl	8004660 <__ssputs_r>
 8004782:	3001      	adds	r0, #1
 8004784:	f000 80a9 	beq.w	80048da <_svfiprintf_r+0x1c6>
 8004788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800478a:	445a      	add	r2, fp
 800478c:	9209      	str	r2, [sp, #36]	; 0x24
 800478e:	f89a 3000 	ldrb.w	r3, [sl]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80a1 	beq.w	80048da <_svfiprintf_r+0x1c6>
 8004798:	2300      	movs	r3, #0
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047a2:	f10a 0a01 	add.w	sl, sl, #1
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	9307      	str	r3, [sp, #28]
 80047aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047ae:	931a      	str	r3, [sp, #104]	; 0x68
 80047b0:	4654      	mov	r4, sl
 80047b2:	2205      	movs	r2, #5
 80047b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b8:	4850      	ldr	r0, [pc, #320]	; (80048fc <_svfiprintf_r+0x1e8>)
 80047ba:	f7fb fd09 	bl	80001d0 <memchr>
 80047be:	9a04      	ldr	r2, [sp, #16]
 80047c0:	b9d8      	cbnz	r0, 80047fa <_svfiprintf_r+0xe6>
 80047c2:	06d0      	lsls	r0, r2, #27
 80047c4:	bf44      	itt	mi
 80047c6:	2320      	movmi	r3, #32
 80047c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047cc:	0711      	lsls	r1, r2, #28
 80047ce:	bf44      	itt	mi
 80047d0:	232b      	movmi	r3, #43	; 0x2b
 80047d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d015      	beq.n	800480a <_svfiprintf_r+0xf6>
 80047de:	9a07      	ldr	r2, [sp, #28]
 80047e0:	4654      	mov	r4, sl
 80047e2:	2000      	movs	r0, #0
 80047e4:	f04f 0c0a 	mov.w	ip, #10
 80047e8:	4621      	mov	r1, r4
 80047ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ee:	3b30      	subs	r3, #48	; 0x30
 80047f0:	2b09      	cmp	r3, #9
 80047f2:	d94d      	bls.n	8004890 <_svfiprintf_r+0x17c>
 80047f4:	b1b0      	cbz	r0, 8004824 <_svfiprintf_r+0x110>
 80047f6:	9207      	str	r2, [sp, #28]
 80047f8:	e014      	b.n	8004824 <_svfiprintf_r+0x110>
 80047fa:	eba0 0308 	sub.w	r3, r0, r8
 80047fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004802:	4313      	orrs	r3, r2
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	46a2      	mov	sl, r4
 8004808:	e7d2      	b.n	80047b0 <_svfiprintf_r+0x9c>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	1d19      	adds	r1, r3, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9103      	str	r1, [sp, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfbb      	ittet	lt
 8004816:	425b      	neglt	r3, r3
 8004818:	f042 0202 	orrlt.w	r2, r2, #2
 800481c:	9307      	strge	r3, [sp, #28]
 800481e:	9307      	strlt	r3, [sp, #28]
 8004820:	bfb8      	it	lt
 8004822:	9204      	strlt	r2, [sp, #16]
 8004824:	7823      	ldrb	r3, [r4, #0]
 8004826:	2b2e      	cmp	r3, #46	; 0x2e
 8004828:	d10c      	bne.n	8004844 <_svfiprintf_r+0x130>
 800482a:	7863      	ldrb	r3, [r4, #1]
 800482c:	2b2a      	cmp	r3, #42	; 0x2a
 800482e:	d134      	bne.n	800489a <_svfiprintf_r+0x186>
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	9203      	str	r2, [sp, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	bfb8      	it	lt
 800483c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004840:	3402      	adds	r4, #2
 8004842:	9305      	str	r3, [sp, #20]
 8004844:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800490c <_svfiprintf_r+0x1f8>
 8004848:	7821      	ldrb	r1, [r4, #0]
 800484a:	2203      	movs	r2, #3
 800484c:	4650      	mov	r0, sl
 800484e:	f7fb fcbf 	bl	80001d0 <memchr>
 8004852:	b138      	cbz	r0, 8004864 <_svfiprintf_r+0x150>
 8004854:	9b04      	ldr	r3, [sp, #16]
 8004856:	eba0 000a 	sub.w	r0, r0, sl
 800485a:	2240      	movs	r2, #64	; 0x40
 800485c:	4082      	lsls	r2, r0
 800485e:	4313      	orrs	r3, r2
 8004860:	3401      	adds	r4, #1
 8004862:	9304      	str	r3, [sp, #16]
 8004864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004868:	4825      	ldr	r0, [pc, #148]	; (8004900 <_svfiprintf_r+0x1ec>)
 800486a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800486e:	2206      	movs	r2, #6
 8004870:	f7fb fcae 	bl	80001d0 <memchr>
 8004874:	2800      	cmp	r0, #0
 8004876:	d038      	beq.n	80048ea <_svfiprintf_r+0x1d6>
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <_svfiprintf_r+0x1f0>)
 800487a:	bb1b      	cbnz	r3, 80048c4 <_svfiprintf_r+0x1b0>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	3307      	adds	r3, #7
 8004880:	f023 0307 	bic.w	r3, r3, #7
 8004884:	3308      	adds	r3, #8
 8004886:	9303      	str	r3, [sp, #12]
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	4433      	add	r3, r6
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	e768      	b.n	8004762 <_svfiprintf_r+0x4e>
 8004890:	fb0c 3202 	mla	r2, ip, r2, r3
 8004894:	460c      	mov	r4, r1
 8004896:	2001      	movs	r0, #1
 8004898:	e7a6      	b.n	80047e8 <_svfiprintf_r+0xd4>
 800489a:	2300      	movs	r3, #0
 800489c:	3401      	adds	r4, #1
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	4619      	mov	r1, r3
 80048a2:	f04f 0c0a 	mov.w	ip, #10
 80048a6:	4620      	mov	r0, r4
 80048a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ac:	3a30      	subs	r2, #48	; 0x30
 80048ae:	2a09      	cmp	r2, #9
 80048b0:	d903      	bls.n	80048ba <_svfiprintf_r+0x1a6>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0c6      	beq.n	8004844 <_svfiprintf_r+0x130>
 80048b6:	9105      	str	r1, [sp, #20]
 80048b8:	e7c4      	b.n	8004844 <_svfiprintf_r+0x130>
 80048ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80048be:	4604      	mov	r4, r0
 80048c0:	2301      	movs	r3, #1
 80048c2:	e7f0      	b.n	80048a6 <_svfiprintf_r+0x192>
 80048c4:	ab03      	add	r3, sp, #12
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	462a      	mov	r2, r5
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <_svfiprintf_r+0x1f4>)
 80048cc:	a904      	add	r1, sp, #16
 80048ce:	4638      	mov	r0, r7
 80048d0:	f3af 8000 	nop.w
 80048d4:	1c42      	adds	r2, r0, #1
 80048d6:	4606      	mov	r6, r0
 80048d8:	d1d6      	bne.n	8004888 <_svfiprintf_r+0x174>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	065b      	lsls	r3, r3, #25
 80048de:	f53f af2d 	bmi.w	800473c <_svfiprintf_r+0x28>
 80048e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e4:	b01d      	add	sp, #116	; 0x74
 80048e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	462a      	mov	r2, r5
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_svfiprintf_r+0x1f4>)
 80048f2:	a904      	add	r1, sp, #16
 80048f4:	4638      	mov	r0, r7
 80048f6:	f000 f879 	bl	80049ec <_printf_i>
 80048fa:	e7eb      	b.n	80048d4 <_svfiprintf_r+0x1c0>
 80048fc:	08004dd4 	.word	0x08004dd4
 8004900:	08004dde 	.word	0x08004dde
 8004904:	00000000 	.word	0x00000000
 8004908:	08004661 	.word	0x08004661
 800490c:	08004dda 	.word	0x08004dda

08004910 <_printf_common>:
 8004910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	4616      	mov	r6, r2
 8004916:	4699      	mov	r9, r3
 8004918:	688a      	ldr	r2, [r1, #8]
 800491a:	690b      	ldr	r3, [r1, #16]
 800491c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004920:	4293      	cmp	r3, r2
 8004922:	bfb8      	it	lt
 8004924:	4613      	movlt	r3, r2
 8004926:	6033      	str	r3, [r6, #0]
 8004928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800492c:	4607      	mov	r7, r0
 800492e:	460c      	mov	r4, r1
 8004930:	b10a      	cbz	r2, 8004936 <_printf_common+0x26>
 8004932:	3301      	adds	r3, #1
 8004934:	6033      	str	r3, [r6, #0]
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	0699      	lsls	r1, r3, #26
 800493a:	bf42      	ittt	mi
 800493c:	6833      	ldrmi	r3, [r6, #0]
 800493e:	3302      	addmi	r3, #2
 8004940:	6033      	strmi	r3, [r6, #0]
 8004942:	6825      	ldr	r5, [r4, #0]
 8004944:	f015 0506 	ands.w	r5, r5, #6
 8004948:	d106      	bne.n	8004958 <_printf_common+0x48>
 800494a:	f104 0a19 	add.w	sl, r4, #25
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	6832      	ldr	r2, [r6, #0]
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	42ab      	cmp	r3, r5
 8004956:	dc26      	bgt.n	80049a6 <_printf_common+0x96>
 8004958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800495c:	1e13      	subs	r3, r2, #0
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	2301      	movne	r3, #1
 8004964:	0692      	lsls	r2, r2, #26
 8004966:	d42b      	bmi.n	80049c0 <_printf_common+0xb0>
 8004968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496c:	4649      	mov	r1, r9
 800496e:	4638      	mov	r0, r7
 8004970:	47c0      	blx	r8
 8004972:	3001      	adds	r0, #1
 8004974:	d01e      	beq.n	80049b4 <_printf_common+0xa4>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6922      	ldr	r2, [r4, #16]
 800497a:	f003 0306 	and.w	r3, r3, #6
 800497e:	2b04      	cmp	r3, #4
 8004980:	bf02      	ittt	eq
 8004982:	68e5      	ldreq	r5, [r4, #12]
 8004984:	6833      	ldreq	r3, [r6, #0]
 8004986:	1aed      	subeq	r5, r5, r3
 8004988:	68a3      	ldr	r3, [r4, #8]
 800498a:	bf0c      	ite	eq
 800498c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004990:	2500      	movne	r5, #0
 8004992:	4293      	cmp	r3, r2
 8004994:	bfc4      	itt	gt
 8004996:	1a9b      	subgt	r3, r3, r2
 8004998:	18ed      	addgt	r5, r5, r3
 800499a:	2600      	movs	r6, #0
 800499c:	341a      	adds	r4, #26
 800499e:	42b5      	cmp	r5, r6
 80049a0:	d11a      	bne.n	80049d8 <_printf_common+0xc8>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e008      	b.n	80049b8 <_printf_common+0xa8>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4652      	mov	r2, sl
 80049aa:	4649      	mov	r1, r9
 80049ac:	4638      	mov	r0, r7
 80049ae:	47c0      	blx	r8
 80049b0:	3001      	adds	r0, #1
 80049b2:	d103      	bne.n	80049bc <_printf_common+0xac>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049bc:	3501      	adds	r5, #1
 80049be:	e7c6      	b.n	800494e <_printf_common+0x3e>
 80049c0:	18e1      	adds	r1, r4, r3
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	2030      	movs	r0, #48	; 0x30
 80049c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ca:	4422      	add	r2, r4
 80049cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d4:	3302      	adds	r3, #2
 80049d6:	e7c7      	b.n	8004968 <_printf_common+0x58>
 80049d8:	2301      	movs	r3, #1
 80049da:	4622      	mov	r2, r4
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d0e6      	beq.n	80049b4 <_printf_common+0xa4>
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7d9      	b.n	800499e <_printf_common+0x8e>
	...

080049ec <_printf_i>:
 80049ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	7e0f      	ldrb	r7, [r1, #24]
 80049f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f4:	2f78      	cmp	r7, #120	; 0x78
 80049f6:	4691      	mov	r9, r2
 80049f8:	4680      	mov	r8, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	469a      	mov	sl, r3
 80049fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a02:	d807      	bhi.n	8004a14 <_printf_i+0x28>
 8004a04:	2f62      	cmp	r7, #98	; 0x62
 8004a06:	d80a      	bhi.n	8004a1e <_printf_i+0x32>
 8004a08:	2f00      	cmp	r7, #0
 8004a0a:	f000 80d4 	beq.w	8004bb6 <_printf_i+0x1ca>
 8004a0e:	2f58      	cmp	r7, #88	; 0x58
 8004a10:	f000 80c0 	beq.w	8004b94 <_printf_i+0x1a8>
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a1c:	e03a      	b.n	8004a94 <_printf_i+0xa8>
 8004a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a22:	2b15      	cmp	r3, #21
 8004a24:	d8f6      	bhi.n	8004a14 <_printf_i+0x28>
 8004a26:	a101      	add	r1, pc, #4	; (adr r1, 8004a2c <_printf_i+0x40>)
 8004a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a15 	.word	0x08004a15
 8004a38:	08004a15 	.word	0x08004a15
 8004a3c:	08004a15 	.word	0x08004a15
 8004a40:	08004a15 	.word	0x08004a15
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a15 	.word	0x08004a15
 8004a4c:	08004a15 	.word	0x08004a15
 8004a50:	08004a15 	.word	0x08004a15
 8004a54:	08004a15 	.word	0x08004a15
 8004a58:	08004b9d 	.word	0x08004b9d
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004b57 	.word	0x08004b57
 8004a64:	08004a15 	.word	0x08004a15
 8004a68:	08004a15 	.word	0x08004a15
 8004a6c:	08004bbf 	.word	0x08004bbf
 8004a70:	08004a15 	.word	0x08004a15
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004a15 	.word	0x08004a15
 8004a7c:	08004a15 	.word	0x08004a15
 8004a80:	08004b5f 	.word	0x08004b5f
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a94:	2301      	movs	r3, #1
 8004a96:	e09f      	b.n	8004bd8 <_printf_i+0x1ec>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	0607      	lsls	r7, r0, #24
 8004a9e:	f103 0104 	add.w	r1, r3, #4
 8004aa2:	6029      	str	r1, [r5, #0]
 8004aa4:	d501      	bpl.n	8004aaa <_printf_i+0xbe>
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	e003      	b.n	8004ab2 <_printf_i+0xc6>
 8004aaa:	0646      	lsls	r6, r0, #25
 8004aac:	d5fb      	bpl.n	8004aa6 <_printf_i+0xba>
 8004aae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	da03      	bge.n	8004abe <_printf_i+0xd2>
 8004ab6:	232d      	movs	r3, #45	; 0x2d
 8004ab8:	4276      	negs	r6, r6
 8004aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abe:	485a      	ldr	r0, [pc, #360]	; (8004c28 <_printf_i+0x23c>)
 8004ac0:	230a      	movs	r3, #10
 8004ac2:	e012      	b.n	8004aea <_printf_i+0xfe>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6029      	str	r1, [r5, #0]
 8004acc:	0605      	lsls	r5, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xe8>
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0xee>
 8004ad4:	0641      	lsls	r1, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xe4>
 8004ad8:	881e      	ldrh	r6, [r3, #0]
 8004ada:	4853      	ldr	r0, [pc, #332]	; (8004c28 <_printf_i+0x23c>)
 8004adc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ade:	bf0c      	ite	eq
 8004ae0:	2308      	moveq	r3, #8
 8004ae2:	230a      	movne	r3, #10
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aea:	6865      	ldr	r5, [r4, #4]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	bfa2      	ittt	ge
 8004af2:	6821      	ldrge	r1, [r4, #0]
 8004af4:	f021 0104 	bicge.w	r1, r1, #4
 8004af8:	6021      	strge	r1, [r4, #0]
 8004afa:	b90e      	cbnz	r6, 8004b00 <_printf_i+0x114>
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d04b      	beq.n	8004b98 <_printf_i+0x1ac>
 8004b00:	4615      	mov	r5, r2
 8004b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b06:	fb03 6711 	mls	r7, r3, r1, r6
 8004b0a:	5dc7      	ldrb	r7, [r0, r7]
 8004b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b10:	4637      	mov	r7, r6
 8004b12:	42bb      	cmp	r3, r7
 8004b14:	460e      	mov	r6, r1
 8004b16:	d9f4      	bls.n	8004b02 <_printf_i+0x116>
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d10b      	bne.n	8004b34 <_printf_i+0x148>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07de      	lsls	r6, r3, #31
 8004b20:	d508      	bpl.n	8004b34 <_printf_i+0x148>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	4299      	cmp	r1, r3
 8004b28:	bfde      	ittt	le
 8004b2a:	2330      	movle	r3, #48	; 0x30
 8004b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b34:	1b52      	subs	r2, r2, r5
 8004b36:	6122      	str	r2, [r4, #16]
 8004b38:	f8cd a000 	str.w	sl, [sp]
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	aa03      	add	r2, sp, #12
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f7ff fee4 	bl	8004910 <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d14a      	bne.n	8004be2 <_printf_i+0x1f6>
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b004      	add	sp, #16
 8004b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	f043 0320 	orr.w	r3, r3, #32
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	4833      	ldr	r0, [pc, #204]	; (8004c2c <_printf_i+0x240>)
 8004b60:	2778      	movs	r7, #120	; 0x78
 8004b62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	6829      	ldr	r1, [r5, #0]
 8004b6a:	061f      	lsls	r7, r3, #24
 8004b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b70:	d402      	bmi.n	8004b78 <_printf_i+0x18c>
 8004b72:	065f      	lsls	r7, r3, #25
 8004b74:	bf48      	it	mi
 8004b76:	b2b6      	uxthmi	r6, r6
 8004b78:	07df      	lsls	r7, r3, #31
 8004b7a:	bf48      	it	mi
 8004b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b80:	6029      	str	r1, [r5, #0]
 8004b82:	bf48      	it	mi
 8004b84:	6023      	strmi	r3, [r4, #0]
 8004b86:	b91e      	cbnz	r6, 8004b90 <_printf_i+0x1a4>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f023 0320 	bic.w	r3, r3, #32
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	2310      	movs	r3, #16
 8004b92:	e7a7      	b.n	8004ae4 <_printf_i+0xf8>
 8004b94:	4824      	ldr	r0, [pc, #144]	; (8004c28 <_printf_i+0x23c>)
 8004b96:	e7e4      	b.n	8004b62 <_printf_i+0x176>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	e7bd      	b.n	8004b18 <_printf_i+0x12c>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6961      	ldr	r1, [r4, #20]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6028      	str	r0, [r5, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1c4>
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1ca>
 8004bb0:	0670      	lsls	r0, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c0>
 8004bb4:	8019      	strh	r1, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7bc      	b.n	8004b38 <_printf_i+0x14c>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fb00 	bl	80001d0 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1ea>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7aa      	b.n	8004b38 <_printf_i+0x14c>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ad      	beq.n	8004b4c <_printf_i+0x160>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x232>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a6      	b.n	8004b50 <_printf_i+0x164>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09d      	beq.n	8004b4c <_printf_i+0x160>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x216>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x20a>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x226>
 8004c26:	bf00      	nop
 8004c28:	08004de5 	.word	0x08004de5
 8004c2c:	08004df6 	.word	0x08004df6

08004c30 <memmove>:
 8004c30:	4288      	cmp	r0, r1
 8004c32:	b510      	push	{r4, lr}
 8004c34:	eb01 0402 	add.w	r4, r1, r2
 8004c38:	d902      	bls.n	8004c40 <memmove+0x10>
 8004c3a:	4284      	cmp	r4, r0
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	d807      	bhi.n	8004c50 <memmove+0x20>
 8004c40:	1e43      	subs	r3, r0, #1
 8004c42:	42a1      	cmp	r1, r4
 8004c44:	d008      	beq.n	8004c58 <memmove+0x28>
 8004c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c4e:	e7f8      	b.n	8004c42 <memmove+0x12>
 8004c50:	4402      	add	r2, r0
 8004c52:	4601      	mov	r1, r0
 8004c54:	428a      	cmp	r2, r1
 8004c56:	d100      	bne.n	8004c5a <memmove+0x2a>
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c62:	e7f7      	b.n	8004c54 <memmove+0x24>

08004c64 <_sbrk_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_sbrk_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fc f9ae 	bl	8000fd0 <_sbrk>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_sbrk_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_sbrk_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000284 	.word	0x20000284

08004c84 <memcpy>:
 8004c84:	440a      	add	r2, r1
 8004c86:	4291      	cmp	r1, r2
 8004c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c8c:	d100      	bne.n	8004c90 <memcpy+0xc>
 8004c8e:	4770      	bx	lr
 8004c90:	b510      	push	{r4, lr}
 8004c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	d1f9      	bne.n	8004c92 <memcpy+0xe>
 8004c9e:	bd10      	pop	{r4, pc}

08004ca0 <_realloc_r>:
 8004ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	460e      	mov	r6, r1
 8004caa:	b921      	cbnz	r1, 8004cb6 <_realloc_r+0x16>
 8004cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	f7ff bc49 	b.w	8004548 <_malloc_r>
 8004cb6:	b92a      	cbnz	r2, 8004cc4 <_realloc_r+0x24>
 8004cb8:	f7ff fbda 	bl	8004470 <_free_r>
 8004cbc:	4625      	mov	r5, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	f000 f81b 	bl	8004cfe <_malloc_usable_size_r>
 8004cc8:	4284      	cmp	r4, r0
 8004cca:	4607      	mov	r7, r0
 8004ccc:	d802      	bhi.n	8004cd4 <_realloc_r+0x34>
 8004cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cd2:	d812      	bhi.n	8004cfa <_realloc_r+0x5a>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fc36 	bl	8004548 <_malloc_r>
 8004cdc:	4605      	mov	r5, r0
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d0ed      	beq.n	8004cbe <_realloc_r+0x1e>
 8004ce2:	42bc      	cmp	r4, r7
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	bf28      	it	cs
 8004cea:	463a      	movcs	r2, r7
 8004cec:	f7ff ffca 	bl	8004c84 <memcpy>
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f7ff fbbc 	bl	8004470 <_free_r>
 8004cf8:	e7e1      	b.n	8004cbe <_realloc_r+0x1e>
 8004cfa:	4635      	mov	r5, r6
 8004cfc:	e7df      	b.n	8004cbe <_realloc_r+0x1e>

08004cfe <_malloc_usable_size_r>:
 8004cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d02:	1f18      	subs	r0, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfbc      	itt	lt
 8004d08:	580b      	ldrlt	r3, [r1, r0]
 8004d0a:	18c0      	addlt	r0, r0, r3
 8004d0c:	4770      	bx	lr
	...

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
