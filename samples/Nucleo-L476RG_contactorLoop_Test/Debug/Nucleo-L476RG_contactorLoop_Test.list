
Nucleo-L476RG_contactorLoop_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000005c  080070a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080070a4  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117ec  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d6  00000000  00000000  000318bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b51  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280f5  00000000  00000000  00035791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f6e  00000000  00000000  0005d886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdc6f  00000000  00000000  0006e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004300  00000000  00000000  0016c464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00170764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006efc 	.word	0x08006efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006efc 	.word	0x08006efc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <getCellFaults>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

uint16_t getCellFaults(Cell* cell){
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    uint16_t result = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	81fb      	strh	r3, [r7, #14]

    // Get the lower 4 bits of module and cell
    result |= (cell->module & 0x0F) << 12;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	031b      	lsls	r3, r3, #12
 800057e:	b21a      	sxth	r2, r3
 8000580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000584:	4313      	orrs	r3, r2
 8000586:	b21b      	sxth	r3, r3
 8000588:	81fb      	strh	r3, [r7, #14]
    result |= (cell->cell & 0x0F) << 8;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21b      	sxth	r3, r3
 8000592:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000596:	b21a      	sxth	r2, r3
 8000598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	81fb      	strh	r3, [r7, #14]

    // Concatenate all the booleans
    result |= (cell->power_rail & 0x01) << 7;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7f1b      	ldrb	r3, [r3, #28]
 80005a6:	01db      	lsls	r3, r3, #7
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->comm & 0x01) << 6;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7f5b      	ldrb	r3, [r3, #29]
 80005bc:	019b      	lsls	r3, r3, #6
 80005be:	b21b      	sxth	r3, r3
 80005c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_voltage & 0x01) << 5;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7f9b      	ldrb	r3, [r3, #30]
 80005d4:	015b      	lsls	r3, r3, #5
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	b21a      	sxth	r2, r3
 80005de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_voltage & 0x01) << 4;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7fdb      	ldrb	r3, [r3, #31]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_temp & 0x01) << 3;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	b21b      	sxth	r3, r3
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	b21a      	sxth	r2, r3
 8000610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000614:	4313      	orrs	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_temp & 0x01) << 2;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	b21b      	sxth	r3, r3
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b21a      	sxth	r2, r3
 800062a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800062e:	4313      	orrs	r3, r2
 8000630:	b21b      	sxth	r3, r3
 8000632:	81fb      	strh	r3, [r7, #14]
    result |= (cell->over_current & 0x01) << 1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b21b      	sxth	r3, r3
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	b21a      	sxth	r2, r3
 8000644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	81fb      	strh	r3, [r7, #14]
    result |= (cell->under_current & 0x01);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000654:	b21b      	sxth	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b21a      	sxth	r2, r3
 800065c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000660:	4313      	orrs	r3, r2
 8000662:	b21b      	sxth	r3, r3
 8000664:	81fb      	strh	r3, [r7, #14]

    return result;
 8000666:	89fb      	ldrh	r3, [r7, #14]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <setCellFaults>:

void setCellFaults(Cell* cell, CellFault value) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
    // Extract the boolean values
    if (value & POWER_RAIL_FAULT) cell->power_rail = true;
 8000680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000684:	2b00      	cmp	r3, #0
 8000686:	da02      	bge.n	800068e <setCellFaults+0x1a>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	771a      	strb	r2, [r3, #28]
    if (value & COMM_FAULT) cell->comm = true;
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <setCellFaults+0x2a>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	775a      	strb	r2, [r3, #29]
    if (value & OVER_VOLTAGE_FAULT) cell->over_voltage = true;
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <setCellFaults+0x3a>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2201      	movs	r2, #1
 80006ac:	779a      	strb	r2, [r3, #30]
    if (value & UNDER_VOLTAGE_FAULT) cell->under_voltage = true;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <setCellFaults+0x4a>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	77da      	strb	r2, [r3, #31]
    if (value & OVER_TEMP_FAULT) cell->over_temp = true;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <setCellFaults+0x5c>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
    if (value & UNDER_TEMP_FAULT) cell->under_temp = true;
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <setCellFaults+0x6e>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if (value & OVER_CURRENT_FAULT) cell->over_current = true;
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <setCellFaults+0x80>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    if (value & UNDER_CURRENT_FAULT) cell->under_current = true;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <setCellFaults+0x92>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <clearCellFault>:

void clearCellFault(Cell* cell, CellFault fault) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
    // Clear the corresponding fault
    switch (fault) {
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	d04f      	beq.n	80007c6 <clearCellFault+0xb2>
 8000726:	2b80      	cmp	r3, #128	; 0x80
 8000728:	dc71      	bgt.n	800080e <clearCellFault+0xfa>
 800072a:	2b20      	cmp	r3, #32
 800072c:	dc48      	bgt.n	80007c0 <clearCellFault+0xac>
 800072e:	2b00      	cmp	r3, #0
 8000730:	dd6d      	ble.n	800080e <clearCellFault+0xfa>
 8000732:	3b01      	subs	r3, #1
 8000734:	2b1f      	cmp	r3, #31
 8000736:	d86a      	bhi.n	800080e <clearCellFault+0xfa>
 8000738:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <clearCellFault+0x2c>)
 800073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073e:	bf00      	nop
 8000740:	08000805 	.word	0x08000805
 8000744:	080007fb 	.word	0x080007fb
 8000748:	0800080f 	.word	0x0800080f
 800074c:	080007f1 	.word	0x080007f1
 8000750:	0800080f 	.word	0x0800080f
 8000754:	0800080f 	.word	0x0800080f
 8000758:	0800080f 	.word	0x0800080f
 800075c:	080007e7 	.word	0x080007e7
 8000760:	0800080f 	.word	0x0800080f
 8000764:	0800080f 	.word	0x0800080f
 8000768:	0800080f 	.word	0x0800080f
 800076c:	0800080f 	.word	0x0800080f
 8000770:	0800080f 	.word	0x0800080f
 8000774:	0800080f 	.word	0x0800080f
 8000778:	0800080f 	.word	0x0800080f
 800077c:	080007df 	.word	0x080007df
 8000780:	0800080f 	.word	0x0800080f
 8000784:	0800080f 	.word	0x0800080f
 8000788:	0800080f 	.word	0x0800080f
 800078c:	0800080f 	.word	0x0800080f
 8000790:	0800080f 	.word	0x0800080f
 8000794:	0800080f 	.word	0x0800080f
 8000798:	0800080f 	.word	0x0800080f
 800079c:	0800080f 	.word	0x0800080f
 80007a0:	0800080f 	.word	0x0800080f
 80007a4:	0800080f 	.word	0x0800080f
 80007a8:	0800080f 	.word	0x0800080f
 80007ac:	0800080f 	.word	0x0800080f
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	0800080f 	.word	0x0800080f
 80007b8:	0800080f 	.word	0x0800080f
 80007bc:	080007d7 	.word	0x080007d7
 80007c0:	2b40      	cmp	r3, #64	; 0x40
 80007c2:	d004      	beq.n	80007ce <clearCellFault+0xba>
            break;
        case UNDER_CURRENT_FAULT:
            cell->under_current = false;
            break;
    }
}
 80007c4:	e023      	b.n	800080e <clearCellFault+0xfa>
            cell->power_rail = false;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]
            break;
 80007cc:	e01f      	b.n	800080e <clearCellFault+0xfa>
            cell->comm = false;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	775a      	strb	r2, [r3, #29]
            break;
 80007d4:	e01b      	b.n	800080e <clearCellFault+0xfa>
            cell->over_voltage = false;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	779a      	strb	r2, [r3, #30]
            break;
 80007dc:	e017      	b.n	800080e <clearCellFault+0xfa>
            cell->under_voltage = false;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	77da      	strb	r2, [r3, #31]
            break;
 80007e4:	e013      	b.n	800080e <clearCellFault+0xfa>
            cell->over_temp = false;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80007ee:	e00e      	b.n	800080e <clearCellFault+0xfa>
            cell->under_temp = false;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80007f8:	e009      	b.n	800080e <clearCellFault+0xfa>
            cell->over_current = false;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            break;
 8000802:	e004      	b.n	800080e <clearCellFault+0xfa>
            cell->under_current = false;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            break;
 800080c:	bf00      	nop
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <startupSequence>:
float cell_voltage; 	  	 // Measurement for checkVIT
float cell_current; 	  	 // Calculated current from checkVIT
float thermistor_resistance; // Calculated unknown resistance from checkVIT
float cell_vref; 			 // measurement voltage for vref

int startupSequence(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
	//
	// Negative Contactor Enable
	//

	// Send high Signal to NEG_LSD_OUTPUT
	HAL_GPIO_WritePin(NEG_LSD_OUTPUT_GPIO, NEG_LSD_OUTPUT_PIN, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000828:	4884      	ldr	r0, [pc, #528]	; (8000a3c <startupSequence+0x220>)
 800082a:	f003 fde5 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read NEG_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	4882      	ldr	r0, [pc, #520]	; (8000a3c <startupSequence+0x220>)
 8000834:	f003 fdc8 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <startupSequence+0x28>
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e0f7      	b.n	8000a34 <startupSequence+0x218>


	// Send high Signal to NEG_HSD_OUTPUT
	HAL_GPIO_WritePin(NEG_HSD_OUTPUT_GPIO, NEG_HSD_OUTPUT_PIN, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084a:	487d      	ldr	r0, [pc, #500]	; (8000a40 <startupSequence+0x224>)
 800084c:	f003 fdd4 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read NEG_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(NEG_LSD_INPUT_GPIO, NEG_LSD_INPUT_PIN)){ return -1; }
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	4879      	ldr	r0, [pc, #484]	; (8000a3c <startupSequence+0x220>)
 8000856:	f003 fdb7 	bl	80043c8 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <startupSequence+0x4a>
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	e0e6      	b.n	8000a34 <startupSequence+0x218>

	// Read NEG_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(NEG_CON_INPUT_GPIO, NEG_CON_INPUT_PIN)){ return -1; }
 8000866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f003 fdab 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <startupSequence+0x62>
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	e0da      	b.n	8000a34 <startupSequence+0x218>
	//
	// Pre Charge Contactor Enable
	//

	// Send high Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000884:	486d      	ldr	r0, [pc, #436]	; (8000a3c <startupSequence+0x220>)
 8000886:	f003 fdb7 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 800088a:	2104      	movs	r1, #4
 800088c:	486d      	ldr	r0, [pc, #436]	; (8000a44 <startupSequence+0x228>)
 800088e:	f003 fd9b 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <startupSequence+0x82>
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	e0ca      	b.n	8000a34 <startupSequence+0x218>

	// Send high Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2120      	movs	r1, #32
 80008a2:	4867      	ldr	r0, [pc, #412]	; (8000a40 <startupSequence+0x224>)
 80008a4:	f003 fda8 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80008a8:	2110      	movs	r1, #16
 80008aa:	4865      	ldr	r0, [pc, #404]	; (8000a40 <startupSequence+0x224>)
 80008ac:	f003 fd8c 	bl	80043c8 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <startupSequence+0xa0>
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e0bb      	b.n	8000a34 <startupSequence+0x218>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	485e      	ldr	r0, [pc, #376]	; (8000a3c <startupSequence+0x220>)
 80008c2:	f003 fd81 	bl	80043c8 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d054      	beq.n	8000976 <startupSequence+0x15a>
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	e0b0      	b.n	8000a34 <startupSequence+0x218>

	// Read voltage at ANALOG_INPUT
		// If 90% of pack voltage after time t proceed, else EPO/return -1
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
		    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 80008d2:	2203      	movs	r2, #3
 80008d4:	495c      	ldr	r1, [pc, #368]	; (8000a48 <startupSequence+0x22c>)
 80008d6:	485d      	ldr	r0, [pc, #372]	; (8000a4c <startupSequence+0x230>)
 80008d8:	f001 fcce 	bl	8002278 <HAL_ADC_Start_DMA>
		    HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 80008dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e0:	485a      	ldr	r0, [pc, #360]	; (8000a4c <startupSequence+0x230>)
 80008e2:	f001 fbf1 	bl	80020c8 <HAL_ADC_PollForConversion>
		    pre_charge_voltage = (float)cell_analog_values[0]/1000;   // Store Value in (mV) form (V)
 80008e6:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <startupSequence+0x22c>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
 80008ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f2:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000a50 <startupSequence+0x234>
 80008f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008fa:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <startupSequence+0x238>)
 80008fc:	edc3 7a00 	vstr	s15, [r3]

		    // Convert the integer part to a hexadecimal string
		    uint16_t intPart = (uint16_t)pre_charge_voltage;
 8000900:	4b54      	ldr	r3, [pc, #336]	; (8000a54 <startupSequence+0x238>)
 8000902:	edd3 7a00 	vldr	s15, [r3]
 8000906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090a:	ee17 3a90 	vmov	r3, s15
 800090e:	82fb      	strh	r3, [r7, #22]
		    char IntPartStr[3];
		    sprintf(IntPartStr, "%02X", intPart);
 8000910:	8afa      	ldrh	r2, [r7, #22]
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4950      	ldr	r1, [pc, #320]	; (8000a58 <startupSequence+0x23c>)
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fe4b 	bl	80065b4 <siprintf>

		    // Convert the fractional part to a hexadecimal string
		    uint16_t fracPart = (uint16_t)((pre_charge_voltage - intPart) * 100);
 800091e:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <startupSequence+0x238>)
 8000920:	ed93 7a00 	vldr	s14, [r3]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000932:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000a5c <startupSequence+0x240>
 8000936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800093a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	82bb      	strh	r3, [r7, #20]
		    char FracPartStr[3];
		    sprintf(FracPartStr, "%02X", fracPart);
 8000944:	8aba      	ldrh	r2, [r7, #20]
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4943      	ldr	r1, [pc, #268]	; (8000a58 <startupSequence+0x23c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f005 fe31 	bl	80065b4 <siprintf>

		    // Write to UART Over Temp Fault in the desired format
		    char ResultStr[8];
		    sprintf(ResultStr, "%s.%s\r\n", IntPartStr, FracPartStr);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	1d38      	adds	r0, r7, #4
 800095c:	4940      	ldr	r1, [pc, #256]	; (8000a60 <startupSequence+0x244>)
 800095e:	f005 fe29 	bl	80065b4 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000962:	1d39      	adds	r1, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	2208      	movs	r2, #8
 8000968:	483e      	ldr	r0, [pc, #248]	; (8000a64 <startupSequence+0x248>)
 800096a:	f005 f8cb 	bl	8005b04 <HAL_UART_Transmit>


		    // Delay for debug
		    HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f001 f851 	bl	8001a18 <HAL_Delay>
		while (pre_charge_voltage < PRE_CHG_PACK_VOLT) {
 8000976:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8000a68 <startupSequence+0x24c>
 800097a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <startupSequence+0x238>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098c:	dca1      	bgt.n	80008d2 <startupSequence+0xb6>
	//
	// Positive Contactor Enable
	//

	// Send high Signal to POS_LSD_OUTPUT
	HAL_GPIO_WritePin(POS_LSD_OUTPUT_GPIO, POS_LSD_OUTPUT_PIN, 1);
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	482b      	ldr	r0, [pc, #172]	; (8000a40 <startupSequence+0x224>)
 8000994:	f003 fd30 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read POS_LSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_LSD_INPUT_GPIO, POS_LSD_INPUT_PIN)){ return -1; }
 8000998:	2102      	movs	r1, #2
 800099a:	4828      	ldr	r0, [pc, #160]	; (8000a3c <startupSequence+0x220>)
 800099c:	f003 fd14 	bl	80043c8 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d102      	bne.n	80009ac <startupSequence+0x190>
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e043      	b.n	8000a34 <startupSequence+0x218>

	// Send high Signal to POS_HSD_OUTPUT
	HAL_GPIO_WritePin(POS_HSD_OUTPUT_GPIO, POS_HSD_OUTPUT_PIN, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	4822      	ldr	r0, [pc, #136]	; (8000a3c <startupSequence+0x220>)
 80009b2:	f003 fd21 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read POS_HSD_INPUT
		// If high, proceed, else EPO/return -1
		if (!HAL_GPIO_ReadPin(POS_HSD_INPUT_GPIO, POS_HSD_INPUT_PIN)){ return -1; }
 80009b6:	2104      	movs	r1, #4
 80009b8:	4820      	ldr	r0, [pc, #128]	; (8000a3c <startupSequence+0x220>)
 80009ba:	f003 fd05 	bl	80043c8 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <startupSequence+0x1ae>
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	e034      	b.n	8000a34 <startupSequence+0x218>

	// Read POS_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (HAL_GPIO_ReadPin(POS_CON_INPUT_GPIO, POS_CON_INPUT_PIN)){ return -1; }
 80009ca:	2101      	movs	r1, #1
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <startupSequence+0x220>)
 80009ce:	f003 fcfb 	bl	80043c8 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <startupSequence+0x1c2>
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	e02a      	b.n	8000a34 <startupSequence+0x218>
	//
	// Pre Charge Contactor Disable
	//

	// Send low Signal to PRE_HSD_OUTPUT
	HAL_GPIO_WritePin(PRE_HSD_OUTPUT_GPIO, PRE_HSD_OUTPUT_PIN, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4817      	ldr	r0, [pc, #92]	; (8000a40 <startupSequence+0x224>)
 80009e4:	f003 fd08 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read PRE_HSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_HSD_INPUT_GPIO, PRE_HSD_INPUT_PIN)){ return -1; }
 80009e8:	2110      	movs	r1, #16
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <startupSequence+0x224>)
 80009ec:	f003 fcec 	bl	80043c8 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <startupSequence+0x1e0>
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e01b      	b.n	8000a34 <startupSequence+0x218>

	// Send low Signal to PRE_LSD_OUTPUT
	HAL_GPIO_WritePin(PRE_LSD_OUTPUT_GPIO, PRE_LSD_OUTPUT_PIN, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <startupSequence+0x220>)
 8000a04:	f003 fcf8 	bl	80043f8 <HAL_GPIO_WritePin>

	// Read PRE_LSD_INPUT
		// If low, proceed, else EPO/return -1
		if (HAL_GPIO_ReadPin(PRE_LSD_INPUT_GPIO, PRE_LSD_INPUT_PIN)){ return -1; }
 8000a08:	2104      	movs	r1, #4
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <startupSequence+0x228>)
 8000a0c:	f003 fcdc 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <startupSequence+0x200>
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e00b      	b.n	8000a34 <startupSequence+0x218>

	// Read PRE_CON_OUTPUT
		// If connected (low for nand, high for and, between HSD and LSD), proceed, else EPO/return 0
		if (!HAL_GPIO_ReadPin(PRE_CON_INPUT_GPIO, PRE_CON_INPUT_PIN)){ return -1; }
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <startupSequence+0x220>)
 8000a22:	f003 fcd1 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <startupSequence+0x216>
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	e000      	b.n	8000a34 <startupSequence+0x218>

	// Start-up Sequence Concluded Successfully
	return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	48000400 	.word	0x48000400
 8000a44:	48000c00 	.word	0x48000c00
 8000a48:	200001f0 	.word	0x200001f0
 8000a4c:	20000078 	.word	0x20000078
 8000a50:	447a0000 	.word	0x447a0000
 8000a54:	200001f8 	.word	0x200001f8
 8000a58:	08006f14 	.word	0x08006f14
 8000a5c:	42c80000 	.word	0x42c80000
 8000a60:	08006f1c 	.word	0x08006f1c
 8000a64:	2000014c 	.word	0x2000014c
 8000a68:	00000003 	.word	0x00000003

08000a6c <checkVIT>:

void checkVIT(uint8_t mod_number, uint8_t cell_number){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]

	// append id, mod and cell number to sensor reading
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *) cell_analog_values, 3); // Start Analog to Digital conversion
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	498b      	ldr	r1, [pc, #556]	; (8000cac <checkVIT+0x240>)
 8000a80:	488b      	ldr	r0, [pc, #556]	; (8000cb0 <checkVIT+0x244>)
 8000a82:	f001 fbf9 	bl	8002278 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, 1000);					 // Poll Value Read
 8000a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a8a:	4889      	ldr	r0, [pc, #548]	; (8000cb0 <checkVIT+0x244>)
 8000a8c:	f001 fb1c 	bl	80020c8 <HAL_ADC_PollForConversion>
	cell_voltage = (float)cell_analog_values[1]/1000;   // Store Value in (mV) form (V)
 8000a90:	4b86      	ldr	r3, [pc, #536]	; (8000cac <checkVIT+0x240>)
 8000a92:	885b      	ldrh	r3, [r3, #2]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a9c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8000cb4 <checkVIT+0x248>
 8000aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa4:	4b84      	ldr	r3, [pc, #528]	; (8000cb8 <checkVIT+0x24c>)
 8000aa6:	edc3 7a00 	vstr	s15, [r3]
	cell_vref = (float)cell_analog_values[2]/1000;
 8000aaa:	4b80      	ldr	r3, [pc, #512]	; (8000cac <checkVIT+0x240>)
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ab6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8000cb4 <checkVIT+0x248>
 8000aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000abe:	4b7f      	ldr	r3, [pc, #508]	; (8000cbc <checkVIT+0x250>)
 8000ac0:	edc3 7a00 	vstr	s15, [r3]

	// calculate I = cell_voltage / known R
	cell_current = cell_voltage / known_resistance;
 8000ac4:	4b7c      	ldr	r3, [pc, #496]	; (8000cb8 <checkVIT+0x24c>)
 8000ac6:	ed93 7a00 	vldr	s14, [r3]
 8000aca:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8000cc0 <checkVIT+0x254>
 8000ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad2:	4b7c      	ldr	r3, [pc, #496]	; (8000cc4 <checkVIT+0x258>)
 8000ad4:	edc3 7a00 	vstr	s15, [r3]

	// calculate thermistor R = (Vref - V) /I
	thermistor_resistance = (cell_vref - cell_voltage) / cell_current;
 8000ad8:	4b78      	ldr	r3, [pc, #480]	; (8000cbc <checkVIT+0x250>)
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	4b76      	ldr	r3, [pc, #472]	; (8000cb8 <checkVIT+0x24c>)
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ae8:	4b76      	ldr	r3, [pc, #472]	; (8000cc4 <checkVIT+0x258>)
 8000aea:	ed93 7a00 	vldr	s14, [r3]
 8000aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af2:	4b75      	ldr	r3, [pc, #468]	; (8000cc8 <checkVIT+0x25c>)
 8000af4:	edc3 7a00 	vstr	s15, [r3]

	// Convert module number to hex
	uint16_t mod_num = (uint16_t)mod_number;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char mod_numStr[2];
	sprintf(mod_numStr, "%1X", mod_num);
 8000afc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4972      	ldr	r1, [pc, #456]	; (8000ccc <checkVIT+0x260>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 fd55 	bl	80065b4 <siprintf>

	// Convert cell number to hex
	uint16_t cell_num = (uint16_t)cell_number;
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	char cell_numStr[2];
	sprintf(cell_numStr, "%1X", cell_num);
 8000b0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	496d      	ldr	r1, [pc, #436]	; (8000ccc <checkVIT+0x260>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fd4c 	bl	80065b4 <siprintf>

	// Convert the integer part to a hexadecimal string
	uint16_t intPart = (uint16_t)cell_voltage;
 8000b1c:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <checkVIT+0x24c>)
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b26:	ee17 3a90 	vmov	r3, s15
 8000b2a:	857b      	strh	r3, [r7, #42]	; 0x2a
	char IntPartStr[3];
	sprintf(IntPartStr, "%02X", intPart);
 8000b2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4967      	ldr	r1, [pc, #412]	; (8000cd0 <checkVIT+0x264>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 fd3d 	bl	80065b4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	uint16_t fracPart = (uint16_t)((cell_voltage - intPart) * 100);
 8000b3a:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <checkVIT+0x24c>)
 8000b3c:	ed93 7a00 	vldr	s14, [r3]
 8000b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000cd4 <checkVIT+0x268>
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b5a:	ee17 3a90 	vmov	r3, s15
 8000b5e:	853b      	strh	r3, [r7, #40]	; 0x28
	char FracPartStr[3];
	sprintf(FracPartStr, "%02X", fracPart);
 8000b60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	495a      	ldr	r1, [pc, #360]	; (8000cd0 <checkVIT+0x264>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 fd23 	bl	80065b4 <siprintf>

	// Write to UART
	char ResultStr[11];
	sprintf(ResultStr, "1%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000b6e:	f107 0120 	add.w	r1, r7, #32
 8000b72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b76:	f107 000c 	add.w	r0, r7, #12
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	460b      	mov	r3, r1
 8000b88:	4953      	ldr	r1, [pc, #332]	; (8000cd8 <checkVIT+0x26c>)
 8000b8a:	f005 fd13 	bl	80065b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000b8e:	f107 010c 	add.w	r1, r7, #12
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	220b      	movs	r2, #11
 8000b96:	4851      	ldr	r0, [pc, #324]	; (8000cdc <checkVIT+0x270>)
 8000b98:	f004 ffb4 	bl	8005b04 <HAL_UART_Transmit>

	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)cell_current;
 8000b9c:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <checkVIT+0x258>)
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba6:	ee17 3a90 	vmov	r3, s15
 8000baa:	857b      	strh	r3, [r7, #42]	; 0x2a
	sprintf(IntPartStr, "%02X", intPart);
 8000bac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4947      	ldr	r1, [pc, #284]	; (8000cd0 <checkVIT+0x264>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fcfd 	bl	80065b4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((cell_current - intPart) * 100);
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <checkVIT+0x258>)
 8000bbc:	ed93 7a00 	vldr	s14, [r3]
 8000bc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000cd4 <checkVIT+0x268>
 8000bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	853b      	strh	r3, [r7, #40]	; 0x28
	sprintf(FracPartStr, "%02X", fracPart);
 8000be0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	493a      	ldr	r1, [pc, #232]	; (8000cd0 <checkVIT+0x264>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 fce3 	bl	80065b4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "2%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000bee:	f107 0120 	add.w	r1, r7, #32
 8000bf2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000bf6:	f107 000c 	add.w	r0, r7, #12
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	460b      	mov	r3, r1
 8000c08:	4935      	ldr	r1, [pc, #212]	; (8000ce0 <checkVIT+0x274>)
 8000c0a:	f005 fcd3 	bl	80065b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c0e:	f107 010c 	add.w	r1, r7, #12
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	220b      	movs	r2, #11
 8000c16:	4831      	ldr	r0, [pc, #196]	; (8000cdc <checkVIT+0x270>)
 8000c18:	f004 ff74 	bl	8005b04 <HAL_UART_Transmit>

	// TODO: determine temp based off linear eq of degrees vs ohms
	// Convert the integer part to a hexadecimal string
	intPart = (uint16_t)thermistor_resistance;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <checkVIT+0x25c>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c26:	ee17 3a90 	vmov	r3, s15
 8000c2a:	857b      	strh	r3, [r7, #42]	; 0x2a
	sprintf(IntPartStr, "%02X", intPart);
 8000c2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4927      	ldr	r1, [pc, #156]	; (8000cd0 <checkVIT+0x264>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fcbd 	bl	80065b4 <siprintf>

	// Convert the fractional part to a hexadecimal string
	fracPart = (uint16_t)((thermistor_resistance - intPart) * 100);
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <checkVIT+0x25c>)
 8000c3c:	ed93 7a00 	vldr	s14, [r3]
 8000c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000cd4 <checkVIT+0x268>
 8000c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	853b      	strh	r3, [r7, #40]	; 0x28
	sprintf(FracPartStr, "%02X", fracPart);
 8000c60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <checkVIT+0x264>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fca3 	bl	80065b4 <siprintf>

	// Write to UART
	sprintf(ResultStr, "3%s%s%s.%s\r\n", mod_numStr, cell_numStr, IntPartStr, FracPartStr);
 8000c6e:	f107 0120 	add.w	r1, r7, #32
 8000c72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c76:	f107 000c 	add.w	r0, r7, #12
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	460b      	mov	r3, r1
 8000c88:	4916      	ldr	r1, [pc, #88]	; (8000ce4 <checkVIT+0x278>)
 8000c8a:	f005 fc93 	bl	80065b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ResultStr, sizeof(ResultStr), 100);
 8000c8e:	f107 010c 	add.w	r1, r7, #12
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	220b      	movs	r2, #11
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <checkVIT+0x270>)
 8000c98:	f004 ff34 	bl	8005b04 <HAL_UART_Transmit>

	// Delay for debug
	HAL_Delay(1000);
 8000c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca0:	f000 feba 	bl	8001a18 <HAL_Delay>

	// TODO: send V and I to the model to get SOH, SOC and SOP

	return 0;
 8000ca4:	bf00      	nop
}
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200001f0 	.word	0x200001f0
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	447a0000 	.word	0x447a0000
 8000cb8:	200001fc 	.word	0x200001fc
 8000cbc:	20000208 	.word	0x20000208
 8000cc0:	435c0000 	.word	0x435c0000
 8000cc4:	20000200 	.word	0x20000200
 8000cc8:	20000204 	.word	0x20000204
 8000ccc:	08006f24 	.word	0x08006f24
 8000cd0:	08006f14 	.word	0x08006f14
 8000cd4:	42c80000 	.word	0x42c80000
 8000cd8:	08006f28 	.word	0x08006f28
 8000cdc:	2000014c 	.word	0x2000014c
 8000ce0:	08006f38 	.word	0x08006f38
 8000ce4:	08006f48 	.word	0x08006f48

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b0a8      	sub	sp, #160	; 0xa0
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fe17 	bl	8001920 <HAL_Init>

  // Fault
  uint16_t Fault;

  // Define the Cell
  Cell cell0 = {
 8000cf2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cf6:	2224      	movs	r2, #36	; 0x24
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f005 fc7a 	bl	80065f4 <memset>
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8000d06:	2302      	movs	r3, #2
 8000d08:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  };

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f990 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 fb18 	bl	8001344 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d14:	f000 faf8 	bl	8001308 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d18:	f000 fac6 	bl	80012a8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000d1c:	f000 fa70 	bl	8001200 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000d20:	f000 f9d8 	bl	80010d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000d24:	48ba      	ldr	r0, [pc, #744]	; (8001010 <main+0x328>)
 8000d26:	f002 fb28 	bl	800337a <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	48b8      	ldr	r0, [pc, #736]	; (8001010 <main+0x328>)
 8000d2e:	f002 fc38 	bl	80035a2 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 8000d32:	4bb8      	ldr	r3, [pc, #736]	; (8001014 <main+0x32c>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000d38:	4bb6      	ldr	r3, [pc, #728]	; (8001014 <main+0x32c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000d3e:	4bb5      	ldr	r3, [pc, #724]	; (8001014 <main+0x32c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 8000d44:	4bb3      	ldr	r3, [pc, #716]	; (8001014 <main+0x32c>)
 8000d46:	f240 4246 	movw	r2, #1094	; 0x446
 8000d4a:	601a      	str	r2, [r3, #0]

//  TxData[0] = 200; // ms Delay
//  TxData[1] = 20;  // loop rep

  // Initializing
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f003 fb50 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f000 fe5c 	bl	8001a18 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f003 fb46 	bl	80043f8 <HAL_GPIO_WritePin>

  int success;
  success = startupSequence();
 8000d6c:	f7ff fd56 	bl	800081c <startupSequence>
 8000d70:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  if (success == -1) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); }
 8000d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d105      	bne.n	8000d8a <main+0xa2>
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f003 fb37 	bl	80043f8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // TODO: loop through every cell in the pack for every module
	  checkVIT(cell0.module, cell0.cell);
 8000d8a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000d8e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe69 	bl	8000a6c <checkVIT>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f003 fb11 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d057      	beq.n	8000e5c <main+0x174>
 8000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f003 fb08 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d14e      	bne.n	8000e5c <main+0x174>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f003 fb17 	bl	80043f8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 fe24 	bl	8001a18 <HAL_Delay>

		  // Set the Cell Over Temp Fault
		  setCellFaults(&cell0, OVER_TEMP_FAULT);
 8000dd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc4c 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Temp Fault
		  Fault = getCellFaults(&cell0);
 8000ddc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fbc3 	bl	800056c <getCellFaults>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 8000dec:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8000df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000df4:	4988      	ldr	r1, [pc, #544]	; (8001018 <main+0x330>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 fbdc 	bl	80065b4 <siprintf>

		  // Write to UART Over Temp Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 8000dfc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	2205      	movs	r2, #5
 8000e04:	4885      	ldr	r0, [pc, #532]	; (800101c <main+0x334>)
 8000e06:	f004 fe7d 	bl	8005b04 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " OVER_TEMP_FAULT\r\n"; //Data to send
 8000e0a:	4b85      	ldr	r3, [pc, #532]	; (8001020 <main+0x338>)
 8000e0c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e10:	461d      	mov	r5, r3
 8000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	8022      	strh	r2, [r4, #0]
 8000e1c:	3402      	adds	r4, #2
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 8000e22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e26:	2364      	movs	r3, #100	; 0x64
 8000e28:	2213      	movs	r2, #19
 8000e2a:	487c      	ldr	r0, [pc, #496]	; (800101c <main+0x334>)
 8000e2c:	f004 fe6a 	bl	8005b04 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f000 fdf1 	bl	8001a18 <HAL_Delay>

		  // Write to CAN Over Temp Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000e36:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <main+0x33c>)
 8000e3c:	4975      	ldr	r1, [pc, #468]	; (8001014 <main+0x32c>)
 8000e3e:	4874      	ldr	r0, [pc, #464]	; (8001010 <main+0x328>)
 8000e40:	f002 fadf 	bl	8003402 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Temp Fault
		  clearCellFault(&cell0, OVER_TEMP_FAULT);
 8000e44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc62 	bl	8000714 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f003 face 	bl	80043f8 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f003 fab0 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d056      	beq.n	8000f1c <main+0x234>
 8000e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f003 faa7 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d14d      	bne.n	8000f1c <main+0x234>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f003 fab6 	bl	80043f8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f000 fdc3 	bl	8001a18 <HAL_Delay>

		  // Set the Cell Over Current Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e96:	2102      	movs	r1, #2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fbeb 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Current Fault
		  Fault = getCellFaults(&cell0);
 8000e9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fb62 	bl	800056c <getCellFaults>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 8000eae:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8000eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb6:	4958      	ldr	r1, [pc, #352]	; (8001018 <main+0x330>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fb7b 	bl	80065b4 <siprintf>

		  // Write to UART Over Current Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 8000ebe:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	4855      	ldr	r0, [pc, #340]	; (800101c <main+0x334>)
 8000ec8:	f004 fe1c 	bl	8005b04 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " OVER_CURRENT_FAULT\r\n"; //Data to send
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <main+0x340>)
 8000ece:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000edc:	6020      	str	r0, [r4, #0]
 8000ede:	3404      	adds	r4, #4
 8000ee0:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 8000ee2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	2216      	movs	r2, #22
 8000eea:	484c      	ldr	r0, [pc, #304]	; (800101c <main+0x334>)
 8000eec:	f004 fe0a 	bl	8005b04 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	; 0x64
 8000ef2:	f000 fd91 	bl	8001a18 <HAL_Delay>

		  // Write to CAN Over Current Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000ef6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <main+0x33c>)
 8000efc:	4945      	ldr	r1, [pc, #276]	; (8001014 <main+0x32c>)
 8000efe:	4844      	ldr	r0, [pc, #272]	; (8001010 <main+0x328>)
 8000f00:	f002 fa7f 	bl	8003402 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Current Fault
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000f04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fc02 	bl	8000714 <clearCellFault>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fa6e 	bl	80043f8 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f003 fa50 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f43f af2d 	beq.w	8000d8a <main+0xa2>
 8000f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f003 fa46 	bl	80043c8 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f43f af23 	beq.w	8000d8a <main+0xa2>
		  // Turn ON LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f003 fa54 	bl	80043f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f003 fa4e 	bl	80043f8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f000 fd5b 	bl	8001a18 <HAL_Delay>

		  // Set the Cell Over Voltage Fault
		  setCellFaults(&cell0, OVER_CURRENT_FAULT);
 8000f62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f66:	2102      	movs	r1, #2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb83 	bl	8000674 <setCellFaults>
		  setCellFaults(&cell0, UNDER_VOLTAGE_FAULT);
 8000f6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f72:	2110      	movs	r1, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fb7d 	bl	8000674 <setCellFaults>

		  // Get the Cell Over Voltage Fault
		  Fault = getCellFaults(&cell0);
 8000f7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faf4 	bl	800056c <getCellFaults>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

		  // Convert the result to a hexadecimal string
		  char FaultStr[5]; // Buffer to hold the result string
		  sprintf(FaultStr, "%04X", Fault);
 8000f8a:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	4921      	ldr	r1, [pc, #132]	; (8001018 <main+0x330>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fb0d 	bl	80065b4 <siprintf>

		  // Write to UART Over Voltage Fault
		  HAL_UART_Transmit(&huart2, (uint8_t*)FaultStr, sizeof(FaultStr), 100);
 8000f9a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	481e      	ldr	r0, [pc, #120]	; (800101c <main+0x334>)
 8000fa4:	f004 fdae 	bl	8005b04 <HAL_UART_Transmit>

		  // Print to UART for Debug
		  uint8_t Test[] = " UNDER_VOLTAGE_FAULT and OVER_CURRENT_FAULT\r\n"; //Data to send
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <main+0x344>)
 8000faa:	463c      	mov	r4, r7
 8000fac:	461d      	mov	r5, r3
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fba:	c407      	stmia	r4!, {r0, r1, r2}
 8000fbc:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);// Sending in normal mode
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	222e      	movs	r2, #46	; 0x2e
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <main+0x334>)
 8000fc6:	f004 fd9d 	bl	8005b04 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f000 fd24 	bl	8001a18 <HAL_Delay>

		  // Write to CAN Over Voltage Fault
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, FaultStr, &TxMailbox);
 8000fd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <main+0x33c>)
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <main+0x32c>)
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <main+0x328>)
 8000fda:	f002 fa12 	bl	8003402 <HAL_CAN_AddTxMessage>

		  // Clear the Cell Over Voltage Fault
		  clearCellFault(&cell0, UNDER_VOLTAGE_FAULT);
 8000fde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fb95 	bl	8000714 <clearCellFault>
		  clearCellFault(&cell0, OVER_CURRENT_FAULT);
 8000fea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fb8f 	bl	8000714 <clearCellFault>

		  // Turn OFF LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f003 f9fb 	bl	80043f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f003 f9f5 	bl	80043f8 <HAL_GPIO_WritePin>
	  checkVIT(cell0.module, cell0.cell);
 800100e:	e6bc      	b.n	8000d8a <main+0xa2>
 8001010:	20000124 	.word	0x20000124
 8001014:	200001d4 	.word	0x200001d4
 8001018:	08006f58 	.word	0x08006f58
 800101c:	2000014c 	.word	0x2000014c
 8001020:	08006f60 	.word	0x08006f60
 8001024:	200001ec 	.word	0x200001ec
 8001028:	08006f74 	.word	0x08006f74
 800102c:	08006f8c 	.word	0x08006f8c

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2244      	movs	r2, #68	; 0x44
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fad8 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001052:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001056:	f003 f9f5 	bl	8004444 <HAL_PWREx_ControlVoltageScaling>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001060:	f000 fa44 	bl	80014ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2310      	movs	r3, #16
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800107e:	230a      	movs	r3, #10
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001082:	2307      	movs	r3, #7
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fa2c 	bl	80044f0 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800109e:	f000 fa25 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fdf4 	bl	8004ca8 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c6:	f000 fa11 	bl	80014ec <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3758      	adds	r7, #88	; 0x58
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_ADC1_Init+0x118>)
 80010f8:	4a3d      	ldr	r2, [pc, #244]	; (80011f0 <MX_ADC1_Init+0x11c>)
 80010fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <MX_ADC1_Init+0x118>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_ADC1_Init+0x118>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001108:	4b38      	ldr	r3, [pc, #224]	; (80011ec <MX_ADC1_Init+0x118>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_ADC1_Init+0x118>)
 8001110:	2201      	movs	r2, #1
 8001112:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_ADC1_Init+0x118>)
 8001116:	2204      	movs	r2, #4
 8001118:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_ADC1_Init+0x118>)
 800111c:	2200      	movs	r2, #0
 800111e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MX_ADC1_Init+0x118>)
 8001122:	2200      	movs	r2, #0
 8001124:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_ADC1_Init+0x118>)
 8001128:	2203      	movs	r2, #3
 800112a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_ADC1_Init+0x118>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_ADC1_Init+0x118>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_ADC1_Init+0x118>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_ADC1_Init+0x118>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_ADC1_Init+0x118>)
 800114a:	2200      	movs	r2, #0
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC1_Init+0x118>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001156:	4825      	ldr	r0, [pc, #148]	; (80011ec <MX_ADC1_Init+0x118>)
 8001158:	f000 fe66 	bl	8001e28 <HAL_ADC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001162:	f000 f9c3 	bl	80014ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <MX_ADC1_Init+0x118>)
 8001172:	f001 fe8d 	bl	8002e90 <HAL_ADCEx_MultiModeConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800117c:	f000 f9b6 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_ADC1_Init+0x120>)
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001184:	2306      	movs	r3, #6
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800118c:	237f      	movs	r3, #127	; 0x7f
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001190:	2304      	movs	r3, #4
 8001192:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_ADC1_Init+0x118>)
 800119e:	f001 f945 	bl	800242c <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011a8:	f000 f9a0 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_ADC1_Init+0x124>)
 80011ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011b0:	230c      	movs	r3, #12
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_ADC1_Init+0x118>)
 80011ba:	f001 f937 	bl	800242c <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80011c4:	f000 f992 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_ADC1_Init+0x128>)
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011cc:	2312      	movs	r3, #18
 80011ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_ADC1_Init+0x118>)
 80011d6:	f001 f929 	bl	800242c <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80011e0:	f000 f984 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000078 	.word	0x20000078
 80011f0:	50040000 	.word	0x50040000
 80011f4:	14f00020 	.word	0x14f00020
 80011f8:	19200040 	.word	0x19200040
 80011fc:	25b00200 	.word	0x25b00200

08001200 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <MX_CAN1_Init+0xa4>)
 800120a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_CAN1_Init+0xa0>)
 800120e:	2220      	movs	r2, #32
 8001210:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_CAN1_Init+0xa0>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001224:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001228:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800122c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001236:	2200      	movs	r2, #0
 8001238:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_CAN1_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001242:	2200      	movs	r2, #0
 8001244:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_CAN1_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001254:	f001 fecc 	bl	8002ff0 <HAL_CAN_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800125e:	f000 f945 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001262:	2301      	movs	r3, #1
 8001264:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001266:	2312      	movs	r3, #18
 8001268:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 800126e:	f242 0360 	movw	r3, #8288	; 0x2060
 8001272:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001278:	f242 0360 	movw	r3, #8288	; 0x2060
 800127c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001286:	2301      	movs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800128a:	2314      	movs	r3, #20
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_CAN1_Init+0xa0>)
 8001294:	f001 ffa7 	bl	80031e6 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000124 	.word	0x20000124
 80012a4:	40006400 	.word	0x40006400

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_USART2_UART_Init+0x5c>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ec:	f004 fbbc 	bl	8005a68 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012f6:	f000 f8f9 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000014c 	.word	0x2000014c
 8001304:	40004400 	.word	0x40004400

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_DMA_Init+0x38>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <MX_DMA_Init+0x38>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6493      	str	r3, [r2, #72]	; 0x48
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_DMA_Init+0x38>)
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200b      	movs	r0, #11
 800132c:	f002 fc73 	bl	8003c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001330:	200b      	movs	r0, #11
 8001332:	f002 fc8c 	bl	8003c4e <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <MX_GPIO_Init+0x198>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <MX_GPIO_Init+0x198>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <MX_GPIO_Init+0x198>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <MX_GPIO_Init+0x198>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a59      	ldr	r2, [pc, #356]	; (80014dc <MX_GPIO_Init+0x198>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <MX_GPIO_Init+0x198>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <MX_GPIO_Init+0x198>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a53      	ldr	r2, [pc, #332]	; (80014dc <MX_GPIO_Init+0x198>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b51      	ldr	r3, [pc, #324]	; (80014dc <MX_GPIO_Init+0x198>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <MX_GPIO_Init+0x198>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <MX_GPIO_Init+0x198>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <MX_GPIO_Init+0x198>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b48      	ldr	r3, [pc, #288]	; (80014dc <MX_GPIO_Init+0x198>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a47      	ldr	r2, [pc, #284]	; (80014dc <MX_GPIO_Init+0x198>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b45      	ldr	r3, [pc, #276]	; (80014dc <MX_GPIO_Init+0x198>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f641 0108 	movw	r1, #6152	; 0x1808
 80013d8:	4841      	ldr	r0, [pc, #260]	; (80014e0 <MX_GPIO_Init+0x19c>)
 80013da:	f003 f80d 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	21e0      	movs	r1, #224	; 0xe0
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f003 f807 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f240 1121 	movw	r1, #289	; 0x121
 80013f0:	483c      	ldr	r0, [pc, #240]	; (80014e4 <MX_GPIO_Init+0x1a0>)
 80013f2:	f003 f801 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <MX_GPIO_Init+0x19c>)
 800140e:	f002 fe31 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9
 8001412:	f240 6307 	movw	r3, #1543	; 0x607
 8001416:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	482e      	ldr	r0, [pc, #184]	; (80014e0 <MX_GPIO_Init+0x19c>)
 8001428:	f002 fe24 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 800142c:	f641 0308 	movw	r3, #6152	; 0x1808
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4826      	ldr	r0, [pc, #152]	; (80014e0 <MX_GPIO_Init+0x19c>)
 8001446:	f002 fe15 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800144a:	23e0      	movs	r3, #224	; 0xe0
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f002 fe06 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8;
 8001468:	f240 1321 	movw	r3, #289	; 0x121
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <MX_GPIO_Init+0x1a0>)
 8001482:	f002 fdf7 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001486:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f002 fde9 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a2:	2304      	movs	r3, #4
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_GPIO_Init+0x1a4>)
 80014b6:	f002 fddd 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80014ba:	f44f 7304 	mov.w	r3, #528	; 0x210
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_GPIO_Init+0x1a0>)
 80014d0:	f002 fdd0 	bl	8004074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000c00 	.word	0x48000c00

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	; 0x60
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0ac      	sub	sp, #176	; 0xb0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2288      	movs	r2, #136	; 0x88
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f005 f847 	bl	80065f4 <memset>
  if(hadc->Instance==ADC1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <HAL_ADC_MspInit+0x120>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d172      	bne.n	8001656 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001574:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800157a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001586:	2308      	movs	r3, #8
 8001588:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800158a:	2307      	movs	r3, #7
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fda5 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80015ac:	f7ff ff9e 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_ADC_MspInit+0x124>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80015e0:	2313      	movs	r3, #19
 80015e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e6:	230b      	movs	r3, #11
 80015e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f002 fd3a 	bl	8004074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_ADC_MspInit+0x12c>)
 8001604:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_ADC_MspInit+0x128>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_ADC_MspInit+0x128>)
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001624:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001630:	2220      	movs	r2, #32
 8001632:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_ADC_MspInit+0x128>)
 800163c:	f002 fb22 	bl	8003c84 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001646:	f7ff ff51 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_ADC_MspInit+0x128>)
 800164e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_ADC_MspInit+0x128>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	37b0      	adds	r7, #176	; 0xb0
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	50040000 	.word	0x50040000
 8001664:	40021000 	.word	0x40021000
 8001668:	200000dc 	.word	0x200000dc
 800166c:	40020008 	.word	0x40020008

08001670 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_CAN_MspInit+0x90>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d131      	bne.n	80016f6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_CAN_MspInit+0x94>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_CAN_MspInit+0x94>)
 8001698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_CAN_MspInit+0x94>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_CAN_MspInit+0x94>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_CAN_MspInit+0x94>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_CAN_MspInit+0x94>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016d4:	2309      	movs	r3, #9
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f002 fcc7 	bl	8004074 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2014      	movs	r0, #20
 80016ec:	f002 fa93 	bl	8003c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016f0:	2014      	movs	r0, #20
 80016f2:	f002 faac 	bl	8003c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40006400 	.word	0x40006400
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ac      	sub	sp, #176	; 0xb0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2288      	movs	r2, #136	; 0x88
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 ff63 	bl	80065f4 <memset>
  if(huart->Instance==USART2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <HAL_UART_MspInit+0xb0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d13b      	bne.n	80017b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fcd3 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001750:	f7ff fecc 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xb4>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_UART_MspInit+0xb4>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_UART_MspInit+0xb4>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_UART_MspInit+0xb4>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <HAL_UART_MspInit+0xb4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_UART_MspInit+0xb4>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001784:	230c      	movs	r3, #12
 8001786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179c:	2307      	movs	r3, #7
 800179e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f002 fc62 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	37b0      	adds	r7, #176	; 0xb0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f8e4 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Channel1_IRQHandler+0x10>)
 800181a:	f002 fb4b 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000dc 	.word	0x200000dc

08001828 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <CAN1_RX0_IRQHandler+0x10>)
 800182e:	f001 fede 	bl	80035ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000124 	.word	0x20000124

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f004 feca 	bl	8006604 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000400 	.word	0x00000400
 80018a0:	2000020c 	.word	0x2000020c
 80018a4:	20000360 	.word	0x20000360

080018a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f004 fe89 	bl	8006610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fe:	f7ff f9f3 	bl	8000ce8 <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001910:	08007048 	.word	0x08007048
  ldr r2, =_sbss
 8001914:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001918:	2000035c 	.word	0x2000035c

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_Init+0x3c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_Init+0x3c>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001936:	2003      	movs	r0, #3
 8001938:	f002 f962 	bl	8003c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f80f 	bl	8001960 <HAL_InitTick>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	e001      	b.n	8001952 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194e:	f7ff fdd3 	bl	80014f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001952:	79fb      	ldrb	r3, [r7, #7]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_InitTick+0x70>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_InitTick+0x6c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f96d 	bl	8003c6a <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d809      	bhi.n	80019b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f002 f937 	bl	8003c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_InitTick+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e004      	b.n	80019c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e001      	b.n	80019c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000210 	.word	0x20000210

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000210 	.word	0x20000210

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <LL_ADC_SetOffset+0x44>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	03fff000 	.word	0x03fff000

08001b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3360      	adds	r3, #96	; 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3360      	adds	r3, #96	; 0x60
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3330      	adds	r3, #48	; 0x30
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	211f      	movs	r1, #31
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 011f 	and.w	r1, r3, #31
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3314      	adds	r3, #20
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0e5b      	lsrs	r3, r3, #25
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	0d1b      	lsrs	r3, r3, #20
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2107      	movs	r1, #7
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0d1b      	lsrs	r3, r3, #20
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0318 	and.w	r3, r3, #24
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c6c:	40d9      	lsrs	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	400b      	ands	r3, r1
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	0007ffff 	.word	0x0007ffff

08001c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_IsEnabled+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_IsEnabled+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e130      	b.n	80020a4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fb75 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff3f 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff25 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff5a 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff3e 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b84      	ldr	r3, [pc, #528]	; (80020ac <HAL_ADC_Init+0x284>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	4a84      	ldr	r2, [pc, #528]	; (80020b0 <HAL_ADC_Init+0x288>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff3c 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff75 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80c9 	bne.w	8002092 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 80c5 	bne.w	8002092 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d115      	bne.n	8001f54 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f28:	4862      	ldr	r0, [pc, #392]	; (80020b4 <HAL_ADC_Init+0x28c>)
 8001f2a:	f7ff ff2f 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	4861      	ldr	r0, [pc, #388]	; (80020b8 <HAL_ADC_Init+0x290>)
 8001f32:	f7ff ff2b 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	431c      	orrs	r4, r3
 8001f3a:	4860      	ldr	r0, [pc, #384]	; (80020bc <HAL_ADC_Init+0x294>)
 8001f3c:	f7ff ff26 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4323      	orrs	r3, r4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	485c      	ldr	r0, [pc, #368]	; (80020c0 <HAL_ADC_Init+0x298>)
 8001f50:	f7ff fd86 	bl	8001a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e5b      	ldrb	r3, [r3, #25]
 8001f58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d106      	bne.n	8001f90 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HAL_ADC_Init+0x29c>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff1b 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 8001fca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13d      	bne.n	800204e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d13a      	bne.n	800204e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fdc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff4:	f023 0302 	bic.w	r3, r3, #2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	69b9      	ldr	r1, [r7, #24]
 8001ffe:	430b      	orrs	r3, r1
 8002000:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002008:	2b01      	cmp	r3, #1
 800200a:	d118      	bne.n	800203e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800202e:	430a      	orrs	r2, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10c      	bne.n	8002070 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f023 010f 	bic.w	r1, r3, #15
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
 800206e:	e007      	b.n	8002080 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020f 	bic.w	r2, r2, #15
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f023 0303 	bic.w	r3, r3, #3
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20000000 	.word	0x20000000
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	50040000 	.word	0x50040000
 80020b8:	50040100 	.word	0x50040100
 80020bc:	50040200 	.word	0x50040200
 80020c0:	50040300 	.word	0x50040300
 80020c4:	fff0c007 	.word	0xfff0c007

080020c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d2:	4866      	ldr	r0, [pc, #408]	; (800226c <HAL_ADC_PollForConversion+0x1a4>)
 80020d4:	f7ff fddc 	bl	8001c90 <LL_ADC_GetMultimode>
 80020d8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d102      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020e2:	2308      	movs	r3, #8
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e02a      	b.n	800213e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d002      	beq.n	80020fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	d111      	bne.n	800211e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0a4      	b.n	8002262 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002118:	2304      	movs	r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800211c:	e00f      	b.n	800213e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800211e:	4853      	ldr	r0, [pc, #332]	; (800226c <HAL_ADC_PollForConversion+0x1a4>)
 8002120:	f7ff fdc4 	bl	8001cac <LL_ADC_GetMultiDMATransfer>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f043 0220 	orr.w	r2, r3, #32
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e093      	b.n	8002262 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800213a:	2304      	movs	r3, #4
 800213c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800213e:	f7ff fc5f 	bl	8001a00 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002144:	e021      	b.n	800218a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d01d      	beq.n	800218a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800214e:	f7ff fc57 	bl	8001a00 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <HAL_ADC_PollForConversion+0x9c>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d112      	bne.n	800218a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0204 	orr.w	r2, r3, #4
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e06b      	b.n	8002262 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0d6      	beq.n	8002146 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fce2 	bl	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01c      	beq.n	80021ee <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e5b      	ldrb	r3, [r3, #25]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d118      	bne.n	80021ee <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d111      	bne.n	80021ee <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <HAL_ADC_PollForConversion+0x1a8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d002      	beq.n	80021fe <HAL_ADC_PollForConversion+0x136>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e000      	b.n	8002200 <HAL_ADC_PollForConversion+0x138>
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_ADC_PollForConversion+0x1ac>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	4293      	cmp	r3, r2
 8002206:	d008      	beq.n	800221a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d002      	beq.n	800221a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b09      	cmp	r3, #9
 8002218:	d104      	bne.n	8002224 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e00c      	b.n	800223e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_ADC_PollForConversion+0x1a8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d002      	beq.n	8002234 <HAL_ADC_PollForConversion+0x16c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e000      	b.n	8002236 <HAL_ADC_PollForConversion+0x16e>
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_ADC_PollForConversion+0x1ac>)
 8002236:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d104      	bne.n	800224e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2208      	movs	r2, #8
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e008      	b.n	8002260 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	220c      	movs	r2, #12
 800225e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	50040300 	.word	0x50040300
 8002270:	50040100 	.word	0x50040100
 8002274:	50040000 	.word	0x50040000

08002278 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002284:	4853      	ldr	r0, [pc, #332]	; (80023d4 <HAL_ADC_Start_DMA+0x15c>)
 8002286:	f7ff fd03 	bl	8001c90 <LL_ADC_GetMultimode>
 800228a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fda2 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8093 	bne.w	80023c4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_Start_DMA+0x34>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e08e      	b.n	80023ca <HAL_ADC_Start_DMA+0x152>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_ADC_Start_DMA+0x160>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d008      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d002      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d172      	bne.n	80023b6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fc9d 	bl	8002c10 <ADC_Enable>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d165      	bne.n	80023ac <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_ADC_Start_DMA+0x164>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d002      	beq.n	8002304 <HAL_ADC_Start_DMA+0x8c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e000      	b.n	8002306 <HAL_ADC_Start_DMA+0x8e>
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_ADC_Start_DMA+0x168>)
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	4293      	cmp	r3, r2
 800230c:	d002      	beq.n	8002314 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f023 0206 	bic.w	r2, r3, #6
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
 8002338:	e002      	b.n	8002340 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <HAL_ADC_Start_DMA+0x16c>)
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_ADC_Start_DMA+0x170>)
 800234e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_ADC_Start_DMA+0x174>)
 8002356:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	221c      	movs	r2, #28
 800235e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0210 	orr.w	r2, r2, #16
 8002376:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3340      	adds	r3, #64	; 0x40
 8002392:	4619      	mov	r1, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f001 fd2c 	bl	8003df4 <HAL_DMA_Start_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fd04 	bl	8001db2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023aa:	e00d      	b.n	80023c8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80023b4:	e008      	b.n	80023c8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023c2:	e001      	b.n	80023c8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
 80023c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	50040300 	.word	0x50040300
 80023d8:	50040200 	.word	0x50040200
 80023dc:	50040100 	.word	0x50040100
 80023e0:	50040000 	.word	0x50040000
 80023e4:	08002d1d 	.word	0x08002d1d
 80023e8:	08002df5 	.word	0x08002df5
 80023ec:	08002e11 	.word	0x08002e11

080023f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b6      	sub	sp, #216	; 0xd8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22>
 800244a:	2302      	movs	r3, #2
 800244c:	e3c9      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x7b6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fcbd 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 83aa 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d824      	bhi.n	80024c2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	3b02      	subs	r3, #2
 800247e:	2b03      	cmp	r3, #3
 8002480:	d81b      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x8e>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_ADC_ConfigChannel+0x5c>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002499 	.word	0x08002499
 800248c:	080024a1 	.word	0x080024a1
 8002490:	080024a9 	.word	0x080024a9
 8002494:	080024b1 	.word	0x080024b1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002498:	230c      	movs	r3, #12
 800249a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800249e:	e010      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024a0:	2312      	movs	r3, #18
 80024a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024a6:	e00c      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024a8:	2318      	movs	r3, #24
 80024aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024ae:	e008      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024ba:	2306      	movs	r3, #6
 80024bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024c0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80024d0:	f7ff fb62 	bl	8001b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc7e 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80024de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fc8a 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 80024ec:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 81a4 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 819f 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	461a      	mov	r2, r3
 8002512:	f7ff fb6d 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00a      	beq.n	800254e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002548:	f7ff fabe 	bl	8001ac8 <LL_ADC_SetOffset>
 800254c:	e179      	b.n	8002842 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fadb 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <HAL_ADC_ConfigChannel+0x14e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fad0 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	e01e      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x18c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fac5 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800259c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e004      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1a4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	e018      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1d6>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80025e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80025ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e004      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80025f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002602:	429a      	cmp	r2, r3
 8002604:	d106      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fa94 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fa78 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x214>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fa6d 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	f003 021f 	and.w	r2, r3, #31
 800263e:	e01e      	b.n	800267e <HAL_ADC_ConfigChannel+0x252>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fa62 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800265e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e004      	b.n	800267c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x26a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	e018      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x29c>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80026aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80026b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e004      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80026be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d106      	bne.n	80026da <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa31 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa15 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x2da>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa0a 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	e01e      	b.n	8002744 <HAL_ADC_ConfigChannel+0x318>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f9ff 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800272c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e004      	b.n	8002742 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x330>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	e014      	b.n	8002786 <HAL_ADC_ConfigChannel+0x35a>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800276a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e004      	b.n	8002786 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800277c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002786:	429a      	cmp	r2, r3
 8002788:	d106      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f9d2 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2103      	movs	r1, #3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f9b6 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x398>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2103      	movs	r1, #3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f9ab 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	e017      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x3c8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2103      	movs	r1, #3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f9a0 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80027ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x3e0>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	e011      	b.n	8002830 <HAL_ADC_ConfigChannel+0x404>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800281a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800281e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	2103      	movs	r1, #3
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f97d 	bl	8001b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff faa0 	bl	8001d8c <LL_ADC_IsEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 8140 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	461a      	mov	r2, r3
 8002862:	f7ff f9f1 	bl	8001c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a8f      	ldr	r2, [pc, #572]	; (8002aa8 <HAL_ADC_ConfigChannel+0x67c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	f040 8131 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_ADC_ConfigChannel+0x46e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	3301      	adds	r3, #1
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2b09      	cmp	r3, #9
 8002890:	bf94      	ite	ls
 8002892:	2301      	movls	r3, #1
 8002894:	2300      	movhi	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	e019      	b.n	80028ce <HAL_ADC_ConfigChannel+0x4a2>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80028ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	bf94      	ite	ls
 80028c8:	2301      	movls	r3, #1
 80028ca:	2300      	movhi	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d079      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x4c2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	3301      	adds	r3, #1
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ec:	e015      	b.n	800291a <HAL_ADC_ConfigChannel+0x4ee>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e003      	b.n	8002912 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800290a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	3301      	adds	r3, #1
 8002914:	069b      	lsls	r3, r3, #26
 8002916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_ADC_ConfigChannel+0x50e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	3301      	adds	r3, #1
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	e017      	b.n	800296a <HAL_ADC_ConfigChannel+0x53e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	ea42 0103 	orr.w	r1, r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x564>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	051b      	lsls	r3, r3, #20
 800298e:	e018      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x596>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f003 021f 	and.w	r2, r3, #31
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c2:	430b      	orrs	r3, r1
 80029c4:	e081      	b.n	8002aca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x5b6>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	e015      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x5e2>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	069b      	lsls	r3, r3, #26
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x602>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	e017      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x632>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x65e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b1e      	subs	r3, #30
 8002a82:	051b      	lsls	r3, r3, #20
 8002a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a88:	e01e      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x69c>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	60fb      	str	r3, [r7, #12]
  return result;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e006      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x688>
 8002aa6:	bf00      	nop
 8002aa8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	051b      	lsls	r3, r3, #20
 8002ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7ff f88e 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d07a      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae0:	4843      	ldr	r0, [pc, #268]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae2:	f7fe ffe3 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002ae6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d12c      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d126      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x6e8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d15d      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4834      	ldr	r0, [pc, #208]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b20:	f7fe ffb1 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	4a36      	ldr	r2, [pc, #216]	; (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b3e:	e002      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f9      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4c:	e040      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d118      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d112      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x74c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12d      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b80:	4619      	mov	r1, r3
 8002b82:	481b      	ldr	r0, [pc, #108]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b84:	f7fe ff7f 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b88:	e024      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_ADC_ConfigChannel+0x7e0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d120      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d11a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d115      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bb6:	f7fe ff66 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
 8002bba:	e00c      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bce:	e002      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	37d8      	adds	r7, #216	; 0xd8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	80080000 	.word	0x80080000
 8002bf0:	50040300 	.word	0x50040300
 8002bf4:	c7520000 	.word	0xc7520000
 8002bf8:	50040000 	.word	0x50040000
 8002bfc:	50040200 	.word	0x50040200
 8002c00:	20000000 	.word	0x20000000
 8002c04:	053e2d63 	.word	0x053e2d63
 8002c08:	cb840000 	.word	0xcb840000
 8002c0c:	80000001 	.word	0x80000001

08002c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f8b3 	bl	8001d8c <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d169      	bne.n	8002d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <ADC_Enable+0xfc>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e055      	b.n	8002d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f882 	bl	8001d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c60:	482b      	ldr	r0, [pc, #172]	; (8002d10 <ADC_Enable+0x100>)
 8002c62:	f7fe ff23 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002c66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <ADC_Enable+0x104>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <ADC_Enable+0x108>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c8a:	e002      	b.n	8002c92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c98:	f7fe feb2 	bl	8001a00 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9e:	e028      	b.n	8002cf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f871 	bl	8001d8c <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f855 	bl	8001d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cba:	f7fe fea1 	bl	8001a00 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d1cf      	bne.n	8002ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	8000003f 	.word	0x8000003f
 8002d10:	50040300 	.word	0x50040300
 8002d14:	20000000 	.word	0x20000000
 8002d18:	053e2d63 	.word	0x053e2d63

08002d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d14b      	bne.n	8002dce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d021      	beq.n	8002d94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ff0c 	bl	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d032      	beq.n	8002dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d12b      	bne.n	8002dc6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11f      	bne.n	8002dc6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
 8002d92:	e018      	b.n	8002dc6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d111      	bne.n	8002dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fb12 	bl	80023f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dcc:	e00e      	b.n	8002dec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fb1c 	bl	8002418 <HAL_ADC_ErrorCallback>
}
 8002de0:	e004      	b.n	8002dec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fafe 	bl	8002404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff faee 	bl	8002418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <LL_ADC_IsEnabled>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <LL_ADC_IsEnabled+0x18>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <LL_ADC_IsEnabled+0x1a>
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b09f      	sub	sp, #124	; 0x7c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e093      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ec8:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	e001      	b.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e072      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffb9 	bl	8002e6a <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffb3 	bl	8002e6a <LL_ADC_REG_IsConversionOngoing>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d154      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d151      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d02c      	beq.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f2e:	035b      	lsls	r3, r3, #13
 8002f30:	430b      	orrs	r3, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f38:	4829      	ldr	r0, [pc, #164]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f3a:	f7ff ff83 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4828      	ldr	r0, [pc, #160]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f42:	f7ff ff7f 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	431c      	orrs	r4, r3
 8002f4a:	4828      	ldr	r0, [pc, #160]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f4c:	f7ff ff7a 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4323      	orrs	r3, r4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d137      	bne.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f60:	f023 030f 	bic.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	6811      	ldr	r1, [r2, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f74:	e028      	b.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f82:	4817      	ldr	r0, [pc, #92]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f84:	f7ff ff5e 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	4816      	ldr	r0, [pc, #88]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f8c:	f7ff ff5a 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	431c      	orrs	r4, r3
 8002f94:	4815      	ldr	r0, [pc, #84]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f96:	f7ff ff55 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4323      	orrs	r3, r4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d112      	bne.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002faa:	f023 030f 	bic.w	r3, r3, #15
 8002fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fb0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb2:	e009      	b.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fc6:	e000      	b.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	377c      	adds	r7, #124	; 0x7c
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	50040000 	.word	0x50040000
 8002fe4:	50040100 	.word	0x50040100
 8002fe8:	50040300 	.word	0x50040300
 8002fec:	50040200 	.word	0x50040200

08002ff0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0ed      	b.n	80031de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fb2e 	bl	8001670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003024:	f7fe fcec 	bl	8001a00 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800302a:	e012      	b.n	8003052 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800302c:	f7fe fce8 	bl	8001a00 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b0a      	cmp	r3, #10
 8003038:	d90b      	bls.n	8003052 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0c5      	b.n	80031de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0e5      	beq.n	800302c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0202 	bic.w	r2, r2, #2
 800306e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003070:	f7fe fcc6 	bl	8001a00 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003076:	e012      	b.n	800309e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003078:	f7fe fcc2 	bl	8001a00 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b0a      	cmp	r3, #10
 8003084:	d90b      	bls.n	800309e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2205      	movs	r2, #5
 8003096:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e09f      	b.n	80031de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7e1b      	ldrb	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7e5b      	ldrb	r3, [r3, #25]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e007      	b.n	8003100 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e9b      	ldrb	r3, [r3, #26]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d108      	bne.n	800311a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0220 	orr.w	r2, r2, #32
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e007      	b.n	800312a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0220 	bic.w	r2, r2, #32
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7edb      	ldrb	r3, [r3, #27]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0210 	bic.w	r2, r2, #16
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e007      	b.n	8003154 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0210 	orr.w	r2, r2, #16
 8003152:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7f1b      	ldrb	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d108      	bne.n	800316e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e007      	b.n	800317e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7f5b      	ldrb	r3, [r3, #29]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d108      	bne.n	8003198 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0204 	orr.w	r2, r2, #4
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e007      	b.n	80031a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d003      	beq.n	800320c <HAL_CAN_ConfigFilter+0x26>
 8003204:	7cfb      	ldrb	r3, [r7, #19]
 8003206:	2b02      	cmp	r3, #2
 8003208:	f040 80aa 	bne.w	8003360 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2201      	movs	r2, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d123      	bne.n	800328e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003268:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3248      	adds	r2, #72	; 0x48
 800326e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003282:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	3348      	adds	r3, #72	; 0x48
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d122      	bne.n	80032dc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3248      	adds	r2, #72	; 0x48
 80032bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	3348      	adds	r3, #72	; 0x48
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032f6:	e007      	b.n	8003308 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003322:	e007      	b.n	8003334 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e006      	b.n	800336e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d12e      	bne.n	80033ec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033a6:	f7fe fb2b 	bl	8001a00 <HAL_GetTick>
 80033aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033ac:	e012      	b.n	80033d4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033ae:	f7fe fb27 	bl	8001a00 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b0a      	cmp	r3, #10
 80033ba:	d90b      	bls.n	80033d4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2205      	movs	r2, #5
 80033cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e012      	b.n	80033fa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e006      	b.n	80033fa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003402:	b480      	push	{r7}
 8003404:	b089      	sub	sp, #36	; 0x24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003416:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d003      	beq.n	800342e <HAL_CAN_AddTxMessage+0x2c>
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	2b02      	cmp	r3, #2
 800342a:	f040 80ad 	bne.w	8003588 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8095 	beq.w	8003578 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	0e1b      	lsrs	r3, r3, #24
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	409a      	lsls	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10d      	bne.n	8003486 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	6809      	ldr	r1, [r1, #0]
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3318      	adds	r3, #24
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	440b      	add	r3, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e00f      	b.n	80034a6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003490:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800349a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3318      	adds	r3, #24
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	440b      	add	r3, r1
 80034a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3318      	adds	r3, #24
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	440b      	add	r3, r1
 80034b6:	3304      	adds	r3, #4
 80034b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	7d1b      	ldrb	r3, [r3, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d111      	bne.n	80034e6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3318      	adds	r3, #24
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	6811      	ldr	r1, [r2, #0]
 80034d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3318      	adds	r3, #24
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	440b      	add	r3, r1
 80034e2:	3304      	adds	r3, #4
 80034e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3307      	adds	r3, #7
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	061a      	lsls	r2, r3, #24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3306      	adds	r3, #6
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3305      	adds	r3, #5
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	4313      	orrs	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	3204      	adds	r2, #4
 8003506:	7812      	ldrb	r2, [r2, #0]
 8003508:	4610      	mov	r0, r2
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	ea43 0200 	orr.w	r2, r3, r0
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	440b      	add	r3, r1
 8003518:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800351c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3303      	adds	r3, #3
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	061a      	lsls	r2, r3, #24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3302      	adds	r3, #2
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3301      	adds	r3, #1
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4313      	orrs	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	4610      	mov	r0, r2
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	6811      	ldr	r1, [r2, #0]
 8003544:	ea43 0200 	orr.w	r2, r3, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	440b      	add	r3, r1
 800354e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003552:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3318      	adds	r3, #24
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4413      	add	r3, r2
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	6811      	ldr	r1, [r2, #0]
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3318      	adds	r3, #24
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	440b      	add	r3, r1
 8003572:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e00e      	b.n	8003596 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e006      	b.n	8003596 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d002      	beq.n	80035c0 <HAL_CAN_ActivateNotification+0x1e>
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d109      	bne.n	80035d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6959      	ldr	r1, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e006      	b.n	80035e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b08a      	sub	sp, #40	; 0x28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d07c      	beq.n	800372e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d023      	beq.n	8003686 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2201      	movs	r2, #1
 8003644:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f983 	bl	800395c <HAL_CAN_TxMailbox0CompleteCallback>
 8003656:	e016      	b.n	8003686 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	e00c      	b.n	8003686 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	e002      	b.n	8003686 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f989 	bl	8003998 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d024      	beq.n	80036da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f963 	bl	8003970 <HAL_CAN_TxMailbox1CompleteCallback>
 80036aa:	e016      	b.n	80036da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e00c      	b.n	80036da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e002      	b.n	80036da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f969 	bl	80039ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d024      	beq.n	800372e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f943 	bl	8003984 <HAL_CAN_TxMailbox2CompleteCallback>
 80036fe:	e016      	b.n	800372e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e00c      	b.n	800372e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
 8003726:	e002      	b.n	800372e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f949 	bl	80039c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003748:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2208      	movs	r2, #8
 800376c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f93a 	bl	80039e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f921 	bl	80039d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2210      	movs	r2, #16
 80037b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2208      	movs	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f91c 	bl	8003a10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f903 	bl	80039fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2210      	movs	r2, #16
 8003810:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f906 	bl	8003a24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8ff 	bl	8003a38 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d07b      	beq.n	800393c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d072      	beq.n	8003934 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d043      	beq.n	8003934 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03e      	beq.n	8003934 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038bc:	2b60      	cmp	r3, #96	; 0x60
 80038be:	d02b      	beq.n	8003918 <HAL_CAN_IRQHandler+0x32a>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d82e      	bhi.n	8003922 <HAL_CAN_IRQHandler+0x334>
 80038c4:	2b50      	cmp	r3, #80	; 0x50
 80038c6:	d022      	beq.n	800390e <HAL_CAN_IRQHandler+0x320>
 80038c8:	2b50      	cmp	r3, #80	; 0x50
 80038ca:	d82a      	bhi.n	8003922 <HAL_CAN_IRQHandler+0x334>
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d019      	beq.n	8003904 <HAL_CAN_IRQHandler+0x316>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d826      	bhi.n	8003922 <HAL_CAN_IRQHandler+0x334>
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d010      	beq.n	80038fa <HAL_CAN_IRQHandler+0x30c>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d822      	bhi.n	8003922 <HAL_CAN_IRQHandler+0x334>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d002      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x2f8>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d005      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038e4:	e01d      	b.n	8003922 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ee:	e019      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f043 0310 	orr.w	r3, r3, #16
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038f8:	e014      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f043 0320 	orr.w	r3, r3, #32
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003902:	e00f      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800390c:	e00a      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003916:	e005      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003920:	e000      	b.n	8003924 <HAL_CAN_IRQHandler+0x336>
            break;
 8003922:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003932:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f87c 	bl	8003a4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003954:	bf00      	nop
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a92:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	60d3      	str	r3, [r2, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	f003 0307 	and.w	r3, r3, #7
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	db0b      	blt.n	8003aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	f003 021f 	and.w	r2, r3, #31
 8003adc:	4907      	ldr	r1, [pc, #28]	; (8003afc <__NVIC_EnableIRQ+0x38>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e100 	.word	0xe000e100

08003b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	6039      	str	r1, [r7, #0]
 8003b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	db0a      	blt.n	8003b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	490c      	ldr	r1, [pc, #48]	; (8003b4c <__NVIC_SetPriority+0x4c>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	440b      	add	r3, r1
 8003b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b28:	e00a      	b.n	8003b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4908      	ldr	r1, [pc, #32]	; (8003b50 <__NVIC_SetPriority+0x50>)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3b04      	subs	r3, #4
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	761a      	strb	r2, [r3, #24]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000e100 	.word	0xe000e100
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f1c3 0307 	rsb	r3, r3, #7
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	bf28      	it	cs
 8003b72:	2304      	movcs	r3, #4
 8003b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d902      	bls.n	8003b84 <NVIC_EncodePriority+0x30>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3b03      	subs	r3, #3
 8003b82:	e000      	b.n	8003b86 <NVIC_EncodePriority+0x32>
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	401a      	ands	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43d9      	mvns	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bac:	4313      	orrs	r3, r2
         );
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3724      	adds	r7, #36	; 0x24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bcc:	d301      	bcc.n	8003bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00f      	b.n	8003bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <SysTick_Config+0x40>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bda:	210f      	movs	r1, #15
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f7ff ff8e 	bl	8003b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <SysTick_Config+0x40>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <SysTick_Config+0x40>)
 8003bec:	2207      	movs	r2, #7
 8003bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	e000e010 	.word	0xe000e010

08003c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff29 	bl	8003a60 <__NVIC_SetPriorityGrouping>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c28:	f7ff ff3e 	bl	8003aa8 <__NVIC_GetPriorityGrouping>
 8003c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f7ff ff8e 	bl	8003b54 <NVIC_EncodePriority>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff5d 	bl	8003b00 <__NVIC_SetPriority>
}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff31 	bl	8003ac4 <__NVIC_EnableIRQ>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffa2 	bl	8003bbc <SysTick_Config>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e098      	b.n	8003dc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_DMA_Init+0x150>)
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d80f      	bhi.n	8003cc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <HAL_DMA_Init+0x154>)
 8003caa:	4413      	add	r3, r2
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <HAL_DMA_Init+0x158>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a48      	ldr	r2, [pc, #288]	; (8003de0 <HAL_DMA_Init+0x15c>)
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8003cc0:	e00e      	b.n	8003ce0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <HAL_DMA_Init+0x160>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a43      	ldr	r2, [pc, #268]	; (8003ddc <HAL_DMA_Init+0x158>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	009a      	lsls	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a42      	ldr	r2, [pc, #264]	; (8003de8 <HAL_DMA_Init+0x164>)
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d3a:	d039      	beq.n	8003db0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <HAL_DMA_Init+0x15c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11a      	bne.n	8003d7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_DMA_Init+0x168>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f003 031c 	and.w	r3, r3, #28
 8003d52:	210f      	movs	r1, #15
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	4924      	ldr	r1, [pc, #144]	; (8003dec <HAL_DMA_Init+0x168>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_DMA_Init+0x168>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f003 031c 	and.w	r3, r3, #28
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	491d      	ldr	r1, [pc, #116]	; (8003dec <HAL_DMA_Init+0x168>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	e019      	b.n	8003db0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_DMA_Init+0x16c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	f003 031c 	and.w	r3, r3, #28
 8003d88:	210f      	movs	r1, #15
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	4917      	ldr	r1, [pc, #92]	; (8003df0 <HAL_DMA_Init+0x16c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <HAL_DMA_Init+0x16c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f003 031c 	and.w	r3, r3, #28
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	4911      	ldr	r1, [pc, #68]	; (8003df0 <HAL_DMA_Init+0x16c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40020407 	.word	0x40020407
 8003dd8:	bffdfff8 	.word	0xbffdfff8
 8003ddc:	cccccccd 	.word	0xcccccccd
 8003de0:	40020000 	.word	0x40020000
 8003de4:	bffdfbf8 	.word	0xbffdfbf8
 8003de8:	40020400 	.word	0x40020400
 8003dec:	400200a8 	.word	0x400200a8
 8003df0:	400204a8 	.word	0x400204a8

08003df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMA_Start_IT+0x20>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e04b      	b.n	8003eac <HAL_DMA_Start_IT+0xb8>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d13a      	bne.n	8003e9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f8e0 	bl	8004012 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 020e 	orr.w	r2, r2, #14
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e00f      	b.n	8003e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 020a 	orr.w	r2, r2, #10
 8003e8a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e005      	b.n	8003eaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f003 031c 	and.w	r3, r3, #28
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d026      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x7a>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d021      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	f003 021c 	and.w	r2, r3, #28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2104      	movs	r1, #4
 8003f16:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d071      	beq.n	8004008 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f2c:	e06c      	b.n	8004008 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f003 031c 	and.w	r3, r3, #28
 8003f36:	2202      	movs	r2, #2
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02e      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xec>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d029      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 020a 	bic.w	r2, r2, #10
 8003f68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f003 021c 	and.w	r2, r3, #28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2102      	movs	r1, #2
 8003f80:	fa01 f202 	lsl.w	r2, r1, r2
 8003f84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d038      	beq.n	8004008 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f9e:	e033      	b.n	8004008 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f003 031c 	and.w	r3, r3, #28
 8003fa8:	2208      	movs	r2, #8
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02a      	beq.n	800400a <HAL_DMA_IRQHandler+0x156>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d025      	beq.n	800400a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020e 	bic.w	r2, r2, #14
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f003 021c 	and.w	r2, r3, #28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004008:	bf00      	nop
 800400a:	bf00      	nop
}
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f003 021c 	and.w	r2, r3, #28
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f202 	lsl.w	r2, r1, r2
 8004032:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b10      	cmp	r3, #16
 8004042:	d108      	bne.n	8004056 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004054:	e007      	b.n	8004066 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	60da      	str	r2, [r3, #12]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004082:	e17f      	b.n	8004384 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8171 	beq.w	800437e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d005      	beq.n	80040b4 <HAL_GPIO_Init+0x40>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d130      	bne.n	8004116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ea:	2201      	movs	r2, #1
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0201 	and.w	r2, r3, #1
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d118      	bne.n	8004154 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004128:	2201      	movs	r2, #1
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0201 	and.w	r2, r3, #1
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b03      	cmp	r3, #3
 800415e:	d017      	beq.n	8004190 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	2203      	movs	r2, #3
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d123      	bne.n	80041e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	08da      	lsrs	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3208      	adds	r2, #8
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	220f      	movs	r2, #15
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	08da      	lsrs	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3208      	adds	r2, #8
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	2203      	movs	r2, #3
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0203 	and.w	r2, r3, #3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80ac 	beq.w	800437e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <HAL_GPIO_Init+0x330>)
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	4a5e      	ldr	r2, [pc, #376]	; (80043a4 <HAL_GPIO_Init+0x330>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6613      	str	r3, [r2, #96]	; 0x60
 8004232:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_GPIO_Init+0x330>)
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800423e:	4a5a      	ldr	r2, [pc, #360]	; (80043a8 <HAL_GPIO_Init+0x334>)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4013      	ands	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004268:	d025      	beq.n	80042b6 <HAL_GPIO_Init+0x242>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <HAL_GPIO_Init+0x338>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01f      	beq.n	80042b2 <HAL_GPIO_Init+0x23e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4e      	ldr	r2, [pc, #312]	; (80043b0 <HAL_GPIO_Init+0x33c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d019      	beq.n	80042ae <HAL_GPIO_Init+0x23a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4d      	ldr	r2, [pc, #308]	; (80043b4 <HAL_GPIO_Init+0x340>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_GPIO_Init+0x236>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4c      	ldr	r2, [pc, #304]	; (80043b8 <HAL_GPIO_Init+0x344>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00d      	beq.n	80042a6 <HAL_GPIO_Init+0x232>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <HAL_GPIO_Init+0x348>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <HAL_GPIO_Init+0x22e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <HAL_GPIO_Init+0x34c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <HAL_GPIO_Init+0x22a>
 800429a:	2306      	movs	r3, #6
 800429c:	e00c      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 800429e:	2307      	movs	r3, #7
 80042a0:	e00a      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042a2:	2305      	movs	r3, #5
 80042a4:	e008      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042a6:	2304      	movs	r3, #4
 80042a8:	e006      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e004      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_GPIO_Init+0x244>
 80042b6:	2300      	movs	r3, #0
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	f002 0203 	and.w	r2, r2, #3
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	4093      	lsls	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042c8:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_GPIO_Init+0x334>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	3302      	adds	r3, #2
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_GPIO_Init+0x350>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042fa:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <HAL_GPIO_Init+0x350>)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004300:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43db      	mvns	r3, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_GPIO_Init+0x350>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004378:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_GPIO_Init+0x350>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3301      	adds	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	f47f ae78 	bne.w	8004084 <HAL_GPIO_Init+0x10>
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40010000 	.word	0x40010000
 80043ac:	48000400 	.word	0x48000400
 80043b0:	48000800 	.word	0x48000800
 80043b4:	48000c00 	.word	0x48000c00
 80043b8:	48001000 	.word	0x48001000
 80043bc:	48001400 	.word	0x48001400
 80043c0:	48001800 	.word	0x48001800
 80043c4:	40010400 	.word	0x40010400

080043c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	887b      	ldrh	r3, [r7, #2]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e001      	b.n	80043ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004414:	e002      	b.n	800441c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_PWREx_GetVoltageRange+0x18>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40007000 	.word	0x40007000

08004444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004452:	d130      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d038      	beq.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2232      	movs	r2, #50	; 0x32
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0c9b      	lsrs	r3, r3, #18
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004488:	e002      	b.n	8004490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b01      	subs	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d102      	bne.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f2      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d110      	bne.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d007      	beq.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044cc:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40007000 	.word	0x40007000
 80044e8:	20000000 	.word	0x20000000
 80044ec:	431bde83 	.word	0x431bde83

080044f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3ca      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b94      	ldr	r3, [pc, #592]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80e4 	beq.w	80046ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_RCC_OscConfig+0x4a>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	f040 808b 	bne.w	8004648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b01      	cmp	r3, #1
 8004536:	f040 8087 	bne.w	8004648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800453a:	4b89      	ldr	r3, [pc, #548]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e3a2      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	4b82      	ldr	r3, [pc, #520]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <HAL_RCC_OscConfig+0x7c>
 8004562:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456a:	e005      	b.n	8004578 <HAL_RCC_OscConfig+0x88>
 800456c:	4b7c      	ldr	r3, [pc, #496]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004578:	4293      	cmp	r3, r2
 800457a:	d223      	bcs.n	80045c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd55 	bl	8005030 <RCC_SetFlashLatencyFromMSIRange>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e383      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004590:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a72      	ldr	r2, [pc, #456]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004596:	f043 0308 	orr.w	r3, r3, #8
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b70      	ldr	r3, [pc, #448]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	496d      	ldr	r1, [pc, #436]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	4968      	ldr	r1, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]
 80045c2:	e025      	b.n	8004610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a65      	ldr	r2, [pc, #404]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045ca:	f043 0308 	orr.w	r3, r3, #8
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b63      	ldr	r3, [pc, #396]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4960      	ldr	r1, [pc, #384]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e2:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	495b      	ldr	r1, [pc, #364]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fd15 	bl	8005030 <RCC_SetFlashLatencyFromMSIRange>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e343      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004610:	f000 fc4a 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	4950      	ldr	r1, [pc, #320]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	4a4e      	ldr	r2, [pc, #312]	; (8004768 <HAL_RCC_OscConfig+0x278>)
 800462e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004630:	4b4e      	ldr	r3, [pc, #312]	; (800476c <HAL_RCC_OscConfig+0x27c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd f993 	bl	8001960 <HAL_InitTick>
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d052      	beq.n	80046ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	e327      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d032      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004650:	4b43      	ldr	r3, [pc, #268]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a42      	ldr	r2, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800465c:	f7fd f9d0 	bl	8001a00 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004664:	f7fd f9cc 	bl	8001a00 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e310      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004676:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a36      	ldr	r2, [pc, #216]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4931      	ldr	r1, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	492c      	ldr	r1, [pc, #176]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e01a      	b.n	80046ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a29      	ldr	r2, [pc, #164]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046c2:	f7fd f99d 	bl	8001a00 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ca:	f7fd f999 	bl	8001a00 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e2dd      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x1da>
 80046e8:	e000      	b.n	80046ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d074      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d005      	beq.n	800470a <HAL_RCC_OscConfig+0x21a>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d10e      	bne.n	8004722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d10b      	bne.n	8004722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d064      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d160      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e2ba      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x24a>
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e026      	b.n	8004788 <HAL_RCC_OscConfig+0x298>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004742:	d115      	bne.n	8004770 <HAL_RCC_OscConfig+0x280>
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a05      	ldr	r2, [pc, #20]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 800474a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a02      	ldr	r2, [pc, #8]	; (8004760 <HAL_RCC_OscConfig+0x270>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e014      	b.n	8004788 <HAL_RCC_OscConfig+0x298>
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	08006fbc 	.word	0x08006fbc
 8004768:	20000000 	.word	0x20000000
 800476c:	20000004 	.word	0x20000004
 8004770:	4ba0      	ldr	r3, [pc, #640]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a9f      	ldr	r2, [pc, #636]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b9d      	ldr	r3, [pc, #628]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a9c      	ldr	r2, [pc, #624]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd f936 	bl	8001a00 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd f932 	bl	8001a00 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e276      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047aa:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x2a8>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f922 	bl	8001a00 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd f91e 	bl	8001a00 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e262      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d2:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x2d0>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d060      	beq.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x310>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d119      	bne.n	800482e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d116      	bne.n	800482e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004800:	4b7c      	ldr	r3, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_OscConfig+0x328>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e23f      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004818:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	4973      	ldr	r1, [pc, #460]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	e040      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d023      	beq.n	800487e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004836:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6e      	ldr	r2, [pc, #440]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd f8dd 	bl	8001a00 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fd f8d9 	bl	8001a00 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e21d      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	495f      	ldr	r1, [pc, #380]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	e018      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b5d      	ldr	r3, [pc, #372]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5c      	ldr	r2, [pc, #368]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd f8b9 	bl	8001a00 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004892:	f7fd f8b5 	bl	8001a00 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1f9      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d03c      	beq.n	8004936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01c      	beq.n	80048fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c4:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ca:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fd f894 	bl	8001a00 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fd f890 	bl	8001a00 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1d4      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ef      	beq.n	80048dc <HAL_RCC_OscConfig+0x3ec>
 80048fc:	e01b      	b.n	8004936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004904:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fd f877 	bl	8001a00 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7fd f873 	bl	8001a00 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1b7      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800492a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ef      	bne.n	8004916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80a6 	beq.w	8004a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	; 0x58
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004970:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <HAL_RCC_OscConfig+0x508>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d118      	bne.n	80049ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_RCC_OscConfig+0x508>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <HAL_RCC_OscConfig+0x508>)
 8004982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004988:	f7fd f83a 	bl	8001a00 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fd f836 	bl	8001a00 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e17a      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCC_OscConfig+0x508>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d108      	bne.n	80049c8 <HAL_RCC_OscConfig+0x4d8>
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c6:	e029      	b.n	8004a1c <HAL_RCC_OscConfig+0x52c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d115      	bne.n	80049fc <HAL_RCC_OscConfig+0x50c>
 80049d0:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a03      	ldr	r2, [pc, #12]	; (80049f4 <HAL_RCC_OscConfig+0x504>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f0:	e014      	b.n	8004a1c <HAL_RCC_OscConfig+0x52c>
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
 80049fc:	4b9c      	ldr	r3, [pc, #624]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	4a9b      	ldr	r2, [pc, #620]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0c:	4b98      	ldr	r3, [pc, #608]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	4a97      	ldr	r2, [pc, #604]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fc ffec 	bl	8001a00 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fc ffe8 	bl	8001a00 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e12a      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a42:	4b8b      	ldr	r3, [pc, #556]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ed      	beq.n	8004a2c <HAL_RCC_OscConfig+0x53c>
 8004a50:	e015      	b.n	8004a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a52:	f7fc ffd5 	bl	8001a00 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fc ffd1 	bl	8001a00 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e113      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a70:	4b7f      	ldr	r3, [pc, #508]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ed      	bne.n	8004a5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a84:	4b7a      	ldr	r3, [pc, #488]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	4a79      	ldr	r2, [pc, #484]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80fe 	beq.w	8004c96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	f040 80d0 	bne.w	8004c44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004aa4:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0203 	and.w	r2, r3, #3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d130      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d127      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11f      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ae4:	2a07      	cmp	r2, #7
 8004ae6:	bf14      	ite	ne
 8004ae8:	2201      	movne	r2, #1
 8004aea:	2200      	moveq	r2, #0
 8004aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d113      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d06e      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d069      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0ad      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b48:	f7fc ff5a 	bl	8001a00 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fc ff56 	bl	8001a00 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e09a      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b62:	4b43      	ldr	r3, [pc, #268]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6e:	4b40      	ldr	r3, [pc, #256]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_RCC_OscConfig+0x784>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b88:	0212      	lsls	r2, r2, #8
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b90:	0852      	lsrs	r2, r2, #1
 8004b92:	3a01      	subs	r2, #1
 8004b94:	0552      	lsls	r2, r2, #21
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b9c:	0852      	lsrs	r2, r2, #1
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	0652      	lsls	r2, r2, #25
 8004ba2:	4311      	orrs	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba8:	0912      	lsrs	r2, r2, #4
 8004baa:	0452      	lsls	r2, r2, #17
 8004bac:	430a      	orrs	r2, r1
 8004bae:	4930      	ldr	r1, [pc, #192]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bcc:	f7fc ff18 	bl	8001a00 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fc ff14 	bl	8001a00 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e058      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bf2:	e050      	b.n	8004c96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e04f      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d148      	bne.n	8004c96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c10:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c1c:	f7fc fef0 	bl	8001a00 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fc feec 	bl	8001a00 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e030      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x734>
 8004c42:	e028      	b.n	8004c96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d023      	beq.n	8004c92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <HAL_RCC_OscConfig+0x780>)
 8004c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fc fed3 	bl	8001a00 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	e00c      	b.n	8004c78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fc fecf 	bl	8001a00 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d905      	bls.n	8004c78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e013      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
 8004c70:	40021000 	.word	0x40021000
 8004c74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_OscConfig+0x7b0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ec      	bne.n	8004c5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_OscConfig+0x7b0>)
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	4905      	ldr	r1, [pc, #20]	; (8004ca0 <HAL_RCC_OscConfig+0x7b0>)
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x7b4>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60cb      	str	r3, [r1, #12]
 8004c90:	e001      	b.n	8004c96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	feeefffc 	.word	0xfeeefffc

08004ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0e7      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b75      	ldr	r3, [pc, #468]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d910      	bls.n	8004cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b72      	ldr	r3, [pc, #456]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 0207 	bic.w	r2, r3, #7
 8004cd2:	4970      	ldr	r1, [pc, #448]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b6e      	ldr	r3, [pc, #440]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0cf      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d908      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4960      	ldr	r1, [pc, #384]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d04c      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2e:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d121      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0a6      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d46:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d115      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e09a      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d5e:	4b4e      	ldr	r3, [pc, #312]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e08e      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d6e:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e086      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d7e:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4943      	ldr	r1, [pc, #268]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d90:	f7fc fe36 	bl	8001a00 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fc fe32 	bl	8001a00 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e06e      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b3a      	ldr	r3, [pc, #232]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 020c 	and.w	r2, r3, #12
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1eb      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d208      	bcs.n	8004dee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	492b      	ldr	r1, [pc, #172]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d210      	bcs.n	8004e1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 0207 	bic.w	r2, r3, #7
 8004e04:	4923      	ldr	r1, [pc, #140]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0c:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <HAL_RCC_ClockConfig+0x1ec>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e036      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4918      	ldr	r1, [pc, #96]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4910      	ldr	r1, [pc, #64]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e5c:	f000 f824 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	490b      	ldr	r1, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x1f4>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fd6d 	bl	8001960 <HAL_InitTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40022000 	.word	0x40022000
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08006fbc 	.word	0x08006fbc
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	20000004 	.word	0x20000004

08004ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x34>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d121      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d11e      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004edc:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e005      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f04:	4a2b      	ldr	r2, [pc, #172]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d102      	bne.n	8004f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e004      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d134      	bne.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d003      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0xac>
 8004f4c:	e005      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f50:	617b      	str	r3, [r7, #20]
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f56:	617b      	str	r3, [r7, #20]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	617b      	str	r3, [r7, #20]
      break;
 8004f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	fb03 f202 	mul.w	r2, r3, r2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	0e5b      	lsrs	r3, r3, #25
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	3301      	adds	r3, #1
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3724      	adds	r7, #36	; 0x24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	08006fd4 	.word	0x08006fd4
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	007a1200 	.word	0x007a1200

08004fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000000 	.word	0x20000000

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fdc:	f7ff fff0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	08006fcc 	.word	0x08006fcc

08005004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005008:	f7ff ffda 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0adb      	lsrs	r3, r3, #11
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <HAL_RCC_GetPCLK2Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	08006fcc 	.word	0x08006fcc

08005030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005048:	f7ff f9ee 	bl	8004428 <HAL_PWREx_GetVoltageRange>
 800504c:	6178      	str	r0, [r7, #20]
 800504e:	e014      	b.n	800507a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505a:	6593      	str	r3, [r2, #88]	; 0x58
 800505c:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005068:	f7ff f9de 	bl	8004428 <HAL_PWREx_GetVoltageRange>
 800506c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005080:	d10b      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d919      	bls.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2ba0      	cmp	r3, #160	; 0xa0
 800508c:	d902      	bls.n	8005094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800508e:	2302      	movs	r3, #2
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e013      	b.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005094:	2301      	movs	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e010      	b.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d902      	bls.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050a0:	2303      	movs	r3, #3
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e00a      	b.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d102      	bne.n	80050b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ac:	2302      	movs	r3, #2
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e004      	b.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b70      	cmp	r3, #112	; 0x70
 80050b6:	d101      	bne.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b8:	2301      	movs	r3, #1
 80050ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 0207 	bic.w	r2, r3, #7
 80050c4:	4909      	ldr	r1, [pc, #36]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050cc:	4b07      	ldr	r3, [pc, #28]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40022000 	.word	0x40022000

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f8:	2300      	movs	r3, #0
 80050fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050fc:	2300      	movs	r3, #0
 80050fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005108:	2b00      	cmp	r3, #0
 800510a:	d041      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005114:	d02a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005116:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800511a:	d824      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800511c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005120:	d008      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005126:	d81e      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800512c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005130:	d010      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005132:	e018      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005134:	4b86      	ldr	r3, [pc, #536]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a85      	ldr	r2, [pc, #532]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005140:	e015      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fabb 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005152:	e00c      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3320      	adds	r3, #32
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fba6 	bl	80058ac <RCCEx_PLLSAI2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	74fb      	strb	r3, [r7, #19]
      break;
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005174:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005182:	4973      	ldr	r1, [pc, #460]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d041      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051a4:	d02a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051aa:	d824      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b0:	d008      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b6:	d81e      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c0:	d010      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051c2:	e018      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c4:	4b62      	ldr	r3, [pc, #392]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4a61      	ldr	r2, [pc, #388]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051d0:	e015      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fa73 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051e2:	e00c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3320      	adds	r3, #32
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fb5e 	bl	80058ac <RCCEx_PLLSAI2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	74fb      	strb	r3, [r7, #19]
      break;
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fe:	7cfb      	ldrb	r3, [r7, #19]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005204:	4b52      	ldr	r3, [pc, #328]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005212:	494f      	ldr	r1, [pc, #316]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a0 	beq.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	4a40      	ldr	r2, [pc, #256]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005252:	6593      	str	r3, [r2, #88]	; 0x58
 8005254:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005260:	2301      	movs	r3, #1
 8005262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a3a      	ldr	r2, [pc, #232]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800526a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005270:	f7fc fbc6 	bl	8001a00 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005276:	e009      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005278:	f7fc fbc2 	bl	8001a00 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d902      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	74fb      	strb	r3, [r7, #19]
        break;
 800528a:	e005      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800528c:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ef      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d15c      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800529e:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01f      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d019      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c8:	4b21      	ldr	r3, [pc, #132]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	4a20      	ldr	r2, [pc, #128]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fb81 	bl	8001a00 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	e00b      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fc fb7d 	bl	8001a00 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d902      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	74fb      	strb	r3, [r7, #19]
            break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ec      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533e:	4904      	ldr	r1, [pc, #16]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005346:	e009      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	74bb      	strb	r3, [r7, #18]
 800534c:	e006      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000
 8005354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800535c:	7c7b      	ldrb	r3, [r7, #17]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b9e      	ldr	r3, [pc, #632]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	4a9d      	ldr	r2, [pc, #628]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537a:	4b98      	ldr	r3, [pc, #608]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f023 0203 	bic.w	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	4994      	ldr	r1, [pc, #592]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539c:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f023 020c 	bic.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	498c      	ldr	r1, [pc, #560]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053be:	4b87      	ldr	r3, [pc, #540]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	4983      	ldr	r1, [pc, #524]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e0:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	497b      	ldr	r1, [pc, #492]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005402:	4b76      	ldr	r3, [pc, #472]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005410:	4972      	ldr	r1, [pc, #456]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005424:	4b6d      	ldr	r3, [pc, #436]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	496a      	ldr	r1, [pc, #424]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	4961      	ldr	r1, [pc, #388]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005468:	4b5c      	ldr	r3, [pc, #368]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	4959      	ldr	r1, [pc, #356]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800548a:	4b54      	ldr	r3, [pc, #336]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	4950      	ldr	r1, [pc, #320]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ac:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	4948      	ldr	r1, [pc, #288]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	493f      	ldr	r1, [pc, #252]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d028      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f0:	4b3a      	ldr	r3, [pc, #232]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fe:	4937      	ldr	r1, [pc, #220]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800550a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800550e:	d106      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a31      	ldr	r2, [pc, #196]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551a:	60d3      	str	r3, [r2, #12]
 800551c:	e011      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005526:	d10c      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	2101      	movs	r1, #1
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f8c8 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d028      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	491f      	ldr	r1, [pc, #124]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556c:	d106      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005578:	60d3      	str	r3, [r2, #12]
 800557a:	e011      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005584:	d10c      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f899 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005596:	7cfb      	ldrb	r3, [r7, #19]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	4908      	ldr	r1, [pc, #32]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a02      	ldr	r2, [pc, #8]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d6:	60d3      	str	r3, [r2, #12]
 80055d8:	e014      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f867 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02f      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005610:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561e:	4928      	ldr	r1, [pc, #160]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562e:	d10d      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2102      	movs	r1, #2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f844 	bl	80056c4 <RCCEx_PLLSAI1_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	74bb      	strb	r3, [r7, #18]
 800564a:	e011      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3320      	adds	r3, #32
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f925 	bl	80058ac <RCCEx_PLLSAI2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800566c:	7cfb      	ldrb	r3, [r7, #19]
 800566e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	490d      	ldr	r1, [pc, #52]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ae:	4904      	ldr	r1, [pc, #16]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000

080056c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056d2:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d018      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0203 	and.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d10d      	bne.n	800570a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
       ||
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056f6:	4b6c      	ldr	r3, [pc, #432]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
       ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d047      	beq.n	800579a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e044      	b.n	800579a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d018      	beq.n	800574a <RCCEx_PLLSAI1_Config+0x86>
 8005718:	2b03      	cmp	r3, #3
 800571a:	d825      	bhi.n	8005768 <RCCEx_PLLSAI1_Config+0xa4>
 800571c:	2b01      	cmp	r3, #1
 800571e:	d002      	beq.n	8005726 <RCCEx_PLLSAI1_Config+0x62>
 8005720:	2b02      	cmp	r3, #2
 8005722:	d009      	beq.n	8005738 <RCCEx_PLLSAI1_Config+0x74>
 8005724:	e020      	b.n	8005768 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005726:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11d      	bne.n	800576e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005736:	e01a      	b.n	800576e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d116      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005748:	e013      	b.n	8005772 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800574a:	4b57      	ldr	r3, [pc, #348]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005756:	4b54      	ldr	r3, [pc, #336]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005766:	e006      	b.n	8005776 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      break;
 800576c:	e004      	b.n	8005778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800576e:	bf00      	nop
 8005770:	e002      	b.n	8005778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005772:	bf00      	nop
 8005774:	e000      	b.n	8005778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005776:	bf00      	nop
    }

    if(status == HAL_OK)
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	430b      	orrs	r3, r1
 8005794:	4944      	ldr	r1, [pc, #272]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d17d      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ac:	f7fc f928 	bl	8001a00 <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b4:	f7fc f924 	bl	8001a00 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
        break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c8:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ef      	bne.n	80057b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d160      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d111      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6892      	ldr	r2, [r2, #8]
 80057f0:	0211      	lsls	r1, r2, #8
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68d2      	ldr	r2, [r2, #12]
 80057f6:	0912      	lsrs	r2, r2, #4
 80057f8:	0452      	lsls	r2, r2, #17
 80057fa:	430a      	orrs	r2, r1
 80057fc:	492a      	ldr	r1, [pc, #168]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
 8005802:	e027      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d112      	bne.n	8005830 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800580a:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005812:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6892      	ldr	r2, [r2, #8]
 800581a:	0211      	lsls	r1, r2, #8
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6912      	ldr	r2, [r2, #16]
 8005820:	0852      	lsrs	r2, r2, #1
 8005822:	3a01      	subs	r2, #1
 8005824:	0552      	lsls	r2, r2, #21
 8005826:	430a      	orrs	r2, r1
 8005828:	491f      	ldr	r1, [pc, #124]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582a:	4313      	orrs	r3, r2
 800582c:	610b      	str	r3, [r1, #16]
 800582e:	e011      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	0211      	lsls	r1, r2, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6952      	ldr	r2, [r2, #20]
 8005846:	0852      	lsrs	r2, r2, #1
 8005848:	3a01      	subs	r2, #1
 800584a:	0652      	lsls	r2, r2, #25
 800584c:	430a      	orrs	r2, r1
 800584e:	4916      	ldr	r1, [pc, #88]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800585e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fc f8ce 	bl	8001a00 <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005866:	e009      	b.n	800587c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005868:	f7fc f8ca 	bl	8001a00 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	73fb      	strb	r3, [r7, #15]
          break;
 800587a:	e005      	b.n	8005888 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4904      	ldr	r1, [pc, #16]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	4313      	orrs	r3, r2
 800589a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000

080058ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ba:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d018      	beq.n	80058f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058c6:	4b67      	ldr	r3, [pc, #412]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0203 	and.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d10d      	bne.n	80058f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
       ||
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058de:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
       ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d047      	beq.n	8005982 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
 80058f6:	e044      	b.n	8005982 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d018      	beq.n	8005932 <RCCEx_PLLSAI2_Config+0x86>
 8005900:	2b03      	cmp	r3, #3
 8005902:	d825      	bhi.n	8005950 <RCCEx_PLLSAI2_Config+0xa4>
 8005904:	2b01      	cmp	r3, #1
 8005906:	d002      	beq.n	800590e <RCCEx_PLLSAI2_Config+0x62>
 8005908:	2b02      	cmp	r3, #2
 800590a:	d009      	beq.n	8005920 <RCCEx_PLLSAI2_Config+0x74>
 800590c:	e020      	b.n	8005950 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800590e:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11d      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800591e:	e01a      	b.n	8005956 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005920:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d116      	bne.n	800595a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005930:	e013      	b.n	800595a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005932:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10f      	bne.n	800595e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800593e:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800594e:	e006      	b.n	800595e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e004      	b.n	8005960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005956:	bf00      	nop
 8005958:	e002      	b.n	8005960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800595e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005966:	4b3f      	ldr	r3, [pc, #252]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	430b      	orrs	r3, r1
 800597c:	4939      	ldr	r1, [pc, #228]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d167      	bne.n	8005a58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005988:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a35      	ldr	r2, [pc, #212]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800598e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005994:	f7fc f834 	bl	8001a00 <HAL_GetTick>
 8005998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800599a:	e009      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800599c:	f7fc f830 	bl	8001a00 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d902      	bls.n	80059b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	73fb      	strb	r3, [r7, #15]
        break;
 80059ae:	e005      	b.n	80059bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ef      	bne.n	800599c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d14a      	bne.n	8005a58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d111      	bne.n	80059ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059c8:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	0211      	lsls	r1, r2, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	0912      	lsrs	r2, r2, #4
 80059e0:	0452      	lsls	r2, r2, #17
 80059e2:	430a      	orrs	r2, r1
 80059e4:	491f      	ldr	r1, [pc, #124]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	614b      	str	r3, [r1, #20]
 80059ea:	e011      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6892      	ldr	r2, [r2, #8]
 80059fc:	0211      	lsls	r1, r2, #8
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6912      	ldr	r2, [r2, #16]
 8005a02:	0852      	lsrs	r2, r2, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0652      	lsls	r2, r2, #25
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	4916      	ldr	r1, [pc, #88]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a10:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fb fff0 	bl	8001a00 <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a22:	e009      	b.n	8005a38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a24:	f7fb ffec 	bl	8001a00 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d902      	bls.n	8005a38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	73fb      	strb	r3, [r7, #15]
          break;
 8005a36:	e005      	b.n	8005a44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ef      	beq.n	8005a24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	4904      	ldr	r1, [pc, #16]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000

08005a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e040      	b.n	8005afc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fe3c 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	; 0x24
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fb6a 	bl	8006188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f8af 	bl	8005c18 <UART_SetConfig>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e01b      	b.n	8005afc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fbe9 	bl	80062cc <UART_CheckIdleState>
 8005afa:	4603      	mov	r3, r0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d178      	bne.n	8005c0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Transmit+0x24>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e071      	b.n	8005c10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2221      	movs	r2, #33	; 0x21
 8005b38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b3a:	f7fb ff61 	bl	8001a00 <HAL_GetTick>
 8005b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	88fa      	ldrh	r2, [r7, #6]
 8005b44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d108      	bne.n	8005b6c <HAL_UART_Transmit+0x68>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e003      	b.n	8005b74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b74:	e030      	b.n	8005bd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fc4b 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e03c      	b.n	8005c10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	3302      	adds	r3, #2
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e008      	b.n	8005bc6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1c8      	bne.n	8005b76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fc14 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e005      	b.n	8005c10 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b08a      	sub	sp, #40	; 0x28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4ba4      	ldr	r3, [pc, #656]	; (8005ed8 <UART_SetConfig+0x2c0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a99      	ldr	r2, [pc, #612]	; (8005edc <UART_SetConfig+0x2c4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	4313      	orrs	r3, r2
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	430a      	orrs	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a90      	ldr	r2, [pc, #576]	; (8005ee0 <UART_SetConfig+0x2c8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d126      	bne.n	8005cf0 <UART_SetConfig+0xd8>
 8005ca2:	4b90      	ldr	r3, [pc, #576]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d81b      	bhi.n	8005ce8 <UART_SetConfig+0xd0>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0xa0>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cce:	e116      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd6:	e112      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cde:	e10e      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce6:	e10a      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cee:	e106      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7c      	ldr	r2, [pc, #496]	; (8005ee8 <UART_SetConfig+0x2d0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d138      	bne.n	8005d6c <UART_SetConfig+0x154>
 8005cfa:	4b7a      	ldr	r3, [pc, #488]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	d82d      	bhi.n	8005d64 <UART_SetConfig+0x14c>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0xf8>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005d65 	.word	0x08005d65
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d65 	.word	0x08005d65
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4a:	e0d8      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e0d4      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e0d0      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e0cc      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e0c8      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5e      	ldr	r2, [pc, #376]	; (8005eec <UART_SetConfig+0x2d4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d125      	bne.n	8005dc2 <UART_SetConfig+0x1aa>
 8005d76:	4b5b      	ldr	r3, [pc, #364]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d80:	2b30      	cmp	r3, #48	; 0x30
 8005d82:	d016      	beq.n	8005db2 <UART_SetConfig+0x19a>
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d818      	bhi.n	8005dba <UART_SetConfig+0x1a2>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d00a      	beq.n	8005da2 <UART_SetConfig+0x18a>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d814      	bhi.n	8005dba <UART_SetConfig+0x1a2>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <UART_SetConfig+0x182>
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d008      	beq.n	8005daa <UART_SetConfig+0x192>
 8005d98:	e00f      	b.n	8005dba <UART_SetConfig+0x1a2>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da0:	e0ad      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005da2:	2302      	movs	r3, #2
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da8:	e0a9      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005daa:	2304      	movs	r3, #4
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db0:	e0a5      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005db2:	2308      	movs	r3, #8
 8005db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db8:	e0a1      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc0:	e09d      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4a      	ldr	r2, [pc, #296]	; (8005ef0 <UART_SetConfig+0x2d8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d125      	bne.n	8005e18 <UART_SetConfig+0x200>
 8005dcc:	4b45      	ldr	r3, [pc, #276]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd8:	d016      	beq.n	8005e08 <UART_SetConfig+0x1f0>
 8005dda:	2bc0      	cmp	r3, #192	; 0xc0
 8005ddc:	d818      	bhi.n	8005e10 <UART_SetConfig+0x1f8>
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d00a      	beq.n	8005df8 <UART_SetConfig+0x1e0>
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d814      	bhi.n	8005e10 <UART_SetConfig+0x1f8>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <UART_SetConfig+0x1d8>
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x1e8>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x1f8>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e082      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e07e      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e06:	e07a      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0e:	e076      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e16:	e072      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a35      	ldr	r2, [pc, #212]	; (8005ef4 <UART_SetConfig+0x2dc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d12a      	bne.n	8005e78 <UART_SetConfig+0x260>
 8005e22:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x250>
 8005e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x258>
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x240>
 8005e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x258>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x238>
 8005e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x248>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x258>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e052      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e04e      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e04a      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e046      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e042      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <UART_SetConfig+0x2c4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d13a      	bne.n	8005ef8 <UART_SetConfig+0x2e0>
 8005e82:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e90:	d01a      	beq.n	8005ec8 <UART_SetConfig+0x2b0>
 8005e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e96:	d81b      	bhi.n	8005ed0 <UART_SetConfig+0x2b8>
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9c:	d00c      	beq.n	8005eb8 <UART_SetConfig+0x2a0>
 8005e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea2:	d815      	bhi.n	8005ed0 <UART_SetConfig+0x2b8>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <UART_SetConfig+0x298>
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eac:	d008      	beq.n	8005ec0 <UART_SetConfig+0x2a8>
 8005eae:	e00f      	b.n	8005ed0 <UART_SetConfig+0x2b8>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e022      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e01e      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec6:	e01a      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e016      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e012      	b.n	8005efe <UART_SetConfig+0x2e6>
 8005ed8:	efff69f3 	.word	0xefff69f3
 8005edc:	40008000 	.word	0x40008000
 8005ee0:	40013800 	.word	0x40013800
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40004400 	.word	0x40004400
 8005eec:	40004800 	.word	0x40004800
 8005ef0:	40004c00 	.word	0x40004c00
 8005ef4:	40005000 	.word	0x40005000
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a9f      	ldr	r2, [pc, #636]	; (8006180 <UART_SetConfig+0x568>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d17a      	bne.n	8005ffe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d824      	bhi.n	8005f5a <UART_SetConfig+0x342>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x300>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f5b 	.word	0x08005f5b
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f5b 	.word	0x08005f5b
 8005f28:	08005f4b 	.word	0x08005f4b
 8005f2c:	08005f5b 	.word	0x08005f5b
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f5b 	.word	0x08005f5b
 8005f38:	08005f53 	.word	0x08005f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7ff f84c 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8005f40:	61f8      	str	r0, [r7, #28]
        break;
 8005f42:	e010      	b.n	8005f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f44:	4b8f      	ldr	r3, [pc, #572]	; (8006184 <UART_SetConfig+0x56c>)
 8005f46:	61fb      	str	r3, [r7, #28]
        break;
 8005f48:	e00d      	b.n	8005f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4a:	f7fe ffad 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8005f4e:	61f8      	str	r0, [r7, #28]
        break;
 8005f50:	e009      	b.n	8005f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f56:	61fb      	str	r3, [r7, #28]
        break;
 8005f58:	e005      	b.n	8005f66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80fb 	beq.w	8006164 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4413      	add	r3, r2
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d305      	bcc.n	8005f8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d903      	bls.n	8005f92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f90:	e0e8      	b.n	8006164 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2200      	movs	r2, #0
 8005f96:	461c      	mov	r4, r3
 8005f98:	4615      	mov	r5, r2
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	022b      	lsls	r3, r5, #8
 8005fa4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fa8:	0222      	lsls	r2, r4, #8
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	6849      	ldr	r1, [r1, #4]
 8005fae:	0849      	lsrs	r1, r1, #1
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4688      	mov	r8, r1
 8005fb4:	4681      	mov	r9, r0
 8005fb6:	eb12 0a08 	adds.w	sl, r2, r8
 8005fba:	eb43 0b09 	adc.w	fp, r3, r9
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fcc:	4650      	mov	r0, sl
 8005fce:	4659      	mov	r1, fp
 8005fd0:	f7fa f94e 	bl	8000270 <__aeabi_uldivmod>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4613      	mov	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe2:	d308      	bcc.n	8005ff6 <UART_SetConfig+0x3de>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fea:	d204      	bcs.n	8005ff6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	60da      	str	r2, [r3, #12]
 8005ff4:	e0b6      	b.n	8006164 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ffc:	e0b2      	b.n	8006164 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006006:	d15e      	bne.n	80060c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800600c:	2b08      	cmp	r3, #8
 800600e:	d828      	bhi.n	8006062 <UART_SetConfig+0x44a>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x400>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006063 	.word	0x08006063
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
 8006038:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7fe ffcc 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8006040:	61f8      	str	r0, [r7, #28]
        break;
 8006042:	e014      	b.n	800606e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006044:	f7fe ffde 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8006048:	61f8      	str	r0, [r7, #28]
        break;
 800604a:	e010      	b.n	800606e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b4d      	ldr	r3, [pc, #308]	; (8006184 <UART_SetConfig+0x56c>)
 800604e:	61fb      	str	r3, [r7, #28]
        break;
 8006050:	e00d      	b.n	800606e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fe ff29 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8006056:	61f8      	str	r0, [r7, #28]
        break;
 8006058:	e009      	b.n	800606e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61fb      	str	r3, [r7, #28]
        break;
 8006060:	e005      	b.n	800606e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800606c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d077      	beq.n	8006164 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	005a      	lsls	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	441a      	add	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b0f      	cmp	r3, #15
 800608e:	d916      	bls.n	80060be <UART_SetConfig+0x4a6>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006096:	d212      	bcs.n	80060be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f023 030f 	bic.w	r3, r3, #15
 80060a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	8afb      	ldrh	r3, [r7, #22]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	8afa      	ldrh	r2, [r7, #22]
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	e052      	b.n	8006164 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060c4:	e04e      	b.n	8006164 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d827      	bhi.n	800611e <UART_SetConfig+0x506>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0x4bc>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006109 	.word	0x08006109
 80060e0:	0800611f 	.word	0x0800611f
 80060e4:	0800610f 	.word	0x0800610f
 80060e8:	0800611f 	.word	0x0800611f
 80060ec:	0800611f 	.word	0x0800611f
 80060f0:	0800611f 	.word	0x0800611f
 80060f4:	08006117 	.word	0x08006117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fe ff6e 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 80060fc:	61f8      	str	r0, [r7, #28]
        break;
 80060fe:	e014      	b.n	800612a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7fe ff80 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8006104:	61f8      	str	r0, [r7, #28]
        break;
 8006106:	e010      	b.n	800612a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <UART_SetConfig+0x56c>)
 800610a:	61fb      	str	r3, [r7, #28]
        break;
 800610c:	e00d      	b.n	800612a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610e:	f7fe fecb 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8006112:	61f8      	str	r0, [r7, #28]
        break;
 8006114:	e009      	b.n	800612a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611a:	61fb      	str	r3, [r7, #28]
        break;
 800611c:	e005      	b.n	800612a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006128:	bf00      	nop
    }

    if (pclk != 0U)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d019      	beq.n	8006164 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	085a      	lsrs	r2, r3, #1
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	441a      	add	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d909      	bls.n	800615e <UART_SetConfig+0x546>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d205      	bcs.n	800615e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e002      	b.n	8006164 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006170:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006174:	4618      	mov	r0, r3
 8006176:	3728      	adds	r7, #40	; 0x28
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	40008000 	.word	0x40008000
 8006184:	00f42400 	.word	0x00f42400

08006188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01a      	beq.n	800629e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006286:	d10a      	bne.n	800629e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b098      	sub	sp, #96	; 0x60
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062dc:	f7fb fb90 	bl	8001a00 <HAL_GetTick>
 80062e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d12e      	bne.n	800634e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f8:	2200      	movs	r2, #0
 80062fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f88c 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d021      	beq.n	800634e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
 800632a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800632e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e062      	b.n	8006414 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d149      	bne.n	80063f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800635c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006364:	2200      	movs	r2, #0
 8006366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f856 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d03c      	beq.n	80063f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	623b      	str	r3, [r7, #32]
   return(result);
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
 8006396:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800639a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	617b      	str	r3, [r7, #20]
   return(result);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e011      	b.n	8006414 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3758      	adds	r7, #88	; 0x58
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642c:	e049      	b.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d045      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006436:	f7fb fae3 	bl	8001a00 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <UART_WaitOnFlagUntilTimeout+0x30>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e048      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d031      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b08      	cmp	r3, #8
 800646a:	d110      	bne.n	800648e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2208      	movs	r2, #8
 8006472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f838 	bl	80064ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2208      	movs	r2, #8
 800647e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e029      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649c:	d111      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f81e 	bl	80064ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e00f      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d0a6      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b095      	sub	sp, #84	; 0x54
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006510:	643b      	str	r3, [r7, #64]	; 0x40
 8006512:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	61fb      	str	r3, [r7, #28]
   return(result);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800654a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	2b01      	cmp	r3, #1
 800655e:	d118      	bne.n	8006592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	60bb      	str	r3, [r7, #8]
   return(result);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f023 0310 	bic.w	r3, r3, #16
 8006574:	647b      	str	r3, [r7, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6979      	ldr	r1, [r7, #20]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	613b      	str	r3, [r7, #16]
   return(result);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e6      	bne.n	8006560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065a6:	bf00      	nop
 80065a8:	3754      	adds	r7, #84	; 0x54
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <siprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b500      	push	{lr}
 80065b8:	b09c      	sub	sp, #112	; 0x70
 80065ba:	ab1d      	add	r3, sp, #116	; 0x74
 80065bc:	9002      	str	r0, [sp, #8]
 80065be:	9006      	str	r0, [sp, #24]
 80065c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <siprintf+0x38>)
 80065c6:	9107      	str	r1, [sp, #28]
 80065c8:	9104      	str	r1, [sp, #16]
 80065ca:	4909      	ldr	r1, [pc, #36]	; (80065f0 <siprintf+0x3c>)
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	a902      	add	r1, sp, #8
 80065d8:	f000 f992 	bl	8006900 <_svfiprintf_r>
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	b01c      	add	sp, #112	; 0x70
 80065e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e8:	b003      	add	sp, #12
 80065ea:	4770      	bx	lr
 80065ec:	20000058 	.word	0x20000058
 80065f0:	ffff0208 	.word	0xffff0208

080065f4 <memset>:
 80065f4:	4402      	add	r2, r0
 80065f6:	4603      	mov	r3, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__errno>:
 8006604:	4b01      	ldr	r3, [pc, #4]	; (800660c <__errno+0x8>)
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000058 	.word	0x20000058

08006610 <__libc_init_array>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	4d0d      	ldr	r5, [pc, #52]	; (8006648 <__libc_init_array+0x38>)
 8006614:	4c0d      	ldr	r4, [pc, #52]	; (800664c <__libc_init_array+0x3c>)
 8006616:	1b64      	subs	r4, r4, r5
 8006618:	10a4      	asrs	r4, r4, #2
 800661a:	2600      	movs	r6, #0
 800661c:	42a6      	cmp	r6, r4
 800661e:	d109      	bne.n	8006634 <__libc_init_array+0x24>
 8006620:	4d0b      	ldr	r5, [pc, #44]	; (8006650 <__libc_init_array+0x40>)
 8006622:	4c0c      	ldr	r4, [pc, #48]	; (8006654 <__libc_init_array+0x44>)
 8006624:	f000 fc6a 	bl	8006efc <_init>
 8006628:	1b64      	subs	r4, r4, r5
 800662a:	10a4      	asrs	r4, r4, #2
 800662c:	2600      	movs	r6, #0
 800662e:	42a6      	cmp	r6, r4
 8006630:	d105      	bne.n	800663e <__libc_init_array+0x2e>
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	f855 3b04 	ldr.w	r3, [r5], #4
 8006638:	4798      	blx	r3
 800663a:	3601      	adds	r6, #1
 800663c:	e7ee      	b.n	800661c <__libc_init_array+0xc>
 800663e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006642:	4798      	blx	r3
 8006644:	3601      	adds	r6, #1
 8006646:	e7f2      	b.n	800662e <__libc_init_array+0x1e>
 8006648:	08007040 	.word	0x08007040
 800664c:	08007040 	.word	0x08007040
 8006650:	08007040 	.word	0x08007040
 8006654:	08007044 	.word	0x08007044

08006658 <__retarget_lock_acquire_recursive>:
 8006658:	4770      	bx	lr

0800665a <__retarget_lock_release_recursive>:
 800665a:	4770      	bx	lr

0800665c <_free_r>:
 800665c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800665e:	2900      	cmp	r1, #0
 8006660:	d044      	beq.n	80066ec <_free_r+0x90>
 8006662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006666:	9001      	str	r0, [sp, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f1a1 0404 	sub.w	r4, r1, #4
 800666e:	bfb8      	it	lt
 8006670:	18e4      	addlt	r4, r4, r3
 8006672:	f000 f8df 	bl	8006834 <__malloc_lock>
 8006676:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <_free_r+0x94>)
 8006678:	9801      	ldr	r0, [sp, #4]
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	b933      	cbnz	r3, 800668c <_free_r+0x30>
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	6014      	str	r4, [r2, #0]
 8006682:	b003      	add	sp, #12
 8006684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006688:	f000 b8da 	b.w	8006840 <__malloc_unlock>
 800668c:	42a3      	cmp	r3, r4
 800668e:	d908      	bls.n	80066a2 <_free_r+0x46>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	1961      	adds	r1, r4, r5
 8006694:	428b      	cmp	r3, r1
 8006696:	bf01      	itttt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	1949      	addeq	r1, r1, r5
 800669e:	6021      	streq	r1, [r4, #0]
 80066a0:	e7ed      	b.n	800667e <_free_r+0x22>
 80066a2:	461a      	mov	r2, r3
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b10b      	cbz	r3, 80066ac <_free_r+0x50>
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	d9fa      	bls.n	80066a2 <_free_r+0x46>
 80066ac:	6811      	ldr	r1, [r2, #0]
 80066ae:	1855      	adds	r5, r2, r1
 80066b0:	42a5      	cmp	r5, r4
 80066b2:	d10b      	bne.n	80066cc <_free_r+0x70>
 80066b4:	6824      	ldr	r4, [r4, #0]
 80066b6:	4421      	add	r1, r4
 80066b8:	1854      	adds	r4, r2, r1
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	d1e0      	bne.n	8006682 <_free_r+0x26>
 80066c0:	681c      	ldr	r4, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	6053      	str	r3, [r2, #4]
 80066c6:	440c      	add	r4, r1
 80066c8:	6014      	str	r4, [r2, #0]
 80066ca:	e7da      	b.n	8006682 <_free_r+0x26>
 80066cc:	d902      	bls.n	80066d4 <_free_r+0x78>
 80066ce:	230c      	movs	r3, #12
 80066d0:	6003      	str	r3, [r0, #0]
 80066d2:	e7d6      	b.n	8006682 <_free_r+0x26>
 80066d4:	6825      	ldr	r5, [r4, #0]
 80066d6:	1961      	adds	r1, r4, r5
 80066d8:	428b      	cmp	r3, r1
 80066da:	bf04      	itt	eq
 80066dc:	6819      	ldreq	r1, [r3, #0]
 80066de:	685b      	ldreq	r3, [r3, #4]
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	bf04      	itt	eq
 80066e4:	1949      	addeq	r1, r1, r5
 80066e6:	6021      	streq	r1, [r4, #0]
 80066e8:	6054      	str	r4, [r2, #4]
 80066ea:	e7ca      	b.n	8006682 <_free_r+0x26>
 80066ec:	b003      	add	sp, #12
 80066ee:	bd30      	pop	{r4, r5, pc}
 80066f0:	20000354 	.word	0x20000354

080066f4 <sbrk_aligned>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4e0e      	ldr	r6, [pc, #56]	; (8006730 <sbrk_aligned+0x3c>)
 80066f8:	460c      	mov	r4, r1
 80066fa:	6831      	ldr	r1, [r6, #0]
 80066fc:	4605      	mov	r5, r0
 80066fe:	b911      	cbnz	r1, 8006706 <sbrk_aligned+0x12>
 8006700:	f000 fba6 	bl	8006e50 <_sbrk_r>
 8006704:	6030      	str	r0, [r6, #0]
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f000 fba1 	bl	8006e50 <_sbrk_r>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d00a      	beq.n	8006728 <sbrk_aligned+0x34>
 8006712:	1cc4      	adds	r4, r0, #3
 8006714:	f024 0403 	bic.w	r4, r4, #3
 8006718:	42a0      	cmp	r0, r4
 800671a:	d007      	beq.n	800672c <sbrk_aligned+0x38>
 800671c:	1a21      	subs	r1, r4, r0
 800671e:	4628      	mov	r0, r5
 8006720:	f000 fb96 	bl	8006e50 <_sbrk_r>
 8006724:	3001      	adds	r0, #1
 8006726:	d101      	bne.n	800672c <sbrk_aligned+0x38>
 8006728:	f04f 34ff 	mov.w	r4, #4294967295
 800672c:	4620      	mov	r0, r4
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	20000358 	.word	0x20000358

08006734 <_malloc_r>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	1ccd      	adds	r5, r1, #3
 800673a:	f025 0503 	bic.w	r5, r5, #3
 800673e:	3508      	adds	r5, #8
 8006740:	2d0c      	cmp	r5, #12
 8006742:	bf38      	it	cc
 8006744:	250c      	movcc	r5, #12
 8006746:	2d00      	cmp	r5, #0
 8006748:	4607      	mov	r7, r0
 800674a:	db01      	blt.n	8006750 <_malloc_r+0x1c>
 800674c:	42a9      	cmp	r1, r5
 800674e:	d905      	bls.n	800675c <_malloc_r+0x28>
 8006750:	230c      	movs	r3, #12
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	2600      	movs	r6, #0
 8006756:	4630      	mov	r0, r6
 8006758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006830 <_malloc_r+0xfc>
 8006760:	f000 f868 	bl	8006834 <__malloc_lock>
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	461c      	mov	r4, r3
 800676a:	bb5c      	cbnz	r4, 80067c4 <_malloc_r+0x90>
 800676c:	4629      	mov	r1, r5
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff ffc0 	bl	80066f4 <sbrk_aligned>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	4604      	mov	r4, r0
 8006778:	d155      	bne.n	8006826 <_malloc_r+0xf2>
 800677a:	f8d8 4000 	ldr.w	r4, [r8]
 800677e:	4626      	mov	r6, r4
 8006780:	2e00      	cmp	r6, #0
 8006782:	d145      	bne.n	8006810 <_malloc_r+0xdc>
 8006784:	2c00      	cmp	r4, #0
 8006786:	d048      	beq.n	800681a <_malloc_r+0xe6>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	4631      	mov	r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	eb04 0903 	add.w	r9, r4, r3
 8006792:	f000 fb5d 	bl	8006e50 <_sbrk_r>
 8006796:	4581      	cmp	r9, r0
 8006798:	d13f      	bne.n	800681a <_malloc_r+0xe6>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	1a6d      	subs	r5, r5, r1
 800679e:	4629      	mov	r1, r5
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff ffa7 	bl	80066f4 <sbrk_aligned>
 80067a6:	3001      	adds	r0, #1
 80067a8:	d037      	beq.n	800681a <_malloc_r+0xe6>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	442b      	add	r3, r5
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	f8d8 3000 	ldr.w	r3, [r8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d038      	beq.n	800682a <_malloc_r+0xf6>
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	42a2      	cmp	r2, r4
 80067bc:	d12b      	bne.n	8006816 <_malloc_r+0xe2>
 80067be:	2200      	movs	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	e00f      	b.n	80067e4 <_malloc_r+0xb0>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	1b52      	subs	r2, r2, r5
 80067c8:	d41f      	bmi.n	800680a <_malloc_r+0xd6>
 80067ca:	2a0b      	cmp	r2, #11
 80067cc:	d917      	bls.n	80067fe <_malloc_r+0xca>
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	6025      	str	r5, [r4, #0]
 80067d4:	bf18      	it	ne
 80067d6:	6059      	strne	r1, [r3, #4]
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	bf08      	it	eq
 80067dc:	f8c8 1000 	streq.w	r1, [r8]
 80067e0:	5162      	str	r2, [r4, r5]
 80067e2:	604b      	str	r3, [r1, #4]
 80067e4:	4638      	mov	r0, r7
 80067e6:	f104 060b 	add.w	r6, r4, #11
 80067ea:	f000 f829 	bl	8006840 <__malloc_unlock>
 80067ee:	f026 0607 	bic.w	r6, r6, #7
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	1af2      	subs	r2, r6, r3
 80067f6:	d0ae      	beq.n	8006756 <_malloc_r+0x22>
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	50a3      	str	r3, [r4, r2]
 80067fc:	e7ab      	b.n	8006756 <_malloc_r+0x22>
 80067fe:	42a3      	cmp	r3, r4
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	d1dd      	bne.n	80067c0 <_malloc_r+0x8c>
 8006804:	f8c8 2000 	str.w	r2, [r8]
 8006808:	e7ec      	b.n	80067e4 <_malloc_r+0xb0>
 800680a:	4623      	mov	r3, r4
 800680c:	6864      	ldr	r4, [r4, #4]
 800680e:	e7ac      	b.n	800676a <_malloc_r+0x36>
 8006810:	4634      	mov	r4, r6
 8006812:	6876      	ldr	r6, [r6, #4]
 8006814:	e7b4      	b.n	8006780 <_malloc_r+0x4c>
 8006816:	4613      	mov	r3, r2
 8006818:	e7cc      	b.n	80067b4 <_malloc_r+0x80>
 800681a:	230c      	movs	r3, #12
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4638      	mov	r0, r7
 8006820:	f000 f80e 	bl	8006840 <__malloc_unlock>
 8006824:	e797      	b.n	8006756 <_malloc_r+0x22>
 8006826:	6025      	str	r5, [r4, #0]
 8006828:	e7dc      	b.n	80067e4 <_malloc_r+0xb0>
 800682a:	605b      	str	r3, [r3, #4]
 800682c:	deff      	udf	#255	; 0xff
 800682e:	bf00      	nop
 8006830:	20000354 	.word	0x20000354

08006834 <__malloc_lock>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__malloc_lock+0x8>)
 8006836:	f7ff bf0f 	b.w	8006658 <__retarget_lock_acquire_recursive>
 800683a:	bf00      	nop
 800683c:	20000350 	.word	0x20000350

08006840 <__malloc_unlock>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__malloc_unlock+0x8>)
 8006842:	f7ff bf0a 	b.w	800665a <__retarget_lock_release_recursive>
 8006846:	bf00      	nop
 8006848:	20000350 	.word	0x20000350

0800684c <__ssputs_r>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	688e      	ldr	r6, [r1, #8]
 8006852:	461f      	mov	r7, r3
 8006854:	42be      	cmp	r6, r7
 8006856:	680b      	ldr	r3, [r1, #0]
 8006858:	4682      	mov	sl, r0
 800685a:	460c      	mov	r4, r1
 800685c:	4690      	mov	r8, r2
 800685e:	d82c      	bhi.n	80068ba <__ssputs_r+0x6e>
 8006860:	898a      	ldrh	r2, [r1, #12]
 8006862:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006866:	d026      	beq.n	80068b6 <__ssputs_r+0x6a>
 8006868:	6965      	ldr	r5, [r4, #20]
 800686a:	6909      	ldr	r1, [r1, #16]
 800686c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006870:	eba3 0901 	sub.w	r9, r3, r1
 8006874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006878:	1c7b      	adds	r3, r7, #1
 800687a:	444b      	add	r3, r9
 800687c:	106d      	asrs	r5, r5, #1
 800687e:	429d      	cmp	r5, r3
 8006880:	bf38      	it	cc
 8006882:	461d      	movcc	r5, r3
 8006884:	0553      	lsls	r3, r2, #21
 8006886:	d527      	bpl.n	80068d8 <__ssputs_r+0x8c>
 8006888:	4629      	mov	r1, r5
 800688a:	f7ff ff53 	bl	8006734 <_malloc_r>
 800688e:	4606      	mov	r6, r0
 8006890:	b360      	cbz	r0, 80068ec <__ssputs_r+0xa0>
 8006892:	6921      	ldr	r1, [r4, #16]
 8006894:	464a      	mov	r2, r9
 8006896:	f000 faeb 	bl	8006e70 <memcpy>
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	6126      	str	r6, [r4, #16]
 80068a8:	6165      	str	r5, [r4, #20]
 80068aa:	444e      	add	r6, r9
 80068ac:	eba5 0509 	sub.w	r5, r5, r9
 80068b0:	6026      	str	r6, [r4, #0]
 80068b2:	60a5      	str	r5, [r4, #8]
 80068b4:	463e      	mov	r6, r7
 80068b6:	42be      	cmp	r6, r7
 80068b8:	d900      	bls.n	80068bc <__ssputs_r+0x70>
 80068ba:	463e      	mov	r6, r7
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	4632      	mov	r2, r6
 80068c0:	4641      	mov	r1, r8
 80068c2:	f000 faab 	bl	8006e1c <memmove>
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	1b9b      	subs	r3, r3, r6
 80068ca:	60a3      	str	r3, [r4, #8]
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	4433      	add	r3, r6
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	2000      	movs	r0, #0
 80068d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d8:	462a      	mov	r2, r5
 80068da:	f000 fad7 	bl	8006e8c <_realloc_r>
 80068de:	4606      	mov	r6, r0
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d1e0      	bne.n	80068a6 <__ssputs_r+0x5a>
 80068e4:	6921      	ldr	r1, [r4, #16]
 80068e6:	4650      	mov	r0, sl
 80068e8:	f7ff feb8 	bl	800665c <_free_r>
 80068ec:	230c      	movs	r3, #12
 80068ee:	f8ca 3000 	str.w	r3, [sl]
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	e7e9      	b.n	80068d4 <__ssputs_r+0x88>

08006900 <_svfiprintf_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4698      	mov	r8, r3
 8006906:	898b      	ldrh	r3, [r1, #12]
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	b09d      	sub	sp, #116	; 0x74
 800690c:	4607      	mov	r7, r0
 800690e:	460d      	mov	r5, r1
 8006910:	4614      	mov	r4, r2
 8006912:	d50e      	bpl.n	8006932 <_svfiprintf_r+0x32>
 8006914:	690b      	ldr	r3, [r1, #16]
 8006916:	b963      	cbnz	r3, 8006932 <_svfiprintf_r+0x32>
 8006918:	2140      	movs	r1, #64	; 0x40
 800691a:	f7ff ff0b 	bl	8006734 <_malloc_r>
 800691e:	6028      	str	r0, [r5, #0]
 8006920:	6128      	str	r0, [r5, #16]
 8006922:	b920      	cbnz	r0, 800692e <_svfiprintf_r+0x2e>
 8006924:	230c      	movs	r3, #12
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e0d0      	b.n	8006ad0 <_svfiprintf_r+0x1d0>
 800692e:	2340      	movs	r3, #64	; 0x40
 8006930:	616b      	str	r3, [r5, #20]
 8006932:	2300      	movs	r3, #0
 8006934:	9309      	str	r3, [sp, #36]	; 0x24
 8006936:	2320      	movs	r3, #32
 8006938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ae8 <_svfiprintf_r+0x1e8>
 8006946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800694a:	f04f 0901 	mov.w	r9, #1
 800694e:	4623      	mov	r3, r4
 8006950:	469a      	mov	sl, r3
 8006952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006956:	b10a      	cbz	r2, 800695c <_svfiprintf_r+0x5c>
 8006958:	2a25      	cmp	r2, #37	; 0x25
 800695a:	d1f9      	bne.n	8006950 <_svfiprintf_r+0x50>
 800695c:	ebba 0b04 	subs.w	fp, sl, r4
 8006960:	d00b      	beq.n	800697a <_svfiprintf_r+0x7a>
 8006962:	465b      	mov	r3, fp
 8006964:	4622      	mov	r2, r4
 8006966:	4629      	mov	r1, r5
 8006968:	4638      	mov	r0, r7
 800696a:	f7ff ff6f 	bl	800684c <__ssputs_r>
 800696e:	3001      	adds	r0, #1
 8006970:	f000 80a9 	beq.w	8006ac6 <_svfiprintf_r+0x1c6>
 8006974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006976:	445a      	add	r2, fp
 8006978:	9209      	str	r2, [sp, #36]	; 0x24
 800697a:	f89a 3000 	ldrb.w	r3, [sl]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 80a1 	beq.w	8006ac6 <_svfiprintf_r+0x1c6>
 8006984:	2300      	movs	r3, #0
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698e:	f10a 0a01 	add.w	sl, sl, #1
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	9307      	str	r3, [sp, #28]
 8006996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800699a:	931a      	str	r3, [sp, #104]	; 0x68
 800699c:	4654      	mov	r4, sl
 800699e:	2205      	movs	r2, #5
 80069a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a4:	4850      	ldr	r0, [pc, #320]	; (8006ae8 <_svfiprintf_r+0x1e8>)
 80069a6:	f7f9 fc13 	bl	80001d0 <memchr>
 80069aa:	9a04      	ldr	r2, [sp, #16]
 80069ac:	b9d8      	cbnz	r0, 80069e6 <_svfiprintf_r+0xe6>
 80069ae:	06d0      	lsls	r0, r2, #27
 80069b0:	bf44      	itt	mi
 80069b2:	2320      	movmi	r3, #32
 80069b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b8:	0711      	lsls	r1, r2, #28
 80069ba:	bf44      	itt	mi
 80069bc:	232b      	movmi	r3, #43	; 0x2b
 80069be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c2:	f89a 3000 	ldrb.w	r3, [sl]
 80069c6:	2b2a      	cmp	r3, #42	; 0x2a
 80069c8:	d015      	beq.n	80069f6 <_svfiprintf_r+0xf6>
 80069ca:	9a07      	ldr	r2, [sp, #28]
 80069cc:	4654      	mov	r4, sl
 80069ce:	2000      	movs	r0, #0
 80069d0:	f04f 0c0a 	mov.w	ip, #10
 80069d4:	4621      	mov	r1, r4
 80069d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069da:	3b30      	subs	r3, #48	; 0x30
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d94d      	bls.n	8006a7c <_svfiprintf_r+0x17c>
 80069e0:	b1b0      	cbz	r0, 8006a10 <_svfiprintf_r+0x110>
 80069e2:	9207      	str	r2, [sp, #28]
 80069e4:	e014      	b.n	8006a10 <_svfiprintf_r+0x110>
 80069e6:	eba0 0308 	sub.w	r3, r0, r8
 80069ea:	fa09 f303 	lsl.w	r3, r9, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	46a2      	mov	sl, r4
 80069f4:	e7d2      	b.n	800699c <_svfiprintf_r+0x9c>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	1d19      	adds	r1, r3, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	9103      	str	r1, [sp, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfbb      	ittet	lt
 8006a02:	425b      	neglt	r3, r3
 8006a04:	f042 0202 	orrlt.w	r2, r2, #2
 8006a08:	9307      	strge	r3, [sp, #28]
 8006a0a:	9307      	strlt	r3, [sp, #28]
 8006a0c:	bfb8      	it	lt
 8006a0e:	9204      	strlt	r2, [sp, #16]
 8006a10:	7823      	ldrb	r3, [r4, #0]
 8006a12:	2b2e      	cmp	r3, #46	; 0x2e
 8006a14:	d10c      	bne.n	8006a30 <_svfiprintf_r+0x130>
 8006a16:	7863      	ldrb	r3, [r4, #1]
 8006a18:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1a:	d134      	bne.n	8006a86 <_svfiprintf_r+0x186>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	1d1a      	adds	r2, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	9203      	str	r2, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bfb8      	it	lt
 8006a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a2c:	3402      	adds	r4, #2
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006af8 <_svfiprintf_r+0x1f8>
 8006a34:	7821      	ldrb	r1, [r4, #0]
 8006a36:	2203      	movs	r2, #3
 8006a38:	4650      	mov	r0, sl
 8006a3a:	f7f9 fbc9 	bl	80001d0 <memchr>
 8006a3e:	b138      	cbz	r0, 8006a50 <_svfiprintf_r+0x150>
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	eba0 000a 	sub.w	r0, r0, sl
 8006a46:	2240      	movs	r2, #64	; 0x40
 8006a48:	4082      	lsls	r2, r0
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	3401      	adds	r4, #1
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	4825      	ldr	r0, [pc, #148]	; (8006aec <_svfiprintf_r+0x1ec>)
 8006a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	f7f9 fbb8 	bl	80001d0 <memchr>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d038      	beq.n	8006ad6 <_svfiprintf_r+0x1d6>
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <_svfiprintf_r+0x1f0>)
 8006a66:	bb1b      	cbnz	r3, 8006ab0 <_svfiprintf_r+0x1b0>
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	3307      	adds	r3, #7
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	4433      	add	r3, r6
 8006a78:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7a:	e768      	b.n	800694e <_svfiprintf_r+0x4e>
 8006a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a80:	460c      	mov	r4, r1
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7a6      	b.n	80069d4 <_svfiprintf_r+0xd4>
 8006a86:	2300      	movs	r3, #0
 8006a88:	3401      	adds	r4, #1
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a98:	3a30      	subs	r2, #48	; 0x30
 8006a9a:	2a09      	cmp	r2, #9
 8006a9c:	d903      	bls.n	8006aa6 <_svfiprintf_r+0x1a6>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c6      	beq.n	8006a30 <_svfiprintf_r+0x130>
 8006aa2:	9105      	str	r1, [sp, #20]
 8006aa4:	e7c4      	b.n	8006a30 <_svfiprintf_r+0x130>
 8006aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aaa:	4604      	mov	r4, r0
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7f0      	b.n	8006a92 <_svfiprintf_r+0x192>
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <_svfiprintf_r+0x1f4>)
 8006ab8:	a904      	add	r1, sp, #16
 8006aba:	4638      	mov	r0, r7
 8006abc:	f3af 8000 	nop.w
 8006ac0:	1c42      	adds	r2, r0, #1
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	d1d6      	bne.n	8006a74 <_svfiprintf_r+0x174>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	065b      	lsls	r3, r3, #25
 8006aca:	f53f af2d 	bmi.w	8006928 <_svfiprintf_r+0x28>
 8006ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad0:	b01d      	add	sp, #116	; 0x74
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	ab03      	add	r3, sp, #12
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	462a      	mov	r2, r5
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <_svfiprintf_r+0x1f4>)
 8006ade:	a904      	add	r1, sp, #16
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f000 f879 	bl	8006bd8 <_printf_i>
 8006ae6:	e7eb      	b.n	8006ac0 <_svfiprintf_r+0x1c0>
 8006ae8:	08007004 	.word	0x08007004
 8006aec:	0800700e 	.word	0x0800700e
 8006af0:	00000000 	.word	0x00000000
 8006af4:	0800684d 	.word	0x0800684d
 8006af8:	0800700a 	.word	0x0800700a

08006afc <_printf_common>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	4616      	mov	r6, r2
 8006b02:	4699      	mov	r9, r3
 8006b04:	688a      	ldr	r2, [r1, #8]
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfb8      	it	lt
 8006b10:	4613      	movlt	r3, r2
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b18:	4607      	mov	r7, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b10a      	cbz	r2, 8006b22 <_printf_common+0x26>
 8006b1e:	3301      	adds	r3, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	0699      	lsls	r1, r3, #26
 8006b26:	bf42      	ittt	mi
 8006b28:	6833      	ldrmi	r3, [r6, #0]
 8006b2a:	3302      	addmi	r3, #2
 8006b2c:	6033      	strmi	r3, [r6, #0]
 8006b2e:	6825      	ldr	r5, [r4, #0]
 8006b30:	f015 0506 	ands.w	r5, r5, #6
 8006b34:	d106      	bne.n	8006b44 <_printf_common+0x48>
 8006b36:	f104 0a19 	add.w	sl, r4, #25
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	6832      	ldr	r2, [r6, #0]
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dc26      	bgt.n	8006b92 <_printf_common+0x96>
 8006b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b48:	1e13      	subs	r3, r2, #0
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	0692      	lsls	r2, r2, #26
 8006b52:	d42b      	bmi.n	8006bac <_printf_common+0xb0>
 8006b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d01e      	beq.n	8006ba0 <_printf_common+0xa4>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	f003 0306 	and.w	r3, r3, #6
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	bf02      	ittt	eq
 8006b6e:	68e5      	ldreq	r5, [r4, #12]
 8006b70:	6833      	ldreq	r3, [r6, #0]
 8006b72:	1aed      	subeq	r5, r5, r3
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	bf0c      	ite	eq
 8006b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b7c:	2500      	movne	r5, #0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	bfc4      	itt	gt
 8006b82:	1a9b      	subgt	r3, r3, r2
 8006b84:	18ed      	addgt	r5, r5, r3
 8006b86:	2600      	movs	r6, #0
 8006b88:	341a      	adds	r4, #26
 8006b8a:	42b5      	cmp	r5, r6
 8006b8c:	d11a      	bne.n	8006bc4 <_printf_common+0xc8>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e008      	b.n	8006ba4 <_printf_common+0xa8>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4649      	mov	r1, r9
 8006b98:	4638      	mov	r0, r7
 8006b9a:	47c0      	blx	r8
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d103      	bne.n	8006ba8 <_printf_common+0xac>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	3501      	adds	r5, #1
 8006baa:	e7c6      	b.n	8006b3a <_printf_common+0x3e>
 8006bac:	18e1      	adds	r1, r4, r3
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	2030      	movs	r0, #48	; 0x30
 8006bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb6:	4422      	add	r2, r4
 8006bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	e7c7      	b.n	8006b54 <_printf_common+0x58>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d0e6      	beq.n	8006ba0 <_printf_common+0xa4>
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e7d9      	b.n	8006b8a <_printf_common+0x8e>
	...

08006bd8 <_printf_i>:
 8006bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	7e0f      	ldrb	r7, [r1, #24]
 8006bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006be0:	2f78      	cmp	r7, #120	; 0x78
 8006be2:	4691      	mov	r9, r2
 8006be4:	4680      	mov	r8, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	469a      	mov	sl, r3
 8006bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bee:	d807      	bhi.n	8006c00 <_printf_i+0x28>
 8006bf0:	2f62      	cmp	r7, #98	; 0x62
 8006bf2:	d80a      	bhi.n	8006c0a <_printf_i+0x32>
 8006bf4:	2f00      	cmp	r7, #0
 8006bf6:	f000 80d4 	beq.w	8006da2 <_printf_i+0x1ca>
 8006bfa:	2f58      	cmp	r7, #88	; 0x58
 8006bfc:	f000 80c0 	beq.w	8006d80 <_printf_i+0x1a8>
 8006c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c08:	e03a      	b.n	8006c80 <_printf_i+0xa8>
 8006c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c0e:	2b15      	cmp	r3, #21
 8006c10:	d8f6      	bhi.n	8006c00 <_printf_i+0x28>
 8006c12:	a101      	add	r1, pc, #4	; (adr r1, 8006c18 <_printf_i+0x40>)
 8006c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006c01 	.word	0x08006c01
 8006c24:	08006c01 	.word	0x08006c01
 8006c28:	08006c01 	.word	0x08006c01
 8006c2c:	08006c01 	.word	0x08006c01
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006c01 	.word	0x08006c01
 8006c38:	08006c01 	.word	0x08006c01
 8006c3c:	08006c01 	.word	0x08006c01
 8006c40:	08006c01 	.word	0x08006c01
 8006c44:	08006d89 	.word	0x08006d89
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006d43 	.word	0x08006d43
 8006c50:	08006c01 	.word	0x08006c01
 8006c54:	08006c01 	.word	0x08006c01
 8006c58:	08006dab 	.word	0x08006dab
 8006c5c:	08006c01 	.word	0x08006c01
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006c01 	.word	0x08006c01
 8006c68:	08006c01 	.word	0x08006c01
 8006c6c:	08006d4b 	.word	0x08006d4b
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	1d1a      	adds	r2, r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c80:	2301      	movs	r3, #1
 8006c82:	e09f      	b.n	8006dc4 <_printf_i+0x1ec>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	0607      	lsls	r7, r0, #24
 8006c8a:	f103 0104 	add.w	r1, r3, #4
 8006c8e:	6029      	str	r1, [r5, #0]
 8006c90:	d501      	bpl.n	8006c96 <_printf_i+0xbe>
 8006c92:	681e      	ldr	r6, [r3, #0]
 8006c94:	e003      	b.n	8006c9e <_printf_i+0xc6>
 8006c96:	0646      	lsls	r6, r0, #25
 8006c98:	d5fb      	bpl.n	8006c92 <_printf_i+0xba>
 8006c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	da03      	bge.n	8006caa <_printf_i+0xd2>
 8006ca2:	232d      	movs	r3, #45	; 0x2d
 8006ca4:	4276      	negs	r6, r6
 8006ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006caa:	485a      	ldr	r0, [pc, #360]	; (8006e14 <_printf_i+0x23c>)
 8006cac:	230a      	movs	r3, #10
 8006cae:	e012      	b.n	8006cd6 <_printf_i+0xfe>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	6029      	str	r1, [r5, #0]
 8006cb8:	0605      	lsls	r5, r0, #24
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0xe8>
 8006cbc:	681e      	ldr	r6, [r3, #0]
 8006cbe:	e002      	b.n	8006cc6 <_printf_i+0xee>
 8006cc0:	0641      	lsls	r1, r0, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0xe4>
 8006cc4:	881e      	ldrh	r6, [r3, #0]
 8006cc6:	4853      	ldr	r0, [pc, #332]	; (8006e14 <_printf_i+0x23c>)
 8006cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cca:	bf0c      	ite	eq
 8006ccc:	2308      	moveq	r3, #8
 8006cce:	230a      	movne	r3, #10
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd6:	6865      	ldr	r5, [r4, #4]
 8006cd8:	60a5      	str	r5, [r4, #8]
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	bfa2      	ittt	ge
 8006cde:	6821      	ldrge	r1, [r4, #0]
 8006ce0:	f021 0104 	bicge.w	r1, r1, #4
 8006ce4:	6021      	strge	r1, [r4, #0]
 8006ce6:	b90e      	cbnz	r6, 8006cec <_printf_i+0x114>
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	d04b      	beq.n	8006d84 <_printf_i+0x1ac>
 8006cec:	4615      	mov	r5, r2
 8006cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cf6:	5dc7      	ldrb	r7, [r0, r7]
 8006cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cfc:	4637      	mov	r7, r6
 8006cfe:	42bb      	cmp	r3, r7
 8006d00:	460e      	mov	r6, r1
 8006d02:	d9f4      	bls.n	8006cee <_printf_i+0x116>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d10b      	bne.n	8006d20 <_printf_i+0x148>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07de      	lsls	r6, r3, #31
 8006d0c:	d508      	bpl.n	8006d20 <_printf_i+0x148>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6861      	ldr	r1, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	bfde      	ittt	le
 8006d16:	2330      	movle	r3, #48	; 0x30
 8006d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d20:	1b52      	subs	r2, r2, r5
 8006d22:	6122      	str	r2, [r4, #16]
 8006d24:	f8cd a000 	str.w	sl, [sp]
 8006d28:	464b      	mov	r3, r9
 8006d2a:	aa03      	add	r2, sp, #12
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fee4 	bl	8006afc <_printf_common>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d14a      	bne.n	8006dce <_printf_i+0x1f6>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b004      	add	sp, #16
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	4833      	ldr	r0, [pc, #204]	; (8006e18 <_printf_i+0x240>)
 8006d4c:	2778      	movs	r7, #120	; 0x78
 8006d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	6829      	ldr	r1, [r5, #0]
 8006d56:	061f      	lsls	r7, r3, #24
 8006d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d5c:	d402      	bmi.n	8006d64 <_printf_i+0x18c>
 8006d5e:	065f      	lsls	r7, r3, #25
 8006d60:	bf48      	it	mi
 8006d62:	b2b6      	uxthmi	r6, r6
 8006d64:	07df      	lsls	r7, r3, #31
 8006d66:	bf48      	it	mi
 8006d68:	f043 0320 	orrmi.w	r3, r3, #32
 8006d6c:	6029      	str	r1, [r5, #0]
 8006d6e:	bf48      	it	mi
 8006d70:	6023      	strmi	r3, [r4, #0]
 8006d72:	b91e      	cbnz	r6, 8006d7c <_printf_i+0x1a4>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f023 0320 	bic.w	r3, r3, #32
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	e7a7      	b.n	8006cd0 <_printf_i+0xf8>
 8006d80:	4824      	ldr	r0, [pc, #144]	; (8006e14 <_printf_i+0x23c>)
 8006d82:	e7e4      	b.n	8006d4e <_printf_i+0x176>
 8006d84:	4615      	mov	r5, r2
 8006d86:	e7bd      	b.n	8006d04 <_printf_i+0x12c>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	6826      	ldr	r6, [r4, #0]
 8006d8c:	6961      	ldr	r1, [r4, #20]
 8006d8e:	1d18      	adds	r0, r3, #4
 8006d90:	6028      	str	r0, [r5, #0]
 8006d92:	0635      	lsls	r5, r6, #24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0x1c4>
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <_printf_i+0x1ca>
 8006d9c:	0670      	lsls	r0, r6, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0x1c0>
 8006da0:	8019      	strh	r1, [r3, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	4615      	mov	r5, r2
 8006da8:	e7bc      	b.n	8006d24 <_printf_i+0x14c>
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	602a      	str	r2, [r5, #0]
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	6862      	ldr	r2, [r4, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7f9 fa0a 	bl	80001d0 <memchr>
 8006dbc:	b108      	cbz	r0, 8006dc2 <_printf_i+0x1ea>
 8006dbe:	1b40      	subs	r0, r0, r5
 8006dc0:	6060      	str	r0, [r4, #4]
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dcc:	e7aa      	b.n	8006d24 <_printf_i+0x14c>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	47d0      	blx	sl
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0ad      	beq.n	8006d38 <_printf_i+0x160>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	079b      	lsls	r3, r3, #30
 8006de0:	d413      	bmi.n	8006e0a <_printf_i+0x232>
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	4298      	cmp	r0, r3
 8006de8:	bfb8      	it	lt
 8006dea:	4618      	movlt	r0, r3
 8006dec:	e7a6      	b.n	8006d3c <_printf_i+0x164>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4632      	mov	r2, r6
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d09d      	beq.n	8006d38 <_printf_i+0x160>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	9903      	ldr	r1, [sp, #12]
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	42ab      	cmp	r3, r5
 8006e06:	dcf2      	bgt.n	8006dee <_printf_i+0x216>
 8006e08:	e7eb      	b.n	8006de2 <_printf_i+0x20a>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	f104 0619 	add.w	r6, r4, #25
 8006e10:	e7f5      	b.n	8006dfe <_printf_i+0x226>
 8006e12:	bf00      	nop
 8006e14:	08007015 	.word	0x08007015
 8006e18:	08007026 	.word	0x08007026

08006e1c <memmove>:
 8006e1c:	4288      	cmp	r0, r1
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	eb01 0402 	add.w	r4, r1, r2
 8006e24:	d902      	bls.n	8006e2c <memmove+0x10>
 8006e26:	4284      	cmp	r4, r0
 8006e28:	4623      	mov	r3, r4
 8006e2a:	d807      	bhi.n	8006e3c <memmove+0x20>
 8006e2c:	1e43      	subs	r3, r0, #1
 8006e2e:	42a1      	cmp	r1, r4
 8006e30:	d008      	beq.n	8006e44 <memmove+0x28>
 8006e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e3a:	e7f8      	b.n	8006e2e <memmove+0x12>
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4601      	mov	r1, r0
 8006e40:	428a      	cmp	r2, r1
 8006e42:	d100      	bne.n	8006e46 <memmove+0x2a>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e4e:	e7f7      	b.n	8006e40 <memmove+0x24>

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	; (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7fa fcee 	bl	800183c <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	2000034c 	.word	0x2000034c

08006e70 <memcpy>:
 8006e70:	440a      	add	r2, r1
 8006e72:	4291      	cmp	r1, r2
 8006e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e78:	d100      	bne.n	8006e7c <memcpy+0xc>
 8006e7a:	4770      	bx	lr
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e86:	4291      	cmp	r1, r2
 8006e88:	d1f9      	bne.n	8006e7e <memcpy+0xe>
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <_realloc_r>:
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	4680      	mov	r8, r0
 8006e92:	4614      	mov	r4, r2
 8006e94:	460e      	mov	r6, r1
 8006e96:	b921      	cbnz	r1, 8006ea2 <_realloc_r+0x16>
 8006e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	f7ff bc49 	b.w	8006734 <_malloc_r>
 8006ea2:	b92a      	cbnz	r2, 8006eb0 <_realloc_r+0x24>
 8006ea4:	f7ff fbda 	bl	800665c <_free_r>
 8006ea8:	4625      	mov	r5, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb0:	f000 f81b 	bl	8006eea <_malloc_usable_size_r>
 8006eb4:	4284      	cmp	r4, r0
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	d802      	bhi.n	8006ec0 <_realloc_r+0x34>
 8006eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ebe:	d812      	bhi.n	8006ee6 <_realloc_r+0x5a>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f7ff fc36 	bl	8006734 <_malloc_r>
 8006ec8:	4605      	mov	r5, r0
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d0ed      	beq.n	8006eaa <_realloc_r+0x1e>
 8006ece:	42bc      	cmp	r4, r7
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	bf28      	it	cs
 8006ed6:	463a      	movcs	r2, r7
 8006ed8:	f7ff ffca 	bl	8006e70 <memcpy>
 8006edc:	4631      	mov	r1, r6
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fbbc 	bl	800665c <_free_r>
 8006ee4:	e7e1      	b.n	8006eaa <_realloc_r+0x1e>
 8006ee6:	4635      	mov	r5, r6
 8006ee8:	e7df      	b.n	8006eaa <_realloc_r+0x1e>

08006eea <_malloc_usable_size_r>:
 8006eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eee:	1f18      	subs	r0, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bfbc      	itt	lt
 8006ef4:	580b      	ldrlt	r3, [r1, r0]
 8006ef6:	18c0      	addlt	r0, r0, r3
 8006ef8:	4770      	bx	lr
	...

08006efc <_init>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr

08006f08 <_fini>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr
