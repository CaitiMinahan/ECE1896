
Nucleo-L476RG_contactorLoop_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003140  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003368  08003368  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800337c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800337c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1e8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001724  00000000  00000000  0002a267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000696  00000000  00000000  0002c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c17  00000000  00000000  0002c8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6c5  00000000  00000000  000514d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3abb  00000000  00000000  0005bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002248  00000000  00000000  0013f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001418a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032b0 	.word	0x080032b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032b0 	.word	0x080032b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b094      	sub	sp, #80	; 0x50
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fa9f 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f8bb 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f93b 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f909 	bl	80006ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fdc3 	bl	800106c <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d02d      	beq.n	8000548 <main+0x84>
 80004ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f000 fdba 	bl	800106c <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d124      	bne.n	8000548 <main+0x84>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f000 fdc9 	bl	800109c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fafa 	bl	8000b04 <HAL_Delay>

		  // Write to UART Over Temp Fault
		  uint8_t Test[] = "Over Temp Fault !!!\r\n";
 8000510:	4b49      	ldr	r3, [pc, #292]	; (8000638 <main+0x174>)
 8000512:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000516:	461d      	mov	r5, r3
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000520:	6020      	str	r0, [r4, #0]
 8000522:	3404      	adds	r4, #4
 8000524:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
 8000526:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800052a:	230a      	movs	r3, #10
 800052c:	2216      	movs	r2, #22
 800052e:	4843      	ldr	r0, [pc, #268]	; (800063c <main+0x178>)
 8000530:	f002 f93a 	bl	80027a8 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000538:	f000 fae4 	bl	8000b04 <HAL_Delay>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fdaa 	bl	800109c <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f000 fd8c 	bl	800106c <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d02c      	beq.n	80005b4 <main+0xf0>
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f000 fd83 	bl	800106c <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d123      	bne.n	80005b4 <main+0xf0>
		  // Turn ON LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fd92 	bl	800109c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fac3 	bl	8000b04 <HAL_Delay>

		  // Write to UART Over Voltage Fault
		  uint8_t Test[] = "Over Voltage Fault !!!\r\n"; //Data to send
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <main+0x17c>)
 8000580:	f107 041c 	add.w	r4, r7, #28
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	c403      	stmia	r4!, {r0, r1}
 8000590:	7022      	strb	r2, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
 8000592:	f107 011c 	add.w	r1, r7, #28
 8000596:	230a      	movs	r3, #10
 8000598:	2219      	movs	r2, #25
 800059a:	4828      	ldr	r0, [pc, #160]	; (800063c <main+0x178>)
 800059c:	f002 f904 	bl	80027a8 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f000 faae 	bl	8000b04 <HAL_Delay>

		  // Turn OFF LED
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fd74 	bl	800109c <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fd56 	bl	800106c <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d089      	beq.n	80004da <main+0x16>
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 fd4d 	bl	800106c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d080      	beq.n	80004da <main+0x16>
		  // Turn ON LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fd5c 	bl	800109c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 fd56 	bl	800109c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f000 fa87 	bl	8000b04 <HAL_Delay>

		  // Write to UART Over Current Fault
		  uint8_t Test[] = "Over Current Fault !!!\r\n"; //Data to send
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0x180>)
 80005f8:	463c      	mov	r4, r7
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	c403      	stmia	r4!, {r0, r1}
 8000606:	7022      	strb	r2, [r4, #0]
		  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
 8000608:	4639      	mov	r1, r7
 800060a:	230a      	movs	r3, #10
 800060c:	2219      	movs	r2, #25
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0x178>)
 8000610:	f002 f8ca 	bl	80027a8 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f000 fa74 	bl	8000b04 <HAL_Delay>

		  // Turn OFF LEDs
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fd3a 	bl	800109c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fd34 	bl	800109c <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000634:	e751      	b.n	80004da <main+0x16>
 8000636:	bf00      	nop
 8000638:	080032c8 	.word	0x080032c8
 800063c:	20000028 	.word	0x20000028
 8000640:	080032e0 	.word	0x080032e0
 8000644:	080032fc 	.word	0x080032fc

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fdfd 	bl	8003256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f000 fd3b 	bl	80010e8 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 f8dc 	bl	8000834 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000696:	230a      	movs	r3, #10
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd72 	bl	8001194 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b6:	f000 f8bd 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2104      	movs	r1, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f93a 	bl	800194c <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f8a9 	bl	8000834 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f001 ffec 	bl	800270c <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f87b 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <MX_GPIO_Init+0xe0>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a31      	ldr	r2, [pc, #196]	; (800082c <MX_GPIO_Init+0xe0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_GPIO_Init+0xe0>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_GPIO_Init+0xe0>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a2b      	ldr	r2, [pc, #172]	; (800082c <MX_GPIO_Init+0xe0>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_GPIO_Init+0xe0>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xe0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <MX_GPIO_Init+0xe0>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xe0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_GPIO_Init+0xe0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <MX_GPIO_Init+0xe0>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0xe0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21e0      	movs	r1, #224	; 0xe0
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fc67 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xe4>)
 80007e6:	f000 fa97 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80007ea:	23e0      	movs	r3, #224	; 0xe0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fa88 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000808:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fa7a 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6613      	str	r3, [r2, #96]	; 0x60
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6593      	str	r3, [r2, #88]	; 0x58
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x44>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0ac      	sub	sp, #176	; 0xb0
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2288      	movs	r2, #136	; 0x88
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fcd4 	bl	8003256 <memset>
  if(huart->Instance==USART2)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <HAL_UART_MspInit+0xb0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d13b      	bne.n	8000930 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008bc:	2300      	movs	r3, #0
 80008be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fa65 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d0:	f7ff ffb0 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d8:	4a18      	ldr	r2, [pc, #96]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	6593      	str	r3, [r2, #88]	; 0x58
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000904:	230c      	movs	r3, #12
 8000906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091c:	2307      	movs	r3, #7
 800091e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 f9f4 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	37b0      	adds	r7, #176	; 0xb0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f89a 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fc3f 	bl	8003268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd6b 	bl	80004c4 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08003370 	.word	0x08003370
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	200000b4 	.word	0x200000b4

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_Init+0x3c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x3c>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f944 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80f 	bl	8000a4c <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff ff01 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d023      	beq.n	8000aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x70>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f941 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f919 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e004      	b.n	8000aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000b0 	.word	0x200000b0

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000b0 	.word	0x200000b0

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e17f      	b.n	8001028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8171 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d118      	bne.n	8000df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	6939      	ldr	r1, [r7, #16]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80ac 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_GPIO_Init+0x334>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x242>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x338>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x23e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x33c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x23a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x340>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x236>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x344>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x232>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x348>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x22e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x34c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x22a>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6c:	4937      	ldr	r1, [pc, #220]	; (800104c <HAL_GPIO_Init+0x334>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_GPIO_Init+0x350>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	f47f ae78 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	48001400 	.word	0x48001400
 8001064:	48001800 	.word	0x48001800
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	d130      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001104:	d038      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2232      	movs	r2, #50	; 0x32
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	e002      	b.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001140:	d102      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f2      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d110      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e00f      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001166:	d007      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83

08001194 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e3ca      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a6:	4b97      	ldr	r3, [pc, #604]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b0:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80e4 	beq.w	8001390 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_RCC_OscConfig+0x4a>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	f040 808b 	bne.w	80012ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 8087 	bne.w	80012ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x62>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e3a2      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_RCC_OscConfig+0x7c>
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120e:	e005      	b.n	800121c <HAL_RCC_OscConfig+0x88>
 8001210:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121c:	4293      	cmp	r3, r2
 800121e:	d223      	bcs.n	8001268 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd55 	bl	8001cd4 <RCC_SetFlashLatencyFromMSIRange>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e383      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001234:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b70      	ldr	r3, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	496d      	ldr	r1, [pc, #436]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001252:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	4968      	ldr	r1, [pc, #416]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
 8001266:	e025      	b.n	80012b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a65      	ldr	r2, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4960      	ldr	r1, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	495b      	ldr	r1, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d109      	bne.n	80012b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fd15 	bl	8001cd4 <RCC_SetFlashLatencyFromMSIRange>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e343      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b4:	f000 fc4a 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4950      	ldr	r1, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x274>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_RCC_OscConfig+0x278>)
 80012d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x27c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fbb7 	bl	8000a4c <HAL_InitTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d052      	beq.n	800138e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	e327      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d032      	beq.n	800135a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f4:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a42      	ldr	r2, [pc, #264]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001300:	f7ff fbf4 	bl	8000aec <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001308:	f7ff fbf0 	bl	8000aec <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e310      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4931      	ldr	r1, [pc, #196]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	492c      	ldr	r1, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e01a      	b.n	8001390 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fbc1 	bl	8000aec <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fbbd 	bl	8000aec <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e2dd      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x1da>
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d074      	beq.n	8001486 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x21a>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d10e      	bne.n	80013c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d064      	beq.n	8001484 <HAL_RCC_OscConfig+0x2f0>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d160      	bne.n	8001484 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e2ba      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x24a>
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e026      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e6:	d115      	bne.n	8001414 <HAL_RCC_OscConfig+0x280>
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a02      	ldr	r2, [pc, #8]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	08003318 	.word	0x08003318
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004
 8001414:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a9f      	ldr	r2, [pc, #636]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9c      	ldr	r2, [pc, #624]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb5a 	bl	8000aec <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fb56 	bl	8000aec <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e276      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2a8>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb46 	bl	8000aec <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb42 	bl	8000aec <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e262      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d0>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d060      	beq.n	8001554 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x310>
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d116      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x328>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e23f      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4973      	ldr	r1, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	e040      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb01 	bl	8000aec <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fafd 	bl	8000aec <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e21d      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	495f      	ldr	r1, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fadd 	bl	8000aec <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fad9 	bl	8000aec <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1f9      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fab8 	bl	8000aec <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fab4 	bl	8000aec <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1d4      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x3ec>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	4a3b      	ldr	r2, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa9b 	bl	8000aec <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fa97 	bl	8000aec <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1b7      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ef      	bne.n	80015ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a6 	beq.w	8001734 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10d      	bne.n	8001614 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6593      	str	r3, [r2, #88]	; 0x58
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001610:	2301      	movs	r3, #1
 8001612:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d118      	bne.n	8001652 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162c:	f7ff fa5e 	bl	8000aec <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff fa5a 	bl	8000aec <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e17a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x4d8>
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166a:	e029      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x50c>
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	4b9c      	ldr	r3, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a9b      	ldr	r2, [pc, #620]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	4b98      	ldr	r3, [pc, #608]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a97      	ldr	r2, [pc, #604]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d016      	beq.n	80016f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa10 	bl	8000aec <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fa0c 	bl	8000aec <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e12a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ed      	beq.n	80016d0 <HAL_RCC_OscConfig+0x53c>
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff f9f9 	bl	8000aec <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f9f5 	bl	8000aec <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e113      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001714:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ed      	bne.n	80016fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80fe 	beq.w	800193a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	2b02      	cmp	r3, #2
 8001744:	f040 80d0 	bne.w	80018e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001748:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	d130      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	3b01      	subs	r3, #1
 8001768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d127      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11f      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001788:	2a07      	cmp	r2, #7
 800178a:	bf14      	ite	ne
 800178c:	2201      	movne	r2, #1
 800178e:	2200      	moveq	r2, #0
 8001790:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	4293      	cmp	r3, r2
 8001794:	d113      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d109      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d06e      	beq.n	800189c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d069      	beq.n	8001898 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0ad      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ec:	f7ff f97e 	bl	8000aec <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f97a 	bl	8000aec <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e09a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001822:	3a01      	subs	r2, #1
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800182c:	0212      	lsls	r2, r2, #8
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001834:	0852      	lsrs	r2, r2, #1
 8001836:	3a01      	subs	r2, #1
 8001838:	0552      	lsls	r2, r2, #21
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001840:	0852      	lsrs	r2, r2, #1
 8001842:	3a01      	subs	r2, #1
 8001844:	0652      	lsls	r2, r2, #25
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800184c:	0912      	lsrs	r2, r2, #4
 800184e:	0452      	lsls	r2, r2, #17
 8001850:	430a      	orrs	r2, r1
 8001852:	4930      	ldr	r1, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001870:	f7ff f93c 	bl	8000aec <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f938 	bl	8000aec <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e058      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001896:	e050      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e04f      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d148      	bne.n	800193a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018c0:	f7ff f914 	bl	8000aec <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f910 	bl	8000aec <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e030      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x734>
 80018e6:	e028      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8f7 	bl	8000aec <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	e00c      	b.n	800191c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff f8f3 	bl	8000aec <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d905      	bls.n	800191c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
 8001914:	40021000 	.word	0x40021000
 8001918:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ec      	bne.n	8001902 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4905      	ldr	r1, [pc, #20]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_OscConfig+0x7b4>)
 8001930:	4013      	ands	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e001      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	feeefffc 	.word	0xfeeefffc

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0e7      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d910      	bls.n	8001990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4970      	ldr	r1, [pc, #448]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0cf      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d908      	bls.n	80019be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4960      	ldr	r1, [pc, #384]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04c      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d121      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0a6      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09a      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e08e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e086      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4943      	ldr	r1, [pc, #268]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff f85a 	bl	8000aec <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f856 	bl	8000aec <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e06e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d208      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	492b      	ldr	r1, [pc, #172]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d210      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 0207 	bic.w	r2, r3, #7
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e036      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4918      	ldr	r1, [pc, #96]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b00:	f000 f824 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1f4>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1fc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe ff91 	bl	8000a4c <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08003318 	.word	0x08003318
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d121      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11e      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e004      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d134      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d003      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bf0:	e005      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf4:	617b      	str	r3, [r7, #20]
      break;
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	617b      	str	r3, [r7, #20]
      break;
 8001bfc:	e002      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	fb03 f202 	mul.w	r2, r3, r2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	0e5b      	lsrs	r3, r3, #25
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	3301      	adds	r3, #1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c44:	69bb      	ldr	r3, [r7, #24]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003330 	.word	0x08003330
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003328 	.word	0x08003328

08001ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cac:	f7ff ffda 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0adb      	lsrs	r3, r3, #11
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08003328 	.word	0x08003328

08001cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cec:	f7ff f9ee 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001cf0:	6178      	str	r0, [r7, #20]
 8001cf2:	e014      	b.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d0c:	f7ff f9de 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001d10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d10b      	bne.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d919      	bls.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d30:	d902      	bls.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	e013      	b.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d38:	2301      	movs	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e010      	b.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d902      	bls.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d44:	2303      	movs	r3, #3
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e00a      	b.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d102      	bne.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e004      	b.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b70      	cmp	r3, #112	; 0x70
 8001d5a:	d101      	bne.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 0207 	bic.w	r2, r3, #7
 8001d68:	4909      	ldr	r1, [pc, #36]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d041      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001db8:	d02a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dbe:	d824      	bhi.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dca:	d81e      	bhi.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00a      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dd8:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a85      	ldr	r2, [pc, #532]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de4:	e015      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fabb 	bl	8002368 <RCCEx_PLLSAI1_Config>
 8001df2:	4603      	mov	r3, r0
 8001df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df6:	e00c      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3320      	adds	r3, #32
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fba6 	bl	8002550 <RCCEx_PLLSAI2_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e08:	e003      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e0e:	e000      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e18:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e26:	4973      	ldr	r1, [pc, #460]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e2e:	e001      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d041      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e48:	d02a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e4e:	d824      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e54:	d008      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5a:	d81e      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d010      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e66:	e018      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e68:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a61      	ldr	r2, [pc, #388]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e74:	e015      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fa73 	bl	8002368 <RCCEx_PLLSAI1_Config>
 8001e82:	4603      	mov	r3, r0
 8001e84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e86:	e00c      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fb5e 	bl	8002550 <RCCEx_PLLSAI2_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e98:	e003      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb6:	494f      	ldr	r1, [pc, #316]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a0 	beq.w	8002012 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fdea 	bl	8000aec <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fde6 	bl	8000aec <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d902      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d15c      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01f      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d019      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a20      	ldr	r2, [pc, #128]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fda5 	bl	8000aec <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7fe fda1 	bl	8000aec <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d902      	bls.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	74fb      	strb	r3, [r7, #19]
            break;
 8001fbc:	e006      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ec      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe2:	4904      	ldr	r1, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fea:	e009      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
 8001ff0:	e006      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002000:	7c7b      	ldrb	r3, [r7, #17]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b9e      	ldr	r3, [pc, #632]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	4a9d      	ldr	r2, [pc, #628]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800201e:	4b98      	ldr	r3, [pc, #608]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f023 0203 	bic.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	4994      	ldr	r1, [pc, #592]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002040:	4b8f      	ldr	r3, [pc, #572]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f023 020c 	bic.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	498c      	ldr	r1, [pc, #560]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002062:	4b87      	ldr	r3, [pc, #540]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	4983      	ldr	r1, [pc, #524]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002084:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	497b      	ldr	r1, [pc, #492]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	4972      	ldr	r1, [pc, #456]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	496a      	ldr	r1, [pc, #424]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	4961      	ldr	r1, [pc, #388]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800210c:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	4959      	ldr	r1, [pc, #356]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213c:	4950      	ldr	r1, [pc, #320]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	4948      	ldr	r1, [pc, #288]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002172:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	493f      	ldr	r1, [pc, #252]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d028      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	4937      	ldr	r1, [pc, #220]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021be:	60d3      	str	r3, [r2, #12]
 80021c0:	e011      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f8c8 	bl	8002368 <RCCEx_PLLSAI1_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d028      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	491f      	ldr	r1, [pc, #124]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002210:	d106      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a1a      	ldr	r2, [pc, #104]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221c:	60d3      	str	r3, [r2, #12]
 800221e:	e011      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f899 	bl	8002368 <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02b      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225e:	4908      	ldr	r1, [pc, #32]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800226e:	d109      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a02      	ldr	r2, [pc, #8]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227a:	60d3      	str	r3, [r2, #12]
 800227c:	e014      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3304      	adds	r3, #4
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f867 	bl	8002368 <RCCEx_PLLSAI1_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02f      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c2:	4928      	ldr	r1, [pc, #160]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f844 	bl	8002368 <RCCEx_PLLSAI1_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	74bb      	strb	r3, [r7, #18]
 80022ee:	e011      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3320      	adds	r3, #32
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f925 	bl	8002550 <RCCEx_PLLSAI2_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232e:	490d      	ldr	r1, [pc, #52]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002352:	4904      	ldr	r1, [pc, #16]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800235a:	7cbb      	ldrb	r3, [r7, #18]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002376:	4b75      	ldr	r3, [pc, #468]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d018      	beq.n	80023b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0203 	and.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d10d      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
       ||
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239a:	4b6c      	ldr	r3, [pc, #432]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
       ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d047      	beq.n	800243e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e044      	b.n	800243e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d018      	beq.n	80023ee <RCCEx_PLLSAI1_Config+0x86>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d825      	bhi.n	800240c <RCCEx_PLLSAI1_Config+0xa4>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d002      	beq.n	80023ca <RCCEx_PLLSAI1_Config+0x62>
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d009      	beq.n	80023dc <RCCEx_PLLSAI1_Config+0x74>
 80023c8:	e020      	b.n	800240c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11d      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023da:	e01a      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023dc:	4b5b      	ldr	r3, [pc, #364]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d116      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ec:	e013      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240a:	e006      	b.n	800241a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e004      	b.n	800241c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
    }

    if(status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	430b      	orrs	r3, r1
 8002438:	4944      	ldr	r1, [pc, #272]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d17d      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a40      	ldr	r2, [pc, #256]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800244e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe fb4c 	bl	8000aec <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002456:	e009      	b.n	800246c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002458:	f7fe fb48 	bl	8000aec <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	73fb      	strb	r3, [r7, #15]
        break;
 800246a:	e005      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ef      	bne.n	8002458 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d160      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d111      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800248c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6892      	ldr	r2, [r2, #8]
 8002494:	0211      	lsls	r1, r2, #8
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	0912      	lsrs	r2, r2, #4
 800249c:	0452      	lsls	r2, r2, #17
 800249e:	430a      	orrs	r2, r1
 80024a0:	492a      	ldr	r1, [pc, #168]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	610b      	str	r3, [r1, #16]
 80024a6:	e027      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d112      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	0211      	lsls	r1, r2, #8
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6912      	ldr	r2, [r2, #16]
 80024c4:	0852      	lsrs	r2, r2, #1
 80024c6:	3a01      	subs	r2, #1
 80024c8:	0552      	lsls	r2, r2, #21
 80024ca:	430a      	orrs	r2, r1
 80024cc:	491f      	ldr	r1, [pc, #124]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	610b      	str	r3, [r1, #16]
 80024d2:	e011      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	0211      	lsls	r1, r2, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6952      	ldr	r2, [r2, #20]
 80024ea:	0852      	lsrs	r2, r2, #1
 80024ec:	3a01      	subs	r2, #1
 80024ee:	0652      	lsls	r2, r2, #25
 80024f0:	430a      	orrs	r2, r1
 80024f2:	4916      	ldr	r1, [pc, #88]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002502:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe faf2 	bl	8000aec <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250a:	e009      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800250c:	f7fe faee 	bl	8000aec <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	73fb      	strb	r3, [r7, #15]
          break;
 800251e:	e005      	b.n	800252c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ef      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
       ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
       ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d047      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e044      	b.n	8002626 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d018      	beq.n	80025d6 <RCCEx_PLLSAI2_Config+0x86>
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d825      	bhi.n	80025f4 <RCCEx_PLLSAI2_Config+0xa4>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d002      	beq.n	80025b2 <RCCEx_PLLSAI2_Config+0x62>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d009      	beq.n	80025c4 <RCCEx_PLLSAI2_Config+0x74>
 80025b0:	e020      	b.n	80025f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11d      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c2:	e01a      	b.n	80025fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e013      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f2:	e006      	b.n	8002602 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e004      	b.n	8002604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002602:	bf00      	nop
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	430b      	orrs	r3, r1
 8002620:	4939      	ldr	r1, [pc, #228]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d167      	bne.n	80026fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a35      	ldr	r2, [pc, #212]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fa58 	bl	8000aec <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800263e:	e009      	b.n	8002654 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002640:	f7fe fa54 	bl	8000aec <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	73fb      	strb	r3, [r7, #15]
        break;
 8002652:	e005      	b.n	8002660 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d14a      	bne.n	80026fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d111      	bne.n	8002690 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	0211      	lsls	r1, r2, #8
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	0912      	lsrs	r2, r2, #4
 8002684:	0452      	lsls	r2, r2, #17
 8002686:	430a      	orrs	r2, r1
 8002688:	491f      	ldr	r1, [pc, #124]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	4313      	orrs	r3, r2
 800268c:	614b      	str	r3, [r1, #20]
 800268e:	e011      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6912      	ldr	r2, [r2, #16]
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0652      	lsls	r2, r2, #25
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4916      	ldr	r1, [pc, #88]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fa14 	bl	8000aec <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026c6:	e009      	b.n	80026dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026c8:	f7fe fa10 	bl	8000aec <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	73fb      	strb	r3, [r7, #15]
          break;
 80026da:	e005      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ef      	beq.n	80026c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4904      	ldr	r1, [pc, #16]	; (8002708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e040      	b.n	80027a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe f8aa 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	; 0x24
 8002738:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fb6a 	bl	8002e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8af 	bl	80028bc <UART_SetConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e01b      	b.n	80027a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fbe9 	bl	8002f70 <UART_CheckIdleState>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d178      	bne.n	80028b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_UART_Transmit+0x24>
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e071      	b.n	80028b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027de:	f7fe f985 	bl	8000aec <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x68>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002818:	e030      	b.n	800287c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fc4b 	bl	80030c0 <UART_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e03c      	b.n	80028b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284c:	b292      	uxth	r2, r2
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3302      	adds	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e008      	b.n	800286a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b292      	uxth	r2, r2
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3301      	adds	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1c8      	bne.n	800281a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2200      	movs	r2, #0
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fc14 	bl	80030c0 <UART_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e005      	b.n	80028b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b08a      	sub	sp, #40	; 0x28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	431a      	orrs	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4ba4      	ldr	r3, [pc, #656]	; (8002b7c <UART_SetConfig+0x2c0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a99      	ldr	r2, [pc, #612]	; (8002b80 <UART_SetConfig+0x2c4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	4313      	orrs	r3, r2
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a90      	ldr	r2, [pc, #576]	; (8002b84 <UART_SetConfig+0x2c8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d126      	bne.n	8002994 <UART_SetConfig+0xd8>
 8002946:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d81b      	bhi.n	800298c <UART_SetConfig+0xd0>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <UART_SetConfig+0xa0>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	0800296d 	.word	0x0800296d
 8002960:	0800297d 	.word	0x0800297d
 8002964:	08002975 	.word	0x08002975
 8002968:	08002985 	.word	0x08002985
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002972:	e116      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002974:	2302      	movs	r3, #2
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297a:	e112      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 800297c:	2304      	movs	r3, #4
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002982:	e10e      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002984:	2308      	movs	r3, #8
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e10a      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 800298c:	2310      	movs	r3, #16
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e106      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7c      	ldr	r2, [pc, #496]	; (8002b8c <UART_SetConfig+0x2d0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d138      	bne.n	8002a10 <UART_SetConfig+0x154>
 800299e:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <UART_SetConfig+0x2cc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d82d      	bhi.n	8002a08 <UART_SetConfig+0x14c>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <UART_SetConfig+0xf8>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	08002a09 	.word	0x08002a09
 80029bc:	08002a09 	.word	0x08002a09
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002a09 	.word	0x08002a09
 80029cc:	08002a09 	.word	0x08002a09
 80029d0:	08002a09 	.word	0x08002a09
 80029d4:	080029f1 	.word	0x080029f1
 80029d8:	08002a09 	.word	0x08002a09
 80029dc:	08002a09 	.word	0x08002a09
 80029e0:	08002a09 	.word	0x08002a09
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ee:	e0d8      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 80029f0:	2302      	movs	r3, #2
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f6:	e0d4      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 80029f8:	2304      	movs	r3, #4
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fe:	e0d0      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a00:	2308      	movs	r3, #8
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a06:	e0cc      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0e:	e0c8      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d125      	bne.n	8002a66 <UART_SetConfig+0x1aa>
 8002a1a:	4b5b      	ldr	r3, [pc, #364]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d016      	beq.n	8002a56 <UART_SetConfig+0x19a>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	d818      	bhi.n	8002a5e <UART_SetConfig+0x1a2>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d00a      	beq.n	8002a46 <UART_SetConfig+0x18a>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d814      	bhi.n	8002a5e <UART_SetConfig+0x1a2>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <UART_SetConfig+0x182>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d008      	beq.n	8002a4e <UART_SetConfig+0x192>
 8002a3c:	e00f      	b.n	8002a5e <UART_SetConfig+0x1a2>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a44:	e0ad      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a46:	2302      	movs	r3, #2
 8002a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4c:	e0a9      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a54:	e0a5      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a56:	2308      	movs	r3, #8
 8002a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5c:	e0a1      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a5e:	2310      	movs	r3, #16
 8002a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a64:	e09d      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <UART_SetConfig+0x2d8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d125      	bne.n	8002abc <UART_SetConfig+0x200>
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a7c:	d016      	beq.n	8002aac <UART_SetConfig+0x1f0>
 8002a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a80:	d818      	bhi.n	8002ab4 <UART_SetConfig+0x1f8>
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d00a      	beq.n	8002a9c <UART_SetConfig+0x1e0>
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d814      	bhi.n	8002ab4 <UART_SetConfig+0x1f8>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <UART_SetConfig+0x1d8>
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d008      	beq.n	8002aa4 <UART_SetConfig+0x1e8>
 8002a92:	e00f      	b.n	8002ab4 <UART_SetConfig+0x1f8>
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a9a:	e082      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa2:	e07e      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aaa:	e07a      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002aac:	2308      	movs	r3, #8
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab2:	e076      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aba:	e072      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <UART_SetConfig+0x2dc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12a      	bne.n	8002b1c <UART_SetConfig+0x260>
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad4:	d01a      	beq.n	8002b0c <UART_SetConfig+0x250>
 8002ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ada:	d81b      	bhi.n	8002b14 <UART_SetConfig+0x258>
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d00c      	beq.n	8002afc <UART_SetConfig+0x240>
 8002ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae6:	d815      	bhi.n	8002b14 <UART_SetConfig+0x258>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <UART_SetConfig+0x238>
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d008      	beq.n	8002b04 <UART_SetConfig+0x248>
 8002af2:	e00f      	b.n	8002b14 <UART_SetConfig+0x258>
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002afa:	e052      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b02:	e04e      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0a:	e04a      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b12:	e046      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b14:	2310      	movs	r3, #16
 8002b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1a:	e042      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <UART_SetConfig+0x2c4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d13a      	bne.n	8002b9c <UART_SetConfig+0x2e0>
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b34:	d01a      	beq.n	8002b6c <UART_SetConfig+0x2b0>
 8002b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b3a:	d81b      	bhi.n	8002b74 <UART_SetConfig+0x2b8>
 8002b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b40:	d00c      	beq.n	8002b5c <UART_SetConfig+0x2a0>
 8002b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b46:	d815      	bhi.n	8002b74 <UART_SetConfig+0x2b8>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <UART_SetConfig+0x298>
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b50:	d008      	beq.n	8002b64 <UART_SetConfig+0x2a8>
 8002b52:	e00f      	b.n	8002b74 <UART_SetConfig+0x2b8>
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5a:	e022      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b62:	e01e      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b64:	2304      	movs	r3, #4
 8002b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6a:	e01a      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b72:	e016      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b74:	2310      	movs	r3, #16
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7a:	e012      	b.n	8002ba2 <UART_SetConfig+0x2e6>
 8002b7c:	efff69f3 	.word	0xefff69f3
 8002b80:	40008000 	.word	0x40008000
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40004800 	.word	0x40004800
 8002b94:	40004c00 	.word	0x40004c00
 8002b98:	40005000 	.word	0x40005000
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a9f      	ldr	r2, [pc, #636]	; (8002e24 <UART_SetConfig+0x568>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d17a      	bne.n	8002ca2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d824      	bhi.n	8002bfe <UART_SetConfig+0x342>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0x300>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002bff 	.word	0x08002bff
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002bff 	.word	0x08002bff
 8002bcc:	08002bef 	.word	0x08002bef
 8002bd0:	08002bff 	.word	0x08002bff
 8002bd4:	08002bff 	.word	0x08002bff
 8002bd8:	08002bff 	.word	0x08002bff
 8002bdc:	08002bf7 	.word	0x08002bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff f84c 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002be4:	61f8      	str	r0, [r7, #28]
        break;
 8002be6:	e010      	b.n	8002c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be8:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <UART_SetConfig+0x56c>)
 8002bea:	61fb      	str	r3, [r7, #28]
        break;
 8002bec:	e00d      	b.n	8002c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bee:	f7fe ffad 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002bf2:	61f8      	str	r0, [r7, #28]
        break;
 8002bf4:	e009      	b.n	8002c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfa:	61fb      	str	r3, [r7, #28]
        break;
 8002bfc:	e005      	b.n	8002c0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80fb 	beq.w	8002e08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d305      	bcc.n	8002c2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d903      	bls.n	8002c36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c34:	e0e8      	b.n	8002e08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	4615      	mov	r5, r2
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	022b      	lsls	r3, r5, #8
 8002c48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c4c:	0222      	lsls	r2, r4, #8
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6849      	ldr	r1, [r1, #4]
 8002c52:	0849      	lsrs	r1, r1, #1
 8002c54:	2000      	movs	r0, #0
 8002c56:	4688      	mov	r8, r1
 8002c58:	4681      	mov	r9, r0
 8002c5a:	eb12 0a08 	adds.w	sl, r2, r8
 8002c5e:	eb43 0b09 	adc.w	fp, r3, r9
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c70:	4650      	mov	r0, sl
 8002c72:	4659      	mov	r1, fp
 8002c74:	f7fd faa8 	bl	80001c8 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c86:	d308      	bcc.n	8002c9a <UART_SetConfig+0x3de>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8e:	d204      	bcs.n	8002c9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e0b6      	b.n	8002e08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ca0:	e0b2      	b.n	8002e08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002caa:	d15e      	bne.n	8002d6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d828      	bhi.n	8002d06 <UART_SetConfig+0x44a>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x400>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7fe ffcc 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002ce4:	61f8      	str	r0, [r7, #28]
        break;
 8002ce6:	e014      	b.n	8002d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7fe ffde 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002cec:	61f8      	str	r0, [r7, #28]
        break;
 8002cee:	e010      	b.n	8002d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <UART_SetConfig+0x56c>)
 8002cf2:	61fb      	str	r3, [r7, #28]
        break;
 8002cf4:	e00d      	b.n	8002d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7fe ff29 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002cfa:	61f8      	str	r0, [r7, #28]
        break;
 8002cfc:	e009      	b.n	8002d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d02:	61fb      	str	r3, [r7, #28]
        break;
 8002d04:	e005      	b.n	8002d12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d077      	beq.n	8002e08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005a      	lsls	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	441a      	add	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d916      	bls.n	8002d62 <UART_SetConfig+0x4a6>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d212      	bcs.n	8002d62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	8afa      	ldrh	r2, [r7, #22]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	e052      	b.n	8002e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d68:	e04e      	b.n	8002e08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d827      	bhi.n	8002dc2 <UART_SetConfig+0x506>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0x4bc>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
 8002d98:	08002dbb 	.word	0x08002dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7fe ff6e 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002da0:	61f8      	str	r0, [r7, #28]
        break;
 8002da2:	e014      	b.n	8002dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da4:	f7fe ff80 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002da8:	61f8      	str	r0, [r7, #28]
        break;
 8002daa:	e010      	b.n	8002dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <UART_SetConfig+0x56c>)
 8002dae:	61fb      	str	r3, [r7, #28]
        break;
 8002db0:	e00d      	b.n	8002dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	f7fe fecb 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002db6:	61f8      	str	r0, [r7, #28]
        break;
 8002db8:	e009      	b.n	8002dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbe:	61fb      	str	r3, [r7, #28]
        break;
 8002dc0:	e005      	b.n	8002dce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d019      	beq.n	8002e08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	085a      	lsrs	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d909      	bls.n	8002e02 <UART_SetConfig+0x546>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d205      	bcs.n	8002e02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	e002      	b.n	8002e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40008000 	.word	0x40008000
 8002e28:	00f42400 	.word	0x00f42400

08002e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01a      	beq.n	8002f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2a:	d10a      	bne.n	8002f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b098      	sub	sp, #96	; 0x60
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f80:	f7fd fdb4 	bl	8000aec <HAL_GetTick>
 8002f84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d12e      	bne.n	8002ff2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f88c 	bl	80030c0 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e062      	b.n	80030b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d149      	bne.n	8003094 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f856 	bl	80030c0 <UART_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03c      	beq.n	8003094 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	623b      	str	r3, [r7, #32]
   return(result);
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
 800303a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800303e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e6      	bne.n	800301a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	60fb      	str	r3, [r7, #12]
   return(result);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306c:	61fa      	str	r2, [r7, #28]
 800306e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	617b      	str	r3, [r7, #20]
   return(result);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e011      	b.n	80030b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3758      	adds	r7, #88	; 0x58
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d0:	e049      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d045      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fd fd07 	bl	8000aec <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e048      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d031      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d110      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f838 	bl	800318e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2208      	movs	r2, #8
 8003122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e029      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003140:	d111      	bne.n	8003166 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f81e 	bl	800318e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d0a6      	beq.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318e:	b480      	push	{r7}
 8003190:	b095      	sub	sp, #84	; 0x54
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
 80031b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e6      	bne.n	8003196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3308      	adds	r3, #8
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	2b01      	cmp	r3, #1
 8003202:	d118      	bne.n	8003236 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	60bb      	str	r3, [r7, #8]
   return(result);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0310 	bic.w	r3, r3, #16
 8003218:	647b      	str	r3, [r7, #68]	; 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	613b      	str	r3, [r7, #16]
   return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e6      	bne.n	8003204 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	669a      	str	r2, [r3, #104]	; 0x68
}
 800324a:	bf00      	nop
 800324c:	3754      	adds	r7, #84	; 0x54
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <memset>:
 8003256:	4402      	add	r2, r0
 8003258:	4603      	mov	r3, r0
 800325a:	4293      	cmp	r3, r2
 800325c:	d100      	bne.n	8003260 <memset+0xa>
 800325e:	4770      	bx	lr
 8003260:	f803 1b01 	strb.w	r1, [r3], #1
 8003264:	e7f9      	b.n	800325a <memset+0x4>
	...

08003268 <__libc_init_array>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	4d0d      	ldr	r5, [pc, #52]	; (80032a0 <__libc_init_array+0x38>)
 800326c:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <__libc_init_array+0x3c>)
 800326e:	1b64      	subs	r4, r4, r5
 8003270:	10a4      	asrs	r4, r4, #2
 8003272:	2600      	movs	r6, #0
 8003274:	42a6      	cmp	r6, r4
 8003276:	d109      	bne.n	800328c <__libc_init_array+0x24>
 8003278:	4d0b      	ldr	r5, [pc, #44]	; (80032a8 <__libc_init_array+0x40>)
 800327a:	4c0c      	ldr	r4, [pc, #48]	; (80032ac <__libc_init_array+0x44>)
 800327c:	f000 f818 	bl	80032b0 <_init>
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	2600      	movs	r6, #0
 8003286:	42a6      	cmp	r6, r4
 8003288:	d105      	bne.n	8003296 <__libc_init_array+0x2e>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003290:	4798      	blx	r3
 8003292:	3601      	adds	r6, #1
 8003294:	e7ee      	b.n	8003274 <__libc_init_array+0xc>
 8003296:	f855 3b04 	ldr.w	r3, [r5], #4
 800329a:	4798      	blx	r3
 800329c:	3601      	adds	r6, #1
 800329e:	e7f2      	b.n	8003286 <__libc_init_array+0x1e>
 80032a0:	08003368 	.word	0x08003368
 80032a4:	08003368 	.word	0x08003368
 80032a8:	08003368 	.word	0x08003368
 80032ac:	0800336c 	.word	0x0800336c

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
