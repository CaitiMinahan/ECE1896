
Nucleo-L476RG_CAN_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b0  080040b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b8  080040b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080040cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080040cc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce4c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d69  00000000  00000000  0002cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081e  00000000  00000000  0002f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025425  00000000  00000000  0002fef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c369  00000000  00000000  0005531b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e668f  00000000  00000000  00061684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b00  00000000  00000000  00147d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014a814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004050 	.word	0x08004050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004050 	.word	0x08004050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailbox;

int datacheck = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d10b      	bne.n	80004ee <HAL_GPIO_EXTI_Callback+0x2a>
		TxData[0] = 100; // ms Delay
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004d8:	2264      	movs	r2, #100	; 0x64
 80004da:	701a      	strb	r2, [r3, #0]
		TxData[1] = 40;  // loop rep
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	705a      	strb	r2, [r3, #1]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_GPIO_EXTI_Callback+0x38>)
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004e6:	4906      	ldr	r1, [pc, #24]	; (8000500 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <HAL_GPIO_EXTI_Callback+0x40>)
 80004ea:	f000 fddc 	bl	80010a6 <HAL_CAN_AddTxMessage>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000010c 	.word	0x2000010c
 80004fc:	2000011c 	.word	0x2000011c
 8000500:	200000d8 	.word	0x200000d8
 8000504:	20000028 	.word	0x20000028

08000508 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000514:	2100      	movs	r1, #0
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fe95 	bl	8001246 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2){
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d102      	bne.n	800052a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		datacheck = 1;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
	}
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000114 	.word	0x20000114
 8000538:	200000f0 	.word	0x200000f0
 800053c:	20000120 	.word	0x20000120

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fb05 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f865 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f949 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f917 	bl	8000784 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000556:	f000 f8c1 	bl	80006dc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800055a:	4829      	ldr	r0, [pc, #164]	; (8000600 <main+0xc0>)
 800055c:	f000 fd5f 	bl	800101e <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000560:	2102      	movs	r1, #2
 8000562:	4827      	ldr	r0, [pc, #156]	; (8000600 <main+0xc0>)
 8000564:	f000 ff91 	bl	800148a <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <main+0xc4>)
 800056a:	2202      	movs	r2, #2
 800056c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <main+0xc4>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <main+0xc4>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <main+0xc4>)
 800057c:	f240 4246 	movw	r2, #1094	; 0x446
 8000580:	601a      	str	r2, [r3, #0]

  TxData[0] = 200; // ms Delay
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <main+0xc8>)
 8000584:	22c8      	movs	r2, #200	; 0xc8
 8000586:	701a      	strb	r2, [r3, #0]
  TxData[1] = 20;  // loop rep
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0xc8>)
 800058a:	2214      	movs	r2, #20
 800058c:	705a      	strb	r2, [r3, #1]

  // Initializing
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 fc89 	bl	8001eac <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 fb55 	bl	8000c4c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 fc7f 	bl	8001eac <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 fb4b 	bl	8000c4c <HAL_Delay>

	  if (datacheck){
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <main+0xcc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f7      	beq.n	80005ae <main+0x6e>
		  // blink the LED
		  for (int i = 0; i<RxData[1]; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	e00c      	b.n	80005de <main+0x9e>
//			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 fc87 	bl	8001edc <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xd0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fb3a 	bl	8000c4c <HAL_Delay>
		  for (int i = 0; i<RxData[1]; i++){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <main+0xd0>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	dbec      	blt.n	80005c4 <main+0x84>
//			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		  }

		  datacheck = 0;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <main+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]

		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <main+0xd4>)
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <main+0xc8>)
 80005f4:	4903      	ldr	r1, [pc, #12]	; (8000604 <main+0xc4>)
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <main+0xc0>)
 80005f8:	f000 fd55 	bl	80010a6 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 80005fc:	e7d7      	b.n	80005ae <main+0x6e>
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028
 8000604:	200000d8 	.word	0x200000d8
 8000608:	2000010c 	.word	0x2000010c
 800060c:	20000120 	.word	0x20000120
 8000610:	20000114 	.word	0x20000114
 8000614:	2000011c 	.word	0x2000011c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fce5 	bl	8003ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f001 fc9d 	bl	8001f7c <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f93a 	bl	80008c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064c:	f001 fc78 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemClock_Config+0xc0>)
 8000652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <SystemClock_Config+0xc0>)
 8000658:	f023 0318 	bic.w	r3, r3, #24
 800065c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000660:	2314      	movs	r3, #20
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000678:	2301      	movs	r3, #1
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000680:	2328      	movs	r3, #40	; 0x28
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fcc7 	bl	8002028 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f90e 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2303      	movs	r3, #3
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2104      	movs	r1, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f88f 	bl	80027e0 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c8:	f000 f8fa 	bl	80008c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006cc:	f002 fd96 	bl	80031fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d0:	bf00      	nop
 80006d2:	3758      	adds	r7, #88	; 0x58
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <MX_CAN1_Init+0xa0>)
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <MX_CAN1_Init+0xa4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_CAN1_Init+0xa0>)
 80006ea:	2220      	movs	r2, #32
 80006ec:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_CAN1_Init+0xa0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_CAN1_Init+0xa0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_CAN1_Init+0xa0>)
 80006fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000700:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_CAN1_Init+0xa0>)
 8000704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000708:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_CAN1_Init+0xa0>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_CAN1_Init+0xa0>)
 8000712:	2200      	movs	r2, #0
 8000714:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_CAN1_Init+0xa0>)
 8000718:	2200      	movs	r2, #0
 800071a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_CAN1_Init+0xa0>)
 800071e:	2200      	movs	r2, #0
 8000720:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_CAN1_Init+0xa0>)
 8000724:	2200      	movs	r2, #0
 8000726:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_CAN1_Init+0xa0>)
 800072a:	2200      	movs	r2, #0
 800072c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800072e:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_CAN1_Init+0xa0>)
 8000730:	f000 fab0 	bl	8000c94 <HAL_CAN_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800073a:	f000 f8c1 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000742:	2312      	movs	r3, #18
 8000744:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU
 800074a:	f242 0360 	movw	r3, #8288	; 0x2060
 800074e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8000754:	f242 0360 	movw	r3, #8288	; 0x2060
 8000758:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000766:	2314      	movs	r3, #20
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_CAN1_Init+0xa0>)
 8000770:	f000 fb8b 	bl	8000e8a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000028 	.word	0x20000028
 8000780:	40006400 	.word	0x40006400

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	f002 fefa 	bl	80035c0 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f875 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000050 	.word	0x20000050
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <MX_GPIO_Init+0xd4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f001 fb23 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <MX_GPIO_Init+0xd8>)
 800087e:	f001 f96b 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 f95c 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f001 f920 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f001 f939 	bl	8001b22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <HAL_CAN_MspInit+0x90>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d131      	bne.n	800099a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 800093c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000978:	2309      	movs	r3, #9
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f001 f8e7 	bl	8001b58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2014      	movs	r0, #20
 8000990:	f001 f8ab 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000994:	2014      	movs	r0, #20
 8000996:	f001 f8c4 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40006400 	.word	0x40006400
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ac      	sub	sp, #176	; 0xb0
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2288      	movs	r2, #136	; 0x88
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fb12 	bl	8003ff6 <memset>
  if(huart->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_UART_MspInit+0xb0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13b      	bne.n	8000a54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 f91d 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f4:	f7ff ff64 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a40:	2307      	movs	r3, #7
 8000a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f001 f882 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	37b0      	adds	r7, #176	; 0xb0
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f8ac 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <CAN1_RX0_IRQHandler+0x10>)
 8000abe:	f000 fd0a 	bl	80014d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000028 	.word	0x20000028

08000acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f001 fa1c 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f003 fa6b 	bl	8004008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fd05 	bl	8000540 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	20000128 	.word	0x20000128

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_Init+0x3c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_Init+0x3c>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 ffb2 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f80f 	bl	8000b94 <HAL_InitTick>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e001      	b.n	8000b86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b82:	f7ff fea3 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_InitTick+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 ffbd 	bl	8001b3e <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10f      	bne.n	8000bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d809      	bhi.n	8000be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 ff87 	bl	8001aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_InitTick+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000124 	.word	0x20000124

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000124 	.word	0x20000124

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e0ed      	b.n	8000e82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fe2e 	bl	8000914 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc8:	f7ff ffb4 	bl	8000c34 <HAL_GetTick>
 8000ccc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cce:	e012      	b.n	8000cf6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd0:	f7ff ffb0 	bl	8000c34 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b0a      	cmp	r3, #10
 8000cdc:	d90b      	bls.n	8000cf6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2205      	movs	r2, #5
 8000cee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0c5      	b.n	8000e82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0e5      	beq.n	8000cd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0202 	bic.w	r2, r2, #2
 8000d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d14:	f7ff ff8e 	bl	8000c34 <HAL_GetTick>
 8000d18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	e012      	b.n	8000d42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d1c:	f7ff ff8a 	bl	8000c34 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d90b      	bls.n	8000d42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2205      	movs	r2, #5
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e09f      	b.n	8000e82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e5      	bne.n	8000d1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7e1b      	ldrb	r3, [r3, #24]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d108      	bne.n	8000d6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e007      	b.n	8000d7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7e5b      	ldrb	r3, [r3, #25]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d108      	bne.n	8000d94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e007      	b.n	8000da4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7e9b      	ldrb	r3, [r3, #26]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d108      	bne.n	8000dbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e007      	b.n	8000dce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0220 	bic.w	r2, r2, #32
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7edb      	ldrb	r3, [r3, #27]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d108      	bne.n	8000de8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0210 	bic.w	r2, r2, #16
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e007      	b.n	8000df8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0210 	orr.w	r2, r2, #16
 8000df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7f1b      	ldrb	r3, [r3, #28]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d108      	bne.n	8000e12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0208 	orr.w	r2, r2, #8
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e007      	b.n	8000e22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0208 	bic.w	r2, r2, #8
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7f5b      	ldrb	r3, [r3, #29]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d108      	bne.n	8000e3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f042 0204 	orr.w	r2, r2, #4
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0204 	bic.w	r2, r2, #4
 8000e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	ea42 0103 	orr.w	r1, r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b087      	sub	sp, #28
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d003      	beq.n	8000eb0 <HAL_CAN_ConfigFilter+0x26>
 8000ea8:	7cfb      	ldrb	r3, [r7, #19]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	f040 80aa 	bne.w	8001004 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	2201      	movs	r2, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d123      	bne.n	8000f32 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3248      	adds	r2, #72	; 0x48
 8000f12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f28:	6979      	ldr	r1, [r7, #20]
 8000f2a:	3348      	adds	r3, #72	; 0x48
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d122      	bne.n	8000f80 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3248      	adds	r2, #72	; 0x48
 8000f60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	3348      	adds	r3, #72	; 0x48
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d109      	bne.n	8000f9c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f9a:	e007      	b.n	8000fac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fc6:	e007      	b.n	8000fd8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff6:	f023 0201 	bic.w	r2, r3, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e006      	b.n	8001012 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
  }
}
 8001012:	4618      	mov	r0, r3
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d12e      	bne.n	8001090 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2202      	movs	r2, #2
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800104a:	f7ff fdf3 	bl	8000c34 <HAL_GetTick>
 800104e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001050:	e012      	b.n	8001078 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001052:	f7ff fdef 	bl	8000c34 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d90b      	bls.n	8001078 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2205      	movs	r2, #5
 8001070:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e012      	b.n	800109e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e5      	bne.n	8001052 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e006      	b.n	800109e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
  }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b089      	sub	sp, #36	; 0x24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c4:	7ffb      	ldrb	r3, [r7, #31]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d003      	beq.n	80010d2 <HAL_CAN_AddTxMessage+0x2c>
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	f040 80ad 	bne.w	800122c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10a      	bne.n	80010f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8095 	beq.w	800121c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	0e1b      	lsrs	r3, r3, #24
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010fc:	2201      	movs	r2, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	409a      	lsls	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10d      	bne.n	800112a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	6809      	ldr	r1, [r1, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3318      	adds	r3, #24
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e00f      	b.n	800114a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001134:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800113e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	440b      	add	r3, r1
 8001148:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3318      	adds	r3, #24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	440b      	add	r3, r1
 800115a:	3304      	adds	r3, #4
 800115c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	7d1b      	ldrb	r3, [r3, #20]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d111      	bne.n	800118a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3318      	adds	r3, #24
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	3304      	adds	r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3318      	adds	r3, #24
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	3304      	adds	r3, #4
 8001188:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3307      	adds	r3, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	061a      	lsls	r2, r3, #24
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3305      	adds	r3, #5
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4313      	orrs	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	3204      	adds	r2, #4
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	6811      	ldr	r1, [r2, #0]
 80011b2:	ea43 0200 	orr.w	r2, r3, r0
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3303      	adds	r3, #3
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	061a      	lsls	r2, r3, #24
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3302      	adds	r3, #2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	4313      	orrs	r3, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	4610      	mov	r0, r2
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	6811      	ldr	r1, [r2, #0]
 80011e8:	ea43 0200 	orr.w	r2, r3, r0
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3318      	adds	r3, #24
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3318      	adds	r3, #24
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	440b      	add	r3, r1
 8001216:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	e00e      	b.n	800123a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e006      	b.n	800123a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
  }
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d003      	beq.n	800126a <HAL_CAN_GetRxMessage+0x24>
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 8103 	bne.w	8001470 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10e      	bne.n	800128e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0f7      	b.n	800147e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0e8      	b.n	800147e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	331b      	adds	r3, #27
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0204 	and.w	r2, r3, #4
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	331b      	adds	r3, #27
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0d5b      	lsrs	r3, r3, #21
 80012da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	331b      	adds	r3, #27
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	331b      	adds	r3, #27
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0202 	and.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	331b      	adds	r3, #27
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2208      	movs	r2, #8
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	e00b      	b.n	800134a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	331b      	adds	r3, #27
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 020f 	and.w	r2, r3, #15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	331b      	adds	r3, #27
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b2da      	uxtb	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	331b      	adds	r3, #27
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	0c1b      	lsrs	r3, r3, #16
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0a1a      	lsrs	r2, r3, #8
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0c1a      	lsrs	r2, r3, #16
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3302      	adds	r3, #2
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0e1a      	lsrs	r2, r3, #24
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3303      	adds	r3, #3
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0a1a      	lsrs	r2, r3, #8
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3305      	adds	r3, #5
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0c1a      	lsrs	r2, r3, #16
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3306      	adds	r3, #6
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0e1a      	lsrs	r2, r3, #24
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3307      	adds	r3, #7
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	e007      	b.n	800146c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0220 	orr.w	r2, r2, #32
 800146a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e006      	b.n	800147e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d002      	beq.n	80014a8 <HAL_CAN_ActivateNotification+0x1e>
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d109      	bne.n	80014bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6959      	ldr	r1, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e006      	b.n	80014ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b08a      	sub	sp, #40	; 0x28
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d07c      	beq.n	8001616 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d023      	beq.n	800156e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f983 	bl	8001844 <HAL_CAN_TxMailbox0CompleteCallback>
 800153e:	e016      	b.n	800156e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	e00c      	b.n	800156e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	e002      	b.n	800156e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f989 	bl	8001880 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d024      	beq.n	80015c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001580:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f963 	bl	8001858 <HAL_CAN_TxMailbox1CompleteCallback>
 8001592:	e016      	b.n	80015c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	e00c      	b.n	80015c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	e002      	b.n	80015c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f969 	bl	8001894 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d024      	beq.n	8001616 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f943 	bl	800186c <HAL_CAN_TxMailbox2CompleteCallback>
 80015e6:	e016      	b.n	8001616 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	e00c      	b.n	8001616 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	e002      	b.n	8001616 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f949 	bl	80018a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001630:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2210      	movs	r2, #16
 8001638:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2208      	movs	r2, #8
 8001654:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f930 	bl	80018bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe ff47 	bl	8000508 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001694:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2210      	movs	r2, #16
 800169c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2208      	movs	r2, #8
 80016b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f912 	bl	80018e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8f9 	bl	80018d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8fc 	bl	80018f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2208      	movs	r2, #8
 800171a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8f5 	bl	800190c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d07b      	beq.n	8001824 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d072      	beq.n	800181c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	2b00      	cmp	r3, #0
 8001792:	d043      	beq.n	800181c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d03e      	beq.n	800181c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017a4:	2b60      	cmp	r3, #96	; 0x60
 80017a6:	d02b      	beq.n	8001800 <HAL_CAN_IRQHandler+0x32a>
 80017a8:	2b60      	cmp	r3, #96	; 0x60
 80017aa:	d82e      	bhi.n	800180a <HAL_CAN_IRQHandler+0x334>
 80017ac:	2b50      	cmp	r3, #80	; 0x50
 80017ae:	d022      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x320>
 80017b0:	2b50      	cmp	r3, #80	; 0x50
 80017b2:	d82a      	bhi.n	800180a <HAL_CAN_IRQHandler+0x334>
 80017b4:	2b40      	cmp	r3, #64	; 0x40
 80017b6:	d019      	beq.n	80017ec <HAL_CAN_IRQHandler+0x316>
 80017b8:	2b40      	cmp	r3, #64	; 0x40
 80017ba:	d826      	bhi.n	800180a <HAL_CAN_IRQHandler+0x334>
 80017bc:	2b30      	cmp	r3, #48	; 0x30
 80017be:	d010      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x30c>
 80017c0:	2b30      	cmp	r3, #48	; 0x30
 80017c2:	d822      	bhi.n	800180a <HAL_CAN_IRQHandler+0x334>
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d002      	beq.n	80017ce <HAL_CAN_IRQHandler+0x2f8>
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d005      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017cc:	e01d      	b.n	800180a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d6:	e019      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e0:	e014      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017ea:	e00f      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f4:	e00a      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fe:	e005      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001808:	e000      	b.n	800180c <HAL_CAN_IRQHandler+0x336>
            break;
 800180a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800181a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2204      	movs	r2, #4
 8001822:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f872 	bl	8001920 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff29 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff3e 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff31 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e17f      	b.n	8001e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8171 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d005      	beq.n	8001b98 <HAL_GPIO_Init+0x40>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d130      	bne.n	8001bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 0201 	and.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d118      	bne.n	8001c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	6939      	ldr	r1, [r7, #16]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ac 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x242>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dac:	4937      	ldr	r1, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f47f ae78 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	48001800 	.word	0x48001800
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43d9      	mvns	r1, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	400b      	ands	r3, r1
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fac8 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40007000 	.word	0x40007000

08001f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8a:	d130      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f98:	d038      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2232      	movs	r2, #50	; 0x32
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc0:	e002      	b.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd4:	d102      	bne.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f2      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe8:	d110      	bne.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e00f      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d007      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000
 8002020:	20000000 	.word	0x20000000
 8002024:	431bde83 	.word	0x431bde83

08002028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e3ca      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b97      	ldr	r3, [pc, #604]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e4 	beq.w	8002224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_RCC_OscConfig+0x4a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	f040 808b 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 8087 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x62>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e3a2      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	4b82      	ldr	r3, [pc, #520]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_RCC_OscConfig+0x7c>
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_OscConfig+0x88>
 80020a4:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d223      	bcs.n	80020fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fd55 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e383      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	496d      	ldr	r1, [pc, #436]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4968      	ldr	r1, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e025      	b.n	8002148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4960      	ldr	r1, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	495b      	ldr	r1, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fd15 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e343      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002148:	f000 fc4a 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4950      	ldr	r1, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a4e      	ldr	r2, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002168:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd11 	bl	8000b94 <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d052      	beq.n	8002222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	e327      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d032      	beq.n	80021ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a42      	ldr	r2, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002194:	f7fe fd4e 	bl	8000c34 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219c:	f7fe fd4a 	bl	8000c34 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e310      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ae:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a36      	ldr	r2, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4931      	ldr	r1, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	492c      	ldr	r1, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e01a      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a29      	ldr	r2, [pc, #164]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fd1b 	bl	8000c34 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7fe fd17 	bl	8000c34 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2dd      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x1da>
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d074      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x21a>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d10e      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d064      	beq.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d160      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2ba      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x24a>
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_OscConfig+0x280>
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	08004068 	.word	0x08004068
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	4ba0      	ldr	r3, [pc, #640]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a9f      	ldr	r2, [pc, #636]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b9d      	ldr	r3, [pc, #628]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a9c      	ldr	r2, [pc, #624]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fcb4 	bl	8000c34 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fcb0 	bl	8000c34 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e276      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fca0 	bl	8000c34 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fc9c 	bl	8000c34 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e262      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x310>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d119      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e23f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4973      	ldr	r1, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e040      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fc5b 	bl	8000c34 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fc57 	bl	8000c34 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e21d      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	495f      	ldr	r1, [pc, #380]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e018      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fc37 	bl	8000c34 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe fc33 	bl	8000c34 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1f9      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fc12 	bl	8000c34 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fc0e 	bl	8000c34 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1d4      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x3ec>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fbf5 	bl	8000c34 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe fbf1 	bl	8000c34 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1b7      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7fe fbb8 	bl	8000c34 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fbb4 	bl	8000c34 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e17a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fe:	e029      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d115      	bne.n	8002534 <HAL_RCC_OscConfig+0x50c>
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	4b9c      	ldr	r3, [pc, #624]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a9b      	ldr	r2, [pc, #620]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002544:	4b98      	ldr	r3, [pc, #608]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a97      	ldr	r2, [pc, #604]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fb6a 	bl	8000c34 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fb66 	bl	8000c34 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e12a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b8b      	ldr	r3, [pc, #556]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ed      	beq.n	8002564 <HAL_RCC_OscConfig+0x53c>
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fb53 	bl	8000c34 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fb4f 	bl	8000c34 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e113      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b7f      	ldr	r3, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ed      	bne.n	8002592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b7a      	ldr	r3, [pc, #488]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a79      	ldr	r2, [pc, #484]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80fe 	beq.w	80027ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80d0 	bne.w	800277c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d130      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d127      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11f      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261c:	2a07      	cmp	r2, #7
 800261e:	bf14      	ite	ne
 8002620:	2201      	movne	r2, #1
 8002622:	2200      	moveq	r2, #0
 8002624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d06e      	beq.n	8002730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d069      	beq.n	800272c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ad      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4b      	ldr	r2, [pc, #300]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7fe fad8 	bl	8000c34 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fad4 	bl	8000c34 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e09a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c0:	0212      	lsls	r2, r2, #8
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0552      	lsls	r2, r2, #21
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0652      	lsls	r2, r2, #25
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e0:	0912      	lsrs	r2, r2, #4
 80026e2:	0452      	lsls	r2, r2, #17
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4930      	ldr	r1, [pc, #192]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002704:	f7fe fa96 	bl	8000c34 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fa92 	bl	8000c34 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e058      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272a:	e050      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d148      	bne.n	80027ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002754:	f7fe fa6e 	bl	8000c34 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fa6a 	bl	8000c34 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e030      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x734>
 800277a:	e028      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fa51 	bl	8000c34 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e00c      	b.n	80027b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe fa4d 	bl	8000c34 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d905      	bls.n	80027b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ec      	bne.n	8002796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4905      	ldr	r1, [pc, #20]	; (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x7b4>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e001      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	feeefffc 	.word	0xfeeefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0e7      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d910      	bls.n	8002824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b72      	ldr	r3, [pc, #456]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4970      	ldr	r1, [pc, #448]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cf      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	429a      	cmp	r2, r3
 800283e:	d908      	bls.n	8002852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4960      	ldr	r1, [pc, #384]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04c      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0a6      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e09a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e08e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e086      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4943      	ldr	r1, [pc, #268]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe f9b4 	bl	8000c34 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe f9b0 	bl	8000c34 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e06e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	429a      	cmp	r2, r3
 8002912:	d208      	bcs.n	8002926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	492b      	ldr	r1, [pc, #172]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d210      	bcs.n	8002956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 0207 	bic.w	r2, r3, #7
 800293c:	4923      	ldr	r1, [pc, #140]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e036      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4918      	ldr	r1, [pc, #96]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4910      	ldr	r1, [pc, #64]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002994:	f000 f824 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	490b      	ldr	r1, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1fc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe f8eb 	bl	8000b94 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08004068 	.word	0x08004068
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ee:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d121      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d11e      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a14:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a3c:	4a2b      	ldr	r2, [pc, #172]	; (8002aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e004      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d134      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d003      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xac>
 8002a84:	e005      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a8e:	617b      	str	r3, [r7, #20]
      break;
 8002a90:	e002      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	617b      	str	r3, [r7, #20]
      break;
 8002a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	fb03 f202 	mul.w	r2, r3, r2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0e5b      	lsrs	r3, r3, #25
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08004080 	.word	0x08004080
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08004078 	.word	0x08004078

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b40:	f7ff ffda 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0adb      	lsrs	r3, r3, #11
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08004078 	.word	0x08004078

08002b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b80:	f7ff f9ee 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002b84:	6178      	str	r0, [r7, #20]
 8002b86:	e014      	b.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba0:	f7ff f9de 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d10b      	bne.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d919      	bls.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bc4:	d902      	bls.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e013      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bcc:	2301      	movs	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	e010      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d902      	bls.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bd8:	2303      	movs	r3, #3
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e00a      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d102      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be4:	2302      	movs	r3, #2
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e004      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d101      	bne.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 0207 	bic.w	r2, r3, #7
 8002bfc:	4909      	ldr	r1, [pc, #36]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40022000 	.word	0x40022000

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c30:	2300      	movs	r3, #0
 8002c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c34:	2300      	movs	r3, #0
 8002c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d041      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c4c:	d02a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c52:	d824      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c58:	d008      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c5e:	d81e      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d010      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c6a:	e018      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c6c:	4b86      	ldr	r3, [pc, #536]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a85      	ldr	r2, [pc, #532]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c78:	e015      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 facb 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3320      	adds	r3, #32
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fbb6 	bl	8003404 <RCCEx_PLLSAI2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e003      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cac:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cba:	4973      	ldr	r1, [pc, #460]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cc2:	e001      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d041      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cdc:	d02a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce2:	d824      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d81e      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cfa:	e018      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cfc:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a61      	ldr	r2, [pc, #388]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d08:	e015      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fa83 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d1a:	e00c      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3320      	adds	r3, #32
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fb6e 	bl	8003404 <RCCEx_PLLSAI2_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2c:	e003      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	74fb      	strb	r3, [r7, #19]
      break;
 8002d32:	e000      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4a:	494f      	ldr	r1, [pc, #316]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a0 	beq.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da8:	f7fd ff44 	bl	8000c34 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dae:	e009      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db0:	f7fd ff40 	bl	8000c34 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ef      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d15c      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01f      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d019      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fd feff 	bl	8000c34 <HAL_GetTick>
 8002e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e38:	e00b      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fefb 	bl	8000c34 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d902      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e50:	e006      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ec      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	4904      	ldr	r1, [pc, #16]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e7e:	e009      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
 8002e84:	e006      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e94:	7c7b      	ldrb	r3, [r7, #17]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b9e      	ldr	r3, [pc, #632]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	4a9d      	ldr	r2, [pc, #628]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb2:	4b98      	ldr	r3, [pc, #608]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f023 0203 	bic.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	4994      	ldr	r1, [pc, #592]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f023 020c 	bic.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	498c      	ldr	r1, [pc, #560]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef6:	4b87      	ldr	r3, [pc, #540]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4983      	ldr	r1, [pc, #524]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f18:	4b7e      	ldr	r3, [pc, #504]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	497b      	ldr	r1, [pc, #492]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f3a:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	4972      	ldr	r1, [pc, #456]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f5c:	4b6d      	ldr	r3, [pc, #436]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	496a      	ldr	r1, [pc, #424]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f7e:	4b65      	ldr	r3, [pc, #404]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	4961      	ldr	r1, [pc, #388]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fa0:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	4959      	ldr	r1, [pc, #356]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc2:	4b54      	ldr	r3, [pc, #336]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd0:	4950      	ldr	r1, [pc, #320]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	4948      	ldr	r1, [pc, #288]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	493f      	ldr	r1, [pc, #252]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d028      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003036:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003046:	d106      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a31      	ldr	r2, [pc, #196]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
 8003054:	e011      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305e:	d10c      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f8d8 	bl	800321c <RCCEx_PLLSAI1_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d028      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	491f      	ldr	r1, [pc, #124]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b0:	60d3      	str	r3, [r2, #12]
 80030b2:	e011      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f8a9 	bl	800321c <RCCEx_PLLSAI1_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	4908      	ldr	r1, [pc, #32]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003102:	d109      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a02      	ldr	r2, [pc, #8]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800310e:	60d3      	str	r3, [r2, #12]
 8003110:	e014      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f877 	bl	800321c <RCCEx_PLLSAI1_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02f      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003156:	4928      	ldr	r1, [pc, #160]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003166:	d10d      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	2102      	movs	r1, #2
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f854 	bl	800321c <RCCEx_PLLSAI1_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d014      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	74bb      	strb	r3, [r7, #18]
 8003182:	e011      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3320      	adds	r3, #32
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f935 	bl	8003404 <RCCEx_PLLSAI2_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c2:	490d      	ldr	r1, [pc, #52]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322a:	4b75      	ldr	r3, [pc, #468]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003236:	4b72      	ldr	r3, [pc, #456]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
       ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800324e:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
       ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d047      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	e044      	b.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d018      	beq.n	80032a2 <RCCEx_PLLSAI1_Config+0x86>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d825      	bhi.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d002      	beq.n	800327e <RCCEx_PLLSAI1_Config+0x62>
 8003278:	2b02      	cmp	r3, #2
 800327a:	d009      	beq.n	8003290 <RCCEx_PLLSAI1_Config+0x74>
 800327c:	e020      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800327e:	4b60      	ldr	r3, [pc, #384]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328e:	e01a      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003290:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a0:	e013      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ae:	4b54      	ldr	r3, [pc, #336]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032be:	e006      	b.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e004      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	430b      	orrs	r3, r1
 80032ec:	4944      	ldr	r1, [pc, #272]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d17d      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a40      	ldr	r2, [pc, #256]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fd fc96 	bl	8000c34 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800330a:	e009      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330c:	f7fd fc92 	bl	8000c34 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d902      	bls.n	8003320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	73fb      	strb	r3, [r7, #15]
        break;
 800331e:	e005      	b.n	800332c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003320:	4b37      	ldr	r3, [pc, #220]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ef      	bne.n	800330c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d160      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d111      	bne.n	800335c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	0211      	lsls	r1, r2, #8
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	0912      	lsrs	r2, r2, #4
 8003350:	0452      	lsls	r2, r2, #17
 8003352:	430a      	orrs	r2, r1
 8003354:	492a      	ldr	r1, [pc, #168]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
 800335a:	e027      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d112      	bne.n	8003388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003362:	4b27      	ldr	r3, [pc, #156]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800336a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	0211      	lsls	r1, r2, #8
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6912      	ldr	r2, [r2, #16]
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0552      	lsls	r2, r2, #21
 800337e:	430a      	orrs	r2, r1
 8003380:	491f      	ldr	r1, [pc, #124]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	610b      	str	r3, [r1, #16]
 8003386:	e011      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6892      	ldr	r2, [r2, #8]
 8003398:	0211      	lsls	r1, r2, #8
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6952      	ldr	r2, [r2, #20]
 800339e:	0852      	lsrs	r2, r2, #1
 80033a0:	3a01      	subs	r2, #1
 80033a2:	0652      	lsls	r2, r2, #25
 80033a4:	430a      	orrs	r2, r1
 80033a6:	4916      	ldr	r1, [pc, #88]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fc3c 	bl	8000c34 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033be:	e009      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033c0:	f7fd fc38 	bl	8000c34 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d902      	bls.n	80033d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
          break;
 80033d2:	e005      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	4904      	ldr	r1, [pc, #16]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000

08003404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003412:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0203 	and.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
       ||
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
       ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d047      	beq.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e044      	b.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d018      	beq.n	800348a <RCCEx_PLLSAI2_Config+0x86>
 8003458:	2b03      	cmp	r3, #3
 800345a:	d825      	bhi.n	80034a8 <RCCEx_PLLSAI2_Config+0xa4>
 800345c:	2b01      	cmp	r3, #1
 800345e:	d002      	beq.n	8003466 <RCCEx_PLLSAI2_Config+0x62>
 8003460:	2b02      	cmp	r3, #2
 8003462:	d009      	beq.n	8003478 <RCCEx_PLLSAI2_Config+0x74>
 8003464:	e020      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003466:	4b55      	ldr	r3, [pc, #340]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003476:	e01a      	b.n	80034ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e013      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034a6:	e006      	b.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	e004      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034be:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	430b      	orrs	r3, r1
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d167      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a35      	ldr	r2, [pc, #212]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fd fba2 	bl	8000c34 <HAL_GetTick>
 80034f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f2:	e009      	b.n	8003508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f4:	f7fd fb9e 	bl	8000c34 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	73fb      	strb	r3, [r7, #15]
        break;
 8003506:	e005      	b.n	8003514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ef      	bne.n	80034f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d14a      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	0211      	lsls	r1, r2, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	0912      	lsrs	r2, r2, #4
 8003538:	0452      	lsls	r2, r2, #17
 800353a:	430a      	orrs	r2, r1
 800353c:	491f      	ldr	r1, [pc, #124]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	614b      	str	r3, [r1, #20]
 8003542:	e011      	b.n	8003568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800354c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	0211      	lsls	r1, r2, #8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6912      	ldr	r2, [r2, #16]
 800355a:	0852      	lsrs	r2, r2, #1
 800355c:	3a01      	subs	r2, #1
 800355e:	0652      	lsls	r2, r2, #25
 8003560:	430a      	orrs	r2, r1
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	4313      	orrs	r3, r2
 8003566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fb5e 	bl	8000c34 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800357c:	f7fd fb5a 	bl	8000c34 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
          break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd f9e2 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fae0 	bl	8003bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f825 	bl	800365c <UART_SetConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e01b      	b.n	8003654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb5f 	bl	8003d10 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4313      	orrs	r3, r2
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4ba4      	ldr	r3, [pc, #656]	; (800391c <UART_SetConfig+0x2c0>)
 800368c:	4013      	ands	r3, r2
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003694:	430b      	orrs	r3, r1
 8003696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a99      	ldr	r2, [pc, #612]	; (8003920 <UART_SetConfig+0x2c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	4313      	orrs	r3, r2
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a90      	ldr	r2, [pc, #576]	; (8003924 <UART_SetConfig+0x2c8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d126      	bne.n	8003734 <UART_SetConfig+0xd8>
 80036e6:	4b90      	ldr	r3, [pc, #576]	; (8003928 <UART_SetConfig+0x2cc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d81b      	bhi.n	800372c <UART_SetConfig+0xd0>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0xa0>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371d 	.word	0x0800371d
 8003704:	08003715 	.word	0x08003715
 8003708:	08003725 	.word	0x08003725
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e116      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003714:	2302      	movs	r3, #2
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e112      	b.n	8003942 <UART_SetConfig+0x2e6>
 800371c:	2304      	movs	r3, #4
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e10e      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003724:	2308      	movs	r3, #8
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e10a      	b.n	8003942 <UART_SetConfig+0x2e6>
 800372c:	2310      	movs	r3, #16
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e106      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7c      	ldr	r2, [pc, #496]	; (800392c <UART_SetConfig+0x2d0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d138      	bne.n	80037b0 <UART_SetConfig+0x154>
 800373e:	4b7a      	ldr	r3, [pc, #488]	; (8003928 <UART_SetConfig+0x2cc>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d82d      	bhi.n	80037a8 <UART_SetConfig+0x14c>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0xf8>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003789 	.word	0x08003789
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080037a9 	.word	0x080037a9
 8003760:	080037a9 	.word	0x080037a9
 8003764:	08003799 	.word	0x08003799
 8003768:	080037a9 	.word	0x080037a9
 800376c:	080037a9 	.word	0x080037a9
 8003770:	080037a9 	.word	0x080037a9
 8003774:	08003791 	.word	0x08003791
 8003778:	080037a9 	.word	0x080037a9
 800377c:	080037a9 	.word	0x080037a9
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037a1 	.word	0x080037a1
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e0d8      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003790:	2302      	movs	r3, #2
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e0d4      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003798:	2304      	movs	r3, #4
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e0d0      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037a0:	2308      	movs	r3, #8
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e0cc      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037a8:	2310      	movs	r3, #16
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e0c8      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <UART_SetConfig+0x2d4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d125      	bne.n	8003806 <UART_SetConfig+0x1aa>
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <UART_SetConfig+0x2cc>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037c4:	2b30      	cmp	r3, #48	; 0x30
 80037c6:	d016      	beq.n	80037f6 <UART_SetConfig+0x19a>
 80037c8:	2b30      	cmp	r3, #48	; 0x30
 80037ca:	d818      	bhi.n	80037fe <UART_SetConfig+0x1a2>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d00a      	beq.n	80037e6 <UART_SetConfig+0x18a>
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d814      	bhi.n	80037fe <UART_SetConfig+0x1a2>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <UART_SetConfig+0x182>
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d008      	beq.n	80037ee <UART_SetConfig+0x192>
 80037dc:	e00f      	b.n	80037fe <UART_SetConfig+0x1a2>
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e4:	e0ad      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037e6:	2302      	movs	r3, #2
 80037e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ec:	e0a9      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037ee:	2304      	movs	r3, #4
 80037f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f4:	e0a5      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037f6:	2308      	movs	r3, #8
 80037f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fc:	e0a1      	b.n	8003942 <UART_SetConfig+0x2e6>
 80037fe:	2310      	movs	r3, #16
 8003800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003804:	e09d      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <UART_SetConfig+0x2d8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d125      	bne.n	800385c <UART_SetConfig+0x200>
 8003810:	4b45      	ldr	r3, [pc, #276]	; (8003928 <UART_SetConfig+0x2cc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800381a:	2bc0      	cmp	r3, #192	; 0xc0
 800381c:	d016      	beq.n	800384c <UART_SetConfig+0x1f0>
 800381e:	2bc0      	cmp	r3, #192	; 0xc0
 8003820:	d818      	bhi.n	8003854 <UART_SetConfig+0x1f8>
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d00a      	beq.n	800383c <UART_SetConfig+0x1e0>
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d814      	bhi.n	8003854 <UART_SetConfig+0x1f8>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <UART_SetConfig+0x1d8>
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d008      	beq.n	8003844 <UART_SetConfig+0x1e8>
 8003832:	e00f      	b.n	8003854 <UART_SetConfig+0x1f8>
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e082      	b.n	8003942 <UART_SetConfig+0x2e6>
 800383c:	2302      	movs	r3, #2
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e07e      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003844:	2304      	movs	r3, #4
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e07a      	b.n	8003942 <UART_SetConfig+0x2e6>
 800384c:	2308      	movs	r3, #8
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e076      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003854:	2310      	movs	r3, #16
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e072      	b.n	8003942 <UART_SetConfig+0x2e6>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a35      	ldr	r2, [pc, #212]	; (8003938 <UART_SetConfig+0x2dc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d12a      	bne.n	80038bc <UART_SetConfig+0x260>
 8003866:	4b30      	ldr	r3, [pc, #192]	; (8003928 <UART_SetConfig+0x2cc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003874:	d01a      	beq.n	80038ac <UART_SetConfig+0x250>
 8003876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800387a:	d81b      	bhi.n	80038b4 <UART_SetConfig+0x258>
 800387c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003880:	d00c      	beq.n	800389c <UART_SetConfig+0x240>
 8003882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003886:	d815      	bhi.n	80038b4 <UART_SetConfig+0x258>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <UART_SetConfig+0x238>
 800388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003890:	d008      	beq.n	80038a4 <UART_SetConfig+0x248>
 8003892:	e00f      	b.n	80038b4 <UART_SetConfig+0x258>
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e052      	b.n	8003942 <UART_SetConfig+0x2e6>
 800389c:	2302      	movs	r3, #2
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e04e      	b.n	8003942 <UART_SetConfig+0x2e6>
 80038a4:	2304      	movs	r3, #4
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e04a      	b.n	8003942 <UART_SetConfig+0x2e6>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b2:	e046      	b.n	8003942 <UART_SetConfig+0x2e6>
 80038b4:	2310      	movs	r3, #16
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ba:	e042      	b.n	8003942 <UART_SetConfig+0x2e6>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <UART_SetConfig+0x2c4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d13a      	bne.n	800393c <UART_SetConfig+0x2e0>
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <UART_SetConfig+0x2cc>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d4:	d01a      	beq.n	800390c <UART_SetConfig+0x2b0>
 80038d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038da:	d81b      	bhi.n	8003914 <UART_SetConfig+0x2b8>
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d00c      	beq.n	80038fc <UART_SetConfig+0x2a0>
 80038e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e6:	d815      	bhi.n	8003914 <UART_SetConfig+0x2b8>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <UART_SetConfig+0x298>
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f0:	d008      	beq.n	8003904 <UART_SetConfig+0x2a8>
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x2b8>
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e022      	b.n	8003942 <UART_SetConfig+0x2e6>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e01e      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003904:	2304      	movs	r3, #4
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e01a      	b.n	8003942 <UART_SetConfig+0x2e6>
 800390c:	2308      	movs	r3, #8
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e016      	b.n	8003942 <UART_SetConfig+0x2e6>
 8003914:	2310      	movs	r3, #16
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e012      	b.n	8003942 <UART_SetConfig+0x2e6>
 800391c:	efff69f3 	.word	0xefff69f3
 8003920:	40008000 	.word	0x40008000
 8003924:	40013800 	.word	0x40013800
 8003928:	40021000 	.word	0x40021000
 800392c:	40004400 	.word	0x40004400
 8003930:	40004800 	.word	0x40004800
 8003934:	40004c00 	.word	0x40004c00
 8003938:	40005000 	.word	0x40005000
 800393c:	2310      	movs	r3, #16
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a9f      	ldr	r2, [pc, #636]	; (8003bc4 <UART_SetConfig+0x568>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d17a      	bne.n	8003a42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800394c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003950:	2b08      	cmp	r3, #8
 8003952:	d824      	bhi.n	800399e <UART_SetConfig+0x342>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <UART_SetConfig+0x300>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003981 	.word	0x08003981
 8003960:	0800399f 	.word	0x0800399f
 8003964:	08003989 	.word	0x08003989
 8003968:	0800399f 	.word	0x0800399f
 800396c:	0800398f 	.word	0x0800398f
 8003970:	0800399f 	.word	0x0800399f
 8003974:	0800399f 	.word	0x0800399f
 8003978:	0800399f 	.word	0x0800399f
 800397c:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7ff f8c6 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003984:	61f8      	str	r0, [r7, #28]
        break;
 8003986:	e010      	b.n	80039aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <UART_SetConfig+0x56c>)
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e00d      	b.n	80039aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7ff f827 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003992:	61f8      	str	r0, [r7, #28]
        break;
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	61fb      	str	r3, [r7, #28]
        break;
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80fb 	beq.w	8003ba8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d305      	bcc.n	80039ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d903      	bls.n	80039d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039d4:	e0e8      	b.n	8003ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2200      	movs	r2, #0
 80039da:	461c      	mov	r4, r3
 80039dc:	4615      	mov	r5, r2
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	022b      	lsls	r3, r5, #8
 80039e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039ec:	0222      	lsls	r2, r4, #8
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	6849      	ldr	r1, [r1, #4]
 80039f2:	0849      	lsrs	r1, r1, #1
 80039f4:	2000      	movs	r0, #0
 80039f6:	4688      	mov	r8, r1
 80039f8:	4681      	mov	r9, r0
 80039fa:	eb12 0a08 	adds.w	sl, r2, r8
 80039fe:	eb43 0b09 	adc.w	fp, r3, r9
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a10:	4650      	mov	r0, sl
 8003a12:	4659      	mov	r1, fp
 8003a14:	f7fc fbd8 	bl	80001c8 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a26:	d308      	bcc.n	8003a3a <UART_SetConfig+0x3de>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2e:	d204      	bcs.n	8003a3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e0b6      	b.n	8003ba8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a40:	e0b2      	b.n	8003ba8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d15e      	bne.n	8003b0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d828      	bhi.n	8003aa6 <UART_SetConfig+0x44a>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x400>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003aa7 	.word	0x08003aa7
 8003a6c:	08003a97 	.word	0x08003a97
 8003a70:	08003aa7 	.word	0x08003aa7
 8003a74:	08003aa7 	.word	0x08003aa7
 8003a78:	08003aa7 	.word	0x08003aa7
 8003a7c:	08003a9f 	.word	0x08003a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a80:	f7ff f846 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003a84:	61f8      	str	r0, [r7, #28]
        break;
 8003a86:	e014      	b.n	8003ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a88:	f7ff f858 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8003a8c:	61f8      	str	r0, [r7, #28]
        break;
 8003a8e:	e010      	b.n	8003ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a90:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <UART_SetConfig+0x56c>)
 8003a92:	61fb      	str	r3, [r7, #28]
        break;
 8003a94:	e00d      	b.n	8003ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a96:	f7fe ffa3 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003a9a:	61f8      	str	r0, [r7, #28]
        break;
 8003a9c:	e009      	b.n	8003ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa2:	61fb      	str	r3, [r7, #28]
        break;
 8003aa4:	e005      	b.n	8003ab2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d077      	beq.n	8003ba8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005a      	lsls	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d916      	bls.n	8003b02 <UART_SetConfig+0x4a6>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d212      	bcs.n	8003b02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f023 030f 	bic.w	r3, r3, #15
 8003ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	8afa      	ldrh	r2, [r7, #22]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	e052      	b.n	8003ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b08:	e04e      	b.n	8003ba8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d827      	bhi.n	8003b62 <UART_SetConfig+0x506>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x4bc>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe ffe8 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003b40:	61f8      	str	r0, [r7, #28]
        break;
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fffa 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8003b48:	61f8      	str	r0, [r7, #28]
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <UART_SetConfig+0x56c>)
 8003b4e:	61fb      	str	r3, [r7, #28]
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe ff45 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003b56:	61f8      	str	r0, [r7, #28]
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	61fb      	str	r3, [r7, #28]
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d019      	beq.n	8003ba8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	085a      	lsrs	r2, r3, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d909      	bls.n	8003ba2 <UART_SetConfig+0x546>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d205      	bcs.n	8003ba2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e002      	b.n	8003ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	; 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	00f42400 	.word	0x00f42400

08003bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cca:	d10a      	bne.n	8003ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b098      	sub	sp, #96	; 0x60
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d20:	f7fc ff88 	bl	8000c34 <HAL_GetTick>
 8003d24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d12e      	bne.n	8003d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f88c 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d021      	beq.n	8003d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d62:	653b      	str	r3, [r7, #80]	; 0x50
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e6      	bne.n	8003d4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e062      	b.n	8003e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d149      	bne.n	8003e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f856 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03c      	beq.n	8003e34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e6      	bne.n	8003dba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3308      	adds	r3, #8
 8003df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e011      	b.n	8003e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3758      	adds	r7, #88	; 0x58
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	e049      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d045      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fc fedb 	bl	8000c34 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e048      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d031      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d110      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f838 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e029      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d111      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f81e 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0a6      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b095      	sub	sp, #84	; 0x54
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	643b      	str	r3, [r7, #64]	; 0x40
 8003f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d118      	bne.n	8003fd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6979      	ldr	r1, [r7, #20]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fea:	bf00      	nop
 8003fec:	3754      	adds	r7, #84	; 0x54
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <memset>:
 8003ff6:	4402      	add	r2, r0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d100      	bne.n	8004000 <memset+0xa>
 8003ffe:	4770      	bx	lr
 8004000:	f803 1b01 	strb.w	r1, [r3], #1
 8004004:	e7f9      	b.n	8003ffa <memset+0x4>
	...

08004008 <__libc_init_array>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4d0d      	ldr	r5, [pc, #52]	; (8004040 <__libc_init_array+0x38>)
 800400c:	4c0d      	ldr	r4, [pc, #52]	; (8004044 <__libc_init_array+0x3c>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	2600      	movs	r6, #0
 8004014:	42a6      	cmp	r6, r4
 8004016:	d109      	bne.n	800402c <__libc_init_array+0x24>
 8004018:	4d0b      	ldr	r5, [pc, #44]	; (8004048 <__libc_init_array+0x40>)
 800401a:	4c0c      	ldr	r4, [pc, #48]	; (800404c <__libc_init_array+0x44>)
 800401c:	f000 f818 	bl	8004050 <_init>
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	2600      	movs	r6, #0
 8004026:	42a6      	cmp	r6, r4
 8004028:	d105      	bne.n	8004036 <__libc_init_array+0x2e>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004030:	4798      	blx	r3
 8004032:	3601      	adds	r6, #1
 8004034:	e7ee      	b.n	8004014 <__libc_init_array+0xc>
 8004036:	f855 3b04 	ldr.w	r3, [r5], #4
 800403a:	4798      	blx	r3
 800403c:	3601      	adds	r6, #1
 800403e:	e7f2      	b.n	8004026 <__libc_init_array+0x1e>
 8004040:	080040b8 	.word	0x080040b8
 8004044:	080040b8 	.word	0x080040b8
 8004048:	080040b8 	.word	0x080040b8
 800404c:	080040bc 	.word	0x080040bc

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
