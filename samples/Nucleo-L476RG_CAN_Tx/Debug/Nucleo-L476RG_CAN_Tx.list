
Nucleo-L476RG_CAN_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08004020  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004020  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c51d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b81  00000000  00000000  0002c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b0  00000000  00000000  0002eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025257  00000000  00000000  0002f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba4a  00000000  00000000  0005452f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6457  00000000  00000000  0005ff79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028d0  00000000  00000000  001463d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00148ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fa4 	.word	0x08003fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fa4 	.word	0x08003fa4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailbox;

int datacheck = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d10b      	bne.n	80004ee <HAL_GPIO_EXTI_Callback+0x2a>
		TxData[0] = 100; // ms Delay
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004d8:	2264      	movs	r2, #100	; 0x64
 80004da:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10;  // loop rep
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004de:	220a      	movs	r2, #10
 80004e0:	705a      	strb	r2, [r3, #1]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_GPIO_EXTI_Callback+0x38>)
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80004e6:	4906      	ldr	r1, [pc, #24]	; (8000500 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <HAL_GPIO_EXTI_Callback+0x40>)
 80004ea:	f000 fda6 	bl	800103a <HAL_CAN_AddTxMessage>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000010c 	.word	0x2000010c
 80004fc:	2000011c 	.word	0x2000011c
 8000500:	200000d8 	.word	0x200000d8
 8000504:	20000028 	.word	0x20000028

08000508 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000514:	2100      	movs	r1, #0
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fe5f 	bl	80011da <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2){
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d102      	bne.n	800052a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		datacheck = 1;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
	}
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000114 	.word	0x20000114
 8000538:	200000f0 	.word	0x200000f0
 800053c:	20000120 	.word	0x20000120

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 facf 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f841 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f913 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f8e1 	bl	8000718 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000556:	f000 f88b 	bl	8000670 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800055a:	4819      	ldr	r0, [pc, #100]	; (80005c0 <main+0x80>)
 800055c:	f000 fd29 	bl	8000fb2 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000560:	2102      	movs	r1, #2
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <main+0x80>)
 8000564:	f000 ff5b 	bl	800141e <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2; // data length
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0x84>)
 800056a:	2202      	movs	r2, #2
 800056c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0x84>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0x84>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0x84>)
 800057c:	f240 4246 	movw	r2, #1094	; 0x446
 8000580:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (datacheck){
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0x88>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0fb      	beq.n	8000582 <main+0x42>
		  // blink the LED
		  for (int i = 0; i<RxData[1]; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00c      	b.n	80005aa <main+0x6a>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000590:	2120      	movs	r1, #32
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 fc6b 	bl	8001e70 <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x8c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fb1e 	bl	8000be0 <HAL_Delay>
		  for (int i = 0; i<RxData[1]; i++){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x8c>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	dbec      	blt.n	8000590 <main+0x50>
		  }

		  datacheck = 0;
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <main+0x88>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
	  if (datacheck){
 80005bc:	e7e1      	b.n	8000582 <main+0x42>
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028
 80005c4:	200000d8 	.word	0x200000d8
 80005c8:	20000120 	.word	0x20000120
 80005cc:	20000114 	.word	0x20000114

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fcb3 	bl	8003f4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f001 fc7b 	bl	8001ef0 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f928 	bl	8000854 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800061a:	2314      	movs	r3, #20
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061e:	2307      	movs	r3, #7
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fcb4 	bl	8001f9c <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800063a:	f000 f90b 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2104      	movs	r1, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f87c 	bl	8002754 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 f8f7 	bl	8000854 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3758      	adds	r7, #88	; 0x58
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_CAN1_Init+0xa0>)
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <MX_CAN1_Init+0xa4>)
 800067a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_CAN1_Init+0xa0>)
 800067e:	2220      	movs	r2, #32
 8000680:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_CAN1_Init+0xa0>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_CAN1_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_CAN1_Init+0xa0>)
 8000690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000694:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_CAN1_Init+0xa0>)
 8000698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800069c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_CAN1_Init+0xa0>)
 80006c4:	f000 fab0 	bl	8000c28 <HAL_CAN_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006ce:	f000 f8c1 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006d6:	2312      	movs	r3, #18
 80006d8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5; // ID of external ECU (ie CANduino)
 80006de:	f242 0360 	movw	r3, #8288	; 0x2060
 80006e2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80006e8:	f242 0360 	movw	r3, #8288	; 0x2060
 80006ec:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80006fa:	2314      	movs	r3, #20
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4803      	ldr	r0, [pc, #12]	; (8000710 <MX_CAN1_Init+0xa0>)
 8000704:	f000 fb8b 	bl	8000e1e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40006400 	.word	0x40006400

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	f002 feda 	bl	8003514 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f875 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000050 	.word	0x20000050
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MX_GPIO_Init+0xd4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_GPIO_Init+0xd4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_GPIO_Init+0xd4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f001 fb23 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000800:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000812:	f001 f96b 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000816:	2320      	movs	r3, #32
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f001 f95c 	bl	8001aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f001 f920 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f001 f939 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d131      	bne.n	800092e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_CAN_MspInit+0x94>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800090c:	2309      	movs	r3, #9
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f8e7 	bl	8001aec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2014      	movs	r0, #20
 8000924:	f001 f8ab 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000928:	2014      	movs	r0, #20
 800092a:	f001 f8c4 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40006400 	.word	0x40006400
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ac      	sub	sp, #176	; 0xb0
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2288      	movs	r2, #136	; 0x88
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f003 faf2 	bl	8003f4a <memset>
  if(huart->Instance==USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <HAL_UART_MspInit+0xb0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d13b      	bne.n	80009e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f90d 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000988:	f7ff ff64 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000996:	6593      	str	r3, [r2, #88]	; 0x58
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0xb4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009bc:	230c      	movs	r3, #12
 80009be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d4:	2307      	movs	r3, #7
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 f882 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	37b0      	adds	r7, #176	; 0xb0
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f8ac 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <CAN1_RX0_IRQHandler+0x10>)
 8000a52:	f000 fd0a 	bl	800146a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000028 	.word	0x20000028

08000a60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a68:	f001 fa1c 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 fa4b 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fd3b 	bl	8000540 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000acc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	20000128 	.word	0x20000128

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_Init+0x3c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_Init+0x3c>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 ffb2 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f80f 	bl	8000b28 <HAL_InitTick>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	e001      	b.n	8000b1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b16:	f7ff fea3 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d023      	beq.n	8000b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_InitTick+0x70>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 ffbd 	bl	8001ad2 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10f      	bne.n	8000b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d809      	bhi.n	8000b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 ff87 	bl	8001a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0x74>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e007      	b.n	8000b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e001      	b.n	8000b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000124 	.word	0x20000124

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000124 	.word	0x20000124

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e0ed      	b.n	8000e16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe2e 	bl	80008a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0201 	orr.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c5c:	f7ff ffb4 	bl	8000bc8 <HAL_GetTick>
 8000c60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c62:	e012      	b.n	8000c8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c64:	f7ff ffb0 	bl	8000bc8 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d90b      	bls.n	8000c8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2205      	movs	r2, #5
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0c5      	b.n	8000e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0e5      	beq.n	8000c64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0202 	bic.w	r2, r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca8:	f7ff ff8e 	bl	8000bc8 <HAL_GetTick>
 8000cac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cae:	e012      	b.n	8000cd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb0:	f7ff ff8a 	bl	8000bc8 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d90b      	bls.n	8000cd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e09f      	b.n	8000e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e5      	bne.n	8000cb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7e1b      	ldrb	r3, [r3, #24]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d108      	bne.n	8000cfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e007      	b.n	8000d0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7e5b      	ldrb	r3, [r3, #25]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e9b      	ldrb	r3, [r3, #26]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d108      	bne.n	8000d52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0220 	orr.w	r2, r2, #32
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0220 	bic.w	r2, r2, #32
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7edb      	ldrb	r3, [r3, #27]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0210 	bic.w	r2, r2, #16
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0210 	orr.w	r2, r2, #16
 8000d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7f1b      	ldrb	r3, [r3, #28]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d108      	bne.n	8000da6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0208 	orr.w	r2, r2, #8
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0208 	bic.w	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f5b      	ldrb	r3, [r3, #29]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d108      	bne.n	8000dd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0204 	orr.w	r2, r2, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0204 	bic.w	r2, r2, #4
 8000dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	ea42 0103 	orr.w	r1, r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e36:	7cfb      	ldrb	r3, [r7, #19]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <HAL_CAN_ConfigFilter+0x26>
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	f040 80aa 	bne.w	8000f98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d123      	bne.n	8000ec6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ea0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3248      	adds	r2, #72	; 0x48
 8000ea6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ebc:	6979      	ldr	r1, [r7, #20]
 8000ebe:	3348      	adds	r3, #72	; 0x48
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d122      	bne.n	8000f14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3248      	adds	r2, #72	; 0x48
 8000ef4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f0a:	6979      	ldr	r1, [r7, #20]
 8000f0c:	3348      	adds	r3, #72	; 0x48
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f5a:	e007      	b.n	8000f6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d107      	bne.n	8000f84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f8a:	f023 0201 	bic.w	r2, r3, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e006      	b.n	8000fa6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
  }
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d12e      	bne.n	8001024 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fde:	f7ff fdf3 	bl	8000bc8 <HAL_GetTick>
 8000fe2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fe4:	e012      	b.n	800100c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe6:	f7ff fdef 	bl	8000bc8 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b0a      	cmp	r3, #10
 8000ff2:	d90b      	bls.n	800100c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2205      	movs	r2, #5
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e012      	b.n	8001032 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1e5      	bne.n	8000fe6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e006      	b.n	8001032 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
  }
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800103a:	b480      	push	{r7}
 800103c:	b089      	sub	sp, #36	; 0x24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001058:	7ffb      	ldrb	r3, [r7, #31]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d003      	beq.n	8001066 <HAL_CAN_AddTxMessage+0x2c>
 800105e:	7ffb      	ldrb	r3, [r7, #31]
 8001060:	2b02      	cmp	r3, #2
 8001062:	f040 80ad 	bne.w	80011c0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10a      	bne.n	8001086 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001076:	2b00      	cmp	r3, #0
 8001078:	d105      	bne.n	8001086 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8095 	beq.w	80011b0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	0e1b      	lsrs	r3, r3, #24
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001090:	2201      	movs	r2, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	409a      	lsls	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10d      	bne.n	80010be <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ac:	68f9      	ldr	r1, [r7, #12]
 80010ae:	6809      	ldr	r1, [r1, #0]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3318      	adds	r3, #24
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	440b      	add	r3, r1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e00f      	b.n	80010de <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3318      	adds	r3, #24
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	440b      	add	r3, r1
 80010dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	3304      	adds	r3, #4
 80010f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	7d1b      	ldrb	r3, [r3, #20]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d111      	bne.n	800111e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3318      	adds	r3, #24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	6811      	ldr	r1, [r2, #0]
 800110e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3318      	adds	r3, #24
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	440b      	add	r3, r1
 800111a:	3304      	adds	r3, #4
 800111c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3307      	adds	r3, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	061a      	lsls	r2, r3, #24
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3306      	adds	r3, #6
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3305      	adds	r3, #5
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	4313      	orrs	r3, r2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	3204      	adds	r2, #4
 800113e:	7812      	ldrb	r2, [r2, #0]
 8001140:	4610      	mov	r0, r2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	6811      	ldr	r1, [r2, #0]
 8001146:	ea43 0200 	orr.w	r2, r3, r0
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	440b      	add	r3, r1
 8001150:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001154:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3303      	adds	r3, #3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	061a      	lsls	r2, r3, #24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3302      	adds	r3, #2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4313      	orrs	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4610      	mov	r0, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	6811      	ldr	r1, [r2, #0]
 800117c:	ea43 0200 	orr.w	r2, r3, r0
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800118a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3318      	adds	r3, #24
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	6811      	ldr	r1, [r2, #0]
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3318      	adds	r3, #24
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e00e      	b.n	80011ce <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e006      	b.n	80011ce <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
  }
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011da:	b480      	push	{r7}
 80011dc:	b087      	sub	sp, #28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_GetRxMessage+0x24>
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	f040 8103 	bne.w	8001404 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10e      	bne.n	8001222 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0f7      	b.n	8001412 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0e8      	b.n	8001412 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	331b      	adds	r3, #27
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0204 	and.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	331b      	adds	r3, #27
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0d5b      	lsrs	r3, r3, #21
 800126e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e00b      	b.n	8001290 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	331b      	adds	r3, #27
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0202 	and.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2208      	movs	r2, #8
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	e00b      	b.n	80012de <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	331b      	adds	r3, #27
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 020f 	and.w	r2, r3, #15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	331b      	adds	r3, #27
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	3304      	adds	r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	331b      	adds	r3, #27
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0a1a      	lsrs	r2, r3, #8
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0c1a      	lsrs	r2, r3, #16
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3302      	adds	r3, #2
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0e1a      	lsrs	r2, r3, #24
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3303      	adds	r3, #3
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0a1a      	lsrs	r2, r3, #8
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3305      	adds	r3, #5
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0c1a      	lsrs	r2, r3, #16
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3306      	adds	r3, #6
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0e1a      	lsrs	r2, r3, #24
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3307      	adds	r3, #7
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	e006      	b.n	8001412 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d002      	beq.n	800143c <HAL_CAN_ActivateNotification+0x1e>
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d109      	bne.n	8001450 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6959      	ldr	r1, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e006      	b.n	800145e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
  }
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b08a      	sub	sp, #40	; 0x28
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d07c      	beq.n	80015aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f983 	bl	80017d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80014d2:	e016      	b.n	8001502 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	e00c      	b.n	8001502 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	e002      	b.n	8001502 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f989 	bl	8001814 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d024      	beq.n	8001556 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f963 	bl	80017ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001526:	e016      	b.n	8001556 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e00c      	b.n	8001556 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e002      	b.n	8001556 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f969 	bl	8001828 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d024      	beq.n	80015aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001568:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f943 	bl	8001800 <HAL_CAN_TxMailbox2CompleteCallback>
 800157a:	e016      	b.n	80015aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e00c      	b.n	80015aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
 80015a2:	e002      	b.n	80015aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f949 	bl	800183c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2210      	movs	r2, #16
 80015cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00b      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2208      	movs	r2, #8
 80015e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f930 	bl	8001850 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe ff7d 	bl	8000508 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001628:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2208      	movs	r2, #8
 800164c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f912 	bl	8001878 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8f9 	bl	8001864 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2210      	movs	r2, #16
 800168c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f8fc 	bl	800188c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2208      	movs	r2, #8
 80016ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8f5 	bl	80018a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d07b      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d072      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001724:	2b00      	cmp	r3, #0
 8001726:	d043      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03e      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001738:	2b60      	cmp	r3, #96	; 0x60
 800173a:	d02b      	beq.n	8001794 <HAL_CAN_IRQHandler+0x32a>
 800173c:	2b60      	cmp	r3, #96	; 0x60
 800173e:	d82e      	bhi.n	800179e <HAL_CAN_IRQHandler+0x334>
 8001740:	2b50      	cmp	r3, #80	; 0x50
 8001742:	d022      	beq.n	800178a <HAL_CAN_IRQHandler+0x320>
 8001744:	2b50      	cmp	r3, #80	; 0x50
 8001746:	d82a      	bhi.n	800179e <HAL_CAN_IRQHandler+0x334>
 8001748:	2b40      	cmp	r3, #64	; 0x40
 800174a:	d019      	beq.n	8001780 <HAL_CAN_IRQHandler+0x316>
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d826      	bhi.n	800179e <HAL_CAN_IRQHandler+0x334>
 8001750:	2b30      	cmp	r3, #48	; 0x30
 8001752:	d010      	beq.n	8001776 <HAL_CAN_IRQHandler+0x30c>
 8001754:	2b30      	cmp	r3, #48	; 0x30
 8001756:	d822      	bhi.n	800179e <HAL_CAN_IRQHandler+0x334>
 8001758:	2b10      	cmp	r3, #16
 800175a:	d002      	beq.n	8001762 <HAL_CAN_IRQHandler+0x2f8>
 800175c:	2b20      	cmp	r3, #32
 800175e:	d005      	beq.n	800176c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001760:	e01d      	b.n	800179e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800176a:	e019      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001774:	e014      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f043 0320 	orr.w	r3, r3, #32
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800177e:	e00f      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001788:	e00a      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001792:	e005      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800179c:	e000      	b.n	80017a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800179e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f872 	bl	80018b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e17f      	b.n	8001dfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8171 	beq.w	8001df6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d118      	bne.n	8001bcc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ac 	beq.w	8001df6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb6:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x242>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x338>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x23e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x33c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x23a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x340>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x236>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x344>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x232>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_GPIO_Init+0x348>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_GPIO_Init+0x34c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x22a>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d40:	4937      	ldr	r1, [pc, #220]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f47f ae78 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	48000400 	.word	0x48000400
 8001e28:	48000800 	.word	0x48000800
 8001e2c:	48000c00 	.word	0x48000c00
 8001e30:	48001000 	.word	0x48001000
 8001e34:	48001400 	.word	0x48001400
 8001e38:	48001800 	.word	0x48001800
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43d9      	mvns	r1, r3
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	400b      	ands	r3, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fafe 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_PWREx_GetVoltageRange+0x18>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efe:	d130      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d038      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2232      	movs	r2, #50	; 0x32
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	e002      	b.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d102      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f2      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d110      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e00f      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d007      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f78:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000
 8001f94:	20000000 	.word	0x20000000
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e3ca      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b97      	ldr	r3, [pc, #604]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b94      	ldr	r3, [pc, #592]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80e4 	beq.w	8002198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4a>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	f040 808b 	bne.w	80020f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 8087 	bne.w	80020f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe6:	4b89      	ldr	r3, [pc, #548]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x62>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e3a2      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_RCC_OscConfig+0x7c>
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	e005      	b.n	8002024 <HAL_RCC_OscConfig+0x88>
 8002018:	4b7c      	ldr	r3, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002024:	4293      	cmp	r3, r2
 8002026:	d223      	bcs.n	8002070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fd55 	bl	8002adc <RCC_SetFlashLatencyFromMSIRange>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e383      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203c:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	496d      	ldr	r1, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4968      	ldr	r1, [pc, #416]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e025      	b.n	80020bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4960      	ldr	r1, [pc, #384]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	495b      	ldr	r1, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fd15 	bl	8002adc <RCC_SetFlashLatencyFromMSIRange>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e343      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020bc:	f000 fc4a 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4950      	ldr	r1, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_RCC_OscConfig+0x278>)
 80020da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020dc:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fd21 	bl	8000b28 <HAL_InitTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d052      	beq.n	8002196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	e327      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d032      	beq.n	8002162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a42      	ldr	r2, [pc, #264]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002108:	f7fe fd5e 	bl	8000bc8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002110:	f7fe fd5a 	bl	8000bc8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e310      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4931      	ldr	r1, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	492c      	ldr	r1, [pc, #176]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e01a      	b.n	8002198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800216e:	f7fe fd2b 	bl	8000bc8 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002176:	f7fe fd27 	bl	8000bc8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e2dd      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x1da>
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d074      	beq.n	800228e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x21a>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d10e      	bne.n	80021ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d064      	beq.n	800228c <HAL_RCC_OscConfig+0x2f0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d160      	bne.n	800228c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2ba      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x24a>
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e026      	b.n	8002234 <HAL_RCC_OscConfig+0x298>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ee:	d115      	bne.n	800221c <HAL_RCC_OscConfig+0x280>
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <HAL_RCC_OscConfig+0x270>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x298>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	08003fbc 	.word	0x08003fbc
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004
 800221c:	4ba0      	ldr	r3, [pc, #640]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a9f      	ldr	r2, [pc, #636]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b9d      	ldr	r3, [pc, #628]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a9c      	ldr	r2, [pc, #624]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fcc4 	bl	8000bc8 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fcc0 	bl	8000bc8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e276      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x2a8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fcb0 	bl	8000bc8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fcac 	bl	8000bc8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e262      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x2d0>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d060      	beq.n	800235c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x310>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d119      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d116      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_OscConfig+0x328>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e23f      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	4973      	ldr	r1, [pc, #460]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	e040      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fc6b 	bl	8000bc8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fc67 	bl	8000bc8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e21d      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002308:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	495f      	ldr	r1, [pc, #380]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	e018      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fc47 	bl	8000bc8 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fc43 	bl	8000bc8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1f9      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002350:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe fc22 	bl	8000bc8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fc1e 	bl	8000bc8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1d4      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x3ec>
 80023a8:	e01b      	b.n	80023e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b0:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fc05 	bl	8000bc8 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fc01 	bl	8000bc8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1b7      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a6 	beq.w	800253c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCC_OscConfig+0x508>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d118      	bne.n	800245a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCC_OscConfig+0x508>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_RCC_OscConfig+0x508>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002434:	f7fe fbc8 	bl	8000bc8 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fbc4 	bl	8000bc8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e17a      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x508>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x4d8>
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002472:	e029      	b.n	80024c8 <HAL_RCC_OscConfig+0x52c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d115      	bne.n	80024a8 <HAL_RCC_OscConfig+0x50c>
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_RCC_OscConfig+0x504>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x52c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
 80024a8:	4b9c      	ldr	r3, [pc, #624]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	4a9b      	ldr	r2, [pc, #620]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b8:	4b98      	ldr	r3, [pc, #608]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	4a97      	ldr	r2, [pc, #604]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fb7a 	bl	8000bc8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe fb76 	bl	8000bc8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e12a      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ed      	beq.n	80024d8 <HAL_RCC_OscConfig+0x53c>
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fb63 	bl	8000bc8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fb5f 	bl	8000bc8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e113      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	4b7f      	ldr	r3, [pc, #508]	; (800271c <HAL_RCC_OscConfig+0x780>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ed      	bne.n	8002506 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b7a      	ldr	r3, [pc, #488]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a79      	ldr	r2, [pc, #484]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80fe 	beq.w	8002742 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	2b02      	cmp	r3, #2
 800254c:	f040 80d0 	bne.w	80026f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002550:	4b72      	ldr	r3, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d130      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	3b01      	subs	r3, #1
 8002570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d127      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002590:	2a07      	cmp	r2, #7
 8002592:	bf14      	ite	ne
 8002594:	2201      	movne	r2, #1
 8002596:	2200      	moveq	r2, #0
 8002598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d06e      	beq.n	80026a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d069      	beq.n	80026a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0ad      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f4:	f7fe fae8 	bl	8000bc8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fae4 	bl	8000bc8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e09a      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b40      	ldr	r3, [pc, #256]	; (800271c <HAL_RCC_OscConfig+0x780>)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_OscConfig+0x784>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262a:	3a01      	subs	r2, #1
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002634:	0212      	lsls	r2, r2, #8
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
 8002640:	0552      	lsls	r2, r2, #21
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0652      	lsls	r2, r2, #25
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002654:	0912      	lsrs	r2, r2, #4
 8002656:	0452      	lsls	r2, r2, #17
 8002658:	430a      	orrs	r2, r1
 800265a:	4930      	ldr	r1, [pc, #192]	; (800271c <HAL_RCC_OscConfig+0x780>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2d      	ldr	r2, [pc, #180]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_OscConfig+0x780>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a2a      	ldr	r2, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002678:	f7fe faa6 	bl	8000bc8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe faa2 	bl	8000bc8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e058      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_RCC_OscConfig+0x780>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269e:	e050      	b.n	8002742 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04f      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d148      	bne.n	8002742 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c8:	f7fe fa7e 	bl	8000bc8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fa7a 	bl	8000bc8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e030      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x734>
 80026ee:	e028      	b.n	8002742 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d023      	beq.n	800273e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_OscConfig+0x780>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fa61 	bl	8000bc8 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	e00c      	b.n	8002724 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fa5d 	bl	8000bc8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d905      	bls.n	8002724 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
 800271c:	40021000 	.word	0x40021000
 8002720:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x7b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ec      	bne.n	800270a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x7b0>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4905      	ldr	r1, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x7b0>)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x7b4>)
 8002738:	4013      	ands	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e001      	b.n	8002742 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	feeefffc 	.word	0xfeeefffc

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0e7      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4970      	ldr	r1, [pc, #448]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0cf      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4960      	ldr	r1, [pc, #384]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04c      	beq.n	800286c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d121      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a6      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e09a      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e08e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e086      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4943      	ldr	r1, [pc, #268]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283c:	f7fe f9c4 	bl	8000bc8 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe f9c0 	bl	8000bc8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e06e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002884:	429a      	cmp	r2, r3
 8002886:	d208      	bcs.n	800289a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	492b      	ldr	r1, [pc, #172]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d210      	bcs.n	80028ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	4923      	ldr	r1, [pc, #140]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e036      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4910      	ldr	r1, [pc, #64]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002908:	f000 f824 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	490b      	ldr	r1, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1f4>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1f8>)
 8002926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1fc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f8fb 	bl	8000b28 <HAL_InitTick>
 8002932:	4603      	mov	r3, r0
 8002934:	72fb      	strb	r3, [r7, #11]

  return status;
 8002936:	7afb      	ldrb	r3, [r7, #11]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	08003fbc 	.word	0x08003fbc
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d11e      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e004      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80029da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d134      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0xa6>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d003      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0xac>
 80029f8:	e005      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029fc:	617b      	str	r3, [r7, #20]
      break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a02:	617b      	str	r3, [r7, #20]
      break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	617b      	str	r3, [r7, #20]
      break;
 8002a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	fb03 f202 	mul.w	r2, r3, r2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	0e5b      	lsrs	r3, r3, #25
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08003fd4 	.word	0x08003fd4
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08003fcc 	.word	0x08003fcc

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab4:	f7ff ffda 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4904      	ldr	r1, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08003fcc 	.word	0x08003fcc

08002adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002af4:	f7ff f9ee 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002af8:	6178      	str	r0, [r7, #20]
 8002afa:	e014      	b.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6593      	str	r3, [r2, #88]	; 0x58
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b14:	f7ff f9de 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d10b      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d919      	bls.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2ba0      	cmp	r3, #160	; 0xa0
 8002b38:	d902      	bls.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e013      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b40:	2301      	movs	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e010      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d902      	bls.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	e00a      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d102      	bne.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b58:	2302      	movs	r3, #2
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e004      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d101      	bne.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b64:	2301      	movs	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 0207 	bic.w	r2, r3, #7
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d041      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc0:	d02a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc6:	d824      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bd2:	d81e      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bde:	e018      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a85      	ldr	r2, [pc, #532]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bec:	e015      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fabb 	bl	8003170 <RCCEx_PLLSAI1_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bfe:	e00c      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3320      	adds	r3, #32
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fba6 	bl	8003358 <RCCEx_PLLSAI2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c10:	e003      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	74fb      	strb	r3, [r7, #19]
      break;
 8002c16:	e000      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	4973      	ldr	r1, [pc, #460]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c36:	e001      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d041      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c50:	d02a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c56:	d824      	bhi.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c62:	d81e      	bhi.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c6e:	e018      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c70:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c7c:	e015      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fa73 	bl	8003170 <RCCEx_PLLSAI1_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c8e:	e00c      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3320      	adds	r3, #32
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fb5e 	bl	8003358 <RCCEx_PLLSAI2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ca0:	e003      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cb0:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cbe:	494f      	ldr	r1, [pc, #316]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cc6:	e001      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a0 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1c:	f7fd ff54 	bl	8000bc8 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d22:	e009      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fd ff50 	bl	8000bc8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	74fb      	strb	r3, [r7, #19]
        break;
 8002d36:	e005      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ef      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d15c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d019      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d74:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fd ff0f 	bl	8000bc8 <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fd ff0b 	bl	8000bc8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc4:	e006      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ec      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dea:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002df2:	e009      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
 8002df8:	e006      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b9e      	ldr	r3, [pc, #632]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a9d      	ldr	r2, [pc, #628]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4b98      	ldr	r3, [pc, #608]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	4994      	ldr	r1, [pc, #592]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 020c 	bic.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	498c      	ldr	r1, [pc, #560]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e6a:	4b87      	ldr	r3, [pc, #540]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4983      	ldr	r1, [pc, #524]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	497b      	ldr	r1, [pc, #492]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eae:	4b76      	ldr	r3, [pc, #472]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	4972      	ldr	r1, [pc, #456]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed0:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	496a      	ldr	r1, [pc, #424]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	4961      	ldr	r1, [pc, #388]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f14:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	4959      	ldr	r1, [pc, #356]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	4950      	ldr	r1, [pc, #320]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f58:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	4948      	ldr	r1, [pc, #288]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	493f      	ldr	r1, [pc, #252]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d028      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f9c:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	4937      	ldr	r1, [pc, #220]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fba:	d106      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
 8002fc8:	e011      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd2:	d10c      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f8c8 	bl	8003170 <RCCEx_PLLSAI1_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d028      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	491f      	ldr	r1, [pc, #124]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003018:	d106      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003024:	60d3      	str	r3, [r2, #12]
 8003026:	e011      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f899 	bl	8003170 <RCCEx_PLLSAI1_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02b      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003076:	d109      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a02      	ldr	r2, [pc, #8]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	e014      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f867 	bl	8003170 <RCCEx_PLLSAI1_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02f      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ca:	4928      	ldr	r1, [pc, #160]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030da:	d10d      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	2102      	movs	r1, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f844 	bl	8003170 <RCCEx_PLLSAI1_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d014      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	74bb      	strb	r3, [r7, #18]
 80030f6:	e011      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003100:	d10c      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3320      	adds	r3, #32
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f925 	bl	8003358 <RCCEx_PLLSAI2_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003136:	490d      	ldr	r1, [pc, #52]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315a:	4904      	ldr	r1, [pc, #16]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003162:	7cbb      	ldrb	r3, [r7, #18]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000

08003170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800317e:	4b75      	ldr	r3, [pc, #468]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d10d      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
       ||
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031a2:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
       ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d047      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e044      	b.n	8003246 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d018      	beq.n	80031f6 <RCCEx_PLLSAI1_Config+0x86>
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d825      	bhi.n	8003214 <RCCEx_PLLSAI1_Config+0xa4>
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d002      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x62>
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d009      	beq.n	80031e4 <RCCEx_PLLSAI1_Config+0x74>
 80031d0:	e020      	b.n	8003214 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d2:	4b60      	ldr	r3, [pc, #384]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11d      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e2:	e01a      	b.n	800321a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e4:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e013      	b.n	800321e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003212:	e006      	b.n	8003222 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e004      	b.n	8003224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321a:	bf00      	nop
 800321c:	e002      	b.n	8003224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003222:	bf00      	nop
    }

    if(status == HAL_OK)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10d      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	430b      	orrs	r3, r1
 8003240:	4944      	ldr	r1, [pc, #272]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d17d      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a40      	ldr	r2, [pc, #256]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fd fcb6 	bl	8000bc8 <HAL_GetTick>
 800325c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800325e:	e009      	b.n	8003274 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003260:	f7fd fcb2 	bl	8000bc8 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	73fb      	strb	r3, [r7, #15]
        break;
 8003272:	e005      	b.n	8003280 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003274:	4b37      	ldr	r3, [pc, #220]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ef      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d160      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	0912      	lsrs	r2, r2, #4
 80032a4:	0452      	lsls	r2, r2, #17
 80032a6:	430a      	orrs	r2, r1
 80032a8:	492a      	ldr	r1, [pc, #168]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	610b      	str	r3, [r1, #16]
 80032ae:	e027      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d112      	bne.n	80032dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6892      	ldr	r2, [r2, #8]
 80032c6:	0211      	lsls	r1, r2, #8
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6912      	ldr	r2, [r2, #16]
 80032cc:	0852      	lsrs	r2, r2, #1
 80032ce:	3a01      	subs	r2, #1
 80032d0:	0552      	lsls	r2, r2, #21
 80032d2:	430a      	orrs	r2, r1
 80032d4:	491f      	ldr	r1, [pc, #124]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	610b      	str	r3, [r1, #16]
 80032da:	e011      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	0211      	lsls	r1, r2, #8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6952      	ldr	r2, [r2, #20]
 80032f2:	0852      	lsrs	r2, r2, #1
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0652      	lsls	r2, r2, #25
 80032f8:	430a      	orrs	r2, r1
 80032fa:	4916      	ldr	r1, [pc, #88]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800330a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fd fc5c 	bl	8000bc8 <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003312:	e009      	b.n	8003328 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003314:	f7fd fc58 	bl	8000bc8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d902      	bls.n	8003328 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	73fb      	strb	r3, [r7, #15]
          break;
 8003326:	e005      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4904      	ldr	r1, [pc, #16]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000

08003358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003366:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003372:	4b67      	ldr	r3, [pc, #412]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0203 	and.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d10d      	bne.n	800339e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
       ||
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800338a:	4b61      	ldr	r3, [pc, #388]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
       ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d047      	beq.n	800342e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	e044      	b.n	800342e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d018      	beq.n	80033de <RCCEx_PLLSAI2_Config+0x86>
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d825      	bhi.n	80033fc <RCCEx_PLLSAI2_Config+0xa4>
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d002      	beq.n	80033ba <RCCEx_PLLSAI2_Config+0x62>
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d009      	beq.n	80033cc <RCCEx_PLLSAI2_Config+0x74>
 80033b8:	e020      	b.n	80033fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11d      	bne.n	8003402 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ca:	e01a      	b.n	8003402 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d116      	bne.n	8003406 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033dc:	e013      	b.n	8003406 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033fa:	e006      	b.n	800340a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003400:	e004      	b.n	800340c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800340a:	bf00      	nop
    }

    if(status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	430b      	orrs	r3, r1
 8003428:	4939      	ldr	r1, [pc, #228]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d167      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a35      	ldr	r2, [pc, #212]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003440:	f7fd fbc2 	bl	8000bc8 <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003446:	e009      	b.n	800345c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003448:	f7fd fbbe 	bl	8000bc8 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
        break;
 800345a:	e005      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ef      	bne.n	8003448 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d14a      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003474:	4b26      	ldr	r3, [pc, #152]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	0211      	lsls	r1, r2, #8
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	0912      	lsrs	r2, r2, #4
 800348c:	0452      	lsls	r2, r2, #17
 800348e:	430a      	orrs	r2, r1
 8003490:	491f      	ldr	r1, [pc, #124]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	614b      	str	r3, [r1, #20]
 8003496:	e011      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6892      	ldr	r2, [r2, #8]
 80034a8:	0211      	lsls	r1, r2, #8
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6912      	ldr	r2, [r2, #16]
 80034ae:	0852      	lsrs	r2, r2, #1
 80034b0:	3a01      	subs	r2, #1
 80034b2:	0652      	lsls	r2, r2, #25
 80034b4:	430a      	orrs	r2, r1
 80034b6:	4916      	ldr	r1, [pc, #88]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fd fb7e 	bl	8000bc8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ce:	e009      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d0:	f7fd fb7a 	bl	8000bc8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	73fb      	strb	r3, [r7, #15]
          break;
 80034e2:	e005      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ef      	beq.n	80034d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4904      	ldr	r1, [pc, #16]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e040      	b.n	80035a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fa02 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fae0 	bl	8003b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f825 	bl	80035b0 <UART_SetConfig>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e01b      	b.n	80035a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800357e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800358e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb5f 	bl	8003c64 <UART_CheckIdleState>
 80035a6:	4603      	mov	r3, r0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b4:	b08a      	sub	sp, #40	; 0x28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4ba4      	ldr	r3, [pc, #656]	; (8003870 <UART_SetConfig+0x2c0>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a99      	ldr	r2, [pc, #612]	; (8003874 <UART_SetConfig+0x2c4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	4313      	orrs	r3, r2
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a90      	ldr	r2, [pc, #576]	; (8003878 <UART_SetConfig+0x2c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d126      	bne.n	8003688 <UART_SetConfig+0xd8>
 800363a:	4b90      	ldr	r3, [pc, #576]	; (800387c <UART_SetConfig+0x2cc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d81b      	bhi.n	8003680 <UART_SetConfig+0xd0>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0xa0>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003661 	.word	0x08003661
 8003654:	08003671 	.word	0x08003671
 8003658:	08003669 	.word	0x08003669
 800365c:	08003679 	.word	0x08003679
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003666:	e116      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003668:	2302      	movs	r3, #2
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e112      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003670:	2304      	movs	r3, #4
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e10e      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003678:	2308      	movs	r3, #8
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e10a      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003680:	2310      	movs	r3, #16
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e106      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7c      	ldr	r2, [pc, #496]	; (8003880 <UART_SetConfig+0x2d0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d138      	bne.n	8003704 <UART_SetConfig+0x154>
 8003692:	4b7a      	ldr	r3, [pc, #488]	; (800387c <UART_SetConfig+0x2cc>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d82d      	bhi.n	80036fc <UART_SetConfig+0x14c>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0xf8>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036fd 	.word	0x080036fd
 80036b0:	080036fd 	.word	0x080036fd
 80036b4:	080036fd 	.word	0x080036fd
 80036b8:	080036ed 	.word	0x080036ed
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	080036fd 	.word	0x080036fd
 80036c4:	080036fd 	.word	0x080036fd
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e0d8      	b.n	8003896 <UART_SetConfig+0x2e6>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e0d4      	b.n	8003896 <UART_SetConfig+0x2e6>
 80036ec:	2304      	movs	r3, #4
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e0d0      	b.n	8003896 <UART_SetConfig+0x2e6>
 80036f4:	2308      	movs	r3, #8
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e0cc      	b.n	8003896 <UART_SetConfig+0x2e6>
 80036fc:	2310      	movs	r3, #16
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e0c8      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <UART_SetConfig+0x2d4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d125      	bne.n	800375a <UART_SetConfig+0x1aa>
 800370e:	4b5b      	ldr	r3, [pc, #364]	; (800387c <UART_SetConfig+0x2cc>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d016      	beq.n	800374a <UART_SetConfig+0x19a>
 800371c:	2b30      	cmp	r3, #48	; 0x30
 800371e:	d818      	bhi.n	8003752 <UART_SetConfig+0x1a2>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d00a      	beq.n	800373a <UART_SetConfig+0x18a>
 8003724:	2b20      	cmp	r3, #32
 8003726:	d814      	bhi.n	8003752 <UART_SetConfig+0x1a2>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <UART_SetConfig+0x182>
 800372c:	2b10      	cmp	r3, #16
 800372e:	d008      	beq.n	8003742 <UART_SetConfig+0x192>
 8003730:	e00f      	b.n	8003752 <UART_SetConfig+0x1a2>
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003738:	e0ad      	b.n	8003896 <UART_SetConfig+0x2e6>
 800373a:	2302      	movs	r3, #2
 800373c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003740:	e0a9      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003742:	2304      	movs	r3, #4
 8003744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003748:	e0a5      	b.n	8003896 <UART_SetConfig+0x2e6>
 800374a:	2308      	movs	r3, #8
 800374c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003750:	e0a1      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003752:	2310      	movs	r3, #16
 8003754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003758:	e09d      	b.n	8003896 <UART_SetConfig+0x2e6>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a4a      	ldr	r2, [pc, #296]	; (8003888 <UART_SetConfig+0x2d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d125      	bne.n	80037b0 <UART_SetConfig+0x200>
 8003764:	4b45      	ldr	r3, [pc, #276]	; (800387c <UART_SetConfig+0x2cc>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800376e:	2bc0      	cmp	r3, #192	; 0xc0
 8003770:	d016      	beq.n	80037a0 <UART_SetConfig+0x1f0>
 8003772:	2bc0      	cmp	r3, #192	; 0xc0
 8003774:	d818      	bhi.n	80037a8 <UART_SetConfig+0x1f8>
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d00a      	beq.n	8003790 <UART_SetConfig+0x1e0>
 800377a:	2b80      	cmp	r3, #128	; 0x80
 800377c:	d814      	bhi.n	80037a8 <UART_SetConfig+0x1f8>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <UART_SetConfig+0x1d8>
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d008      	beq.n	8003798 <UART_SetConfig+0x1e8>
 8003786:	e00f      	b.n	80037a8 <UART_SetConfig+0x1f8>
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e082      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003790:	2302      	movs	r3, #2
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e07e      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003798:	2304      	movs	r3, #4
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e07a      	b.n	8003896 <UART_SetConfig+0x2e6>
 80037a0:	2308      	movs	r3, #8
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e076      	b.n	8003896 <UART_SetConfig+0x2e6>
 80037a8:	2310      	movs	r3, #16
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e072      	b.n	8003896 <UART_SetConfig+0x2e6>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a35      	ldr	r2, [pc, #212]	; (800388c <UART_SetConfig+0x2dc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d12a      	bne.n	8003810 <UART_SetConfig+0x260>
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <UART_SetConfig+0x2cc>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c8:	d01a      	beq.n	8003800 <UART_SetConfig+0x250>
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ce:	d81b      	bhi.n	8003808 <UART_SetConfig+0x258>
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d4:	d00c      	beq.n	80037f0 <UART_SetConfig+0x240>
 80037d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037da:	d815      	bhi.n	8003808 <UART_SetConfig+0x258>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <UART_SetConfig+0x238>
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d008      	beq.n	80037f8 <UART_SetConfig+0x248>
 80037e6:	e00f      	b.n	8003808 <UART_SetConfig+0x258>
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e052      	b.n	8003896 <UART_SetConfig+0x2e6>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e04e      	b.n	8003896 <UART_SetConfig+0x2e6>
 80037f8:	2304      	movs	r3, #4
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e04a      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003800:	2308      	movs	r3, #8
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e046      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003808:	2310      	movs	r3, #16
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e042      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <UART_SetConfig+0x2c4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d13a      	bne.n	8003890 <UART_SetConfig+0x2e0>
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <UART_SetConfig+0x2cc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003828:	d01a      	beq.n	8003860 <UART_SetConfig+0x2b0>
 800382a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382e:	d81b      	bhi.n	8003868 <UART_SetConfig+0x2b8>
 8003830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003834:	d00c      	beq.n	8003850 <UART_SetConfig+0x2a0>
 8003836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383a:	d815      	bhi.n	8003868 <UART_SetConfig+0x2b8>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <UART_SetConfig+0x298>
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d008      	beq.n	8003858 <UART_SetConfig+0x2a8>
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x2b8>
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e022      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e01e      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e01a      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e016      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e012      	b.n	8003896 <UART_SetConfig+0x2e6>
 8003870:	efff69f3 	.word	0xefff69f3
 8003874:	40008000 	.word	0x40008000
 8003878:	40013800 	.word	0x40013800
 800387c:	40021000 	.word	0x40021000
 8003880:	40004400 	.word	0x40004400
 8003884:	40004800 	.word	0x40004800
 8003888:	40004c00 	.word	0x40004c00
 800388c:	40005000 	.word	0x40005000
 8003890:	2310      	movs	r3, #16
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a9f      	ldr	r2, [pc, #636]	; (8003b18 <UART_SetConfig+0x568>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d17a      	bne.n	8003996 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d824      	bhi.n	80038f2 <UART_SetConfig+0x342>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0x300>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	080038f3 	.word	0x080038f3
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038f3 	.word	0x080038f3
 80038c0:	080038e3 	.word	0x080038e3
 80038c4:	080038f3 	.word	0x080038f3
 80038c8:	080038f3 	.word	0x080038f3
 80038cc:	080038f3 	.word	0x080038f3
 80038d0:	080038eb 	.word	0x080038eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7ff f8d6 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 80038d8:	61f8      	str	r0, [r7, #28]
        break;
 80038da:	e010      	b.n	80038fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <UART_SetConfig+0x56c>)
 80038de:	61fb      	str	r3, [r7, #28]
        break;
 80038e0:	e00d      	b.n	80038fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e2:	f7ff f837 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80038e6:	61f8      	str	r0, [r7, #28]
        break;
 80038e8:	e009      	b.n	80038fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ee:	61fb      	str	r3, [r7, #28]
        break;
 80038f0:	e005      	b.n	80038fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80fb 	beq.w	8003afc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	429a      	cmp	r2, r3
 8003914:	d305      	bcc.n	8003922 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	429a      	cmp	r2, r3
 8003920:	d903      	bls.n	800392a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003928:	e0e8      	b.n	8003afc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2200      	movs	r2, #0
 800392e:	461c      	mov	r4, r3
 8003930:	4615      	mov	r5, r2
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	022b      	lsls	r3, r5, #8
 800393c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003940:	0222      	lsls	r2, r4, #8
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	6849      	ldr	r1, [r1, #4]
 8003946:	0849      	lsrs	r1, r1, #1
 8003948:	2000      	movs	r0, #0
 800394a:	4688      	mov	r8, r1
 800394c:	4681      	mov	r9, r0
 800394e:	eb12 0a08 	adds.w	sl, r2, r8
 8003952:	eb43 0b09 	adc.w	fp, r3, r9
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003964:	4650      	mov	r0, sl
 8003966:	4659      	mov	r1, fp
 8003968:	f7fc fc2e 	bl	80001c8 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d308      	bcc.n	800398e <UART_SetConfig+0x3de>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	d204      	bcs.n	800398e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	e0b6      	b.n	8003afc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003994:	e0b2      	b.n	8003afc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d15e      	bne.n	8003a5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d828      	bhi.n	80039fa <UART_SetConfig+0x44a>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x400>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7ff f856 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 80039d8:	61f8      	str	r0, [r7, #28]
        break;
 80039da:	e014      	b.n	8003a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7ff f868 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 80039e0:	61f8      	str	r0, [r7, #28]
        break;
 80039e2:	e010      	b.n	8003a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <UART_SetConfig+0x56c>)
 80039e6:	61fb      	str	r3, [r7, #28]
        break;
 80039e8:	e00d      	b.n	8003a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe ffb3 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80039ee:	61f8      	str	r0, [r7, #28]
        break;
 80039f0:	e009      	b.n	8003a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	61fb      	str	r3, [r7, #28]
        break;
 80039f8:	e005      	b.n	8003a06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d077      	beq.n	8003afc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	005a      	lsls	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	441a      	add	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d916      	bls.n	8003a56 <UART_SetConfig+0x4a6>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2e:	d212      	bcs.n	8003a56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f023 030f 	bic.w	r3, r3, #15
 8003a38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	8afb      	ldrh	r3, [r7, #22]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	8afa      	ldrh	r2, [r7, #22]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e052      	b.n	8003afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a5c:	e04e      	b.n	8003afc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d827      	bhi.n	8003ab6 <UART_SetConfig+0x506>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x4bc>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ab7 	.word	0x08003ab7
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003ab7 	.word	0x08003ab7
 8003a88:	08003ab7 	.word	0x08003ab7
 8003a8c:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe fff8 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8003a94:	61f8      	str	r0, [r7, #28]
        break;
 8003a96:	e014      	b.n	8003ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7ff f80a 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	61f8      	str	r0, [r7, #28]
        break;
 8003a9e:	e010      	b.n	8003ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <UART_SetConfig+0x56c>)
 8003aa2:	61fb      	str	r3, [r7, #28]
        break;
 8003aa4:	e00d      	b.n	8003ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe ff55 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8003aaa:	61f8      	str	r0, [r7, #28]
        break;
 8003aac:	e009      	b.n	8003ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	61fb      	str	r3, [r7, #28]
        break;
 8003ab4:	e005      	b.n	8003ac2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d019      	beq.n	8003afc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	085a      	lsrs	r2, r3, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d909      	bls.n	8003af6 <UART_SetConfig+0x546>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d205      	bcs.n	8003af6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
 8003af4:	e002      	b.n	8003afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	; 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	40008000 	.word	0x40008000
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1e:	d10a      	bne.n	8003c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b098      	sub	sp, #96	; 0x60
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c74:	f7fc ffa8 	bl	8000bc8 <HAL_GetTick>
 8003c78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d12e      	bne.n	8003ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f88c 	bl	8003db4 <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d021      	beq.n	8003ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e062      	b.n	8003dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d149      	bne.n	8003d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f856 	bl	8003db4 <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d03c      	beq.n	8003d88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e6      	bne.n	8003d0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e5      	bne.n	8003d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e011      	b.n	8003dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3758      	adds	r7, #88	; 0x58
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc4:	e049      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d045      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fc fefb 	bl	8000bc8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e048      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d031      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d110      	bne.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f838 	bl	8003e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2208      	movs	r2, #8
 8003e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e029      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d111      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f81e 	bl	8003e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d0a6      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b095      	sub	sp, #84	; 0x54
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e6      	bne.n	8003e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d118      	bne.n	8003f2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0310 	bic.w	r3, r3, #16
 8003f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6979      	ldr	r1, [r7, #20]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	613b      	str	r3, [r7, #16]
   return(result);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f3e:	bf00      	nop
 8003f40:	3754      	adds	r7, #84	; 0x54
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <memset>:
 8003f4a:	4402      	add	r2, r0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d100      	bne.n	8003f54 <memset+0xa>
 8003f52:	4770      	bx	lr
 8003f54:	f803 1b01 	strb.w	r1, [r3], #1
 8003f58:	e7f9      	b.n	8003f4e <memset+0x4>
	...

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4d0d      	ldr	r5, [pc, #52]	; (8003f94 <__libc_init_array+0x38>)
 8003f60:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f62:	1b64      	subs	r4, r4, r5
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	2600      	movs	r6, #0
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	4d0b      	ldr	r5, [pc, #44]	; (8003f9c <__libc_init_array+0x40>)
 8003f6e:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <__libc_init_array+0x44>)
 8003f70:	f000 f818 	bl	8003fa4 <_init>
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	2600      	movs	r6, #0
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	0800400c 	.word	0x0800400c
 8003f98:	0800400c 	.word	0x0800400c
 8003f9c:	0800400c 	.word	0x0800400c
 8003fa0:	08004010 	.word	0x08004010

08003fa4 <_init>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr

08003fb0 <_fini>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr
